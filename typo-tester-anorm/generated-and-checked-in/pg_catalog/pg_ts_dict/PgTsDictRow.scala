/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_dict

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTsDictRow(
  oid: PgTsDictId,
  dictname: String,
  dictnamespace: /* oid */ Long,
  dictowner: /* oid */ Long,
  dicttemplate: /* oid */ Long,
  dictinitoption: Option[String]
)

object PgTsDictRow {
  def rowParser(idx: Int): RowParser[PgTsDictRow] =
    RowParser[PgTsDictRow] { row =>
      Success(
        PgTsDictRow(
          oid = row[PgTsDictId](idx + 0),
          dictname = row[String](idx + 1),
          dictnamespace = row[/* oid */ Long](idx + 2),
          dictowner = row[/* oid */ Long](idx + 3),
          dicttemplate = row[/* oid */ Long](idx + 4),
          dictinitoption = row[Option[String]](idx + 5)
        )
      )
    }
  implicit val oFormat: OFormat[PgTsDictRow] = new OFormat[PgTsDictRow]{
    override def writes(o: PgTsDictRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "dictname" -> o.dictname,
        "dictnamespace" -> o.dictnamespace,
        "dictowner" -> o.dictowner,
        "dicttemplate" -> o.dicttemplate,
        "dictinitoption" -> o.dictinitoption
      )
  
    override def reads(json: JsValue): JsResult[PgTsDictRow] = {
      JsResult.fromTry(
        Try(
          PgTsDictRow(
            oid = json.\("oid").as[PgTsDictId],
            dictname = json.\("dictname").as[String],
            dictnamespace = json.\("dictnamespace").as[/* oid */ Long],
            dictowner = json.\("dictowner").as[/* oid */ Long],
            dicttemplate = json.\("dicttemplate").as[/* oid */ Long],
            dictinitoption = json.\("dictinitoption").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
