/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_vacuum

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatProgressVacuumViewRow(
  pid: Option[Int],
  datid: Option[/* oid */ Long],
  datname: Option[String],
  relid: Option[/* oid */ Long],
  phase: Option[String],
  heapBlksTotal: Option[Long],
  heapBlksScanned: Option[Long],
  heapBlksVacuumed: Option[Long],
  indexVacuumCount: Option[Long],
  maxDeadTuples: Option[Long],
  numDeadTuples: Option[Long]
)

object PgStatProgressVacuumViewRow {
  def rowParser(idx: Int): RowParser[PgStatProgressVacuumViewRow] =
    RowParser[PgStatProgressVacuumViewRow] { row =>
      Success(
        PgStatProgressVacuumViewRow(
          pid = row[Option[Int]](idx + 0),
          datid = row[Option[/* oid */ Long]](idx + 1),
          datname = row[Option[String]](idx + 2),
          relid = row[Option[/* oid */ Long]](idx + 3),
          phase = row[Option[String]](idx + 4),
          heapBlksTotal = row[Option[Long]](idx + 5),
          heapBlksScanned = row[Option[Long]](idx + 6),
          heapBlksVacuumed = row[Option[Long]](idx + 7),
          indexVacuumCount = row[Option[Long]](idx + 8),
          maxDeadTuples = row[Option[Long]](idx + 9),
          numDeadTuples = row[Option[Long]](idx + 10)
        )
      )
    }
  implicit val oFormat: OFormat[PgStatProgressVacuumViewRow] = new OFormat[PgStatProgressVacuumViewRow]{
    override def writes(o: PgStatProgressVacuumViewRow): JsObject =
      Json.obj(
        "pid" -> o.pid,
        "datid" -> o.datid,
        "datname" -> o.datname,
        "relid" -> o.relid,
        "phase" -> o.phase,
        "heap_blks_total" -> o.heapBlksTotal,
        "heap_blks_scanned" -> o.heapBlksScanned,
        "heap_blks_vacuumed" -> o.heapBlksVacuumed,
        "index_vacuum_count" -> o.indexVacuumCount,
        "max_dead_tuples" -> o.maxDeadTuples,
        "num_dead_tuples" -> o.numDeadTuples
      )
  
    override def reads(json: JsValue): JsResult[PgStatProgressVacuumViewRow] = {
      JsResult.fromTry(
        Try(
          PgStatProgressVacuumViewRow(
            pid = json.\("pid").toOption.map(_.as[Int]),
            datid = json.\("datid").toOption.map(_.as[/* oid */ Long]),
            datname = json.\("datname").toOption.map(_.as[String]),
            relid = json.\("relid").toOption.map(_.as[/* oid */ Long]),
            phase = json.\("phase").toOption.map(_.as[String]),
            heapBlksTotal = json.\("heap_blks_total").toOption.map(_.as[Long]),
            heapBlksScanned = json.\("heap_blks_scanned").toOption.map(_.as[Long]),
            heapBlksVacuumed = json.\("heap_blks_vacuumed").toOption.map(_.as[Long]),
            indexVacuumCount = json.\("index_vacuum_count").toOption.map(_.as[Long]),
            maxDeadTuples = json.\("max_dead_tuples").toOption.map(_.as[Long]),
            numDeadTuples = json.\("num_dead_tuples").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
