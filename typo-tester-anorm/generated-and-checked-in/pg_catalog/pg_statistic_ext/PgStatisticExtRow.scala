/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic_ext

import adventureworks.TypoInt2Vector
import adventureworks.TypoPgNodeTree
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatisticExtRow(
  oid: PgStatisticExtId,
  stxrelid: /* oid */ Long,
  stxname: String,
  stxnamespace: /* oid */ Long,
  stxowner: /* oid */ Long,
  stxstattarget: Int,
  stxkeys: TypoInt2Vector,
  stxkind: Array[String],
  stxexprs: Option[TypoPgNodeTree]
)

object PgStatisticExtRow {
  def rowParser(idx: Int): RowParser[PgStatisticExtRow] =
    RowParser[PgStatisticExtRow] { row =>
      Success(
        PgStatisticExtRow(
          oid = row[PgStatisticExtId](idx + 0),
          stxrelid = row[/* oid */ Long](idx + 1),
          stxname = row[String](idx + 2),
          stxnamespace = row[/* oid */ Long](idx + 3),
          stxowner = row[/* oid */ Long](idx + 4),
          stxstattarget = row[Int](idx + 5),
          stxkeys = row[TypoInt2Vector](idx + 6),
          stxkind = row[Array[String]](idx + 7),
          stxexprs = row[Option[TypoPgNodeTree]](idx + 8)
        )
      )
    }
  implicit val oFormat: OFormat[PgStatisticExtRow] = new OFormat[PgStatisticExtRow]{
    override def writes(o: PgStatisticExtRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "stxrelid" -> o.stxrelid,
        "stxname" -> o.stxname,
        "stxnamespace" -> o.stxnamespace,
        "stxowner" -> o.stxowner,
        "stxstattarget" -> o.stxstattarget,
        "stxkeys" -> o.stxkeys,
        "stxkind" -> o.stxkind,
        "stxexprs" -> o.stxexprs
      )
  
    override def reads(json: JsValue): JsResult[PgStatisticExtRow] = {
      JsResult.fromTry(
        Try(
          PgStatisticExtRow(
            oid = json.\("oid").as[PgStatisticExtId],
            stxrelid = json.\("stxrelid").as[/* oid */ Long],
            stxname = json.\("stxname").as[String],
            stxnamespace = json.\("stxnamespace").as[/* oid */ Long],
            stxowner = json.\("stxowner").as[/* oid */ Long],
            stxstattarget = json.\("stxstattarget").as[Int],
            stxkeys = json.\("stxkeys").as[TypoInt2Vector],
            stxkind = json.\("stxkind").as[Array[String]],
            stxexprs = json.\("stxexprs").toOption.map(_.as[TypoPgNodeTree])
          )
        )
      )
    }
  }
}
