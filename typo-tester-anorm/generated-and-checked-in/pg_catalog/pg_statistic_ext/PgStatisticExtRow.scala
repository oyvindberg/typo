/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic_ext

import adventureworks.TypoInt2Vector
import adventureworks.TypoPgNodeTree
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatisticExtRow(
  oid: PgStatisticExtId,
  stxrelid: /* oid */ Long,
  stxname: String,
  stxnamespace: /* oid */ Long,
  stxowner: /* oid */ Long,
  stxstattarget: Int,
  stxkeys: TypoInt2Vector,
  stxkind: Array[String],
  stxexprs: Option[TypoPgNodeTree]
)

object PgStatisticExtRow {
  implicit val reads: Reads[PgStatisticExtRow] = Reads[PgStatisticExtRow](json => JsResult.fromTry(
      Try(
        PgStatisticExtRow(
          oid = json.\("oid").as[PgStatisticExtId],
          stxrelid = json.\("stxrelid").as[/* oid */ Long],
          stxname = json.\("stxname").as[String],
          stxnamespace = json.\("stxnamespace").as[/* oid */ Long],
          stxowner = json.\("stxowner").as[/* oid */ Long],
          stxstattarget = json.\("stxstattarget").as[Int],
          stxkeys = json.\("stxkeys").as[TypoInt2Vector],
          stxkind = json.\("stxkind").as[Array[String]],
          stxexprs = json.\("stxexprs").toOption.map(_.as[TypoPgNodeTree])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatisticExtRow] = RowParser[PgStatisticExtRow] { row =>
    Success(
      PgStatisticExtRow(
        oid = row[PgStatisticExtId](idx + 0),
        stxrelid = row[/* oid */ Long](idx + 1),
        stxname = row[String](idx + 2),
        stxnamespace = row[/* oid */ Long](idx + 3),
        stxowner = row[/* oid */ Long](idx + 4),
        stxstattarget = row[Int](idx + 5),
        stxkeys = row[TypoInt2Vector](idx + 6),
        stxkind = row[Array[String]](idx + 7),
        stxexprs = row[Option[TypoPgNodeTree]](idx + 8)
      )
    )
  }
  implicit val writes: OWrites[PgStatisticExtRow] = OWrites[PgStatisticExtRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "stxrelid" -> Json.toJson(o.stxrelid),
      "stxname" -> Json.toJson(o.stxname),
      "stxnamespace" -> Json.toJson(o.stxnamespace),
      "stxowner" -> Json.toJson(o.stxowner),
      "stxstattarget" -> Json.toJson(o.stxstattarget),
      "stxkeys" -> Json.toJson(o.stxkeys),
      "stxkind" -> Json.toJson(o.stxkind),
      "stxexprs" -> Json.toJson(o.stxexprs)
    ))
  )
}
