/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_database

import anorm.RowParser
import anorm.Success
import java.time.OffsetDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatDatabaseViewRow(
  datid: Option[/* oid */ Long],
  datname: Option[String],
  numbackends: Option[Int],
  xactCommit: Option[Long],
  xactRollback: Option[Long],
  blksRead: Option[Long],
  blksHit: Option[Long],
  tupReturned: Option[Long],
  tupFetched: Option[Long],
  tupInserted: Option[Long],
  tupUpdated: Option[Long],
  tupDeleted: Option[Long],
  conflicts: Option[Long],
  tempFiles: Option[Long],
  tempBytes: Option[Long],
  deadlocks: Option[Long],
  checksumFailures: Option[Long],
  checksumLastFailure: Option[OffsetDateTime],
  blkReadTime: Option[Double],
  blkWriteTime: Option[Double],
  sessionTime: Option[Double],
  activeTime: Option[Double],
  idleInTransactionTime: Option[Double],
  sessions: Option[Long],
  sessionsAbandoned: Option[Long],
  sessionsFatal: Option[Long],
  sessionsKilled: Option[Long],
  statsReset: Option[OffsetDateTime]
)

object PgStatDatabaseViewRow {
  def rowParser(idx: Int): RowParser[PgStatDatabaseViewRow] =
    RowParser[PgStatDatabaseViewRow] { row =>
      Success(
        PgStatDatabaseViewRow(
          datid = row[Option[/* oid */ Long]](idx + 0),
          datname = row[Option[String]](idx + 1),
          numbackends = row[Option[Int]](idx + 2),
          xactCommit = row[Option[Long]](idx + 3),
          xactRollback = row[Option[Long]](idx + 4),
          blksRead = row[Option[Long]](idx + 5),
          blksHit = row[Option[Long]](idx + 6),
          tupReturned = row[Option[Long]](idx + 7),
          tupFetched = row[Option[Long]](idx + 8),
          tupInserted = row[Option[Long]](idx + 9),
          tupUpdated = row[Option[Long]](idx + 10),
          tupDeleted = row[Option[Long]](idx + 11),
          conflicts = row[Option[Long]](idx + 12),
          tempFiles = row[Option[Long]](idx + 13),
          tempBytes = row[Option[Long]](idx + 14),
          deadlocks = row[Option[Long]](idx + 15),
          checksumFailures = row[Option[Long]](idx + 16),
          checksumLastFailure = row[Option[OffsetDateTime]](idx + 17),
          blkReadTime = row[Option[Double]](idx + 18),
          blkWriteTime = row[Option[Double]](idx + 19),
          sessionTime = row[Option[Double]](idx + 20),
          activeTime = row[Option[Double]](idx + 21),
          idleInTransactionTime = row[Option[Double]](idx + 22),
          sessions = row[Option[Long]](idx + 23),
          sessionsAbandoned = row[Option[Long]](idx + 24),
          sessionsFatal = row[Option[Long]](idx + 25),
          sessionsKilled = row[Option[Long]](idx + 26),
          statsReset = row[Option[OffsetDateTime]](idx + 27)
        )
      )
    }
  implicit val oFormat: OFormat[PgStatDatabaseViewRow] = new OFormat[PgStatDatabaseViewRow]{
    override def writes(o: PgStatDatabaseViewRow): JsObject =
      Json.obj(
        "datid" -> o.datid,
        "datname" -> o.datname,
        "numbackends" -> o.numbackends,
        "xact_commit" -> o.xactCommit,
        "xact_rollback" -> o.xactRollback,
        "blks_read" -> o.blksRead,
        "blks_hit" -> o.blksHit,
        "tup_returned" -> o.tupReturned,
        "tup_fetched" -> o.tupFetched,
        "tup_inserted" -> o.tupInserted,
        "tup_updated" -> o.tupUpdated,
        "tup_deleted" -> o.tupDeleted,
        "conflicts" -> o.conflicts,
        "temp_files" -> o.tempFiles,
        "temp_bytes" -> o.tempBytes,
        "deadlocks" -> o.deadlocks,
        "checksum_failures" -> o.checksumFailures,
        "checksum_last_failure" -> o.checksumLastFailure,
        "blk_read_time" -> o.blkReadTime,
        "blk_write_time" -> o.blkWriteTime,
        "session_time" -> o.sessionTime,
        "active_time" -> o.activeTime,
        "idle_in_transaction_time" -> o.idleInTransactionTime,
        "sessions" -> o.sessions,
        "sessions_abandoned" -> o.sessionsAbandoned,
        "sessions_fatal" -> o.sessionsFatal,
        "sessions_killed" -> o.sessionsKilled,
        "stats_reset" -> o.statsReset
      )
  
    override def reads(json: JsValue): JsResult[PgStatDatabaseViewRow] = {
      JsResult.fromTry(
        Try(
          PgStatDatabaseViewRow(
            datid = json.\("datid").toOption.map(_.as[/* oid */ Long]),
            datname = json.\("datname").toOption.map(_.as[String]),
            numbackends = json.\("numbackends").toOption.map(_.as[Int]),
            xactCommit = json.\("xact_commit").toOption.map(_.as[Long]),
            xactRollback = json.\("xact_rollback").toOption.map(_.as[Long]),
            blksRead = json.\("blks_read").toOption.map(_.as[Long]),
            blksHit = json.\("blks_hit").toOption.map(_.as[Long]),
            tupReturned = json.\("tup_returned").toOption.map(_.as[Long]),
            tupFetched = json.\("tup_fetched").toOption.map(_.as[Long]),
            tupInserted = json.\("tup_inserted").toOption.map(_.as[Long]),
            tupUpdated = json.\("tup_updated").toOption.map(_.as[Long]),
            tupDeleted = json.\("tup_deleted").toOption.map(_.as[Long]),
            conflicts = json.\("conflicts").toOption.map(_.as[Long]),
            tempFiles = json.\("temp_files").toOption.map(_.as[Long]),
            tempBytes = json.\("temp_bytes").toOption.map(_.as[Long]),
            deadlocks = json.\("deadlocks").toOption.map(_.as[Long]),
            checksumFailures = json.\("checksum_failures").toOption.map(_.as[Long]),
            checksumLastFailure = json.\("checksum_last_failure").toOption.map(_.as[OffsetDateTime]),
            blkReadTime = json.\("blk_read_time").toOption.map(_.as[Double]),
            blkWriteTime = json.\("blk_write_time").toOption.map(_.as[Double]),
            sessionTime = json.\("session_time").toOption.map(_.as[Double]),
            activeTime = json.\("active_time").toOption.map(_.as[Double]),
            idleInTransactionTime = json.\("idle_in_transaction_time").toOption.map(_.as[Double]),
            sessions = json.\("sessions").toOption.map(_.as[Long]),
            sessionsAbandoned = json.\("sessions_abandoned").toOption.map(_.as[Long]),
            sessionsFatal = json.\("sessions_fatal").toOption.map(_.as[Long]),
            sessionsKilled = json.\("sessions_killed").toOption.map(_.as[Long]),
            statsReset = json.\("stats_reset").toOption.map(_.as[OffsetDateTime])
          )
        )
      )
    }
  }
}
