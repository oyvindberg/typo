/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_database

import adventureworks.TypoOffsetDateTime
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatDatabaseViewRow(
  datid: Option[/* oid */ Long],
  datname: Option[String],
  numbackends: Option[Int],
  xactCommit: Option[Long],
  xactRollback: Option[Long],
  blksRead: Option[Long],
  blksHit: Option[Long],
  tupReturned: Option[Long],
  tupFetched: Option[Long],
  tupInserted: Option[Long],
  tupUpdated: Option[Long],
  tupDeleted: Option[Long],
  conflicts: Option[Long],
  tempFiles: Option[Long],
  tempBytes: Option[Long],
  deadlocks: Option[Long],
  checksumFailures: Option[Long],
  checksumLastFailure: Option[TypoOffsetDateTime],
  blkReadTime: Option[Double],
  blkWriteTime: Option[Double],
  sessionTime: Option[Double],
  activeTime: Option[Double],
  idleInTransactionTime: Option[Double],
  sessions: Option[Long],
  sessionsAbandoned: Option[Long],
  sessionsFatal: Option[Long],
  sessionsKilled: Option[Long],
  statsReset: Option[TypoOffsetDateTime]
)

object PgStatDatabaseViewRow {
  implicit val reads: Reads[PgStatDatabaseViewRow] = Reads[PgStatDatabaseViewRow](json => JsResult.fromTry(
      Try(
        PgStatDatabaseViewRow(
          datid = json.\("datid").toOption.map(_.as[/* oid */ Long]),
          datname = json.\("datname").toOption.map(_.as[String]),
          numbackends = json.\("numbackends").toOption.map(_.as[Int]),
          xactCommit = json.\("xact_commit").toOption.map(_.as[Long]),
          xactRollback = json.\("xact_rollback").toOption.map(_.as[Long]),
          blksRead = json.\("blks_read").toOption.map(_.as[Long]),
          blksHit = json.\("blks_hit").toOption.map(_.as[Long]),
          tupReturned = json.\("tup_returned").toOption.map(_.as[Long]),
          tupFetched = json.\("tup_fetched").toOption.map(_.as[Long]),
          tupInserted = json.\("tup_inserted").toOption.map(_.as[Long]),
          tupUpdated = json.\("tup_updated").toOption.map(_.as[Long]),
          tupDeleted = json.\("tup_deleted").toOption.map(_.as[Long]),
          conflicts = json.\("conflicts").toOption.map(_.as[Long]),
          tempFiles = json.\("temp_files").toOption.map(_.as[Long]),
          tempBytes = json.\("temp_bytes").toOption.map(_.as[Long]),
          deadlocks = json.\("deadlocks").toOption.map(_.as[Long]),
          checksumFailures = json.\("checksum_failures").toOption.map(_.as[Long]),
          checksumLastFailure = json.\("checksum_last_failure").toOption.map(_.as[TypoOffsetDateTime]),
          blkReadTime = json.\("blk_read_time").toOption.map(_.as[Double]),
          blkWriteTime = json.\("blk_write_time").toOption.map(_.as[Double]),
          sessionTime = json.\("session_time").toOption.map(_.as[Double]),
          activeTime = json.\("active_time").toOption.map(_.as[Double]),
          idleInTransactionTime = json.\("idle_in_transaction_time").toOption.map(_.as[Double]),
          sessions = json.\("sessions").toOption.map(_.as[Long]),
          sessionsAbandoned = json.\("sessions_abandoned").toOption.map(_.as[Long]),
          sessionsFatal = json.\("sessions_fatal").toOption.map(_.as[Long]),
          sessionsKilled = json.\("sessions_killed").toOption.map(_.as[Long]),
          statsReset = json.\("stats_reset").toOption.map(_.as[TypoOffsetDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatDatabaseViewRow] = RowParser[PgStatDatabaseViewRow] { row =>
    Success(
      PgStatDatabaseViewRow(
        datid = row[Option[/* oid */ Long]](idx + 0),
        datname = row[Option[String]](idx + 1),
        numbackends = row[Option[Int]](idx + 2),
        xactCommit = row[Option[Long]](idx + 3),
        xactRollback = row[Option[Long]](idx + 4),
        blksRead = row[Option[Long]](idx + 5),
        blksHit = row[Option[Long]](idx + 6),
        tupReturned = row[Option[Long]](idx + 7),
        tupFetched = row[Option[Long]](idx + 8),
        tupInserted = row[Option[Long]](idx + 9),
        tupUpdated = row[Option[Long]](idx + 10),
        tupDeleted = row[Option[Long]](idx + 11),
        conflicts = row[Option[Long]](idx + 12),
        tempFiles = row[Option[Long]](idx + 13),
        tempBytes = row[Option[Long]](idx + 14),
        deadlocks = row[Option[Long]](idx + 15),
        checksumFailures = row[Option[Long]](idx + 16),
        checksumLastFailure = row[Option[TypoOffsetDateTime]](idx + 17),
        blkReadTime = row[Option[Double]](idx + 18),
        blkWriteTime = row[Option[Double]](idx + 19),
        sessionTime = row[Option[Double]](idx + 20),
        activeTime = row[Option[Double]](idx + 21),
        idleInTransactionTime = row[Option[Double]](idx + 22),
        sessions = row[Option[Long]](idx + 23),
        sessionsAbandoned = row[Option[Long]](idx + 24),
        sessionsFatal = row[Option[Long]](idx + 25),
        sessionsKilled = row[Option[Long]](idx + 26),
        statsReset = row[Option[TypoOffsetDateTime]](idx + 27)
      )
    )
  }
  implicit val writes: OWrites[PgStatDatabaseViewRow] = OWrites[PgStatDatabaseViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "datid" -> Json.toJson(o.datid),
      "datname" -> Json.toJson(o.datname),
      "numbackends" -> Json.toJson(o.numbackends),
      "xact_commit" -> Json.toJson(o.xactCommit),
      "xact_rollback" -> Json.toJson(o.xactRollback),
      "blks_read" -> Json.toJson(o.blksRead),
      "blks_hit" -> Json.toJson(o.blksHit),
      "tup_returned" -> Json.toJson(o.tupReturned),
      "tup_fetched" -> Json.toJson(o.tupFetched),
      "tup_inserted" -> Json.toJson(o.tupInserted),
      "tup_updated" -> Json.toJson(o.tupUpdated),
      "tup_deleted" -> Json.toJson(o.tupDeleted),
      "conflicts" -> Json.toJson(o.conflicts),
      "temp_files" -> Json.toJson(o.tempFiles),
      "temp_bytes" -> Json.toJson(o.tempBytes),
      "deadlocks" -> Json.toJson(o.deadlocks),
      "checksum_failures" -> Json.toJson(o.checksumFailures),
      "checksum_last_failure" -> Json.toJson(o.checksumLastFailure),
      "blk_read_time" -> Json.toJson(o.blkReadTime),
      "blk_write_time" -> Json.toJson(o.blkWriteTime),
      "session_time" -> Json.toJson(o.sessionTime),
      "active_time" -> Json.toJson(o.activeTime),
      "idle_in_transaction_time" -> Json.toJson(o.idleInTransactionTime),
      "sessions" -> Json.toJson(o.sessions),
      "sessions_abandoned" -> Json.toJson(o.sessionsAbandoned),
      "sessions_fatal" -> Json.toJson(o.sessionsFatal),
      "sessions_killed" -> Json.toJson(o.sessionsKilled),
      "stats_reset" -> Json.toJson(o.statsReset)
    ))
  )
}
