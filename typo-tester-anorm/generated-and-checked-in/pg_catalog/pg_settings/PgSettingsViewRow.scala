/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_settings

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgSettingsViewRow(
  name: Option[String],
  setting: Option[String],
  unit: Option[String],
  category: Option[String],
  shortDesc: Option[String],
  extraDesc: Option[String],
  context: Option[String],
  vartype: Option[String],
  source: Option[String],
  minVal: Option[String],
  maxVal: Option[String],
  enumvals: Option[Array[String]],
  bootVal: Option[String],
  resetVal: Option[String],
  sourcefile: Option[String],
  sourceline: Option[Int],
  pendingRestart: Option[Boolean]
)

object PgSettingsViewRow {
  def rowParser(idx: Int): RowParser[PgSettingsViewRow] =
    RowParser[PgSettingsViewRow] { row =>
      Success(
        PgSettingsViewRow(
          name = row[Option[String]](idx + 0),
          setting = row[Option[String]](idx + 1),
          unit = row[Option[String]](idx + 2),
          category = row[Option[String]](idx + 3),
          shortDesc = row[Option[String]](idx + 4),
          extraDesc = row[Option[String]](idx + 5),
          context = row[Option[String]](idx + 6),
          vartype = row[Option[String]](idx + 7),
          source = row[Option[String]](idx + 8),
          minVal = row[Option[String]](idx + 9),
          maxVal = row[Option[String]](idx + 10),
          enumvals = row[Option[Array[String]]](idx + 11),
          bootVal = row[Option[String]](idx + 12),
          resetVal = row[Option[String]](idx + 13),
          sourcefile = row[Option[String]](idx + 14),
          sourceline = row[Option[Int]](idx + 15),
          pendingRestart = row[Option[Boolean]](idx + 16)
        )
      )
    }
  implicit val oFormat: OFormat[PgSettingsViewRow] = new OFormat[PgSettingsViewRow]{
    override def writes(o: PgSettingsViewRow): JsObject =
      Json.obj(
        "name" -> o.name,
        "setting" -> o.setting,
        "unit" -> o.unit,
        "category" -> o.category,
        "short_desc" -> o.shortDesc,
        "extra_desc" -> o.extraDesc,
        "context" -> o.context,
        "vartype" -> o.vartype,
        "source" -> o.source,
        "min_val" -> o.minVal,
        "max_val" -> o.maxVal,
        "enumvals" -> o.enumvals,
        "boot_val" -> o.bootVal,
        "reset_val" -> o.resetVal,
        "sourcefile" -> o.sourcefile,
        "sourceline" -> o.sourceline,
        "pending_restart" -> o.pendingRestart
      )
  
    override def reads(json: JsValue): JsResult[PgSettingsViewRow] = {
      JsResult.fromTry(
        Try(
          PgSettingsViewRow(
            name = json.\("name").toOption.map(_.as[String]),
            setting = json.\("setting").toOption.map(_.as[String]),
            unit = json.\("unit").toOption.map(_.as[String]),
            category = json.\("category").toOption.map(_.as[String]),
            shortDesc = json.\("short_desc").toOption.map(_.as[String]),
            extraDesc = json.\("extra_desc").toOption.map(_.as[String]),
            context = json.\("context").toOption.map(_.as[String]),
            vartype = json.\("vartype").toOption.map(_.as[String]),
            source = json.\("source").toOption.map(_.as[String]),
            minVal = json.\("min_val").toOption.map(_.as[String]),
            maxVal = json.\("max_val").toOption.map(_.as[String]),
            enumvals = json.\("enumvals").toOption.map(_.as[Array[String]]),
            bootVal = json.\("boot_val").toOption.map(_.as[String]),
            resetVal = json.\("reset_val").toOption.map(_.as[String]),
            sourcefile = json.\("sourcefile").toOption.map(_.as[String]),
            sourceline = json.\("sourceline").toOption.map(_.as[Int]),
            pendingRestart = json.\("pending_restart").toOption.map(_.as[Boolean])
          )
        )
      )
    }
  }
}
