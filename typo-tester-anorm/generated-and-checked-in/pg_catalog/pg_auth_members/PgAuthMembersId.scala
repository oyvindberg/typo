/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_auth_members

import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Type for the composite primary key of table `pg_catalog.pg_auth_members` */
case class PgAuthMembersId(roleid: /* oid */ Long, member: /* oid */ Long)
object PgAuthMembersId {
  implicit val ordering: Ordering[PgAuthMembersId] = Ordering.by(x => (x.roleid, x.member))
  implicit val reads: Reads[PgAuthMembersId] = Reads[PgAuthMembersId](json => JsResult.fromTry(
      Try(
        PgAuthMembersId(
          roleid = json.\("roleid").as[/* oid */ Long],
          member = json.\("member").as[/* oid */ Long]
        )
      )
    ),
  )
  implicit val writes: OWrites[PgAuthMembersId] = OWrites[PgAuthMembersId](o =>
    new JsObject(ListMap[String, JsValue](
      "roleid" -> Json.toJson(o.roleid),
      "member" -> Json.toJson(o.member)
    ))
  )
}
