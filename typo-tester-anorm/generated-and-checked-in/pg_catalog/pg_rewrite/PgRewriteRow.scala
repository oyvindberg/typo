/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_rewrite

import adventureworks.TypoPgNodeTree
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgRewriteRow(
  oid: PgRewriteId,
  rulename: String,
  evClass: /* oid */ Long,
  evType: String,
  evEnabled: String,
  isInstead: Boolean,
  evQual: TypoPgNodeTree,
  evAction: TypoPgNodeTree
)

object PgRewriteRow {
  implicit val reads: Reads[PgRewriteRow] = Reads[PgRewriteRow](json => JsResult.fromTry(
      Try(
        PgRewriteRow(
          oid = json.\("oid").as[PgRewriteId],
          rulename = json.\("rulename").as[String],
          evClass = json.\("ev_class").as[/* oid */ Long],
          evType = json.\("ev_type").as[String],
          evEnabled = json.\("ev_enabled").as[String],
          isInstead = json.\("is_instead").as[Boolean],
          evQual = json.\("ev_qual").as[TypoPgNodeTree],
          evAction = json.\("ev_action").as[TypoPgNodeTree]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgRewriteRow] = RowParser[PgRewriteRow] { row =>
    Success(
      PgRewriteRow(
        oid = row[PgRewriteId](idx + 0),
        rulename = row[String](idx + 1),
        evClass = row[/* oid */ Long](idx + 2),
        evType = row[String](idx + 3),
        evEnabled = row[String](idx + 4),
        isInstead = row[Boolean](idx + 5),
        evQual = row[TypoPgNodeTree](idx + 6),
        evAction = row[TypoPgNodeTree](idx + 7)
      )
    )
  }
  implicit val writes: OWrites[PgRewriteRow] = OWrites[PgRewriteRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "rulename" -> Json.toJson(o.rulename),
      "ev_class" -> Json.toJson(o.evClass),
      "ev_type" -> Json.toJson(o.evType),
      "ev_enabled" -> Json.toJson(o.evEnabled),
      "is_instead" -> Json.toJson(o.isInstead),
      "ev_qual" -> Json.toJson(o.evQual),
      "ev_action" -> Json.toJson(o.evAction)
    ))
  )
}
