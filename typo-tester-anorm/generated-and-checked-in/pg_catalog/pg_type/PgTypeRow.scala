/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_type

import adventureworks.TypoAclItem
import adventureworks.TypoPgNodeTree
import adventureworks.TypoRegproc
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgTypeRow(
  oid: PgTypeId,
  typname: String,
  typnamespace: /* oid */ Long,
  typowner: /* oid */ Long,
  typlen: Int,
  typbyval: Boolean,
  typtype: String,
  typcategory: String,
  typispreferred: Boolean,
  typisdefined: Boolean,
  typdelim: String,
  typrelid: /* oid */ Long,
  typsubscript: TypoRegproc,
  typelem: /* oid */ Long,
  typarray: /* oid */ Long,
  typinput: TypoRegproc,
  typoutput: TypoRegproc,
  typreceive: TypoRegproc,
  typsend: TypoRegproc,
  typmodin: TypoRegproc,
  typmodout: TypoRegproc,
  typanalyze: TypoRegproc,
  typalign: String,
  typstorage: String,
  typnotnull: Boolean,
  typbasetype: /* oid */ Long,
  typtypmod: Int,
  typndims: Int,
  typcollation: /* oid */ Long,
  typdefaultbin: Option[TypoPgNodeTree],
  typdefault: Option[String],
  typacl: Option[Array[TypoAclItem]]
)

object PgTypeRow {
  implicit val reads: Reads[PgTypeRow] = Reads[PgTypeRow](json => JsResult.fromTry(
      Try(
        PgTypeRow(
          oid = json.\("oid").as(PgTypeId.reads),
          typname = json.\("typname").as(Reads.StringReads),
          typnamespace = json.\("typnamespace").as(Reads.LongReads),
          typowner = json.\("typowner").as(Reads.LongReads),
          typlen = json.\("typlen").as(Reads.IntReads),
          typbyval = json.\("typbyval").as(Reads.BooleanReads),
          typtype = json.\("typtype").as(Reads.StringReads),
          typcategory = json.\("typcategory").as(Reads.StringReads),
          typispreferred = json.\("typispreferred").as(Reads.BooleanReads),
          typisdefined = json.\("typisdefined").as(Reads.BooleanReads),
          typdelim = json.\("typdelim").as(Reads.StringReads),
          typrelid = json.\("typrelid").as(Reads.LongReads),
          typsubscript = json.\("typsubscript").as(TypoRegproc.reads),
          typelem = json.\("typelem").as(Reads.LongReads),
          typarray = json.\("typarray").as(Reads.LongReads),
          typinput = json.\("typinput").as(TypoRegproc.reads),
          typoutput = json.\("typoutput").as(TypoRegproc.reads),
          typreceive = json.\("typreceive").as(TypoRegproc.reads),
          typsend = json.\("typsend").as(TypoRegproc.reads),
          typmodin = json.\("typmodin").as(TypoRegproc.reads),
          typmodout = json.\("typmodout").as(TypoRegproc.reads),
          typanalyze = json.\("typanalyze").as(TypoRegproc.reads),
          typalign = json.\("typalign").as(Reads.StringReads),
          typstorage = json.\("typstorage").as(Reads.StringReads),
          typnotnull = json.\("typnotnull").as(Reads.BooleanReads),
          typbasetype = json.\("typbasetype").as(Reads.LongReads),
          typtypmod = json.\("typtypmod").as(Reads.IntReads),
          typndims = json.\("typndims").as(Reads.IntReads),
          typcollation = json.\("typcollation").as(Reads.LongReads),
          typdefaultbin = json.\("typdefaultbin").toOption.map(_.as(TypoPgNodeTree.reads)),
          typdefault = json.\("typdefault").toOption.map(_.as(Reads.StringReads)),
          typacl = json.\("typacl").toOption.map(_.as(Reads.ArrayReads[TypoAclItem](TypoAclItem.reads, implicitly)))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgTypeRow] = RowParser[PgTypeRow] { row =>
    Success(
      PgTypeRow(
        oid = row(idx + 0)(PgTypeId.column),
        typname = row(idx + 1)(Column.columnToString),
        typnamespace = row(idx + 2)(Column.columnToLong),
        typowner = row(idx + 3)(Column.columnToLong),
        typlen = row(idx + 4)(Column.columnToInt),
        typbyval = row(idx + 5)(Column.columnToBoolean),
        typtype = row(idx + 6)(Column.columnToString),
        typcategory = row(idx + 7)(Column.columnToString),
        typispreferred = row(idx + 8)(Column.columnToBoolean),
        typisdefined = row(idx + 9)(Column.columnToBoolean),
        typdelim = row(idx + 10)(Column.columnToString),
        typrelid = row(idx + 11)(Column.columnToLong),
        typsubscript = row(idx + 12)(TypoRegproc.column),
        typelem = row(idx + 13)(Column.columnToLong),
        typarray = row(idx + 14)(Column.columnToLong),
        typinput = row(idx + 15)(TypoRegproc.column),
        typoutput = row(idx + 16)(TypoRegproc.column),
        typreceive = row(idx + 17)(TypoRegproc.column),
        typsend = row(idx + 18)(TypoRegproc.column),
        typmodin = row(idx + 19)(TypoRegproc.column),
        typmodout = row(idx + 20)(TypoRegproc.column),
        typanalyze = row(idx + 21)(TypoRegproc.column),
        typalign = row(idx + 22)(Column.columnToString),
        typstorage = row(idx + 23)(Column.columnToString),
        typnotnull = row(idx + 24)(Column.columnToBoolean),
        typbasetype = row(idx + 25)(Column.columnToLong),
        typtypmod = row(idx + 26)(Column.columnToInt),
        typndims = row(idx + 27)(Column.columnToInt),
        typcollation = row(idx + 28)(Column.columnToLong),
        typdefaultbin = row(idx + 29)(Column.columnToOption(TypoPgNodeTree.column)),
        typdefault = row(idx + 30)(Column.columnToOption(Column.columnToString)),
        typacl = row(idx + 31)(Column.columnToOption(TypoAclItem.arrayColumn))
      )
    )
  }
  implicit val writes: OWrites[PgTypeRow] = OWrites[PgTypeRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> PgTypeId.writes.writes(o.oid),
      "typname" -> Writes.StringWrites.writes(o.typname),
      "typnamespace" -> Writes.LongWrites.writes(o.typnamespace),
      "typowner" -> Writes.LongWrites.writes(o.typowner),
      "typlen" -> Writes.IntWrites.writes(o.typlen),
      "typbyval" -> Writes.BooleanWrites.writes(o.typbyval),
      "typtype" -> Writes.StringWrites.writes(o.typtype),
      "typcategory" -> Writes.StringWrites.writes(o.typcategory),
      "typispreferred" -> Writes.BooleanWrites.writes(o.typispreferred),
      "typisdefined" -> Writes.BooleanWrites.writes(o.typisdefined),
      "typdelim" -> Writes.StringWrites.writes(o.typdelim),
      "typrelid" -> Writes.LongWrites.writes(o.typrelid),
      "typsubscript" -> TypoRegproc.writes.writes(o.typsubscript),
      "typelem" -> Writes.LongWrites.writes(o.typelem),
      "typarray" -> Writes.LongWrites.writes(o.typarray),
      "typinput" -> TypoRegproc.writes.writes(o.typinput),
      "typoutput" -> TypoRegproc.writes.writes(o.typoutput),
      "typreceive" -> TypoRegproc.writes.writes(o.typreceive),
      "typsend" -> TypoRegproc.writes.writes(o.typsend),
      "typmodin" -> TypoRegproc.writes.writes(o.typmodin),
      "typmodout" -> TypoRegproc.writes.writes(o.typmodout),
      "typanalyze" -> TypoRegproc.writes.writes(o.typanalyze),
      "typalign" -> Writes.StringWrites.writes(o.typalign),
      "typstorage" -> Writes.StringWrites.writes(o.typstorage),
      "typnotnull" -> Writes.BooleanWrites.writes(o.typnotnull),
      "typbasetype" -> Writes.LongWrites.writes(o.typbasetype),
      "typtypmod" -> Writes.IntWrites.writes(o.typtypmod),
      "typndims" -> Writes.IntWrites.writes(o.typndims),
      "typcollation" -> Writes.LongWrites.writes(o.typcollation),
      "typdefaultbin" -> Writes.OptionWrites(TypoPgNodeTree.writes).writes(o.typdefaultbin),
      "typdefault" -> Writes.OptionWrites(Writes.StringWrites).writes(o.typdefault),
      "typacl" -> Writes.OptionWrites(Writes.arrayWrites[TypoAclItem](implicitly, TypoAclItem.writes)).writes(o.typacl)
    ))
  )
}
