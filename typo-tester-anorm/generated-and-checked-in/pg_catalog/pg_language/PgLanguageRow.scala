/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_language

import adventureworks.TypoAclItem
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgLanguageRow(
  oid: PgLanguageId,
  lanname: String,
  lanowner: /* oid */ Long,
  lanispl: Boolean,
  lanpltrusted: Boolean,
  lanplcallfoid: /* oid */ Long,
  laninline: /* oid */ Long,
  lanvalidator: /* oid */ Long,
  lanacl: Option[Array[TypoAclItem]]
)

object PgLanguageRow {
  def rowParser(idx: Int): RowParser[PgLanguageRow] =
    RowParser[PgLanguageRow] { row =>
      Success(
        PgLanguageRow(
          oid = row[PgLanguageId](idx + 0),
          lanname = row[String](idx + 1),
          lanowner = row[/* oid */ Long](idx + 2),
          lanispl = row[Boolean](idx + 3),
          lanpltrusted = row[Boolean](idx + 4),
          lanplcallfoid = row[/* oid */ Long](idx + 5),
          laninline = row[/* oid */ Long](idx + 6),
          lanvalidator = row[/* oid */ Long](idx + 7),
          lanacl = row[Option[Array[TypoAclItem]]](idx + 8)
        )
      )
    }
  implicit val oFormat: OFormat[PgLanguageRow] = new OFormat[PgLanguageRow]{
    override def writes(o: PgLanguageRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "lanname" -> o.lanname,
        "lanowner" -> o.lanowner,
        "lanispl" -> o.lanispl,
        "lanpltrusted" -> o.lanpltrusted,
        "lanplcallfoid" -> o.lanplcallfoid,
        "laninline" -> o.laninline,
        "lanvalidator" -> o.lanvalidator,
        "lanacl" -> o.lanacl
      )
  
    override def reads(json: JsValue): JsResult[PgLanguageRow] = {
      JsResult.fromTry(
        Try(
          PgLanguageRow(
            oid = json.\("oid").as[PgLanguageId],
            lanname = json.\("lanname").as[String],
            lanowner = json.\("lanowner").as[/* oid */ Long],
            lanispl = json.\("lanispl").as[Boolean],
            lanpltrusted = json.\("lanpltrusted").as[Boolean],
            lanplcallfoid = json.\("lanplcallfoid").as[/* oid */ Long],
            laninline = json.\("laninline").as[/* oid */ Long],
            lanvalidator = json.\("lanvalidator").as[/* oid */ Long],
            lanacl = json.\("lanacl").toOption.map(_.as[Array[TypoAclItem]])
          )
        )
      )
    }
  }
}
