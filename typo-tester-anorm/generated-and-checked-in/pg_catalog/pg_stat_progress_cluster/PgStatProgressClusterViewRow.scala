/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_cluster

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatProgressClusterViewRow(
  pid: Option[Int],
  datid: Option[/* oid */ Long],
  datname: Option[String],
  relid: Option[/* oid */ Long],
  command: Option[String],
  phase: Option[String],
  clusterIndexRelid: Option[/* oid */ Long],
  heapTuplesScanned: Option[Long],
  heapTuplesWritten: Option[Long],
  heapBlksTotal: Option[Long],
  heapBlksScanned: Option[Long],
  indexRebuildCount: Option[Long]
)

object PgStatProgressClusterViewRow {
  implicit val reads: Reads[PgStatProgressClusterViewRow] = Reads[PgStatProgressClusterViewRow](json => JsResult.fromTry(
      Try(
        PgStatProgressClusterViewRow(
          pid = json.\("pid").toOption.map(_.as(Reads.IntReads)),
          datid = json.\("datid").toOption.map(_.as(Reads.LongReads)),
          datname = json.\("datname").toOption.map(_.as(Reads.StringReads)),
          relid = json.\("relid").toOption.map(_.as(Reads.LongReads)),
          command = json.\("command").toOption.map(_.as(Reads.StringReads)),
          phase = json.\("phase").toOption.map(_.as(Reads.StringReads)),
          clusterIndexRelid = json.\("cluster_index_relid").toOption.map(_.as(Reads.LongReads)),
          heapTuplesScanned = json.\("heap_tuples_scanned").toOption.map(_.as(Reads.LongReads)),
          heapTuplesWritten = json.\("heap_tuples_written").toOption.map(_.as(Reads.LongReads)),
          heapBlksTotal = json.\("heap_blks_total").toOption.map(_.as(Reads.LongReads)),
          heapBlksScanned = json.\("heap_blks_scanned").toOption.map(_.as(Reads.LongReads)),
          indexRebuildCount = json.\("index_rebuild_count").toOption.map(_.as(Reads.LongReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatProgressClusterViewRow] = RowParser[PgStatProgressClusterViewRow] { row =>
    Success(
      PgStatProgressClusterViewRow(
        pid = row(idx + 0)(Column.columnToOption(Column.columnToInt)),
        datid = row(idx + 1)(Column.columnToOption(Column.columnToLong)),
        datname = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        relid = row(idx + 3)(Column.columnToOption(Column.columnToLong)),
        command = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        phase = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        clusterIndexRelid = row(idx + 6)(Column.columnToOption(Column.columnToLong)),
        heapTuplesScanned = row(idx + 7)(Column.columnToOption(Column.columnToLong)),
        heapTuplesWritten = row(idx + 8)(Column.columnToOption(Column.columnToLong)),
        heapBlksTotal = row(idx + 9)(Column.columnToOption(Column.columnToLong)),
        heapBlksScanned = row(idx + 10)(Column.columnToOption(Column.columnToLong)),
        indexRebuildCount = row(idx + 11)(Column.columnToOption(Column.columnToLong))
      )
    )
  }
  implicit val writes: OWrites[PgStatProgressClusterViewRow] = OWrites[PgStatProgressClusterViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "pid" -> Writes.OptionWrites(Writes.IntWrites).writes(o.pid),
      "datid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.datid),
      "datname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.datname),
      "relid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.relid),
      "command" -> Writes.OptionWrites(Writes.StringWrites).writes(o.command),
      "phase" -> Writes.OptionWrites(Writes.StringWrites).writes(o.phase),
      "cluster_index_relid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.clusterIndexRelid),
      "heap_tuples_scanned" -> Writes.OptionWrites(Writes.LongWrites).writes(o.heapTuplesScanned),
      "heap_tuples_written" -> Writes.OptionWrites(Writes.LongWrites).writes(o.heapTuplesWritten),
      "heap_blks_total" -> Writes.OptionWrites(Writes.LongWrites).writes(o.heapBlksTotal),
      "heap_blks_scanned" -> Writes.OptionWrites(Writes.LongWrites).writes(o.heapBlksScanned),
      "index_rebuild_count" -> Writes.OptionWrites(Writes.LongWrites).writes(o.indexRebuildCount)
    ))
  )
}
