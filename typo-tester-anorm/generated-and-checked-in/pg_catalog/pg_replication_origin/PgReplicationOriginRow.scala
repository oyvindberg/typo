/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_origin

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgReplicationOriginRow(
  roident: PgReplicationOriginId,
  roname: String
)

object PgReplicationOriginRow {
  implicit val reads: Reads[PgReplicationOriginRow] = Reads[PgReplicationOriginRow](json => JsResult.fromTry(
      Try(
        PgReplicationOriginRow(
          roident = json.\("roident").as[PgReplicationOriginId],
          roname = json.\("roname").as[String]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgReplicationOriginRow] = RowParser[PgReplicationOriginRow] { row =>
    Success(
      PgReplicationOriginRow(
        roident = row[PgReplicationOriginId](idx + 0),
        roname = row[String](idx + 1)
      )
    )
  }
  implicit val writes: OWrites[PgReplicationOriginRow] = OWrites[PgReplicationOriginRow](o =>
    new JsObject(ListMap[String, JsValue](
      "roident" -> Json.toJson(o.roident),
      "roname" -> Json.toJson(o.roname)
    ))
  )
}
