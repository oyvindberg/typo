/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_origin

import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.DeleteBuilder.DeleteBuilderMock
import typo.dsl.DeleteParams
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderMock
import typo.dsl.SelectParams
import typo.dsl.UpdateBuilder
import typo.dsl.UpdateBuilder.UpdateBuilderMock
import typo.dsl.UpdateParams

class PgReplicationOriginRepoMock(map: scala.collection.mutable.Map[PgReplicationOriginId, PgReplicationOriginRow] = scala.collection.mutable.Map.empty) extends PgReplicationOriginRepo {
  override def delete(roident: PgReplicationOriginId)(implicit c: Connection): Boolean = {
    map.remove(roident).isDefined
  }
  override def delete: DeleteBuilder[PgReplicationOriginFields, PgReplicationOriginRow] = {
    DeleteBuilderMock(DeleteParams.empty, PgReplicationOriginFields, map)
  }
  override def insert(unsaved: PgReplicationOriginRow)(implicit c: Connection): PgReplicationOriginRow = {
    if (map.contains(unsaved.roident))
      sys.error(s"id ${unsaved.roident} already exists")
    else
      map.put(unsaved.roident, unsaved)
    unsaved
  }
  override def select: SelectBuilder[PgReplicationOriginFields, PgReplicationOriginRow] = {
    SelectBuilderMock(PgReplicationOriginFields, () => map.values.toList, SelectParams.empty)
  }
  override def selectAll(implicit c: Connection): List[PgReplicationOriginRow] = {
    map.values.toList
  }
  override def selectById(roident: PgReplicationOriginId)(implicit c: Connection): Option[PgReplicationOriginRow] = {
    map.get(roident)
  }
  override def selectByIds(roidents: Array[PgReplicationOriginId])(implicit c: Connection): List[PgReplicationOriginRow] = {
    roidents.flatMap(map.get).toList
  }
  override def update(row: PgReplicationOriginRow)(implicit c: Connection): Boolean = {
    map.get(row.roident) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.roident, row)
        true
      case None => false
    }
  }
  override def update: UpdateBuilder[PgReplicationOriginFields, PgReplicationOriginRow] = {
    UpdateBuilderMock(UpdateParams.empty, PgReplicationOriginFields, map)
  }
  override def upsert(unsaved: PgReplicationOriginRow)(implicit c: Connection): PgReplicationOriginRow = {
    map.put(unsaved.roident, unsaved)
    unsaved
  }
}
