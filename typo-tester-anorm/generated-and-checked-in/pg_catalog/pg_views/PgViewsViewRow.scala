/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_views

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgViewsViewRow(
  schemaname: Option[String],
  viewname: Option[String],
  viewowner: Option[String],
  definition: Option[String]
)

object PgViewsViewRow {
  def rowParser(idx: Int): RowParser[PgViewsViewRow] =
    RowParser[PgViewsViewRow] { row =>
      Success(
        PgViewsViewRow(
          schemaname = row[Option[String]](idx + 0),
          viewname = row[Option[String]](idx + 1),
          viewowner = row[Option[String]](idx + 2),
          definition = row[Option[String]](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[PgViewsViewRow] = new OFormat[PgViewsViewRow]{
    override def writes(o: PgViewsViewRow): JsObject =
      Json.obj(
        "schemaname" -> o.schemaname,
        "viewname" -> o.viewname,
        "viewowner" -> o.viewowner,
        "definition" -> o.definition
      )
  
    override def reads(json: JsValue): JsResult[PgViewsViewRow] = {
      JsResult.fromTry(
        Try(
          PgViewsViewRow(
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            viewname = json.\("viewname").toOption.map(_.as[String]),
            viewowner = json.\("viewowner").toOption.map(_.as[String]),
            definition = json.\("definition").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
