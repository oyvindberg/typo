/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_extension

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgExtensionRow(
  oid: PgExtensionId,
  extname: String,
  extowner: /* oid */ Long,
  extnamespace: /* oid */ Long,
  extrelocatable: Boolean,
  extversion: String,
  extconfig: Option[Array[/* oid */ Long]],
  extcondition: Option[Array[String]]
)

object PgExtensionRow {
  implicit val reads: Reads[PgExtensionRow] = Reads[PgExtensionRow](json => JsResult.fromTry(
      Try(
        PgExtensionRow(
          oid = json.\("oid").as(PgExtensionId.reads),
          extname = json.\("extname").as(Reads.StringReads),
          extowner = json.\("extowner").as(Reads.LongReads),
          extnamespace = json.\("extnamespace").as(Reads.LongReads),
          extrelocatable = json.\("extrelocatable").as(Reads.BooleanReads),
          extversion = json.\("extversion").as(Reads.StringReads),
          extconfig = json.\("extconfig").toOption.map(_.as(Reads.ArrayReads[Long](Reads.LongReads, implicitly))),
          extcondition = json.\("extcondition").toOption.map(_.as(Reads.ArrayReads[String](Reads.StringReads, implicitly)))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgExtensionRow] = RowParser[PgExtensionRow] { row =>
    Success(
      PgExtensionRow(
        oid = row(idx + 0)(PgExtensionId.column),
        extname = row(idx + 1)(Column.columnToString),
        extowner = row(idx + 2)(Column.columnToLong),
        extnamespace = row(idx + 3)(Column.columnToLong),
        extrelocatable = row(idx + 4)(Column.columnToBoolean),
        extversion = row(idx + 5)(Column.columnToString),
        extconfig = row(idx + 6)(Column.columnToOption(Column.columnToArray[Long](Column.columnToLong, implicitly))),
        extcondition = row(idx + 7)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly)))
      )
    )
  }
  implicit val writes: OWrites[PgExtensionRow] = OWrites[PgExtensionRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> PgExtensionId.writes.writes(o.oid),
      "extname" -> Writes.StringWrites.writes(o.extname),
      "extowner" -> Writes.LongWrites.writes(o.extowner),
      "extnamespace" -> Writes.LongWrites.writes(o.extnamespace),
      "extrelocatable" -> Writes.BooleanWrites.writes(o.extrelocatable),
      "extversion" -> Writes.StringWrites.writes(o.extversion),
      "extconfig" -> Writes.OptionWrites(Writes.arrayWrites[Long](implicitly, Writes.LongWrites)).writes(o.extconfig),
      "extcondition" -> Writes.OptionWrites(Writes.arrayWrites[String](implicitly, Writes.StringWrites)).writes(o.extcondition)
    ))
  )
}
