/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_create_index

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatProgressCreateIndexViewRow(
  pid: Option[Int],
  datid: Option[/* oid */ Long],
  datname: Option[String],
  relid: Option[/* oid */ Long],
  indexRelid: Option[/* oid */ Long],
  command: Option[String],
  phase: Option[String],
  lockersTotal: Option[Long],
  lockersDone: Option[Long],
  currentLockerPid: Option[Long],
  blocksTotal: Option[Long],
  blocksDone: Option[Long],
  tuplesTotal: Option[Long],
  tuplesDone: Option[Long],
  partitionsTotal: Option[Long],
  partitionsDone: Option[Long]
)

object PgStatProgressCreateIndexViewRow {
  def rowParser(idx: Int): RowParser[PgStatProgressCreateIndexViewRow] =
    RowParser[PgStatProgressCreateIndexViewRow] { row =>
      Success(
        PgStatProgressCreateIndexViewRow(
          pid = row[Option[Int]](idx + 0),
          datid = row[Option[/* oid */ Long]](idx + 1),
          datname = row[Option[String]](idx + 2),
          relid = row[Option[/* oid */ Long]](idx + 3),
          indexRelid = row[Option[/* oid */ Long]](idx + 4),
          command = row[Option[String]](idx + 5),
          phase = row[Option[String]](idx + 6),
          lockersTotal = row[Option[Long]](idx + 7),
          lockersDone = row[Option[Long]](idx + 8),
          currentLockerPid = row[Option[Long]](idx + 9),
          blocksTotal = row[Option[Long]](idx + 10),
          blocksDone = row[Option[Long]](idx + 11),
          tuplesTotal = row[Option[Long]](idx + 12),
          tuplesDone = row[Option[Long]](idx + 13),
          partitionsTotal = row[Option[Long]](idx + 14),
          partitionsDone = row[Option[Long]](idx + 15)
        )
      )
    }
  implicit val oFormat: OFormat[PgStatProgressCreateIndexViewRow] = new OFormat[PgStatProgressCreateIndexViewRow]{
    override def writes(o: PgStatProgressCreateIndexViewRow): JsObject =
      Json.obj(
        "pid" -> o.pid,
        "datid" -> o.datid,
        "datname" -> o.datname,
        "relid" -> o.relid,
        "index_relid" -> o.indexRelid,
        "command" -> o.command,
        "phase" -> o.phase,
        "lockers_total" -> o.lockersTotal,
        "lockers_done" -> o.lockersDone,
        "current_locker_pid" -> o.currentLockerPid,
        "blocks_total" -> o.blocksTotal,
        "blocks_done" -> o.blocksDone,
        "tuples_total" -> o.tuplesTotal,
        "tuples_done" -> o.tuplesDone,
        "partitions_total" -> o.partitionsTotal,
        "partitions_done" -> o.partitionsDone
      )
  
    override def reads(json: JsValue): JsResult[PgStatProgressCreateIndexViewRow] = {
      JsResult.fromTry(
        Try(
          PgStatProgressCreateIndexViewRow(
            pid = json.\("pid").toOption.map(_.as[Int]),
            datid = json.\("datid").toOption.map(_.as[/* oid */ Long]),
            datname = json.\("datname").toOption.map(_.as[String]),
            relid = json.\("relid").toOption.map(_.as[/* oid */ Long]),
            indexRelid = json.\("index_relid").toOption.map(_.as[/* oid */ Long]),
            command = json.\("command").toOption.map(_.as[String]),
            phase = json.\("phase").toOption.map(_.as[String]),
            lockersTotal = json.\("lockers_total").toOption.map(_.as[Long]),
            lockersDone = json.\("lockers_done").toOption.map(_.as[Long]),
            currentLockerPid = json.\("current_locker_pid").toOption.map(_.as[Long]),
            blocksTotal = json.\("blocks_total").toOption.map(_.as[Long]),
            blocksDone = json.\("blocks_done").toOption.map(_.as[Long]),
            tuplesTotal = json.\("tuples_total").toOption.map(_.as[Long]),
            tuplesDone = json.\("tuples_done").toOption.map(_.as[Long]),
            partitionsTotal = json.\("partitions_total").toOption.map(_.as[Long]),
            partitionsDone = json.\("partitions_done").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
