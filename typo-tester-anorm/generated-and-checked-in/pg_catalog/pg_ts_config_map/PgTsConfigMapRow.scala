/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config_map

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgTsConfigMapRow(
  mapcfg: /* oid */ Long,
  maptokentype: Int,
  mapseqno: Int,
  mapdict: /* oid */ Long
){
   val compositeId: PgTsConfigMapId = PgTsConfigMapId(mapcfg, maptokentype, mapseqno)
 }

object PgTsConfigMapRow {
  implicit val reads: Reads[PgTsConfigMapRow] = Reads[PgTsConfigMapRow](json => JsResult.fromTry(
      Try(
        PgTsConfigMapRow(
          mapcfg = json.\("mapcfg").as[/* oid */ Long],
          maptokentype = json.\("maptokentype").as[Int],
          mapseqno = json.\("mapseqno").as[Int],
          mapdict = json.\("mapdict").as[/* oid */ Long]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgTsConfigMapRow] = RowParser[PgTsConfigMapRow] { row =>
    Success(
      PgTsConfigMapRow(
        mapcfg = row[/* oid */ Long](idx + 0),
        maptokentype = row[Int](idx + 1),
        mapseqno = row[Int](idx + 2),
        mapdict = row[/* oid */ Long](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[PgTsConfigMapRow] = OWrites[PgTsConfigMapRow](o =>
    new JsObject(ListMap[String, JsValue](
      "mapcfg" -> Json.toJson(o.mapcfg),
      "maptokentype" -> Json.toJson(o.maptokentype),
      "mapseqno" -> Json.toJson(o.mapseqno),
      "mapdict" -> Json.toJson(o.mapdict)
    ))
  )
}
