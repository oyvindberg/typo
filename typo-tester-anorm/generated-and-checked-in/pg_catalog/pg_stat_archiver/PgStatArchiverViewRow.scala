/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_archiver

import anorm.RowParser
import anorm.Success
import java.time.OffsetDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatArchiverViewRow(
  archivedCount: Option[Long],
  lastArchivedWal: Option[String],
  lastArchivedTime: Option[OffsetDateTime],
  failedCount: Option[Long],
  lastFailedWal: Option[String],
  lastFailedTime: Option[OffsetDateTime],
  statsReset: Option[OffsetDateTime]
)

object PgStatArchiverViewRow {
  def rowParser(idx: Int): RowParser[PgStatArchiverViewRow] =
    RowParser[PgStatArchiverViewRow] { row =>
      Success(
        PgStatArchiverViewRow(
          archivedCount = row[Option[Long]](idx + 0),
          lastArchivedWal = row[Option[String]](idx + 1),
          lastArchivedTime = row[Option[OffsetDateTime]](idx + 2),
          failedCount = row[Option[Long]](idx + 3),
          lastFailedWal = row[Option[String]](idx + 4),
          lastFailedTime = row[Option[OffsetDateTime]](idx + 5),
          statsReset = row[Option[OffsetDateTime]](idx + 6)
        )
      )
    }
  implicit val oFormat: OFormat[PgStatArchiverViewRow] = new OFormat[PgStatArchiverViewRow]{
    override def writes(o: PgStatArchiverViewRow): JsObject =
      Json.obj(
        "archived_count" -> o.archivedCount,
        "last_archived_wal" -> o.lastArchivedWal,
        "last_archived_time" -> o.lastArchivedTime,
        "failed_count" -> o.failedCount,
        "last_failed_wal" -> o.lastFailedWal,
        "last_failed_time" -> o.lastFailedTime,
        "stats_reset" -> o.statsReset
      )
  
    override def reads(json: JsValue): JsResult[PgStatArchiverViewRow] = {
      JsResult.fromTry(
        Try(
          PgStatArchiverViewRow(
            archivedCount = json.\("archived_count").toOption.map(_.as[Long]),
            lastArchivedWal = json.\("last_archived_wal").toOption.map(_.as[String]),
            lastArchivedTime = json.\("last_archived_time").toOption.map(_.as[OffsetDateTime]),
            failedCount = json.\("failed_count").toOption.map(_.as[Long]),
            lastFailedWal = json.\("last_failed_wal").toOption.map(_.as[String]),
            lastFailedTime = json.\("last_failed_time").toOption.map(_.as[OffsetDateTime]),
            statsReset = json.\("stats_reset").toOption.map(_.as[OffsetDateTime])
          )
        )
      )
    }
  }
}
