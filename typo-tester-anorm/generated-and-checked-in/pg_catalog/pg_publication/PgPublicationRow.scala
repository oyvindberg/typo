/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_publication

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgPublicationRow(
  oid: PgPublicationId,
  pubname: String,
  pubowner: /* oid */ Long,
  puballtables: Boolean,
  pubinsert: Boolean,
  pubupdate: Boolean,
  pubdelete: Boolean,
  pubtruncate: Boolean,
  pubviaroot: Boolean
)

object PgPublicationRow {
  implicit val reads: Reads[PgPublicationRow] = Reads[PgPublicationRow](json => JsResult.fromTry(
      Try(
        PgPublicationRow(
          oid = json.\("oid").as[PgPublicationId],
          pubname = json.\("pubname").as[String],
          pubowner = json.\("pubowner").as[/* oid */ Long],
          puballtables = json.\("puballtables").as[Boolean],
          pubinsert = json.\("pubinsert").as[Boolean],
          pubupdate = json.\("pubupdate").as[Boolean],
          pubdelete = json.\("pubdelete").as[Boolean],
          pubtruncate = json.\("pubtruncate").as[Boolean],
          pubviaroot = json.\("pubviaroot").as[Boolean]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgPublicationRow] = RowParser[PgPublicationRow] { row =>
    Success(
      PgPublicationRow(
        oid = row[PgPublicationId](idx + 0),
        pubname = row[String](idx + 1),
        pubowner = row[/* oid */ Long](idx + 2),
        puballtables = row[Boolean](idx + 3),
        pubinsert = row[Boolean](idx + 4),
        pubupdate = row[Boolean](idx + 5),
        pubdelete = row[Boolean](idx + 6),
        pubtruncate = row[Boolean](idx + 7),
        pubviaroot = row[Boolean](idx + 8)
      )
    )
  }
  implicit val writes: OWrites[PgPublicationRow] = OWrites[PgPublicationRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "pubname" -> Json.toJson(o.pubname),
      "pubowner" -> Json.toJson(o.pubowner),
      "puballtables" -> Json.toJson(o.puballtables),
      "pubinsert" -> Json.toJson(o.pubinsert),
      "pubupdate" -> Json.toJson(o.pubupdate),
      "pubdelete" -> Json.toJson(o.pubdelete),
      "pubtruncate" -> Json.toJson(o.pubtruncate),
      "pubviaroot" -> Json.toJson(o.pubviaroot)
    ))
  )
}
