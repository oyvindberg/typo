/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_attrdef

import adventureworks.TypoPgNodeTree
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgAttrdefRow(
  oid: PgAttrdefId,
  adrelid: /* oid */ Long,
  adnum: Int,
  adbin: TypoPgNodeTree
)

object PgAttrdefRow {
  implicit val reads: Reads[PgAttrdefRow] = Reads[PgAttrdefRow](json => JsResult.fromTry(
      Try(
        PgAttrdefRow(
          oid = json.\("oid").as[PgAttrdefId],
          adrelid = json.\("adrelid").as[/* oid */ Long],
          adnum = json.\("adnum").as[Int],
          adbin = json.\("adbin").as[TypoPgNodeTree]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgAttrdefRow] = RowParser[PgAttrdefRow] { row =>
    Success(
      PgAttrdefRow(
        oid = row[PgAttrdefId](idx + 0),
        adrelid = row[/* oid */ Long](idx + 1),
        adnum = row[Int](idx + 2),
        adbin = row[TypoPgNodeTree](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[PgAttrdefRow] = OWrites[PgAttrdefRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "adrelid" -> Json.toJson(o.adrelid),
      "adnum" -> Json.toJson(o.adnum),
      "adbin" -> Json.toJson(o.adbin)
    ))
  )
}
