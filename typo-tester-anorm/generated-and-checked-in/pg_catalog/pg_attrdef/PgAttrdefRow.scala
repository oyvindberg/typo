/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_attrdef

import adventureworks.TypoPgNodeTree
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgAttrdefRow(
  oid: PgAttrdefId,
  adrelid: /* oid */ Long,
  adnum: Int,
  adbin: TypoPgNodeTree
)

object PgAttrdefRow {
  def rowParser(idx: Int): RowParser[PgAttrdefRow] =
    RowParser[PgAttrdefRow] { row =>
      Success(
        PgAttrdefRow(
          oid = row[PgAttrdefId](idx + 0),
          adrelid = row[/* oid */ Long](idx + 1),
          adnum = row[Int](idx + 2),
          adbin = row[TypoPgNodeTree](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[PgAttrdefRow] = new OFormat[PgAttrdefRow]{
    override def writes(o: PgAttrdefRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "adrelid" -> o.adrelid,
        "adnum" -> o.adnum,
        "adbin" -> o.adbin
      )
  
    override def reads(json: JsValue): JsResult[PgAttrdefRow] = {
      JsResult.fromTry(
        Try(
          PgAttrdefRow(
            oid = json.\("oid").as[PgAttrdefId],
            adrelid = json.\("adrelid").as[/* oid */ Long],
            adnum = json.\("adnum").as[Int],
            adbin = json.\("adbin").as[TypoPgNodeTree]
          )
        )
      )
    }
  }
}
