/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_table

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgForeignTableRow(
  ftrelid: PgForeignTableId,
  ftserver: /* oid */ Long,
  ftoptions: Option[Array[String]]
)

object PgForeignTableRow {
  def rowParser(idx: Int): RowParser[PgForeignTableRow] =
    RowParser[PgForeignTableRow] { row =>
      Success(
        PgForeignTableRow(
          ftrelid = row[PgForeignTableId](idx + 0),
          ftserver = row[/* oid */ Long](idx + 1),
          ftoptions = row[Option[Array[String]]](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[PgForeignTableRow] = new OFormat[PgForeignTableRow]{
    override def writes(o: PgForeignTableRow): JsObject =
      Json.obj(
        "ftrelid" -> o.ftrelid,
        "ftserver" -> o.ftserver,
        "ftoptions" -> o.ftoptions
      )
  
    override def reads(json: JsValue): JsResult[PgForeignTableRow] = {
      JsResult.fromTry(
        Try(
          PgForeignTableRow(
            ftrelid = json.\("ftrelid").as[PgForeignTableId],
            ftserver = json.\("ftserver").as[/* oid */ Long],
            ftoptions = json.\("ftoptions").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
