/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_table

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgForeignTableRow(
  ftrelid: PgForeignTableId,
  ftserver: /* oid */ Long,
  ftoptions: Option[Array[String]]
)

object PgForeignTableRow {
  implicit val reads: Reads[PgForeignTableRow] = Reads[PgForeignTableRow](json => JsResult.fromTry(
      Try(
        PgForeignTableRow(
          ftrelid = json.\("ftrelid").as(PgForeignTableId.reads),
          ftserver = json.\("ftserver").as(Reads.LongReads),
          ftoptions = json.\("ftoptions").toOption.map(_.as(Reads.ArrayReads[String](Reads.StringReads, implicitly)))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgForeignTableRow] = RowParser[PgForeignTableRow] { row =>
    Success(
      PgForeignTableRow(
        ftrelid = row(idx + 0)(PgForeignTableId.column),
        ftserver = row(idx + 1)(Column.columnToLong),
        ftoptions = row(idx + 2)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly)))
      )
    )
  }
  implicit val writes: OWrites[PgForeignTableRow] = OWrites[PgForeignTableRow](o =>
    new JsObject(ListMap[String, JsValue](
      "ftrelid" -> PgForeignTableId.writes.writes(o.ftrelid),
      "ftserver" -> Writes.LongWrites.writes(o.ftserver),
      "ftoptions" -> Writes.OptionWrites(Writes.arrayWrites[String](implicitly, Writes.StringWrites)).writes(o.ftoptions)
    ))
  )
}
