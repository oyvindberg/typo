/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_subscription

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgSubscriptionRow(
  oid: PgSubscriptionId,
  subdbid: /* oid */ Long,
  subname: String,
  subowner: /* oid */ Long,
  subenabled: Boolean,
  subbinary: Boolean,
  substream: Boolean,
  subconninfo: String,
  subslotname: Option[String],
  subsynccommit: String,
  subpublications: Array[String]
)

object PgSubscriptionRow {
  implicit val reads: Reads[PgSubscriptionRow] = Reads[PgSubscriptionRow](json => JsResult.fromTry(
      Try(
        PgSubscriptionRow(
          oid = json.\("oid").as(PgSubscriptionId.reads),
          subdbid = json.\("subdbid").as(Reads.LongReads),
          subname = json.\("subname").as(Reads.StringReads),
          subowner = json.\("subowner").as(Reads.LongReads),
          subenabled = json.\("subenabled").as(Reads.BooleanReads),
          subbinary = json.\("subbinary").as(Reads.BooleanReads),
          substream = json.\("substream").as(Reads.BooleanReads),
          subconninfo = json.\("subconninfo").as(Reads.StringReads),
          subslotname = json.\("subslotname").toOption.map(_.as(Reads.StringReads)),
          subsynccommit = json.\("subsynccommit").as(Reads.StringReads),
          subpublications = json.\("subpublications").as(Reads.ArrayReads[String](Reads.StringReads, implicitly))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgSubscriptionRow] = RowParser[PgSubscriptionRow] { row =>
    Success(
      PgSubscriptionRow(
        oid = row(idx + 0)(PgSubscriptionId.column),
        subdbid = row(idx + 1)(Column.columnToLong),
        subname = row(idx + 2)(Column.columnToString),
        subowner = row(idx + 3)(Column.columnToLong),
        subenabled = row(idx + 4)(Column.columnToBoolean),
        subbinary = row(idx + 5)(Column.columnToBoolean),
        substream = row(idx + 6)(Column.columnToBoolean),
        subconninfo = row(idx + 7)(Column.columnToString),
        subslotname = row(idx + 8)(Column.columnToOption(Column.columnToString)),
        subsynccommit = row(idx + 9)(Column.columnToString),
        subpublications = row(idx + 10)(Column.columnToArray[String](Column.columnToString, implicitly))
      )
    )
  }
  implicit val writes: OWrites[PgSubscriptionRow] = OWrites[PgSubscriptionRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> PgSubscriptionId.writes.writes(o.oid),
      "subdbid" -> Writes.LongWrites.writes(o.subdbid),
      "subname" -> Writes.StringWrites.writes(o.subname),
      "subowner" -> Writes.LongWrites.writes(o.subowner),
      "subenabled" -> Writes.BooleanWrites.writes(o.subenabled),
      "subbinary" -> Writes.BooleanWrites.writes(o.subbinary),
      "substream" -> Writes.BooleanWrites.writes(o.substream),
      "subconninfo" -> Writes.StringWrites.writes(o.subconninfo),
      "subslotname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.subslotname),
      "subsynccommit" -> Writes.StringWrites.writes(o.subsynccommit),
      "subpublications" -> Writes.arrayWrites[String](implicitly, Writes.StringWrites).writes(o.subpublications)
    ))
  )
}
