/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_subscription

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgSubscriptionRow(
  oid: PgSubscriptionId,
  subdbid: /* oid */ Long,
  subname: String,
  subowner: /* oid */ Long,
  subenabled: Boolean,
  subbinary: Boolean,
  substream: Boolean,
  subconninfo: String,
  subslotname: Option[String],
  subsynccommit: String,
  subpublications: Array[String]
)

object PgSubscriptionRow {
  def rowParser(idx: Int): RowParser[PgSubscriptionRow] =
    RowParser[PgSubscriptionRow] { row =>
      Success(
        PgSubscriptionRow(
          oid = row[PgSubscriptionId](idx + 0),
          subdbid = row[/* oid */ Long](idx + 1),
          subname = row[String](idx + 2),
          subowner = row[/* oid */ Long](idx + 3),
          subenabled = row[Boolean](idx + 4),
          subbinary = row[Boolean](idx + 5),
          substream = row[Boolean](idx + 6),
          subconninfo = row[String](idx + 7),
          subslotname = row[Option[String]](idx + 8),
          subsynccommit = row[String](idx + 9),
          subpublications = row[Array[String]](idx + 10)
        )
      )
    }
  implicit val oFormat: OFormat[PgSubscriptionRow] = new OFormat[PgSubscriptionRow]{
    override def writes(o: PgSubscriptionRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "subdbid" -> o.subdbid,
        "subname" -> o.subname,
        "subowner" -> o.subowner,
        "subenabled" -> o.subenabled,
        "subbinary" -> o.subbinary,
        "substream" -> o.substream,
        "subconninfo" -> o.subconninfo,
        "subslotname" -> o.subslotname,
        "subsynccommit" -> o.subsynccommit,
        "subpublications" -> o.subpublications
      )
  
    override def reads(json: JsValue): JsResult[PgSubscriptionRow] = {
      JsResult.fromTry(
        Try(
          PgSubscriptionRow(
            oid = json.\("oid").as[PgSubscriptionId],
            subdbid = json.\("subdbid").as[/* oid */ Long],
            subname = json.\("subname").as[String],
            subowner = json.\("subowner").as[/* oid */ Long],
            subenabled = json.\("subenabled").as[Boolean],
            subbinary = json.\("subbinary").as[Boolean],
            substream = json.\("substream").as[Boolean],
            subconninfo = json.\("subconninfo").as[String],
            subslotname = json.\("subslotname").toOption.map(_.as[String]),
            subsynccommit = json.\("subsynccommit").as[String],
            subpublications = json.\("subpublications").as[Array[String]]
          )
        )
      )
    }
  }
}
