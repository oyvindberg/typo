/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statio_user_tables

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatioUserTablesViewRow(
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.relid]] */
  relid: Option[/* oid */ Long],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.schemaname]] */
  schemaname: Option[String],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.relname]] */
  relname: Option[String],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.heapBlksRead]] */
  heapBlksRead: Option[Long],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.heapBlksHit]] */
  heapBlksHit: Option[Long],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.idxBlksRead]] */
  idxBlksRead: Option[Long],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.idxBlksHit]] */
  idxBlksHit: Option[Long],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.toastBlksRead]] */
  toastBlksRead: Option[Long],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.toastBlksHit]] */
  toastBlksHit: Option[Long],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.tidxBlksRead]] */
  tidxBlksRead: Option[Long],
  /** Points to [[pg_statio_all_tables.PgStatioAllTablesViewRow.tidxBlksHit]] */
  tidxBlksHit: Option[Long]
)

object PgStatioUserTablesViewRow {
  implicit val reads: Reads[PgStatioUserTablesViewRow] = Reads[PgStatioUserTablesViewRow](json => JsResult.fromTry(
      Try(
        PgStatioUserTablesViewRow(
          relid = json.\("relid").toOption.map(_.as(Reads.LongReads)),
          schemaname = json.\("schemaname").toOption.map(_.as(Reads.StringReads)),
          relname = json.\("relname").toOption.map(_.as(Reads.StringReads)),
          heapBlksRead = json.\("heap_blks_read").toOption.map(_.as(Reads.LongReads)),
          heapBlksHit = json.\("heap_blks_hit").toOption.map(_.as(Reads.LongReads)),
          idxBlksRead = json.\("idx_blks_read").toOption.map(_.as(Reads.LongReads)),
          idxBlksHit = json.\("idx_blks_hit").toOption.map(_.as(Reads.LongReads)),
          toastBlksRead = json.\("toast_blks_read").toOption.map(_.as(Reads.LongReads)),
          toastBlksHit = json.\("toast_blks_hit").toOption.map(_.as(Reads.LongReads)),
          tidxBlksRead = json.\("tidx_blks_read").toOption.map(_.as(Reads.LongReads)),
          tidxBlksHit = json.\("tidx_blks_hit").toOption.map(_.as(Reads.LongReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatioUserTablesViewRow] = RowParser[PgStatioUserTablesViewRow] { row =>
    Success(
      PgStatioUserTablesViewRow(
        relid = row(idx + 0)(Column.columnToOption(Column.columnToLong)),
        schemaname = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        relname = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        heapBlksRead = row(idx + 3)(Column.columnToOption(Column.columnToLong)),
        heapBlksHit = row(idx + 4)(Column.columnToOption(Column.columnToLong)),
        idxBlksRead = row(idx + 5)(Column.columnToOption(Column.columnToLong)),
        idxBlksHit = row(idx + 6)(Column.columnToOption(Column.columnToLong)),
        toastBlksRead = row(idx + 7)(Column.columnToOption(Column.columnToLong)),
        toastBlksHit = row(idx + 8)(Column.columnToOption(Column.columnToLong)),
        tidxBlksRead = row(idx + 9)(Column.columnToOption(Column.columnToLong)),
        tidxBlksHit = row(idx + 10)(Column.columnToOption(Column.columnToLong))
      )
    )
  }
  implicit val writes: OWrites[PgStatioUserTablesViewRow] = OWrites[PgStatioUserTablesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "relid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.relid),
      "schemaname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.schemaname),
      "relname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.relname),
      "heap_blks_read" -> Writes.OptionWrites(Writes.LongWrites).writes(o.heapBlksRead),
      "heap_blks_hit" -> Writes.OptionWrites(Writes.LongWrites).writes(o.heapBlksHit),
      "idx_blks_read" -> Writes.OptionWrites(Writes.LongWrites).writes(o.idxBlksRead),
      "idx_blks_hit" -> Writes.OptionWrites(Writes.LongWrites).writes(o.idxBlksHit),
      "toast_blks_read" -> Writes.OptionWrites(Writes.LongWrites).writes(o.toastBlksRead),
      "toast_blks_hit" -> Writes.OptionWrites(Writes.LongWrites).writes(o.toastBlksHit),
      "tidx_blks_read" -> Writes.OptionWrites(Writes.LongWrites).writes(o.tidxBlksRead),
      "tidx_blks_hit" -> Writes.OptionWrites(Writes.LongWrites).writes(o.tidxBlksHit)
    ))
  )
}
