/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_collation

import anorm.SqlStringInterpolation
import java.sql.Connection

object PgCollationRepoImpl extends PgCollationRepo {
  override def delete(oid: PgCollationId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_collation where oid = $oid".executeUpdate() > 0
  }
  override def insert(unsaved: PgCollationRow)(implicit c: Connection): PgCollationRow = {
    SQL"""insert into pg_catalog.pg_collation(oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion)
          values (${unsaved.oid}::oid, ${unsaved.collname}::name, ${unsaved.collnamespace}::oid, ${unsaved.collowner}::oid, ${unsaved.collprovider}::char, ${unsaved.collisdeterministic}, ${unsaved.collencoding}::int4, ${unsaved.collcollate}::name, ${unsaved.collctype}::name, ${unsaved.collversion})
          returning oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion
       """
      .executeInsert(PgCollationRow.rowParser(1).single)
    
  }
  override def selectAll(implicit c: Connection): List[PgCollationRow] = {
    SQL"""select oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion
          from pg_catalog.pg_collation
       """.as(PgCollationRow.rowParser(1).*)
  }
  override def selectById(oid: PgCollationId)(implicit c: Connection): Option[PgCollationRow] = {
    SQL"""select oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion
          from pg_catalog.pg_collation
          where oid = $oid
       """.as(PgCollationRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgCollationId])(implicit c: Connection): List[PgCollationRow] = {
    SQL"""select oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion
          from pg_catalog.pg_collation
          where oid = ANY($oids)
       """.as(PgCollationRow.rowParser(1).*)
    
  }
  override def update(row: PgCollationRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_collation
          set collname = ${row.collname}::name,
              collnamespace = ${row.collnamespace}::oid,
              collowner = ${row.collowner}::oid,
              collprovider = ${row.collprovider}::char,
              collisdeterministic = ${row.collisdeterministic},
              collencoding = ${row.collencoding}::int4,
              collcollate = ${row.collcollate}::name,
              collctype = ${row.collctype}::name,
              collversion = ${row.collversion}
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: PgCollationRow)(implicit c: Connection): PgCollationRow = {
    SQL"""insert into pg_catalog.pg_collation(oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.collname}::name,
            ${unsaved.collnamespace}::oid,
            ${unsaved.collowner}::oid,
            ${unsaved.collprovider}::char,
            ${unsaved.collisdeterministic},
            ${unsaved.collencoding}::int4,
            ${unsaved.collcollate}::name,
            ${unsaved.collctype}::name,
            ${unsaved.collversion}
          )
          on conflict (oid)
          do update set
            collname = EXCLUDED.collname,
            collnamespace = EXCLUDED.collnamespace,
            collowner = EXCLUDED.collowner,
            collprovider = EXCLUDED.collprovider,
            collisdeterministic = EXCLUDED.collisdeterministic,
            collencoding = EXCLUDED.collencoding,
            collcollate = EXCLUDED.collcollate,
            collctype = EXCLUDED.collctype,
            collversion = EXCLUDED.collversion
          returning oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion
       """
      .executeInsert(PgCollationRow.rowParser(1).single)
    
  }
}
