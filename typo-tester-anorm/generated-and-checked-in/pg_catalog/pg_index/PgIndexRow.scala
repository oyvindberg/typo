/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_index

import adventureworks.TypoInt2Vector
import adventureworks.TypoOidVector
import adventureworks.TypoPgNodeTree
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgIndexRow(
  indexrelid: PgIndexId,
  indrelid: /* oid */ Long,
  indnatts: Int,
  indnkeyatts: Int,
  indisunique: Boolean,
  indisprimary: Boolean,
  indisexclusion: Boolean,
  indimmediate: Boolean,
  indisclustered: Boolean,
  indisvalid: Boolean,
  indcheckxmin: Boolean,
  indisready: Boolean,
  indislive: Boolean,
  indisreplident: Boolean,
  indkey: TypoInt2Vector,
  indcollation: TypoOidVector,
  indclass: TypoOidVector,
  indoption: TypoInt2Vector,
  indexprs: Option[TypoPgNodeTree],
  indpred: Option[TypoPgNodeTree]
)

object PgIndexRow {
  def rowParser(idx: Int): RowParser[PgIndexRow] =
    RowParser[PgIndexRow] { row =>
      Success(
        PgIndexRow(
          indexrelid = row[PgIndexId](idx + 0),
          indrelid = row[/* oid */ Long](idx + 1),
          indnatts = row[Int](idx + 2),
          indnkeyatts = row[Int](idx + 3),
          indisunique = row[Boolean](idx + 4),
          indisprimary = row[Boolean](idx + 5),
          indisexclusion = row[Boolean](idx + 6),
          indimmediate = row[Boolean](idx + 7),
          indisclustered = row[Boolean](idx + 8),
          indisvalid = row[Boolean](idx + 9),
          indcheckxmin = row[Boolean](idx + 10),
          indisready = row[Boolean](idx + 11),
          indislive = row[Boolean](idx + 12),
          indisreplident = row[Boolean](idx + 13),
          indkey = row[TypoInt2Vector](idx + 14),
          indcollation = row[TypoOidVector](idx + 15),
          indclass = row[TypoOidVector](idx + 16),
          indoption = row[TypoInt2Vector](idx + 17),
          indexprs = row[Option[TypoPgNodeTree]](idx + 18),
          indpred = row[Option[TypoPgNodeTree]](idx + 19)
        )
      )
    }
  implicit val oFormat: OFormat[PgIndexRow] = new OFormat[PgIndexRow]{
    override def writes(o: PgIndexRow): JsObject =
      Json.obj(
        "indexrelid" -> o.indexrelid,
        "indrelid" -> o.indrelid,
        "indnatts" -> o.indnatts,
        "indnkeyatts" -> o.indnkeyatts,
        "indisunique" -> o.indisunique,
        "indisprimary" -> o.indisprimary,
        "indisexclusion" -> o.indisexclusion,
        "indimmediate" -> o.indimmediate,
        "indisclustered" -> o.indisclustered,
        "indisvalid" -> o.indisvalid,
        "indcheckxmin" -> o.indcheckxmin,
        "indisready" -> o.indisready,
        "indislive" -> o.indislive,
        "indisreplident" -> o.indisreplident,
        "indkey" -> o.indkey,
        "indcollation" -> o.indcollation,
        "indclass" -> o.indclass,
        "indoption" -> o.indoption,
        "indexprs" -> o.indexprs,
        "indpred" -> o.indpred
      )
  
    override def reads(json: JsValue): JsResult[PgIndexRow] = {
      JsResult.fromTry(
        Try(
          PgIndexRow(
            indexrelid = json.\("indexrelid").as[PgIndexId],
            indrelid = json.\("indrelid").as[/* oid */ Long],
            indnatts = json.\("indnatts").as[Int],
            indnkeyatts = json.\("indnkeyatts").as[Int],
            indisunique = json.\("indisunique").as[Boolean],
            indisprimary = json.\("indisprimary").as[Boolean],
            indisexclusion = json.\("indisexclusion").as[Boolean],
            indimmediate = json.\("indimmediate").as[Boolean],
            indisclustered = json.\("indisclustered").as[Boolean],
            indisvalid = json.\("indisvalid").as[Boolean],
            indcheckxmin = json.\("indcheckxmin").as[Boolean],
            indisready = json.\("indisready").as[Boolean],
            indislive = json.\("indislive").as[Boolean],
            indisreplident = json.\("indisreplident").as[Boolean],
            indkey = json.\("indkey").as[TypoInt2Vector],
            indcollation = json.\("indcollation").as[TypoOidVector],
            indclass = json.\("indclass").as[TypoOidVector],
            indoption = json.\("indoption").as[TypoInt2Vector],
            indexprs = json.\("indexprs").toOption.map(_.as[TypoPgNodeTree]),
            indpred = json.\("indpred").toOption.map(_.as[TypoPgNodeTree])
          )
        )
      )
    }
  }
}
