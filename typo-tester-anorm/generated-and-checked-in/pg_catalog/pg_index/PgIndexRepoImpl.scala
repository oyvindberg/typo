/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_index

import anorm.SqlStringInterpolation
import java.sql.Connection

object PgIndexRepoImpl extends PgIndexRepo {
  override def delete(indexrelid: PgIndexId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_index where indexrelid = $indexrelid".executeUpdate() > 0
  }
  override def insert(unsaved: PgIndexRow)(implicit c: Connection): PgIndexRow = {
    SQL"""insert into pg_catalog.pg_index(indexrelid, indrelid, indnatts, indnkeyatts, indisunique, indisprimary, indisexclusion, indimmediate, indisclustered, indisvalid, indcheckxmin, indisready, indislive, indisreplident, indkey, indcollation, indclass, indoption, indexprs, indpred)
          values (${unsaved.indexrelid}::oid, ${unsaved.indrelid}::oid, ${unsaved.indnatts}::int2, ${unsaved.indnkeyatts}::int2, ${unsaved.indisunique}, ${unsaved.indisprimary}, ${unsaved.indisexclusion}, ${unsaved.indimmediate}, ${unsaved.indisclustered}, ${unsaved.indisvalid}, ${unsaved.indcheckxmin}, ${unsaved.indisready}, ${unsaved.indislive}, ${unsaved.indisreplident}, ${unsaved.indkey}::int2vector, ${unsaved.indcollation}::oidvector, ${unsaved.indclass}::oidvector, ${unsaved.indoption}::int2vector, ${unsaved.indexprs}::pg_node_tree, ${unsaved.indpred}::pg_node_tree)
          returning indexrelid, indrelid, indnatts, indnkeyatts, indisunique, indisprimary, indisexclusion, indimmediate, indisclustered, indisvalid, indcheckxmin, indisready, indislive, indisreplident, indkey, indcollation, indclass, indoption, indexprs, indpred
       """
      .executeInsert(PgIndexRow.rowParser(1).single)
    
  }
  override def selectAll(implicit c: Connection): List[PgIndexRow] = {
    SQL"""select indexrelid, indrelid, indnatts, indnkeyatts, indisunique, indisprimary, indisexclusion, indimmediate, indisclustered, indisvalid, indcheckxmin, indisready, indislive, indisreplident, indkey, indcollation, indclass, indoption, indexprs, indpred
          from pg_catalog.pg_index
       """.as(PgIndexRow.rowParser(1).*)
  }
  override def selectById(indexrelid: PgIndexId)(implicit c: Connection): Option[PgIndexRow] = {
    SQL"""select indexrelid, indrelid, indnatts, indnkeyatts, indisunique, indisprimary, indisexclusion, indimmediate, indisclustered, indisvalid, indcheckxmin, indisready, indislive, indisreplident, indkey, indcollation, indclass, indoption, indexprs, indpred
          from pg_catalog.pg_index
          where indexrelid = $indexrelid
       """.as(PgIndexRow.rowParser(1).singleOpt)
  }
  override def selectByIds(indexrelids: Array[PgIndexId])(implicit c: Connection): List[PgIndexRow] = {
    SQL"""select indexrelid, indrelid, indnatts, indnkeyatts, indisunique, indisprimary, indisexclusion, indimmediate, indisclustered, indisvalid, indcheckxmin, indisready, indislive, indisreplident, indkey, indcollation, indclass, indoption, indexprs, indpred
          from pg_catalog.pg_index
          where indexrelid = ANY($indexrelids)
       """.as(PgIndexRow.rowParser(1).*)
    
  }
  override def update(row: PgIndexRow)(implicit c: Connection): Boolean = {
    val indexrelid = row.indexrelid
    SQL"""update pg_catalog.pg_index
          set indrelid = ${row.indrelid}::oid,
              indnatts = ${row.indnatts}::int2,
              indnkeyatts = ${row.indnkeyatts}::int2,
              indisunique = ${row.indisunique},
              indisprimary = ${row.indisprimary},
              indisexclusion = ${row.indisexclusion},
              indimmediate = ${row.indimmediate},
              indisclustered = ${row.indisclustered},
              indisvalid = ${row.indisvalid},
              indcheckxmin = ${row.indcheckxmin},
              indisready = ${row.indisready},
              indislive = ${row.indislive},
              indisreplident = ${row.indisreplident},
              indkey = ${row.indkey}::int2vector,
              indcollation = ${row.indcollation}::oidvector,
              indclass = ${row.indclass}::oidvector,
              indoption = ${row.indoption}::int2vector,
              indexprs = ${row.indexprs}::pg_node_tree,
              indpred = ${row.indpred}::pg_node_tree
          where indexrelid = $indexrelid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: PgIndexRow)(implicit c: Connection): PgIndexRow = {
    SQL"""insert into pg_catalog.pg_index(indexrelid, indrelid, indnatts, indnkeyatts, indisunique, indisprimary, indisexclusion, indimmediate, indisclustered, indisvalid, indcheckxmin, indisready, indislive, indisreplident, indkey, indcollation, indclass, indoption, indexprs, indpred)
          values (
            ${unsaved.indexrelid}::oid,
            ${unsaved.indrelid}::oid,
            ${unsaved.indnatts}::int2,
            ${unsaved.indnkeyatts}::int2,
            ${unsaved.indisunique},
            ${unsaved.indisprimary},
            ${unsaved.indisexclusion},
            ${unsaved.indimmediate},
            ${unsaved.indisclustered},
            ${unsaved.indisvalid},
            ${unsaved.indcheckxmin},
            ${unsaved.indisready},
            ${unsaved.indislive},
            ${unsaved.indisreplident},
            ${unsaved.indkey}::int2vector,
            ${unsaved.indcollation}::oidvector,
            ${unsaved.indclass}::oidvector,
            ${unsaved.indoption}::int2vector,
            ${unsaved.indexprs}::pg_node_tree,
            ${unsaved.indpred}::pg_node_tree
          )
          on conflict (indexrelid)
          do update set
            indrelid = EXCLUDED.indrelid,
            indnatts = EXCLUDED.indnatts,
            indnkeyatts = EXCLUDED.indnkeyatts,
            indisunique = EXCLUDED.indisunique,
            indisprimary = EXCLUDED.indisprimary,
            indisexclusion = EXCLUDED.indisexclusion,
            indimmediate = EXCLUDED.indimmediate,
            indisclustered = EXCLUDED.indisclustered,
            indisvalid = EXCLUDED.indisvalid,
            indcheckxmin = EXCLUDED.indcheckxmin,
            indisready = EXCLUDED.indisready,
            indislive = EXCLUDED.indislive,
            indisreplident = EXCLUDED.indisreplident,
            indkey = EXCLUDED.indkey,
            indcollation = EXCLUDED.indcollation,
            indclass = EXCLUDED.indclass,
            indoption = EXCLUDED.indoption,
            indexprs = EXCLUDED.indexprs,
            indpred = EXCLUDED.indpred
          returning indexrelid, indrelid, indnatts, indnkeyatts, indisunique, indisprimary, indisexclusion, indimmediate, indisclustered, indisvalid, indcheckxmin, indisready, indislive, indisreplident, indkey, indcollation, indclass, indoption, indexprs, indpred
       """
      .executeInsert(PgIndexRow.rowParser(1).single)
    
  }
}
