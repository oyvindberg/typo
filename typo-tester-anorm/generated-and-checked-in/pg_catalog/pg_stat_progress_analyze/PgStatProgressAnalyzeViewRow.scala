/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_analyze

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatProgressAnalyzeViewRow(
  pid: Option[Int],
  datid: Option[/* oid */ Long],
  datname: Option[String],
  relid: Option[/* oid */ Long],
  phase: Option[String],
  sampleBlksTotal: Option[Long],
  sampleBlksScanned: Option[Long],
  extStatsTotal: Option[Long],
  extStatsComputed: Option[Long],
  childTablesTotal: Option[Long],
  childTablesDone: Option[Long],
  currentChildTableRelid: Option[/* oid */ Long]
)

object PgStatProgressAnalyzeViewRow {
  implicit val reads: Reads[PgStatProgressAnalyzeViewRow] = Reads[PgStatProgressAnalyzeViewRow](json => JsResult.fromTry(
      Try(
        PgStatProgressAnalyzeViewRow(
          pid = json.\("pid").toOption.map(_.as(Reads.IntReads)),
          datid = json.\("datid").toOption.map(_.as(Reads.LongReads)),
          datname = json.\("datname").toOption.map(_.as(Reads.StringReads)),
          relid = json.\("relid").toOption.map(_.as(Reads.LongReads)),
          phase = json.\("phase").toOption.map(_.as(Reads.StringReads)),
          sampleBlksTotal = json.\("sample_blks_total").toOption.map(_.as(Reads.LongReads)),
          sampleBlksScanned = json.\("sample_blks_scanned").toOption.map(_.as(Reads.LongReads)),
          extStatsTotal = json.\("ext_stats_total").toOption.map(_.as(Reads.LongReads)),
          extStatsComputed = json.\("ext_stats_computed").toOption.map(_.as(Reads.LongReads)),
          childTablesTotal = json.\("child_tables_total").toOption.map(_.as(Reads.LongReads)),
          childTablesDone = json.\("child_tables_done").toOption.map(_.as(Reads.LongReads)),
          currentChildTableRelid = json.\("current_child_table_relid").toOption.map(_.as(Reads.LongReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatProgressAnalyzeViewRow] = RowParser[PgStatProgressAnalyzeViewRow] { row =>
    Success(
      PgStatProgressAnalyzeViewRow(
        pid = row(idx + 0)(Column.columnToOption(Column.columnToInt)),
        datid = row(idx + 1)(Column.columnToOption(Column.columnToLong)),
        datname = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        relid = row(idx + 3)(Column.columnToOption(Column.columnToLong)),
        phase = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        sampleBlksTotal = row(idx + 5)(Column.columnToOption(Column.columnToLong)),
        sampleBlksScanned = row(idx + 6)(Column.columnToOption(Column.columnToLong)),
        extStatsTotal = row(idx + 7)(Column.columnToOption(Column.columnToLong)),
        extStatsComputed = row(idx + 8)(Column.columnToOption(Column.columnToLong)),
        childTablesTotal = row(idx + 9)(Column.columnToOption(Column.columnToLong)),
        childTablesDone = row(idx + 10)(Column.columnToOption(Column.columnToLong)),
        currentChildTableRelid = row(idx + 11)(Column.columnToOption(Column.columnToLong))
      )
    )
  }
  implicit val writes: OWrites[PgStatProgressAnalyzeViewRow] = OWrites[PgStatProgressAnalyzeViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "pid" -> Writes.OptionWrites(Writes.IntWrites).writes(o.pid),
      "datid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.datid),
      "datname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.datname),
      "relid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.relid),
      "phase" -> Writes.OptionWrites(Writes.StringWrites).writes(o.phase),
      "sample_blks_total" -> Writes.OptionWrites(Writes.LongWrites).writes(o.sampleBlksTotal),
      "sample_blks_scanned" -> Writes.OptionWrites(Writes.LongWrites).writes(o.sampleBlksScanned),
      "ext_stats_total" -> Writes.OptionWrites(Writes.LongWrites).writes(o.extStatsTotal),
      "ext_stats_computed" -> Writes.OptionWrites(Writes.LongWrites).writes(o.extStatsComputed),
      "child_tables_total" -> Writes.OptionWrites(Writes.LongWrites).writes(o.childTablesTotal),
      "child_tables_done" -> Writes.OptionWrites(Writes.LongWrites).writes(o.childTablesDone),
      "current_child_table_relid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.currentChildTableRelid)
    ))
  )
}
