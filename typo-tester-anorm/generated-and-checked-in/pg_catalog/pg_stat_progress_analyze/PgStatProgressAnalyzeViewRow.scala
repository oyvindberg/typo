/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_analyze

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatProgressAnalyzeViewRow(
  pid: Option[Int],
  datid: Option[/* oid */ Long],
  datname: Option[String],
  relid: Option[/* oid */ Long],
  phase: Option[String],
  sampleBlksTotal: Option[Long],
  sampleBlksScanned: Option[Long],
  extStatsTotal: Option[Long],
  extStatsComputed: Option[Long],
  childTablesTotal: Option[Long],
  childTablesDone: Option[Long],
  currentChildTableRelid: Option[/* oid */ Long]
)

object PgStatProgressAnalyzeViewRow {
  def rowParser(idx: Int): RowParser[PgStatProgressAnalyzeViewRow] =
    RowParser[PgStatProgressAnalyzeViewRow] { row =>
      Success(
        PgStatProgressAnalyzeViewRow(
          pid = row[Option[Int]](idx + 0),
          datid = row[Option[/* oid */ Long]](idx + 1),
          datname = row[Option[String]](idx + 2),
          relid = row[Option[/* oid */ Long]](idx + 3),
          phase = row[Option[String]](idx + 4),
          sampleBlksTotal = row[Option[Long]](idx + 5),
          sampleBlksScanned = row[Option[Long]](idx + 6),
          extStatsTotal = row[Option[Long]](idx + 7),
          extStatsComputed = row[Option[Long]](idx + 8),
          childTablesTotal = row[Option[Long]](idx + 9),
          childTablesDone = row[Option[Long]](idx + 10),
          currentChildTableRelid = row[Option[/* oid */ Long]](idx + 11)
        )
      )
    }
  implicit val oFormat: OFormat[PgStatProgressAnalyzeViewRow] = new OFormat[PgStatProgressAnalyzeViewRow]{
    override def writes(o: PgStatProgressAnalyzeViewRow): JsObject =
      Json.obj(
        "pid" -> o.pid,
        "datid" -> o.datid,
        "datname" -> o.datname,
        "relid" -> o.relid,
        "phase" -> o.phase,
        "sample_blks_total" -> o.sampleBlksTotal,
        "sample_blks_scanned" -> o.sampleBlksScanned,
        "ext_stats_total" -> o.extStatsTotal,
        "ext_stats_computed" -> o.extStatsComputed,
        "child_tables_total" -> o.childTablesTotal,
        "child_tables_done" -> o.childTablesDone,
        "current_child_table_relid" -> o.currentChildTableRelid
      )
  
    override def reads(json: JsValue): JsResult[PgStatProgressAnalyzeViewRow] = {
      JsResult.fromTry(
        Try(
          PgStatProgressAnalyzeViewRow(
            pid = json.\("pid").toOption.map(_.as[Int]),
            datid = json.\("datid").toOption.map(_.as[/* oid */ Long]),
            datname = json.\("datname").toOption.map(_.as[String]),
            relid = json.\("relid").toOption.map(_.as[/* oid */ Long]),
            phase = json.\("phase").toOption.map(_.as[String]),
            sampleBlksTotal = json.\("sample_blks_total").toOption.map(_.as[Long]),
            sampleBlksScanned = json.\("sample_blks_scanned").toOption.map(_.as[Long]),
            extStatsTotal = json.\("ext_stats_total").toOption.map(_.as[Long]),
            extStatsComputed = json.\("ext_stats_computed").toOption.map(_.as[Long]),
            childTablesTotal = json.\("child_tables_total").toOption.map(_.as[Long]),
            childTablesDone = json.\("child_tables_done").toOption.map(_.as[Long]),
            currentChildTableRelid = json.\("current_child_table_relid").toOption.map(_.as[/* oid */ Long])
          )
        )
      )
    }
  }
}
