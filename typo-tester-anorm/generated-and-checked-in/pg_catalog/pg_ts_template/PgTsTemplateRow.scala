/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_template

import adventureworks.TypoRegproc
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTsTemplateRow(
  oid: PgTsTemplateId,
  tmplname: String,
  tmplnamespace: /* oid */ Long,
  tmplinit: TypoRegproc,
  tmpllexize: TypoRegproc
)

object PgTsTemplateRow {
  def rowParser(idx: Int): RowParser[PgTsTemplateRow] =
    RowParser[PgTsTemplateRow] { row =>
      Success(
        PgTsTemplateRow(
          oid = row[PgTsTemplateId](idx + 0),
          tmplname = row[String](idx + 1),
          tmplnamespace = row[/* oid */ Long](idx + 2),
          tmplinit = row[TypoRegproc](idx + 3),
          tmpllexize = row[TypoRegproc](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[PgTsTemplateRow] = new OFormat[PgTsTemplateRow]{
    override def writes(o: PgTsTemplateRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "tmplname" -> o.tmplname,
        "tmplnamespace" -> o.tmplnamespace,
        "tmplinit" -> o.tmplinit,
        "tmpllexize" -> o.tmpllexize
      )
  
    override def reads(json: JsValue): JsResult[PgTsTemplateRow] = {
      JsResult.fromTry(
        Try(
          PgTsTemplateRow(
            oid = json.\("oid").as[PgTsTemplateId],
            tmplname = json.\("tmplname").as[String],
            tmplnamespace = json.\("tmplnamespace").as[/* oid */ Long],
            tmplinit = json.\("tmplinit").as[TypoRegproc],
            tmpllexize = json.\("tmpllexize").as[TypoRegproc]
          )
        )
      )
    }
  }
}
