/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_template

import adventureworks.TypoRegproc
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgTsTemplateRow(
  oid: PgTsTemplateId,
  tmplname: String,
  tmplnamespace: /* oid */ Long,
  tmplinit: TypoRegproc,
  tmpllexize: TypoRegproc
)

object PgTsTemplateRow {
  implicit val reads: Reads[PgTsTemplateRow] = Reads[PgTsTemplateRow](json => JsResult.fromTry(
      Try(
        PgTsTemplateRow(
          oid = json.\("oid").as[PgTsTemplateId],
          tmplname = json.\("tmplname").as[String],
          tmplnamespace = json.\("tmplnamespace").as[/* oid */ Long],
          tmplinit = json.\("tmplinit").as[TypoRegproc],
          tmpllexize = json.\("tmpllexize").as[TypoRegproc]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgTsTemplateRow] = RowParser[PgTsTemplateRow] { row =>
    Success(
      PgTsTemplateRow(
        oid = row[PgTsTemplateId](idx + 0),
        tmplname = row[String](idx + 1),
        tmplnamespace = row[/* oid */ Long](idx + 2),
        tmplinit = row[TypoRegproc](idx + 3),
        tmpllexize = row[TypoRegproc](idx + 4)
      )
    )
  }
  implicit val writes: OWrites[PgTsTemplateRow] = OWrites[PgTsTemplateRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "tmplname" -> Json.toJson(o.tmplname),
      "tmplnamespace" -> Json.toJson(o.tmplnamespace),
      "tmplinit" -> Json.toJson(o.tmplinit),
      "tmpllexize" -> Json.toJson(o.tmpllexize)
    ))
  )
}
