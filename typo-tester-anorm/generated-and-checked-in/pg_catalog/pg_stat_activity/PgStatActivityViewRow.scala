/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_activity

import adventureworks.TypoInet
import adventureworks.TypoOffsetDateTime
import adventureworks.TypoXid
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatActivityViewRow(
  datid: Option[/* oid */ Long],
  datname: Option[String],
  pid: Option[Int],
  leaderPid: Option[Int],
  usesysid: Option[/* oid */ Long],
  usename: Option[String],
  applicationName: Option[String],
  clientAddr: Option[TypoInet],
  clientHostname: Option[String],
  clientPort: Option[Int],
  backendStart: Option[TypoOffsetDateTime],
  xactStart: Option[TypoOffsetDateTime],
  queryStart: Option[TypoOffsetDateTime],
  stateChange: Option[TypoOffsetDateTime],
  waitEventType: Option[String],
  waitEvent: Option[String],
  state: Option[String],
  backendXid: Option[TypoXid],
  backendXmin: Option[TypoXid],
  queryId: Option[Long],
  query: Option[String],
  backendType: Option[String]
)

object PgStatActivityViewRow {
  implicit val reads: Reads[PgStatActivityViewRow] = Reads[PgStatActivityViewRow](json => JsResult.fromTry(
      Try(
        PgStatActivityViewRow(
          datid = json.\("datid").toOption.map(_.as(Reads.LongReads)),
          datname = json.\("datname").toOption.map(_.as(Reads.StringReads)),
          pid = json.\("pid").toOption.map(_.as(Reads.IntReads)),
          leaderPid = json.\("leader_pid").toOption.map(_.as(Reads.IntReads)),
          usesysid = json.\("usesysid").toOption.map(_.as(Reads.LongReads)),
          usename = json.\("usename").toOption.map(_.as(Reads.StringReads)),
          applicationName = json.\("application_name").toOption.map(_.as(Reads.StringReads)),
          clientAddr = json.\("client_addr").toOption.map(_.as(TypoInet.reads)),
          clientHostname = json.\("client_hostname").toOption.map(_.as(Reads.StringReads)),
          clientPort = json.\("client_port").toOption.map(_.as(Reads.IntReads)),
          backendStart = json.\("backend_start").toOption.map(_.as(TypoOffsetDateTime.reads)),
          xactStart = json.\("xact_start").toOption.map(_.as(TypoOffsetDateTime.reads)),
          queryStart = json.\("query_start").toOption.map(_.as(TypoOffsetDateTime.reads)),
          stateChange = json.\("state_change").toOption.map(_.as(TypoOffsetDateTime.reads)),
          waitEventType = json.\("wait_event_type").toOption.map(_.as(Reads.StringReads)),
          waitEvent = json.\("wait_event").toOption.map(_.as(Reads.StringReads)),
          state = json.\("state").toOption.map(_.as(Reads.StringReads)),
          backendXid = json.\("backend_xid").toOption.map(_.as(TypoXid.reads)),
          backendXmin = json.\("backend_xmin").toOption.map(_.as(TypoXid.reads)),
          queryId = json.\("query_id").toOption.map(_.as(Reads.LongReads)),
          query = json.\("query").toOption.map(_.as(Reads.StringReads)),
          backendType = json.\("backend_type").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatActivityViewRow] = RowParser[PgStatActivityViewRow] { row =>
    Success(
      PgStatActivityViewRow(
        datid = row(idx + 0)(Column.columnToOption(Column.columnToLong)),
        datname = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        pid = row(idx + 2)(Column.columnToOption(Column.columnToInt)),
        leaderPid = row(idx + 3)(Column.columnToOption(Column.columnToInt)),
        usesysid = row(idx + 4)(Column.columnToOption(Column.columnToLong)),
        usename = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        applicationName = row(idx + 6)(Column.columnToOption(Column.columnToString)),
        clientAddr = row(idx + 7)(Column.columnToOption(TypoInet.column)),
        clientHostname = row(idx + 8)(Column.columnToOption(Column.columnToString)),
        clientPort = row(idx + 9)(Column.columnToOption(Column.columnToInt)),
        backendStart = row(idx + 10)(Column.columnToOption(TypoOffsetDateTime.column)),
        xactStart = row(idx + 11)(Column.columnToOption(TypoOffsetDateTime.column)),
        queryStart = row(idx + 12)(Column.columnToOption(TypoOffsetDateTime.column)),
        stateChange = row(idx + 13)(Column.columnToOption(TypoOffsetDateTime.column)),
        waitEventType = row(idx + 14)(Column.columnToOption(Column.columnToString)),
        waitEvent = row(idx + 15)(Column.columnToOption(Column.columnToString)),
        state = row(idx + 16)(Column.columnToOption(Column.columnToString)),
        backendXid = row(idx + 17)(Column.columnToOption(TypoXid.column)),
        backendXmin = row(idx + 18)(Column.columnToOption(TypoXid.column)),
        queryId = row(idx + 19)(Column.columnToOption(Column.columnToLong)),
        query = row(idx + 20)(Column.columnToOption(Column.columnToString)),
        backendType = row(idx + 21)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit val writes: OWrites[PgStatActivityViewRow] = OWrites[PgStatActivityViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "datid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.datid),
      "datname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.datname),
      "pid" -> Writes.OptionWrites(Writes.IntWrites).writes(o.pid),
      "leader_pid" -> Writes.OptionWrites(Writes.IntWrites).writes(o.leaderPid),
      "usesysid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.usesysid),
      "usename" -> Writes.OptionWrites(Writes.StringWrites).writes(o.usename),
      "application_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.applicationName),
      "client_addr" -> Writes.OptionWrites(TypoInet.writes).writes(o.clientAddr),
      "client_hostname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.clientHostname),
      "client_port" -> Writes.OptionWrites(Writes.IntWrites).writes(o.clientPort),
      "backend_start" -> Writes.OptionWrites(TypoOffsetDateTime.writes).writes(o.backendStart),
      "xact_start" -> Writes.OptionWrites(TypoOffsetDateTime.writes).writes(o.xactStart),
      "query_start" -> Writes.OptionWrites(TypoOffsetDateTime.writes).writes(o.queryStart),
      "state_change" -> Writes.OptionWrites(TypoOffsetDateTime.writes).writes(o.stateChange),
      "wait_event_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.waitEventType),
      "wait_event" -> Writes.OptionWrites(Writes.StringWrites).writes(o.waitEvent),
      "state" -> Writes.OptionWrites(Writes.StringWrites).writes(o.state),
      "backend_xid" -> Writes.OptionWrites(TypoXid.writes).writes(o.backendXid),
      "backend_xmin" -> Writes.OptionWrites(TypoXid.writes).writes(o.backendXmin),
      "query_id" -> Writes.OptionWrites(Writes.LongWrites).writes(o.queryId),
      "query" -> Writes.OptionWrites(Writes.StringWrites).writes(o.query),
      "backend_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.backendType)
    ))
  )
}
