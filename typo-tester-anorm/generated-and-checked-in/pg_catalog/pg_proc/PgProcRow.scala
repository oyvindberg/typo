/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_proc

import adventureworks.TypoAclItem
import adventureworks.TypoOidVector
import adventureworks.TypoPgNodeTree
import adventureworks.TypoRegproc
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgProcRow(
  oid: PgProcId,
  proname: String,
  pronamespace: /* oid */ Long,
  proowner: /* oid */ Long,
  prolang: /* oid */ Long,
  procost: Float,
  prorows: Float,
  provariadic: /* oid */ Long,
  prosupport: TypoRegproc,
  prokind: String,
  prosecdef: Boolean,
  proleakproof: Boolean,
  proisstrict: Boolean,
  proretset: Boolean,
  provolatile: String,
  proparallel: String,
  pronargs: Int,
  pronargdefaults: Int,
  prorettype: /* oid */ Long,
  proargtypes: TypoOidVector,
  proallargtypes: Option[Array[/* oid */ Long]],
  proargmodes: Option[Array[String]],
  proargnames: Option[Array[String]],
  proargdefaults: Option[TypoPgNodeTree],
  protrftypes: Option[Array[/* oid */ Long]],
  prosrc: String,
  probin: Option[String],
  prosqlbody: Option[TypoPgNodeTree],
  proconfig: Option[Array[String]],
  proacl: Option[Array[TypoAclItem]]
)

object PgProcRow {
  def rowParser(idx: Int): RowParser[PgProcRow] =
    RowParser[PgProcRow] { row =>
      Success(
        PgProcRow(
          oid = row[PgProcId](idx + 0),
          proname = row[String](idx + 1),
          pronamespace = row[/* oid */ Long](idx + 2),
          proowner = row[/* oid */ Long](idx + 3),
          prolang = row[/* oid */ Long](idx + 4),
          procost = row[Float](idx + 5),
          prorows = row[Float](idx + 6),
          provariadic = row[/* oid */ Long](idx + 7),
          prosupport = row[TypoRegproc](idx + 8),
          prokind = row[String](idx + 9),
          prosecdef = row[Boolean](idx + 10),
          proleakproof = row[Boolean](idx + 11),
          proisstrict = row[Boolean](idx + 12),
          proretset = row[Boolean](idx + 13),
          provolatile = row[String](idx + 14),
          proparallel = row[String](idx + 15),
          pronargs = row[Int](idx + 16),
          pronargdefaults = row[Int](idx + 17),
          prorettype = row[/* oid */ Long](idx + 18),
          proargtypes = row[TypoOidVector](idx + 19),
          proallargtypes = row[Option[Array[/* oid */ Long]]](idx + 20),
          proargmodes = row[Option[Array[String]]](idx + 21),
          proargnames = row[Option[Array[String]]](idx + 22),
          proargdefaults = row[Option[TypoPgNodeTree]](idx + 23),
          protrftypes = row[Option[Array[/* oid */ Long]]](idx + 24),
          prosrc = row[String](idx + 25),
          probin = row[Option[String]](idx + 26),
          prosqlbody = row[Option[TypoPgNodeTree]](idx + 27),
          proconfig = row[Option[Array[String]]](idx + 28),
          proacl = row[Option[Array[TypoAclItem]]](idx + 29)
        )
      )
    }
  implicit val oFormat: OFormat[PgProcRow] = new OFormat[PgProcRow]{
    override def writes(o: PgProcRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "proname" -> o.proname,
        "pronamespace" -> o.pronamespace,
        "proowner" -> o.proowner,
        "prolang" -> o.prolang,
        "procost" -> o.procost,
        "prorows" -> o.prorows,
        "provariadic" -> o.provariadic,
        "prosupport" -> o.prosupport,
        "prokind" -> o.prokind,
        "prosecdef" -> o.prosecdef,
        "proleakproof" -> o.proleakproof,
        "proisstrict" -> o.proisstrict,
        "proretset" -> o.proretset,
        "provolatile" -> o.provolatile,
        "proparallel" -> o.proparallel,
        "pronargs" -> o.pronargs,
        "pronargdefaults" -> o.pronargdefaults,
        "prorettype" -> o.prorettype,
        "proargtypes" -> o.proargtypes,
        "proallargtypes" -> o.proallargtypes,
        "proargmodes" -> o.proargmodes,
        "proargnames" -> o.proargnames,
        "proargdefaults" -> o.proargdefaults,
        "protrftypes" -> o.protrftypes,
        "prosrc" -> o.prosrc,
        "probin" -> o.probin,
        "prosqlbody" -> o.prosqlbody,
        "proconfig" -> o.proconfig,
        "proacl" -> o.proacl
      )
  
    override def reads(json: JsValue): JsResult[PgProcRow] = {
      JsResult.fromTry(
        Try(
          PgProcRow(
            oid = json.\("oid").as[PgProcId],
            proname = json.\("proname").as[String],
            pronamespace = json.\("pronamespace").as[/* oid */ Long],
            proowner = json.\("proowner").as[/* oid */ Long],
            prolang = json.\("prolang").as[/* oid */ Long],
            procost = json.\("procost").as[Float],
            prorows = json.\("prorows").as[Float],
            provariadic = json.\("provariadic").as[/* oid */ Long],
            prosupport = json.\("prosupport").as[TypoRegproc],
            prokind = json.\("prokind").as[String],
            prosecdef = json.\("prosecdef").as[Boolean],
            proleakproof = json.\("proleakproof").as[Boolean],
            proisstrict = json.\("proisstrict").as[Boolean],
            proretset = json.\("proretset").as[Boolean],
            provolatile = json.\("provolatile").as[String],
            proparallel = json.\("proparallel").as[String],
            pronargs = json.\("pronargs").as[Int],
            pronargdefaults = json.\("pronargdefaults").as[Int],
            prorettype = json.\("prorettype").as[/* oid */ Long],
            proargtypes = json.\("proargtypes").as[TypoOidVector],
            proallargtypes = json.\("proallargtypes").toOption.map(_.as[Array[/* oid */ Long]]),
            proargmodes = json.\("proargmodes").toOption.map(_.as[Array[String]]),
            proargnames = json.\("proargnames").toOption.map(_.as[Array[String]]),
            proargdefaults = json.\("proargdefaults").toOption.map(_.as[TypoPgNodeTree]),
            protrftypes = json.\("protrftypes").toOption.map(_.as[Array[/* oid */ Long]]),
            prosrc = json.\("prosrc").as[String],
            probin = json.\("probin").toOption.map(_.as[String]),
            prosqlbody = json.\("prosqlbody").toOption.map(_.as[TypoPgNodeTree]),
            proconfig = json.\("proconfig").toOption.map(_.as[Array[String]]),
            proacl = json.\("proacl").toOption.map(_.as[Array[TypoAclItem]])
          )
        )
      )
    }
  }
}
