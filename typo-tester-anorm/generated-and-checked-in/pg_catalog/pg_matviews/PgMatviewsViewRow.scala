/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_matviews

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgMatviewsViewRow(
  schemaname: Option[String],
  matviewname: Option[String],
  matviewowner: Option[String],
  tablespace: Option[String],
  hasindexes: Option[Boolean],
  ispopulated: Option[Boolean],
  definition: Option[String]
)

object PgMatviewsViewRow {
  implicit val reads: Reads[PgMatviewsViewRow] = Reads[PgMatviewsViewRow](json => JsResult.fromTry(
      Try(
        PgMatviewsViewRow(
          schemaname = json.\("schemaname").toOption.map(_.as[String]),
          matviewname = json.\("matviewname").toOption.map(_.as[String]),
          matviewowner = json.\("matviewowner").toOption.map(_.as[String]),
          tablespace = json.\("tablespace").toOption.map(_.as[String]),
          hasindexes = json.\("hasindexes").toOption.map(_.as[Boolean]),
          ispopulated = json.\("ispopulated").toOption.map(_.as[Boolean]),
          definition = json.\("definition").toOption.map(_.as[String])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgMatviewsViewRow] = RowParser[PgMatviewsViewRow] { row =>
    Success(
      PgMatviewsViewRow(
        schemaname = row[Option[String]](idx + 0),
        matviewname = row[Option[String]](idx + 1),
        matviewowner = row[Option[String]](idx + 2),
        tablespace = row[Option[String]](idx + 3),
        hasindexes = row[Option[Boolean]](idx + 4),
        ispopulated = row[Option[Boolean]](idx + 5),
        definition = row[Option[String]](idx + 6)
      )
    )
  }
  implicit val writes: OWrites[PgMatviewsViewRow] = OWrites[PgMatviewsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "schemaname" -> Json.toJson(o.schemaname),
      "matviewname" -> Json.toJson(o.matviewname),
      "matviewowner" -> Json.toJson(o.matviewowner),
      "tablespace" -> Json.toJson(o.tablespace),
      "hasindexes" -> Json.toJson(o.hasindexes),
      "ispopulated" -> Json.toJson(o.ispopulated),
      "definition" -> Json.toJson(o.definition)
    ))
  )
}
