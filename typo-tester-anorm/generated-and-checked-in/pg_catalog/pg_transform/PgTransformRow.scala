/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_transform

import adventureworks.TypoRegproc
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgTransformRow(
  oid: PgTransformId,
  trftype: /* oid */ Long,
  trflang: /* oid */ Long,
  trffromsql: TypoRegproc,
  trftosql: TypoRegproc
)

object PgTransformRow {
  implicit val reads: Reads[PgTransformRow] = Reads[PgTransformRow](json => JsResult.fromTry(
      Try(
        PgTransformRow(
          oid = json.\("oid").as[PgTransformId],
          trftype = json.\("trftype").as[/* oid */ Long],
          trflang = json.\("trflang").as[/* oid */ Long],
          trffromsql = json.\("trffromsql").as[TypoRegproc],
          trftosql = json.\("trftosql").as[TypoRegproc]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgTransformRow] = RowParser[PgTransformRow] { row =>
    Success(
      PgTransformRow(
        oid = row[PgTransformId](idx + 0),
        trftype = row[/* oid */ Long](idx + 1),
        trflang = row[/* oid */ Long](idx + 2),
        trffromsql = row[TypoRegproc](idx + 3),
        trftosql = row[TypoRegproc](idx + 4)
      )
    )
  }
  implicit val writes: OWrites[PgTransformRow] = OWrites[PgTransformRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "trftype" -> Json.toJson(o.trftype),
      "trflang" -> Json.toJson(o.trflang),
      "trffromsql" -> Json.toJson(o.trffromsql),
      "trftosql" -> Json.toJson(o.trftosql)
    ))
  )
}
