/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_transform

import anorm.SqlStringInterpolation
import java.sql.Connection

object PgTransformRepoImpl extends PgTransformRepo {
  override def delete(oid: PgTransformId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_transform where oid = $oid".executeUpdate() > 0
  }
  override def insert(unsaved: PgTransformRow)(implicit c: Connection): PgTransformRow = {
    SQL"""insert into pg_catalog.pg_transform(oid, trftype, trflang, trffromsql, trftosql)
          values (${unsaved.oid}::oid, ${unsaved.trftype}::oid, ${unsaved.trflang}::oid, ${unsaved.trffromsql}::regproc, ${unsaved.trftosql}::regproc)
          returning oid, trftype, trflang, trffromsql, trftosql
       """
      .executeInsert(PgTransformRow.rowParser(1).single)
  
  }
  override def selectAll(implicit c: Connection): List[PgTransformRow] = {
    SQL"""select oid, trftype, trflang, trffromsql, trftosql
          from pg_catalog.pg_transform
       """.as(PgTransformRow.rowParser(1).*)
  }
  override def selectById(oid: PgTransformId)(implicit c: Connection): Option[PgTransformRow] = {
    SQL"""select oid, trftype, trflang, trffromsql, trftosql
          from pg_catalog.pg_transform
          where oid = $oid
       """.as(PgTransformRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgTransformId])(implicit c: Connection): List[PgTransformRow] = {
    SQL"""select oid, trftype, trflang, trffromsql, trftosql
          from pg_catalog.pg_transform
          where oid = ANY($oids)
       """.as(PgTransformRow.rowParser(1).*)
  
  }
  override def update(row: PgTransformRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_transform
          set trftype = ${row.trftype}::oid,
              trflang = ${row.trflang}::oid,
              trffromsql = ${row.trffromsql}::regproc,
              trftosql = ${row.trftosql}::regproc
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: PgTransformRow)(implicit c: Connection): PgTransformRow = {
    SQL"""insert into pg_catalog.pg_transform(oid, trftype, trflang, trffromsql, trftosql)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.trftype}::oid,
            ${unsaved.trflang}::oid,
            ${unsaved.trffromsql}::regproc,
            ${unsaved.trftosql}::regproc
          )
          on conflict (oid)
          do update set
            trftype = EXCLUDED.trftype,
            trflang = EXCLUDED.trflang,
            trffromsql = EXCLUDED.trffromsql,
            trftosql = EXCLUDED.trftosql
          returning oid, trftype, trflang, trffromsql, trftosql
       """
      .executeInsert(PgTransformRow.rowParser(1).single)
  
  }
}
