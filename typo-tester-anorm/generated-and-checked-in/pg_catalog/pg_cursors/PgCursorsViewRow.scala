/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_cursors

import anorm.RowParser
import anorm.Success
import java.time.OffsetDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgCursorsViewRow(
  name: Option[String],
  statement: Option[String],
  isHoldable: Option[Boolean],
  isBinary: Option[Boolean],
  isScrollable: Option[Boolean],
  creationTime: Option[OffsetDateTime]
)

object PgCursorsViewRow {
  def rowParser(idx: Int): RowParser[PgCursorsViewRow] =
    RowParser[PgCursorsViewRow] { row =>
      Success(
        PgCursorsViewRow(
          name = row[Option[String]](idx + 0),
          statement = row[Option[String]](idx + 1),
          isHoldable = row[Option[Boolean]](idx + 2),
          isBinary = row[Option[Boolean]](idx + 3),
          isScrollable = row[Option[Boolean]](idx + 4),
          creationTime = row[Option[OffsetDateTime]](idx + 5)
        )
      )
    }
  implicit val oFormat: OFormat[PgCursorsViewRow] = new OFormat[PgCursorsViewRow]{
    override def writes(o: PgCursorsViewRow): JsObject =
      Json.obj(
        "name" -> o.name,
        "statement" -> o.statement,
        "is_holdable" -> o.isHoldable,
        "is_binary" -> o.isBinary,
        "is_scrollable" -> o.isScrollable,
        "creation_time" -> o.creationTime
      )
  
    override def reads(json: JsValue): JsResult[PgCursorsViewRow] = {
      JsResult.fromTry(
        Try(
          PgCursorsViewRow(
            name = json.\("name").toOption.map(_.as[String]),
            statement = json.\("statement").toOption.map(_.as[String]),
            isHoldable = json.\("is_holdable").toOption.map(_.as[Boolean]),
            isBinary = json.\("is_binary").toOption.map(_.as[Boolean]),
            isScrollable = json.\("is_scrollable").toOption.map(_.as[Boolean]),
            creationTime = json.\("creation_time").toOption.map(_.as[OffsetDateTime])
          )
        )
      )
    }
  }
}
