/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opfamily

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgOpfamilyRow(
  oid: PgOpfamilyId,
  opfmethod: /* oid */ Long,
  opfname: String,
  opfnamespace: /* oid */ Long,
  opfowner: /* oid */ Long
)

object PgOpfamilyRow {
  implicit val reads: Reads[PgOpfamilyRow] = Reads[PgOpfamilyRow](json => JsResult.fromTry(
      Try(
        PgOpfamilyRow(
          oid = json.\("oid").as[PgOpfamilyId],
          opfmethod = json.\("opfmethod").as[/* oid */ Long],
          opfname = json.\("opfname").as[String],
          opfnamespace = json.\("opfnamespace").as[/* oid */ Long],
          opfowner = json.\("opfowner").as[/* oid */ Long]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgOpfamilyRow] = RowParser[PgOpfamilyRow] { row =>
    Success(
      PgOpfamilyRow(
        oid = row[PgOpfamilyId](idx + 0),
        opfmethod = row[/* oid */ Long](idx + 1),
        opfname = row[String](idx + 2),
        opfnamespace = row[/* oid */ Long](idx + 3),
        opfowner = row[/* oid */ Long](idx + 4)
      )
    )
  }
  implicit val writes: OWrites[PgOpfamilyRow] = OWrites[PgOpfamilyRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "opfmethod" -> Json.toJson(o.opfmethod),
      "opfname" -> Json.toJson(o.opfname),
      "opfnamespace" -> Json.toJson(o.opfnamespace),
      "opfowner" -> Json.toJson(o.opfowner)
    ))
  )
}
