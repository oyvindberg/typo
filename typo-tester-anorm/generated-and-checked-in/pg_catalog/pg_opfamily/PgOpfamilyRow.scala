/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opfamily

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgOpfamilyRow(
  oid: PgOpfamilyId,
  opfmethod: /* oid */ Long,
  opfname: String,
  opfnamespace: /* oid */ Long,
  opfowner: /* oid */ Long
)

object PgOpfamilyRow {
  def rowParser(idx: Int): RowParser[PgOpfamilyRow] =
    RowParser[PgOpfamilyRow] { row =>
      Success(
        PgOpfamilyRow(
          oid = row[PgOpfamilyId](idx + 0),
          opfmethod = row[/* oid */ Long](idx + 1),
          opfname = row[String](idx + 2),
          opfnamespace = row[/* oid */ Long](idx + 3),
          opfowner = row[/* oid */ Long](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[PgOpfamilyRow] = new OFormat[PgOpfamilyRow]{
    override def writes(o: PgOpfamilyRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "opfmethod" -> o.opfmethod,
        "opfname" -> o.opfname,
        "opfnamespace" -> o.opfnamespace,
        "opfowner" -> o.opfowner
      )
  
    override def reads(json: JsValue): JsResult[PgOpfamilyRow] = {
      JsResult.fromTry(
        Try(
          PgOpfamilyRow(
            oid = json.\("oid").as[PgOpfamilyId],
            opfmethod = json.\("opfmethod").as[/* oid */ Long],
            opfname = json.\("opfname").as[String],
            opfnamespace = json.\("opfnamespace").as[/* oid */ Long],
            opfowner = json.\("opfowner").as[/* oid */ Long]
          )
        )
      )
    }
  }
}
