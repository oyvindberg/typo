/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opfamily

import anorm.SqlStringInterpolation
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgOpfamilyRepoImpl extends PgOpfamilyRepo {
  override def delete(oid: PgOpfamilyId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_opfamily where oid = $oid".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgOpfamilyFields, PgOpfamilyRow] = {
    DeleteBuilder("pg_catalog.pg_opfamily", PgOpfamilyFields)
  }
  override def insert(unsaved: PgOpfamilyRow)(implicit c: Connection): PgOpfamilyRow = {
    SQL"""insert into pg_catalog.pg_opfamily(oid, opfmethod, opfname, opfnamespace, opfowner)
          values (${unsaved.oid}::oid, ${unsaved.opfmethod}::oid, ${unsaved.opfname}::name, ${unsaved.opfnamespace}::oid, ${unsaved.opfowner}::oid)
          returning oid, opfmethod, opfname, opfnamespace, opfowner
       """
      .executeInsert(PgOpfamilyRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgOpfamilyFields, PgOpfamilyRow] = {
    SelectBuilderSql("pg_catalog.pg_opfamily", PgOpfamilyFields, PgOpfamilyRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgOpfamilyRow] = {
    SQL"""select oid, opfmethod, opfname, opfnamespace, opfowner
          from pg_catalog.pg_opfamily
       """.as(PgOpfamilyRow.rowParser(1).*)
  }
  override def selectById(oid: PgOpfamilyId)(implicit c: Connection): Option[PgOpfamilyRow] = {
    SQL"""select oid, opfmethod, opfname, opfnamespace, opfowner
          from pg_catalog.pg_opfamily
          where oid = $oid
       """.as(PgOpfamilyRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgOpfamilyId])(implicit c: Connection): List[PgOpfamilyRow] = {
    SQL"""select oid, opfmethod, opfname, opfnamespace, opfowner
          from pg_catalog.pg_opfamily
          where oid = ANY($oids)
       """.as(PgOpfamilyRow.rowParser(1).*)
    
  }
  override def update(row: PgOpfamilyRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_opfamily
          set opfmethod = ${row.opfmethod}::oid,
              opfname = ${row.opfname}::name,
              opfnamespace = ${row.opfnamespace}::oid,
              opfowner = ${row.opfowner}::oid
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgOpfamilyFields, PgOpfamilyRow] = {
    UpdateBuilder("pg_catalog.pg_opfamily", PgOpfamilyFields, PgOpfamilyRow.rowParser)
  }
  override def upsert(unsaved: PgOpfamilyRow)(implicit c: Connection): PgOpfamilyRow = {
    SQL"""insert into pg_catalog.pg_opfamily(oid, opfmethod, opfname, opfnamespace, opfowner)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.opfmethod}::oid,
            ${unsaved.opfname}::name,
            ${unsaved.opfnamespace}::oid,
            ${unsaved.opfowner}::oid
          )
          on conflict (oid)
          do update set
            opfmethod = EXCLUDED.opfmethod,
            opfname = EXCLUDED.opfname,
            opfnamespace = EXCLUDED.opfnamespace,
            opfowner = EXCLUDED.opfowner
          returning oid, opfmethod, opfname, opfnamespace, opfowner
       """
      .executeInsert(PgOpfamilyRow.rowParser(1).single)
    
  }
}
