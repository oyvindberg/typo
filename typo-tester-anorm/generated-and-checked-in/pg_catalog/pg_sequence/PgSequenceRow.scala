/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_sequence

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgSequenceRow(
  seqrelid: PgSequenceId,
  seqtypid: /* oid */ Long,
  seqstart: Long,
  seqincrement: Long,
  seqmax: Long,
  seqmin: Long,
  seqcache: Long,
  seqcycle: Boolean
)

object PgSequenceRow {
  def rowParser(idx: Int): RowParser[PgSequenceRow] =
    RowParser[PgSequenceRow] { row =>
      Success(
        PgSequenceRow(
          seqrelid = row[PgSequenceId](idx + 0),
          seqtypid = row[/* oid */ Long](idx + 1),
          seqstart = row[Long](idx + 2),
          seqincrement = row[Long](idx + 3),
          seqmax = row[Long](idx + 4),
          seqmin = row[Long](idx + 5),
          seqcache = row[Long](idx + 6),
          seqcycle = row[Boolean](idx + 7)
        )
      )
    }
  implicit val oFormat: OFormat[PgSequenceRow] = new OFormat[PgSequenceRow]{
    override def writes(o: PgSequenceRow): JsObject =
      Json.obj(
        "seqrelid" -> o.seqrelid,
        "seqtypid" -> o.seqtypid,
        "seqstart" -> o.seqstart,
        "seqincrement" -> o.seqincrement,
        "seqmax" -> o.seqmax,
        "seqmin" -> o.seqmin,
        "seqcache" -> o.seqcache,
        "seqcycle" -> o.seqcycle
      )
  
    override def reads(json: JsValue): JsResult[PgSequenceRow] = {
      JsResult.fromTry(
        Try(
          PgSequenceRow(
            seqrelid = json.\("seqrelid").as[PgSequenceId],
            seqtypid = json.\("seqtypid").as[/* oid */ Long],
            seqstart = json.\("seqstart").as[Long],
            seqincrement = json.\("seqincrement").as[Long],
            seqmax = json.\("seqmax").as[Long],
            seqmin = json.\("seqmin").as[Long],
            seqcache = json.\("seqcache").as[Long],
            seqcycle = json.\("seqcycle").as[Boolean]
          )
        )
      )
    }
  }
}
