/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_data_wrapper

import anorm.SqlStringInterpolation
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgForeignDataWrapperRepoImpl extends PgForeignDataWrapperRepo {
  override def delete(oid: PgForeignDataWrapperId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_foreign_data_wrapper where oid = $oid".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgForeignDataWrapperFields, PgForeignDataWrapperRow] = {
    DeleteBuilder("pg_catalog.pg_foreign_data_wrapper", PgForeignDataWrapperFields)
  }
  override def insert(unsaved: PgForeignDataWrapperRow)(implicit c: Connection): PgForeignDataWrapperRow = {
    SQL"""insert into pg_catalog.pg_foreign_data_wrapper(oid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions)
          values (${unsaved.oid}::oid, ${unsaved.fdwname}::name, ${unsaved.fdwowner}::oid, ${unsaved.fdwhandler}::oid, ${unsaved.fdwvalidator}::oid, ${unsaved.fdwacl}::_aclitem, ${unsaved.fdwoptions}::_text)
          returning oid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions
       """
      .executeInsert(PgForeignDataWrapperRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgForeignDataWrapperFields, PgForeignDataWrapperRow] = {
    SelectBuilderSql("pg_catalog.pg_foreign_data_wrapper", PgForeignDataWrapperFields, PgForeignDataWrapperRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgForeignDataWrapperRow] = {
    SQL"""select oid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions
          from pg_catalog.pg_foreign_data_wrapper
       """.as(PgForeignDataWrapperRow.rowParser(1).*)
  }
  override def selectById(oid: PgForeignDataWrapperId)(implicit c: Connection): Option[PgForeignDataWrapperRow] = {
    SQL"""select oid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions
          from pg_catalog.pg_foreign_data_wrapper
          where oid = $oid
       """.as(PgForeignDataWrapperRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgForeignDataWrapperId])(implicit c: Connection): List[PgForeignDataWrapperRow] = {
    SQL"""select oid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions
          from pg_catalog.pg_foreign_data_wrapper
          where oid = ANY($oids)
       """.as(PgForeignDataWrapperRow.rowParser(1).*)
    
  }
  override def update(row: PgForeignDataWrapperRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_foreign_data_wrapper
          set fdwname = ${row.fdwname}::name,
              fdwowner = ${row.fdwowner}::oid,
              fdwhandler = ${row.fdwhandler}::oid,
              fdwvalidator = ${row.fdwvalidator}::oid,
              fdwacl = ${row.fdwacl}::_aclitem,
              fdwoptions = ${row.fdwoptions}::_text
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgForeignDataWrapperFields, PgForeignDataWrapperRow] = {
    UpdateBuilder("pg_catalog.pg_foreign_data_wrapper", PgForeignDataWrapperFields, PgForeignDataWrapperRow.rowParser)
  }
  override def upsert(unsaved: PgForeignDataWrapperRow)(implicit c: Connection): PgForeignDataWrapperRow = {
    SQL"""insert into pg_catalog.pg_foreign_data_wrapper(oid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.fdwname}::name,
            ${unsaved.fdwowner}::oid,
            ${unsaved.fdwhandler}::oid,
            ${unsaved.fdwvalidator}::oid,
            ${unsaved.fdwacl}::_aclitem,
            ${unsaved.fdwoptions}::_text
          )
          on conflict (oid)
          do update set
            fdwname = EXCLUDED.fdwname,
            fdwowner = EXCLUDED.fdwowner,
            fdwhandler = EXCLUDED.fdwhandler,
            fdwvalidator = EXCLUDED.fdwvalidator,
            fdwacl = EXCLUDED.fdwacl,
            fdwoptions = EXCLUDED.fdwoptions
          returning oid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions
       """
      .executeInsert(PgForeignDataWrapperRow.rowParser(1).single)
    
  }
}
