/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amop

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgAmopRow(
  oid: PgAmopId,
  amopfamily: /* oid */ Long,
  amoplefttype: /* oid */ Long,
  amoprighttype: /* oid */ Long,
  amopstrategy: Int,
  amoppurpose: String,
  amopopr: /* oid */ Long,
  amopmethod: /* oid */ Long,
  amopsortfamily: /* oid */ Long
)

object PgAmopRow {
  def rowParser(idx: Int): RowParser[PgAmopRow] =
    RowParser[PgAmopRow] { row =>
      Success(
        PgAmopRow(
          oid = row[PgAmopId](idx + 0),
          amopfamily = row[/* oid */ Long](idx + 1),
          amoplefttype = row[/* oid */ Long](idx + 2),
          amoprighttype = row[/* oid */ Long](idx + 3),
          amopstrategy = row[Int](idx + 4),
          amoppurpose = row[String](idx + 5),
          amopopr = row[/* oid */ Long](idx + 6),
          amopmethod = row[/* oid */ Long](idx + 7),
          amopsortfamily = row[/* oid */ Long](idx + 8)
        )
      )
    }
  implicit val oFormat: OFormat[PgAmopRow] = new OFormat[PgAmopRow]{
    override def writes(o: PgAmopRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "amopfamily" -> o.amopfamily,
        "amoplefttype" -> o.amoplefttype,
        "amoprighttype" -> o.amoprighttype,
        "amopstrategy" -> o.amopstrategy,
        "amoppurpose" -> o.amoppurpose,
        "amopopr" -> o.amopopr,
        "amopmethod" -> o.amopmethod,
        "amopsortfamily" -> o.amopsortfamily
      )
  
    override def reads(json: JsValue): JsResult[PgAmopRow] = {
      JsResult.fromTry(
        Try(
          PgAmopRow(
            oid = json.\("oid").as[PgAmopId],
            amopfamily = json.\("amopfamily").as[/* oid */ Long],
            amoplefttype = json.\("amoplefttype").as[/* oid */ Long],
            amoprighttype = json.\("amoprighttype").as[/* oid */ Long],
            amopstrategy = json.\("amopstrategy").as[Int],
            amoppurpose = json.\("amoppurpose").as[String],
            amopopr = json.\("amopopr").as[/* oid */ Long],
            amopmethod = json.\("amopmethod").as[/* oid */ Long],
            amopsortfamily = json.\("amopsortfamily").as[/* oid */ Long]
          )
        )
      )
    }
  }
}
