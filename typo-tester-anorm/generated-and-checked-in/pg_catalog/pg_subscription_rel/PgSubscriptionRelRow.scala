/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_subscription_rel

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgSubscriptionRelRow(
  srsubid: /* oid */ Long,
  srrelid: /* oid */ Long,
  srsubstate: String,
  srsublsn: Option[/* pg_lsn */ Long]
){
   val compositeId: PgSubscriptionRelId = PgSubscriptionRelId(srrelid, srsubid)
 }

object PgSubscriptionRelRow {
  implicit val reads: Reads[PgSubscriptionRelRow] = Reads[PgSubscriptionRelRow](json => JsResult.fromTry(
      Try(
        PgSubscriptionRelRow(
          srsubid = json.\("srsubid").as(Reads.LongReads),
          srrelid = json.\("srrelid").as(Reads.LongReads),
          srsubstate = json.\("srsubstate").as(Reads.StringReads),
          srsublsn = json.\("srsublsn").toOption.map(_.as(Reads.LongReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgSubscriptionRelRow] = RowParser[PgSubscriptionRelRow] { row =>
    Success(
      PgSubscriptionRelRow(
        srsubid = row(idx + 0)(Column.columnToLong),
        srrelid = row(idx + 1)(Column.columnToLong),
        srsubstate = row(idx + 2)(Column.columnToString),
        srsublsn = row(idx + 3)(Column.columnToOption(Column.columnToLong))
      )
    )
  }
  implicit val writes: OWrites[PgSubscriptionRelRow] = OWrites[PgSubscriptionRelRow](o =>
    new JsObject(ListMap[String, JsValue](
      "srsubid" -> Writes.LongWrites.writes(o.srsubid),
      "srrelid" -> Writes.LongWrites.writes(o.srrelid),
      "srsubstate" -> Writes.StringWrites.writes(o.srsubstate),
      "srsublsn" -> Writes.OptionWrites(Writes.LongWrites).writes(o.srsublsn)
    ))
  )
}
