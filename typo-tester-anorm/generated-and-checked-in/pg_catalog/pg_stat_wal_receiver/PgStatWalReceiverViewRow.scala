/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_wal_receiver

import adventureworks.TypoOffsetDateTime
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatWalReceiverViewRow(
  pid: Option[Int],
  status: Option[String],
  receiveStartLsn: Option[/* pg_lsn */ Long],
  receiveStartTli: Option[Int],
  writtenLsn: Option[/* pg_lsn */ Long],
  flushedLsn: Option[/* pg_lsn */ Long],
  receivedTli: Option[Int],
  lastMsgSendTime: Option[TypoOffsetDateTime],
  lastMsgReceiptTime: Option[TypoOffsetDateTime],
  latestEndLsn: Option[/* pg_lsn */ Long],
  latestEndTime: Option[TypoOffsetDateTime],
  slotName: Option[String],
  senderHost: Option[String],
  senderPort: Option[Int],
  conninfo: Option[String]
)

object PgStatWalReceiverViewRow {
  implicit val reads: Reads[PgStatWalReceiverViewRow] = Reads[PgStatWalReceiverViewRow](json => JsResult.fromTry(
      Try(
        PgStatWalReceiverViewRow(
          pid = json.\("pid").toOption.map(_.as[Int]),
          status = json.\("status").toOption.map(_.as[String]),
          receiveStartLsn = json.\("receive_start_lsn").toOption.map(_.as[/* pg_lsn */ Long]),
          receiveStartTli = json.\("receive_start_tli").toOption.map(_.as[Int]),
          writtenLsn = json.\("written_lsn").toOption.map(_.as[/* pg_lsn */ Long]),
          flushedLsn = json.\("flushed_lsn").toOption.map(_.as[/* pg_lsn */ Long]),
          receivedTli = json.\("received_tli").toOption.map(_.as[Int]),
          lastMsgSendTime = json.\("last_msg_send_time").toOption.map(_.as[TypoOffsetDateTime]),
          lastMsgReceiptTime = json.\("last_msg_receipt_time").toOption.map(_.as[TypoOffsetDateTime]),
          latestEndLsn = json.\("latest_end_lsn").toOption.map(_.as[/* pg_lsn */ Long]),
          latestEndTime = json.\("latest_end_time").toOption.map(_.as[TypoOffsetDateTime]),
          slotName = json.\("slot_name").toOption.map(_.as[String]),
          senderHost = json.\("sender_host").toOption.map(_.as[String]),
          senderPort = json.\("sender_port").toOption.map(_.as[Int]),
          conninfo = json.\("conninfo").toOption.map(_.as[String])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatWalReceiverViewRow] = RowParser[PgStatWalReceiverViewRow] { row =>
    Success(
      PgStatWalReceiverViewRow(
        pid = row[Option[Int]](idx + 0),
        status = row[Option[String]](idx + 1),
        receiveStartLsn = row[Option[/* pg_lsn */ Long]](idx + 2),
        receiveStartTli = row[Option[Int]](idx + 3),
        writtenLsn = row[Option[/* pg_lsn */ Long]](idx + 4),
        flushedLsn = row[Option[/* pg_lsn */ Long]](idx + 5),
        receivedTli = row[Option[Int]](idx + 6),
        lastMsgSendTime = row[Option[TypoOffsetDateTime]](idx + 7),
        lastMsgReceiptTime = row[Option[TypoOffsetDateTime]](idx + 8),
        latestEndLsn = row[Option[/* pg_lsn */ Long]](idx + 9),
        latestEndTime = row[Option[TypoOffsetDateTime]](idx + 10),
        slotName = row[Option[String]](idx + 11),
        senderHost = row[Option[String]](idx + 12),
        senderPort = row[Option[Int]](idx + 13),
        conninfo = row[Option[String]](idx + 14)
      )
    )
  }
  implicit val writes: OWrites[PgStatWalReceiverViewRow] = OWrites[PgStatWalReceiverViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "pid" -> Json.toJson(o.pid),
      "status" -> Json.toJson(o.status),
      "receive_start_lsn" -> Json.toJson(o.receiveStartLsn),
      "receive_start_tli" -> Json.toJson(o.receiveStartTli),
      "written_lsn" -> Json.toJson(o.writtenLsn),
      "flushed_lsn" -> Json.toJson(o.flushedLsn),
      "received_tli" -> Json.toJson(o.receivedTli),
      "last_msg_send_time" -> Json.toJson(o.lastMsgSendTime),
      "last_msg_receipt_time" -> Json.toJson(o.lastMsgReceiptTime),
      "latest_end_lsn" -> Json.toJson(o.latestEndLsn),
      "latest_end_time" -> Json.toJson(o.latestEndTime),
      "slot_name" -> Json.toJson(o.slotName),
      "sender_host" -> Json.toJson(o.senderHost),
      "sender_port" -> Json.toJson(o.senderPort),
      "conninfo" -> Json.toJson(o.conninfo)
    ))
  )
}
