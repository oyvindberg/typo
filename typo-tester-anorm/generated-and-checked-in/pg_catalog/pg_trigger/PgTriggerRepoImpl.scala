/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_trigger

import anorm.SqlStringInterpolation
import java.sql.Connection

object PgTriggerRepoImpl extends PgTriggerRepo {
  override def delete(oid: PgTriggerId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_trigger where oid = $oid".executeUpdate() > 0
  }
  override def insert(unsaved: PgTriggerRow)(implicit c: Connection): PgTriggerRow = {
    SQL"""insert into pg_catalog.pg_trigger(oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable)
          values (${unsaved.oid}::oid, ${unsaved.tgrelid}::oid, ${unsaved.tgparentid}::oid, ${unsaved.tgname}::name, ${unsaved.tgfoid}::oid, ${unsaved.tgtype}::int2, ${unsaved.tgenabled}::char, ${unsaved.tgisinternal}, ${unsaved.tgconstrrelid}::oid, ${unsaved.tgconstrindid}::oid, ${unsaved.tgconstraint}::oid, ${unsaved.tgdeferrable}, ${unsaved.tginitdeferred}, ${unsaved.tgnargs}::int2, ${unsaved.tgattr}::int2vector, ${unsaved.tgargs}::bytea, ${unsaved.tgqual}::pg_node_tree, ${unsaved.tgoldtable}::name, ${unsaved.tgnewtable}::name)
          returning oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
       """
      .executeInsert(PgTriggerRow.rowParser(1).single)
    
  }
  override def selectAll(implicit c: Connection): List[PgTriggerRow] = {
    SQL"""select oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
          from pg_catalog.pg_trigger
       """.as(PgTriggerRow.rowParser(1).*)
  }
  override def selectById(oid: PgTriggerId)(implicit c: Connection): Option[PgTriggerRow] = {
    SQL"""select oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
          from pg_catalog.pg_trigger
          where oid = $oid
       """.as(PgTriggerRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgTriggerId])(implicit c: Connection): List[PgTriggerRow] = {
    SQL"""select oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
          from pg_catalog.pg_trigger
          where oid = ANY($oids)
       """.as(PgTriggerRow.rowParser(1).*)
    
  }
  override def update(row: PgTriggerRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_trigger
          set tgrelid = ${row.tgrelid}::oid,
              tgparentid = ${row.tgparentid}::oid,
              tgname = ${row.tgname}::name,
              tgfoid = ${row.tgfoid}::oid,
              tgtype = ${row.tgtype}::int2,
              tgenabled = ${row.tgenabled}::char,
              tgisinternal = ${row.tgisinternal},
              tgconstrrelid = ${row.tgconstrrelid}::oid,
              tgconstrindid = ${row.tgconstrindid}::oid,
              tgconstraint = ${row.tgconstraint}::oid,
              tgdeferrable = ${row.tgdeferrable},
              tginitdeferred = ${row.tginitdeferred},
              tgnargs = ${row.tgnargs}::int2,
              tgattr = ${row.tgattr}::int2vector,
              tgargs = ${row.tgargs}::bytea,
              tgqual = ${row.tgqual}::pg_node_tree,
              tgoldtable = ${row.tgoldtable}::name,
              tgnewtable = ${row.tgnewtable}::name
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: PgTriggerRow)(implicit c: Connection): PgTriggerRow = {
    SQL"""insert into pg_catalog.pg_trigger(oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.tgrelid}::oid,
            ${unsaved.tgparentid}::oid,
            ${unsaved.tgname}::name,
            ${unsaved.tgfoid}::oid,
            ${unsaved.tgtype}::int2,
            ${unsaved.tgenabled}::char,
            ${unsaved.tgisinternal},
            ${unsaved.tgconstrrelid}::oid,
            ${unsaved.tgconstrindid}::oid,
            ${unsaved.tgconstraint}::oid,
            ${unsaved.tgdeferrable},
            ${unsaved.tginitdeferred},
            ${unsaved.tgnargs}::int2,
            ${unsaved.tgattr}::int2vector,
            ${unsaved.tgargs}::bytea,
            ${unsaved.tgqual}::pg_node_tree,
            ${unsaved.tgoldtable}::name,
            ${unsaved.tgnewtable}::name
          )
          on conflict (oid)
          do update set
            tgrelid = EXCLUDED.tgrelid,
            tgparentid = EXCLUDED.tgparentid,
            tgname = EXCLUDED.tgname,
            tgfoid = EXCLUDED.tgfoid,
            tgtype = EXCLUDED.tgtype,
            tgenabled = EXCLUDED.tgenabled,
            tgisinternal = EXCLUDED.tgisinternal,
            tgconstrrelid = EXCLUDED.tgconstrrelid,
            tgconstrindid = EXCLUDED.tgconstrindid,
            tgconstraint = EXCLUDED.tgconstraint,
            tgdeferrable = EXCLUDED.tgdeferrable,
            tginitdeferred = EXCLUDED.tginitdeferred,
            tgnargs = EXCLUDED.tgnargs,
            tgattr = EXCLUDED.tgattr,
            tgargs = EXCLUDED.tgargs,
            tgqual = EXCLUDED.tgqual,
            tgoldtable = EXCLUDED.tgoldtable,
            tgnewtable = EXCLUDED.tgnewtable
          returning oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable
       """
      .executeInsert(PgTriggerRow.rowParser(1).single)
    
  }
}
