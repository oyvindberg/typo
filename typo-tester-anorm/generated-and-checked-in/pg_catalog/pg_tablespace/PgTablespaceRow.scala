/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_tablespace

import adventureworks.TypoAclItem
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgTablespaceRow(
  oid: PgTablespaceId,
  spcname: String,
  spcowner: /* oid */ Long,
  spcacl: Option[Array[TypoAclItem]],
  spcoptions: Option[Array[String]]
)

object PgTablespaceRow {
  implicit val reads: Reads[PgTablespaceRow] = Reads[PgTablespaceRow](json => JsResult.fromTry(
      Try(
        PgTablespaceRow(
          oid = json.\("oid").as(PgTablespaceId.reads),
          spcname = json.\("spcname").as(Reads.StringReads),
          spcowner = json.\("spcowner").as(Reads.LongReads),
          spcacl = json.\("spcacl").toOption.map(_.as(Reads.ArrayReads[TypoAclItem](TypoAclItem.reads, implicitly))),
          spcoptions = json.\("spcoptions").toOption.map(_.as(Reads.ArrayReads[String](Reads.StringReads, implicitly)))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgTablespaceRow] = RowParser[PgTablespaceRow] { row =>
    Success(
      PgTablespaceRow(
        oid = row(idx + 0)(PgTablespaceId.column),
        spcname = row(idx + 1)(Column.columnToString),
        spcowner = row(idx + 2)(Column.columnToLong),
        spcacl = row(idx + 3)(Column.columnToOption(TypoAclItem.arrayColumn)),
        spcoptions = row(idx + 4)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly)))
      )
    )
  }
  implicit val writes: OWrites[PgTablespaceRow] = OWrites[PgTablespaceRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> PgTablespaceId.writes.writes(o.oid),
      "spcname" -> Writes.StringWrites.writes(o.spcname),
      "spcowner" -> Writes.LongWrites.writes(o.spcowner),
      "spcacl" -> Writes.OptionWrites(Writes.arrayWrites[TypoAclItem](implicitly, TypoAclItem.writes)).writes(o.spcacl),
      "spcoptions" -> Writes.OptionWrites(Writes.arrayWrites[String](implicitly, Writes.StringWrites)).writes(o.spcoptions)
    ))
  )
}
