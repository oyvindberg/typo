/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_timezone_names

import adventureworks.TypoInterval
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgTimezoneNamesViewRow(
  name: Option[String],
  abbrev: Option[String],
  utcOffset: Option[TypoInterval],
  isDst: Option[Boolean]
)

object PgTimezoneNamesViewRow {
  implicit val reads: Reads[PgTimezoneNamesViewRow] = Reads[PgTimezoneNamesViewRow](json => JsResult.fromTry(
      Try(
        PgTimezoneNamesViewRow(
          name = json.\("name").toOption.map(_.as[String]),
          abbrev = json.\("abbrev").toOption.map(_.as[String]),
          utcOffset = json.\("utc_offset").toOption.map(_.as[TypoInterval]),
          isDst = json.\("is_dst").toOption.map(_.as[Boolean])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgTimezoneNamesViewRow] = RowParser[PgTimezoneNamesViewRow] { row =>
    Success(
      PgTimezoneNamesViewRow(
        name = row[Option[String]](idx + 0),
        abbrev = row[Option[String]](idx + 1),
        utcOffset = row[Option[TypoInterval]](idx + 2),
        isDst = row[Option[Boolean]](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[PgTimezoneNamesViewRow] = OWrites[PgTimezoneNamesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "name" -> Json.toJson(o.name),
      "abbrev" -> Json.toJson(o.abbrev),
      "utc_offset" -> Json.toJson(o.utcOffset),
      "is_dst" -> Json.toJson(o.isDst)
    ))
  )
}
