/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_user_functions

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatUserFunctionsViewRow(
  funcid: Option[/* oid */ Long],
  schemaname: Option[String],
  funcname: Option[String],
  calls: Option[Long],
  totalTime: Option[Double],
  selfTime: Option[Double]
)

object PgStatUserFunctionsViewRow {
  implicit val reads: Reads[PgStatUserFunctionsViewRow] = Reads[PgStatUserFunctionsViewRow](json => JsResult.fromTry(
      Try(
        PgStatUserFunctionsViewRow(
          funcid = json.\("funcid").toOption.map(_.as(Reads.LongReads)),
          schemaname = json.\("schemaname").toOption.map(_.as(Reads.StringReads)),
          funcname = json.\("funcname").toOption.map(_.as(Reads.StringReads)),
          calls = json.\("calls").toOption.map(_.as(Reads.LongReads)),
          totalTime = json.\("total_time").toOption.map(_.as(Reads.DoubleReads)),
          selfTime = json.\("self_time").toOption.map(_.as(Reads.DoubleReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatUserFunctionsViewRow] = RowParser[PgStatUserFunctionsViewRow] { row =>
    Success(
      PgStatUserFunctionsViewRow(
        funcid = row(idx + 0)(Column.columnToOption(Column.columnToLong)),
        schemaname = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        funcname = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        calls = row(idx + 3)(Column.columnToOption(Column.columnToLong)),
        totalTime = row(idx + 4)(Column.columnToOption(Column.columnToDouble)),
        selfTime = row(idx + 5)(Column.columnToOption(Column.columnToDouble))
      )
    )
  }
  implicit val writes: OWrites[PgStatUserFunctionsViewRow] = OWrites[PgStatUserFunctionsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "funcid" -> Writes.OptionWrites(Writes.LongWrites).writes(o.funcid),
      "schemaname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.schemaname),
      "funcname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.funcname),
      "calls" -> Writes.OptionWrites(Writes.LongWrites).writes(o.calls),
      "total_time" -> Writes.OptionWrites(Writes.DoubleWrites).writes(o.totalTime),
      "self_time" -> Writes.OptionWrites(Writes.DoubleWrites).writes(o.selfTime)
    ))
  )
}
