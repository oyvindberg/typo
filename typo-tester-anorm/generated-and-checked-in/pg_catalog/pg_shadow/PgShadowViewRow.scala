/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_shadow

import anorm.RowParser
import anorm.Success
import java.time.OffsetDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgShadowViewRow(
  usename: Option[String],
  usesysid: Option[/* oid */ Long],
  usecreatedb: Option[Boolean],
  usesuper: Option[Boolean],
  userepl: Option[Boolean],
  usebypassrls: Option[Boolean],
  passwd: Option[String],
  valuntil: Option[OffsetDateTime],
  useconfig: Option[Array[String]]
)

object PgShadowViewRow {
  def rowParser(idx: Int): RowParser[PgShadowViewRow] =
    RowParser[PgShadowViewRow] { row =>
      Success(
        PgShadowViewRow(
          usename = row[Option[String]](idx + 0),
          usesysid = row[Option[/* oid */ Long]](idx + 1),
          usecreatedb = row[Option[Boolean]](idx + 2),
          usesuper = row[Option[Boolean]](idx + 3),
          userepl = row[Option[Boolean]](idx + 4),
          usebypassrls = row[Option[Boolean]](idx + 5),
          passwd = row[Option[String]](idx + 6),
          valuntil = row[Option[OffsetDateTime]](idx + 7),
          useconfig = row[Option[Array[String]]](idx + 8)
        )
      )
    }
  implicit val oFormat: OFormat[PgShadowViewRow] = new OFormat[PgShadowViewRow]{
    override def writes(o: PgShadowViewRow): JsObject =
      Json.obj(
        "usename" -> o.usename,
        "usesysid" -> o.usesysid,
        "usecreatedb" -> o.usecreatedb,
        "usesuper" -> o.usesuper,
        "userepl" -> o.userepl,
        "usebypassrls" -> o.usebypassrls,
        "passwd" -> o.passwd,
        "valuntil" -> o.valuntil,
        "useconfig" -> o.useconfig
      )
  
    override def reads(json: JsValue): JsResult[PgShadowViewRow] = {
      JsResult.fromTry(
        Try(
          PgShadowViewRow(
            usename = json.\("usename").toOption.map(_.as[String]),
            usesysid = json.\("usesysid").toOption.map(_.as[/* oid */ Long]),
            usecreatedb = json.\("usecreatedb").toOption.map(_.as[Boolean]),
            usesuper = json.\("usesuper").toOption.map(_.as[Boolean]),
            userepl = json.\("userepl").toOption.map(_.as[Boolean]),
            usebypassrls = json.\("usebypassrls").toOption.map(_.as[Boolean]),
            passwd = json.\("passwd").toOption.map(_.as[String]),
            valuntil = json.\("valuntil").toOption.map(_.as[OffsetDateTime]),
            useconfig = json.\("useconfig").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
