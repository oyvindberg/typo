/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amproc

import anorm.SqlStringInterpolation
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgAmprocRepoImpl extends PgAmprocRepo {
  override def delete(oid: PgAmprocId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_amproc where oid = $oid".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgAmprocFields, PgAmprocRow] = {
    DeleteBuilder("pg_catalog.pg_amproc", PgAmprocFields)
  }
  override def insert(unsaved: PgAmprocRow)(implicit c: Connection): PgAmprocRow = {
    SQL"""insert into pg_catalog.pg_amproc(oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc)
          values (${unsaved.oid}::oid, ${unsaved.amprocfamily}::oid, ${unsaved.amproclefttype}::oid, ${unsaved.amprocrighttype}::oid, ${unsaved.amprocnum}::int2, ${unsaved.amproc}::regproc)
          returning oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc
       """
      .executeInsert(PgAmprocRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgAmprocFields, PgAmprocRow] = {
    SelectBuilderSql("pg_catalog.pg_amproc", PgAmprocFields, PgAmprocRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgAmprocRow] = {
    SQL"""select oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc
          from pg_catalog.pg_amproc
       """.as(PgAmprocRow.rowParser(1).*)
  }
  override def selectById(oid: PgAmprocId)(implicit c: Connection): Option[PgAmprocRow] = {
    SQL"""select oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc
          from pg_catalog.pg_amproc
          where oid = $oid
       """.as(PgAmprocRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgAmprocId])(implicit c: Connection): List[PgAmprocRow] = {
    SQL"""select oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc
          from pg_catalog.pg_amproc
          where oid = ANY($oids)
       """.as(PgAmprocRow.rowParser(1).*)
    
  }
  override def update(row: PgAmprocRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_amproc
          set amprocfamily = ${row.amprocfamily}::oid,
              amproclefttype = ${row.amproclefttype}::oid,
              amprocrighttype = ${row.amprocrighttype}::oid,
              amprocnum = ${row.amprocnum}::int2,
              amproc = ${row.amproc}::regproc
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgAmprocFields, PgAmprocRow] = {
    UpdateBuilder("pg_catalog.pg_amproc", PgAmprocFields, PgAmprocRow.rowParser)
  }
  override def upsert(unsaved: PgAmprocRow)(implicit c: Connection): PgAmprocRow = {
    SQL"""insert into pg_catalog.pg_amproc(oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.amprocfamily}::oid,
            ${unsaved.amproclefttype}::oid,
            ${unsaved.amprocrighttype}::oid,
            ${unsaved.amprocnum}::int2,
            ${unsaved.amproc}::regproc
          )
          on conflict (oid)
          do update set
            amprocfamily = EXCLUDED.amprocfamily,
            amproclefttype = EXCLUDED.amproclefttype,
            amprocrighttype = EXCLUDED.amprocrighttype,
            amprocnum = EXCLUDED.amprocnum,
            amproc = EXCLUDED.amproc
          returning oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc
       """
      .executeInsert(PgAmprocRow.rowParser(1).single)
    
  }
}
