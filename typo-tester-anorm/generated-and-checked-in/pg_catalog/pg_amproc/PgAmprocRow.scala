/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amproc

import adventureworks.TypoRegproc
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgAmprocRow(
  oid: PgAmprocId,
  amprocfamily: /* oid */ Long,
  amproclefttype: /* oid */ Long,
  amprocrighttype: /* oid */ Long,
  amprocnum: Int,
  amproc: TypoRegproc
)

object PgAmprocRow {
  def rowParser(idx: Int): RowParser[PgAmprocRow] =
    RowParser[PgAmprocRow] { row =>
      Success(
        PgAmprocRow(
          oid = row[PgAmprocId](idx + 0),
          amprocfamily = row[/* oid */ Long](idx + 1),
          amproclefttype = row[/* oid */ Long](idx + 2),
          amprocrighttype = row[/* oid */ Long](idx + 3),
          amprocnum = row[Int](idx + 4),
          amproc = row[TypoRegproc](idx + 5)
        )
      )
    }
  implicit val oFormat: OFormat[PgAmprocRow] = new OFormat[PgAmprocRow]{
    override def writes(o: PgAmprocRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "amprocfamily" -> o.amprocfamily,
        "amproclefttype" -> o.amproclefttype,
        "amprocrighttype" -> o.amprocrighttype,
        "amprocnum" -> o.amprocnum,
        "amproc" -> o.amproc
      )
  
    override def reads(json: JsValue): JsResult[PgAmprocRow] = {
      JsResult.fromTry(
        Try(
          PgAmprocRow(
            oid = json.\("oid").as[PgAmprocId],
            amprocfamily = json.\("amprocfamily").as[/* oid */ Long],
            amproclefttype = json.\("amproclefttype").as[/* oid */ Long],
            amprocrighttype = json.\("amprocrighttype").as[/* oid */ Long],
            amprocnum = json.\("amprocnum").as[Int],
            amproc = json.\("amproc").as[TypoRegproc]
          )
        )
      )
    }
  }
}
