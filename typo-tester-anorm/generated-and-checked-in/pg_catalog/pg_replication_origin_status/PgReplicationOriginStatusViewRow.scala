/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_origin_status

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgReplicationOriginStatusViewRow(
  localId: Option[/* oid */ Long],
  externalId: Option[String],
  remoteLsn: Option[/* pg_lsn */ Long],
  localLsn: Option[/* pg_lsn */ Long]
)

object PgReplicationOriginStatusViewRow {
  def rowParser(idx: Int): RowParser[PgReplicationOriginStatusViewRow] =
    RowParser[PgReplicationOriginStatusViewRow] { row =>
      Success(
        PgReplicationOriginStatusViewRow(
          localId = row[Option[/* oid */ Long]](idx + 0),
          externalId = row[Option[String]](idx + 1),
          remoteLsn = row[Option[/* pg_lsn */ Long]](idx + 2),
          localLsn = row[Option[/* pg_lsn */ Long]](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[PgReplicationOriginStatusViewRow] = new OFormat[PgReplicationOriginStatusViewRow]{
    override def writes(o: PgReplicationOriginStatusViewRow): JsObject =
      Json.obj(
        "local_id" -> o.localId,
        "external_id" -> o.externalId,
        "remote_lsn" -> o.remoteLsn,
        "local_lsn" -> o.localLsn
      )
  
    override def reads(json: JsValue): JsResult[PgReplicationOriginStatusViewRow] = {
      JsResult.fromTry(
        Try(
          PgReplicationOriginStatusViewRow(
            localId = json.\("local_id").toOption.map(_.as[/* oid */ Long]),
            externalId = json.\("external_id").toOption.map(_.as[String]),
            remoteLsn = json.\("remote_lsn").toOption.map(_.as[/* pg_lsn */ Long]),
            localLsn = json.\("local_lsn").toOption.map(_.as[/* pg_lsn */ Long])
          )
        )
      )
    }
  }
}
