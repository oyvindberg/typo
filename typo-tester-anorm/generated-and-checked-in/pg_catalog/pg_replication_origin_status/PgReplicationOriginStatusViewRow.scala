/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_origin_status

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgReplicationOriginStatusViewRow(
  localId: Option[/* oid */ Long],
  externalId: Option[String],
  remoteLsn: Option[/* pg_lsn */ Long],
  localLsn: Option[/* pg_lsn */ Long]
)

object PgReplicationOriginStatusViewRow {
  implicit val reads: Reads[PgReplicationOriginStatusViewRow] = Reads[PgReplicationOriginStatusViewRow](json => JsResult.fromTry(
      Try(
        PgReplicationOriginStatusViewRow(
          localId = json.\("local_id").toOption.map(_.as(Reads.LongReads)),
          externalId = json.\("external_id").toOption.map(_.as(Reads.StringReads)),
          remoteLsn = json.\("remote_lsn").toOption.map(_.as(Reads.LongReads)),
          localLsn = json.\("local_lsn").toOption.map(_.as(Reads.LongReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgReplicationOriginStatusViewRow] = RowParser[PgReplicationOriginStatusViewRow] { row =>
    Success(
      PgReplicationOriginStatusViewRow(
        localId = row(idx + 0)(Column.columnToOption(Column.columnToLong)),
        externalId = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        remoteLsn = row(idx + 2)(Column.columnToOption(Column.columnToLong)),
        localLsn = row(idx + 3)(Column.columnToOption(Column.columnToLong))
      )
    )
  }
  implicit val writes: OWrites[PgReplicationOriginStatusViewRow] = OWrites[PgReplicationOriginStatusViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "local_id" -> Writes.OptionWrites(Writes.LongWrites).writes(o.localId),
      "external_id" -> Writes.OptionWrites(Writes.StringWrites).writes(o.externalId),
      "remote_lsn" -> Writes.OptionWrites(Writes.LongWrites).writes(o.remoteLsn),
      "local_lsn" -> Writes.OptionWrites(Writes.LongWrites).writes(o.localLsn)
    ))
  )
}
