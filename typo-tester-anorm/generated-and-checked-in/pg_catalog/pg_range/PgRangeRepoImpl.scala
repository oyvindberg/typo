/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_range

import anorm.SqlStringInterpolation
import java.sql.Connection

object PgRangeRepoImpl extends PgRangeRepo {
  override def delete(rngtypid: PgRangeId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_range where rngtypid = $rngtypid".executeUpdate() > 0
  }
  override def insert(unsaved: PgRangeRow)(implicit c: Connection): PgRangeRow = {
    SQL"""insert into pg_catalog.pg_range(rngtypid, rngsubtype, rngmultitypid, rngcollation, rngsubopc, rngcanonical, rngsubdiff)
          values (${unsaved.rngtypid}::oid, ${unsaved.rngsubtype}::oid, ${unsaved.rngmultitypid}::oid, ${unsaved.rngcollation}::oid, ${unsaved.rngsubopc}::oid, ${unsaved.rngcanonical}::regproc, ${unsaved.rngsubdiff}::regproc)
          returning rngtypid, rngsubtype, rngmultitypid, rngcollation, rngsubopc, rngcanonical, rngsubdiff
       """
      .executeInsert(PgRangeRow.rowParser(1).single)
  
  }
  override def selectAll(implicit c: Connection): List[PgRangeRow] = {
    SQL"""select rngtypid, rngsubtype, rngmultitypid, rngcollation, rngsubopc, rngcanonical, rngsubdiff
          from pg_catalog.pg_range
       """.as(PgRangeRow.rowParser(1).*)
  }
  override def selectById(rngtypid: PgRangeId)(implicit c: Connection): Option[PgRangeRow] = {
    SQL"""select rngtypid, rngsubtype, rngmultitypid, rngcollation, rngsubopc, rngcanonical, rngsubdiff
          from pg_catalog.pg_range
          where rngtypid = $rngtypid
       """.as(PgRangeRow.rowParser(1).singleOpt)
  }
  override def selectByIds(rngtypids: Array[PgRangeId])(implicit c: Connection): List[PgRangeRow] = {
    SQL"""select rngtypid, rngsubtype, rngmultitypid, rngcollation, rngsubopc, rngcanonical, rngsubdiff
          from pg_catalog.pg_range
          where rngtypid = ANY($rngtypids)
       """.as(PgRangeRow.rowParser(1).*)
  
  }
  override def update(row: PgRangeRow)(implicit c: Connection): Boolean = {
    val rngtypid = row.rngtypid
    SQL"""update pg_catalog.pg_range
          set rngsubtype = ${row.rngsubtype}::oid,
              rngmultitypid = ${row.rngmultitypid}::oid,
              rngcollation = ${row.rngcollation}::oid,
              rngsubopc = ${row.rngsubopc}::oid,
              rngcanonical = ${row.rngcanonical}::regproc,
              rngsubdiff = ${row.rngsubdiff}::regproc
          where rngtypid = $rngtypid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: PgRangeRow)(implicit c: Connection): PgRangeRow = {
    SQL"""insert into pg_catalog.pg_range(rngtypid, rngsubtype, rngmultitypid, rngcollation, rngsubopc, rngcanonical, rngsubdiff)
          values (
            ${unsaved.rngtypid}::oid,
            ${unsaved.rngsubtype}::oid,
            ${unsaved.rngmultitypid}::oid,
            ${unsaved.rngcollation}::oid,
            ${unsaved.rngsubopc}::oid,
            ${unsaved.rngcanonical}::regproc,
            ${unsaved.rngsubdiff}::regproc
          )
          on conflict (rngtypid)
          do update set
            rngsubtype = EXCLUDED.rngsubtype,
            rngmultitypid = EXCLUDED.rngmultitypid,
            rngcollation = EXCLUDED.rngcollation,
            rngsubopc = EXCLUDED.rngsubopc,
            rngcanonical = EXCLUDED.rngcanonical,
            rngsubdiff = EXCLUDED.rngsubdiff
          returning rngtypid, rngsubtype, rngmultitypid, rngcollation, rngsubopc, rngcanonical, rngsubdiff
       """
      .executeInsert(PgRangeRow.rowParser(1).single)
  
  }
}
