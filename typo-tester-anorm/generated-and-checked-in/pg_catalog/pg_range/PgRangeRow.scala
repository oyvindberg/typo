/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_range

import adventureworks.TypoRegproc
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgRangeRow(
  rngtypid: PgRangeId,
  rngsubtype: /* oid */ Long,
  rngmultitypid: /* oid */ Long,
  rngcollation: /* oid */ Long,
  rngsubopc: /* oid */ Long,
  rngcanonical: TypoRegproc,
  rngsubdiff: TypoRegproc
)

object PgRangeRow {
  def rowParser(idx: Int): RowParser[PgRangeRow] =
    RowParser[PgRangeRow] { row =>
      Success(
        PgRangeRow(
          rngtypid = row[PgRangeId](idx + 0),
          rngsubtype = row[/* oid */ Long](idx + 1),
          rngmultitypid = row[/* oid */ Long](idx + 2),
          rngcollation = row[/* oid */ Long](idx + 3),
          rngsubopc = row[/* oid */ Long](idx + 4),
          rngcanonical = row[TypoRegproc](idx + 5),
          rngsubdiff = row[TypoRegproc](idx + 6)
        )
      )
    }
  implicit val oFormat: OFormat[PgRangeRow] = new OFormat[PgRangeRow]{
    override def writes(o: PgRangeRow): JsObject =
      Json.obj(
        "rngtypid" -> o.rngtypid,
        "rngsubtype" -> o.rngsubtype,
        "rngmultitypid" -> o.rngmultitypid,
        "rngcollation" -> o.rngcollation,
        "rngsubopc" -> o.rngsubopc,
        "rngcanonical" -> o.rngcanonical,
        "rngsubdiff" -> o.rngsubdiff
      )
  
    override def reads(json: JsValue): JsResult[PgRangeRow] = {
      JsResult.fromTry(
        Try(
          PgRangeRow(
            rngtypid = json.\("rngtypid").as[PgRangeId],
            rngsubtype = json.\("rngsubtype").as[/* oid */ Long],
            rngmultitypid = json.\("rngmultitypid").as[/* oid */ Long],
            rngcollation = json.\("rngcollation").as[/* oid */ Long],
            rngsubopc = json.\("rngsubopc").as[/* oid */ Long],
            rngcanonical = json.\("rngcanonical").as[TypoRegproc],
            rngsubdiff = json.\("rngsubdiff").as[TypoRegproc]
          )
        )
      )
    }
  }
}
