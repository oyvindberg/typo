/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_rules

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgRulesViewRow(
  schemaname: Option[String],
  tablename: Option[String],
  rulename: Option[String],
  definition: Option[String]
)

object PgRulesViewRow {
  implicit val reads: Reads[PgRulesViewRow] = Reads[PgRulesViewRow](json => JsResult.fromTry(
      Try(
        PgRulesViewRow(
          schemaname = json.\("schemaname").toOption.map(_.as[String]),
          tablename = json.\("tablename").toOption.map(_.as[String]),
          rulename = json.\("rulename").toOption.map(_.as[String]),
          definition = json.\("definition").toOption.map(_.as[String])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgRulesViewRow] = RowParser[PgRulesViewRow] { row =>
    Success(
      PgRulesViewRow(
        schemaname = row[Option[String]](idx + 0),
        tablename = row[Option[String]](idx + 1),
        rulename = row[Option[String]](idx + 2),
        definition = row[Option[String]](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[PgRulesViewRow] = OWrites[PgRulesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "schemaname" -> Json.toJson(o.schemaname),
      "tablename" -> Json.toJson(o.tablename),
      "rulename" -> Json.toJson(o.rulename),
      "definition" -> Json.toJson(o.definition)
    ))
  )
}
