/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_rules

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgRulesViewRow(
  schemaname: Option[String],
  tablename: Option[String],
  rulename: Option[String],
  definition: Option[String]
)

object PgRulesViewRow {
  implicit val reads: Reads[PgRulesViewRow] = Reads[PgRulesViewRow](json => JsResult.fromTry(
      Try(
        PgRulesViewRow(
          schemaname = json.\("schemaname").toOption.map(_.as(Reads.StringReads)),
          tablename = json.\("tablename").toOption.map(_.as(Reads.StringReads)),
          rulename = json.\("rulename").toOption.map(_.as(Reads.StringReads)),
          definition = json.\("definition").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgRulesViewRow] = RowParser[PgRulesViewRow] { row =>
    Success(
      PgRulesViewRow(
        schemaname = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        tablename = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        rulename = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        definition = row(idx + 3)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit val writes: OWrites[PgRulesViewRow] = OWrites[PgRulesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "schemaname" -> Writes.OptionWrites(Writes.StringWrites).writes(o.schemaname),
      "tablename" -> Writes.OptionWrites(Writes.StringWrites).writes(o.tablename),
      "rulename" -> Writes.OptionWrites(Writes.StringWrites).writes(o.rulename),
      "definition" -> Writes.OptionWrites(Writes.StringWrites).writes(o.definition)
    ))
  )
}
