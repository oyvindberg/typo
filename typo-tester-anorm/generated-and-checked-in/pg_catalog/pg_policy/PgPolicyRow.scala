/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_policy

import adventureworks.TypoPgNodeTree
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgPolicyRow(
  oid: PgPolicyId,
  polname: String,
  polrelid: /* oid */ Long,
  polcmd: String,
  polpermissive: Boolean,
  polroles: Array[/* oid */ Long],
  polqual: Option[TypoPgNodeTree],
  polwithcheck: Option[TypoPgNodeTree]
)

object PgPolicyRow {
  implicit val reads: Reads[PgPolicyRow] = Reads[PgPolicyRow](json => JsResult.fromTry(
      Try(
        PgPolicyRow(
          oid = json.\("oid").as(PgPolicyId.reads),
          polname = json.\("polname").as(Reads.StringReads),
          polrelid = json.\("polrelid").as(Reads.LongReads),
          polcmd = json.\("polcmd").as(Reads.StringReads),
          polpermissive = json.\("polpermissive").as(Reads.BooleanReads),
          polroles = json.\("polroles").as(Reads.ArrayReads[Long](Reads.LongReads, implicitly)),
          polqual = json.\("polqual").toOption.map(_.as(TypoPgNodeTree.reads)),
          polwithcheck = json.\("polwithcheck").toOption.map(_.as(TypoPgNodeTree.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgPolicyRow] = RowParser[PgPolicyRow] { row =>
    Success(
      PgPolicyRow(
        oid = row(idx + 0)(PgPolicyId.column),
        polname = row(idx + 1)(Column.columnToString),
        polrelid = row(idx + 2)(Column.columnToLong),
        polcmd = row(idx + 3)(Column.columnToString),
        polpermissive = row(idx + 4)(Column.columnToBoolean),
        polroles = row(idx + 5)(Column.columnToArray[Long](Column.columnToLong, implicitly)),
        polqual = row(idx + 6)(Column.columnToOption(TypoPgNodeTree.column)),
        polwithcheck = row(idx + 7)(Column.columnToOption(TypoPgNodeTree.column))
      )
    )
  }
  implicit val writes: OWrites[PgPolicyRow] = OWrites[PgPolicyRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> PgPolicyId.writes.writes(o.oid),
      "polname" -> Writes.StringWrites.writes(o.polname),
      "polrelid" -> Writes.LongWrites.writes(o.polrelid),
      "polcmd" -> Writes.StringWrites.writes(o.polcmd),
      "polpermissive" -> Writes.BooleanWrites.writes(o.polpermissive),
      "polroles" -> Writes.arrayWrites[Long](implicitly, Writes.LongWrites).writes(o.polroles),
      "polqual" -> Writes.OptionWrites(TypoPgNodeTree.writes).writes(o.polqual),
      "polwithcheck" -> Writes.OptionWrites(TypoPgNodeTree.writes).writes(o.polwithcheck)
    ))
  )
}
