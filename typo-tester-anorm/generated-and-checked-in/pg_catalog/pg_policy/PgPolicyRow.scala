/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_policy

import adventureworks.TypoPgNodeTree
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgPolicyRow(
  oid: PgPolicyId,
  polname: String,
  polrelid: /* oid */ Long,
  polcmd: String,
  polpermissive: Boolean,
  polroles: Array[/* oid */ Long],
  polqual: Option[TypoPgNodeTree],
  polwithcheck: Option[TypoPgNodeTree]
)

object PgPolicyRow {
  def rowParser(idx: Int): RowParser[PgPolicyRow] =
    RowParser[PgPolicyRow] { row =>
      Success(
        PgPolicyRow(
          oid = row[PgPolicyId](idx + 0),
          polname = row[String](idx + 1),
          polrelid = row[/* oid */ Long](idx + 2),
          polcmd = row[String](idx + 3),
          polpermissive = row[Boolean](idx + 4),
          polroles = row[Array[/* oid */ Long]](idx + 5),
          polqual = row[Option[TypoPgNodeTree]](idx + 6),
          polwithcheck = row[Option[TypoPgNodeTree]](idx + 7)
        )
      )
    }
  implicit val oFormat: OFormat[PgPolicyRow] = new OFormat[PgPolicyRow]{
    override def writes(o: PgPolicyRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "polname" -> o.polname,
        "polrelid" -> o.polrelid,
        "polcmd" -> o.polcmd,
        "polpermissive" -> o.polpermissive,
        "polroles" -> o.polroles,
        "polqual" -> o.polqual,
        "polwithcheck" -> o.polwithcheck
      )
  
    override def reads(json: JsValue): JsResult[PgPolicyRow] = {
      JsResult.fromTry(
        Try(
          PgPolicyRow(
            oid = json.\("oid").as[PgPolicyId],
            polname = json.\("polname").as[String],
            polrelid = json.\("polrelid").as[/* oid */ Long],
            polcmd = json.\("polcmd").as[String],
            polpermissive = json.\("polpermissive").as[Boolean],
            polroles = json.\("polroles").as[Array[/* oid */ Long]],
            polqual = json.\("polqual").toOption.map(_.as[TypoPgNodeTree]),
            polwithcheck = json.\("polwithcheck").toOption.map(_.as[TypoPgNodeTree])
          )
        )
      )
    }
  }
}
