/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config

import anorm.SqlStringInterpolation
import java.sql.Connection

object PgTsConfigRepoImpl extends PgTsConfigRepo {
  override def delete(oid: PgTsConfigId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_ts_config where oid = $oid".executeUpdate() > 0
  }
  override def insert(unsaved: PgTsConfigRow)(implicit c: Connection): PgTsConfigRow = {
    SQL"""insert into pg_catalog.pg_ts_config(oid, cfgname, cfgnamespace, cfgowner, cfgparser)
          values (${unsaved.oid}::oid, ${unsaved.cfgname}::name, ${unsaved.cfgnamespace}::oid, ${unsaved.cfgowner}::oid, ${unsaved.cfgparser}::oid)
          returning oid, cfgname, cfgnamespace, cfgowner, cfgparser
       """
      .executeInsert(PgTsConfigRow.rowParser(1).single)
    
  }
  override def selectAll(implicit c: Connection): List[PgTsConfigRow] = {
    SQL"""select oid, cfgname, cfgnamespace, cfgowner, cfgparser
          from pg_catalog.pg_ts_config
       """.as(PgTsConfigRow.rowParser(1).*)
  }
  override def selectById(oid: PgTsConfigId)(implicit c: Connection): Option[PgTsConfigRow] = {
    SQL"""select oid, cfgname, cfgnamespace, cfgowner, cfgparser
          from pg_catalog.pg_ts_config
          where oid = $oid
       """.as(PgTsConfigRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgTsConfigId])(implicit c: Connection): List[PgTsConfigRow] = {
    SQL"""select oid, cfgname, cfgnamespace, cfgowner, cfgparser
          from pg_catalog.pg_ts_config
          where oid = ANY($oids)
       """.as(PgTsConfigRow.rowParser(1).*)
    
  }
  override def update(row: PgTsConfigRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_ts_config
          set cfgname = ${row.cfgname}::name,
              cfgnamespace = ${row.cfgnamespace}::oid,
              cfgowner = ${row.cfgowner}::oid,
              cfgparser = ${row.cfgparser}::oid
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: PgTsConfigRow)(implicit c: Connection): PgTsConfigRow = {
    SQL"""insert into pg_catalog.pg_ts_config(oid, cfgname, cfgnamespace, cfgowner, cfgparser)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.cfgname}::name,
            ${unsaved.cfgnamespace}::oid,
            ${unsaved.cfgowner}::oid,
            ${unsaved.cfgparser}::oid
          )
          on conflict (oid)
          do update set
            cfgname = EXCLUDED.cfgname,
            cfgnamespace = EXCLUDED.cfgnamespace,
            cfgowner = EXCLUDED.cfgowner,
            cfgparser = EXCLUDED.cfgparser
          returning oid, cfgname, cfgnamespace, cfgowner, cfgparser
       """
      .executeInsert(PgTsConfigRow.rowParser(1).single)
    
  }
}
