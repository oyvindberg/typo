/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opclass

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgOpclassRow(
  oid: PgOpclassId,
  opcmethod: /* oid */ Long,
  opcname: String,
  opcnamespace: /* oid */ Long,
  opcowner: /* oid */ Long,
  opcfamily: /* oid */ Long,
  opcintype: /* oid */ Long,
  opcdefault: Boolean,
  opckeytype: /* oid */ Long
)

object PgOpclassRow {
  implicit val reads: Reads[PgOpclassRow] = Reads[PgOpclassRow](json => JsResult.fromTry(
      Try(
        PgOpclassRow(
          oid = json.\("oid").as[PgOpclassId],
          opcmethod = json.\("opcmethod").as[/* oid */ Long],
          opcname = json.\("opcname").as[String],
          opcnamespace = json.\("opcnamespace").as[/* oid */ Long],
          opcowner = json.\("opcowner").as[/* oid */ Long],
          opcfamily = json.\("opcfamily").as[/* oid */ Long],
          opcintype = json.\("opcintype").as[/* oid */ Long],
          opcdefault = json.\("opcdefault").as[Boolean],
          opckeytype = json.\("opckeytype").as[/* oid */ Long]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgOpclassRow] = RowParser[PgOpclassRow] { row =>
    Success(
      PgOpclassRow(
        oid = row[PgOpclassId](idx + 0),
        opcmethod = row[/* oid */ Long](idx + 1),
        opcname = row[String](idx + 2),
        opcnamespace = row[/* oid */ Long](idx + 3),
        opcowner = row[/* oid */ Long](idx + 4),
        opcfamily = row[/* oid */ Long](idx + 5),
        opcintype = row[/* oid */ Long](idx + 6),
        opcdefault = row[Boolean](idx + 7),
        opckeytype = row[/* oid */ Long](idx + 8)
      )
    )
  }
  implicit val writes: OWrites[PgOpclassRow] = OWrites[PgOpclassRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "opcmethod" -> Json.toJson(o.opcmethod),
      "opcname" -> Json.toJson(o.opcname),
      "opcnamespace" -> Json.toJson(o.opcnamespace),
      "opcowner" -> Json.toJson(o.opcowner),
      "opcfamily" -> Json.toJson(o.opcfamily),
      "opcintype" -> Json.toJson(o.opcintype),
      "opcdefault" -> Json.toJson(o.opcdefault),
      "opckeytype" -> Json.toJson(o.opckeytype)
    ))
  )
}
