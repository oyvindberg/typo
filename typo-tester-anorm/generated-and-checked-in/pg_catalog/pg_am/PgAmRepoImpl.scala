/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_am

import anorm.SqlStringInterpolation
import java.sql.Connection

object PgAmRepoImpl extends PgAmRepo {
  override def delete(oid: PgAmId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_am where oid = $oid".executeUpdate() > 0
  }
  override def insert(unsaved: PgAmRow)(implicit c: Connection): PgAmRow = {
    SQL"""insert into pg_catalog.pg_am(oid, amname, amhandler, amtype)
          values (${unsaved.oid}::oid, ${unsaved.amname}::name, ${unsaved.amhandler}::regproc, ${unsaved.amtype}::char)
          returning oid, amname, amhandler, amtype
       """
      .executeInsert(PgAmRow.rowParser(1).single)
  
  }
  override def selectAll(implicit c: Connection): List[PgAmRow] = {
    SQL"""select oid, amname, amhandler, amtype
          from pg_catalog.pg_am
       """.as(PgAmRow.rowParser(1).*)
  }
  override def selectById(oid: PgAmId)(implicit c: Connection): Option[PgAmRow] = {
    SQL"""select oid, amname, amhandler, amtype
          from pg_catalog.pg_am
          where oid = $oid
       """.as(PgAmRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgAmId])(implicit c: Connection): List[PgAmRow] = {
    SQL"""select oid, amname, amhandler, amtype
          from pg_catalog.pg_am
          where oid = ANY($oids)
       """.as(PgAmRow.rowParser(1).*)
  
  }
  override def update(row: PgAmRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_am
          set amname = ${row.amname}::name,
              amhandler = ${row.amhandler}::regproc,
              amtype = ${row.amtype}::char
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: PgAmRow)(implicit c: Connection): PgAmRow = {
    SQL"""insert into pg_catalog.pg_am(oid, amname, amhandler, amtype)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.amname}::name,
            ${unsaved.amhandler}::regproc,
            ${unsaved.amtype}::char
          )
          on conflict (oid)
          do update set
            amname = EXCLUDED.amname,
            amhandler = EXCLUDED.amhandler,
            amtype = EXCLUDED.amtype
          returning oid, amname, amhandler, amtype
       """
      .executeInsert(PgAmRow.rowParser(1).single)
  
  }
}
