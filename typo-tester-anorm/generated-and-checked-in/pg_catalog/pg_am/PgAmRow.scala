/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_am

import adventureworks.TypoRegproc
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgAmRow(
  oid: PgAmId,
  amname: String,
  amhandler: TypoRegproc,
  amtype: String
)

object PgAmRow {
  implicit val reads: Reads[PgAmRow] = Reads[PgAmRow](json => JsResult.fromTry(
      Try(
        PgAmRow(
          oid = json.\("oid").as[PgAmId],
          amname = json.\("amname").as[String],
          amhandler = json.\("amhandler").as[TypoRegproc],
          amtype = json.\("amtype").as[String]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgAmRow] = RowParser[PgAmRow] { row =>
    Success(
      PgAmRow(
        oid = row[PgAmId](idx + 0),
        amname = row[String](idx + 1),
        amhandler = row[TypoRegproc](idx + 2),
        amtype = row[String](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[PgAmRow] = OWrites[PgAmRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "amname" -> Json.toJson(o.amname),
      "amhandler" -> Json.toJson(o.amhandler),
      "amtype" -> Json.toJson(o.amtype)
    ))
  )
}
