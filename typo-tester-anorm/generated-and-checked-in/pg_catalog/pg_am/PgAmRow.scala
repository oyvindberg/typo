/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_am

import adventureworks.TypoRegproc
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgAmRow(
  oid: PgAmId,
  amname: String,
  amhandler: TypoRegproc,
  amtype: String
)

object PgAmRow {
  def rowParser(idx: Int): RowParser[PgAmRow] =
    RowParser[PgAmRow] { row =>
      Success(
        PgAmRow(
          oid = row[PgAmId](idx + 0),
          amname = row[String](idx + 1),
          amhandler = row[TypoRegproc](idx + 2),
          amtype = row[String](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[PgAmRow] = new OFormat[PgAmRow]{
    override def writes(o: PgAmRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "amname" -> o.amname,
        "amhandler" -> o.amhandler,
        "amtype" -> o.amtype
      )
  
    override def reads(json: JsValue): JsResult[PgAmRow] = {
      JsResult.fromTry(
        Try(
          PgAmRow(
            oid = json.\("oid").as[PgAmId],
            amname = json.\("amname").as[String],
            amhandler = json.\("amhandler").as[TypoRegproc],
            amtype = json.\("amtype").as[String]
          )
        )
      )
    }
  }
}
