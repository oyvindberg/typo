/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_shseclabel

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgShseclabelRow(
  objoid: /* oid */ Long,
  classoid: /* oid */ Long,
  provider: String,
  label: String
){
   val compositeId: PgShseclabelId = PgShseclabelId(objoid, classoid, provider)
 }

object PgShseclabelRow {
  def rowParser(idx: Int): RowParser[PgShseclabelRow] =
    RowParser[PgShseclabelRow] { row =>
      Success(
        PgShseclabelRow(
          objoid = row[/* oid */ Long](idx + 0),
          classoid = row[/* oid */ Long](idx + 1),
          provider = row[String](idx + 2),
          label = row[String](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[PgShseclabelRow] = new OFormat[PgShseclabelRow]{
    override def writes(o: PgShseclabelRow): JsObject =
      Json.obj(
        "objoid" -> o.objoid,
        "classoid" -> o.classoid,
        "provider" -> o.provider,
        "label" -> o.label
      )
  
    override def reads(json: JsValue): JsResult[PgShseclabelRow] = {
      JsResult.fromTry(
        Try(
          PgShseclabelRow(
            objoid = json.\("objoid").as[/* oid */ Long],
            classoid = json.\("classoid").as[/* oid */ Long],
            provider = json.\("provider").as[String],
            label = json.\("label").as[String]
          )
        )
      )
    }
  }
}
