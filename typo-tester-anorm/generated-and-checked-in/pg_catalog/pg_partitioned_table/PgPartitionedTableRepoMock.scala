/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_partitioned_table

import java.sql.Connection

class PgPartitionedTableRepoMock(map: scala.collection.mutable.Map[PgPartitionedTableId, PgPartitionedTableRow] = scala.collection.mutable.Map.empty) extends PgPartitionedTableRepo {
  override def delete(partrelid: PgPartitionedTableId)(implicit c: Connection): Boolean = {
    map.remove(partrelid).isDefined
  }
  override def insert(unsaved: PgPartitionedTableRow)(implicit c: Connection): PgPartitionedTableRow = {
    if (map.contains(unsaved.partrelid))
      sys.error(s"id ${unsaved.partrelid} already exists")
    else
      map.put(unsaved.partrelid, unsaved)
    unsaved
  }
  override def selectAll(implicit c: Connection): List[PgPartitionedTableRow] = {
    map.values.toList
  }
  override def selectById(partrelid: PgPartitionedTableId)(implicit c: Connection): Option[PgPartitionedTableRow] = {
    map.get(partrelid)
  }
  override def selectByIds(partrelids: Array[PgPartitionedTableId])(implicit c: Connection): List[PgPartitionedTableRow] = {
    partrelids.flatMap(map.get).toList
  }
  override def update(row: PgPartitionedTableRow)(implicit c: Connection): Boolean = {
    map.get(row.partrelid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.partrelid, row)
        true
      case None => false
    }
  }
  override def upsert(unsaved: PgPartitionedTableRow)(implicit c: Connection): PgPartitionedTableRow = {
    map.put(unsaved.partrelid, unsaved)
    unsaved
  }
}
