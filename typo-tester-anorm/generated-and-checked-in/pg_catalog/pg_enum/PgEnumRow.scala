/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_enum

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgEnumRow(
  oid: PgEnumId,
  enumtypid: /* oid */ Long,
  enumsortorder: Float,
  enumlabel: String
)

object PgEnumRow {
  def rowParser(idx: Int): RowParser[PgEnumRow] =
    RowParser[PgEnumRow] { row =>
      Success(
        PgEnumRow(
          oid = row[PgEnumId](idx + 0),
          enumtypid = row[/* oid */ Long](idx + 1),
          enumsortorder = row[Float](idx + 2),
          enumlabel = row[String](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[PgEnumRow] = new OFormat[PgEnumRow]{
    override def writes(o: PgEnumRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "enumtypid" -> o.enumtypid,
        "enumsortorder" -> o.enumsortorder,
        "enumlabel" -> o.enumlabel
      )
  
    override def reads(json: JsValue): JsResult[PgEnumRow] = {
      JsResult.fromTry(
        Try(
          PgEnumRow(
            oid = json.\("oid").as[PgEnumId],
            enumtypid = json.\("enumtypid").as[/* oid */ Long],
            enumsortorder = json.\("enumsortorder").as[Float],
            enumlabel = json.\("enumlabel").as[String]
          )
        )
      )
    }
  }
}
