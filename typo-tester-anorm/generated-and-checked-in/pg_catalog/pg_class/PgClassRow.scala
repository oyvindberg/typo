/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_class

import adventureworks.TypoAclItem
import adventureworks.TypoPgNodeTree
import adventureworks.TypoXid
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgClassRow(
  oid: PgClassId,
  relname: String,
  relnamespace: /* oid */ Long,
  reltype: /* oid */ Long,
  reloftype: /* oid */ Long,
  relowner: /* oid */ Long,
  relam: /* oid */ Long,
  relfilenode: /* oid */ Long,
  reltablespace: /* oid */ Long,
  relpages: Int,
  reltuples: Float,
  relallvisible: Int,
  reltoastrelid: /* oid */ Long,
  relhasindex: Boolean,
  relisshared: Boolean,
  relpersistence: String,
  relkind: String,
  relnatts: Int,
  relchecks: Int,
  relhasrules: Boolean,
  relhastriggers: Boolean,
  relhassubclass: Boolean,
  relrowsecurity: Boolean,
  relforcerowsecurity: Boolean,
  relispopulated: Boolean,
  relreplident: String,
  relispartition: Boolean,
  relrewrite: /* oid */ Long,
  relfrozenxid: TypoXid,
  relminmxid: TypoXid,
  relacl: Option[Array[TypoAclItem]],
  reloptions: Option[Array[String]],
  relpartbound: Option[TypoPgNodeTree]
)

object PgClassRow {
  implicit val reads: Reads[PgClassRow] = Reads[PgClassRow](json => JsResult.fromTry(
      Try(
        PgClassRow(
          oid = json.\("oid").as(PgClassId.reads),
          relname = json.\("relname").as(Reads.StringReads),
          relnamespace = json.\("relnamespace").as(Reads.LongReads),
          reltype = json.\("reltype").as(Reads.LongReads),
          reloftype = json.\("reloftype").as(Reads.LongReads),
          relowner = json.\("relowner").as(Reads.LongReads),
          relam = json.\("relam").as(Reads.LongReads),
          relfilenode = json.\("relfilenode").as(Reads.LongReads),
          reltablespace = json.\("reltablespace").as(Reads.LongReads),
          relpages = json.\("relpages").as(Reads.IntReads),
          reltuples = json.\("reltuples").as(Reads.FloatReads),
          relallvisible = json.\("relallvisible").as(Reads.IntReads),
          reltoastrelid = json.\("reltoastrelid").as(Reads.LongReads),
          relhasindex = json.\("relhasindex").as(Reads.BooleanReads),
          relisshared = json.\("relisshared").as(Reads.BooleanReads),
          relpersistence = json.\("relpersistence").as(Reads.StringReads),
          relkind = json.\("relkind").as(Reads.StringReads),
          relnatts = json.\("relnatts").as(Reads.IntReads),
          relchecks = json.\("relchecks").as(Reads.IntReads),
          relhasrules = json.\("relhasrules").as(Reads.BooleanReads),
          relhastriggers = json.\("relhastriggers").as(Reads.BooleanReads),
          relhassubclass = json.\("relhassubclass").as(Reads.BooleanReads),
          relrowsecurity = json.\("relrowsecurity").as(Reads.BooleanReads),
          relforcerowsecurity = json.\("relforcerowsecurity").as(Reads.BooleanReads),
          relispopulated = json.\("relispopulated").as(Reads.BooleanReads),
          relreplident = json.\("relreplident").as(Reads.StringReads),
          relispartition = json.\("relispartition").as(Reads.BooleanReads),
          relrewrite = json.\("relrewrite").as(Reads.LongReads),
          relfrozenxid = json.\("relfrozenxid").as(TypoXid.reads),
          relminmxid = json.\("relminmxid").as(TypoXid.reads),
          relacl = json.\("relacl").toOption.map(_.as(Reads.ArrayReads[TypoAclItem](TypoAclItem.reads, implicitly))),
          reloptions = json.\("reloptions").toOption.map(_.as(Reads.ArrayReads[String](Reads.StringReads, implicitly))),
          relpartbound = json.\("relpartbound").toOption.map(_.as(TypoPgNodeTree.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgClassRow] = RowParser[PgClassRow] { row =>
    Success(
      PgClassRow(
        oid = row(idx + 0)(PgClassId.column),
        relname = row(idx + 1)(Column.columnToString),
        relnamespace = row(idx + 2)(Column.columnToLong),
        reltype = row(idx + 3)(Column.columnToLong),
        reloftype = row(idx + 4)(Column.columnToLong),
        relowner = row(idx + 5)(Column.columnToLong),
        relam = row(idx + 6)(Column.columnToLong),
        relfilenode = row(idx + 7)(Column.columnToLong),
        reltablespace = row(idx + 8)(Column.columnToLong),
        relpages = row(idx + 9)(Column.columnToInt),
        reltuples = row(idx + 10)(Column.columnToFloat),
        relallvisible = row(idx + 11)(Column.columnToInt),
        reltoastrelid = row(idx + 12)(Column.columnToLong),
        relhasindex = row(idx + 13)(Column.columnToBoolean),
        relisshared = row(idx + 14)(Column.columnToBoolean),
        relpersistence = row(idx + 15)(Column.columnToString),
        relkind = row(idx + 16)(Column.columnToString),
        relnatts = row(idx + 17)(Column.columnToInt),
        relchecks = row(idx + 18)(Column.columnToInt),
        relhasrules = row(idx + 19)(Column.columnToBoolean),
        relhastriggers = row(idx + 20)(Column.columnToBoolean),
        relhassubclass = row(idx + 21)(Column.columnToBoolean),
        relrowsecurity = row(idx + 22)(Column.columnToBoolean),
        relforcerowsecurity = row(idx + 23)(Column.columnToBoolean),
        relispopulated = row(idx + 24)(Column.columnToBoolean),
        relreplident = row(idx + 25)(Column.columnToString),
        relispartition = row(idx + 26)(Column.columnToBoolean),
        relrewrite = row(idx + 27)(Column.columnToLong),
        relfrozenxid = row(idx + 28)(TypoXid.column),
        relminmxid = row(idx + 29)(TypoXid.column),
        relacl = row(idx + 30)(Column.columnToOption(TypoAclItem.arrayColumn)),
        reloptions = row(idx + 31)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly))),
        relpartbound = row(idx + 32)(Column.columnToOption(TypoPgNodeTree.column))
      )
    )
  }
  implicit val writes: OWrites[PgClassRow] = OWrites[PgClassRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> PgClassId.writes.writes(o.oid),
      "relname" -> Writes.StringWrites.writes(o.relname),
      "relnamespace" -> Writes.LongWrites.writes(o.relnamespace),
      "reltype" -> Writes.LongWrites.writes(o.reltype),
      "reloftype" -> Writes.LongWrites.writes(o.reloftype),
      "relowner" -> Writes.LongWrites.writes(o.relowner),
      "relam" -> Writes.LongWrites.writes(o.relam),
      "relfilenode" -> Writes.LongWrites.writes(o.relfilenode),
      "reltablespace" -> Writes.LongWrites.writes(o.reltablespace),
      "relpages" -> Writes.IntWrites.writes(o.relpages),
      "reltuples" -> Writes.FloatWrites.writes(o.reltuples),
      "relallvisible" -> Writes.IntWrites.writes(o.relallvisible),
      "reltoastrelid" -> Writes.LongWrites.writes(o.reltoastrelid),
      "relhasindex" -> Writes.BooleanWrites.writes(o.relhasindex),
      "relisshared" -> Writes.BooleanWrites.writes(o.relisshared),
      "relpersistence" -> Writes.StringWrites.writes(o.relpersistence),
      "relkind" -> Writes.StringWrites.writes(o.relkind),
      "relnatts" -> Writes.IntWrites.writes(o.relnatts),
      "relchecks" -> Writes.IntWrites.writes(o.relchecks),
      "relhasrules" -> Writes.BooleanWrites.writes(o.relhasrules),
      "relhastriggers" -> Writes.BooleanWrites.writes(o.relhastriggers),
      "relhassubclass" -> Writes.BooleanWrites.writes(o.relhassubclass),
      "relrowsecurity" -> Writes.BooleanWrites.writes(o.relrowsecurity),
      "relforcerowsecurity" -> Writes.BooleanWrites.writes(o.relforcerowsecurity),
      "relispopulated" -> Writes.BooleanWrites.writes(o.relispopulated),
      "relreplident" -> Writes.StringWrites.writes(o.relreplident),
      "relispartition" -> Writes.BooleanWrites.writes(o.relispartition),
      "relrewrite" -> Writes.LongWrites.writes(o.relrewrite),
      "relfrozenxid" -> TypoXid.writes.writes(o.relfrozenxid),
      "relminmxid" -> TypoXid.writes.writes(o.relminmxid),
      "relacl" -> Writes.OptionWrites(Writes.arrayWrites[TypoAclItem](implicitly, TypoAclItem.writes)).writes(o.relacl),
      "reloptions" -> Writes.OptionWrites(Writes.arrayWrites[String](implicitly, Writes.StringWrites)).writes(o.reloptions),
      "relpartbound" -> Writes.OptionWrites(TypoPgNodeTree.writes).writes(o.relpartbound)
    ))
  )
}
