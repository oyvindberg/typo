/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_all_tables

import anorm.RowParser
import anorm.Success
import java.time.OffsetDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatAllTablesViewRow(
  relid: Option[/* oid */ Long],
  schemaname: Option[String],
  relname: Option[String],
  seqScan: Option[Long],
  seqTupRead: Option[Long],
  idxScan: Option[Long],
  idxTupFetch: Option[Long],
  nTupIns: Option[Long],
  nTupUpd: Option[Long],
  nTupDel: Option[Long],
  nTupHotUpd: Option[Long],
  nLiveTup: Option[Long],
  nDeadTup: Option[Long],
  nModSinceAnalyze: Option[Long],
  nInsSinceVacuum: Option[Long],
  lastVacuum: Option[OffsetDateTime],
  lastAutovacuum: Option[OffsetDateTime],
  lastAnalyze: Option[OffsetDateTime],
  lastAutoanalyze: Option[OffsetDateTime],
  vacuumCount: Option[Long],
  autovacuumCount: Option[Long],
  analyzeCount: Option[Long],
  autoanalyzeCount: Option[Long]
)

object PgStatAllTablesViewRow {
  def rowParser(idx: Int): RowParser[PgStatAllTablesViewRow] =
    RowParser[PgStatAllTablesViewRow] { row =>
      Success(
        PgStatAllTablesViewRow(
          relid = row[Option[/* oid */ Long]](idx + 0),
          schemaname = row[Option[String]](idx + 1),
          relname = row[Option[String]](idx + 2),
          seqScan = row[Option[Long]](idx + 3),
          seqTupRead = row[Option[Long]](idx + 4),
          idxScan = row[Option[Long]](idx + 5),
          idxTupFetch = row[Option[Long]](idx + 6),
          nTupIns = row[Option[Long]](idx + 7),
          nTupUpd = row[Option[Long]](idx + 8),
          nTupDel = row[Option[Long]](idx + 9),
          nTupHotUpd = row[Option[Long]](idx + 10),
          nLiveTup = row[Option[Long]](idx + 11),
          nDeadTup = row[Option[Long]](idx + 12),
          nModSinceAnalyze = row[Option[Long]](idx + 13),
          nInsSinceVacuum = row[Option[Long]](idx + 14),
          lastVacuum = row[Option[OffsetDateTime]](idx + 15),
          lastAutovacuum = row[Option[OffsetDateTime]](idx + 16),
          lastAnalyze = row[Option[OffsetDateTime]](idx + 17),
          lastAutoanalyze = row[Option[OffsetDateTime]](idx + 18),
          vacuumCount = row[Option[Long]](idx + 19),
          autovacuumCount = row[Option[Long]](idx + 20),
          analyzeCount = row[Option[Long]](idx + 21),
          autoanalyzeCount = row[Option[Long]](idx + 22)
        )
      )
    }
  implicit val oFormat: OFormat[PgStatAllTablesViewRow] = new OFormat[PgStatAllTablesViewRow]{
    override def writes(o: PgStatAllTablesViewRow): JsObject =
      Json.obj(
        "relid" -> o.relid,
        "schemaname" -> o.schemaname,
        "relname" -> o.relname,
        "seq_scan" -> o.seqScan,
        "seq_tup_read" -> o.seqTupRead,
        "idx_scan" -> o.idxScan,
        "idx_tup_fetch" -> o.idxTupFetch,
        "n_tup_ins" -> o.nTupIns,
        "n_tup_upd" -> o.nTupUpd,
        "n_tup_del" -> o.nTupDel,
        "n_tup_hot_upd" -> o.nTupHotUpd,
        "n_live_tup" -> o.nLiveTup,
        "n_dead_tup" -> o.nDeadTup,
        "n_mod_since_analyze" -> o.nModSinceAnalyze,
        "n_ins_since_vacuum" -> o.nInsSinceVacuum,
        "last_vacuum" -> o.lastVacuum,
        "last_autovacuum" -> o.lastAutovacuum,
        "last_analyze" -> o.lastAnalyze,
        "last_autoanalyze" -> o.lastAutoanalyze,
        "vacuum_count" -> o.vacuumCount,
        "autovacuum_count" -> o.autovacuumCount,
        "analyze_count" -> o.analyzeCount,
        "autoanalyze_count" -> o.autoanalyzeCount
      )
  
    override def reads(json: JsValue): JsResult[PgStatAllTablesViewRow] = {
      JsResult.fromTry(
        Try(
          PgStatAllTablesViewRow(
            relid = json.\("relid").toOption.map(_.as[/* oid */ Long]),
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            relname = json.\("relname").toOption.map(_.as[String]),
            seqScan = json.\("seq_scan").toOption.map(_.as[Long]),
            seqTupRead = json.\("seq_tup_read").toOption.map(_.as[Long]),
            idxScan = json.\("idx_scan").toOption.map(_.as[Long]),
            idxTupFetch = json.\("idx_tup_fetch").toOption.map(_.as[Long]),
            nTupIns = json.\("n_tup_ins").toOption.map(_.as[Long]),
            nTupUpd = json.\("n_tup_upd").toOption.map(_.as[Long]),
            nTupDel = json.\("n_tup_del").toOption.map(_.as[Long]),
            nTupHotUpd = json.\("n_tup_hot_upd").toOption.map(_.as[Long]),
            nLiveTup = json.\("n_live_tup").toOption.map(_.as[Long]),
            nDeadTup = json.\("n_dead_tup").toOption.map(_.as[Long]),
            nModSinceAnalyze = json.\("n_mod_since_analyze").toOption.map(_.as[Long]),
            nInsSinceVacuum = json.\("n_ins_since_vacuum").toOption.map(_.as[Long]),
            lastVacuum = json.\("last_vacuum").toOption.map(_.as[OffsetDateTime]),
            lastAutovacuum = json.\("last_autovacuum").toOption.map(_.as[OffsetDateTime]),
            lastAnalyze = json.\("last_analyze").toOption.map(_.as[OffsetDateTime]),
            lastAutoanalyze = json.\("last_autoanalyze").toOption.map(_.as[OffsetDateTime]),
            vacuumCount = json.\("vacuum_count").toOption.map(_.as[Long]),
            autovacuumCount = json.\("autovacuum_count").toOption.map(_.as[Long]),
            analyzeCount = json.\("analyze_count").toOption.map(_.as[Long]),
            autoanalyzeCount = json.\("autoanalyze_count").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
