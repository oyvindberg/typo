/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_prepared_statements

import adventureworks.TypoRegtype
import anorm.RowParser
import anorm.Success
import java.time.OffsetDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgPreparedStatementsViewRow(
  name: Option[String],
  statement: Option[String],
  prepareTime: Option[OffsetDateTime],
  parameterTypes: Option[Array[TypoRegtype]],
  fromSql: Option[Boolean],
  genericPlans: Option[Long],
  customPlans: Option[Long]
)

object PgPreparedStatementsViewRow {
  def rowParser(idx: Int): RowParser[PgPreparedStatementsViewRow] =
    RowParser[PgPreparedStatementsViewRow] { row =>
      Success(
        PgPreparedStatementsViewRow(
          name = row[Option[String]](idx + 0),
          statement = row[Option[String]](idx + 1),
          prepareTime = row[Option[OffsetDateTime]](idx + 2),
          parameterTypes = row[Option[Array[TypoRegtype]]](idx + 3),
          fromSql = row[Option[Boolean]](idx + 4),
          genericPlans = row[Option[Long]](idx + 5),
          customPlans = row[Option[Long]](idx + 6)
        )
      )
    }
  implicit val oFormat: OFormat[PgPreparedStatementsViewRow] = new OFormat[PgPreparedStatementsViewRow]{
    override def writes(o: PgPreparedStatementsViewRow): JsObject =
      Json.obj(
        "name" -> o.name,
        "statement" -> o.statement,
        "prepare_time" -> o.prepareTime,
        "parameter_types" -> o.parameterTypes,
        "from_sql" -> o.fromSql,
        "generic_plans" -> o.genericPlans,
        "custom_plans" -> o.customPlans
      )
  
    override def reads(json: JsValue): JsResult[PgPreparedStatementsViewRow] = {
      JsResult.fromTry(
        Try(
          PgPreparedStatementsViewRow(
            name = json.\("name").toOption.map(_.as[String]),
            statement = json.\("statement").toOption.map(_.as[String]),
            prepareTime = json.\("prepare_time").toOption.map(_.as[OffsetDateTime]),
            parameterTypes = json.\("parameter_types").toOption.map(_.as[Array[TypoRegtype]]),
            fromSql = json.\("from_sql").toOption.map(_.as[Boolean]),
            genericPlans = json.\("generic_plans").toOption.map(_.as[Long]),
            customPlans = json.\("custom_plans").toOption.map(_.as[Long])
          )
        )
      )
    }
  }
}
