/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_hba_file_rules

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgHbaFileRulesViewRow(
  lineNumber: Option[Int],
  `type`: Option[String],
  database: Option[Array[String]],
  userName: Option[Array[String]],
  address: Option[String],
  netmask: Option[String],
  authMethod: Option[String],
  options: Option[Array[String]],
  error: Option[String]
)

object PgHbaFileRulesViewRow {
  def rowParser(idx: Int): RowParser[PgHbaFileRulesViewRow] =
    RowParser[PgHbaFileRulesViewRow] { row =>
      Success(
        PgHbaFileRulesViewRow(
          lineNumber = row[Option[Int]](idx + 0),
          `type` = row[Option[String]](idx + 1),
          database = row[Option[Array[String]]](idx + 2),
          userName = row[Option[Array[String]]](idx + 3),
          address = row[Option[String]](idx + 4),
          netmask = row[Option[String]](idx + 5),
          authMethod = row[Option[String]](idx + 6),
          options = row[Option[Array[String]]](idx + 7),
          error = row[Option[String]](idx + 8)
        )
      )
    }
  implicit val oFormat: OFormat[PgHbaFileRulesViewRow] = new OFormat[PgHbaFileRulesViewRow]{
    override def writes(o: PgHbaFileRulesViewRow): JsObject =
      Json.obj(
        "line_number" -> o.lineNumber,
        "type" -> o.`type`,
        "database" -> o.database,
        "user_name" -> o.userName,
        "address" -> o.address,
        "netmask" -> o.netmask,
        "auth_method" -> o.authMethod,
        "options" -> o.options,
        "error" -> o.error
      )
  
    override def reads(json: JsValue): JsResult[PgHbaFileRulesViewRow] = {
      JsResult.fromTry(
        Try(
          PgHbaFileRulesViewRow(
            lineNumber = json.\("line_number").toOption.map(_.as[Int]),
            `type` = json.\("type").toOption.map(_.as[String]),
            database = json.\("database").toOption.map(_.as[Array[String]]),
            userName = json.\("user_name").toOption.map(_.as[Array[String]]),
            address = json.\("address").toOption.map(_.as[String]),
            netmask = json.\("netmask").toOption.map(_.as[String]),
            authMethod = json.\("auth_method").toOption.map(_.as[String]),
            options = json.\("options").toOption.map(_.as[Array[String]]),
            error = json.\("error").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
