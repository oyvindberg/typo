/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_basebackup

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatProgressBasebackupViewRow(
  pid: Option[Int],
  phase: Option[String],
  backupTotal: Option[Long],
  backupStreamed: Option[Long],
  tablespacesTotal: Option[Long],
  tablespacesStreamed: Option[Long]
)

object PgStatProgressBasebackupViewRow {
  implicit val reads: Reads[PgStatProgressBasebackupViewRow] = Reads[PgStatProgressBasebackupViewRow](json => JsResult.fromTry(
      Try(
        PgStatProgressBasebackupViewRow(
          pid = json.\("pid").toOption.map(_.as[Int]),
          phase = json.\("phase").toOption.map(_.as[String]),
          backupTotal = json.\("backup_total").toOption.map(_.as[Long]),
          backupStreamed = json.\("backup_streamed").toOption.map(_.as[Long]),
          tablespacesTotal = json.\("tablespaces_total").toOption.map(_.as[Long]),
          tablespacesStreamed = json.\("tablespaces_streamed").toOption.map(_.as[Long])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatProgressBasebackupViewRow] = RowParser[PgStatProgressBasebackupViewRow] { row =>
    Success(
      PgStatProgressBasebackupViewRow(
        pid = row[Option[Int]](idx + 0),
        phase = row[Option[String]](idx + 1),
        backupTotal = row[Option[Long]](idx + 2),
        backupStreamed = row[Option[Long]](idx + 3),
        tablespacesTotal = row[Option[Long]](idx + 4),
        tablespacesStreamed = row[Option[Long]](idx + 5)
      )
    )
  }
  implicit val writes: OWrites[PgStatProgressBasebackupViewRow] = OWrites[PgStatProgressBasebackupViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "pid" -> Json.toJson(o.pid),
      "phase" -> Json.toJson(o.phase),
      "backup_total" -> Json.toJson(o.backupTotal),
      "backup_streamed" -> Json.toJson(o.backupStreamed),
      "tablespaces_total" -> Json.toJson(o.tablespacesTotal),
      "tablespaces_streamed" -> Json.toJson(o.tablespacesStreamed)
    ))
  )
}
