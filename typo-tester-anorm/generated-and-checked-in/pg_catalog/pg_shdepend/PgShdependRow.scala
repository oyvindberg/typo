/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_shdepend

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgShdependRow(
  dbid: /* oid */ Long,
  classid: /* oid */ Long,
  objid: /* oid */ Long,
  objsubid: Int,
  refclassid: /* oid */ Long,
  refobjid: /* oid */ Long,
  deptype: String
)

object PgShdependRow {
  implicit val reads: Reads[PgShdependRow] = Reads[PgShdependRow](json => JsResult.fromTry(
      Try(
        PgShdependRow(
          dbid = json.\("dbid").as(Reads.LongReads),
          classid = json.\("classid").as(Reads.LongReads),
          objid = json.\("objid").as(Reads.LongReads),
          objsubid = json.\("objsubid").as(Reads.IntReads),
          refclassid = json.\("refclassid").as(Reads.LongReads),
          refobjid = json.\("refobjid").as(Reads.LongReads),
          deptype = json.\("deptype").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgShdependRow] = RowParser[PgShdependRow] { row =>
    Success(
      PgShdependRow(
        dbid = row(idx + 0)(Column.columnToLong),
        classid = row(idx + 1)(Column.columnToLong),
        objid = row(idx + 2)(Column.columnToLong),
        objsubid = row(idx + 3)(Column.columnToInt),
        refclassid = row(idx + 4)(Column.columnToLong),
        refobjid = row(idx + 5)(Column.columnToLong),
        deptype = row(idx + 6)(Column.columnToString)
      )
    )
  }
  implicit val writes: OWrites[PgShdependRow] = OWrites[PgShdependRow](o =>
    new JsObject(ListMap[String, JsValue](
      "dbid" -> Writes.LongWrites.writes(o.dbid),
      "classid" -> Writes.LongWrites.writes(o.classid),
      "objid" -> Writes.LongWrites.writes(o.objid),
      "objsubid" -> Writes.IntWrites.writes(o.objsubid),
      "refclassid" -> Writes.LongWrites.writes(o.refclassid),
      "refobjid" -> Writes.LongWrites.writes(o.refobjid),
      "deptype" -> Writes.StringWrites.writes(o.deptype)
    ))
  )
}
