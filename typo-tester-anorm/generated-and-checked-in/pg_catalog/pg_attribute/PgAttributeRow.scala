/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_attribute

import adventureworks.TypoAclItem
import adventureworks.TypoAnyArray
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgAttributeRow(
  attrelid: /* oid */ Long,
  attname: String,
  atttypid: /* oid */ Long,
  attstattarget: Int,
  attlen: Int,
  attnum: Int,
  attndims: Int,
  attcacheoff: Int,
  atttypmod: Int,
  attbyval: Boolean,
  attalign: String,
  attstorage: String,
  attcompression: String,
  attnotnull: Boolean,
  atthasdef: Boolean,
  atthasmissing: Boolean,
  attidentity: String,
  attgenerated: String,
  attisdropped: Boolean,
  attislocal: Boolean,
  attinhcount: Int,
  attcollation: /* oid */ Long,
  attacl: Option[Array[TypoAclItem]],
  attoptions: Option[Array[String]],
  attfdwoptions: Option[Array[String]],
  attmissingval: Option[TypoAnyArray]
){
   val compositeId: PgAttributeId = PgAttributeId(attrelid, attnum)
 }

object PgAttributeRow {
  implicit val reads: Reads[PgAttributeRow] = Reads[PgAttributeRow](json => JsResult.fromTry(
      Try(
        PgAttributeRow(
          attrelid = json.\("attrelid").as(Reads.LongReads),
          attname = json.\("attname").as(Reads.StringReads),
          atttypid = json.\("atttypid").as(Reads.LongReads),
          attstattarget = json.\("attstattarget").as(Reads.IntReads),
          attlen = json.\("attlen").as(Reads.IntReads),
          attnum = json.\("attnum").as(Reads.IntReads),
          attndims = json.\("attndims").as(Reads.IntReads),
          attcacheoff = json.\("attcacheoff").as(Reads.IntReads),
          atttypmod = json.\("atttypmod").as(Reads.IntReads),
          attbyval = json.\("attbyval").as(Reads.BooleanReads),
          attalign = json.\("attalign").as(Reads.StringReads),
          attstorage = json.\("attstorage").as(Reads.StringReads),
          attcompression = json.\("attcompression").as(Reads.StringReads),
          attnotnull = json.\("attnotnull").as(Reads.BooleanReads),
          atthasdef = json.\("atthasdef").as(Reads.BooleanReads),
          atthasmissing = json.\("atthasmissing").as(Reads.BooleanReads),
          attidentity = json.\("attidentity").as(Reads.StringReads),
          attgenerated = json.\("attgenerated").as(Reads.StringReads),
          attisdropped = json.\("attisdropped").as(Reads.BooleanReads),
          attislocal = json.\("attislocal").as(Reads.BooleanReads),
          attinhcount = json.\("attinhcount").as(Reads.IntReads),
          attcollation = json.\("attcollation").as(Reads.LongReads),
          attacl = json.\("attacl").toOption.map(_.as(Reads.ArrayReads[TypoAclItem](TypoAclItem.reads, implicitly))),
          attoptions = json.\("attoptions").toOption.map(_.as(Reads.ArrayReads[String](Reads.StringReads, implicitly))),
          attfdwoptions = json.\("attfdwoptions").toOption.map(_.as(Reads.ArrayReads[String](Reads.StringReads, implicitly))),
          attmissingval = json.\("attmissingval").toOption.map(_.as(TypoAnyArray.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgAttributeRow] = RowParser[PgAttributeRow] { row =>
    Success(
      PgAttributeRow(
        attrelid = row(idx + 0)(Column.columnToLong),
        attname = row(idx + 1)(Column.columnToString),
        atttypid = row(idx + 2)(Column.columnToLong),
        attstattarget = row(idx + 3)(Column.columnToInt),
        attlen = row(idx + 4)(Column.columnToInt),
        attnum = row(idx + 5)(Column.columnToInt),
        attndims = row(idx + 6)(Column.columnToInt),
        attcacheoff = row(idx + 7)(Column.columnToInt),
        atttypmod = row(idx + 8)(Column.columnToInt),
        attbyval = row(idx + 9)(Column.columnToBoolean),
        attalign = row(idx + 10)(Column.columnToString),
        attstorage = row(idx + 11)(Column.columnToString),
        attcompression = row(idx + 12)(Column.columnToString),
        attnotnull = row(idx + 13)(Column.columnToBoolean),
        atthasdef = row(idx + 14)(Column.columnToBoolean),
        atthasmissing = row(idx + 15)(Column.columnToBoolean),
        attidentity = row(idx + 16)(Column.columnToString),
        attgenerated = row(idx + 17)(Column.columnToString),
        attisdropped = row(idx + 18)(Column.columnToBoolean),
        attislocal = row(idx + 19)(Column.columnToBoolean),
        attinhcount = row(idx + 20)(Column.columnToInt),
        attcollation = row(idx + 21)(Column.columnToLong),
        attacl = row(idx + 22)(Column.columnToOption(TypoAclItem.arrayColumn)),
        attoptions = row(idx + 23)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly))),
        attfdwoptions = row(idx + 24)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly))),
        attmissingval = row(idx + 25)(Column.columnToOption(TypoAnyArray.column))
      )
    )
  }
  implicit val writes: OWrites[PgAttributeRow] = OWrites[PgAttributeRow](o =>
    new JsObject(ListMap[String, JsValue](
      "attrelid" -> Writes.LongWrites.writes(o.attrelid),
      "attname" -> Writes.StringWrites.writes(o.attname),
      "atttypid" -> Writes.LongWrites.writes(o.atttypid),
      "attstattarget" -> Writes.IntWrites.writes(o.attstattarget),
      "attlen" -> Writes.IntWrites.writes(o.attlen),
      "attnum" -> Writes.IntWrites.writes(o.attnum),
      "attndims" -> Writes.IntWrites.writes(o.attndims),
      "attcacheoff" -> Writes.IntWrites.writes(o.attcacheoff),
      "atttypmod" -> Writes.IntWrites.writes(o.atttypmod),
      "attbyval" -> Writes.BooleanWrites.writes(o.attbyval),
      "attalign" -> Writes.StringWrites.writes(o.attalign),
      "attstorage" -> Writes.StringWrites.writes(o.attstorage),
      "attcompression" -> Writes.StringWrites.writes(o.attcompression),
      "attnotnull" -> Writes.BooleanWrites.writes(o.attnotnull),
      "atthasdef" -> Writes.BooleanWrites.writes(o.atthasdef),
      "atthasmissing" -> Writes.BooleanWrites.writes(o.atthasmissing),
      "attidentity" -> Writes.StringWrites.writes(o.attidentity),
      "attgenerated" -> Writes.StringWrites.writes(o.attgenerated),
      "attisdropped" -> Writes.BooleanWrites.writes(o.attisdropped),
      "attislocal" -> Writes.BooleanWrites.writes(o.attislocal),
      "attinhcount" -> Writes.IntWrites.writes(o.attinhcount),
      "attcollation" -> Writes.LongWrites.writes(o.attcollation),
      "attacl" -> Writes.OptionWrites(Writes.arrayWrites[TypoAclItem](implicitly, TypoAclItem.writes)).writes(o.attacl),
      "attoptions" -> Writes.OptionWrites(Writes.arrayWrites[String](implicitly, Writes.StringWrites)).writes(o.attoptions),
      "attfdwoptions" -> Writes.OptionWrites(Writes.arrayWrites[String](implicitly, Writes.StringWrites)).writes(o.attfdwoptions),
      "attmissingval" -> Writes.OptionWrites(TypoAnyArray.writes).writes(o.attmissingval)
    ))
  )
}
