/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_cast

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgCastRow(
  oid: PgCastId,
  castsource: /* oid */ Long,
  casttarget: /* oid */ Long,
  castfunc: /* oid */ Long,
  castcontext: String,
  castmethod: String
)

object PgCastRow {
  implicit val reads: Reads[PgCastRow] = Reads[PgCastRow](json => JsResult.fromTry(
      Try(
        PgCastRow(
          oid = json.\("oid").as(PgCastId.reads),
          castsource = json.\("castsource").as(Reads.LongReads),
          casttarget = json.\("casttarget").as(Reads.LongReads),
          castfunc = json.\("castfunc").as(Reads.LongReads),
          castcontext = json.\("castcontext").as(Reads.StringReads),
          castmethod = json.\("castmethod").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgCastRow] = RowParser[PgCastRow] { row =>
    Success(
      PgCastRow(
        oid = row(idx + 0)(PgCastId.column),
        castsource = row(idx + 1)(Column.columnToLong),
        casttarget = row(idx + 2)(Column.columnToLong),
        castfunc = row(idx + 3)(Column.columnToLong),
        castcontext = row(idx + 4)(Column.columnToString),
        castmethod = row(idx + 5)(Column.columnToString)
      )
    )
  }
  implicit val writes: OWrites[PgCastRow] = OWrites[PgCastRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> PgCastId.writes.writes(o.oid),
      "castsource" -> Writes.LongWrites.writes(o.castsource),
      "casttarget" -> Writes.LongWrites.writes(o.casttarget),
      "castfunc" -> Writes.LongWrites.writes(o.castfunc),
      "castcontext" -> Writes.StringWrites.writes(o.castcontext),
      "castmethod" -> Writes.StringWrites.writes(o.castmethod)
    ))
  )
}
