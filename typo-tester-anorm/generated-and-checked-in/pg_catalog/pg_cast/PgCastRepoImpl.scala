/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_cast

import anorm.SqlStringInterpolation
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgCastRepoImpl extends PgCastRepo {
  override def delete(oid: PgCastId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_cast where oid = $oid".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgCastFields, PgCastRow] = {
    DeleteBuilder("pg_catalog.pg_cast", PgCastFields)
  }
  override def insert(unsaved: PgCastRow)(implicit c: Connection): PgCastRow = {
    SQL"""insert into pg_catalog.pg_cast(oid, castsource, casttarget, castfunc, castcontext, castmethod)
          values (${unsaved.oid}::oid, ${unsaved.castsource}::oid, ${unsaved.casttarget}::oid, ${unsaved.castfunc}::oid, ${unsaved.castcontext}::char, ${unsaved.castmethod}::char)
          returning oid, castsource, casttarget, castfunc, castcontext, castmethod
       """
      .executeInsert(PgCastRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgCastFields, PgCastRow] = {
    SelectBuilderSql("pg_catalog.pg_cast", PgCastFields, PgCastRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgCastRow] = {
    SQL"""select oid, castsource, casttarget, castfunc, castcontext, castmethod
          from pg_catalog.pg_cast
       """.as(PgCastRow.rowParser(1).*)
  }
  override def selectById(oid: PgCastId)(implicit c: Connection): Option[PgCastRow] = {
    SQL"""select oid, castsource, casttarget, castfunc, castcontext, castmethod
          from pg_catalog.pg_cast
          where oid = $oid
       """.as(PgCastRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgCastId])(implicit c: Connection): List[PgCastRow] = {
    SQL"""select oid, castsource, casttarget, castfunc, castcontext, castmethod
          from pg_catalog.pg_cast
          where oid = ANY($oids)
       """.as(PgCastRow.rowParser(1).*)
    
  }
  override def update(row: PgCastRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_cast
          set castsource = ${row.castsource}::oid,
              casttarget = ${row.casttarget}::oid,
              castfunc = ${row.castfunc}::oid,
              castcontext = ${row.castcontext}::char,
              castmethod = ${row.castmethod}::char
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgCastFields, PgCastRow] = {
    UpdateBuilder("pg_catalog.pg_cast", PgCastFields, PgCastRow.rowParser)
  }
  override def upsert(unsaved: PgCastRow)(implicit c: Connection): PgCastRow = {
    SQL"""insert into pg_catalog.pg_cast(oid, castsource, casttarget, castfunc, castcontext, castmethod)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.castsource}::oid,
            ${unsaved.casttarget}::oid,
            ${unsaved.castfunc}::oid,
            ${unsaved.castcontext}::char,
            ${unsaved.castmethod}::char
          )
          on conflict (oid)
          do update set
            castsource = EXCLUDED.castsource,
            casttarget = EXCLUDED.casttarget,
            castfunc = EXCLUDED.castfunc,
            castcontext = EXCLUDED.castcontext,
            castmethod = EXCLUDED.castmethod
          returning oid, castsource, casttarget, castfunc, castcontext, castmethod
       """
      .executeInsert(PgCastRow.rowParser(1).single)
    
  }
}
