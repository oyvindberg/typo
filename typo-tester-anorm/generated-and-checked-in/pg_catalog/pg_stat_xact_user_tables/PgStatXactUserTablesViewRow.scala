/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_xact_user_tables

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatXactUserTablesViewRow(
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.relid]] */
  relid: Option[/* oid */ Long],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.schemaname]] */
  schemaname: Option[String],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.relname]] */
  relname: Option[String],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.seqScan]] */
  seqScan: Option[Long],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.seqTupRead]] */
  seqTupRead: Option[Long],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.idxScan]] */
  idxScan: Option[Long],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.idxTupFetch]] */
  idxTupFetch: Option[Long],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.nTupIns]] */
  nTupIns: Option[Long],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.nTupUpd]] */
  nTupUpd: Option[Long],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.nTupDel]] */
  nTupDel: Option[Long],
  /** Points to [[pg_stat_xact_all_tables.PgStatXactAllTablesViewRow.nTupHotUpd]] */
  nTupHotUpd: Option[Long]
)

object PgStatXactUserTablesViewRow {
  implicit val reads: Reads[PgStatXactUserTablesViewRow] = Reads[PgStatXactUserTablesViewRow](json => JsResult.fromTry(
      Try(
        PgStatXactUserTablesViewRow(
          relid = json.\("relid").toOption.map(_.as[/* oid */ Long]),
          schemaname = json.\("schemaname").toOption.map(_.as[String]),
          relname = json.\("relname").toOption.map(_.as[String]),
          seqScan = json.\("seq_scan").toOption.map(_.as[Long]),
          seqTupRead = json.\("seq_tup_read").toOption.map(_.as[Long]),
          idxScan = json.\("idx_scan").toOption.map(_.as[Long]),
          idxTupFetch = json.\("idx_tup_fetch").toOption.map(_.as[Long]),
          nTupIns = json.\("n_tup_ins").toOption.map(_.as[Long]),
          nTupUpd = json.\("n_tup_upd").toOption.map(_.as[Long]),
          nTupDel = json.\("n_tup_del").toOption.map(_.as[Long]),
          nTupHotUpd = json.\("n_tup_hot_upd").toOption.map(_.as[Long])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatXactUserTablesViewRow] = RowParser[PgStatXactUserTablesViewRow] { row =>
    Success(
      PgStatXactUserTablesViewRow(
        relid = row[Option[/* oid */ Long]](idx + 0),
        schemaname = row[Option[String]](idx + 1),
        relname = row[Option[String]](idx + 2),
        seqScan = row[Option[Long]](idx + 3),
        seqTupRead = row[Option[Long]](idx + 4),
        idxScan = row[Option[Long]](idx + 5),
        idxTupFetch = row[Option[Long]](idx + 6),
        nTupIns = row[Option[Long]](idx + 7),
        nTupUpd = row[Option[Long]](idx + 8),
        nTupDel = row[Option[Long]](idx + 9),
        nTupHotUpd = row[Option[Long]](idx + 10)
      )
    )
  }
  implicit val writes: OWrites[PgStatXactUserTablesViewRow] = OWrites[PgStatXactUserTablesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "relid" -> Json.toJson(o.relid),
      "schemaname" -> Json.toJson(o.schemaname),
      "relname" -> Json.toJson(o.relname),
      "seq_scan" -> Json.toJson(o.seqScan),
      "seq_tup_read" -> Json.toJson(o.seqTupRead),
      "idx_scan" -> Json.toJson(o.idxScan),
      "idx_tup_fetch" -> Json.toJson(o.idxTupFetch),
      "n_tup_ins" -> Json.toJson(o.nTupIns),
      "n_tup_upd" -> Json.toJson(o.nTupUpd),
      "n_tup_del" -> Json.toJson(o.nTupDel),
      "n_tup_hot_upd" -> Json.toJson(o.nTupHotUpd)
    ))
  )
}
