/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_locks

import adventureworks.TypoXid
import anorm.RowParser
import anorm.Success
import java.time.OffsetDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgLocksViewRow(
  locktype: Option[String],
  database: Option[/* oid */ Long],
  relation: Option[/* oid */ Long],
  page: Option[Int],
  tuple: Option[Int],
  virtualxid: Option[String],
  transactionid: Option[TypoXid],
  classid: Option[/* oid */ Long],
  objid: Option[/* oid */ Long],
  objsubid: Option[Int],
  virtualtransaction: Option[String],
  pid: Option[Int],
  mode: Option[String],
  granted: Option[Boolean],
  fastpath: Option[Boolean],
  waitstart: Option[OffsetDateTime]
)

object PgLocksViewRow {
  def rowParser(idx: Int): RowParser[PgLocksViewRow] =
    RowParser[PgLocksViewRow] { row =>
      Success(
        PgLocksViewRow(
          locktype = row[Option[String]](idx + 0),
          database = row[Option[/* oid */ Long]](idx + 1),
          relation = row[Option[/* oid */ Long]](idx + 2),
          page = row[Option[Int]](idx + 3),
          tuple = row[Option[Int]](idx + 4),
          virtualxid = row[Option[String]](idx + 5),
          transactionid = row[Option[TypoXid]](idx + 6),
          classid = row[Option[/* oid */ Long]](idx + 7),
          objid = row[Option[/* oid */ Long]](idx + 8),
          objsubid = row[Option[Int]](idx + 9),
          virtualtransaction = row[Option[String]](idx + 10),
          pid = row[Option[Int]](idx + 11),
          mode = row[Option[String]](idx + 12),
          granted = row[Option[Boolean]](idx + 13),
          fastpath = row[Option[Boolean]](idx + 14),
          waitstart = row[Option[OffsetDateTime]](idx + 15)
        )
      )
    }
  implicit val oFormat: OFormat[PgLocksViewRow] = new OFormat[PgLocksViewRow]{
    override def writes(o: PgLocksViewRow): JsObject =
      Json.obj(
        "locktype" -> o.locktype,
        "database" -> o.database,
        "relation" -> o.relation,
        "page" -> o.page,
        "tuple" -> o.tuple,
        "virtualxid" -> o.virtualxid,
        "transactionid" -> o.transactionid,
        "classid" -> o.classid,
        "objid" -> o.objid,
        "objsubid" -> o.objsubid,
        "virtualtransaction" -> o.virtualtransaction,
        "pid" -> o.pid,
        "mode" -> o.mode,
        "granted" -> o.granted,
        "fastpath" -> o.fastpath,
        "waitstart" -> o.waitstart
      )
  
    override def reads(json: JsValue): JsResult[PgLocksViewRow] = {
      JsResult.fromTry(
        Try(
          PgLocksViewRow(
            locktype = json.\("locktype").toOption.map(_.as[String]),
            database = json.\("database").toOption.map(_.as[/* oid */ Long]),
            relation = json.\("relation").toOption.map(_.as[/* oid */ Long]),
            page = json.\("page").toOption.map(_.as[Int]),
            tuple = json.\("tuple").toOption.map(_.as[Int]),
            virtualxid = json.\("virtualxid").toOption.map(_.as[String]),
            transactionid = json.\("transactionid").toOption.map(_.as[TypoXid]),
            classid = json.\("classid").toOption.map(_.as[/* oid */ Long]),
            objid = json.\("objid").toOption.map(_.as[/* oid */ Long]),
            objsubid = json.\("objsubid").toOption.map(_.as[Int]),
            virtualtransaction = json.\("virtualtransaction").toOption.map(_.as[String]),
            pid = json.\("pid").toOption.map(_.as[Int]),
            mode = json.\("mode").toOption.map(_.as[String]),
            granted = json.\("granted").toOption.map(_.as[Boolean]),
            fastpath = json.\("fastpath").toOption.map(_.as[Boolean]),
            waitstart = json.\("waitstart").toOption.map(_.as[OffsetDateTime])
          )
        )
      )
    }
  }
}
