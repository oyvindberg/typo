/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_largeobject_metadata

import adventureworks.TypoAclItem
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgLargeobjectMetadataRow(
  oid: PgLargeobjectMetadataId,
  lomowner: /* oid */ Long,
  lomacl: Option[Array[TypoAclItem]]
)

object PgLargeobjectMetadataRow {
  def rowParser(idx: Int): RowParser[PgLargeobjectMetadataRow] =
    RowParser[PgLargeobjectMetadataRow] { row =>
      Success(
        PgLargeobjectMetadataRow(
          oid = row[PgLargeobjectMetadataId](idx + 0),
          lomowner = row[/* oid */ Long](idx + 1),
          lomacl = row[Option[Array[TypoAclItem]]](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[PgLargeobjectMetadataRow] = new OFormat[PgLargeobjectMetadataRow]{
    override def writes(o: PgLargeobjectMetadataRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "lomowner" -> o.lomowner,
        "lomacl" -> o.lomacl
      )
  
    override def reads(json: JsValue): JsResult[PgLargeobjectMetadataRow] = {
      JsResult.fromTry(
        Try(
          PgLargeobjectMetadataRow(
            oid = json.\("oid").as[PgLargeobjectMetadataId],
            lomowner = json.\("lomowner").as[/* oid */ Long],
            lomacl = json.\("lomacl").toOption.map(_.as[Array[TypoAclItem]])
          )
        )
      )
    }
  }
}
