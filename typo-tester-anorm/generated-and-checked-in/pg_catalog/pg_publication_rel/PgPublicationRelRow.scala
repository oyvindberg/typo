/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_publication_rel

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgPublicationRelRow(
  oid: PgPublicationRelId,
  prpubid: /* oid */ Long,
  prrelid: /* oid */ Long
)

object PgPublicationRelRow {
  def rowParser(idx: Int): RowParser[PgPublicationRelRow] =
    RowParser[PgPublicationRelRow] { row =>
      Success(
        PgPublicationRelRow(
          oid = row[PgPublicationRelId](idx + 0),
          prpubid = row[/* oid */ Long](idx + 1),
          prrelid = row[/* oid */ Long](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[PgPublicationRelRow] = new OFormat[PgPublicationRelRow]{
    override def writes(o: PgPublicationRelRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "prpubid" -> o.prpubid,
        "prrelid" -> o.prrelid
      )
  
    override def reads(json: JsValue): JsResult[PgPublicationRelRow] = {
      JsResult.fromTry(
        Try(
          PgPublicationRelRow(
            oid = json.\("oid").as[PgPublicationRelId],
            prpubid = json.\("prpubid").as[/* oid */ Long],
            prrelid = json.\("prrelid").as[/* oid */ Long]
          )
        )
      )
    }
  }
}
