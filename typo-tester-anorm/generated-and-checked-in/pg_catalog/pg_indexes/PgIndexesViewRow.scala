/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_indexes

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgIndexesViewRow(
  schemaname: Option[String],
  tablename: Option[String],
  indexname: Option[String],
  tablespace: Option[String],
  indexdef: Option[String]
)

object PgIndexesViewRow {
  def rowParser(idx: Int): RowParser[PgIndexesViewRow] =
    RowParser[PgIndexesViewRow] { row =>
      Success(
        PgIndexesViewRow(
          schemaname = row[Option[String]](idx + 0),
          tablename = row[Option[String]](idx + 1),
          indexname = row[Option[String]](idx + 2),
          tablespace = row[Option[String]](idx + 3),
          indexdef = row[Option[String]](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[PgIndexesViewRow] = new OFormat[PgIndexesViewRow]{
    override def writes(o: PgIndexesViewRow): JsObject =
      Json.obj(
        "schemaname" -> o.schemaname,
        "tablename" -> o.tablename,
        "indexname" -> o.indexname,
        "tablespace" -> o.tablespace,
        "indexdef" -> o.indexdef
      )
  
    override def reads(json: JsValue): JsResult[PgIndexesViewRow] = {
      JsResult.fromTry(
        Try(
          PgIndexesViewRow(
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            tablename = json.\("tablename").toOption.map(_.as[String]),
            indexname = json.\("indexname").toOption.map(_.as[String]),
            tablespace = json.\("tablespace").toOption.map(_.as[String]),
            indexdef = json.\("indexdef").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
