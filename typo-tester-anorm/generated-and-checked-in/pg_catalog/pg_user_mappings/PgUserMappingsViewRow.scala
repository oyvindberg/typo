/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_user_mappings

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgUserMappingsViewRow(
  umid: Option[/* oid */ Long],
  srvid: Option[/* oid */ Long],
  srvname: Option[String],
  umuser: Option[/* oid */ Long],
  usename: Option[String],
  umoptions: Option[Array[String]]
)

object PgUserMappingsViewRow {
  implicit val reads: Reads[PgUserMappingsViewRow] = Reads[PgUserMappingsViewRow](json => JsResult.fromTry(
      Try(
        PgUserMappingsViewRow(
          umid = json.\("umid").toOption.map(_.as[/* oid */ Long]),
          srvid = json.\("srvid").toOption.map(_.as[/* oid */ Long]),
          srvname = json.\("srvname").toOption.map(_.as[String]),
          umuser = json.\("umuser").toOption.map(_.as[/* oid */ Long]),
          usename = json.\("usename").toOption.map(_.as[String]),
          umoptions = json.\("umoptions").toOption.map(_.as[Array[String]])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgUserMappingsViewRow] = RowParser[PgUserMappingsViewRow] { row =>
    Success(
      PgUserMappingsViewRow(
        umid = row[Option[/* oid */ Long]](idx + 0),
        srvid = row[Option[/* oid */ Long]](idx + 1),
        srvname = row[Option[String]](idx + 2),
        umuser = row[Option[/* oid */ Long]](idx + 3),
        usename = row[Option[String]](idx + 4),
        umoptions = row[Option[Array[String]]](idx + 5)
      )
    )
  }
  implicit val writes: OWrites[PgUserMappingsViewRow] = OWrites[PgUserMappingsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "umid" -> Json.toJson(o.umid),
      "srvid" -> Json.toJson(o.srvid),
      "srvname" -> Json.toJson(o.srvname),
      "umuser" -> Json.toJson(o.umuser),
      "usename" -> Json.toJson(o.usename),
      "umoptions" -> Json.toJson(o.umoptions)
    ))
  )
}
