/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_largeobject

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgLargeobjectRow(
  loid: /* oid */ Long,
  pageno: Int,
  data: Array[Byte]
){
   val compositeId: PgLargeobjectId = PgLargeobjectId(loid, pageno)
 }

object PgLargeobjectRow {
  implicit val reads: Reads[PgLargeobjectRow] = Reads[PgLargeobjectRow](json => JsResult.fromTry(
      Try(
        PgLargeobjectRow(
          loid = json.\("loid").as(Reads.LongReads),
          pageno = json.\("pageno").as(Reads.IntReads),
          data = json.\("data").as(Reads.ArrayReads[Byte](Reads.ByteReads, implicitly))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgLargeobjectRow] = RowParser[PgLargeobjectRow] { row =>
    Success(
      PgLargeobjectRow(
        loid = row(idx + 0)(Column.columnToLong),
        pageno = row(idx + 1)(Column.columnToInt),
        data = row(idx + 2)(Column.columnToByteArray)
      )
    )
  }
  implicit val writes: OWrites[PgLargeobjectRow] = OWrites[PgLargeobjectRow](o =>
    new JsObject(ListMap[String, JsValue](
      "loid" -> Writes.LongWrites.writes(o.loid),
      "pageno" -> Writes.IntWrites.writes(o.pageno),
      "data" -> Writes.arrayWrites[Byte](implicitly, Writes.ByteWrites).writes(o.data)
    ))
  )
}
