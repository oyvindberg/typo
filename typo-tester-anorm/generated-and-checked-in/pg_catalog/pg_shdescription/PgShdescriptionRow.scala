/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_shdescription

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgShdescriptionRow(
  objoid: /* oid */ Long,
  classoid: /* oid */ Long,
  description: String
){
   val compositeId: PgShdescriptionId = PgShdescriptionId(objoid, classoid)
 }

object PgShdescriptionRow {
  def rowParser(idx: Int): RowParser[PgShdescriptionRow] =
    RowParser[PgShdescriptionRow] { row =>
      Success(
        PgShdescriptionRow(
          objoid = row[/* oid */ Long](idx + 0),
          classoid = row[/* oid */ Long](idx + 1),
          description = row[String](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[PgShdescriptionRow] = new OFormat[PgShdescriptionRow]{
    override def writes(o: PgShdescriptionRow): JsObject =
      Json.obj(
        "objoid" -> o.objoid,
        "classoid" -> o.classoid,
        "description" -> o.description
      )
  
    override def reads(json: JsValue): JsResult[PgShdescriptionRow] = {
      JsResult.fromTry(
        Try(
          PgShdescriptionRow(
            objoid = json.\("objoid").as[/* oid */ Long],
            classoid = json.\("classoid").as[/* oid */ Long],
            description = json.\("description").as[String]
          )
        )
      )
    }
  }
}
