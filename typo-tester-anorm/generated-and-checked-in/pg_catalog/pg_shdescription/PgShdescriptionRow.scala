/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_shdescription

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgShdescriptionRow(
  objoid: /* oid */ Long,
  classoid: /* oid */ Long,
  description: String
){
   val compositeId: PgShdescriptionId = PgShdescriptionId(objoid, classoid)
 }

object PgShdescriptionRow {
  implicit val reads: Reads[PgShdescriptionRow] = Reads[PgShdescriptionRow](json => JsResult.fromTry(
      Try(
        PgShdescriptionRow(
          objoid = json.\("objoid").as[/* oid */ Long],
          classoid = json.\("classoid").as[/* oid */ Long],
          description = json.\("description").as[String]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgShdescriptionRow] = RowParser[PgShdescriptionRow] { row =>
    Success(
      PgShdescriptionRow(
        objoid = row[/* oid */ Long](idx + 0),
        classoid = row[/* oid */ Long](idx + 1),
        description = row[String](idx + 2)
      )
    )
  }
  implicit val writes: OWrites[PgShdescriptionRow] = OWrites[PgShdescriptionRow](o =>
    new JsObject(ListMap[String, JsValue](
      "objoid" -> Json.toJson(o.objoid),
      "classoid" -> Json.toJson(o.classoid),
      "description" -> Json.toJson(o.description)
    ))
  )
}
