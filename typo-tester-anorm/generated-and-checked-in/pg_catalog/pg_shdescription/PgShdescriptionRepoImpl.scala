/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_shdescription

import anorm.SqlStringInterpolation
import java.sql.Connection

object PgShdescriptionRepoImpl extends PgShdescriptionRepo {
  override def delete(compositeId: PgShdescriptionId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_shdescription where objoid = ${compositeId.objoid} AND classoid = ${compositeId.classoid}".executeUpdate() > 0
  }
  override def insert(unsaved: PgShdescriptionRow)(implicit c: Connection): PgShdescriptionRow = {
    SQL"""insert into pg_catalog.pg_shdescription(objoid, classoid, description)
          values (${unsaved.objoid}::oid, ${unsaved.classoid}::oid, ${unsaved.description})
          returning objoid, classoid, description
       """
      .executeInsert(PgShdescriptionRow.rowParser(1).single)
    
  }
  override def selectAll(implicit c: Connection): List[PgShdescriptionRow] = {
    SQL"""select objoid, classoid, description
          from pg_catalog.pg_shdescription
       """.as(PgShdescriptionRow.rowParser(1).*)
  }
  override def selectById(compositeId: PgShdescriptionId)(implicit c: Connection): Option[PgShdescriptionRow] = {
    SQL"""select objoid, classoid, description
          from pg_catalog.pg_shdescription
          where objoid = ${compositeId.objoid} AND classoid = ${compositeId.classoid}
       """.as(PgShdescriptionRow.rowParser(1).singleOpt)
  }
  override def update(row: PgShdescriptionRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update pg_catalog.pg_shdescription
          set description = ${row.description}
          where objoid = ${compositeId.objoid} AND classoid = ${compositeId.classoid}
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: PgShdescriptionRow)(implicit c: Connection): PgShdescriptionRow = {
    SQL"""insert into pg_catalog.pg_shdescription(objoid, classoid, description)
          values (
            ${unsaved.objoid}::oid,
            ${unsaved.classoid}::oid,
            ${unsaved.description}
          )
          on conflict (objoid, classoid)
          do update set
            description = EXCLUDED.description
          returning objoid, classoid, description
       """
      .executeInsert(PgShdescriptionRow.rowParser(1).single)
    
  }
}
