/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_replication_slots

import anorm.RowParser
import anorm.Success
import java.time.OffsetDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatReplicationSlotsViewRow(
  /** Points to [[pg_replication_slots.PgReplicationSlotsViewRow.slotName]] */
  slotName: Option[String],
  spillTxns: Option[Long],
  spillCount: Option[Long],
  spillBytes: Option[Long],
  streamTxns: Option[Long],
  streamCount: Option[Long],
  streamBytes: Option[Long],
  totalTxns: Option[Long],
  totalBytes: Option[Long],
  statsReset: Option[OffsetDateTime]
)

object PgStatReplicationSlotsViewRow {
  def rowParser(idx: Int): RowParser[PgStatReplicationSlotsViewRow] =
    RowParser[PgStatReplicationSlotsViewRow] { row =>
      Success(
        PgStatReplicationSlotsViewRow(
          slotName = row[Option[String]](idx + 0),
          spillTxns = row[Option[Long]](idx + 1),
          spillCount = row[Option[Long]](idx + 2),
          spillBytes = row[Option[Long]](idx + 3),
          streamTxns = row[Option[Long]](idx + 4),
          streamCount = row[Option[Long]](idx + 5),
          streamBytes = row[Option[Long]](idx + 6),
          totalTxns = row[Option[Long]](idx + 7),
          totalBytes = row[Option[Long]](idx + 8),
          statsReset = row[Option[OffsetDateTime]](idx + 9)
        )
      )
    }
  implicit val oFormat: OFormat[PgStatReplicationSlotsViewRow] = new OFormat[PgStatReplicationSlotsViewRow]{
    override def writes(o: PgStatReplicationSlotsViewRow): JsObject =
      Json.obj(
        "slot_name" -> o.slotName,
        "spill_txns" -> o.spillTxns,
        "spill_count" -> o.spillCount,
        "spill_bytes" -> o.spillBytes,
        "stream_txns" -> o.streamTxns,
        "stream_count" -> o.streamCount,
        "stream_bytes" -> o.streamBytes,
        "total_txns" -> o.totalTxns,
        "total_bytes" -> o.totalBytes,
        "stats_reset" -> o.statsReset
      )
  
    override def reads(json: JsValue): JsResult[PgStatReplicationSlotsViewRow] = {
      JsResult.fromTry(
        Try(
          PgStatReplicationSlotsViewRow(
            slotName = json.\("slot_name").toOption.map(_.as[String]),
            spillTxns = json.\("spill_txns").toOption.map(_.as[Long]),
            spillCount = json.\("spill_count").toOption.map(_.as[Long]),
            spillBytes = json.\("spill_bytes").toOption.map(_.as[Long]),
            streamTxns = json.\("stream_txns").toOption.map(_.as[Long]),
            streamCount = json.\("stream_count").toOption.map(_.as[Long]),
            streamBytes = json.\("stream_bytes").toOption.map(_.as[Long]),
            totalTxns = json.\("total_txns").toOption.map(_.as[Long]),
            totalBytes = json.\("total_bytes").toOption.map(_.as[Long]),
            statsReset = json.\("stats_reset").toOption.map(_.as[OffsetDateTime])
          )
        )
      )
    }
  }
}
