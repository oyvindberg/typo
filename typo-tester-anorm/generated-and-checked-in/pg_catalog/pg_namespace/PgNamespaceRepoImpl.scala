/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_namespace

import anorm.SqlStringInterpolation
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgNamespaceRepoImpl extends PgNamespaceRepo {
  override def delete(oid: PgNamespaceId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_namespace where oid = $oid".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[PgNamespaceFields, PgNamespaceRow] = {
    DeleteBuilder("pg_catalog.pg_namespace", PgNamespaceFields)
  }
  override def insert(unsaved: PgNamespaceRow)(implicit c: Connection): PgNamespaceRow = {
    SQL"""insert into pg_catalog.pg_namespace(oid, nspname, nspowner, nspacl)
          values (${unsaved.oid}::oid, ${unsaved.nspname}::name, ${unsaved.nspowner}::oid, ${unsaved.nspacl}::_aclitem)
          returning oid, nspname, nspowner, nspacl
       """
      .executeInsert(PgNamespaceRow.rowParser(1).single)
    
  }
  override def select: SelectBuilder[PgNamespaceFields, PgNamespaceRow] = {
    SelectBuilderSql("pg_catalog.pg_namespace", PgNamespaceFields, PgNamespaceRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[PgNamespaceRow] = {
    SQL"""select oid, nspname, nspowner, nspacl
          from pg_catalog.pg_namespace
       """.as(PgNamespaceRow.rowParser(1).*)
  }
  override def selectById(oid: PgNamespaceId)(implicit c: Connection): Option[PgNamespaceRow] = {
    SQL"""select oid, nspname, nspowner, nspacl
          from pg_catalog.pg_namespace
          where oid = $oid
       """.as(PgNamespaceRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgNamespaceId])(implicit c: Connection): List[PgNamespaceRow] = {
    SQL"""select oid, nspname, nspowner, nspacl
          from pg_catalog.pg_namespace
          where oid = ANY($oids)
       """.as(PgNamespaceRow.rowParser(1).*)
    
  }
  override def update(row: PgNamespaceRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_namespace
          set nspname = ${row.nspname}::name,
              nspowner = ${row.nspowner}::oid,
              nspacl = ${row.nspacl}::_aclitem
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[PgNamespaceFields, PgNamespaceRow] = {
    UpdateBuilder("pg_catalog.pg_namespace", PgNamespaceFields, PgNamespaceRow.rowParser)
  }
  override def upsert(unsaved: PgNamespaceRow)(implicit c: Connection): PgNamespaceRow = {
    SQL"""insert into pg_catalog.pg_namespace(oid, nspname, nspowner, nspacl)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.nspname}::name,
            ${unsaved.nspowner}::oid,
            ${unsaved.nspacl}::_aclitem
          )
          on conflict (oid)
          do update set
            nspname = EXCLUDED.nspname,
            nspowner = EXCLUDED.nspowner,
            nspacl = EXCLUDED.nspacl
          returning oid, nspname, nspowner, nspacl
       """
      .executeInsert(PgNamespaceRow.rowParser(1).single)
    
  }
}
