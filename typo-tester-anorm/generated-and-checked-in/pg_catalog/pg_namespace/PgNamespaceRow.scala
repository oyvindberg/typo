/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_namespace

import adventureworks.TypoAclItem
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgNamespaceRow(
  oid: PgNamespaceId,
  nspname: String,
  nspowner: /* oid */ Long,
  nspacl: Option[Array[TypoAclItem]]
)

object PgNamespaceRow {
  def rowParser(idx: Int): RowParser[PgNamespaceRow] =
    RowParser[PgNamespaceRow] { row =>
      Success(
        PgNamespaceRow(
          oid = row[PgNamespaceId](idx + 0),
          nspname = row[String](idx + 1),
          nspowner = row[/* oid */ Long](idx + 2),
          nspacl = row[Option[Array[TypoAclItem]]](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[PgNamespaceRow] = new OFormat[PgNamespaceRow]{
    override def writes(o: PgNamespaceRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "nspname" -> o.nspname,
        "nspowner" -> o.nspowner,
        "nspacl" -> o.nspacl
      )
  
    override def reads(json: JsValue): JsResult[PgNamespaceRow] = {
      JsResult.fromTry(
        Try(
          PgNamespaceRow(
            oid = json.\("oid").as[PgNamespaceId],
            nspname = json.\("nspname").as[String],
            nspowner = json.\("nspowner").as[/* oid */ Long],
            nspacl = json.\("nspacl").toOption.map(_.as[Array[TypoAclItem]])
          )
        )
      )
    }
  }
}
