/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_xact_user_functions

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgStatXactUserFunctionsViewRow(
  funcid: Option[/* oid */ Long],
  schemaname: Option[String],
  funcname: Option[String],
  calls: Option[Long],
  totalTime: Option[Double],
  selfTime: Option[Double]
)

object PgStatXactUserFunctionsViewRow {
  def rowParser(idx: Int): RowParser[PgStatXactUserFunctionsViewRow] =
    RowParser[PgStatXactUserFunctionsViewRow] { row =>
      Success(
        PgStatXactUserFunctionsViewRow(
          funcid = row[Option[/* oid */ Long]](idx + 0),
          schemaname = row[Option[String]](idx + 1),
          funcname = row[Option[String]](idx + 2),
          calls = row[Option[Long]](idx + 3),
          totalTime = row[Option[Double]](idx + 4),
          selfTime = row[Option[Double]](idx + 5)
        )
      )
    }
  implicit val oFormat: OFormat[PgStatXactUserFunctionsViewRow] = new OFormat[PgStatXactUserFunctionsViewRow]{
    override def writes(o: PgStatXactUserFunctionsViewRow): JsObject =
      Json.obj(
        "funcid" -> o.funcid,
        "schemaname" -> o.schemaname,
        "funcname" -> o.funcname,
        "calls" -> o.calls,
        "total_time" -> o.totalTime,
        "self_time" -> o.selfTime
      )
  
    override def reads(json: JsValue): JsResult[PgStatXactUserFunctionsViewRow] = {
      JsResult.fromTry(
        Try(
          PgStatXactUserFunctionsViewRow(
            funcid = json.\("funcid").toOption.map(_.as[/* oid */ Long]),
            schemaname = json.\("schemaname").toOption.map(_.as[String]),
            funcname = json.\("funcname").toOption.map(_.as[String]),
            calls = json.\("calls").toOption.map(_.as[Long]),
            totalTime = json.\("total_time").toOption.map(_.as[Double]),
            selfTime = json.\("self_time").toOption.map(_.as[Double])
          )
        )
      )
    }
  }
}
