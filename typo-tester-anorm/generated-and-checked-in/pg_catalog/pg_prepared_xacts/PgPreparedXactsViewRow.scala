/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_prepared_xacts

import adventureworks.TypoXid
import anorm.RowParser
import anorm.Success
import java.time.OffsetDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgPreparedXactsViewRow(
  transaction: Option[TypoXid],
  gid: Option[String],
  prepared: Option[OffsetDateTime],
  owner: Option[String],
  database: Option[String]
)

object PgPreparedXactsViewRow {
  def rowParser(idx: Int): RowParser[PgPreparedXactsViewRow] =
    RowParser[PgPreparedXactsViewRow] { row =>
      Success(
        PgPreparedXactsViewRow(
          transaction = row[Option[TypoXid]](idx + 0),
          gid = row[Option[String]](idx + 1),
          prepared = row[Option[OffsetDateTime]](idx + 2),
          owner = row[Option[String]](idx + 3),
          database = row[Option[String]](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[PgPreparedXactsViewRow] = new OFormat[PgPreparedXactsViewRow]{
    override def writes(o: PgPreparedXactsViewRow): JsObject =
      Json.obj(
        "transaction" -> o.transaction,
        "gid" -> o.gid,
        "prepared" -> o.prepared,
        "owner" -> o.owner,
        "database" -> o.database
      )
  
    override def reads(json: JsValue): JsResult[PgPreparedXactsViewRow] = {
      JsResult.fromTry(
        Try(
          PgPreparedXactsViewRow(
            transaction = json.\("transaction").toOption.map(_.as[TypoXid]),
            gid = json.\("gid").toOption.map(_.as[String]),
            prepared = json.\("prepared").toOption.map(_.as[OffsetDateTime]),
            owner = json.\("owner").toOption.map(_.as[String]),
            database = json.\("database").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
