/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_operator

import adventureworks.TypoRegproc
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgOperatorRow(
  oid: PgOperatorId,
  oprname: String,
  oprnamespace: /* oid */ Long,
  oprowner: /* oid */ Long,
  oprkind: String,
  oprcanmerge: Boolean,
  oprcanhash: Boolean,
  oprleft: /* oid */ Long,
  oprright: /* oid */ Long,
  oprresult: /* oid */ Long,
  oprcom: /* oid */ Long,
  oprnegate: /* oid */ Long,
  oprcode: TypoRegproc,
  oprrest: TypoRegproc,
  oprjoin: TypoRegproc
)

object PgOperatorRow {
  implicit val reads: Reads[PgOperatorRow] = Reads[PgOperatorRow](json => JsResult.fromTry(
      Try(
        PgOperatorRow(
          oid = json.\("oid").as[PgOperatorId],
          oprname = json.\("oprname").as[String],
          oprnamespace = json.\("oprnamespace").as[/* oid */ Long],
          oprowner = json.\("oprowner").as[/* oid */ Long],
          oprkind = json.\("oprkind").as[String],
          oprcanmerge = json.\("oprcanmerge").as[Boolean],
          oprcanhash = json.\("oprcanhash").as[Boolean],
          oprleft = json.\("oprleft").as[/* oid */ Long],
          oprright = json.\("oprright").as[/* oid */ Long],
          oprresult = json.\("oprresult").as[/* oid */ Long],
          oprcom = json.\("oprcom").as[/* oid */ Long],
          oprnegate = json.\("oprnegate").as[/* oid */ Long],
          oprcode = json.\("oprcode").as[TypoRegproc],
          oprrest = json.\("oprrest").as[TypoRegproc],
          oprjoin = json.\("oprjoin").as[TypoRegproc]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgOperatorRow] = RowParser[PgOperatorRow] { row =>
    Success(
      PgOperatorRow(
        oid = row[PgOperatorId](idx + 0),
        oprname = row[String](idx + 1),
        oprnamespace = row[/* oid */ Long](idx + 2),
        oprowner = row[/* oid */ Long](idx + 3),
        oprkind = row[String](idx + 4),
        oprcanmerge = row[Boolean](idx + 5),
        oprcanhash = row[Boolean](idx + 6),
        oprleft = row[/* oid */ Long](idx + 7),
        oprright = row[/* oid */ Long](idx + 8),
        oprresult = row[/* oid */ Long](idx + 9),
        oprcom = row[/* oid */ Long](idx + 10),
        oprnegate = row[/* oid */ Long](idx + 11),
        oprcode = row[TypoRegproc](idx + 12),
        oprrest = row[TypoRegproc](idx + 13),
        oprjoin = row[TypoRegproc](idx + 14)
      )
    )
  }
  implicit val writes: OWrites[PgOperatorRow] = OWrites[PgOperatorRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "oprname" -> Json.toJson(o.oprname),
      "oprnamespace" -> Json.toJson(o.oprnamespace),
      "oprowner" -> Json.toJson(o.oprowner),
      "oprkind" -> Json.toJson(o.oprkind),
      "oprcanmerge" -> Json.toJson(o.oprcanmerge),
      "oprcanhash" -> Json.toJson(o.oprcanhash),
      "oprleft" -> Json.toJson(o.oprleft),
      "oprright" -> Json.toJson(o.oprright),
      "oprresult" -> Json.toJson(o.oprresult),
      "oprcom" -> Json.toJson(o.oprcom),
      "oprnegate" -> Json.toJson(o.oprnegate),
      "oprcode" -> Json.toJson(o.oprcode),
      "oprrest" -> Json.toJson(o.oprrest),
      "oprjoin" -> Json.toJson(o.oprjoin)
    ))
  )
}
