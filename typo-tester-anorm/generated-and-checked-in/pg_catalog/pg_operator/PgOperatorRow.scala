/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_operator

import adventureworks.TypoRegproc
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgOperatorRow(
  oid: PgOperatorId,
  oprname: String,
  oprnamespace: /* oid */ Long,
  oprowner: /* oid */ Long,
  oprkind: String,
  oprcanmerge: Boolean,
  oprcanhash: Boolean,
  oprleft: /* oid */ Long,
  oprright: /* oid */ Long,
  oprresult: /* oid */ Long,
  oprcom: /* oid */ Long,
  oprnegate: /* oid */ Long,
  oprcode: TypoRegproc,
  oprrest: TypoRegproc,
  oprjoin: TypoRegproc
)

object PgOperatorRow {
  implicit val reads: Reads[PgOperatorRow] = Reads[PgOperatorRow](json => JsResult.fromTry(
      Try(
        PgOperatorRow(
          oid = json.\("oid").as(PgOperatorId.reads),
          oprname = json.\("oprname").as(Reads.StringReads),
          oprnamespace = json.\("oprnamespace").as(Reads.LongReads),
          oprowner = json.\("oprowner").as(Reads.LongReads),
          oprkind = json.\("oprkind").as(Reads.StringReads),
          oprcanmerge = json.\("oprcanmerge").as(Reads.BooleanReads),
          oprcanhash = json.\("oprcanhash").as(Reads.BooleanReads),
          oprleft = json.\("oprleft").as(Reads.LongReads),
          oprright = json.\("oprright").as(Reads.LongReads),
          oprresult = json.\("oprresult").as(Reads.LongReads),
          oprcom = json.\("oprcom").as(Reads.LongReads),
          oprnegate = json.\("oprnegate").as(Reads.LongReads),
          oprcode = json.\("oprcode").as(TypoRegproc.reads),
          oprrest = json.\("oprrest").as(TypoRegproc.reads),
          oprjoin = json.\("oprjoin").as(TypoRegproc.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgOperatorRow] = RowParser[PgOperatorRow] { row =>
    Success(
      PgOperatorRow(
        oid = row(idx + 0)(PgOperatorId.column),
        oprname = row(idx + 1)(Column.columnToString),
        oprnamespace = row(idx + 2)(Column.columnToLong),
        oprowner = row(idx + 3)(Column.columnToLong),
        oprkind = row(idx + 4)(Column.columnToString),
        oprcanmerge = row(idx + 5)(Column.columnToBoolean),
        oprcanhash = row(idx + 6)(Column.columnToBoolean),
        oprleft = row(idx + 7)(Column.columnToLong),
        oprright = row(idx + 8)(Column.columnToLong),
        oprresult = row(idx + 9)(Column.columnToLong),
        oprcom = row(idx + 10)(Column.columnToLong),
        oprnegate = row(idx + 11)(Column.columnToLong),
        oprcode = row(idx + 12)(TypoRegproc.column),
        oprrest = row(idx + 13)(TypoRegproc.column),
        oprjoin = row(idx + 14)(TypoRegproc.column)
      )
    )
  }
  implicit val writes: OWrites[PgOperatorRow] = OWrites[PgOperatorRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> PgOperatorId.writes.writes(o.oid),
      "oprname" -> Writes.StringWrites.writes(o.oprname),
      "oprnamespace" -> Writes.LongWrites.writes(o.oprnamespace),
      "oprowner" -> Writes.LongWrites.writes(o.oprowner),
      "oprkind" -> Writes.StringWrites.writes(o.oprkind),
      "oprcanmerge" -> Writes.BooleanWrites.writes(o.oprcanmerge),
      "oprcanhash" -> Writes.BooleanWrites.writes(o.oprcanhash),
      "oprleft" -> Writes.LongWrites.writes(o.oprleft),
      "oprright" -> Writes.LongWrites.writes(o.oprright),
      "oprresult" -> Writes.LongWrites.writes(o.oprresult),
      "oprcom" -> Writes.LongWrites.writes(o.oprcom),
      "oprnegate" -> Writes.LongWrites.writes(o.oprnegate),
      "oprcode" -> TypoRegproc.writes.writes(o.oprcode),
      "oprrest" -> TypoRegproc.writes.writes(o.oprrest),
      "oprjoin" -> TypoRegproc.writes.writes(o.oprjoin)
    ))
  )
}
