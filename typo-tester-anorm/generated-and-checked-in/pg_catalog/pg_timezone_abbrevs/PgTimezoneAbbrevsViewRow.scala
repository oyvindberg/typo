/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_timezone_abbrevs

import adventureworks.TypoInterval
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgTimezoneAbbrevsViewRow(
  abbrev: Option[String],
  utcOffset: Option[TypoInterval],
  isDst: Option[Boolean]
)

object PgTimezoneAbbrevsViewRow {
  def rowParser(idx: Int): RowParser[PgTimezoneAbbrevsViewRow] =
    RowParser[PgTimezoneAbbrevsViewRow] { row =>
      Success(
        PgTimezoneAbbrevsViewRow(
          abbrev = row[Option[String]](idx + 0),
          utcOffset = row[Option[TypoInterval]](idx + 1),
          isDst = row[Option[Boolean]](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[PgTimezoneAbbrevsViewRow] = new OFormat[PgTimezoneAbbrevsViewRow]{
    override def writes(o: PgTimezoneAbbrevsViewRow): JsObject =
      Json.obj(
        "abbrev" -> o.abbrev,
        "utc_offset" -> o.utcOffset,
        "is_dst" -> o.isDst
      )
  
    override def reads(json: JsValue): JsResult[PgTimezoneAbbrevsViewRow] = {
      JsResult.fromTry(
        Try(
          PgTimezoneAbbrevsViewRow(
            abbrev = json.\("abbrev").toOption.map(_.as[String]),
            utcOffset = json.\("utc_offset").toOption.map(_.as[TypoInterval]),
            isDst = json.\("is_dst").toOption.map(_.as[Boolean])
          )
        )
      )
    }
  }
}
