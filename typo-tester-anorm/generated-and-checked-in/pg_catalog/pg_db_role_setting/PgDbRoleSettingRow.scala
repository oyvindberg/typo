/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_db_role_setting

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgDbRoleSettingRow(
  setdatabase: /* oid */ Long,
  setrole: /* oid */ Long,
  setconfig: Option[Array[String]]
){
   val compositeId: PgDbRoleSettingId = PgDbRoleSettingId(setdatabase, setrole)
 }

object PgDbRoleSettingRow {
  def rowParser(idx: Int): RowParser[PgDbRoleSettingRow] =
    RowParser[PgDbRoleSettingRow] { row =>
      Success(
        PgDbRoleSettingRow(
          setdatabase = row[/* oid */ Long](idx + 0),
          setrole = row[/* oid */ Long](idx + 1),
          setconfig = row[Option[Array[String]]](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[PgDbRoleSettingRow] = new OFormat[PgDbRoleSettingRow]{
    override def writes(o: PgDbRoleSettingRow): JsObject =
      Json.obj(
        "setdatabase" -> o.setdatabase,
        "setrole" -> o.setrole,
        "setconfig" -> o.setconfig
      )
  
    override def reads(json: JsValue): JsResult[PgDbRoleSettingRow] = {
      JsResult.fromTry(
        Try(
          PgDbRoleSettingRow(
            setdatabase = json.\("setdatabase").as[/* oid */ Long],
            setrole = json.\("setrole").as[/* oid */ Long],
            setconfig = json.\("setconfig").toOption.map(_.as[Array[String]])
          )
        )
      )
    }
  }
}
