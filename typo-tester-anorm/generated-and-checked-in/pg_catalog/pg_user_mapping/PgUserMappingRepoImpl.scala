/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_user_mapping

import anorm.SqlStringInterpolation
import java.sql.Connection

object PgUserMappingRepoImpl extends PgUserMappingRepo {
  override def delete(oid: PgUserMappingId)(implicit c: Connection): Boolean = {
    SQL"delete from pg_catalog.pg_user_mapping where oid = $oid".executeUpdate() > 0
  }
  override def insert(unsaved: PgUserMappingRow)(implicit c: Connection): PgUserMappingRow = {
    SQL"""insert into pg_catalog.pg_user_mapping(oid, umuser, umserver, umoptions)
          values (${unsaved.oid}::oid, ${unsaved.umuser}::oid, ${unsaved.umserver}::oid, ${unsaved.umoptions}::_text)
          returning oid, umuser, umserver, umoptions
       """
      .executeInsert(PgUserMappingRow.rowParser(1).single)
    
  }
  override def selectAll(implicit c: Connection): List[PgUserMappingRow] = {
    SQL"""select oid, umuser, umserver, umoptions
          from pg_catalog.pg_user_mapping
       """.as(PgUserMappingRow.rowParser(1).*)
  }
  override def selectById(oid: PgUserMappingId)(implicit c: Connection): Option[PgUserMappingRow] = {
    SQL"""select oid, umuser, umserver, umoptions
          from pg_catalog.pg_user_mapping
          where oid = $oid
       """.as(PgUserMappingRow.rowParser(1).singleOpt)
  }
  override def selectByIds(oids: Array[PgUserMappingId])(implicit c: Connection): List[PgUserMappingRow] = {
    SQL"""select oid, umuser, umserver, umoptions
          from pg_catalog.pg_user_mapping
          where oid = ANY($oids)
       """.as(PgUserMappingRow.rowParser(1).*)
    
  }
  override def update(row: PgUserMappingRow)(implicit c: Connection): Boolean = {
    val oid = row.oid
    SQL"""update pg_catalog.pg_user_mapping
          set umuser = ${row.umuser}::oid,
              umserver = ${row.umserver}::oid,
              umoptions = ${row.umoptions}::_text
          where oid = $oid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: PgUserMappingRow)(implicit c: Connection): PgUserMappingRow = {
    SQL"""insert into pg_catalog.pg_user_mapping(oid, umuser, umserver, umoptions)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.umuser}::oid,
            ${unsaved.umserver}::oid,
            ${unsaved.umoptions}::_text
          )
          on conflict (oid)
          do update set
            umuser = EXCLUDED.umuser,
            umserver = EXCLUDED.umserver,
            umoptions = EXCLUDED.umoptions
          returning oid, umuser, umserver, umoptions
       """
      .executeInsert(PgUserMappingRow.rowParser(1).single)
    
  }
}
