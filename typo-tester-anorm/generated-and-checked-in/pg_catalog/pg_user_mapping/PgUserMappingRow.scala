/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_user_mapping

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgUserMappingRow(
  oid: PgUserMappingId,
  umuser: /* oid */ Long,
  umserver: /* oid */ Long,
  umoptions: Option[Array[String]]
)

object PgUserMappingRow {
  implicit val reads: Reads[PgUserMappingRow] = Reads[PgUserMappingRow](json => JsResult.fromTry(
      Try(
        PgUserMappingRow(
          oid = json.\("oid").as[PgUserMappingId],
          umuser = json.\("umuser").as[/* oid */ Long],
          umserver = json.\("umserver").as[/* oid */ Long],
          umoptions = json.\("umoptions").toOption.map(_.as[Array[String]])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgUserMappingRow] = RowParser[PgUserMappingRow] { row =>
    Success(
      PgUserMappingRow(
        oid = row[PgUserMappingId](idx + 0),
        umuser = row[/* oid */ Long](idx + 1),
        umserver = row[/* oid */ Long](idx + 2),
        umoptions = row[Option[Array[String]]](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[PgUserMappingRow] = OWrites[PgUserMappingRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "umuser" -> Json.toJson(o.umuser),
      "umserver" -> Json.toJson(o.umserver),
      "umoptions" -> Json.toJson(o.umoptions)
    ))
  )
}
