/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import java.util.HashMap
import org.postgresql.jdbc.PgArray
import play.api.libs.json.Reads
import play.api.libs.json.Writes

/** The text representation of an hstore, used for input and output, includes zero or more key => value pairs separated by commas */
case class TypoHStore(value: Map[String, String])

object TypoHStore {
  implicit val arrayColumn: Column[Array[TypoHStore]] = Column.nonNull[Array[TypoHStore]]((v1: Any, _) =>
    v1 match {
        case v: PgArray =>
         v.getArray match {
           case v: Array[?] =>
             Right(v.map(v => {
                                val b = Map.newBuilder[String, String]
                                v.asInstanceOf[java.util.Map[?, ?]].forEach { case (k, v) => b += k.asInstanceOf[String] -> v.asInstanceOf[String]}
                                TypoHStore(b.result())
                              }))
           case other => Left(TypeDoesNotMatch(s"Expected one-dimensional array from JDBC to produce an array of TypoHStore, got ${other.getClass.getName}"))
         }
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit val arrayParameterMetaData: ParameterMetaData[Array[TypoHStore]] = new ParameterMetaData[Array[TypoHStore]] {
    override def sqlType: String = "_hstore"
    override def jdbcType: Int = Types.ARRAY
  }
  implicit val arrayToStatement: ToStatement[Array[TypoHStore]] = ToStatement[Array[TypoHStore]]((s, index, v) => s.setArray(index, s.getConnection.createArrayOf("hstore", v.map(v => {
                                                                                                                         val b = new HashMap[String, String]
                                                                                                                         v.value.foreach { case (k, v) => b.put(k, v)}
                                                                                                                         b
                                                                                                                       }))))
  implicit val column: Column[TypoHStore] = Column.nonNull[TypoHStore]((v1: Any, _) =>
    v1 match {
      case v: java.util.Map[?, ?] => Right({
                                             val b = Map.newBuilder[String, String]
                                             v.forEach { case (k, v) => b += k.asInstanceOf[String] -> v.asInstanceOf[String]}
                                             TypoHStore(b.result())
                                           })
      case other => Left(TypeDoesNotMatch(s"Expected instance of java.util.Map[?, ?], got ${other.getClass.getName}"))
    }
  )
  implicit def ordering(implicit O0: Ordering[Map[String, String]]): Ordering[TypoHStore] = Ordering.by(_.value)
  implicit val parameterMetadata: ParameterMetaData[TypoHStore] = new ParameterMetaData[TypoHStore] {
    override def sqlType: String = "hstore"
    override def jdbcType: Int = Types.OTHER
  }
  implicit val reads: Reads[TypoHStore] = implicitly[Reads[Map[String, String]]].map(TypoHStore.apply)
  implicit val toStatement: ToStatement[TypoHStore] = ToStatement[TypoHStore]((s, index, v) => s.setObject(index, {
                                                                val b = new HashMap[String, String]
                                                                v.value.foreach { case (k, v) => b.put(k, v)}
                                                                b
                                                              }))
  implicit val writes: Writes[TypoHStore] = implicitly[Writes[Map[String, String]]].contramap(_.value)
}
