/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package ppp

import adventureworks.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.production.productphoto.ProductphotoId
import adventureworks.public.Flag
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PppViewRow(
  /** Points to [[production.productproductphoto.ProductproductphotoRow.productid]] */
  productid: Option[ProductId],
  /** Points to [[production.productproductphoto.ProductproductphotoRow.productphotoid]] */
  productphotoid: Option[ProductphotoId],
  /** Points to [[production.productproductphoto.ProductproductphotoRow.primary]] */
  primary: Flag,
  /** Points to [[production.productproductphoto.ProductproductphotoRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object PppViewRow {
  implicit val reads: Reads[PppViewRow] = Reads[PppViewRow](json => JsResult.fromTry(
      Try(
        PppViewRow(
          productid = json.\("productid").toOption.map(_.as[ProductId]),
          productphotoid = json.\("productphotoid").toOption.map(_.as[ProductphotoId]),
          primary = json.\("primary").as[Flag],
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PppViewRow] = RowParser[PppViewRow] { row =>
    Success(
      PppViewRow(
        productid = row[Option[ProductId]](idx + 0),
        productphotoid = row[Option[ProductphotoId]](idx + 1),
        primary = row[Flag](idx + 2),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[PppViewRow] = OWrites[PppViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "productid" -> Json.toJson(o.productid),
      "productphotoid" -> Json.toJson(o.productphotoid),
      "primary" -> Json.toJson(o.primary),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
