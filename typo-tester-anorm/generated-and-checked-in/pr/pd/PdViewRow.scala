/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pd

import adventureworks.TypoLocalDateTime
import adventureworks.production.productdescription.ProductdescriptionId
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PdViewRow(
  id: Option[Int],
  /** Points to [[production.productdescription.ProductdescriptionRow.productdescriptionid]] */
  productdescriptionid: Option[ProductdescriptionId],
  /** Points to [[production.productdescription.ProductdescriptionRow.description]] */
  description: Option[/* max 400 chars */ String],
  /** Points to [[production.productdescription.ProductdescriptionRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[production.productdescription.ProductdescriptionRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object PdViewRow {
  implicit val reads: Reads[PdViewRow] = Reads[PdViewRow](json => JsResult.fromTry(
      Try(
        PdViewRow(
          id = json.\("id").toOption.map(_.as[Int]),
          productdescriptionid = json.\("productdescriptionid").toOption.map(_.as[ProductdescriptionId]),
          description = json.\("description").toOption.map(_.as[/* max 400 chars */ String]),
          rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PdViewRow] = RowParser[PdViewRow] { row =>
    Success(
      PdViewRow(
        id = row[Option[Int]](idx + 0),
        productdescriptionid = row[Option[ProductdescriptionId]](idx + 1),
        description = row[Option[/* max 400 chars */ String]](idx + 2),
        rowguid = row[Option[UUID]](idx + 3),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 4)
      )
    )
  }
  implicit val writes: OWrites[PdViewRow] = OWrites[PdViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Json.toJson(o.id),
      "productdescriptionid" -> Json.toJson(o.productdescriptionid),
      "description" -> Json.toJson(o.description),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
