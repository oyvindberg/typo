/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package l

import adventureworks.TypoLocalDateTime
import adventureworks.production.location.LocationId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class LViewRow(
  id: Option[Int],
  /** Points to [[production.location.LocationRow.locationid]] */
  locationid: Option[LocationId],
  /** Points to [[production.location.LocationRow.name]] */
  name: Option[Name],
  /** Points to [[production.location.LocationRow.costrate]] */
  costrate: Option[BigDecimal],
  /** Points to [[production.location.LocationRow.availability]] */
  availability: Option[BigDecimal],
  /** Points to [[production.location.LocationRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object LViewRow {
  implicit val reads: Reads[LViewRow] = Reads[LViewRow](json => JsResult.fromTry(
      Try(
        LViewRow(
          id = json.\("id").toOption.map(_.as[Int]),
          locationid = json.\("locationid").toOption.map(_.as[LocationId]),
          name = json.\("name").toOption.map(_.as[Name]),
          costrate = json.\("costrate").toOption.map(_.as[BigDecimal]),
          availability = json.\("availability").toOption.map(_.as[BigDecimal]),
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[LViewRow] = RowParser[LViewRow] { row =>
    Success(
      LViewRow(
        id = row[Option[Int]](idx + 0),
        locationid = row[Option[LocationId]](idx + 1),
        name = row[Option[Name]](idx + 2),
        costrate = row[Option[BigDecimal]](idx + 3),
        availability = row[Option[BigDecimal]](idx + 4),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 5)
      )
    )
  }
  implicit val writes: OWrites[LViewRow] = OWrites[LViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Json.toJson(o.id),
      "locationid" -> Json.toJson(o.locationid),
      "name" -> Json.toJson(o.name),
      "costrate" -> Json.toJson(o.costrate),
      "availability" -> Json.toJson(o.availability),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
