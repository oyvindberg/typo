/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package l

import adventureworks.production.location.LocationId
import adventureworks.public.Name
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class LViewRow(
  id: Option[Int],
  /** Points to [[production.location.LocationRow.locationid]] */
  locationid: Option[LocationId],
  /** Points to [[production.location.LocationRow.name]] */
  name: Option[Name],
  /** Points to [[production.location.LocationRow.costrate]] */
  costrate: Option[BigDecimal],
  /** Points to [[production.location.LocationRow.availability]] */
  availability: Option[BigDecimal],
  /** Points to [[production.location.LocationRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object LViewRow {
  implicit val oFormat: OFormat[LViewRow] = new OFormat[LViewRow]{
    override def writes(o: LViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "locationid" -> o.locationid,
        "name" -> o.name,
        "costrate" -> o.costrate,
        "availability" -> o.availability,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[LViewRow] = {
      JsResult.fromTry(
        Try(
          LViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            locationid = json.\("locationid").toOption.map(_.as[LocationId]),
            name = json.\("name").toOption.map(_.as[Name]),
            costrate = json.\("costrate").toOption.map(_.as[BigDecimal]),
            availability = json.\("availability").toOption.map(_.as[BigDecimal]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
