/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package c

import adventureworks.TypoLocalDateTime
import adventureworks.production.culture.CultureId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class CViewRow(
  id: Option[/* bpchar */ String],
  /** Points to [[production.culture.CultureRow.cultureid]] */
  cultureid: Option[CultureId],
  /** Points to [[production.culture.CultureRow.name]] */
  name: Option[Name],
  /** Points to [[production.culture.CultureRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object CViewRow {
  implicit val reads: Reads[CViewRow] = Reads[CViewRow](json => JsResult.fromTry(
      Try(
        CViewRow(
          id = json.\("id").toOption.map(_.as[/* bpchar */ String]),
          cultureid = json.\("cultureid").toOption.map(_.as[CultureId]),
          name = json.\("name").toOption.map(_.as[Name]),
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[CViewRow] = RowParser[CViewRow] { row =>
    Success(
      CViewRow(
        id = row[Option[/* bpchar */ String]](idx + 0),
        cultureid = row[Option[CultureId]](idx + 1),
        name = row[Option[Name]](idx + 2),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[CViewRow] = OWrites[CViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Json.toJson(o.id),
      "cultureid" -> Json.toJson(o.cultureid),
      "name" -> Json.toJson(o.name),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
