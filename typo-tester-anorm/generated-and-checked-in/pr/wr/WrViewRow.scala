/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package wr

import adventureworks.TypoLocalDateTime
import adventureworks.production.location.LocationId
import adventureworks.production.workorder.WorkorderId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class WrViewRow(
  id: Option[Int],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.workorderid]] */
  workorderid: Option[WorkorderId],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.productid]] */
  productid: Option[Int],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.operationsequence]] */
  operationsequence: Option[Int],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.locationid]] */
  locationid: Option[LocationId],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.scheduledstartdate]] */
  scheduledstartdate: Option[TypoLocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.scheduledenddate]] */
  scheduledenddate: Option[TypoLocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualstartdate]] */
  actualstartdate: Option[TypoLocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualenddate]] */
  actualenddate: Option[TypoLocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualresourcehrs]] */
  actualresourcehrs: Option[BigDecimal],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.plannedcost]] */
  plannedcost: Option[BigDecimal],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualcost]] */
  actualcost: Option[BigDecimal],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object WrViewRow {
  implicit val reads: Reads[WrViewRow] = Reads[WrViewRow](json => JsResult.fromTry(
      Try(
        WrViewRow(
          id = json.\("id").toOption.map(_.as[Int]),
          workorderid = json.\("workorderid").toOption.map(_.as[WorkorderId]),
          productid = json.\("productid").toOption.map(_.as[Int]),
          operationsequence = json.\("operationsequence").toOption.map(_.as[Int]),
          locationid = json.\("locationid").toOption.map(_.as[LocationId]),
          scheduledstartdate = json.\("scheduledstartdate").toOption.map(_.as[TypoLocalDateTime]),
          scheduledenddate = json.\("scheduledenddate").toOption.map(_.as[TypoLocalDateTime]),
          actualstartdate = json.\("actualstartdate").toOption.map(_.as[TypoLocalDateTime]),
          actualenddate = json.\("actualenddate").toOption.map(_.as[TypoLocalDateTime]),
          actualresourcehrs = json.\("actualresourcehrs").toOption.map(_.as[BigDecimal]),
          plannedcost = json.\("plannedcost").toOption.map(_.as[BigDecimal]),
          actualcost = json.\("actualcost").toOption.map(_.as[BigDecimal]),
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[WrViewRow] = RowParser[WrViewRow] { row =>
    Success(
      WrViewRow(
        id = row[Option[Int]](idx + 0),
        workorderid = row[Option[WorkorderId]](idx + 1),
        productid = row[Option[Int]](idx + 2),
        operationsequence = row[Option[Int]](idx + 3),
        locationid = row[Option[LocationId]](idx + 4),
        scheduledstartdate = row[Option[TypoLocalDateTime]](idx + 5),
        scheduledenddate = row[Option[TypoLocalDateTime]](idx + 6),
        actualstartdate = row[Option[TypoLocalDateTime]](idx + 7),
        actualenddate = row[Option[TypoLocalDateTime]](idx + 8),
        actualresourcehrs = row[Option[BigDecimal]](idx + 9),
        plannedcost = row[Option[BigDecimal]](idx + 10),
        actualcost = row[Option[BigDecimal]](idx + 11),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 12)
      )
    )
  }
  implicit val writes: OWrites[WrViewRow] = OWrites[WrViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Json.toJson(o.id),
      "workorderid" -> Json.toJson(o.workorderid),
      "productid" -> Json.toJson(o.productid),
      "operationsequence" -> Json.toJson(o.operationsequence),
      "locationid" -> Json.toJson(o.locationid),
      "scheduledstartdate" -> Json.toJson(o.scheduledstartdate),
      "scheduledenddate" -> Json.toJson(o.scheduledenddate),
      "actualstartdate" -> Json.toJson(o.actualstartdate),
      "actualenddate" -> Json.toJson(o.actualenddate),
      "actualresourcehrs" -> Json.toJson(o.actualresourcehrs),
      "plannedcost" -> Json.toJson(o.plannedcost),
      "actualcost" -> Json.toJson(o.actualcost),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
