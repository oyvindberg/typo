/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pp

import adventureworks.TypoLocalDateTime
import adventureworks.production.productphoto.ProductphotoId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PpViewRow(
  id: Option[Int],
  /** Points to [[production.productphoto.ProductphotoRow.productphotoid]] */
  productphotoid: Option[ProductphotoId],
  /** Points to [[production.productphoto.ProductphotoRow.thumbnailphoto]] */
  thumbnailphoto: Option[Byte],
  /** Points to [[production.productphoto.ProductphotoRow.thumbnailphotofilename]] */
  thumbnailphotofilename: Option[/* max 50 chars */ String],
  /** Points to [[production.productphoto.ProductphotoRow.largephoto]] */
  largephoto: Option[Byte],
  /** Points to [[production.productphoto.ProductphotoRow.largephotofilename]] */
  largephotofilename: Option[/* max 50 chars */ String],
  /** Points to [[production.productphoto.ProductphotoRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object PpViewRow {
  implicit val reads: Reads[PpViewRow] = Reads[PpViewRow](json => JsResult.fromTry(
      Try(
        PpViewRow(
          id = json.\("id").toOption.map(_.as[Int]),
          productphotoid = json.\("productphotoid").toOption.map(_.as[ProductphotoId]),
          thumbnailphoto = json.\("thumbnailphoto").toOption.map(_.as[Byte]),
          thumbnailphotofilename = json.\("thumbnailphotofilename").toOption.map(_.as[/* max 50 chars */ String]),
          largephoto = json.\("largephoto").toOption.map(_.as[Byte]),
          largephotofilename = json.\("largephotofilename").toOption.map(_.as[/* max 50 chars */ String]),
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PpViewRow] = RowParser[PpViewRow] { row =>
    Success(
      PpViewRow(
        id = row[Option[Int]](idx + 0),
        productphotoid = row[Option[ProductphotoId]](idx + 1),
        thumbnailphoto = row[Option[Byte]](idx + 2),
        thumbnailphotofilename = row[Option[/* max 50 chars */ String]](idx + 3),
        largephoto = row[Option[Byte]](idx + 4),
        largephotofilename = row[Option[/* max 50 chars */ String]](idx + 5),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 6)
      )
    )
  }
  implicit val writes: OWrites[PpViewRow] = OWrites[PpViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Json.toJson(o.id),
      "productphotoid" -> Json.toJson(o.productphotoid),
      "thumbnailphoto" -> Json.toJson(o.thumbnailphoto),
      "thumbnailphotofilename" -> Json.toJson(o.thumbnailphotofilename),
      "largephoto" -> Json.toJson(o.largephoto),
      "largephotofilename" -> Json.toJson(o.largephotofilename),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
