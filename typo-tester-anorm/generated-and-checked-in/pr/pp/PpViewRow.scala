/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pp

import adventureworks.TypoLocalDateTime
import adventureworks.production.productphoto.ProductphotoId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PpViewRow(
  id: Option[Int],
  /** Points to [[production.productphoto.ProductphotoRow.productphotoid]] */
  productphotoid: Option[ProductphotoId],
  /** Points to [[production.productphoto.ProductphotoRow.thumbnailphoto]] */
  thumbnailphoto: Option[Byte],
  /** Points to [[production.productphoto.ProductphotoRow.thumbnailphotofilename]] */
  thumbnailphotofilename: Option[/* max 50 chars */ String],
  /** Points to [[production.productphoto.ProductphotoRow.largephoto]] */
  largephoto: Option[Byte],
  /** Points to [[production.productphoto.ProductphotoRow.largephotofilename]] */
  largephotofilename: Option[/* max 50 chars */ String],
  /** Points to [[production.productphoto.ProductphotoRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object PpViewRow {
  implicit val reads: Reads[PpViewRow] = Reads[PpViewRow](json => JsResult.fromTry(
      Try(
        PpViewRow(
          id = json.\("id").toOption.map(_.as(Reads.IntReads)),
          productphotoid = json.\("productphotoid").toOption.map(_.as(ProductphotoId.reads)),
          thumbnailphoto = json.\("thumbnailphoto").toOption.map(_.as(Reads.ByteReads)),
          thumbnailphotofilename = json.\("thumbnailphotofilename").toOption.map(_.as(Reads.StringReads)),
          largephoto = json.\("largephoto").toOption.map(_.as(Reads.ByteReads)),
          largephotofilename = json.\("largephotofilename").toOption.map(_.as(Reads.StringReads)),
          modifieddate = json.\("modifieddate").toOption.map(_.as(TypoLocalDateTime.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PpViewRow] = RowParser[PpViewRow] { row =>
    Success(
      PpViewRow(
        id = row(idx + 0)(Column.columnToOption(Column.columnToInt)),
        productphotoid = row(idx + 1)(Column.columnToOption(ProductphotoId.column)),
        thumbnailphoto = row(idx + 2)(Column.columnToOption(Column.columnToByte)),
        thumbnailphotofilename = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        largephoto = row(idx + 4)(Column.columnToOption(Column.columnToByte)),
        largephotofilename = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        modifieddate = row(idx + 6)(Column.columnToOption(TypoLocalDateTime.column))
      )
    )
  }
  implicit val writes: OWrites[PpViewRow] = OWrites[PpViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Writes.OptionWrites(Writes.IntWrites).writes(o.id),
      "productphotoid" -> Writes.OptionWrites(ProductphotoId.writes).writes(o.productphotoid),
      "thumbnailphoto" -> Writes.OptionWrites(Writes.ByteWrites).writes(o.thumbnailphoto),
      "thumbnailphotofilename" -> Writes.OptionWrites(Writes.StringWrites).writes(o.thumbnailphotofilename),
      "largephoto" -> Writes.OptionWrites(Writes.ByteWrites).writes(o.largephoto),
      "largephotofilename" -> Writes.OptionWrites(Writes.StringWrites).writes(o.largephotofilename),
      "modifieddate" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.modifieddate)
    ))
  )
}
