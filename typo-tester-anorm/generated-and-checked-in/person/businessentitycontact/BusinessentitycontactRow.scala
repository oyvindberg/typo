/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package businessentitycontact

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.contacttype.ContacttypeId
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class BusinessentitycontactRow(
  /** Primary key. Foreign key to BusinessEntity.BusinessEntityID.
      Points to [[businessentity.BusinessentityRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Primary key. Foreign key to Person.BusinessEntityID.
      Points to [[person.PersonRow.businessentityid]] */
  personid: BusinessentityId,
  /** Primary key.  Foreign key to ContactType.ContactTypeID.
      Points to [[contacttype.ContacttypeRow.contacttypeid]] */
  contacttypeid: ContacttypeId,
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
){
   val compositeId: BusinessentitycontactId = BusinessentitycontactId(businessentityid, personid, contacttypeid)
 }

object BusinessentitycontactRow {
  implicit val reads: Reads[BusinessentitycontactRow] = Reads[BusinessentitycontactRow](json => JsResult.fromTry(
      Try(
        BusinessentitycontactRow(
          businessentityid = json.\("businessentityid").as[BusinessentityId],
          personid = json.\("personid").as[BusinessentityId],
          contacttypeid = json.\("contacttypeid").as[ContacttypeId],
          rowguid = json.\("rowguid").as[UUID],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[BusinessentitycontactRow] = RowParser[BusinessentitycontactRow] { row =>
    Success(
      BusinessentitycontactRow(
        businessentityid = row[BusinessentityId](idx + 0),
        personid = row[BusinessentityId](idx + 1),
        contacttypeid = row[ContacttypeId](idx + 2),
        rowguid = row[UUID](idx + 3),
        modifieddate = row[TypoLocalDateTime](idx + 4)
      )
    )
  }
  implicit val writes: OWrites[BusinessentitycontactRow] = OWrites[BusinessentitycontactRow](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> Json.toJson(o.businessentityid),
      "personid" -> Json.toJson(o.personid),
      "contacttypeid" -> Json.toJson(o.contacttypeid),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
