/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package vadditionalcontactinfo

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID
import org.postgresql.jdbc.PgSQLXML

object VadditionalcontactinfoViewRepoImpl extends VadditionalcontactinfoViewRepo {
  override def selectAll(implicit c: Connection): List[VadditionalcontactinfoViewRow] = {
    SQL"""select businessentityid, firstname, middlename, lastname, telephonenumber, telephonespecialinstructions, street, city, stateprovince, postalcode, countryregion, homeaddressspecialinstructions, emailaddress, emailspecialinstructions, emailtelephonenumber, rowguid, modifieddate
          from person.vadditionalcontactinfo
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[VadditionalcontactinfoViewFieldOrIdValue[_]])(implicit c: Connection): List[VadditionalcontactinfoViewRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VadditionalcontactinfoViewFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.firstname(value) => NamedParameter("firstname", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.middlename(value) => NamedParameter("middlename", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.lastname(value) => NamedParameter("lastname", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.telephonenumber(value) => NamedParameter("telephonenumber", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.telephonespecialinstructions(value) => NamedParameter("telephonespecialinstructions", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.street(value) => NamedParameter("street", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.city(value) => NamedParameter("city", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.stateprovince(value) => NamedParameter("stateprovince", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.postalcode(value) => NamedParameter("postalcode", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.countryregion(value) => NamedParameter("countryregion", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.homeaddressspecialinstructions(value) => NamedParameter("homeaddressspecialinstructions", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.emailaddress(value) => NamedParameter("emailaddress", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.emailspecialinstructions(value) => NamedParameter("emailspecialinstructions", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.emailtelephonenumber(value) => NamedParameter("emailtelephonenumber", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case VadditionalcontactinfoViewFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select businessentityid, firstname, middlename, lastname, telephonenumber, telephonespecialinstructions, street, city, stateprovince, postalcode, countryregion, homeaddressspecialinstructions, emailaddress, emailspecialinstructions, emailtelephonenumber, rowguid, modifieddate
                    from person.vadditionalcontactinfo
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[VadditionalcontactinfoViewRow] =
    RowParser[VadditionalcontactinfoViewRow] { row =>
      Success(
        VadditionalcontactinfoViewRow(
          businessentityid = row[Option[BusinessentityId]]("businessentityid"),
          firstname = row[Option[Name]]("firstname"),
          middlename = row[Option[Name]]("middlename"),
          lastname = row[Option[Name]]("lastname"),
          telephonenumber = row[Option[PgSQLXML]]("telephonenumber"),
          telephonespecialinstructions = row[Option[String]]("telephonespecialinstructions"),
          street = row[Option[PgSQLXML]]("street"),
          city = row[Option[PgSQLXML]]("city"),
          stateprovince = row[Option[PgSQLXML]]("stateprovince"),
          postalcode = row[Option[PgSQLXML]]("postalcode"),
          countryregion = row[Option[PgSQLXML]]("countryregion"),
          homeaddressspecialinstructions = row[Option[PgSQLXML]]("homeaddressspecialinstructions"),
          emailaddress = row[Option[PgSQLXML]]("emailaddress"),
          emailspecialinstructions = row[Option[String]]("emailspecialinstructions"),
          emailtelephonenumber = row[Option[PgSQLXML]]("emailtelephonenumber"),
          rowguid = row[Option[UUID]]("rowguid"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
