/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package personphone

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.phonenumbertype.PhonenumbertypeId
import adventureworks.public.Phone
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PersonphoneRow(
  /** Business entity identification number. Foreign key to Person.BusinessEntityID.
      Points to [[person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Telephone number identification number. */
  phonenumber: Phone,
  /** Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.
      Points to [[phonenumbertype.PhonenumbertypeRow.phonenumbertypeid]] */
  phonenumbertypeid: PhonenumbertypeId,
  modifieddate: TypoLocalDateTime
){
   val compositeId: PersonphoneId = PersonphoneId(businessentityid, phonenumber, phonenumbertypeid)
 }

object PersonphoneRow {
  implicit val reads: Reads[PersonphoneRow] = Reads[PersonphoneRow](json => JsResult.fromTry(
      Try(
        PersonphoneRow(
          businessentityid = json.\("businessentityid").as[BusinessentityId],
          phonenumber = json.\("phonenumber").as[Phone],
          phonenumbertypeid = json.\("phonenumbertypeid").as[PhonenumbertypeId],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PersonphoneRow] = RowParser[PersonphoneRow] { row =>
    Success(
      PersonphoneRow(
        businessentityid = row[BusinessentityId](idx + 0),
        phonenumber = row[Phone](idx + 1),
        phonenumbertypeid = row[PhonenumbertypeId](idx + 2),
        modifieddate = row[TypoLocalDateTime](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[PersonphoneRow] = OWrites[PersonphoneRow](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> Json.toJson(o.businessentityid),
      "phonenumber" -> Json.toJson(o.phonenumber),
      "phonenumbertypeid" -> Json.toJson(o.phonenumbertypeid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
