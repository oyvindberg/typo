/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package personphone

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.phonenumbertype.PhonenumbertypeId
import adventureworks.public.Phone
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** Type for the composite primary key of table `person.personphone` */
case class PersonphoneId(businessentityid: BusinessentityId, phonenumber: Phone, phonenumbertypeid: PhonenumbertypeId)
object PersonphoneId {
  implicit val ordering: Ordering[PersonphoneId] = Ordering.by(x => (x.businessentityid, x.phonenumber, x.phonenumbertypeid))
  implicit val oFormat: OFormat[PersonphoneId] = new OFormat[PersonphoneId]{
    override def writes(o: PersonphoneId): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "phonenumber" -> o.phonenumber,
        "phonenumbertypeid" -> o.phonenumbertypeid
      )
  
    override def reads(json: JsValue): JsResult[PersonphoneId] = {
      JsResult.fromTry(
        Try(
          PersonphoneId(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            phonenumber = json.\("phonenumber").as[Phone],
            phonenumbertypeid = json.\("phonenumbertypeid").as[PhonenumbertypeId]
          )
        )
      )
    }
  }
}
