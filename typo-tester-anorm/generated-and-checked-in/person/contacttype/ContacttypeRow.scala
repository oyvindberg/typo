/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package contacttype

import adventureworks.TypoLocalDateTime
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ContacttypeRow(
  /** Primary key for ContactType records. */
  contacttypeid: ContacttypeId,
  /** Contact type description. */
  name: Name,
  modifieddate: TypoLocalDateTime
)

object ContacttypeRow {
  implicit val reads: Reads[ContacttypeRow] = Reads[ContacttypeRow](json => JsResult.fromTry(
      Try(
        ContacttypeRow(
          contacttypeid = json.\("contacttypeid").as[ContacttypeId],
          name = json.\("name").as[Name],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ContacttypeRow] = RowParser[ContacttypeRow] { row =>
    Success(
      ContacttypeRow(
        contacttypeid = row[ContacttypeId](idx + 0),
        name = row[Name](idx + 1),
        modifieddate = row[TypoLocalDateTime](idx + 2)
      )
    )
  }
  implicit val writes: OWrites[ContacttypeRow] = OWrites[ContacttypeRow](o =>
    new JsObject(ListMap[String, JsValue](
      "contacttypeid" -> Json.toJson(o.contacttypeid),
      "name" -> Json.toJson(o.name),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
