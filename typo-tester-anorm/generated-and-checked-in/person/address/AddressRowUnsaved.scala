/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package address

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.person.stateprovince.StateprovinceId
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** This class corresponds to a row in table `person.address` which has not been persisted yet */
case class AddressRowUnsaved(
  /** First street address line. */
  addressline1: /* max 60 chars */ String,
  /** Second street address line. */
  addressline2: Option[/* max 60 chars */ String],
  /** Name of the city. */
  city: /* max 30 chars */ String,
  /** Unique identification number for the state or province. Foreign key to StateProvince table.
      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: StateprovinceId,
  /** Postal code for the street address. */
  postalcode: /* max 15 chars */ String,
  /** Latitude and longitude of this address. */
  spatiallocation: Option[Array[Byte]],
  /** Default: nextval('person.address_addressid_seq'::regclass)
      Primary key for Address records. */
  addressid: Defaulted[AddressId] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(addressidDefault: => AddressId, rowguidDefault: => UUID, modifieddateDefault: => TypoLocalDateTime): AddressRow =
    AddressRow(
      addressline1 = addressline1,
      addressline2 = addressline2,
      city = city,
      stateprovinceid = stateprovinceid,
      postalcode = postalcode,
      spatiallocation = spatiallocation,
      addressid = addressid match {
                    case Defaulted.UseDefault => addressidDefault
                    case Defaulted.Provided(value) => value
                  },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object AddressRowUnsaved {
  implicit val reads: Reads[AddressRowUnsaved] = Reads[AddressRowUnsaved](json => JsResult.fromTry(
      Try(
        AddressRowUnsaved(
          addressline1 = json.\("addressline1").as[/* max 60 chars */ String],
          addressline2 = json.\("addressline2").toOption.map(_.as[/* max 60 chars */ String]),
          city = json.\("city").as[/* max 30 chars */ String],
          stateprovinceid = json.\("stateprovinceid").as[StateprovinceId],
          postalcode = json.\("postalcode").as[/* max 15 chars */ String],
          spatiallocation = json.\("spatiallocation").toOption.map(_.as[Array[Byte]]),
          addressid = json.\("addressid").as[Defaulted[AddressId]],
          rowguid = json.\("rowguid").as[Defaulted[UUID]],
          modifieddate = json.\("modifieddate").as[Defaulted[TypoLocalDateTime]]
        )
      )
    ),
  )
  implicit val writes: OWrites[AddressRowUnsaved] = OWrites[AddressRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "addressline1" -> Json.toJson(o.addressline1),
      "addressline2" -> Json.toJson(o.addressline2),
      "city" -> Json.toJson(o.city),
      "stateprovinceid" -> Json.toJson(o.stateprovinceid),
      "postalcode" -> Json.toJson(o.postalcode),
      "spatiallocation" -> Json.toJson(o.spatiallocation),
      "addressid" -> Json.toJson(o.addressid),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
