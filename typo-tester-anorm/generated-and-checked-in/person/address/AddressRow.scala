/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package address

import adventureworks.TypoLocalDateTime
import adventureworks.person.stateprovince.StateprovinceId
import anorm.Column
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class AddressRow(
  /** Primary key for Address records. */
  addressid: AddressId,
  /** First street address line. */
  addressline1: /* max 60 chars */ String,
  /** Second street address line. */
  addressline2: Option[/* max 60 chars */ String],
  /** Name of the city. */
  city: /* max 30 chars */ String,
  /** Unique identification number for the state or province. Foreign key to StateProvince table.
      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: StateprovinceId,
  /** Postal code for the street address. */
  postalcode: /* max 15 chars */ String,
  /** Latitude and longitude of this address. */
  spatiallocation: Option[Array[Byte]],
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object AddressRow {
  implicit val reads: Reads[AddressRow] = Reads[AddressRow](json => JsResult.fromTry(
      Try(
        AddressRow(
          addressid = json.\("addressid").as(AddressId.reads),
          addressline1 = json.\("addressline1").as(Reads.StringReads),
          addressline2 = json.\("addressline2").toOption.map(_.as(Reads.StringReads)),
          city = json.\("city").as(Reads.StringReads),
          stateprovinceid = json.\("stateprovinceid").as(StateprovinceId.reads),
          postalcode = json.\("postalcode").as(Reads.StringReads),
          spatiallocation = json.\("spatiallocation").toOption.map(_.as(Reads.ArrayReads[Byte](Reads.ByteReads, implicitly))),
          rowguid = json.\("rowguid").as(Reads.uuidReads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[AddressRow] = RowParser[AddressRow] { row =>
    Success(
      AddressRow(
        addressid = row(idx + 0)(AddressId.column),
        addressline1 = row(idx + 1)(Column.columnToString),
        addressline2 = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        city = row(idx + 3)(Column.columnToString),
        stateprovinceid = row(idx + 4)(StateprovinceId.column),
        postalcode = row(idx + 5)(Column.columnToString),
        spatiallocation = row(idx + 6)(Column.columnToOption(Column.columnToByteArray)),
        rowguid = row(idx + 7)(Column.columnToUUID),
        modifieddate = row(idx + 8)(TypoLocalDateTime.column)
      )
    )
  }
  implicit val writes: OWrites[AddressRow] = OWrites[AddressRow](o =>
    new JsObject(ListMap[String, JsValue](
      "addressid" -> AddressId.writes.writes(o.addressid),
      "addressline1" -> Writes.StringWrites.writes(o.addressline1),
      "addressline2" -> Writes.OptionWrites(Writes.StringWrites).writes(o.addressline2),
      "city" -> Writes.StringWrites.writes(o.city),
      "stateprovinceid" -> StateprovinceId.writes.writes(o.stateprovinceid),
      "postalcode" -> Writes.StringWrites.writes(o.postalcode),
      "spatiallocation" -> Writes.OptionWrites(Writes.arrayWrites[Byte](implicitly, Writes.ByteWrites)).writes(o.spatiallocation),
      "rowguid" -> Writes.UuidWrites.writes(o.rowguid),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
