/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package address

import adventureworks.TypoLocalDateTime
import adventureworks.person.stateprovince.StateprovinceId
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class AddressRow(
  /** Primary key for Address records. */
  addressid: AddressId,
  /** First street address line. */
  addressline1: /* max 60 chars */ String,
  /** Second street address line. */
  addressline2: Option[/* max 60 chars */ String],
  /** Name of the city. */
  city: /* max 30 chars */ String,
  /** Unique identification number for the state or province. Foreign key to StateProvince table.
      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: StateprovinceId,
  /** Postal code for the street address. */
  postalcode: /* max 15 chars */ String,
  /** Latitude and longitude of this address. */
  spatiallocation: Option[Array[Byte]],
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object AddressRow {
  implicit val reads: Reads[AddressRow] = Reads[AddressRow](json => JsResult.fromTry(
      Try(
        AddressRow(
          addressid = json.\("addressid").as[AddressId],
          addressline1 = json.\("addressline1").as[/* max 60 chars */ String],
          addressline2 = json.\("addressline2").toOption.map(_.as[/* max 60 chars */ String]),
          city = json.\("city").as[/* max 30 chars */ String],
          stateprovinceid = json.\("stateprovinceid").as[StateprovinceId],
          postalcode = json.\("postalcode").as[/* max 15 chars */ String],
          spatiallocation = json.\("spatiallocation").toOption.map(_.as[Array[Byte]]),
          rowguid = json.\("rowguid").as[UUID],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[AddressRow] = RowParser[AddressRow] { row =>
    Success(
      AddressRow(
        addressid = row[AddressId](idx + 0),
        addressline1 = row[/* max 60 chars */ String](idx + 1),
        addressline2 = row[Option[/* max 60 chars */ String]](idx + 2),
        city = row[/* max 30 chars */ String](idx + 3),
        stateprovinceid = row[StateprovinceId](idx + 4),
        postalcode = row[/* max 15 chars */ String](idx + 5),
        spatiallocation = row[Option[Array[Byte]]](idx + 6),
        rowguid = row[UUID](idx + 7),
        modifieddate = row[TypoLocalDateTime](idx + 8)
      )
    )
  }
  implicit val writes: OWrites[AddressRow] = OWrites[AddressRow](o =>
    new JsObject(ListMap[String, JsValue](
      "addressid" -> Json.toJson(o.addressid),
      "addressline1" -> Json.toJson(o.addressline1),
      "addressline2" -> Json.toJson(o.addressline2),
      "city" -> Json.toJson(o.city),
      "stateprovinceid" -> Json.toJson(o.stateprovinceid),
      "postalcode" -> Json.toJson(o.postalcode),
      "spatiallocation" -> Json.toJson(o.spatiallocation),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
