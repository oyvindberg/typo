/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import org.postgresql.jdbc.PgArray
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Money and cash types in PostgreSQL */
case class TypoMoney(value: BigDecimal)

object TypoMoney {
  implicit val arrayColumn: Column[Array[TypoMoney]] = Column.nonNull[Array[TypoMoney]]((v1: Any, _) =>
    v1 match {
        case v: PgArray =>
         v.getArray match {
           case v: Array[?] =>
             Right(v.map(v => TypoMoney(BigDecimal(v.asInstanceOf[java.math.BigDecimal]))))
           case other => Left(TypeDoesNotMatch(s"Expected one-dimensional array from JDBC to produce an array of TypoMoney, got ${other.getClass.getName}"))
         }
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit val arrayParameterMetaData: ParameterMetaData[Array[TypoMoney]] = new ParameterMetaData[Array[TypoMoney]] {
    override def sqlType: String = "_money"
    override def jdbcType: Int = Types.ARRAY
  }
  implicit val arrayToStatement: ToStatement[Array[TypoMoney]] = ToStatement[Array[TypoMoney]]((s, index, v) => s.setArray(index, s.getConnection.createArrayOf("money", v.map(v => v.value.bigDecimal))))
  implicit val column: Column[TypoMoney] = Column.nonNull[TypoMoney]((v1: Any, _) =>
    v1 match {
      case v: java.math.BigDecimal => Right(TypoMoney(BigDecimal(v)))
      case other => Left(TypeDoesNotMatch(s"Expected instance of java.math.BigDecimal, got ${other.getClass.getName}"))
    }
  )
  implicit val parameterMetadata: ParameterMetaData[TypoMoney] = new ParameterMetaData[TypoMoney] {
    override def sqlType: String = "money"
    override def jdbcType: Int = Types.OTHER
  }
  implicit val reads: Reads[TypoMoney] = Reads[TypoMoney](json => JsResult.fromTry(
      Try(
        TypoMoney(
          value = json.\("value").as[BigDecimal]
        )
      )
    ),
  )
  implicit val toStatement: ToStatement[TypoMoney] = ToStatement[TypoMoney]((s, index, v) => s.setObject(index, v.value.bigDecimal))
  implicit val writes: OWrites[TypoMoney] = OWrites[TypoMoney](o =>
    new JsObject(ListMap[String, JsValue](
      "value" -> Json.toJson(o.value)
    ))
  )
}
