/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import org.postgresql.jdbc.PgArray
import org.postgresql.util.PGobject
import play.api.libs.json.Reads
import play.api.libs.json.Writes

/** regproc (via PGObject) */
case class TypoRegproc(value: String)

object TypoRegproc {
  implicit val arrayColumn: Column[Array[TypoRegproc]] = Column.nonNull[Array[TypoRegproc]]((v1: Any, _) =>
    v1 match {
        case v: PgArray =>
         v.getArray match {
           case v: Array[?] =>
             Right(v.map(v => TypoRegproc(v.asInstanceOf[String])))
           case other => Left(TypeDoesNotMatch(s"Expected one-dimensional array from JDBC to produce an array of TypoRegproc, got ${other.getClass.getName}"))
         }
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit val arrayParameterMetaData: ParameterMetaData[Array[TypoRegproc]] = new ParameterMetaData[Array[TypoRegproc]] {
    override def sqlType: String = "_regproc"
    override def jdbcType: Int = Types.ARRAY
  }
  implicit val arrayToStatement: ToStatement[Array[TypoRegproc]] = ToStatement[Array[TypoRegproc]]((s, index, v) => s.setArray(index, s.getConnection.createArrayOf("regproc", v.map(v => {
                                                                                                                           val obj = new PGobject
                                                                                                                           obj.setType("regproc")
                                                                                                                           obj.setValue(v.value)
                                                                                                                           obj
                                                                                                                         }))))
  implicit val column: Column[TypoRegproc] = Column.nonNull[TypoRegproc]((v1: Any, _) =>
    v1 match {
      case v: PGobject => Right(TypoRegproc(v.getValue))
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.util.PGobject, got ${other.getClass.getName}"))
    }
  )
  implicit val ordering: Ordering[TypoRegproc] = Ordering.by(_.value)
  implicit val parameterMetadata: ParameterMetaData[TypoRegproc] = new ParameterMetaData[TypoRegproc] {
    override def sqlType: String = "regproc"
    override def jdbcType: Int = Types.OTHER
  }
  implicit val reads: Reads[TypoRegproc] = Reads.StringReads.map(TypoRegproc.apply)
  implicit val toStatement: ToStatement[TypoRegproc] = ToStatement[TypoRegproc]((s, index, v) => s.setObject(index, {
                                                                 val obj = new PGobject
                                                                 obj.setType("regproc")
                                                                 obj.setValue(v.value)
                                                                 obj
                                                               }))
  implicit val writes: Writes[TypoRegproc] = Writes.StringWrites.contramap(_.value)
}
