/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productdocument

import adventureworks.production.document.DocumentId
import adventureworks.production.product.ProductId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ProductdocumentRow(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  modifieddate: LocalDateTime,
  /** Document identification number. Foreign key to Document.DocumentNode.
      Points to [[document.DocumentRow.documentnode]] */
  documentnode: DocumentId
){
   val compositeId: ProductdocumentId = ProductdocumentId(productid, documentnode)
 }

object ProductdocumentRow {
  implicit val oFormat: OFormat[ProductdocumentRow] = new OFormat[ProductdocumentRow]{
    override def writes(o: ProductdocumentRow): JsObject =
      Json.obj(
        "productid" -> o.productid,
        "modifieddate" -> o.modifieddate,
        "documentnode" -> o.documentnode
      )
  
    override def reads(json: JsValue): JsResult[ProductdocumentRow] = {
      JsResult.fromTry(
        Try(
          ProductdocumentRow(
            productid = json.\("productid").as[ProductId],
            modifieddate = json.\("modifieddate").as[LocalDateTime],
            documentnode = json.\("documentnode").as[DocumentId]
          )
        )
      )
    }
  }
}
