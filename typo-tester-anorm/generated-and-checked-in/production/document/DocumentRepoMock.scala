/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package document

import java.sql.Connection
import java.util.UUID

class DocumentRepoMock(toRow: Function1[DocumentRowUnsaved, DocumentRow],
                       map: scala.collection.mutable.Map[DocumentId, DocumentRow] = scala.collection.mutable.Map.empty) extends DocumentRepo {
  override def delete(documentnode: DocumentId)(implicit c: Connection): Boolean = {
    map.remove(documentnode).isDefined
  }
  override def insert(unsaved: DocumentRow)(implicit c: Connection): DocumentRow = {
    if (map.contains(unsaved.documentnode))
      sys.error(s"id ${unsaved.documentnode} already exists")
    else
      map.put(unsaved.documentnode, unsaved)
    unsaved
  }
  override def insert(unsaved: DocumentRowUnsaved)(implicit c: Connection): DocumentRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[DocumentRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[DocumentFieldOrIdValue[_]])(implicit c: Connection): List[DocumentRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, DocumentFieldValue.title(value)) => acc.filter(_.title == value)
      case (acc, DocumentFieldValue.owner(value)) => acc.filter(_.owner == value)
      case (acc, DocumentFieldValue.folderflag(value)) => acc.filter(_.folderflag == value)
      case (acc, DocumentFieldValue.filename(value)) => acc.filter(_.filename == value)
      case (acc, DocumentFieldValue.fileextension(value)) => acc.filter(_.fileextension == value)
      case (acc, DocumentFieldValue.revision(value)) => acc.filter(_.revision == value)
      case (acc, DocumentFieldValue.changenumber(value)) => acc.filter(_.changenumber == value)
      case (acc, DocumentFieldValue.status(value)) => acc.filter(_.status == value)
      case (acc, DocumentFieldValue.documentsummary(value)) => acc.filter(_.documentsummary == value)
      case (acc, DocumentFieldValue.document(value)) => acc.filter(_.document == value)
      case (acc, DocumentFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
      case (acc, DocumentFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      case (acc, DocumentFieldValue.documentnode(value)) => acc.filter(_.documentnode == value)
    }.toList
  }
  override def selectById(documentnode: DocumentId)(implicit c: Connection): Option[DocumentRow] = {
    map.get(documentnode)
  }
  override def selectByIds(documentnodes: Array[DocumentId])(implicit c: Connection): List[DocumentRow] = {
    documentnodes.flatMap(map.get).toList
  }
  override def selectByUnique(rowguid: UUID)(implicit c: Connection): Option[DocumentRow] = {
    selectByFieldValues(List(DocumentFieldValue.rowguid(rowguid))).headOption
  }
  override def update(row: DocumentRow)(implicit c: Connection): Boolean = {
    map.get(row.documentnode) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.documentnode, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(documentnode: DocumentId, fieldValues: List[DocumentFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(documentnode) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, DocumentFieldValue.title(value)) => acc.copy(title = value)
          case (acc, DocumentFieldValue.owner(value)) => acc.copy(owner = value)
          case (acc, DocumentFieldValue.folderflag(value)) => acc.copy(folderflag = value)
          case (acc, DocumentFieldValue.filename(value)) => acc.copy(filename = value)
          case (acc, DocumentFieldValue.fileextension(value)) => acc.copy(fileextension = value)
          case (acc, DocumentFieldValue.revision(value)) => acc.copy(revision = value)
          case (acc, DocumentFieldValue.changenumber(value)) => acc.copy(changenumber = value)
          case (acc, DocumentFieldValue.status(value)) => acc.copy(status = value)
          case (acc, DocumentFieldValue.documentsummary(value)) => acc.copy(documentsummary = value)
          case (acc, DocumentFieldValue.document(value)) => acc.copy(document = value)
          case (acc, DocumentFieldValue.rowguid(value)) => acc.copy(rowguid = value)
          case (acc, DocumentFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(documentnode, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: DocumentRow)(implicit c: Connection): DocumentRow = {
    map.put(unsaved.documentnode, unsaved)
    unsaved
  }
}
