/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package document

import java.sql.Connection

class DocumentRepoMock(toRow: Function1[DocumentRowUnsaved, DocumentRow],
                       map: scala.collection.mutable.Map[DocumentId, DocumentRow] = scala.collection.mutable.Map.empty) extends DocumentRepo {
  override def delete(documentnode: DocumentId)(implicit c: Connection): Boolean = {
    map.remove(documentnode).isDefined
  }
  override def insert(unsaved: DocumentRow)(implicit c: Connection): DocumentRow = {
    if (map.contains(unsaved.documentnode))
      sys.error(s"id ${unsaved.documentnode} already exists")
    else
      map.put(unsaved.documentnode, unsaved)
    unsaved
  }
  override def insert(unsaved: DocumentRowUnsaved)(implicit c: Connection): DocumentRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[DocumentRow] = {
    map.values.toList
  }
  override def selectById(documentnode: DocumentId)(implicit c: Connection): Option[DocumentRow] = {
    map.get(documentnode)
  }
  override def selectByIds(documentnodes: Array[DocumentId])(implicit c: Connection): List[DocumentRow] = {
    documentnodes.flatMap(map.get).toList
  }
  override def update(row: DocumentRow)(implicit c: Connection): Boolean = {
    map.get(row.documentnode) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.documentnode, row)
        true
      case None => false
    }
  }
  override def upsert(unsaved: DocumentRow)(implicit c: Connection): DocumentRow = {
    map.put(unsaved.documentnode, unsaved)
    unsaved
  }
}
