/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import java.sql.Connection

class CultureRepoMock(toRow: Function1[CultureRowUnsaved, CultureRow],
                      map: scala.collection.mutable.Map[CultureId, CultureRow] = scala.collection.mutable.Map.empty) extends CultureRepo {
  override def delete(cultureid: CultureId)(implicit c: Connection): Boolean = {
    map.remove(cultureid).isDefined
  }
  override def insert(unsaved: CultureRow)(implicit c: Connection): CultureRow = {
    if (map.contains(unsaved.cultureid))
      sys.error(s"id ${unsaved.cultureid} already exists")
    else
      map.put(unsaved.cultureid, unsaved)
    unsaved
  }
  override def insert(unsaved: CultureRowUnsaved)(implicit c: Connection): CultureRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[CultureRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[CultureFieldOrIdValue[_]])(implicit c: Connection): List[CultureRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, CultureFieldValue.cultureid(value)) => acc.filter(_.cultureid == value)
      case (acc, CultureFieldValue.name(value)) => acc.filter(_.name == value)
      case (acc, CultureFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(cultureid: CultureId)(implicit c: Connection): Option[CultureRow] = {
    map.get(cultureid)
  }
  override def selectByIds(cultureids: Array[CultureId])(implicit c: Connection): List[CultureRow] = {
    cultureids.flatMap(map.get).toList
  }
  override def update(row: CultureRow)(implicit c: Connection): Boolean = {
    map.get(row.cultureid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.cultureid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(cultureid: CultureId, fieldValues: List[CultureFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(cultureid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, CultureFieldValue.name(value)) => acc.copy(name = value)
          case (acc, CultureFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(cultureid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: CultureRow)(implicit c: Connection): CultureRow = {
    map.put(unsaved.cultureid, unsaved)
    unsaved
  }
}
