/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package vproductmodelcatalogdescription

import adventureworks.TypoLocalDateTime
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class VproductmodelcatalogdescriptionViewRow(
  /** Points to [[productmodel.ProductmodelRow.productmodelid]] */
  productmodelid: Option[ProductmodelId],
  /** Points to [[productmodel.ProductmodelRow.name]] */
  name: Option[Name],
  Summary: Option[String],
  manufacturer: Option[String],
  copyright: Option[/* max 30 chars */ String],
  producturl: Option[/* max 256 chars */ String],
  warrantyperiod: Option[/* max 256 chars */ String],
  warrantydescription: Option[/* max 256 chars */ String],
  noofyears: Option[/* max 256 chars */ String],
  maintenancedescription: Option[/* max 256 chars */ String],
  wheel: Option[/* max 256 chars */ String],
  saddle: Option[/* max 256 chars */ String],
  pedal: Option[/* max 256 chars */ String],
  bikeframe: Option[String],
  crankset: Option[/* max 256 chars */ String],
  pictureangle: Option[/* max 256 chars */ String],
  picturesize: Option[/* max 256 chars */ String],
  productphotoid: Option[/* max 256 chars */ String],
  material: Option[/* max 256 chars */ String],
  color: Option[/* max 256 chars */ String],
  productline: Option[/* max 256 chars */ String],
  style: Option[/* max 256 chars */ String],
  riderexperience: Option[/* max 1024 chars */ String],
  /** Points to [[productmodel.ProductmodelRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[productmodel.ProductmodelRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object VproductmodelcatalogdescriptionViewRow {
  implicit val reads: Reads[VproductmodelcatalogdescriptionViewRow] = Reads[VproductmodelcatalogdescriptionViewRow](json => JsResult.fromTry(
      Try(
        VproductmodelcatalogdescriptionViewRow(
          productmodelid = json.\("productmodelid").toOption.map(_.as[ProductmodelId]),
          name = json.\("name").toOption.map(_.as[Name]),
          Summary = json.\("Summary").toOption.map(_.as[String]),
          manufacturer = json.\("manufacturer").toOption.map(_.as[String]),
          copyright = json.\("copyright").toOption.map(_.as[/* max 30 chars */ String]),
          producturl = json.\("producturl").toOption.map(_.as[/* max 256 chars */ String]),
          warrantyperiod = json.\("warrantyperiod").toOption.map(_.as[/* max 256 chars */ String]),
          warrantydescription = json.\("warrantydescription").toOption.map(_.as[/* max 256 chars */ String]),
          noofyears = json.\("noofyears").toOption.map(_.as[/* max 256 chars */ String]),
          maintenancedescription = json.\("maintenancedescription").toOption.map(_.as[/* max 256 chars */ String]),
          wheel = json.\("wheel").toOption.map(_.as[/* max 256 chars */ String]),
          saddle = json.\("saddle").toOption.map(_.as[/* max 256 chars */ String]),
          pedal = json.\("pedal").toOption.map(_.as[/* max 256 chars */ String]),
          bikeframe = json.\("bikeframe").toOption.map(_.as[String]),
          crankset = json.\("crankset").toOption.map(_.as[/* max 256 chars */ String]),
          pictureangle = json.\("pictureangle").toOption.map(_.as[/* max 256 chars */ String]),
          picturesize = json.\("picturesize").toOption.map(_.as[/* max 256 chars */ String]),
          productphotoid = json.\("productphotoid").toOption.map(_.as[/* max 256 chars */ String]),
          material = json.\("material").toOption.map(_.as[/* max 256 chars */ String]),
          color = json.\("color").toOption.map(_.as[/* max 256 chars */ String]),
          productline = json.\("productline").toOption.map(_.as[/* max 256 chars */ String]),
          style = json.\("style").toOption.map(_.as[/* max 256 chars */ String]),
          riderexperience = json.\("riderexperience").toOption.map(_.as[/* max 1024 chars */ String]),
          rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VproductmodelcatalogdescriptionViewRow] = RowParser[VproductmodelcatalogdescriptionViewRow] { row =>
    Success(
      VproductmodelcatalogdescriptionViewRow(
        productmodelid = row[Option[ProductmodelId]](idx + 0),
        name = row[Option[Name]](idx + 1),
        Summary = row[Option[String]](idx + 2),
        manufacturer = row[Option[String]](idx + 3),
        copyright = row[Option[/* max 30 chars */ String]](idx + 4),
        producturl = row[Option[/* max 256 chars */ String]](idx + 5),
        warrantyperiod = row[Option[/* max 256 chars */ String]](idx + 6),
        warrantydescription = row[Option[/* max 256 chars */ String]](idx + 7),
        noofyears = row[Option[/* max 256 chars */ String]](idx + 8),
        maintenancedescription = row[Option[/* max 256 chars */ String]](idx + 9),
        wheel = row[Option[/* max 256 chars */ String]](idx + 10),
        saddle = row[Option[/* max 256 chars */ String]](idx + 11),
        pedal = row[Option[/* max 256 chars */ String]](idx + 12),
        bikeframe = row[Option[String]](idx + 13),
        crankset = row[Option[/* max 256 chars */ String]](idx + 14),
        pictureangle = row[Option[/* max 256 chars */ String]](idx + 15),
        picturesize = row[Option[/* max 256 chars */ String]](idx + 16),
        productphotoid = row[Option[/* max 256 chars */ String]](idx + 17),
        material = row[Option[/* max 256 chars */ String]](idx + 18),
        color = row[Option[/* max 256 chars */ String]](idx + 19),
        productline = row[Option[/* max 256 chars */ String]](idx + 20),
        style = row[Option[/* max 256 chars */ String]](idx + 21),
        riderexperience = row[Option[/* max 1024 chars */ String]](idx + 22),
        rowguid = row[Option[UUID]](idx + 23),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 24)
      )
    )
  }
  implicit val writes: OWrites[VproductmodelcatalogdescriptionViewRow] = OWrites[VproductmodelcatalogdescriptionViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "productmodelid" -> Json.toJson(o.productmodelid),
      "name" -> Json.toJson(o.name),
      "Summary" -> Json.toJson(o.Summary),
      "manufacturer" -> Json.toJson(o.manufacturer),
      "copyright" -> Json.toJson(o.copyright),
      "producturl" -> Json.toJson(o.producturl),
      "warrantyperiod" -> Json.toJson(o.warrantyperiod),
      "warrantydescription" -> Json.toJson(o.warrantydescription),
      "noofyears" -> Json.toJson(o.noofyears),
      "maintenancedescription" -> Json.toJson(o.maintenancedescription),
      "wheel" -> Json.toJson(o.wheel),
      "saddle" -> Json.toJson(o.saddle),
      "pedal" -> Json.toJson(o.pedal),
      "bikeframe" -> Json.toJson(o.bikeframe),
      "crankset" -> Json.toJson(o.crankset),
      "pictureangle" -> Json.toJson(o.pictureangle),
      "picturesize" -> Json.toJson(o.picturesize),
      "productphotoid" -> Json.toJson(o.productphotoid),
      "material" -> Json.toJson(o.material),
      "color" -> Json.toJson(o.color),
      "productline" -> Json.toJson(o.productline),
      "style" -> Json.toJson(o.style),
      "riderexperience" -> Json.toJson(o.riderexperience),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
