/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodelillustration

import adventureworks.Defaulted
import adventureworks.production.illustration.IllustrationId
import adventureworks.production.productmodel.ProductmodelId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object ProductmodelillustrationRepoImpl extends ProductmodelillustrationRepo {
  override def delete(compositeId: ProductmodelillustrationId)(implicit c: Connection): Boolean = {
    SQL"delete from production.productmodelillustration where productmodelid = ${compositeId.productmodelid} AND illustrationid = ${compositeId.illustrationid}".executeUpdate() > 0
  }
  override def insert(unsaved: ProductmodelillustrationRow)(implicit c: Connection): ProductmodelillustrationRow = {
    SQL"""insert into production.productmodelillustration(productmodelid, illustrationid, modifieddate)
          values (${unsaved.productmodelid}::int4, ${unsaved.illustrationid}::int4, ${unsaved.modifieddate}::timestamp)
          returning productmodelid, illustrationid, modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  override def insert(unsaved: ProductmodelillustrationRowUnsaved)(implicit c: Connection): ProductmodelillustrationRow = {
    val namedParameters = List(
      Some((NamedParameter("productmodelid", ParameterValue.from(unsaved.productmodelid)), "::int4")),
      Some((NamedParameter("illustrationid", ParameterValue.from(unsaved.illustrationid)), "::int4")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.productmodelillustration default values
            returning productmodelid, illustrationid, modifieddate
         """
        .executeInsert(rowParser.single)
    } else {
      val q = s"""insert into production.productmodelillustration(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning productmodelid, illustrationid, modifieddate
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(rowParser.single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[ProductmodelillustrationRow] = {
    SQL"""select productmodelid, illustrationid, modifieddate
          from production.productmodelillustration
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[ProductmodelillustrationFieldOrIdValue[_]])(implicit c: Connection): List[ProductmodelillustrationRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductmodelillustrationFieldValue.productmodelid(value) => NamedParameter("productmodelid", ParameterValue.from(value))
          case ProductmodelillustrationFieldValue.illustrationid(value) => NamedParameter("illustrationid", ParameterValue.from(value))
          case ProductmodelillustrationFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select productmodelid, illustrationid, modifieddate
                    from production.productmodelillustration
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: ProductmodelillustrationId)(implicit c: Connection): Option[ProductmodelillustrationRow] = {
    SQL"""select productmodelid, illustrationid, modifieddate
          from production.productmodelillustration
          where productmodelid = ${compositeId.productmodelid} AND illustrationid = ${compositeId.illustrationid}
       """.as(rowParser.singleOpt)
  }
  override def update(row: ProductmodelillustrationRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update production.productmodelillustration
          set modifieddate = ${row.modifieddate}::timestamp
          where productmodelid = ${compositeId.productmodelid} AND illustrationid = ${compositeId.illustrationid}
       """.executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: ProductmodelillustrationId, fieldValues: List[ProductmodelillustrationFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductmodelillustrationFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""update production.productmodelillustration
                    set ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(", ")}
                    where productmodelid = {productmodelid} AND illustrationid = {illustrationid}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .on(NamedParameter("productmodelid", ParameterValue.from(compositeId.productmodelid)), NamedParameter("illustrationid", ParameterValue.from(compositeId.illustrationid)))
          .executeUpdate() > 0
    }
  
  }
  override def upsert(unsaved: ProductmodelillustrationRow)(implicit c: Connection): ProductmodelillustrationRow = {
    SQL"""insert into production.productmodelillustration(productmodelid, illustrationid, modifieddate)
          values (
            ${unsaved.productmodelid}::int4,
            ${unsaved.illustrationid}::int4,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productmodelid, illustrationid)
          do update set
            modifieddate = EXCLUDED.modifieddate
          returning productmodelid, illustrationid, modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  val rowParser: RowParser[ProductmodelillustrationRow] =
    RowParser[ProductmodelillustrationRow] { row =>
      Success(
        ProductmodelillustrationRow(
          productmodelid = row[ProductmodelId]("productmodelid"),
          illustrationid = row[IllustrationId]("illustrationid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
}
