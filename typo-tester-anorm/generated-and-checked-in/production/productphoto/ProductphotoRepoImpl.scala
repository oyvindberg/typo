/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productphoto

import adventureworks.Defaulted
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime

object ProductphotoRepoImpl extends ProductphotoRepo {
  override def delete(productphotoid: ProductphotoId)(implicit c: Connection): Boolean = {
    SQL"delete from production.productphoto where productphotoid = $productphotoid".executeUpdate() > 0
  }
  override def insert(unsaved: ProductphotoRow)(implicit c: Connection): ProductphotoRow = {
    SQL"""insert into production.productphoto(productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate)
          values (${unsaved.productphotoid}::int4, ${unsaved.thumbnailphoto}::bytea, ${unsaved.thumbnailphotofilename}, ${unsaved.largephoto}::bytea, ${unsaved.largephotofilename}, ${unsaved.modifieddate}::timestamp)
          returning productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate
       """
      .executeInsert(ProductphotoRow.rowParser(1).single)
  
  }
  override def insert(unsaved: ProductphotoRowUnsaved)(implicit c: Connection): ProductphotoRow = {
    val namedParameters = List(
      Some((NamedParameter("thumbnailphoto", ParameterValue.from(unsaved.thumbnailphoto)), "::bytea")),
      Some((NamedParameter("thumbnailphotofilename", ParameterValue.from(unsaved.thumbnailphotofilename)), "")),
      Some((NamedParameter("largephoto", ParameterValue.from(unsaved.largephoto)), "::bytea")),
      Some((NamedParameter("largephotofilename", ParameterValue.from(unsaved.largephotofilename)), "")),
      unsaved.productphotoid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("productphotoid", ParameterValue.from[ProductphotoId](value)), "::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.productphoto default values
            returning productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate
         """
        .executeInsert(ProductphotoRow.rowParser(1).single)
    } else {
      val q = s"""insert into production.productphoto(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(ProductphotoRow.rowParser(1).single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[ProductphotoRow] = {
    SQL"""select productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate
          from production.productphoto
       """.as(ProductphotoRow.rowParser(1).*)
  }
  override def selectById(productphotoid: ProductphotoId)(implicit c: Connection): Option[ProductphotoRow] = {
    SQL"""select productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate
          from production.productphoto
          where productphotoid = $productphotoid
       """.as(ProductphotoRow.rowParser(1).singleOpt)
  }
  override def selectByIds(productphotoids: Array[ProductphotoId])(implicit c: Connection): List[ProductphotoRow] = {
    SQL"""select productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate
          from production.productphoto
          where productphotoid = ANY($productphotoids)
       """.as(ProductphotoRow.rowParser(1).*)
  
  }
  override def update(row: ProductphotoRow)(implicit c: Connection): Boolean = {
    val productphotoid = row.productphotoid
    SQL"""update production.productphoto
          set thumbnailphoto = ${row.thumbnailphoto}::bytea,
              thumbnailphotofilename = ${row.thumbnailphotofilename},
              largephoto = ${row.largephoto}::bytea,
              largephotofilename = ${row.largephotofilename},
              modifieddate = ${row.modifieddate}::timestamp
          where productphotoid = $productphotoid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: ProductphotoRow)(implicit c: Connection): ProductphotoRow = {
    SQL"""insert into production.productphoto(productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate)
          values (
            ${unsaved.productphotoid}::int4,
            ${unsaved.thumbnailphoto}::bytea,
            ${unsaved.thumbnailphotofilename},
            ${unsaved.largephoto}::bytea,
            ${unsaved.largephotofilename},
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productphotoid)
          do update set
            thumbnailphoto = EXCLUDED.thumbnailphoto,
            thumbnailphotofilename = EXCLUDED.thumbnailphotofilename,
            largephoto = EXCLUDED.largephoto,
            largephotofilename = EXCLUDED.largephotofilename,
            modifieddate = EXCLUDED.modifieddate
          returning productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate
       """
      .executeInsert(ProductphotoRow.rowParser(1).single)
  
  }
}
