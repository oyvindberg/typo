/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productcosthistory

import adventureworks.TypoLocalDateTime
import adventureworks.production.product.ProductId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ProductcosthistoryRow(
  /** Product identification number. Foreign key to Product.ProductID
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Product cost start date. */
  startdate: TypoLocalDateTime,
  /** Product cost end date. */
  enddate: Option[TypoLocalDateTime],
  /** Standard cost of the product. */
  standardcost: BigDecimal,
  modifieddate: TypoLocalDateTime
){
   val compositeId: ProductcosthistoryId = ProductcosthistoryId(productid, startdate)
 }

object ProductcosthistoryRow {
  implicit val reads: Reads[ProductcosthistoryRow] = Reads[ProductcosthistoryRow](json => JsResult.fromTry(
      Try(
        ProductcosthistoryRow(
          productid = json.\("productid").as[ProductId],
          startdate = json.\("startdate").as[TypoLocalDateTime],
          enddate = json.\("enddate").toOption.map(_.as[TypoLocalDateTime]),
          standardcost = json.\("standardcost").as[BigDecimal],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ProductcosthistoryRow] = RowParser[ProductcosthistoryRow] { row =>
    Success(
      ProductcosthistoryRow(
        productid = row[ProductId](idx + 0),
        startdate = row[TypoLocalDateTime](idx + 1),
        enddate = row[Option[TypoLocalDateTime]](idx + 2),
        standardcost = row[BigDecimal](idx + 3),
        modifieddate = row[TypoLocalDateTime](idx + 4)
      )
    )
  }
  implicit val writes: OWrites[ProductcosthistoryRow] = OWrites[ProductcosthistoryRow](o =>
    new JsObject(ListMap[String, JsValue](
      "productid" -> Json.toJson(o.productid),
      "startdate" -> Json.toJson(o.startdate),
      "enddate" -> Json.toJson(o.enddate),
      "standardcost" -> Json.toJson(o.standardcost),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
