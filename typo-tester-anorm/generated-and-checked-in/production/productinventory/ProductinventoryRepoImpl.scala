/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productinventory

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.util.UUID

object ProductinventoryRepoImpl extends ProductinventoryRepo {
  override def delete(compositeId: ProductinventoryId)(implicit c: Connection): Boolean = {
    SQL"delete from production.productinventory where productid = ${compositeId.productid} AND locationid = ${compositeId.locationid}".executeUpdate() > 0
  }
  override def insert(unsaved: ProductinventoryRow)(implicit c: Connection): ProductinventoryRow = {
    SQL"""insert into production.productinventory(productid, locationid, shelf, bin, quantity, rowguid, modifieddate)
          values (${unsaved.productid}::int4, ${unsaved.locationid}::int2, ${unsaved.shelf}, ${unsaved.bin}::int2, ${unsaved.quantity}::int2, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning productid, locationid, shelf, bin, quantity, rowguid, modifieddate::text
       """
      .executeInsert(ProductinventoryRow.rowParser(1).single)
  
  }
  override def insert(unsaved: ProductinventoryRowUnsaved)(implicit c: Connection): ProductinventoryRow = {
    val namedParameters = List(
      Some((NamedParameter("productid", ParameterValue.from(unsaved.productid)), "::int4")),
      Some((NamedParameter("locationid", ParameterValue.from(unsaved.locationid)), "::int2")),
      Some((NamedParameter("shelf", ParameterValue.from(unsaved.shelf)), "")),
      Some((NamedParameter("bin", ParameterValue.from(unsaved.bin)), "::int2")),
      unsaved.quantity match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("quantity", ParameterValue.from[Int](value)), "::int2"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("rowguid", ParameterValue.from[UUID](value)), "::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[TypoLocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.productinventory default values
            returning productid, locationid, shelf, bin, quantity, rowguid, modifieddate::text
         """
        .executeInsert(ProductinventoryRow.rowParser(1).single)
    } else {
      val q = s"""insert into production.productinventory(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning productid, locationid, shelf, bin, quantity, rowguid, modifieddate::text
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(ProductinventoryRow.rowParser(1).single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[ProductinventoryRow] = {
    SQL"""select productid, locationid, shelf, bin, quantity, rowguid, modifieddate::text
          from production.productinventory
       """.as(ProductinventoryRow.rowParser(1).*)
  }
  override def selectById(compositeId: ProductinventoryId)(implicit c: Connection): Option[ProductinventoryRow] = {
    SQL"""select productid, locationid, shelf, bin, quantity, rowguid, modifieddate::text
          from production.productinventory
          where productid = ${compositeId.productid} AND locationid = ${compositeId.locationid}
       """.as(ProductinventoryRow.rowParser(1).singleOpt)
  }
  override def update(row: ProductinventoryRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update production.productinventory
          set shelf = ${row.shelf},
              bin = ${row.bin}::int2,
              quantity = ${row.quantity}::int2,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where productid = ${compositeId.productid} AND locationid = ${compositeId.locationid}
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: ProductinventoryRow)(implicit c: Connection): ProductinventoryRow = {
    SQL"""insert into production.productinventory(productid, locationid, shelf, bin, quantity, rowguid, modifieddate)
          values (
            ${unsaved.productid}::int4,
            ${unsaved.locationid}::int2,
            ${unsaved.shelf},
            ${unsaved.bin}::int2,
            ${unsaved.quantity}::int2,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productid, locationid)
          do update set
            shelf = EXCLUDED.shelf,
            bin = EXCLUDED.bin,
            quantity = EXCLUDED.quantity,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning productid, locationid, shelf, bin, quantity, rowguid, modifieddate::text
       """
      .executeInsert(ProductinventoryRow.rowParser(1).single)
  
  }
}
