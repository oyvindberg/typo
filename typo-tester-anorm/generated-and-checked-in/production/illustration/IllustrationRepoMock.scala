/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package illustration

import java.sql.Connection

class IllustrationRepoMock(toRow: Function1[IllustrationRowUnsaved, IllustrationRow],
                           map: scala.collection.mutable.Map[IllustrationId, IllustrationRow] = scala.collection.mutable.Map.empty) extends IllustrationRepo {
  override def delete(illustrationid: IllustrationId)(implicit c: Connection): Boolean = {
    map.remove(illustrationid).isDefined
  }
  override def insert(unsaved: IllustrationRow)(implicit c: Connection): IllustrationRow = {
    if (map.contains(unsaved.illustrationid))
      sys.error(s"id ${unsaved.illustrationid} already exists")
    else
      map.put(unsaved.illustrationid, unsaved)
    unsaved
  }
  override def insert(unsaved: IllustrationRowUnsaved)(implicit c: Connection): IllustrationRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[IllustrationRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[IllustrationFieldOrIdValue[_]])(implicit c: Connection): List[IllustrationRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, IllustrationFieldValue.illustrationid(value)) => acc.filter(_.illustrationid == value)
      case (acc, IllustrationFieldValue.diagram(value)) => acc.filter(_.diagram == value)
      case (acc, IllustrationFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(illustrationid: IllustrationId)(implicit c: Connection): Option[IllustrationRow] = {
    map.get(illustrationid)
  }
  override def selectByIds(illustrationids: Array[IllustrationId])(implicit c: Connection): List[IllustrationRow] = {
    illustrationids.flatMap(map.get).toList
  }
  override def update(row: IllustrationRow)(implicit c: Connection): Boolean = {
    map.get(row.illustrationid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.illustrationid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(illustrationid: IllustrationId, fieldValues: List[IllustrationFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(illustrationid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, IllustrationFieldValue.diagram(value)) => acc.copy(diagram = value)
          case (acc, IllustrationFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(illustrationid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: IllustrationRow)(implicit c: Connection): IllustrationRow = {
    map.put(unsaved.illustrationid, unsaved)
    unsaved
  }
}
