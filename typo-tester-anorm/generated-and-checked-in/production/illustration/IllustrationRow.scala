/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package illustration

import adventureworks.TypoLocalDateTime
import adventureworks.TypoXml
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class IllustrationRow(
  /** Primary key for Illustration records. */
  illustrationid: IllustrationId,
  /** Illustrations used in manufacturing instructions. Stored as XML. */
  diagram: Option[TypoXml],
  modifieddate: TypoLocalDateTime
)

object IllustrationRow {
  implicit val reads: Reads[IllustrationRow] = Reads[IllustrationRow](json => JsResult.fromTry(
      Try(
        IllustrationRow(
          illustrationid = json.\("illustrationid").as[IllustrationId],
          diagram = json.\("diagram").toOption.map(_.as[TypoXml]),
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[IllustrationRow] = RowParser[IllustrationRow] { row =>
    Success(
      IllustrationRow(
        illustrationid = row[IllustrationId](idx + 0),
        diagram = row[Option[TypoXml]](idx + 1),
        modifieddate = row[TypoLocalDateTime](idx + 2)
      )
    )
  }
  implicit val writes: OWrites[IllustrationRow] = OWrites[IllustrationRow](o =>
    new JsObject(ListMap[String, JsValue](
      "illustrationid" -> Json.toJson(o.illustrationid),
      "diagram" -> Json.toJson(o.diagram),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
