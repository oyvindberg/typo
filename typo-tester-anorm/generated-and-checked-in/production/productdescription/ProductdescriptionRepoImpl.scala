/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productdescription

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.util.UUID
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object ProductdescriptionRepoImpl extends ProductdescriptionRepo {
  override def delete(productdescriptionid: ProductdescriptionId)(implicit c: Connection): Boolean = {
    SQL"delete from production.productdescription where productdescriptionid = $productdescriptionid".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[ProductdescriptionFields, ProductdescriptionRow] = {
    DeleteBuilder("production.productdescription", ProductdescriptionFields)
  }
  override def insert(unsaved: ProductdescriptionRow)(implicit c: Connection): ProductdescriptionRow = {
    SQL"""insert into production.productdescription(productdescriptionid, description, rowguid, modifieddate)
          values (${unsaved.productdescriptionid}::int4, ${unsaved.description}, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning productdescriptionid, description, rowguid, modifieddate::text
       """
      .executeInsert(ProductdescriptionRow.rowParser(1).single)
    
  }
  override def insert(unsaved: ProductdescriptionRowUnsaved)(implicit c: Connection): ProductdescriptionRow = {
    val namedParameters = List(
      Some((NamedParameter("description", ParameterValue.from(unsaved.description)), "")),
      unsaved.productdescriptionid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("productdescriptionid", ParameterValue.from[ProductdescriptionId](value)), "::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("rowguid", ParameterValue.from[UUID](value)), "::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[TypoLocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.productdescription default values
            returning productdescriptionid, description, rowguid, modifieddate::text
         """
        .executeInsert(ProductdescriptionRow.rowParser(1).single)
    } else {
      val q = s"""insert into production.productdescription(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning productdescriptionid, description, rowguid, modifieddate::text
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(ProductdescriptionRow.rowParser(1).single)
    }
    
  }
  override def select: SelectBuilder[ProductdescriptionFields, ProductdescriptionRow] = {
    SelectBuilderSql("production.productdescription", ProductdescriptionFields, ProductdescriptionRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[ProductdescriptionRow] = {
    SQL"""select productdescriptionid, description, rowguid, modifieddate::text
          from production.productdescription
       """.as(ProductdescriptionRow.rowParser(1).*)
  }
  override def selectById(productdescriptionid: ProductdescriptionId)(implicit c: Connection): Option[ProductdescriptionRow] = {
    SQL"""select productdescriptionid, description, rowguid, modifieddate::text
          from production.productdescription
          where productdescriptionid = $productdescriptionid
       """.as(ProductdescriptionRow.rowParser(1).singleOpt)
  }
  override def selectByIds(productdescriptionids: Array[ProductdescriptionId])(implicit c: Connection): List[ProductdescriptionRow] = {
    SQL"""select productdescriptionid, description, rowguid, modifieddate::text
          from production.productdescription
          where productdescriptionid = ANY($productdescriptionids)
       """.as(ProductdescriptionRow.rowParser(1).*)
    
  }
  override def update(row: ProductdescriptionRow)(implicit c: Connection): Boolean = {
    val productdescriptionid = row.productdescriptionid
    SQL"""update production.productdescription
          set description = ${row.description},
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where productdescriptionid = $productdescriptionid
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[ProductdescriptionFields, ProductdescriptionRow] = {
    UpdateBuilder("production.productdescription", ProductdescriptionFields, ProductdescriptionRow.rowParser)
  }
  override def upsert(unsaved: ProductdescriptionRow)(implicit c: Connection): ProductdescriptionRow = {
    SQL"""insert into production.productdescription(productdescriptionid, description, rowguid, modifieddate)
          values (
            ${unsaved.productdescriptionid}::int4,
            ${unsaved.description},
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productdescriptionid)
          do update set
            description = EXCLUDED.description,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning productdescriptionid, description, rowguid, modifieddate::text
       """
      .executeInsert(ProductdescriptionRow.rowParser(1).single)
    
  }
}
