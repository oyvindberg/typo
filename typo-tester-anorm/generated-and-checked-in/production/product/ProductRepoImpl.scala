/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package product

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.public.Flag
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.util.UUID

object ProductRepoImpl extends ProductRepo {
  override def delete(productid: ProductId)(implicit c: Connection): Boolean = {
    SQL"delete from production.product where productid = $productid".executeUpdate() > 0
  }
  override def insert(unsaved: ProductRow)(implicit c: Connection): ProductRow = {
    SQL"""insert into production.product(productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate)
          values (${unsaved.productid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.productnumber}, ${unsaved.makeflag}::"public"."Flag", ${unsaved.finishedgoodsflag}::"public"."Flag", ${unsaved.color}, ${unsaved.safetystocklevel}::int2, ${unsaved.reorderpoint}::int2, ${unsaved.standardcost}::numeric, ${unsaved.listprice}::numeric, ${unsaved.size}, ${unsaved.sizeunitmeasurecode}::bpchar, ${unsaved.weightunitmeasurecode}::bpchar, ${unsaved.weight}::numeric, ${unsaved.daystomanufacture}::int4, ${unsaved.productline}::bpchar, ${unsaved.`class`}::bpchar, ${unsaved.style}::bpchar, ${unsaved.productsubcategoryid}::int4, ${unsaved.productmodelid}::int4, ${unsaved.sellstartdate}::timestamp, ${unsaved.sellenddate}::timestamp, ${unsaved.discontinueddate}::timestamp, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
       """
      .executeInsert(ProductRow.rowParser(1).single)
  
  }
  override def insert(unsaved: ProductRowUnsaved)(implicit c: Connection): ProductRow = {
    val namedParameters = List(
      Some((NamedParameter("name", ParameterValue.from(unsaved.name)), """::"public"."Name"""")),
      Some((NamedParameter("productnumber", ParameterValue.from(unsaved.productnumber)), "")),
      Some((NamedParameter("color", ParameterValue.from(unsaved.color)), "")),
      Some((NamedParameter("safetystocklevel", ParameterValue.from(unsaved.safetystocklevel)), "::int2")),
      Some((NamedParameter("reorderpoint", ParameterValue.from(unsaved.reorderpoint)), "::int2")),
      Some((NamedParameter("standardcost", ParameterValue.from(unsaved.standardcost)), "::numeric")),
      Some((NamedParameter("listprice", ParameterValue.from(unsaved.listprice)), "::numeric")),
      Some((NamedParameter("size", ParameterValue.from(unsaved.size)), "")),
      Some((NamedParameter("sizeunitmeasurecode", ParameterValue.from(unsaved.sizeunitmeasurecode)), "::bpchar")),
      Some((NamedParameter("weightunitmeasurecode", ParameterValue.from(unsaved.weightunitmeasurecode)), "::bpchar")),
      Some((NamedParameter("weight", ParameterValue.from(unsaved.weight)), "::numeric")),
      Some((NamedParameter("daystomanufacture", ParameterValue.from(unsaved.daystomanufacture)), "::int4")),
      Some((NamedParameter("productline", ParameterValue.from(unsaved.productline)), "::bpchar")),
      Some((NamedParameter("class", ParameterValue.from(unsaved.`class`)), "::bpchar")),
      Some((NamedParameter("style", ParameterValue.from(unsaved.style)), "::bpchar")),
      Some((NamedParameter("productsubcategoryid", ParameterValue.from(unsaved.productsubcategoryid)), "::int4")),
      Some((NamedParameter("productmodelid", ParameterValue.from(unsaved.productmodelid)), "::int4")),
      Some((NamedParameter("sellstartdate", ParameterValue.from(unsaved.sellstartdate)), "::timestamp")),
      Some((NamedParameter("sellenddate", ParameterValue.from(unsaved.sellenddate)), "::timestamp")),
      Some((NamedParameter("discontinueddate", ParameterValue.from(unsaved.discontinueddate)), "::timestamp")),
      unsaved.productid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("productid", ParameterValue.from[ProductId](value)), "::int4"))
      },
      unsaved.makeflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("makeflag", ParameterValue.from[Flag](value)), """::"public"."Flag""""))
      },
      unsaved.finishedgoodsflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("finishedgoodsflag", ParameterValue.from[Flag](value)), """::"public"."Flag""""))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("rowguid", ParameterValue.from[UUID](value)), "::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[TypoLocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.product default values
            returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
         """
        .executeInsert(ProductRow.rowParser(1).single)
    } else {
      val q = s"""insert into production.product(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(ProductRow.rowParser(1).single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[ProductRow] = {
    SQL"""select productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
          from production.product
       """.as(ProductRow.rowParser(1).*)
  }
  override def selectById(productid: ProductId)(implicit c: Connection): Option[ProductRow] = {
    SQL"""select productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
          from production.product
          where productid = $productid
       """.as(ProductRow.rowParser(1).singleOpt)
  }
  override def selectByIds(productids: Array[ProductId])(implicit c: Connection): List[ProductRow] = {
    SQL"""select productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
          from production.product
          where productid = ANY($productids)
       """.as(ProductRow.rowParser(1).*)
  
  }
  override def update(row: ProductRow)(implicit c: Connection): Boolean = {
    val productid = row.productid
    SQL"""update production.product
          set "name" = ${row.name}::"public"."Name",
              productnumber = ${row.productnumber},
              makeflag = ${row.makeflag}::"public"."Flag",
              finishedgoodsflag = ${row.finishedgoodsflag}::"public"."Flag",
              color = ${row.color},
              safetystocklevel = ${row.safetystocklevel}::int2,
              reorderpoint = ${row.reorderpoint}::int2,
              standardcost = ${row.standardcost}::numeric,
              listprice = ${row.listprice}::numeric,
              "size" = ${row.size},
              sizeunitmeasurecode = ${row.sizeunitmeasurecode}::bpchar,
              weightunitmeasurecode = ${row.weightunitmeasurecode}::bpchar,
              weight = ${row.weight}::numeric,
              daystomanufacture = ${row.daystomanufacture}::int4,
              productline = ${row.productline}::bpchar,
              "class" = ${row.`class`}::bpchar,
              "style" = ${row.style}::bpchar,
              productsubcategoryid = ${row.productsubcategoryid}::int4,
              productmodelid = ${row.productmodelid}::int4,
              sellstartdate = ${row.sellstartdate}::timestamp,
              sellenddate = ${row.sellenddate}::timestamp,
              discontinueddate = ${row.discontinueddate}::timestamp,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where productid = $productid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: ProductRow)(implicit c: Connection): ProductRow = {
    SQL"""insert into production.product(productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate)
          values (
            ${unsaved.productid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.productnumber},
            ${unsaved.makeflag}::"public"."Flag",
            ${unsaved.finishedgoodsflag}::"public"."Flag",
            ${unsaved.color},
            ${unsaved.safetystocklevel}::int2,
            ${unsaved.reorderpoint}::int2,
            ${unsaved.standardcost}::numeric,
            ${unsaved.listprice}::numeric,
            ${unsaved.size},
            ${unsaved.sizeunitmeasurecode}::bpchar,
            ${unsaved.weightunitmeasurecode}::bpchar,
            ${unsaved.weight}::numeric,
            ${unsaved.daystomanufacture}::int4,
            ${unsaved.productline}::bpchar,
            ${unsaved.`class`}::bpchar,
            ${unsaved.style}::bpchar,
            ${unsaved.productsubcategoryid}::int4,
            ${unsaved.productmodelid}::int4,
            ${unsaved.sellstartdate}::timestamp,
            ${unsaved.sellenddate}::timestamp,
            ${unsaved.discontinueddate}::timestamp,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productid)
          do update set
            "name" = EXCLUDED."name",
            productnumber = EXCLUDED.productnumber,
            makeflag = EXCLUDED.makeflag,
            finishedgoodsflag = EXCLUDED.finishedgoodsflag,
            color = EXCLUDED.color,
            safetystocklevel = EXCLUDED.safetystocklevel,
            reorderpoint = EXCLUDED.reorderpoint,
            standardcost = EXCLUDED.standardcost,
            listprice = EXCLUDED.listprice,
            "size" = EXCLUDED."size",
            sizeunitmeasurecode = EXCLUDED.sizeunitmeasurecode,
            weightunitmeasurecode = EXCLUDED.weightunitmeasurecode,
            weight = EXCLUDED.weight,
            daystomanufacture = EXCLUDED.daystomanufacture,
            productline = EXCLUDED.productline,
            "class" = EXCLUDED."class",
            "style" = EXCLUDED."style",
            productsubcategoryid = EXCLUDED.productsubcategoryid,
            productmodelid = EXCLUDED.productmodelid,
            sellstartdate = EXCLUDED.sellstartdate,
            sellenddate = EXCLUDED.sellenddate,
            discontinueddate = EXCLUDED.discontinueddate,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
       """
      .executeInsert(ProductRow.rowParser(1).single)
  
  }
}
