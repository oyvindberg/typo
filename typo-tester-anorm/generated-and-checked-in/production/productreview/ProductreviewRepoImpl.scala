/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productreview

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object ProductreviewRepoImpl extends ProductreviewRepo {
  override def delete(productreviewid: ProductreviewId)(implicit c: Connection): Boolean = {
    SQL"delete from production.productreview where productreviewid = $productreviewid".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[ProductreviewFields, ProductreviewRow] = {
    DeleteBuilder("production.productreview", ProductreviewFields)
  }
  override def insert(unsaved: ProductreviewRow)(implicit c: Connection): ProductreviewRow = {
    SQL"""insert into production.productreview(productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate)
          values (${unsaved.productreviewid}::int4, ${unsaved.productid}::int4, ${unsaved.reviewername}::"public"."Name", ${unsaved.reviewdate}::timestamp, ${unsaved.emailaddress}, ${unsaved.rating}::int4, ${unsaved.comments}, ${unsaved.modifieddate}::timestamp)
          returning productreviewid, productid, reviewername, reviewdate::text, emailaddress, rating, "comments", modifieddate::text
       """
      .executeInsert(ProductreviewRow.rowParser(1).single)
    
  }
  override def insert(unsaved: ProductreviewRowUnsaved)(implicit c: Connection): ProductreviewRow = {
    val namedParameters = List(
      Some((NamedParameter("productid", ParameterValue.from(unsaved.productid)), "::int4")),
      Some((NamedParameter("reviewername", ParameterValue.from(unsaved.reviewername)), """::"public"."Name"""")),
      Some((NamedParameter("emailaddress", ParameterValue.from(unsaved.emailaddress)), "")),
      Some((NamedParameter("rating", ParameterValue.from(unsaved.rating)), "::int4")),
      Some((NamedParameter("comments", ParameterValue.from(unsaved.comments)), "")),
      unsaved.productreviewid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("productreviewid", ParameterValue.from[ProductreviewId](value)), "::int4"))
      },
      unsaved.reviewdate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("reviewdate", ParameterValue.from[TypoLocalDateTime](value)), "::timestamp"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[TypoLocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.productreview default values
            returning productreviewid, productid, reviewername, reviewdate::text, emailaddress, rating, "comments", modifieddate::text
         """
        .executeInsert(ProductreviewRow.rowParser(1).single)
    } else {
      val q = s"""insert into production.productreview(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning productreviewid, productid, reviewername, reviewdate::text, emailaddress, rating, "comments", modifieddate::text
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(ProductreviewRow.rowParser(1).single)
    }
    
  }
  override def select: SelectBuilder[ProductreviewFields, ProductreviewRow] = {
    SelectBuilderSql("production.productreview", ProductreviewFields, ProductreviewRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[ProductreviewRow] = {
    SQL"""select productreviewid, productid, reviewername, reviewdate::text, emailaddress, rating, "comments", modifieddate::text
          from production.productreview
       """.as(ProductreviewRow.rowParser(1).*)
  }
  override def selectById(productreviewid: ProductreviewId)(implicit c: Connection): Option[ProductreviewRow] = {
    SQL"""select productreviewid, productid, reviewername, reviewdate::text, emailaddress, rating, "comments", modifieddate::text
          from production.productreview
          where productreviewid = $productreviewid
       """.as(ProductreviewRow.rowParser(1).singleOpt)
  }
  override def selectByIds(productreviewids: Array[ProductreviewId])(implicit c: Connection): List[ProductreviewRow] = {
    SQL"""select productreviewid, productid, reviewername, reviewdate::text, emailaddress, rating, "comments", modifieddate::text
          from production.productreview
          where productreviewid = ANY($productreviewids)
       """.as(ProductreviewRow.rowParser(1).*)
    
  }
  override def update(row: ProductreviewRow)(implicit c: Connection): Boolean = {
    val productreviewid = row.productreviewid
    SQL"""update production.productreview
          set productid = ${row.productid}::int4,
              reviewername = ${row.reviewername}::"public"."Name",
              reviewdate = ${row.reviewdate}::timestamp,
              emailaddress = ${row.emailaddress},
              rating = ${row.rating}::int4,
              "comments" = ${row.comments},
              modifieddate = ${row.modifieddate}::timestamp
          where productreviewid = $productreviewid
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[ProductreviewFields, ProductreviewRow] = {
    UpdateBuilder("production.productreview", ProductreviewFields, ProductreviewRow.rowParser)
  }
  override def upsert(unsaved: ProductreviewRow)(implicit c: Connection): ProductreviewRow = {
    SQL"""insert into production.productreview(productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate)
          values (
            ${unsaved.productreviewid}::int4,
            ${unsaved.productid}::int4,
            ${unsaved.reviewername}::"public"."Name",
            ${unsaved.reviewdate}::timestamp,
            ${unsaved.emailaddress},
            ${unsaved.rating}::int4,
            ${unsaved.comments},
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productreviewid)
          do update set
            productid = EXCLUDED.productid,
            reviewername = EXCLUDED.reviewername,
            reviewdate = EXCLUDED.reviewdate,
            emailaddress = EXCLUDED.emailaddress,
            rating = EXCLUDED.rating,
            "comments" = EXCLUDED."comments",
            modifieddate = EXCLUDED.modifieddate
          returning productreviewid, productid, reviewername, reviewdate::text, emailaddress, rating, "comments", modifieddate::text
       """
      .executeInsert(ProductreviewRow.rowParser(1).single)
    
  }
}
