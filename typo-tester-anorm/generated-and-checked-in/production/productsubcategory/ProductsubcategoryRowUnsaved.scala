/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productsubcategory

import adventureworks.Defaulted
import adventureworks.production.productcategory.ProductcategoryId
import adventureworks.public.Name
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `production.productsubcategory` which has not been persisted yet */
case class ProductsubcategoryRowUnsaved(
  /** Product category identification number. Foreign key to ProductCategory.ProductCategoryID.
      Points to [[productcategory.ProductcategoryRow.productcategoryid]] */
  productcategoryid: ProductcategoryId,
  /** Subcategory description. */
  name: Name,
  /** Default: nextval('production.productsubcategory_productsubcategoryid_seq'::regclass)
      Primary key for ProductSubcategory records. */
  productsubcategoryid: Defaulted[ProductsubcategoryId] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(productsubcategoryidDefault: => ProductsubcategoryId, rowguidDefault: => UUID, modifieddateDefault: => LocalDateTime): ProductsubcategoryRow =
    ProductsubcategoryRow(
      productcategoryid = productcategoryid,
      name = name,
      productsubcategoryid = productsubcategoryid match {
                               case Defaulted.UseDefault => productsubcategoryidDefault
                               case Defaulted.Provided(value) => value
                             },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductsubcategoryRowUnsaved {
  implicit val oFormat: OFormat[ProductsubcategoryRowUnsaved] = new OFormat[ProductsubcategoryRowUnsaved]{
    override def writes(o: ProductsubcategoryRowUnsaved): JsObject =
      Json.obj(
        "productcategoryid" -> o.productcategoryid,
        "name" -> o.name,
        "productsubcategoryid" -> o.productsubcategoryid,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[ProductsubcategoryRowUnsaved] = {
      JsResult.fromTry(
        Try(
          ProductsubcategoryRowUnsaved(
            productcategoryid = json.\("productcategoryid").as[ProductcategoryId],
            name = json.\("name").as[Name],
            productsubcategoryid = json.\("productsubcategoryid").as[Defaulted[ProductsubcategoryId]],
            rowguid = json.\("rowguid").as[Defaulted[UUID]],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
