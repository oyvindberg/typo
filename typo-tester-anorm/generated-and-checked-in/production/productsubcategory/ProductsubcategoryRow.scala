/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productsubcategory

import adventureworks.TypoLocalDateTime
import adventureworks.production.productcategory.ProductcategoryId
import adventureworks.public.Name
import anorm.Column
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class ProductsubcategoryRow(
  /** Primary key for ProductSubcategory records. */
  productsubcategoryid: ProductsubcategoryId,
  /** Product category identification number. Foreign key to ProductCategory.ProductCategoryID.
      Points to [[productcategory.ProductcategoryRow.productcategoryid]] */
  productcategoryid: ProductcategoryId,
  /** Subcategory description. */
  name: Name,
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object ProductsubcategoryRow {
  implicit val reads: Reads[ProductsubcategoryRow] = Reads[ProductsubcategoryRow](json => JsResult.fromTry(
      Try(
        ProductsubcategoryRow(
          productsubcategoryid = json.\("productsubcategoryid").as(ProductsubcategoryId.reads),
          productcategoryid = json.\("productcategoryid").as(ProductcategoryId.reads),
          name = json.\("name").as(Name.reads),
          rowguid = json.\("rowguid").as(Reads.uuidReads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ProductsubcategoryRow] = RowParser[ProductsubcategoryRow] { row =>
    Success(
      ProductsubcategoryRow(
        productsubcategoryid = row(idx + 0)(ProductsubcategoryId.column),
        productcategoryid = row(idx + 1)(ProductcategoryId.column),
        name = row(idx + 2)(Name.column),
        rowguid = row(idx + 3)(Column.columnToUUID),
        modifieddate = row(idx + 4)(TypoLocalDateTime.column)
      )
    )
  }
  implicit val writes: OWrites[ProductsubcategoryRow] = OWrites[ProductsubcategoryRow](o =>
    new JsObject(ListMap[String, JsValue](
      "productsubcategoryid" -> ProductsubcategoryId.writes.writes(o.productsubcategoryid),
      "productcategoryid" -> ProductcategoryId.writes.writes(o.productcategoryid),
      "name" -> Name.writes.writes(o.name),
      "rowguid" -> Writes.UuidWrites.writes(o.rowguid),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
