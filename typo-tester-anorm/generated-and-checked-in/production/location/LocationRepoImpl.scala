/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package location

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object LocationRepoImpl extends LocationRepo {
  override def delete(locationid: LocationId)(implicit c: Connection): Boolean = {
    SQL"""delete from production."location" where locationid = $locationid""".executeUpdate() > 0
  }
  override def insert(unsaved: LocationRow)(implicit c: Connection): LocationRow = {
    SQL"""insert into production."location"(locationid, "name", costrate, availability, modifieddate)
          values (${unsaved.locationid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.costrate}::numeric, ${unsaved.availability}::numeric, ${unsaved.modifieddate}::timestamp)
          returning locationid, "name", costrate, availability, modifieddate::text
       """
      .executeInsert(LocationRow.rowParser(1).single)
    
  }
  override def insert(unsaved: LocationRowUnsaved)(implicit c: Connection): LocationRow = {
    val namedParameters = List(
      Some((NamedParameter("name", ParameterValue.from(unsaved.name)), """::"public"."Name"""")),
      unsaved.locationid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("locationid", ParameterValue.from[LocationId](value)), "::int4"))
      },
      unsaved.costrate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("costrate", ParameterValue.from[BigDecimal](value)), "::numeric"))
      },
      unsaved.availability match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("availability", ParameterValue.from[BigDecimal](value)), "::numeric"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[TypoLocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production."location" default values
            returning locationid, "name", costrate, availability, modifieddate::text
         """
        .executeInsert(LocationRow.rowParser(1).single)
    } else {
      val q = s"""insert into production."location"(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning locationid, "name", costrate, availability, modifieddate::text
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(LocationRow.rowParser(1).single)
    }
    
  }
  override def selectAll(implicit c: Connection): List[LocationRow] = {
    SQL"""select locationid, "name", costrate, availability, modifieddate::text
          from production."location"
       """.as(LocationRow.rowParser(1).*)
  }
  override def selectById(locationid: LocationId)(implicit c: Connection): Option[LocationRow] = {
    SQL"""select locationid, "name", costrate, availability, modifieddate::text
          from production."location"
          where locationid = $locationid
       """.as(LocationRow.rowParser(1).singleOpt)
  }
  override def selectByIds(locationids: Array[LocationId])(implicit c: Connection): List[LocationRow] = {
    SQL"""select locationid, "name", costrate, availability, modifieddate::text
          from production."location"
          where locationid = ANY($locationids)
       """.as(LocationRow.rowParser(1).*)
    
  }
  override def update(row: LocationRow)(implicit c: Connection): Boolean = {
    val locationid = row.locationid
    SQL"""update production."location"
          set "name" = ${row.name}::"public"."Name",
              costrate = ${row.costrate}::numeric,
              availability = ${row.availability}::numeric,
              modifieddate = ${row.modifieddate}::timestamp
          where locationid = $locationid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: LocationRow)(implicit c: Connection): LocationRow = {
    SQL"""insert into production."location"(locationid, "name", costrate, availability, modifieddate)
          values (
            ${unsaved.locationid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.costrate}::numeric,
            ${unsaved.availability}::numeric,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (locationid)
          do update set
            "name" = EXCLUDED."name",
            costrate = EXCLUDED.costrate,
            availability = EXCLUDED.availability,
            modifieddate = EXCLUDED.modifieddate
          returning locationid, "name", costrate, availability, modifieddate::text
       """
      .executeInsert(LocationRow.rowParser(1).single)
    
  }
}
