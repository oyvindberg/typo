/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productproductphoto

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.public.Flag
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection

object ProductproductphotoRepoImpl extends ProductproductphotoRepo {
  override def delete(compositeId: ProductproductphotoId)(implicit c: Connection): Boolean = {
    SQL"delete from production.productproductphoto where productid = ${compositeId.productid} AND productphotoid = ${compositeId.productphotoid}".executeUpdate() > 0
  }
  override def insert(unsaved: ProductproductphotoRow)(implicit c: Connection): ProductproductphotoRow = {
    SQL"""insert into production.productproductphoto(productid, productphotoid, "primary", modifieddate)
          values (${unsaved.productid}::int4, ${unsaved.productphotoid}::int4, ${unsaved.primary}::"public"."Flag", ${unsaved.modifieddate}::timestamp)
          returning productid, productphotoid, "primary", modifieddate::text
       """
      .executeInsert(ProductproductphotoRow.rowParser(1).single)
    
  }
  override def insert(unsaved: ProductproductphotoRowUnsaved)(implicit c: Connection): ProductproductphotoRow = {
    val namedParameters = List(
      Some((NamedParameter("productid", ParameterValue.from(unsaved.productid)), "::int4")),
      Some((NamedParameter("productphotoid", ParameterValue.from(unsaved.productphotoid)), "::int4")),
      unsaved.primary match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("primary", ParameterValue.from[Flag](value)), """::"public"."Flag""""))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[TypoLocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.productproductphoto default values
            returning productid, productphotoid, "primary", modifieddate::text
         """
        .executeInsert(ProductproductphotoRow.rowParser(1).single)
    } else {
      val q = s"""insert into production.productproductphoto(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning productid, productphotoid, "primary", modifieddate::text
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(ProductproductphotoRow.rowParser(1).single)
    }
    
  }
  override def selectAll(implicit c: Connection): List[ProductproductphotoRow] = {
    SQL"""select productid, productphotoid, "primary", modifieddate::text
          from production.productproductphoto
       """.as(ProductproductphotoRow.rowParser(1).*)
  }
  override def selectById(compositeId: ProductproductphotoId)(implicit c: Connection): Option[ProductproductphotoRow] = {
    SQL"""select productid, productphotoid, "primary", modifieddate::text
          from production.productproductphoto
          where productid = ${compositeId.productid} AND productphotoid = ${compositeId.productphotoid}
       """.as(ProductproductphotoRow.rowParser(1).singleOpt)
  }
  override def update(row: ProductproductphotoRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update production.productproductphoto
          set "primary" = ${row.primary}::"public"."Flag",
              modifieddate = ${row.modifieddate}::timestamp
          where productid = ${compositeId.productid} AND productphotoid = ${compositeId.productphotoid}
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: ProductproductphotoRow)(implicit c: Connection): ProductproductphotoRow = {
    SQL"""insert into production.productproductphoto(productid, productphotoid, "primary", modifieddate)
          values (
            ${unsaved.productid}::int4,
            ${unsaved.productphotoid}::int4,
            ${unsaved.primary}::"public"."Flag",
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productid, productphotoid)
          do update set
            "primary" = EXCLUDED."primary",
            modifieddate = EXCLUDED.modifieddate
          returning productid, productphotoid, "primary", modifieddate::text
       """
      .executeInsert(ProductproductphotoRow.rowParser(1).single)
    
  }
}
