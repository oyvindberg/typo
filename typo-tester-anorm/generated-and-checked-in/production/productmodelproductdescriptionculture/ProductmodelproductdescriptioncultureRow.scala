/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodelproductdescriptionculture

import adventureworks.TypoLocalDateTime
import adventureworks.production.culture.CultureId
import adventureworks.production.productdescription.ProductdescriptionId
import adventureworks.production.productmodel.ProductmodelId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ProductmodelproductdescriptioncultureRow(
  /** Primary key. Foreign key to ProductModel.ProductModelID.
      Points to [[productmodel.ProductmodelRow.productmodelid]] */
  productmodelid: ProductmodelId,
  /** Primary key. Foreign key to ProductDescription.ProductDescriptionID.
      Points to [[productdescription.ProductdescriptionRow.productdescriptionid]] */
  productdescriptionid: ProductdescriptionId,
  /** Culture identification number. Foreign key to Culture.CultureID.
      Points to [[culture.CultureRow.cultureid]] */
  cultureid: CultureId,
  modifieddate: TypoLocalDateTime
){
   val compositeId: ProductmodelproductdescriptioncultureId = ProductmodelproductdescriptioncultureId(productmodelid, productdescriptionid, cultureid)
 }

object ProductmodelproductdescriptioncultureRow {
  implicit val reads: Reads[ProductmodelproductdescriptioncultureRow] = Reads[ProductmodelproductdescriptioncultureRow](json => JsResult.fromTry(
      Try(
        ProductmodelproductdescriptioncultureRow(
          productmodelid = json.\("productmodelid").as[ProductmodelId],
          productdescriptionid = json.\("productdescriptionid").as[ProductdescriptionId],
          cultureid = json.\("cultureid").as[CultureId],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ProductmodelproductdescriptioncultureRow] = RowParser[ProductmodelproductdescriptioncultureRow] { row =>
    Success(
      ProductmodelproductdescriptioncultureRow(
        productmodelid = row[ProductmodelId](idx + 0),
        productdescriptionid = row[ProductdescriptionId](idx + 1),
        cultureid = row[CultureId](idx + 2),
        modifieddate = row[TypoLocalDateTime](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[ProductmodelproductdescriptioncultureRow] = OWrites[ProductmodelproductdescriptioncultureRow](o =>
    new JsObject(ListMap[String, JsValue](
      "productmodelid" -> Json.toJson(o.productmodelid),
      "productdescriptionid" -> Json.toJson(o.productdescriptionid),
      "cultureid" -> Json.toJson(o.cultureid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
