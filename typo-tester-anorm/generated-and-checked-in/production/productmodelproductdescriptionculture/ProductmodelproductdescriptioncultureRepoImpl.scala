/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodelproductdescriptionculture

import adventureworks.Defaulted
import adventureworks.production.culture.CultureId
import adventureworks.production.productdescription.ProductdescriptionId
import adventureworks.production.productmodel.ProductmodelId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object ProductmodelproductdescriptioncultureRepoImpl extends ProductmodelproductdescriptioncultureRepo {
  override def delete(compositeId: ProductmodelproductdescriptioncultureId)(implicit c: Connection): Boolean = {
    SQL"delete from production.productmodelproductdescriptionculture where productmodelid = ${compositeId.productmodelid} AND productdescriptionid = ${compositeId.productdescriptionid} AND cultureid = ${compositeId.cultureid}".executeUpdate() > 0
  }
  override def insert(unsaved: ProductmodelproductdescriptioncultureRow)(implicit c: Connection): ProductmodelproductdescriptioncultureRow = {
    SQL"""insert into production.productmodelproductdescriptionculture(productmodelid, productdescriptionid, cultureid, modifieddate)
          values (${unsaved.productmodelid}::int4, ${unsaved.productdescriptionid}::int4, ${unsaved.cultureid}::bpchar, ${unsaved.modifieddate}::timestamp)
          returning productmodelid, productdescriptionid, cultureid, modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  override def insert(unsaved: ProductmodelproductdescriptioncultureRowUnsaved)(implicit c: Connection): ProductmodelproductdescriptioncultureRow = {
    val namedParameters = List(
      Some((NamedParameter("productmodelid", ParameterValue.from(unsaved.productmodelid)), "::int4")),
      Some((NamedParameter("productdescriptionid", ParameterValue.from(unsaved.productdescriptionid)), "::int4")),
      Some((NamedParameter("cultureid", ParameterValue.from(unsaved.cultureid)), "::bpchar")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.productmodelproductdescriptionculture default values
            returning productmodelid, productdescriptionid, cultureid, modifieddate
         """
        .executeInsert(rowParser.single)
    } else {
      val q = s"""insert into production.productmodelproductdescriptionculture(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning productmodelid, productdescriptionid, cultureid, modifieddate
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(rowParser.single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[ProductmodelproductdescriptioncultureRow] = {
    SQL"""select productmodelid, productdescriptionid, cultureid, modifieddate
          from production.productmodelproductdescriptionculture
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[ProductmodelproductdescriptioncultureFieldOrIdValue[_]])(implicit c: Connection): List[ProductmodelproductdescriptioncultureRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductmodelproductdescriptioncultureFieldValue.productmodelid(value) => NamedParameter("productmodelid", ParameterValue.from(value))
          case ProductmodelproductdescriptioncultureFieldValue.productdescriptionid(value) => NamedParameter("productdescriptionid", ParameterValue.from(value))
          case ProductmodelproductdescriptioncultureFieldValue.cultureid(value) => NamedParameter("cultureid", ParameterValue.from(value))
          case ProductmodelproductdescriptioncultureFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select productmodelid, productdescriptionid, cultureid, modifieddate
                    from production.productmodelproductdescriptionculture
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: ProductmodelproductdescriptioncultureId)(implicit c: Connection): Option[ProductmodelproductdescriptioncultureRow] = {
    SQL"""select productmodelid, productdescriptionid, cultureid, modifieddate
          from production.productmodelproductdescriptionculture
          where productmodelid = ${compositeId.productmodelid} AND productdescriptionid = ${compositeId.productdescriptionid} AND cultureid = ${compositeId.cultureid}
       """.as(rowParser.singleOpt)
  }
  override def update(row: ProductmodelproductdescriptioncultureRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update production.productmodelproductdescriptionculture
          set modifieddate = ${row.modifieddate}::timestamp
          where productmodelid = ${compositeId.productmodelid} AND productdescriptionid = ${compositeId.productdescriptionid} AND cultureid = ${compositeId.cultureid}
       """.executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: ProductmodelproductdescriptioncultureId, fieldValues: List[ProductmodelproductdescriptioncultureFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductmodelproductdescriptioncultureFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""update production.productmodelproductdescriptionculture
                    set ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(", ")}
                    where productmodelid = {productmodelid} AND productdescriptionid = {productdescriptionid} AND cultureid = {cultureid}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .on(NamedParameter("productmodelid", ParameterValue.from(compositeId.productmodelid)), NamedParameter("productdescriptionid", ParameterValue.from(compositeId.productdescriptionid)), NamedParameter("cultureid", ParameterValue.from(compositeId.cultureid)))
          .executeUpdate() > 0
    }
  
  }
  override def upsert(unsaved: ProductmodelproductdescriptioncultureRow)(implicit c: Connection): ProductmodelproductdescriptioncultureRow = {
    SQL"""insert into production.productmodelproductdescriptionculture(productmodelid, productdescriptionid, cultureid, modifieddate)
          values (
            ${unsaved.productmodelid}::int4,
            ${unsaved.productdescriptionid}::int4,
            ${unsaved.cultureid}::bpchar,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productmodelid, productdescriptionid, cultureid)
          do update set
            modifieddate = EXCLUDED.modifieddate
          returning productmodelid, productdescriptionid, cultureid, modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  val rowParser: RowParser[ProductmodelproductdescriptioncultureRow] =
    RowParser[ProductmodelproductdescriptioncultureRow] { row =>
      Success(
        ProductmodelproductdescriptioncultureRow(
          productmodelid = row[ProductmodelId]("productmodelid"),
          productdescriptionid = row[ProductdescriptionId]("productdescriptionid"),
          cultureid = row[CultureId]("cultureid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
}
