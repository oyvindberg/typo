/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import adventureworks.Defaulted
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.time.LocalDateTime

object WorkorderRepoImpl extends WorkorderRepo {
  override def delete(workorderid: WorkorderId)(implicit c: Connection): Boolean = {
    SQL"delete from production.workorder where workorderid = $workorderid".executeUpdate() > 0
  }
  override def insert(unsaved: WorkorderRow)(implicit c: Connection): WorkorderRow = {
    SQL"""insert into production.workorder(workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate)
          values (${unsaved.workorderid}::int4, ${unsaved.productid}::int4, ${unsaved.orderqty}::int4, ${unsaved.scrappedqty}::int2, ${unsaved.startdate}::timestamp, ${unsaved.enddate}::timestamp, ${unsaved.duedate}::timestamp, ${unsaved.scrapreasonid}::int2, ${unsaved.modifieddate}::timestamp)
          returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
       """
      .executeInsert(WorkorderRow.rowParser(1).single)
  
  }
  override def insert(unsaved: WorkorderRowUnsaved)(implicit c: Connection): WorkorderRow = {
    val namedParameters = List(
      Some((NamedParameter("productid", ParameterValue.from(unsaved.productid)), "::int4")),
      Some((NamedParameter("orderqty", ParameterValue.from(unsaved.orderqty)), "::int4")),
      Some((NamedParameter("scrappedqty", ParameterValue.from(unsaved.scrappedqty)), "::int2")),
      Some((NamedParameter("startdate", ParameterValue.from(unsaved.startdate)), "::timestamp")),
      Some((NamedParameter("enddate", ParameterValue.from(unsaved.enddate)), "::timestamp")),
      Some((NamedParameter("duedate", ParameterValue.from(unsaved.duedate)), "::timestamp")),
      Some((NamedParameter("scrapreasonid", ParameterValue.from(unsaved.scrapreasonid)), "::int2")),
      unsaved.workorderid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("workorderid", ParameterValue.from[WorkorderId](value)), "::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.workorder default values
            returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
         """
        .executeInsert(WorkorderRow.rowParser(1).single)
    } else {
      val q = s"""insert into production.workorder(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(WorkorderRow.rowParser(1).single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[WorkorderRow] = {
    SQL"""select workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
          from production.workorder
       """.as(WorkorderRow.rowParser(1).*)
  }
  override def selectById(workorderid: WorkorderId)(implicit c: Connection): Option[WorkorderRow] = {
    SQL"""select workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
          from production.workorder
          where workorderid = $workorderid
       """.as(WorkorderRow.rowParser(1).singleOpt)
  }
  override def selectByIds(workorderids: Array[WorkorderId])(implicit c: Connection): List[WorkorderRow] = {
    SQL"""select workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
          from production.workorder
          where workorderid = ANY($workorderids)
       """.as(WorkorderRow.rowParser(1).*)
  
  }
  override def update(row: WorkorderRow)(implicit c: Connection): Boolean = {
    val workorderid = row.workorderid
    SQL"""update production.workorder
          set productid = ${row.productid}::int4,
              orderqty = ${row.orderqty}::int4,
              scrappedqty = ${row.scrappedqty}::int2,
              startdate = ${row.startdate}::timestamp,
              enddate = ${row.enddate}::timestamp,
              duedate = ${row.duedate}::timestamp,
              scrapreasonid = ${row.scrapreasonid}::int2,
              modifieddate = ${row.modifieddate}::timestamp
          where workorderid = $workorderid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: WorkorderRow)(implicit c: Connection): WorkorderRow = {
    SQL"""insert into production.workorder(workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate)
          values (
            ${unsaved.workorderid}::int4,
            ${unsaved.productid}::int4,
            ${unsaved.orderqty}::int4,
            ${unsaved.scrappedqty}::int2,
            ${unsaved.startdate}::timestamp,
            ${unsaved.enddate}::timestamp,
            ${unsaved.duedate}::timestamp,
            ${unsaved.scrapreasonid}::int2,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (workorderid)
          do update set
            productid = EXCLUDED.productid,
            orderqty = EXCLUDED.orderqty,
            scrappedqty = EXCLUDED.scrappedqty,
            startdate = EXCLUDED.startdate,
            enddate = EXCLUDED.enddate,
            duedate = EXCLUDED.duedate,
            scrapreasonid = EXCLUDED.scrapreasonid,
            modifieddate = EXCLUDED.modifieddate
          returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
       """
      .executeInsert(WorkorderRow.rowParser(1).single)
  
  }
}
