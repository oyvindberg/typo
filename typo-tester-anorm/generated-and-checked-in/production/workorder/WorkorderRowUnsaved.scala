/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.production.scrapreason.ScrapreasonId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** This class corresponds to a row in table `production.workorder` which has not been persisted yet */
case class WorkorderRowUnsaved(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Product quantity to build. */
  orderqty: Int,
  /** Quantity that failed inspection. */
  scrappedqty: Int,
  /** Work order start date. */
  startdate: TypoLocalDateTime,
  /** Work order end date. */
  enddate: Option[TypoLocalDateTime],
  /** Work order due date. */
  duedate: TypoLocalDateTime,
  /** Reason for inspection failure.
      Points to [[scrapreason.ScrapreasonRow.scrapreasonid]] */
  scrapreasonid: Option[ScrapreasonId],
  /** Default: nextval('production.workorder_workorderid_seq'::regclass)
      Primary key for WorkOrder records. */
  workorderid: Defaulted[WorkorderId] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(workorderidDefault: => WorkorderId, modifieddateDefault: => TypoLocalDateTime): WorkorderRow =
    WorkorderRow(
      productid = productid,
      orderqty = orderqty,
      scrappedqty = scrappedqty,
      startdate = startdate,
      enddate = enddate,
      duedate = duedate,
      scrapreasonid = scrapreasonid,
      workorderid = workorderid match {
                      case Defaulted.UseDefault => workorderidDefault
                      case Defaulted.Provided(value) => value
                    },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object WorkorderRowUnsaved {
  implicit val reads: Reads[WorkorderRowUnsaved] = Reads[WorkorderRowUnsaved](json => JsResult.fromTry(
      Try(
        WorkorderRowUnsaved(
          productid = json.\("productid").as[ProductId],
          orderqty = json.\("orderqty").as[Int],
          scrappedqty = json.\("scrappedqty").as[Int],
          startdate = json.\("startdate").as[TypoLocalDateTime],
          enddate = json.\("enddate").toOption.map(_.as[TypoLocalDateTime]),
          duedate = json.\("duedate").as[TypoLocalDateTime],
          scrapreasonid = json.\("scrapreasonid").toOption.map(_.as[ScrapreasonId]),
          workorderid = json.\("workorderid").as[Defaulted[WorkorderId]],
          modifieddate = json.\("modifieddate").as[Defaulted[TypoLocalDateTime]]
        )
      )
    ),
  )
  implicit val writes: OWrites[WorkorderRowUnsaved] = OWrites[WorkorderRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "productid" -> Json.toJson(o.productid),
      "orderqty" -> Json.toJson(o.orderqty),
      "scrappedqty" -> Json.toJson(o.scrappedqty),
      "startdate" -> Json.toJson(o.startdate),
      "enddate" -> Json.toJson(o.enddate),
      "duedate" -> Json.toJson(o.duedate),
      "scrapreasonid" -> Json.toJson(o.scrapreasonid),
      "workorderid" -> Json.toJson(o.workorderid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
