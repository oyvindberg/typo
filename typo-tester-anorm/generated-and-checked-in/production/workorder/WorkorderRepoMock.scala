/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import java.sql.Connection

class WorkorderRepoMock(toRow: Function1[WorkorderRowUnsaved, WorkorderRow],
                        map: scala.collection.mutable.Map[WorkorderId, WorkorderRow] = scala.collection.mutable.Map.empty) extends WorkorderRepo {
  override def delete(workorderid: WorkorderId)(implicit c: Connection): Boolean = {
    map.remove(workorderid).isDefined
  }
  override def insert(unsaved: WorkorderRow)(implicit c: Connection): WorkorderRow = {
    if (map.contains(unsaved.workorderid))
      sys.error(s"id ${unsaved.workorderid} already exists")
    else
      map.put(unsaved.workorderid, unsaved)
    unsaved
  }
  override def insert(unsaved: WorkorderRowUnsaved)(implicit c: Connection): WorkorderRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[WorkorderRow] = {
    map.values.toList
  }
  override def selectById(workorderid: WorkorderId)(implicit c: Connection): Option[WorkorderRow] = {
    map.get(workorderid)
  }
  override def selectByIds(workorderids: Array[WorkorderId])(implicit c: Connection): List[WorkorderRow] = {
    workorderids.flatMap(map.get).toList
  }
  override def update(row: WorkorderRow)(implicit c: Connection): Boolean = {
    map.get(row.workorderid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.workorderid, row)
        true
      case None => false
    }
  }
  override def upsert(unsaved: WorkorderRow)(implicit c: Connection): WorkorderRow = {
    map.put(unsaved.workorderid, unsaved)
    unsaved
  }
}
