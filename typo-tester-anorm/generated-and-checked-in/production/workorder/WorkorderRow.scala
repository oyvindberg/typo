/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import adventureworks.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.production.scrapreason.ScrapreasonId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class WorkorderRow(
  /** Primary key for WorkOrder records. */
  workorderid: WorkorderId,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Product quantity to build. */
  orderqty: Int,
  /** Quantity that failed inspection. */
  scrappedqty: Int,
  /** Work order start date. */
  startdate: TypoLocalDateTime,
  /** Work order end date. */
  enddate: Option[TypoLocalDateTime],
  /** Work order due date. */
  duedate: TypoLocalDateTime,
  /** Reason for inspection failure.
      Points to [[scrapreason.ScrapreasonRow.scrapreasonid]] */
  scrapreasonid: Option[ScrapreasonId],
  modifieddate: TypoLocalDateTime
)

object WorkorderRow {
  implicit val reads: Reads[WorkorderRow] = Reads[WorkorderRow](json => JsResult.fromTry(
      Try(
        WorkorderRow(
          workorderid = json.\("workorderid").as(WorkorderId.reads),
          productid = json.\("productid").as(ProductId.reads),
          orderqty = json.\("orderqty").as(Reads.IntReads),
          scrappedqty = json.\("scrappedqty").as(Reads.IntReads),
          startdate = json.\("startdate").as(TypoLocalDateTime.reads),
          enddate = json.\("enddate").toOption.map(_.as(TypoLocalDateTime.reads)),
          duedate = json.\("duedate").as(TypoLocalDateTime.reads),
          scrapreasonid = json.\("scrapreasonid").toOption.map(_.as(ScrapreasonId.reads)),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[WorkorderRow] = RowParser[WorkorderRow] { row =>
    Success(
      WorkorderRow(
        workorderid = row(idx + 0)(WorkorderId.column),
        productid = row(idx + 1)(ProductId.column),
        orderqty = row(idx + 2)(Column.columnToInt),
        scrappedqty = row(idx + 3)(Column.columnToInt),
        startdate = row(idx + 4)(TypoLocalDateTime.column),
        enddate = row(idx + 5)(Column.columnToOption(TypoLocalDateTime.column)),
        duedate = row(idx + 6)(TypoLocalDateTime.column),
        scrapreasonid = row(idx + 7)(Column.columnToOption(ScrapreasonId.column)),
        modifieddate = row(idx + 8)(TypoLocalDateTime.column)
      )
    )
  }
  implicit val writes: OWrites[WorkorderRow] = OWrites[WorkorderRow](o =>
    new JsObject(ListMap[String, JsValue](
      "workorderid" -> WorkorderId.writes.writes(o.workorderid),
      "productid" -> ProductId.writes.writes(o.productid),
      "orderqty" -> Writes.IntWrites.writes(o.orderqty),
      "scrappedqty" -> Writes.IntWrites.writes(o.scrappedqty),
      "startdate" -> TypoLocalDateTime.writes.writes(o.startdate),
      "enddate" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.enddate),
      "duedate" -> TypoLocalDateTime.writes.writes(o.duedate),
      "scrapreasonid" -> Writes.OptionWrites(ScrapreasonId.writes).writes(o.scrapreasonid),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
