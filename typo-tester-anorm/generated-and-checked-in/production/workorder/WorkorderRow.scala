/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import adventureworks.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.production.scrapreason.ScrapreasonId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class WorkorderRow(
  /** Primary key for WorkOrder records. */
  workorderid: WorkorderId,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Product quantity to build. */
  orderqty: Int,
  /** Quantity that failed inspection. */
  scrappedqty: Int,
  /** Work order start date. */
  startdate: TypoLocalDateTime,
  /** Work order end date. */
  enddate: Option[TypoLocalDateTime],
  /** Work order due date. */
  duedate: TypoLocalDateTime,
  /** Reason for inspection failure.
      Points to [[scrapreason.ScrapreasonRow.scrapreasonid]] */
  scrapreasonid: Option[ScrapreasonId],
  modifieddate: TypoLocalDateTime
)

object WorkorderRow {
  implicit val reads: Reads[WorkorderRow] = Reads[WorkorderRow](json => JsResult.fromTry(
      Try(
        WorkorderRow(
          workorderid = json.\("workorderid").as[WorkorderId],
          productid = json.\("productid").as[ProductId],
          orderqty = json.\("orderqty").as[Int],
          scrappedqty = json.\("scrappedqty").as[Int],
          startdate = json.\("startdate").as[TypoLocalDateTime],
          enddate = json.\("enddate").toOption.map(_.as[TypoLocalDateTime]),
          duedate = json.\("duedate").as[TypoLocalDateTime],
          scrapreasonid = json.\("scrapreasonid").toOption.map(_.as[ScrapreasonId]),
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[WorkorderRow] = RowParser[WorkorderRow] { row =>
    Success(
      WorkorderRow(
        workorderid = row[WorkorderId](idx + 0),
        productid = row[ProductId](idx + 1),
        orderqty = row[Int](idx + 2),
        scrappedqty = row[Int](idx + 3),
        startdate = row[TypoLocalDateTime](idx + 4),
        enddate = row[Option[TypoLocalDateTime]](idx + 5),
        duedate = row[TypoLocalDateTime](idx + 6),
        scrapreasonid = row[Option[ScrapreasonId]](idx + 7),
        modifieddate = row[TypoLocalDateTime](idx + 8)
      )
    )
  }
  implicit val writes: OWrites[WorkorderRow] = OWrites[WorkorderRow](o =>
    new JsObject(ListMap[String, JsValue](
      "workorderid" -> Json.toJson(o.workorderid),
      "productid" -> Json.toJson(o.productid),
      "orderqty" -> Json.toJson(o.orderqty),
      "scrappedqty" -> Json.toJson(o.scrappedqty),
      "startdate" -> Json.toJson(o.startdate),
      "enddate" -> Json.toJson(o.enddate),
      "duedate" -> Json.toJson(o.duedate),
      "scrapreasonid" -> Json.toJson(o.scrapreasonid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
