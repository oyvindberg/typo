/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import adventureworks.production.product.ProductId
import adventureworks.production.scrapreason.ScrapreasonId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class WorkorderRow(
  /** Primary key for WorkOrder records. */
  workorderid: WorkorderId,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Product quantity to build. */
  orderqty: Int,
  /** Quantity that failed inspection. */
  scrappedqty: Int,
  /** Work order start date. */
  startdate: LocalDateTime,
  /** Work order end date. */
  enddate: Option[LocalDateTime],
  /** Work order due date. */
  duedate: LocalDateTime,
  /** Reason for inspection failure.
      Points to [[scrapreason.ScrapreasonRow.scrapreasonid]] */
  scrapreasonid: Option[ScrapreasonId],
  modifieddate: LocalDateTime
)

object WorkorderRow {
  implicit val oFormat: OFormat[WorkorderRow] = new OFormat[WorkorderRow]{
    override def writes(o: WorkorderRow): JsObject =
      Json.obj(
        "workorderid" -> o.workorderid,
        "productid" -> o.productid,
        "orderqty" -> o.orderqty,
        "scrappedqty" -> o.scrappedqty,
        "startdate" -> o.startdate,
        "enddate" -> o.enddate,
        "duedate" -> o.duedate,
        "scrapreasonid" -> o.scrapreasonid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[WorkorderRow] = {
      JsResult.fromTry(
        Try(
          WorkorderRow(
            workorderid = json.\("workorderid").as[WorkorderId],
            productid = json.\("productid").as[ProductId],
            orderqty = json.\("orderqty").as[Int],
            scrappedqty = json.\("scrappedqty").as[Int],
            startdate = json.\("startdate").as[LocalDateTime],
            enddate = json.\("enddate").toOption.map(_.as[LocalDateTime]),
            duedate = json.\("duedate").as[LocalDateTime],
            scrapreasonid = json.\("scrapreasonid").toOption.map(_.as[ScrapreasonId]),
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
