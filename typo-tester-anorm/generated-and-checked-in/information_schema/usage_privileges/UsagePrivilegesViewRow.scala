/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package usage_privileges

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class UsagePrivilegesViewRow(
  grantor: Option[SqlIdentifier],
  grantee: Option[SqlIdentifier],
  objectCatalog: Option[SqlIdentifier],
  objectSchema: Option[SqlIdentifier],
  objectName: Option[SqlIdentifier],
  objectType: Option[CharacterData],
  privilegeType: Option[CharacterData],
  isGrantable: Option[YesOrNo]
)

object UsagePrivilegesViewRow {
  def rowParser(idx: Int): RowParser[UsagePrivilegesViewRow] =
    RowParser[UsagePrivilegesViewRow] { row =>
      Success(
        UsagePrivilegesViewRow(
          grantor = row[Option[SqlIdentifier]](idx + 0),
          grantee = row[Option[SqlIdentifier]](idx + 1),
          objectCatalog = row[Option[SqlIdentifier]](idx + 2),
          objectSchema = row[Option[SqlIdentifier]](idx + 3),
          objectName = row[Option[SqlIdentifier]](idx + 4),
          objectType = row[Option[CharacterData]](idx + 5),
          privilegeType = row[Option[CharacterData]](idx + 6),
          isGrantable = row[Option[YesOrNo]](idx + 7)
        )
      )
    }
  implicit val oFormat: OFormat[UsagePrivilegesViewRow] = new OFormat[UsagePrivilegesViewRow]{
    override def writes(o: UsagePrivilegesViewRow): JsObject =
      Json.obj(
        "grantor" -> o.grantor,
        "grantee" -> o.grantee,
        "object_catalog" -> o.objectCatalog,
        "object_schema" -> o.objectSchema,
        "object_name" -> o.objectName,
        "object_type" -> o.objectType,
        "privilege_type" -> o.privilegeType,
        "is_grantable" -> o.isGrantable
      )
  
    override def reads(json: JsValue): JsResult[UsagePrivilegesViewRow] = {
      JsResult.fromTry(
        Try(
          UsagePrivilegesViewRow(
            grantor = json.\("grantor").toOption.map(_.as[SqlIdentifier]),
            grantee = json.\("grantee").toOption.map(_.as[SqlIdentifier]),
            objectCatalog = json.\("object_catalog").toOption.map(_.as[SqlIdentifier]),
            objectSchema = json.\("object_schema").toOption.map(_.as[SqlIdentifier]),
            objectName = json.\("object_name").toOption.map(_.as[SqlIdentifier]),
            objectType = json.\("object_type").toOption.map(_.as[CharacterData]),
            privilegeType = json.\("privilege_type").toOption.map(_.as[CharacterData]),
            isGrantable = json.\("is_grantable").toOption.map(_.as[YesOrNo])
          )
        )
      )
    }
  }
}
