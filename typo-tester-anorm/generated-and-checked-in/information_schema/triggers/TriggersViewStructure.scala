/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package triggers

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.TimeStamp
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class TriggersViewStructure[Row](val prefix: Option[String], val extract: Row => TriggersViewRow, val merge: (Row, TriggersViewRow) => Row)
  extends Relation[TriggersViewFields, TriggersViewRow, Row]
    with TriggersViewFields[Row] { outer =>

  override val triggerCatalog = new OptField[SqlIdentifier, Row](prefix, "trigger_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).triggerCatalog, (row, value) => merge(row, extract(row).copy(triggerCatalog = value)))
  override val triggerSchema = new OptField[SqlIdentifier, Row](prefix, "trigger_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).triggerSchema, (row, value) => merge(row, extract(row).copy(triggerSchema = value)))
  override val triggerName = new OptField[SqlIdentifier, Row](prefix, "trigger_name", None, Some("information_schema.sql_identifier"))(x => extract(x).triggerName, (row, value) => merge(row, extract(row).copy(triggerName = value)))
  override val eventManipulation = new OptField[CharacterData, Row](prefix, "event_manipulation", None, Some("information_schema.character_data"))(x => extract(x).eventManipulation, (row, value) => merge(row, extract(row).copy(eventManipulation = value)))
  override val eventObjectCatalog = new OptField[SqlIdentifier, Row](prefix, "event_object_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).eventObjectCatalog, (row, value) => merge(row, extract(row).copy(eventObjectCatalog = value)))
  override val eventObjectSchema = new OptField[SqlIdentifier, Row](prefix, "event_object_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).eventObjectSchema, (row, value) => merge(row, extract(row).copy(eventObjectSchema = value)))
  override val eventObjectTable = new OptField[SqlIdentifier, Row](prefix, "event_object_table", None, Some("information_schema.sql_identifier"))(x => extract(x).eventObjectTable, (row, value) => merge(row, extract(row).copy(eventObjectTable = value)))
  override val actionOrder = new OptField[CardinalNumber, Row](prefix, "action_order", None, Some("information_schema.cardinal_number"))(x => extract(x).actionOrder, (row, value) => merge(row, extract(row).copy(actionOrder = value)))
  override val actionCondition = new OptField[CharacterData, Row](prefix, "action_condition", None, Some("information_schema.character_data"))(x => extract(x).actionCondition, (row, value) => merge(row, extract(row).copy(actionCondition = value)))
  override val actionStatement = new OptField[CharacterData, Row](prefix, "action_statement", None, Some("information_schema.character_data"))(x => extract(x).actionStatement, (row, value) => merge(row, extract(row).copy(actionStatement = value)))
  override val actionOrientation = new OptField[CharacterData, Row](prefix, "action_orientation", None, Some("information_schema.character_data"))(x => extract(x).actionOrientation, (row, value) => merge(row, extract(row).copy(actionOrientation = value)))
  override val actionTiming = new OptField[CharacterData, Row](prefix, "action_timing", None, Some("information_schema.character_data"))(x => extract(x).actionTiming, (row, value) => merge(row, extract(row).copy(actionTiming = value)))
  override val actionReferenceOldTable = new OptField[SqlIdentifier, Row](prefix, "action_reference_old_table", None, Some("information_schema.sql_identifier"))(x => extract(x).actionReferenceOldTable, (row, value) => merge(row, extract(row).copy(actionReferenceOldTable = value)))
  override val actionReferenceNewTable = new OptField[SqlIdentifier, Row](prefix, "action_reference_new_table", None, Some("information_schema.sql_identifier"))(x => extract(x).actionReferenceNewTable, (row, value) => merge(row, extract(row).copy(actionReferenceNewTable = value)))
  override val actionReferenceOldRow = new OptField[SqlIdentifier, Row](prefix, "action_reference_old_row", None, Some("information_schema.sql_identifier"))(x => extract(x).actionReferenceOldRow, (row, value) => merge(row, extract(row).copy(actionReferenceOldRow = value)))
  override val actionReferenceNewRow = new OptField[SqlIdentifier, Row](prefix, "action_reference_new_row", None, Some("information_schema.sql_identifier"))(x => extract(x).actionReferenceNewRow, (row, value) => merge(row, extract(row).copy(actionReferenceNewRow = value)))
  override val created = new OptField[TimeStamp, Row](prefix, "created", None, Some("information_schema.time_stamp"))(x => extract(x).created, (row, value) => merge(row, extract(row).copy(created = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](triggerCatalog, triggerSchema, triggerName, eventManipulation, eventObjectCatalog, eventObjectSchema, eventObjectTable, actionOrder, actionCondition, actionStatement, actionOrientation, actionTiming, actionReferenceOldTable, actionReferenceNewTable, actionReferenceOldRow, actionReferenceNewRow, created)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => TriggersViewRow, merge: (NewRow, TriggersViewRow) => NewRow): TriggersViewStructure[NewRow] =
    new TriggersViewStructure(prefix, extract, merge)
}
