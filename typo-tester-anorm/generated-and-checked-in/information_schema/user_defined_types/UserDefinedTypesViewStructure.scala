/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class UserDefinedTypesViewStructure[Row](val prefix: Option[String], val extract: Row => UserDefinedTypesViewRow, val merge: (Row, UserDefinedTypesViewRow) => Row)
  extends Relation[UserDefinedTypesViewFields, UserDefinedTypesViewRow, Row]
    with UserDefinedTypesViewFields[Row] { outer =>

  override val userDefinedTypeCatalog = new OptField[SqlIdentifier, Row](prefix, "user_defined_type_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).userDefinedTypeCatalog, (row, value) => merge(row, extract(row).copy(userDefinedTypeCatalog = value)))
  override val userDefinedTypeSchema = new OptField[SqlIdentifier, Row](prefix, "user_defined_type_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).userDefinedTypeSchema, (row, value) => merge(row, extract(row).copy(userDefinedTypeSchema = value)))
  override val userDefinedTypeName = new OptField[SqlIdentifier, Row](prefix, "user_defined_type_name", None, Some("information_schema.sql_identifier"))(x => extract(x).userDefinedTypeName, (row, value) => merge(row, extract(row).copy(userDefinedTypeName = value)))
  override val userDefinedTypeCategory = new OptField[CharacterData, Row](prefix, "user_defined_type_category", None, Some("information_schema.character_data"))(x => extract(x).userDefinedTypeCategory, (row, value) => merge(row, extract(row).copy(userDefinedTypeCategory = value)))
  override val isInstantiable = new OptField[YesOrNo, Row](prefix, "is_instantiable", None, Some("information_schema.yes_or_no"))(x => extract(x).isInstantiable, (row, value) => merge(row, extract(row).copy(isInstantiable = value)))
  override val isFinal = new OptField[YesOrNo, Row](prefix, "is_final", None, Some("information_schema.yes_or_no"))(x => extract(x).isFinal, (row, value) => merge(row, extract(row).copy(isFinal = value)))
  override val orderingForm = new OptField[CharacterData, Row](prefix, "ordering_form", None, Some("information_schema.character_data"))(x => extract(x).orderingForm, (row, value) => merge(row, extract(row).copy(orderingForm = value)))
  override val orderingCategory = new OptField[CharacterData, Row](prefix, "ordering_category", None, Some("information_schema.character_data"))(x => extract(x).orderingCategory, (row, value) => merge(row, extract(row).copy(orderingCategory = value)))
  override val orderingRoutineCatalog = new OptField[SqlIdentifier, Row](prefix, "ordering_routine_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).orderingRoutineCatalog, (row, value) => merge(row, extract(row).copy(orderingRoutineCatalog = value)))
  override val orderingRoutineSchema = new OptField[SqlIdentifier, Row](prefix, "ordering_routine_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).orderingRoutineSchema, (row, value) => merge(row, extract(row).copy(orderingRoutineSchema = value)))
  override val orderingRoutineName = new OptField[SqlIdentifier, Row](prefix, "ordering_routine_name", None, Some("information_schema.sql_identifier"))(x => extract(x).orderingRoutineName, (row, value) => merge(row, extract(row).copy(orderingRoutineName = value)))
  override val referenceType = new OptField[CharacterData, Row](prefix, "reference_type", None, Some("information_schema.character_data"))(x => extract(x).referenceType, (row, value) => merge(row, extract(row).copy(referenceType = value)))
  override val dataType = new OptField[CharacterData, Row](prefix, "data_type", None, Some("information_schema.character_data"))(x => extract(x).dataType, (row, value) => merge(row, extract(row).copy(dataType = value)))
  override val characterMaximumLength = new OptField[CardinalNumber, Row](prefix, "character_maximum_length", None, Some("information_schema.cardinal_number"))(x => extract(x).characterMaximumLength, (row, value) => merge(row, extract(row).copy(characterMaximumLength = value)))
  override val characterOctetLength = new OptField[CardinalNumber, Row](prefix, "character_octet_length", None, Some("information_schema.cardinal_number"))(x => extract(x).characterOctetLength, (row, value) => merge(row, extract(row).copy(characterOctetLength = value)))
  override val characterSetCatalog = new OptField[SqlIdentifier, Row](prefix, "character_set_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).characterSetCatalog, (row, value) => merge(row, extract(row).copy(characterSetCatalog = value)))
  override val characterSetSchema = new OptField[SqlIdentifier, Row](prefix, "character_set_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).characterSetSchema, (row, value) => merge(row, extract(row).copy(characterSetSchema = value)))
  override val characterSetName = new OptField[SqlIdentifier, Row](prefix, "character_set_name", None, Some("information_schema.sql_identifier"))(x => extract(x).characterSetName, (row, value) => merge(row, extract(row).copy(characterSetName = value)))
  override val collationCatalog = new OptField[SqlIdentifier, Row](prefix, "collation_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).collationCatalog, (row, value) => merge(row, extract(row).copy(collationCatalog = value)))
  override val collationSchema = new OptField[SqlIdentifier, Row](prefix, "collation_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).collationSchema, (row, value) => merge(row, extract(row).copy(collationSchema = value)))
  override val collationName = new OptField[SqlIdentifier, Row](prefix, "collation_name", None, Some("information_schema.sql_identifier"))(x => extract(x).collationName, (row, value) => merge(row, extract(row).copy(collationName = value)))
  override val numericPrecision = new OptField[CardinalNumber, Row](prefix, "numeric_precision", None, Some("information_schema.cardinal_number"))(x => extract(x).numericPrecision, (row, value) => merge(row, extract(row).copy(numericPrecision = value)))
  override val numericPrecisionRadix = new OptField[CardinalNumber, Row](prefix, "numeric_precision_radix", None, Some("information_schema.cardinal_number"))(x => extract(x).numericPrecisionRadix, (row, value) => merge(row, extract(row).copy(numericPrecisionRadix = value)))
  override val numericScale = new OptField[CardinalNumber, Row](prefix, "numeric_scale", None, Some("information_schema.cardinal_number"))(x => extract(x).numericScale, (row, value) => merge(row, extract(row).copy(numericScale = value)))
  override val datetimePrecision = new OptField[CardinalNumber, Row](prefix, "datetime_precision", None, Some("information_schema.cardinal_number"))(x => extract(x).datetimePrecision, (row, value) => merge(row, extract(row).copy(datetimePrecision = value)))
  override val intervalType = new OptField[CharacterData, Row](prefix, "interval_type", None, Some("information_schema.character_data"))(x => extract(x).intervalType, (row, value) => merge(row, extract(row).copy(intervalType = value)))
  override val intervalPrecision = new OptField[CardinalNumber, Row](prefix, "interval_precision", None, Some("information_schema.cardinal_number"))(x => extract(x).intervalPrecision, (row, value) => merge(row, extract(row).copy(intervalPrecision = value)))
  override val sourceDtdIdentifier = new OptField[SqlIdentifier, Row](prefix, "source_dtd_identifier", None, Some("information_schema.sql_identifier"))(x => extract(x).sourceDtdIdentifier, (row, value) => merge(row, extract(row).copy(sourceDtdIdentifier = value)))
  override val refDtdIdentifier = new OptField[SqlIdentifier, Row](prefix, "ref_dtd_identifier", None, Some("information_schema.sql_identifier"))(x => extract(x).refDtdIdentifier, (row, value) => merge(row, extract(row).copy(refDtdIdentifier = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](userDefinedTypeCatalog, userDefinedTypeSchema, userDefinedTypeName, userDefinedTypeCategory, isInstantiable, isFinal, orderingForm, orderingCategory, orderingRoutineCatalog, orderingRoutineSchema, orderingRoutineName, referenceType, dataType, characterMaximumLength, characterOctetLength, characterSetCatalog, characterSetSchema, characterSetName, collationCatalog, collationSchema, collationName, numericPrecision, numericPrecisionRadix, numericScale, datetimePrecision, intervalType, intervalPrecision, sourceDtdIdentifier, refDtdIdentifier)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => UserDefinedTypesViewRow, merge: (NewRow, UserDefinedTypesViewRow) => NewRow): UserDefinedTypesViewStructure[NewRow] =
    new UserDefinedTypesViewStructure(prefix, extract, merge)
}
