/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class UserDefinedTypesViewRow(
  userDefinedTypeCatalog: Option[SqlIdentifier],
  userDefinedTypeSchema: Option[SqlIdentifier],
  userDefinedTypeName: Option[SqlIdentifier],
  userDefinedTypeCategory: Option[CharacterData],
  isInstantiable: Option[YesOrNo],
  isFinal: Option[YesOrNo],
  orderingForm: Option[CharacterData],
  orderingCategory: Option[CharacterData],
  orderingRoutineCatalog: Option[SqlIdentifier],
  orderingRoutineSchema: Option[SqlIdentifier],
  orderingRoutineName: Option[SqlIdentifier],
  referenceType: Option[CharacterData],
  dataType: Option[CharacterData],
  characterMaximumLength: Option[CardinalNumber],
  characterOctetLength: Option[CardinalNumber],
  characterSetCatalog: Option[SqlIdentifier],
  characterSetSchema: Option[SqlIdentifier],
  characterSetName: Option[SqlIdentifier],
  collationCatalog: Option[SqlIdentifier],
  collationSchema: Option[SqlIdentifier],
  collationName: Option[SqlIdentifier],
  numericPrecision: Option[CardinalNumber],
  numericPrecisionRadix: Option[CardinalNumber],
  numericScale: Option[CardinalNumber],
  datetimePrecision: Option[CardinalNumber],
  intervalType: Option[CharacterData],
  intervalPrecision: Option[CardinalNumber],
  sourceDtdIdentifier: Option[SqlIdentifier],
  refDtdIdentifier: Option[SqlIdentifier]
)

object UserDefinedTypesViewRow {
  def rowParser(idx: Int): RowParser[UserDefinedTypesViewRow] =
    RowParser[UserDefinedTypesViewRow] { row =>
      Success(
        UserDefinedTypesViewRow(
          userDefinedTypeCatalog = row[Option[SqlIdentifier]](idx + 0),
          userDefinedTypeSchema = row[Option[SqlIdentifier]](idx + 1),
          userDefinedTypeName = row[Option[SqlIdentifier]](idx + 2),
          userDefinedTypeCategory = row[Option[CharacterData]](idx + 3),
          isInstantiable = row[Option[YesOrNo]](idx + 4),
          isFinal = row[Option[YesOrNo]](idx + 5),
          orderingForm = row[Option[CharacterData]](idx + 6),
          orderingCategory = row[Option[CharacterData]](idx + 7),
          orderingRoutineCatalog = row[Option[SqlIdentifier]](idx + 8),
          orderingRoutineSchema = row[Option[SqlIdentifier]](idx + 9),
          orderingRoutineName = row[Option[SqlIdentifier]](idx + 10),
          referenceType = row[Option[CharacterData]](idx + 11),
          dataType = row[Option[CharacterData]](idx + 12),
          characterMaximumLength = row[Option[CardinalNumber]](idx + 13),
          characterOctetLength = row[Option[CardinalNumber]](idx + 14),
          characterSetCatalog = row[Option[SqlIdentifier]](idx + 15),
          characterSetSchema = row[Option[SqlIdentifier]](idx + 16),
          characterSetName = row[Option[SqlIdentifier]](idx + 17),
          collationCatalog = row[Option[SqlIdentifier]](idx + 18),
          collationSchema = row[Option[SqlIdentifier]](idx + 19),
          collationName = row[Option[SqlIdentifier]](idx + 20),
          numericPrecision = row[Option[CardinalNumber]](idx + 21),
          numericPrecisionRadix = row[Option[CardinalNumber]](idx + 22),
          numericScale = row[Option[CardinalNumber]](idx + 23),
          datetimePrecision = row[Option[CardinalNumber]](idx + 24),
          intervalType = row[Option[CharacterData]](idx + 25),
          intervalPrecision = row[Option[CardinalNumber]](idx + 26),
          sourceDtdIdentifier = row[Option[SqlIdentifier]](idx + 27),
          refDtdIdentifier = row[Option[SqlIdentifier]](idx + 28)
        )
      )
    }
  implicit val oFormat: OFormat[UserDefinedTypesViewRow] = new OFormat[UserDefinedTypesViewRow]{
    override def writes(o: UserDefinedTypesViewRow): JsObject =
      Json.obj(
        "user_defined_type_catalog" -> o.userDefinedTypeCatalog,
        "user_defined_type_schema" -> o.userDefinedTypeSchema,
        "user_defined_type_name" -> o.userDefinedTypeName,
        "user_defined_type_category" -> o.userDefinedTypeCategory,
        "is_instantiable" -> o.isInstantiable,
        "is_final" -> o.isFinal,
        "ordering_form" -> o.orderingForm,
        "ordering_category" -> o.orderingCategory,
        "ordering_routine_catalog" -> o.orderingRoutineCatalog,
        "ordering_routine_schema" -> o.orderingRoutineSchema,
        "ordering_routine_name" -> o.orderingRoutineName,
        "reference_type" -> o.referenceType,
        "data_type" -> o.dataType,
        "character_maximum_length" -> o.characterMaximumLength,
        "character_octet_length" -> o.characterOctetLength,
        "character_set_catalog" -> o.characterSetCatalog,
        "character_set_schema" -> o.characterSetSchema,
        "character_set_name" -> o.characterSetName,
        "collation_catalog" -> o.collationCatalog,
        "collation_schema" -> o.collationSchema,
        "collation_name" -> o.collationName,
        "numeric_precision" -> o.numericPrecision,
        "numeric_precision_radix" -> o.numericPrecisionRadix,
        "numeric_scale" -> o.numericScale,
        "datetime_precision" -> o.datetimePrecision,
        "interval_type" -> o.intervalType,
        "interval_precision" -> o.intervalPrecision,
        "source_dtd_identifier" -> o.sourceDtdIdentifier,
        "ref_dtd_identifier" -> o.refDtdIdentifier
      )
  
    override def reads(json: JsValue): JsResult[UserDefinedTypesViewRow] = {
      JsResult.fromTry(
        Try(
          UserDefinedTypesViewRow(
            userDefinedTypeCatalog = json.\("user_defined_type_catalog").toOption.map(_.as[SqlIdentifier]),
            userDefinedTypeSchema = json.\("user_defined_type_schema").toOption.map(_.as[SqlIdentifier]),
            userDefinedTypeName = json.\("user_defined_type_name").toOption.map(_.as[SqlIdentifier]),
            userDefinedTypeCategory = json.\("user_defined_type_category").toOption.map(_.as[CharacterData]),
            isInstantiable = json.\("is_instantiable").toOption.map(_.as[YesOrNo]),
            isFinal = json.\("is_final").toOption.map(_.as[YesOrNo]),
            orderingForm = json.\("ordering_form").toOption.map(_.as[CharacterData]),
            orderingCategory = json.\("ordering_category").toOption.map(_.as[CharacterData]),
            orderingRoutineCatalog = json.\("ordering_routine_catalog").toOption.map(_.as[SqlIdentifier]),
            orderingRoutineSchema = json.\("ordering_routine_schema").toOption.map(_.as[SqlIdentifier]),
            orderingRoutineName = json.\("ordering_routine_name").toOption.map(_.as[SqlIdentifier]),
            referenceType = json.\("reference_type").toOption.map(_.as[CharacterData]),
            dataType = json.\("data_type").toOption.map(_.as[CharacterData]),
            characterMaximumLength = json.\("character_maximum_length").toOption.map(_.as[CardinalNumber]),
            characterOctetLength = json.\("character_octet_length").toOption.map(_.as[CardinalNumber]),
            characterSetCatalog = json.\("character_set_catalog").toOption.map(_.as[SqlIdentifier]),
            characterSetSchema = json.\("character_set_schema").toOption.map(_.as[SqlIdentifier]),
            characterSetName = json.\("character_set_name").toOption.map(_.as[SqlIdentifier]),
            collationCatalog = json.\("collation_catalog").toOption.map(_.as[SqlIdentifier]),
            collationSchema = json.\("collation_schema").toOption.map(_.as[SqlIdentifier]),
            collationName = json.\("collation_name").toOption.map(_.as[SqlIdentifier]),
            numericPrecision = json.\("numeric_precision").toOption.map(_.as[CardinalNumber]),
            numericPrecisionRadix = json.\("numeric_precision_radix").toOption.map(_.as[CardinalNumber]),
            numericScale = json.\("numeric_scale").toOption.map(_.as[CardinalNumber]),
            datetimePrecision = json.\("datetime_precision").toOption.map(_.as[CardinalNumber]),
            intervalType = json.\("interval_type").toOption.map(_.as[CharacterData]),
            intervalPrecision = json.\("interval_precision").toOption.map(_.as[CardinalNumber]),
            sourceDtdIdentifier = json.\("source_dtd_identifier").toOption.map(_.as[SqlIdentifier]),
            refDtdIdentifier = json.\("ref_dtd_identifier").toOption.map(_.as[SqlIdentifier])
          )
        )
      )
    }
  }
}
