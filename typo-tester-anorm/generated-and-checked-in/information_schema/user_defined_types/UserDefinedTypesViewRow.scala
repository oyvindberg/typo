/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class UserDefinedTypesViewRow(
  userDefinedTypeCatalog: Option[SqlIdentifier],
  userDefinedTypeSchema: Option[SqlIdentifier],
  userDefinedTypeName: Option[SqlIdentifier],
  userDefinedTypeCategory: Option[CharacterData],
  isInstantiable: Option[YesOrNo],
  isFinal: Option[YesOrNo],
  orderingForm: Option[CharacterData],
  orderingCategory: Option[CharacterData],
  orderingRoutineCatalog: Option[SqlIdentifier],
  orderingRoutineSchema: Option[SqlIdentifier],
  orderingRoutineName: Option[SqlIdentifier],
  referenceType: Option[CharacterData],
  dataType: Option[CharacterData],
  characterMaximumLength: Option[CardinalNumber],
  characterOctetLength: Option[CardinalNumber],
  characterSetCatalog: Option[SqlIdentifier],
  characterSetSchema: Option[SqlIdentifier],
  characterSetName: Option[SqlIdentifier],
  collationCatalog: Option[SqlIdentifier],
  collationSchema: Option[SqlIdentifier],
  collationName: Option[SqlIdentifier],
  numericPrecision: Option[CardinalNumber],
  numericPrecisionRadix: Option[CardinalNumber],
  numericScale: Option[CardinalNumber],
  datetimePrecision: Option[CardinalNumber],
  intervalType: Option[CharacterData],
  intervalPrecision: Option[CardinalNumber],
  sourceDtdIdentifier: Option[SqlIdentifier],
  refDtdIdentifier: Option[SqlIdentifier]
)

object UserDefinedTypesViewRow {
  implicit val reads: Reads[UserDefinedTypesViewRow] = Reads[UserDefinedTypesViewRow](json => JsResult.fromTry(
      Try(
        UserDefinedTypesViewRow(
          userDefinedTypeCatalog = json.\("user_defined_type_catalog").toOption.map(_.as(SqlIdentifier.reads)),
          userDefinedTypeSchema = json.\("user_defined_type_schema").toOption.map(_.as(SqlIdentifier.reads)),
          userDefinedTypeName = json.\("user_defined_type_name").toOption.map(_.as(SqlIdentifier.reads)),
          userDefinedTypeCategory = json.\("user_defined_type_category").toOption.map(_.as(CharacterData.reads)),
          isInstantiable = json.\("is_instantiable").toOption.map(_.as(YesOrNo.reads)),
          isFinal = json.\("is_final").toOption.map(_.as(YesOrNo.reads)),
          orderingForm = json.\("ordering_form").toOption.map(_.as(CharacterData.reads)),
          orderingCategory = json.\("ordering_category").toOption.map(_.as(CharacterData.reads)),
          orderingRoutineCatalog = json.\("ordering_routine_catalog").toOption.map(_.as(SqlIdentifier.reads)),
          orderingRoutineSchema = json.\("ordering_routine_schema").toOption.map(_.as(SqlIdentifier.reads)),
          orderingRoutineName = json.\("ordering_routine_name").toOption.map(_.as(SqlIdentifier.reads)),
          referenceType = json.\("reference_type").toOption.map(_.as(CharacterData.reads)),
          dataType = json.\("data_type").toOption.map(_.as(CharacterData.reads)),
          characterMaximumLength = json.\("character_maximum_length").toOption.map(_.as(CardinalNumber.reads)),
          characterOctetLength = json.\("character_octet_length").toOption.map(_.as(CardinalNumber.reads)),
          characterSetCatalog = json.\("character_set_catalog").toOption.map(_.as(SqlIdentifier.reads)),
          characterSetSchema = json.\("character_set_schema").toOption.map(_.as(SqlIdentifier.reads)),
          characterSetName = json.\("character_set_name").toOption.map(_.as(SqlIdentifier.reads)),
          collationCatalog = json.\("collation_catalog").toOption.map(_.as(SqlIdentifier.reads)),
          collationSchema = json.\("collation_schema").toOption.map(_.as(SqlIdentifier.reads)),
          collationName = json.\("collation_name").toOption.map(_.as(SqlIdentifier.reads)),
          numericPrecision = json.\("numeric_precision").toOption.map(_.as(CardinalNumber.reads)),
          numericPrecisionRadix = json.\("numeric_precision_radix").toOption.map(_.as(CardinalNumber.reads)),
          numericScale = json.\("numeric_scale").toOption.map(_.as(CardinalNumber.reads)),
          datetimePrecision = json.\("datetime_precision").toOption.map(_.as(CardinalNumber.reads)),
          intervalType = json.\("interval_type").toOption.map(_.as(CharacterData.reads)),
          intervalPrecision = json.\("interval_precision").toOption.map(_.as(CardinalNumber.reads)),
          sourceDtdIdentifier = json.\("source_dtd_identifier").toOption.map(_.as(SqlIdentifier.reads)),
          refDtdIdentifier = json.\("ref_dtd_identifier").toOption.map(_.as(SqlIdentifier.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[UserDefinedTypesViewRow] = RowParser[UserDefinedTypesViewRow] { row =>
    Success(
      UserDefinedTypesViewRow(
        userDefinedTypeCatalog = row(idx + 0)(Column.columnToOption(SqlIdentifier.column)),
        userDefinedTypeSchema = row(idx + 1)(Column.columnToOption(SqlIdentifier.column)),
        userDefinedTypeName = row(idx + 2)(Column.columnToOption(SqlIdentifier.column)),
        userDefinedTypeCategory = row(idx + 3)(Column.columnToOption(CharacterData.column)),
        isInstantiable = row(idx + 4)(Column.columnToOption(YesOrNo.column)),
        isFinal = row(idx + 5)(Column.columnToOption(YesOrNo.column)),
        orderingForm = row(idx + 6)(Column.columnToOption(CharacterData.column)),
        orderingCategory = row(idx + 7)(Column.columnToOption(CharacterData.column)),
        orderingRoutineCatalog = row(idx + 8)(Column.columnToOption(SqlIdentifier.column)),
        orderingRoutineSchema = row(idx + 9)(Column.columnToOption(SqlIdentifier.column)),
        orderingRoutineName = row(idx + 10)(Column.columnToOption(SqlIdentifier.column)),
        referenceType = row(idx + 11)(Column.columnToOption(CharacterData.column)),
        dataType = row(idx + 12)(Column.columnToOption(CharacterData.column)),
        characterMaximumLength = row(idx + 13)(Column.columnToOption(CardinalNumber.column)),
        characterOctetLength = row(idx + 14)(Column.columnToOption(CardinalNumber.column)),
        characterSetCatalog = row(idx + 15)(Column.columnToOption(SqlIdentifier.column)),
        characterSetSchema = row(idx + 16)(Column.columnToOption(SqlIdentifier.column)),
        characterSetName = row(idx + 17)(Column.columnToOption(SqlIdentifier.column)),
        collationCatalog = row(idx + 18)(Column.columnToOption(SqlIdentifier.column)),
        collationSchema = row(idx + 19)(Column.columnToOption(SqlIdentifier.column)),
        collationName = row(idx + 20)(Column.columnToOption(SqlIdentifier.column)),
        numericPrecision = row(idx + 21)(Column.columnToOption(CardinalNumber.column)),
        numericPrecisionRadix = row(idx + 22)(Column.columnToOption(CardinalNumber.column)),
        numericScale = row(idx + 23)(Column.columnToOption(CardinalNumber.column)),
        datetimePrecision = row(idx + 24)(Column.columnToOption(CardinalNumber.column)),
        intervalType = row(idx + 25)(Column.columnToOption(CharacterData.column)),
        intervalPrecision = row(idx + 26)(Column.columnToOption(CardinalNumber.column)),
        sourceDtdIdentifier = row(idx + 27)(Column.columnToOption(SqlIdentifier.column)),
        refDtdIdentifier = row(idx + 28)(Column.columnToOption(SqlIdentifier.column))
      )
    )
  }
  implicit val writes: OWrites[UserDefinedTypesViewRow] = OWrites[UserDefinedTypesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "user_defined_type_catalog" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.userDefinedTypeCatalog),
      "user_defined_type_schema" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.userDefinedTypeSchema),
      "user_defined_type_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.userDefinedTypeName),
      "user_defined_type_category" -> Writes.OptionWrites(CharacterData.writes).writes(o.userDefinedTypeCategory),
      "is_instantiable" -> Writes.OptionWrites(YesOrNo.writes).writes(o.isInstantiable),
      "is_final" -> Writes.OptionWrites(YesOrNo.writes).writes(o.isFinal),
      "ordering_form" -> Writes.OptionWrites(CharacterData.writes).writes(o.orderingForm),
      "ordering_category" -> Writes.OptionWrites(CharacterData.writes).writes(o.orderingCategory),
      "ordering_routine_catalog" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.orderingRoutineCatalog),
      "ordering_routine_schema" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.orderingRoutineSchema),
      "ordering_routine_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.orderingRoutineName),
      "reference_type" -> Writes.OptionWrites(CharacterData.writes).writes(o.referenceType),
      "data_type" -> Writes.OptionWrites(CharacterData.writes).writes(o.dataType),
      "character_maximum_length" -> Writes.OptionWrites(CardinalNumber.writes).writes(o.characterMaximumLength),
      "character_octet_length" -> Writes.OptionWrites(CardinalNumber.writes).writes(o.characterOctetLength),
      "character_set_catalog" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.characterSetCatalog),
      "character_set_schema" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.characterSetSchema),
      "character_set_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.characterSetName),
      "collation_catalog" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.collationCatalog),
      "collation_schema" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.collationSchema),
      "collation_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.collationName),
      "numeric_precision" -> Writes.OptionWrites(CardinalNumber.writes).writes(o.numericPrecision),
      "numeric_precision_radix" -> Writes.OptionWrites(CardinalNumber.writes).writes(o.numericPrecisionRadix),
      "numeric_scale" -> Writes.OptionWrites(CardinalNumber.writes).writes(o.numericScale),
      "datetime_precision" -> Writes.OptionWrites(CardinalNumber.writes).writes(o.datetimePrecision),
      "interval_type" -> Writes.OptionWrites(CharacterData.writes).writes(o.intervalType),
      "interval_precision" -> Writes.OptionWrites(CardinalNumber.writes).writes(o.intervalPrecision),
      "source_dtd_identifier" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.sourceDtdIdentifier),
      "ref_dtd_identifier" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.refDtdIdentifier)
    ))
  )
}
