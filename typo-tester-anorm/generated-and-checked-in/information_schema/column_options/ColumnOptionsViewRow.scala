/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package column_options

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ColumnOptionsViewRow(
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  columnName: Option[SqlIdentifier],
  optionName: Option[SqlIdentifier],
  optionValue: Option[CharacterData]
)

object ColumnOptionsViewRow {
  def rowParser(idx: Int): RowParser[ColumnOptionsViewRow] =
    RowParser[ColumnOptionsViewRow] { row =>
      Success(
        ColumnOptionsViewRow(
          tableCatalog = row[Option[SqlIdentifier]](idx + 0),
          tableSchema = row[Option[SqlIdentifier]](idx + 1),
          tableName = row[Option[SqlIdentifier]](idx + 2),
          columnName = row[Option[SqlIdentifier]](idx + 3),
          optionName = row[Option[SqlIdentifier]](idx + 4),
          optionValue = row[Option[CharacterData]](idx + 5)
        )
      )
    }
  implicit val oFormat: OFormat[ColumnOptionsViewRow] = new OFormat[ColumnOptionsViewRow]{
    override def writes(o: ColumnOptionsViewRow): JsObject =
      Json.obj(
        "table_catalog" -> o.tableCatalog,
        "table_schema" -> o.tableSchema,
        "table_name" -> o.tableName,
        "column_name" -> o.columnName,
        "option_name" -> o.optionName,
        "option_value" -> o.optionValue
      )
  
    override def reads(json: JsValue): JsResult[ColumnOptionsViewRow] = {
      JsResult.fromTry(
        Try(
          ColumnOptionsViewRow(
            tableCatalog = json.\("table_catalog").toOption.map(_.as[SqlIdentifier]),
            tableSchema = json.\("table_schema").toOption.map(_.as[SqlIdentifier]),
            tableName = json.\("table_name").toOption.map(_.as[SqlIdentifier]),
            columnName = json.\("column_name").toOption.map(_.as[SqlIdentifier]),
            optionName = json.\("option_name").toOption.map(_.as[SqlIdentifier]),
            optionValue = json.\("option_value").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
