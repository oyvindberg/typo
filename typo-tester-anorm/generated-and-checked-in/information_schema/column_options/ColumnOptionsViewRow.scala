/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package column_options

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class ColumnOptionsViewRow(
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  columnName: Option[SqlIdentifier],
  optionName: Option[SqlIdentifier],
  optionValue: Option[CharacterData]
)

object ColumnOptionsViewRow {
  implicit val reads: Reads[ColumnOptionsViewRow] = Reads[ColumnOptionsViewRow](json => JsResult.fromTry(
      Try(
        ColumnOptionsViewRow(
          tableCatalog = json.\("table_catalog").toOption.map(_.as(SqlIdentifier.reads)),
          tableSchema = json.\("table_schema").toOption.map(_.as(SqlIdentifier.reads)),
          tableName = json.\("table_name").toOption.map(_.as(SqlIdentifier.reads)),
          columnName = json.\("column_name").toOption.map(_.as(SqlIdentifier.reads)),
          optionName = json.\("option_name").toOption.map(_.as(SqlIdentifier.reads)),
          optionValue = json.\("option_value").toOption.map(_.as(CharacterData.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ColumnOptionsViewRow] = RowParser[ColumnOptionsViewRow] { row =>
    Success(
      ColumnOptionsViewRow(
        tableCatalog = row(idx + 0)(Column.columnToOption(SqlIdentifier.column)),
        tableSchema = row(idx + 1)(Column.columnToOption(SqlIdentifier.column)),
        tableName = row(idx + 2)(Column.columnToOption(SqlIdentifier.column)),
        columnName = row(idx + 3)(Column.columnToOption(SqlIdentifier.column)),
        optionName = row(idx + 4)(Column.columnToOption(SqlIdentifier.column)),
        optionValue = row(idx + 5)(Column.columnToOption(CharacterData.column))
      )
    )
  }
  implicit val writes: OWrites[ColumnOptionsViewRow] = OWrites[ColumnOptionsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "table_catalog" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.tableCatalog),
      "table_schema" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.tableSchema),
      "table_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.tableName),
      "column_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.columnName),
      "option_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.optionName),
      "option_value" -> Writes.OptionWrites(CharacterData.writes).writes(o.optionValue)
    ))
  )
}
