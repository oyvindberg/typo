/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_mappings

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class UserMappingsViewRow(
  /** Points to [[`_pg_user_mappings`.PgUserMappingsViewRow.authorizationIdentifier]] */
  authorizationIdentifier: Option[SqlIdentifier],
  /** Points to [[`_pg_user_mappings`.PgUserMappingsViewRow.foreignServerCatalog]] */
  foreignServerCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_user_mappings`.PgUserMappingsViewRow.foreignServerName]] */
  foreignServerName: Option[SqlIdentifier]
)

object UserMappingsViewRow {
  def rowParser(idx: Int): RowParser[UserMappingsViewRow] =
    RowParser[UserMappingsViewRow] { row =>
      Success(
        UserMappingsViewRow(
          authorizationIdentifier = row[Option[SqlIdentifier]](idx + 0),
          foreignServerCatalog = row[Option[SqlIdentifier]](idx + 1),
          foreignServerName = row[Option[SqlIdentifier]](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[UserMappingsViewRow] = new OFormat[UserMappingsViewRow]{
    override def writes(o: UserMappingsViewRow): JsObject =
      Json.obj(
        "authorization_identifier" -> o.authorizationIdentifier,
        "foreign_server_catalog" -> o.foreignServerCatalog,
        "foreign_server_name" -> o.foreignServerName
      )
  
    override def reads(json: JsValue): JsResult[UserMappingsViewRow] = {
      JsResult.fromTry(
        Try(
          UserMappingsViewRow(
            authorizationIdentifier = json.\("authorization_identifier").toOption.map(_.as[SqlIdentifier]),
            foreignServerCatalog = json.\("foreign_server_catalog").toOption.map(_.as[SqlIdentifier]),
            foreignServerName = json.\("foreign_server_name").toOption.map(_.as[SqlIdentifier])
          )
        )
      )
    }
  }
}
