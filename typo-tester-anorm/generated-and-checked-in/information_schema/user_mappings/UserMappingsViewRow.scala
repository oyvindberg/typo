/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_mappings

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class UserMappingsViewRow(
  /** Points to [[`_pg_user_mappings`.PgUserMappingsViewRow.authorizationIdentifier]] */
  authorizationIdentifier: Option[SqlIdentifier],
  /** Points to [[`_pg_user_mappings`.PgUserMappingsViewRow.foreignServerCatalog]] */
  foreignServerCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_user_mappings`.PgUserMappingsViewRow.foreignServerName]] */
  foreignServerName: Option[SqlIdentifier]
)

object UserMappingsViewRow {
  implicit val reads: Reads[UserMappingsViewRow] = Reads[UserMappingsViewRow](json => JsResult.fromTry(
      Try(
        UserMappingsViewRow(
          authorizationIdentifier = json.\("authorization_identifier").toOption.map(_.as[SqlIdentifier]),
          foreignServerCatalog = json.\("foreign_server_catalog").toOption.map(_.as[SqlIdentifier]),
          foreignServerName = json.\("foreign_server_name").toOption.map(_.as[SqlIdentifier])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[UserMappingsViewRow] = RowParser[UserMappingsViewRow] { row =>
    Success(
      UserMappingsViewRow(
        authorizationIdentifier = row[Option[SqlIdentifier]](idx + 0),
        foreignServerCatalog = row[Option[SqlIdentifier]](idx + 1),
        foreignServerName = row[Option[SqlIdentifier]](idx + 2)
      )
    )
  }
  implicit val writes: OWrites[UserMappingsViewRow] = OWrites[UserMappingsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "authorization_identifier" -> Json.toJson(o.authorizationIdentifier),
      "foreign_server_catalog" -> Json.toJson(o.foreignServerCatalog),
      "foreign_server_name" -> Json.toJson(o.foreignServerName)
    ))
  )
}
