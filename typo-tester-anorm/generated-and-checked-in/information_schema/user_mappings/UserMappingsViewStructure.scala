/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_mappings

import adventureworks.information_schema.SqlIdentifier
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class UserMappingsViewStructure[Row](val prefix: Option[String], val extract: Row => UserMappingsViewRow, val merge: (Row, UserMappingsViewRow) => Row)
  extends Relation[UserMappingsViewFields, UserMappingsViewRow, Row]
    with UserMappingsViewFields[Row] { outer =>

  override val authorizationIdentifier = new OptField[SqlIdentifier, Row](prefix, "authorization_identifier", None, Some("information_schema.sql_identifier"))(x => extract(x).authorizationIdentifier, (row, value) => merge(row, extract(row).copy(authorizationIdentifier = value)))
  override val foreignServerCatalog = new OptField[SqlIdentifier, Row](prefix, "foreign_server_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).foreignServerCatalog, (row, value) => merge(row, extract(row).copy(foreignServerCatalog = value)))
  override val foreignServerName = new OptField[SqlIdentifier, Row](prefix, "foreign_server_name", None, Some("information_schema.sql_identifier"))(x => extract(x).foreignServerName, (row, value) => merge(row, extract(row).copy(foreignServerName = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](authorizationIdentifier, foreignServerCatalog, foreignServerName)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => UserMappingsViewRow, merge: (NewRow, UserMappingsViewRow) => NewRow): UserMappingsViewStructure[NewRow] =
    new UserMappingsViewStructure(prefix, extract, merge)
}
