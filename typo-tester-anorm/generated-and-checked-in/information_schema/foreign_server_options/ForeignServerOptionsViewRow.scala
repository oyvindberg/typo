/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_server_options

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ForeignServerOptionsViewRow(
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerCatalog]] */
  foreignServerCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerName]] */
  foreignServerName: Option[SqlIdentifier],
  optionName: Option[SqlIdentifier],
  optionValue: Option[CharacterData]
)

object ForeignServerOptionsViewRow {
  def rowParser(idx: Int): RowParser[ForeignServerOptionsViewRow] =
    RowParser[ForeignServerOptionsViewRow] { row =>
      Success(
        ForeignServerOptionsViewRow(
          foreignServerCatalog = row[Option[SqlIdentifier]](idx + 0),
          foreignServerName = row[Option[SqlIdentifier]](idx + 1),
          optionName = row[Option[SqlIdentifier]](idx + 2),
          optionValue = row[Option[CharacterData]](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[ForeignServerOptionsViewRow] = new OFormat[ForeignServerOptionsViewRow]{
    override def writes(o: ForeignServerOptionsViewRow): JsObject =
      Json.obj(
        "foreign_server_catalog" -> o.foreignServerCatalog,
        "foreign_server_name" -> o.foreignServerName,
        "option_name" -> o.optionName,
        "option_value" -> o.optionValue
      )
  
    override def reads(json: JsValue): JsResult[ForeignServerOptionsViewRow] = {
      JsResult.fromTry(
        Try(
          ForeignServerOptionsViewRow(
            foreignServerCatalog = json.\("foreign_server_catalog").toOption.map(_.as[SqlIdentifier]),
            foreignServerName = json.\("foreign_server_name").toOption.map(_.as[SqlIdentifier]),
            optionName = json.\("option_name").toOption.map(_.as[SqlIdentifier]),
            optionValue = json.\("option_value").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
