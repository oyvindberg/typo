/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package view_column_usage

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ViewColumnUsageViewRow(
  viewCatalog: Option[SqlIdentifier],
  viewSchema: Option[SqlIdentifier],
  viewName: Option[SqlIdentifier],
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  columnName: Option[SqlIdentifier]
)

object ViewColumnUsageViewRow {
  def rowParser(idx: Int): RowParser[ViewColumnUsageViewRow] =
    RowParser[ViewColumnUsageViewRow] { row =>
      Success(
        ViewColumnUsageViewRow(
          viewCatalog = row[Option[SqlIdentifier]](idx + 0),
          viewSchema = row[Option[SqlIdentifier]](idx + 1),
          viewName = row[Option[SqlIdentifier]](idx + 2),
          tableCatalog = row[Option[SqlIdentifier]](idx + 3),
          tableSchema = row[Option[SqlIdentifier]](idx + 4),
          tableName = row[Option[SqlIdentifier]](idx + 5),
          columnName = row[Option[SqlIdentifier]](idx + 6)
        )
      )
    }
  implicit val oFormat: OFormat[ViewColumnUsageViewRow] = new OFormat[ViewColumnUsageViewRow]{
    override def writes(o: ViewColumnUsageViewRow): JsObject =
      Json.obj(
        "view_catalog" -> o.viewCatalog,
        "view_schema" -> o.viewSchema,
        "view_name" -> o.viewName,
        "table_catalog" -> o.tableCatalog,
        "table_schema" -> o.tableSchema,
        "table_name" -> o.tableName,
        "column_name" -> o.columnName
      )
  
    override def reads(json: JsValue): JsResult[ViewColumnUsageViewRow] = {
      JsResult.fromTry(
        Try(
          ViewColumnUsageViewRow(
            viewCatalog = json.\("view_catalog").toOption.map(_.as[SqlIdentifier]),
            viewSchema = json.\("view_schema").toOption.map(_.as[SqlIdentifier]),
            viewName = json.\("view_name").toOption.map(_.as[SqlIdentifier]),
            tableCatalog = json.\("table_catalog").toOption.map(_.as[SqlIdentifier]),
            tableSchema = json.\("table_schema").toOption.map(_.as[SqlIdentifier]),
            tableName = json.\("table_name").toOption.map(_.as[SqlIdentifier]),
            columnName = json.\("column_name").toOption.map(_.as[SqlIdentifier])
          )
        )
      )
    }
  }
}
