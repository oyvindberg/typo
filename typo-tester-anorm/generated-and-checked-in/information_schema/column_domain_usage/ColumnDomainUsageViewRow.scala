/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package column_domain_usage

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ColumnDomainUsageViewRow(
  domainCatalog: Option[SqlIdentifier],
  domainSchema: Option[SqlIdentifier],
  domainName: Option[SqlIdentifier],
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  columnName: Option[SqlIdentifier]
)

object ColumnDomainUsageViewRow {
  def rowParser(idx: Int): RowParser[ColumnDomainUsageViewRow] =
    RowParser[ColumnDomainUsageViewRow] { row =>
      Success(
        ColumnDomainUsageViewRow(
          domainCatalog = row[Option[SqlIdentifier]](idx + 0),
          domainSchema = row[Option[SqlIdentifier]](idx + 1),
          domainName = row[Option[SqlIdentifier]](idx + 2),
          tableCatalog = row[Option[SqlIdentifier]](idx + 3),
          tableSchema = row[Option[SqlIdentifier]](idx + 4),
          tableName = row[Option[SqlIdentifier]](idx + 5),
          columnName = row[Option[SqlIdentifier]](idx + 6)
        )
      )
    }
  implicit val oFormat: OFormat[ColumnDomainUsageViewRow] = new OFormat[ColumnDomainUsageViewRow]{
    override def writes(o: ColumnDomainUsageViewRow): JsObject =
      Json.obj(
        "domain_catalog" -> o.domainCatalog,
        "domain_schema" -> o.domainSchema,
        "domain_name" -> o.domainName,
        "table_catalog" -> o.tableCatalog,
        "table_schema" -> o.tableSchema,
        "table_name" -> o.tableName,
        "column_name" -> o.columnName
      )
  
    override def reads(json: JsValue): JsResult[ColumnDomainUsageViewRow] = {
      JsResult.fromTry(
        Try(
          ColumnDomainUsageViewRow(
            domainCatalog = json.\("domain_catalog").toOption.map(_.as[SqlIdentifier]),
            domainSchema = json.\("domain_schema").toOption.map(_.as[SqlIdentifier]),
            domainName = json.\("domain_name").toOption.map(_.as[SqlIdentifier]),
            tableCatalog = json.\("table_catalog").toOption.map(_.as[SqlIdentifier]),
            tableSchema = json.\("table_schema").toOption.map(_.as[SqlIdentifier]),
            tableName = json.\("table_name").toOption.map(_.as[SqlIdentifier]),
            columnName = json.\("column_name").toOption.map(_.as[SqlIdentifier])
          )
        )
      )
    }
  }
}
