/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_mapping_options

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class UserMappingOptionsViewRow(
  /** Points to [[`_pg_user_mappings`.PgUserMappingsViewRow.authorizationIdentifier]] */
  authorizationIdentifier: Option[SqlIdentifier],
  /** Points to [[`_pg_user_mappings`.PgUserMappingsViewRow.foreignServerCatalog]] */
  foreignServerCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_user_mappings`.PgUserMappingsViewRow.foreignServerName]] */
  foreignServerName: Option[SqlIdentifier],
  optionName: Option[SqlIdentifier],
  optionValue: Option[CharacterData]
)

object UserMappingOptionsViewRow {
  def rowParser(idx: Int): RowParser[UserMappingOptionsViewRow] =
    RowParser[UserMappingOptionsViewRow] { row =>
      Success(
        UserMappingOptionsViewRow(
          authorizationIdentifier = row[Option[SqlIdentifier]](idx + 0),
          foreignServerCatalog = row[Option[SqlIdentifier]](idx + 1),
          foreignServerName = row[Option[SqlIdentifier]](idx + 2),
          optionName = row[Option[SqlIdentifier]](idx + 3),
          optionValue = row[Option[CharacterData]](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[UserMappingOptionsViewRow] = new OFormat[UserMappingOptionsViewRow]{
    override def writes(o: UserMappingOptionsViewRow): JsObject =
      Json.obj(
        "authorization_identifier" -> o.authorizationIdentifier,
        "foreign_server_catalog" -> o.foreignServerCatalog,
        "foreign_server_name" -> o.foreignServerName,
        "option_name" -> o.optionName,
        "option_value" -> o.optionValue
      )
  
    override def reads(json: JsValue): JsResult[UserMappingOptionsViewRow] = {
      JsResult.fromTry(
        Try(
          UserMappingOptionsViewRow(
            authorizationIdentifier = json.\("authorization_identifier").toOption.map(_.as[SqlIdentifier]),
            foreignServerCatalog = json.\("foreign_server_catalog").toOption.map(_.as[SqlIdentifier]),
            foreignServerName = json.\("foreign_server_name").toOption.map(_.as[SqlIdentifier]),
            optionName = json.\("option_name").toOption.map(_.as[SqlIdentifier]),
            optionValue = json.\("option_value").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
