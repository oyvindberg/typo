/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package tables

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class TablesViewRow(
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  tableType: Option[CharacterData],
  selfReferencingColumnName: Option[SqlIdentifier],
  referenceGeneration: Option[CharacterData],
  userDefinedTypeCatalog: Option[SqlIdentifier],
  userDefinedTypeSchema: Option[SqlIdentifier],
  userDefinedTypeName: Option[SqlIdentifier],
  isInsertableInto: Option[YesOrNo],
  isTyped: Option[YesOrNo],
  commitAction: Option[CharacterData]
)

object TablesViewRow {
  implicit val reads: Reads[TablesViewRow] = Reads[TablesViewRow](json => JsResult.fromTry(
      Try(
        TablesViewRow(
          tableCatalog = json.\("table_catalog").toOption.map(_.as[SqlIdentifier]),
          tableSchema = json.\("table_schema").toOption.map(_.as[SqlIdentifier]),
          tableName = json.\("table_name").toOption.map(_.as[SqlIdentifier]),
          tableType = json.\("table_type").toOption.map(_.as[CharacterData]),
          selfReferencingColumnName = json.\("self_referencing_column_name").toOption.map(_.as[SqlIdentifier]),
          referenceGeneration = json.\("reference_generation").toOption.map(_.as[CharacterData]),
          userDefinedTypeCatalog = json.\("user_defined_type_catalog").toOption.map(_.as[SqlIdentifier]),
          userDefinedTypeSchema = json.\("user_defined_type_schema").toOption.map(_.as[SqlIdentifier]),
          userDefinedTypeName = json.\("user_defined_type_name").toOption.map(_.as[SqlIdentifier]),
          isInsertableInto = json.\("is_insertable_into").toOption.map(_.as[YesOrNo]),
          isTyped = json.\("is_typed").toOption.map(_.as[YesOrNo]),
          commitAction = json.\("commit_action").toOption.map(_.as[CharacterData])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TablesViewRow] = RowParser[TablesViewRow] { row =>
    Success(
      TablesViewRow(
        tableCatalog = row[Option[SqlIdentifier]](idx + 0),
        tableSchema = row[Option[SqlIdentifier]](idx + 1),
        tableName = row[Option[SqlIdentifier]](idx + 2),
        tableType = row[Option[CharacterData]](idx + 3),
        selfReferencingColumnName = row[Option[SqlIdentifier]](idx + 4),
        referenceGeneration = row[Option[CharacterData]](idx + 5),
        userDefinedTypeCatalog = row[Option[SqlIdentifier]](idx + 6),
        userDefinedTypeSchema = row[Option[SqlIdentifier]](idx + 7),
        userDefinedTypeName = row[Option[SqlIdentifier]](idx + 8),
        isInsertableInto = row[Option[YesOrNo]](idx + 9),
        isTyped = row[Option[YesOrNo]](idx + 10),
        commitAction = row[Option[CharacterData]](idx + 11)
      )
    )
  }
  implicit val writes: OWrites[TablesViewRow] = OWrites[TablesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "table_catalog" -> Json.toJson(o.tableCatalog),
      "table_schema" -> Json.toJson(o.tableSchema),
      "table_name" -> Json.toJson(o.tableName),
      "table_type" -> Json.toJson(o.tableType),
      "self_referencing_column_name" -> Json.toJson(o.selfReferencingColumnName),
      "reference_generation" -> Json.toJson(o.referenceGeneration),
      "user_defined_type_catalog" -> Json.toJson(o.userDefinedTypeCatalog),
      "user_defined_type_schema" -> Json.toJson(o.userDefinedTypeSchema),
      "user_defined_type_name" -> Json.toJson(o.userDefinedTypeName),
      "is_insertable_into" -> Json.toJson(o.isInsertableInto),
      "is_typed" -> Json.toJson(o.isTyped),
      "commit_action" -> Json.toJson(o.commitAction)
    ))
  )
}
