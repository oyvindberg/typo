/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package role_column_grants

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class RoleColumnGrantsViewRow(
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.grantor]] */
  grantor: Option[SqlIdentifier],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.grantee]] */
  grantee: Option[SqlIdentifier],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.tableCatalog]] */
  tableCatalog: Option[SqlIdentifier],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.tableSchema]] */
  tableSchema: Option[SqlIdentifier],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.tableName]] */
  tableName: Option[SqlIdentifier],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.columnName]] */
  columnName: Option[SqlIdentifier],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.privilegeType]] */
  privilegeType: Option[CharacterData],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.isGrantable]] */
  isGrantable: Option[YesOrNo]
)

object RoleColumnGrantsViewRow {
  implicit val reads: Reads[RoleColumnGrantsViewRow] = Reads[RoleColumnGrantsViewRow](json => JsResult.fromTry(
      Try(
        RoleColumnGrantsViewRow(
          grantor = json.\("grantor").toOption.map(_.as[SqlIdentifier]),
          grantee = json.\("grantee").toOption.map(_.as[SqlIdentifier]),
          tableCatalog = json.\("table_catalog").toOption.map(_.as[SqlIdentifier]),
          tableSchema = json.\("table_schema").toOption.map(_.as[SqlIdentifier]),
          tableName = json.\("table_name").toOption.map(_.as[SqlIdentifier]),
          columnName = json.\("column_name").toOption.map(_.as[SqlIdentifier]),
          privilegeType = json.\("privilege_type").toOption.map(_.as[CharacterData]),
          isGrantable = json.\("is_grantable").toOption.map(_.as[YesOrNo])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[RoleColumnGrantsViewRow] = RowParser[RoleColumnGrantsViewRow] { row =>
    Success(
      RoleColumnGrantsViewRow(
        grantor = row[Option[SqlIdentifier]](idx + 0),
        grantee = row[Option[SqlIdentifier]](idx + 1),
        tableCatalog = row[Option[SqlIdentifier]](idx + 2),
        tableSchema = row[Option[SqlIdentifier]](idx + 3),
        tableName = row[Option[SqlIdentifier]](idx + 4),
        columnName = row[Option[SqlIdentifier]](idx + 5),
        privilegeType = row[Option[CharacterData]](idx + 6),
        isGrantable = row[Option[YesOrNo]](idx + 7)
      )
    )
  }
  implicit val writes: OWrites[RoleColumnGrantsViewRow] = OWrites[RoleColumnGrantsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "grantor" -> Json.toJson(o.grantor),
      "grantee" -> Json.toJson(o.grantee),
      "table_catalog" -> Json.toJson(o.tableCatalog),
      "table_schema" -> Json.toJson(o.tableSchema),
      "table_name" -> Json.toJson(o.tableName),
      "column_name" -> Json.toJson(o.columnName),
      "privilege_type" -> Json.toJson(o.privilegeType),
      "is_grantable" -> Json.toJson(o.isGrantable)
    ))
  )
}
