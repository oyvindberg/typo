/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package views

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ViewsViewRow(
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  viewDefinition: Option[CharacterData],
  checkOption: Option[CharacterData],
  isUpdatable: Option[YesOrNo],
  isInsertableInto: Option[YesOrNo],
  isTriggerUpdatable: Option[YesOrNo],
  isTriggerDeletable: Option[YesOrNo],
  isTriggerInsertableInto: Option[YesOrNo]
)

object ViewsViewRow {
  def rowParser(idx: Int): RowParser[ViewsViewRow] =
    RowParser[ViewsViewRow] { row =>
      Success(
        ViewsViewRow(
          tableCatalog = row[Option[SqlIdentifier]](idx + 0),
          tableSchema = row[Option[SqlIdentifier]](idx + 1),
          tableName = row[Option[SqlIdentifier]](idx + 2),
          viewDefinition = row[Option[CharacterData]](idx + 3),
          checkOption = row[Option[CharacterData]](idx + 4),
          isUpdatable = row[Option[YesOrNo]](idx + 5),
          isInsertableInto = row[Option[YesOrNo]](idx + 6),
          isTriggerUpdatable = row[Option[YesOrNo]](idx + 7),
          isTriggerDeletable = row[Option[YesOrNo]](idx + 8),
          isTriggerInsertableInto = row[Option[YesOrNo]](idx + 9)
        )
      )
    }
  implicit val oFormat: OFormat[ViewsViewRow] = new OFormat[ViewsViewRow]{
    override def writes(o: ViewsViewRow): JsObject =
      Json.obj(
        "table_catalog" -> o.tableCatalog,
        "table_schema" -> o.tableSchema,
        "table_name" -> o.tableName,
        "view_definition" -> o.viewDefinition,
        "check_option" -> o.checkOption,
        "is_updatable" -> o.isUpdatable,
        "is_insertable_into" -> o.isInsertableInto,
        "is_trigger_updatable" -> o.isTriggerUpdatable,
        "is_trigger_deletable" -> o.isTriggerDeletable,
        "is_trigger_insertable_into" -> o.isTriggerInsertableInto
      )
  
    override def reads(json: JsValue): JsResult[ViewsViewRow] = {
      JsResult.fromTry(
        Try(
          ViewsViewRow(
            tableCatalog = json.\("table_catalog").toOption.map(_.as[SqlIdentifier]),
            tableSchema = json.\("table_schema").toOption.map(_.as[SqlIdentifier]),
            tableName = json.\("table_name").toOption.map(_.as[SqlIdentifier]),
            viewDefinition = json.\("view_definition").toOption.map(_.as[CharacterData]),
            checkOption = json.\("check_option").toOption.map(_.as[CharacterData]),
            isUpdatable = json.\("is_updatable").toOption.map(_.as[YesOrNo]),
            isInsertableInto = json.\("is_insertable_into").toOption.map(_.as[YesOrNo]),
            isTriggerUpdatable = json.\("is_trigger_updatable").toOption.map(_.as[YesOrNo]),
            isTriggerDeletable = json.\("is_trigger_deletable").toOption.map(_.as[YesOrNo]),
            isTriggerInsertableInto = json.\("is_trigger_insertable_into").toOption.map(_.as[YesOrNo])
          )
        )
      )
    }
  }
}
