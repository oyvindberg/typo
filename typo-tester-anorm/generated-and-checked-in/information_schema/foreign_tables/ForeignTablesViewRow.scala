/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_tables

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ForeignTablesViewRow(
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableCatalog]] */
  foreignTableCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableSchema]] */
  foreignTableSchema: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableName]] */
  foreignTableName: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignServerCatalog]] */
  foreignServerCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignServerName]] */
  foreignServerName: Option[SqlIdentifier]
)

object ForeignTablesViewRow {
  def rowParser(idx: Int): RowParser[ForeignTablesViewRow] =
    RowParser[ForeignTablesViewRow] { row =>
      Success(
        ForeignTablesViewRow(
          foreignTableCatalog = row[Option[SqlIdentifier]](idx + 0),
          foreignTableSchema = row[Option[SqlIdentifier]](idx + 1),
          foreignTableName = row[Option[SqlIdentifier]](idx + 2),
          foreignServerCatalog = row[Option[SqlIdentifier]](idx + 3),
          foreignServerName = row[Option[SqlIdentifier]](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[ForeignTablesViewRow] = new OFormat[ForeignTablesViewRow]{
    override def writes(o: ForeignTablesViewRow): JsObject =
      Json.obj(
        "foreign_table_catalog" -> o.foreignTableCatalog,
        "foreign_table_schema" -> o.foreignTableSchema,
        "foreign_table_name" -> o.foreignTableName,
        "foreign_server_catalog" -> o.foreignServerCatalog,
        "foreign_server_name" -> o.foreignServerName
      )
  
    override def reads(json: JsValue): JsResult[ForeignTablesViewRow] = {
      JsResult.fromTry(
        Try(
          ForeignTablesViewRow(
            foreignTableCatalog = json.\("foreign_table_catalog").toOption.map(_.as[SqlIdentifier]),
            foreignTableSchema = json.\("foreign_table_schema").toOption.map(_.as[SqlIdentifier]),
            foreignTableName = json.\("foreign_table_name").toOption.map(_.as[SqlIdentifier]),
            foreignServerCatalog = json.\("foreign_server_catalog").toOption.map(_.as[SqlIdentifier]),
            foreignServerName = json.\("foreign_server_name").toOption.map(_.as[SqlIdentifier])
          )
        )
      )
    }
  }
}
