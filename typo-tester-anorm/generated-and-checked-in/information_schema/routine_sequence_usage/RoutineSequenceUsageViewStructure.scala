/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package routine_sequence_usage

import adventureworks.information_schema.SqlIdentifier
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class RoutineSequenceUsageViewStructure[Row](val prefix: Option[String], val extract: Row => RoutineSequenceUsageViewRow, val merge: (Row, RoutineSequenceUsageViewRow) => Row)
  extends Relation[RoutineSequenceUsageViewFields, RoutineSequenceUsageViewRow, Row]
    with RoutineSequenceUsageViewFields[Row] { outer =>

  override val specificCatalog = new OptField[SqlIdentifier, Row](prefix, "specific_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).specificCatalog, (row, value) => merge(row, extract(row).copy(specificCatalog = value)))
  override val specificSchema = new OptField[SqlIdentifier, Row](prefix, "specific_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).specificSchema, (row, value) => merge(row, extract(row).copy(specificSchema = value)))
  override val specificName = new OptField[SqlIdentifier, Row](prefix, "specific_name", None, Some("information_schema.sql_identifier"))(x => extract(x).specificName, (row, value) => merge(row, extract(row).copy(specificName = value)))
  override val routineCatalog = new OptField[SqlIdentifier, Row](prefix, "routine_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).routineCatalog, (row, value) => merge(row, extract(row).copy(routineCatalog = value)))
  override val routineSchema = new OptField[SqlIdentifier, Row](prefix, "routine_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).routineSchema, (row, value) => merge(row, extract(row).copy(routineSchema = value)))
  override val routineName = new OptField[SqlIdentifier, Row](prefix, "routine_name", None, Some("information_schema.sql_identifier"))(x => extract(x).routineName, (row, value) => merge(row, extract(row).copy(routineName = value)))
  override val sequenceCatalog = new OptField[SqlIdentifier, Row](prefix, "sequence_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).sequenceCatalog, (row, value) => merge(row, extract(row).copy(sequenceCatalog = value)))
  override val sequenceSchema = new OptField[SqlIdentifier, Row](prefix, "sequence_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).sequenceSchema, (row, value) => merge(row, extract(row).copy(sequenceSchema = value)))
  override val sequenceName = new OptField[SqlIdentifier, Row](prefix, "sequence_name", None, Some("information_schema.sql_identifier"))(x => extract(x).sequenceName, (row, value) => merge(row, extract(row).copy(sequenceName = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](specificCatalog, specificSchema, specificName, routineCatalog, routineSchema, routineName, sequenceCatalog, sequenceSchema, sequenceName)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => RoutineSequenceUsageViewRow, merge: (NewRow, RoutineSequenceUsageViewRow) => NewRow): RoutineSequenceUsageViewStructure[NewRow] =
    new RoutineSequenceUsageViewStructure(prefix, extract, merge)
}
