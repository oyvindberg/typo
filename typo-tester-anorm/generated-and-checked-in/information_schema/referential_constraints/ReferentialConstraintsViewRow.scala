/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package referential_constraints

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ReferentialConstraintsViewRow(
  constraintCatalog: Option[SqlIdentifier],
  constraintSchema: Option[SqlIdentifier],
  constraintName: Option[SqlIdentifier],
  uniqueConstraintCatalog: Option[SqlIdentifier],
  uniqueConstraintSchema: Option[SqlIdentifier],
  uniqueConstraintName: Option[SqlIdentifier],
  matchOption: Option[CharacterData],
  updateRule: Option[CharacterData],
  deleteRule: Option[CharacterData]
)

object ReferentialConstraintsViewRow {
  def rowParser(idx: Int): RowParser[ReferentialConstraintsViewRow] =
    RowParser[ReferentialConstraintsViewRow] { row =>
      Success(
        ReferentialConstraintsViewRow(
          constraintCatalog = row[Option[SqlIdentifier]](idx + 0),
          constraintSchema = row[Option[SqlIdentifier]](idx + 1),
          constraintName = row[Option[SqlIdentifier]](idx + 2),
          uniqueConstraintCatalog = row[Option[SqlIdentifier]](idx + 3),
          uniqueConstraintSchema = row[Option[SqlIdentifier]](idx + 4),
          uniqueConstraintName = row[Option[SqlIdentifier]](idx + 5),
          matchOption = row[Option[CharacterData]](idx + 6),
          updateRule = row[Option[CharacterData]](idx + 7),
          deleteRule = row[Option[CharacterData]](idx + 8)
        )
      )
    }
  implicit val oFormat: OFormat[ReferentialConstraintsViewRow] = new OFormat[ReferentialConstraintsViewRow]{
    override def writes(o: ReferentialConstraintsViewRow): JsObject =
      Json.obj(
        "constraint_catalog" -> o.constraintCatalog,
        "constraint_schema" -> o.constraintSchema,
        "constraint_name" -> o.constraintName,
        "unique_constraint_catalog" -> o.uniqueConstraintCatalog,
        "unique_constraint_schema" -> o.uniqueConstraintSchema,
        "unique_constraint_name" -> o.uniqueConstraintName,
        "match_option" -> o.matchOption,
        "update_rule" -> o.updateRule,
        "delete_rule" -> o.deleteRule
      )
  
    override def reads(json: JsValue): JsResult[ReferentialConstraintsViewRow] = {
      JsResult.fromTry(
        Try(
          ReferentialConstraintsViewRow(
            constraintCatalog = json.\("constraint_catalog").toOption.map(_.as[SqlIdentifier]),
            constraintSchema = json.\("constraint_schema").toOption.map(_.as[SqlIdentifier]),
            constraintName = json.\("constraint_name").toOption.map(_.as[SqlIdentifier]),
            uniqueConstraintCatalog = json.\("unique_constraint_catalog").toOption.map(_.as[SqlIdentifier]),
            uniqueConstraintSchema = json.\("unique_constraint_schema").toOption.map(_.as[SqlIdentifier]),
            uniqueConstraintName = json.\("unique_constraint_name").toOption.map(_.as[SqlIdentifier]),
            matchOption = json.\("match_option").toOption.map(_.as[CharacterData]),
            updateRule = json.\("update_rule").toOption.map(_.as[CharacterData]),
            deleteRule = json.\("delete_rule").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
