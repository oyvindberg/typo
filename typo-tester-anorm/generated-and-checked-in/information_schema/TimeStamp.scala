/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import java.time.OffsetDateTime
import play.api.libs.json.Format

/** Domain `information_schema.time_stamp`
  * No constraint
  */
case class TimeStamp(value: OffsetDateTime) extends AnyVal
object TimeStamp {
  implicit def ordering(implicit ev: Ordering[OffsetDateTime]): Ordering[TimeStamp] = Ordering.by(_.value)
  implicit val format: Format[TimeStamp] = implicitly[Format[OffsetDateTime]].bimap(TimeStamp.apply, _.value)
  implicit val toStatement: ToStatement[TimeStamp] = implicitly[ToStatement[OffsetDateTime]].contramap(_.value)
  implicit val toStatementArray: ToStatement[Array[TimeStamp]] = implicitly[ToStatement[Array[OffsetDateTime]]].contramap(_.map(_.value))
  implicit val column: Column[TimeStamp] = implicitly[Column[OffsetDateTime]].map(TimeStamp.apply)
  implicit val parameterMetadata: ParameterMetaData[TimeStamp] = new ParameterMetaData[TimeStamp] {
    override def sqlType: String = implicitly[ParameterMetaData[OffsetDateTime]].sqlType
    override def jdbcType: Int = implicitly[ParameterMetaData[OffsetDateTime]].jdbcType
  }

}
