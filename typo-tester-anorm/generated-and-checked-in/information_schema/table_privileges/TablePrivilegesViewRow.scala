/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package table_privileges

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class TablePrivilegesViewRow(
  grantor: Option[SqlIdentifier],
  grantee: Option[SqlIdentifier],
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  privilegeType: Option[CharacterData],
  isGrantable: Option[YesOrNo],
  withHierarchy: Option[YesOrNo]
)

object TablePrivilegesViewRow {
  def rowParser(idx: Int): RowParser[TablePrivilegesViewRow] =
    RowParser[TablePrivilegesViewRow] { row =>
      Success(
        TablePrivilegesViewRow(
          grantor = row[Option[SqlIdentifier]](idx + 0),
          grantee = row[Option[SqlIdentifier]](idx + 1),
          tableCatalog = row[Option[SqlIdentifier]](idx + 2),
          tableSchema = row[Option[SqlIdentifier]](idx + 3),
          tableName = row[Option[SqlIdentifier]](idx + 4),
          privilegeType = row[Option[CharacterData]](idx + 5),
          isGrantable = row[Option[YesOrNo]](idx + 6),
          withHierarchy = row[Option[YesOrNo]](idx + 7)
        )
      )
    }
  implicit val oFormat: OFormat[TablePrivilegesViewRow] = new OFormat[TablePrivilegesViewRow]{
    override def writes(o: TablePrivilegesViewRow): JsObject =
      Json.obj(
        "grantor" -> o.grantor,
        "grantee" -> o.grantee,
        "table_catalog" -> o.tableCatalog,
        "table_schema" -> o.tableSchema,
        "table_name" -> o.tableName,
        "privilege_type" -> o.privilegeType,
        "is_grantable" -> o.isGrantable,
        "with_hierarchy" -> o.withHierarchy
      )
  
    override def reads(json: JsValue): JsResult[TablePrivilegesViewRow] = {
      JsResult.fromTry(
        Try(
          TablePrivilegesViewRow(
            grantor = json.\("grantor").toOption.map(_.as[SqlIdentifier]),
            grantee = json.\("grantee").toOption.map(_.as[SqlIdentifier]),
            tableCatalog = json.\("table_catalog").toOption.map(_.as[SqlIdentifier]),
            tableSchema = json.\("table_schema").toOption.map(_.as[SqlIdentifier]),
            tableName = json.\("table_name").toOption.map(_.as[SqlIdentifier]),
            privilegeType = json.\("privilege_type").toOption.map(_.as[CharacterData]),
            isGrantable = json.\("is_grantable").toOption.map(_.as[YesOrNo]),
            withHierarchy = json.\("with_hierarchy").toOption.map(_.as[YesOrNo])
          )
        )
      )
    }
  }
}
