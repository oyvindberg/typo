/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sql_sizing

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SqlSizingRow(
  sizingId: Option[CardinalNumber],
  sizingName: Option[CharacterData],
  supportedValue: Option[CardinalNumber],
  comments: Option[CharacterData]
)

object SqlSizingRow {
  def rowParser(idx: Int): RowParser[SqlSizingRow] =
    RowParser[SqlSizingRow] { row =>
      Success(
        SqlSizingRow(
          sizingId = row[Option[CardinalNumber]](idx + 0),
          sizingName = row[Option[CharacterData]](idx + 1),
          supportedValue = row[Option[CardinalNumber]](idx + 2),
          comments = row[Option[CharacterData]](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[SqlSizingRow] = new OFormat[SqlSizingRow]{
    override def writes(o: SqlSizingRow): JsObject =
      Json.obj(
        "sizing_id" -> o.sizingId,
        "sizing_name" -> o.sizingName,
        "supported_value" -> o.supportedValue,
        "comments" -> o.comments
      )
  
    override def reads(json: JsValue): JsResult[SqlSizingRow] = {
      JsResult.fromTry(
        Try(
          SqlSizingRow(
            sizingId = json.\("sizing_id").toOption.map(_.as[CardinalNumber]),
            sizingName = json.\("sizing_name").toOption.map(_.as[CharacterData]),
            supportedValue = json.\("supported_value").toOption.map(_.as[CardinalNumber]),
            comments = json.\("comments").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
