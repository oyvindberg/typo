/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package transforms

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class TransformsViewRow(
  udtCatalog: Option[SqlIdentifier],
  udtSchema: Option[SqlIdentifier],
  udtName: Option[SqlIdentifier],
  specificCatalog: Option[SqlIdentifier],
  specificSchema: Option[SqlIdentifier],
  specificName: Option[SqlIdentifier],
  groupName: Option[SqlIdentifier],
  transformType: Option[CharacterData]
)

object TransformsViewRow {
  def rowParser(idx: Int): RowParser[TransformsViewRow] =
    RowParser[TransformsViewRow] { row =>
      Success(
        TransformsViewRow(
          udtCatalog = row[Option[SqlIdentifier]](idx + 0),
          udtSchema = row[Option[SqlIdentifier]](idx + 1),
          udtName = row[Option[SqlIdentifier]](idx + 2),
          specificCatalog = row[Option[SqlIdentifier]](idx + 3),
          specificSchema = row[Option[SqlIdentifier]](idx + 4),
          specificName = row[Option[SqlIdentifier]](idx + 5),
          groupName = row[Option[SqlIdentifier]](idx + 6),
          transformType = row[Option[CharacterData]](idx + 7)
        )
      )
    }
  implicit val oFormat: OFormat[TransformsViewRow] = new OFormat[TransformsViewRow]{
    override def writes(o: TransformsViewRow): JsObject =
      Json.obj(
        "udt_catalog" -> o.udtCatalog,
        "udt_schema" -> o.udtSchema,
        "udt_name" -> o.udtName,
        "specific_catalog" -> o.specificCatalog,
        "specific_schema" -> o.specificSchema,
        "specific_name" -> o.specificName,
        "group_name" -> o.groupName,
        "transform_type" -> o.transformType
      )
  
    override def reads(json: JsValue): JsResult[TransformsViewRow] = {
      JsResult.fromTry(
        Try(
          TransformsViewRow(
            udtCatalog = json.\("udt_catalog").toOption.map(_.as[SqlIdentifier]),
            udtSchema = json.\("udt_schema").toOption.map(_.as[SqlIdentifier]),
            udtName = json.\("udt_name").toOption.map(_.as[SqlIdentifier]),
            specificCatalog = json.\("specific_catalog").toOption.map(_.as[SqlIdentifier]),
            specificSchema = json.\("specific_schema").toOption.map(_.as[SqlIdentifier]),
            specificName = json.\("specific_name").toOption.map(_.as[SqlIdentifier]),
            groupName = json.\("group_name").toOption.map(_.as[SqlIdentifier]),
            transformType = json.\("transform_type").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
