/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package domain_udt_usage

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class DomainUdtUsageViewRow(
  udtCatalog: Option[SqlIdentifier],
  udtSchema: Option[SqlIdentifier],
  udtName: Option[SqlIdentifier],
  domainCatalog: Option[SqlIdentifier],
  domainSchema: Option[SqlIdentifier],
  domainName: Option[SqlIdentifier]
)

object DomainUdtUsageViewRow {
  def rowParser(idx: Int): RowParser[DomainUdtUsageViewRow] =
    RowParser[DomainUdtUsageViewRow] { row =>
      Success(
        DomainUdtUsageViewRow(
          udtCatalog = row[Option[SqlIdentifier]](idx + 0),
          udtSchema = row[Option[SqlIdentifier]](idx + 1),
          udtName = row[Option[SqlIdentifier]](idx + 2),
          domainCatalog = row[Option[SqlIdentifier]](idx + 3),
          domainSchema = row[Option[SqlIdentifier]](idx + 4),
          domainName = row[Option[SqlIdentifier]](idx + 5)
        )
      )
    }
  implicit val oFormat: OFormat[DomainUdtUsageViewRow] = new OFormat[DomainUdtUsageViewRow]{
    override def writes(o: DomainUdtUsageViewRow): JsObject =
      Json.obj(
        "udt_catalog" -> o.udtCatalog,
        "udt_schema" -> o.udtSchema,
        "udt_name" -> o.udtName,
        "domain_catalog" -> o.domainCatalog,
        "domain_schema" -> o.domainSchema,
        "domain_name" -> o.domainName
      )
  
    override def reads(json: JsValue): JsResult[DomainUdtUsageViewRow] = {
      JsResult.fromTry(
        Try(
          DomainUdtUsageViewRow(
            udtCatalog = json.\("udt_catalog").toOption.map(_.as[SqlIdentifier]),
            udtSchema = json.\("udt_schema").toOption.map(_.as[SqlIdentifier]),
            udtName = json.\("udt_name").toOption.map(_.as[SqlIdentifier]),
            domainCatalog = json.\("domain_catalog").toOption.map(_.as[SqlIdentifier]),
            domainSchema = json.\("domain_schema").toOption.map(_.as[SqlIdentifier]),
            domainName = json.\("domain_name").toOption.map(_.as[SqlIdentifier])
          )
        )
      )
    }
  }
}
