/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sql_implementation_info

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SqlImplementationInfoRow(
  implementationInfoId: Option[CharacterData],
  implementationInfoName: Option[CharacterData],
  integerValue: Option[CardinalNumber],
  characterValue: Option[CharacterData],
  comments: Option[CharacterData]
)

object SqlImplementationInfoRow {
  def rowParser(idx: Int): RowParser[SqlImplementationInfoRow] =
    RowParser[SqlImplementationInfoRow] { row =>
      Success(
        SqlImplementationInfoRow(
          implementationInfoId = row[Option[CharacterData]](idx + 0),
          implementationInfoName = row[Option[CharacterData]](idx + 1),
          integerValue = row[Option[CardinalNumber]](idx + 2),
          characterValue = row[Option[CharacterData]](idx + 3),
          comments = row[Option[CharacterData]](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[SqlImplementationInfoRow] = new OFormat[SqlImplementationInfoRow]{
    override def writes(o: SqlImplementationInfoRow): JsObject =
      Json.obj(
        "implementation_info_id" -> o.implementationInfoId,
        "implementation_info_name" -> o.implementationInfoName,
        "integer_value" -> o.integerValue,
        "character_value" -> o.characterValue,
        "comments" -> o.comments
      )
  
    override def reads(json: JsValue): JsResult[SqlImplementationInfoRow] = {
      JsResult.fromTry(
        Try(
          SqlImplementationInfoRow(
            implementationInfoId = json.\("implementation_info_id").toOption.map(_.as[CharacterData]),
            implementationInfoName = json.\("implementation_info_name").toOption.map(_.as[CharacterData]),
            integerValue = json.\("integer_value").toOption.map(_.as[CardinalNumber]),
            characterValue = json.\("character_value").toOption.map(_.as[CharacterData]),
            comments = json.\("comments").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
