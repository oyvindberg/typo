/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_data_wrappers`

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgForeignDataWrappersViewRow(
  oid: Option[/* oid */ Long],
  fdwowner: Option[/* oid */ Long],
  fdwoptions: Option[Array[String]],
  foreignDataWrapperCatalog: Option[SqlIdentifier],
  foreignDataWrapperName: Option[SqlIdentifier],
  authorizationIdentifier: Option[SqlIdentifier],
  foreignDataWrapperLanguage: Option[CharacterData]
)

object PgForeignDataWrappersViewRow {
  def rowParser(idx: Int): RowParser[PgForeignDataWrappersViewRow] =
    RowParser[PgForeignDataWrappersViewRow] { row =>
      Success(
        PgForeignDataWrappersViewRow(
          oid = row[Option[/* oid */ Long]](idx + 0),
          fdwowner = row[Option[/* oid */ Long]](idx + 1),
          fdwoptions = row[Option[Array[String]]](idx + 2),
          foreignDataWrapperCatalog = row[Option[SqlIdentifier]](idx + 3),
          foreignDataWrapperName = row[Option[SqlIdentifier]](idx + 4),
          authorizationIdentifier = row[Option[SqlIdentifier]](idx + 5),
          foreignDataWrapperLanguage = row[Option[CharacterData]](idx + 6)
        )
      )
    }
  implicit val oFormat: OFormat[PgForeignDataWrappersViewRow] = new OFormat[PgForeignDataWrappersViewRow]{
    override def writes(o: PgForeignDataWrappersViewRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "fdwowner" -> o.fdwowner,
        "fdwoptions" -> o.fdwoptions,
        "foreign_data_wrapper_catalog" -> o.foreignDataWrapperCatalog,
        "foreign_data_wrapper_name" -> o.foreignDataWrapperName,
        "authorization_identifier" -> o.authorizationIdentifier,
        "foreign_data_wrapper_language" -> o.foreignDataWrapperLanguage
      )
  
    override def reads(json: JsValue): JsResult[PgForeignDataWrappersViewRow] = {
      JsResult.fromTry(
        Try(
          PgForeignDataWrappersViewRow(
            oid = json.\("oid").toOption.map(_.as[/* oid */ Long]),
            fdwowner = json.\("fdwowner").toOption.map(_.as[/* oid */ Long]),
            fdwoptions = json.\("fdwoptions").toOption.map(_.as[Array[String]]),
            foreignDataWrapperCatalog = json.\("foreign_data_wrapper_catalog").toOption.map(_.as[SqlIdentifier]),
            foreignDataWrapperName = json.\("foreign_data_wrapper_name").toOption.map(_.as[SqlIdentifier]),
            authorizationIdentifier = json.\("authorization_identifier").toOption.map(_.as[SqlIdentifier]),
            foreignDataWrapperLanguage = json.\("foreign_data_wrapper_language").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
