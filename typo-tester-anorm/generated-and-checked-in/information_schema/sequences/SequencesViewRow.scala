/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sequences

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SequencesViewRow(
  sequenceCatalog: Option[SqlIdentifier],
  sequenceSchema: Option[SqlIdentifier],
  sequenceName: Option[SqlIdentifier],
  dataType: Option[CharacterData],
  numericPrecision: Option[CardinalNumber],
  numericPrecisionRadix: Option[CardinalNumber],
  numericScale: Option[CardinalNumber],
  startValue: Option[CharacterData],
  minimumValue: Option[CharacterData],
  maximumValue: Option[CharacterData],
  increment: Option[CharacterData],
  cycleOption: Option[YesOrNo]
)

object SequencesViewRow {
  def rowParser(idx: Int): RowParser[SequencesViewRow] =
    RowParser[SequencesViewRow] { row =>
      Success(
        SequencesViewRow(
          sequenceCatalog = row[Option[SqlIdentifier]](idx + 0),
          sequenceSchema = row[Option[SqlIdentifier]](idx + 1),
          sequenceName = row[Option[SqlIdentifier]](idx + 2),
          dataType = row[Option[CharacterData]](idx + 3),
          numericPrecision = row[Option[CardinalNumber]](idx + 4),
          numericPrecisionRadix = row[Option[CardinalNumber]](idx + 5),
          numericScale = row[Option[CardinalNumber]](idx + 6),
          startValue = row[Option[CharacterData]](idx + 7),
          minimumValue = row[Option[CharacterData]](idx + 8),
          maximumValue = row[Option[CharacterData]](idx + 9),
          increment = row[Option[CharacterData]](idx + 10),
          cycleOption = row[Option[YesOrNo]](idx + 11)
        )
      )
    }
  implicit val oFormat: OFormat[SequencesViewRow] = new OFormat[SequencesViewRow]{
    override def writes(o: SequencesViewRow): JsObject =
      Json.obj(
        "sequence_catalog" -> o.sequenceCatalog,
        "sequence_schema" -> o.sequenceSchema,
        "sequence_name" -> o.sequenceName,
        "data_type" -> o.dataType,
        "numeric_precision" -> o.numericPrecision,
        "numeric_precision_radix" -> o.numericPrecisionRadix,
        "numeric_scale" -> o.numericScale,
        "start_value" -> o.startValue,
        "minimum_value" -> o.minimumValue,
        "maximum_value" -> o.maximumValue,
        "increment" -> o.increment,
        "cycle_option" -> o.cycleOption
      )
  
    override def reads(json: JsValue): JsResult[SequencesViewRow] = {
      JsResult.fromTry(
        Try(
          SequencesViewRow(
            sequenceCatalog = json.\("sequence_catalog").toOption.map(_.as[SqlIdentifier]),
            sequenceSchema = json.\("sequence_schema").toOption.map(_.as[SqlIdentifier]),
            sequenceName = json.\("sequence_name").toOption.map(_.as[SqlIdentifier]),
            dataType = json.\("data_type").toOption.map(_.as[CharacterData]),
            numericPrecision = json.\("numeric_precision").toOption.map(_.as[CardinalNumber]),
            numericPrecisionRadix = json.\("numeric_precision_radix").toOption.map(_.as[CardinalNumber]),
            numericScale = json.\("numeric_scale").toOption.map(_.as[CardinalNumber]),
            startValue = json.\("start_value").toOption.map(_.as[CharacterData]),
            minimumValue = json.\("minimum_value").toOption.map(_.as[CharacterData]),
            maximumValue = json.\("maximum_value").toOption.map(_.as[CharacterData]),
            increment = json.\("increment").toOption.map(_.as[CharacterData]),
            cycleOption = json.\("cycle_option").toOption.map(_.as[YesOrNo])
          )
        )
      )
    }
  }
}
