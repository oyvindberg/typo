/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package attributes

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class AttributesViewStructure[Row](val prefix: Option[String], val extract: Row => AttributesViewRow, val merge: (Row, AttributesViewRow) => Row)
  extends Relation[AttributesViewFields, AttributesViewRow, Row]
    with AttributesViewFields[Row] { outer =>

  override val udtCatalog = new OptField[SqlIdentifier, Row](prefix, "udt_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).udtCatalog, (row, value) => merge(row, extract(row).copy(udtCatalog = value)))
  override val udtSchema = new OptField[SqlIdentifier, Row](prefix, "udt_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).udtSchema, (row, value) => merge(row, extract(row).copy(udtSchema = value)))
  override val udtName = new OptField[SqlIdentifier, Row](prefix, "udt_name", None, Some("information_schema.sql_identifier"))(x => extract(x).udtName, (row, value) => merge(row, extract(row).copy(udtName = value)))
  override val attributeName = new OptField[SqlIdentifier, Row](prefix, "attribute_name", None, Some("information_schema.sql_identifier"))(x => extract(x).attributeName, (row, value) => merge(row, extract(row).copy(attributeName = value)))
  override val ordinalPosition = new OptField[CardinalNumber, Row](prefix, "ordinal_position", None, Some("information_schema.cardinal_number"))(x => extract(x).ordinalPosition, (row, value) => merge(row, extract(row).copy(ordinalPosition = value)))
  override val attributeDefault = new OptField[CharacterData, Row](prefix, "attribute_default", None, Some("information_schema.character_data"))(x => extract(x).attributeDefault, (row, value) => merge(row, extract(row).copy(attributeDefault = value)))
  override val isNullable = new OptField[YesOrNo, Row](prefix, "is_nullable", None, Some("information_schema.yes_or_no"))(x => extract(x).isNullable, (row, value) => merge(row, extract(row).copy(isNullable = value)))
  override val dataType = new OptField[CharacterData, Row](prefix, "data_type", None, Some("information_schema.character_data"))(x => extract(x).dataType, (row, value) => merge(row, extract(row).copy(dataType = value)))
  override val characterMaximumLength = new OptField[CardinalNumber, Row](prefix, "character_maximum_length", None, Some("information_schema.cardinal_number"))(x => extract(x).characterMaximumLength, (row, value) => merge(row, extract(row).copy(characterMaximumLength = value)))
  override val characterOctetLength = new OptField[CardinalNumber, Row](prefix, "character_octet_length", None, Some("information_schema.cardinal_number"))(x => extract(x).characterOctetLength, (row, value) => merge(row, extract(row).copy(characterOctetLength = value)))
  override val characterSetCatalog = new OptField[SqlIdentifier, Row](prefix, "character_set_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).characterSetCatalog, (row, value) => merge(row, extract(row).copy(characterSetCatalog = value)))
  override val characterSetSchema = new OptField[SqlIdentifier, Row](prefix, "character_set_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).characterSetSchema, (row, value) => merge(row, extract(row).copy(characterSetSchema = value)))
  override val characterSetName = new OptField[SqlIdentifier, Row](prefix, "character_set_name", None, Some("information_schema.sql_identifier"))(x => extract(x).characterSetName, (row, value) => merge(row, extract(row).copy(characterSetName = value)))
  override val collationCatalog = new OptField[SqlIdentifier, Row](prefix, "collation_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).collationCatalog, (row, value) => merge(row, extract(row).copy(collationCatalog = value)))
  override val collationSchema = new OptField[SqlIdentifier, Row](prefix, "collation_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).collationSchema, (row, value) => merge(row, extract(row).copy(collationSchema = value)))
  override val collationName = new OptField[SqlIdentifier, Row](prefix, "collation_name", None, Some("information_schema.sql_identifier"))(x => extract(x).collationName, (row, value) => merge(row, extract(row).copy(collationName = value)))
  override val numericPrecision = new OptField[CardinalNumber, Row](prefix, "numeric_precision", None, Some("information_schema.cardinal_number"))(x => extract(x).numericPrecision, (row, value) => merge(row, extract(row).copy(numericPrecision = value)))
  override val numericPrecisionRadix = new OptField[CardinalNumber, Row](prefix, "numeric_precision_radix", None, Some("information_schema.cardinal_number"))(x => extract(x).numericPrecisionRadix, (row, value) => merge(row, extract(row).copy(numericPrecisionRadix = value)))
  override val numericScale = new OptField[CardinalNumber, Row](prefix, "numeric_scale", None, Some("information_schema.cardinal_number"))(x => extract(x).numericScale, (row, value) => merge(row, extract(row).copy(numericScale = value)))
  override val datetimePrecision = new OptField[CardinalNumber, Row](prefix, "datetime_precision", None, Some("information_schema.cardinal_number"))(x => extract(x).datetimePrecision, (row, value) => merge(row, extract(row).copy(datetimePrecision = value)))
  override val intervalType = new OptField[CharacterData, Row](prefix, "interval_type", None, Some("information_schema.character_data"))(x => extract(x).intervalType, (row, value) => merge(row, extract(row).copy(intervalType = value)))
  override val intervalPrecision = new OptField[CardinalNumber, Row](prefix, "interval_precision", None, Some("information_schema.cardinal_number"))(x => extract(x).intervalPrecision, (row, value) => merge(row, extract(row).copy(intervalPrecision = value)))
  override val attributeUdtCatalog = new OptField[SqlIdentifier, Row](prefix, "attribute_udt_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).attributeUdtCatalog, (row, value) => merge(row, extract(row).copy(attributeUdtCatalog = value)))
  override val attributeUdtSchema = new OptField[SqlIdentifier, Row](prefix, "attribute_udt_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).attributeUdtSchema, (row, value) => merge(row, extract(row).copy(attributeUdtSchema = value)))
  override val attributeUdtName = new OptField[SqlIdentifier, Row](prefix, "attribute_udt_name", None, Some("information_schema.sql_identifier"))(x => extract(x).attributeUdtName, (row, value) => merge(row, extract(row).copy(attributeUdtName = value)))
  override val scopeCatalog = new OptField[SqlIdentifier, Row](prefix, "scope_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).scopeCatalog, (row, value) => merge(row, extract(row).copy(scopeCatalog = value)))
  override val scopeSchema = new OptField[SqlIdentifier, Row](prefix, "scope_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).scopeSchema, (row, value) => merge(row, extract(row).copy(scopeSchema = value)))
  override val scopeName = new OptField[SqlIdentifier, Row](prefix, "scope_name", None, Some("information_schema.sql_identifier"))(x => extract(x).scopeName, (row, value) => merge(row, extract(row).copy(scopeName = value)))
  override val maximumCardinality = new OptField[CardinalNumber, Row](prefix, "maximum_cardinality", None, Some("information_schema.cardinal_number"))(x => extract(x).maximumCardinality, (row, value) => merge(row, extract(row).copy(maximumCardinality = value)))
  override val dtdIdentifier = new OptField[SqlIdentifier, Row](prefix, "dtd_identifier", None, Some("information_schema.sql_identifier"))(x => extract(x).dtdIdentifier, (row, value) => merge(row, extract(row).copy(dtdIdentifier = value)))
  override val isDerivedReferenceAttribute = new OptField[YesOrNo, Row](prefix, "is_derived_reference_attribute", None, Some("information_schema.yes_or_no"))(x => extract(x).isDerivedReferenceAttribute, (row, value) => merge(row, extract(row).copy(isDerivedReferenceAttribute = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](udtCatalog, udtSchema, udtName, attributeName, ordinalPosition, attributeDefault, isNullable, dataType, characterMaximumLength, characterOctetLength, characterSetCatalog, characterSetSchema, characterSetName, collationCatalog, collationSchema, collationName, numericPrecision, numericPrecisionRadix, numericScale, datetimePrecision, intervalType, intervalPrecision, attributeUdtCatalog, attributeUdtSchema, attributeUdtName, scopeCatalog, scopeSchema, scopeName, maximumCardinality, dtdIdentifier, isDerivedReferenceAttribute)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => AttributesViewRow, merge: (NewRow, AttributesViewRow) => NewRow): AttributesViewStructure[NewRow] =
    new AttributesViewStructure(prefix, extract, merge)
}
