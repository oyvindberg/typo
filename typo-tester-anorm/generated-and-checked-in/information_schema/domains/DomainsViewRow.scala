/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package domains

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class DomainsViewRow(
  domainCatalog: Option[SqlIdentifier],
  domainSchema: Option[SqlIdentifier],
  domainName: Option[SqlIdentifier],
  dataType: Option[CharacterData],
  characterMaximumLength: Option[CardinalNumber],
  characterOctetLength: Option[CardinalNumber],
  characterSetCatalog: Option[SqlIdentifier],
  characterSetSchema: Option[SqlIdentifier],
  characterSetName: Option[SqlIdentifier],
  collationCatalog: Option[SqlIdentifier],
  collationSchema: Option[SqlIdentifier],
  collationName: Option[SqlIdentifier],
  numericPrecision: Option[CardinalNumber],
  numericPrecisionRadix: Option[CardinalNumber],
  numericScale: Option[CardinalNumber],
  datetimePrecision: Option[CardinalNumber],
  intervalType: Option[CharacterData],
  intervalPrecision: Option[CardinalNumber],
  domainDefault: Option[CharacterData],
  udtCatalog: Option[SqlIdentifier],
  udtSchema: Option[SqlIdentifier],
  udtName: Option[SqlIdentifier],
  scopeCatalog: Option[SqlIdentifier],
  scopeSchema: Option[SqlIdentifier],
  scopeName: Option[SqlIdentifier],
  maximumCardinality: Option[CardinalNumber],
  dtdIdentifier: Option[SqlIdentifier]
)

object DomainsViewRow {
  implicit val reads: Reads[DomainsViewRow] = Reads[DomainsViewRow](json => JsResult.fromTry(
      Try(
        DomainsViewRow(
          domainCatalog = json.\("domain_catalog").toOption.map(_.as[SqlIdentifier]),
          domainSchema = json.\("domain_schema").toOption.map(_.as[SqlIdentifier]),
          domainName = json.\("domain_name").toOption.map(_.as[SqlIdentifier]),
          dataType = json.\("data_type").toOption.map(_.as[CharacterData]),
          characterMaximumLength = json.\("character_maximum_length").toOption.map(_.as[CardinalNumber]),
          characterOctetLength = json.\("character_octet_length").toOption.map(_.as[CardinalNumber]),
          characterSetCatalog = json.\("character_set_catalog").toOption.map(_.as[SqlIdentifier]),
          characterSetSchema = json.\("character_set_schema").toOption.map(_.as[SqlIdentifier]),
          characterSetName = json.\("character_set_name").toOption.map(_.as[SqlIdentifier]),
          collationCatalog = json.\("collation_catalog").toOption.map(_.as[SqlIdentifier]),
          collationSchema = json.\("collation_schema").toOption.map(_.as[SqlIdentifier]),
          collationName = json.\("collation_name").toOption.map(_.as[SqlIdentifier]),
          numericPrecision = json.\("numeric_precision").toOption.map(_.as[CardinalNumber]),
          numericPrecisionRadix = json.\("numeric_precision_radix").toOption.map(_.as[CardinalNumber]),
          numericScale = json.\("numeric_scale").toOption.map(_.as[CardinalNumber]),
          datetimePrecision = json.\("datetime_precision").toOption.map(_.as[CardinalNumber]),
          intervalType = json.\("interval_type").toOption.map(_.as[CharacterData]),
          intervalPrecision = json.\("interval_precision").toOption.map(_.as[CardinalNumber]),
          domainDefault = json.\("domain_default").toOption.map(_.as[CharacterData]),
          udtCatalog = json.\("udt_catalog").toOption.map(_.as[SqlIdentifier]),
          udtSchema = json.\("udt_schema").toOption.map(_.as[SqlIdentifier]),
          udtName = json.\("udt_name").toOption.map(_.as[SqlIdentifier]),
          scopeCatalog = json.\("scope_catalog").toOption.map(_.as[SqlIdentifier]),
          scopeSchema = json.\("scope_schema").toOption.map(_.as[SqlIdentifier]),
          scopeName = json.\("scope_name").toOption.map(_.as[SqlIdentifier]),
          maximumCardinality = json.\("maximum_cardinality").toOption.map(_.as[CardinalNumber]),
          dtdIdentifier = json.\("dtd_identifier").toOption.map(_.as[SqlIdentifier])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[DomainsViewRow] = RowParser[DomainsViewRow] { row =>
    Success(
      DomainsViewRow(
        domainCatalog = row[Option[SqlIdentifier]](idx + 0),
        domainSchema = row[Option[SqlIdentifier]](idx + 1),
        domainName = row[Option[SqlIdentifier]](idx + 2),
        dataType = row[Option[CharacterData]](idx + 3),
        characterMaximumLength = row[Option[CardinalNumber]](idx + 4),
        characterOctetLength = row[Option[CardinalNumber]](idx + 5),
        characterSetCatalog = row[Option[SqlIdentifier]](idx + 6),
        characterSetSchema = row[Option[SqlIdentifier]](idx + 7),
        characterSetName = row[Option[SqlIdentifier]](idx + 8),
        collationCatalog = row[Option[SqlIdentifier]](idx + 9),
        collationSchema = row[Option[SqlIdentifier]](idx + 10),
        collationName = row[Option[SqlIdentifier]](idx + 11),
        numericPrecision = row[Option[CardinalNumber]](idx + 12),
        numericPrecisionRadix = row[Option[CardinalNumber]](idx + 13),
        numericScale = row[Option[CardinalNumber]](idx + 14),
        datetimePrecision = row[Option[CardinalNumber]](idx + 15),
        intervalType = row[Option[CharacterData]](idx + 16),
        intervalPrecision = row[Option[CardinalNumber]](idx + 17),
        domainDefault = row[Option[CharacterData]](idx + 18),
        udtCatalog = row[Option[SqlIdentifier]](idx + 19),
        udtSchema = row[Option[SqlIdentifier]](idx + 20),
        udtName = row[Option[SqlIdentifier]](idx + 21),
        scopeCatalog = row[Option[SqlIdentifier]](idx + 22),
        scopeSchema = row[Option[SqlIdentifier]](idx + 23),
        scopeName = row[Option[SqlIdentifier]](idx + 24),
        maximumCardinality = row[Option[CardinalNumber]](idx + 25),
        dtdIdentifier = row[Option[SqlIdentifier]](idx + 26)
      )
    )
  }
  implicit val writes: OWrites[DomainsViewRow] = OWrites[DomainsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "domain_catalog" -> Json.toJson(o.domainCatalog),
      "domain_schema" -> Json.toJson(o.domainSchema),
      "domain_name" -> Json.toJson(o.domainName),
      "data_type" -> Json.toJson(o.dataType),
      "character_maximum_length" -> Json.toJson(o.characterMaximumLength),
      "character_octet_length" -> Json.toJson(o.characterOctetLength),
      "character_set_catalog" -> Json.toJson(o.characterSetCatalog),
      "character_set_schema" -> Json.toJson(o.characterSetSchema),
      "character_set_name" -> Json.toJson(o.characterSetName),
      "collation_catalog" -> Json.toJson(o.collationCatalog),
      "collation_schema" -> Json.toJson(o.collationSchema),
      "collation_name" -> Json.toJson(o.collationName),
      "numeric_precision" -> Json.toJson(o.numericPrecision),
      "numeric_precision_radix" -> Json.toJson(o.numericPrecisionRadix),
      "numeric_scale" -> Json.toJson(o.numericScale),
      "datetime_precision" -> Json.toJson(o.datetimePrecision),
      "interval_type" -> Json.toJson(o.intervalType),
      "interval_precision" -> Json.toJson(o.intervalPrecision),
      "domain_default" -> Json.toJson(o.domainDefault),
      "udt_catalog" -> Json.toJson(o.udtCatalog),
      "udt_schema" -> Json.toJson(o.udtSchema),
      "udt_name" -> Json.toJson(o.udtName),
      "scope_catalog" -> Json.toJson(o.scopeCatalog),
      "scope_schema" -> Json.toJson(o.scopeSchema),
      "scope_name" -> Json.toJson(o.scopeName),
      "maximum_cardinality" -> Json.toJson(o.maximumCardinality),
      "dtd_identifier" -> Json.toJson(o.dtdIdentifier)
    ))
  )
}
