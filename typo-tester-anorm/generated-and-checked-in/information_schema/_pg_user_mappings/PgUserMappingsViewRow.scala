/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_user_mappings`

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PgUserMappingsViewRow(
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.oid]] */
  oid: Option[/* oid */ Long],
  umoptions: Option[Array[String]],
  umuser: Option[/* oid */ Long],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.authorizationIdentifier]] */
  authorizationIdentifier: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerCatalog]] */
  foreignServerCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerName]] */
  foreignServerName: Option[SqlIdentifier],
  srvowner: Option[SqlIdentifier]
)

object PgUserMappingsViewRow {
  def rowParser(idx: Int): RowParser[PgUserMappingsViewRow] =
    RowParser[PgUserMappingsViewRow] { row =>
      Success(
        PgUserMappingsViewRow(
          oid = row[Option[/* oid */ Long]](idx + 0),
          umoptions = row[Option[Array[String]]](idx + 1),
          umuser = row[Option[/* oid */ Long]](idx + 2),
          authorizationIdentifier = row[Option[SqlIdentifier]](idx + 3),
          foreignServerCatalog = row[Option[SqlIdentifier]](idx + 4),
          foreignServerName = row[Option[SqlIdentifier]](idx + 5),
          srvowner = row[Option[SqlIdentifier]](idx + 6)
        )
      )
    }
  implicit val oFormat: OFormat[PgUserMappingsViewRow] = new OFormat[PgUserMappingsViewRow]{
    override def writes(o: PgUserMappingsViewRow): JsObject =
      Json.obj(
        "oid" -> o.oid,
        "umoptions" -> o.umoptions,
        "umuser" -> o.umuser,
        "authorization_identifier" -> o.authorizationIdentifier,
        "foreign_server_catalog" -> o.foreignServerCatalog,
        "foreign_server_name" -> o.foreignServerName,
        "srvowner" -> o.srvowner
      )
  
    override def reads(json: JsValue): JsResult[PgUserMappingsViewRow] = {
      JsResult.fromTry(
        Try(
          PgUserMappingsViewRow(
            oid = json.\("oid").toOption.map(_.as[/* oid */ Long]),
            umoptions = json.\("umoptions").toOption.map(_.as[Array[String]]),
            umuser = json.\("umuser").toOption.map(_.as[/* oid */ Long]),
            authorizationIdentifier = json.\("authorization_identifier").toOption.map(_.as[SqlIdentifier]),
            foreignServerCatalog = json.\("foreign_server_catalog").toOption.map(_.as[SqlIdentifier]),
            foreignServerName = json.\("foreign_server_name").toOption.map(_.as[SqlIdentifier]),
            srvowner = json.\("srvowner").toOption.map(_.as[SqlIdentifier])
          )
        )
      )
    }
  }
}
