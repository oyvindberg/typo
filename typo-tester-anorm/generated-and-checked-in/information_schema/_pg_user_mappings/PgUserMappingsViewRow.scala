/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_user_mappings`

import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgUserMappingsViewRow(
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.oid]] */
  oid: Option[/* oid */ Long],
  umoptions: Option[Array[String]],
  umuser: Option[/* oid */ Long],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.authorizationIdentifier]] */
  authorizationIdentifier: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerCatalog]] */
  foreignServerCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerName]] */
  foreignServerName: Option[SqlIdentifier],
  srvowner: Option[SqlIdentifier]
)

object PgUserMappingsViewRow {
  implicit val reads: Reads[PgUserMappingsViewRow] = Reads[PgUserMappingsViewRow](json => JsResult.fromTry(
      Try(
        PgUserMappingsViewRow(
          oid = json.\("oid").toOption.map(_.as[/* oid */ Long]),
          umoptions = json.\("umoptions").toOption.map(_.as[Array[String]]),
          umuser = json.\("umuser").toOption.map(_.as[/* oid */ Long]),
          authorizationIdentifier = json.\("authorization_identifier").toOption.map(_.as[SqlIdentifier]),
          foreignServerCatalog = json.\("foreign_server_catalog").toOption.map(_.as[SqlIdentifier]),
          foreignServerName = json.\("foreign_server_name").toOption.map(_.as[SqlIdentifier]),
          srvowner = json.\("srvowner").toOption.map(_.as[SqlIdentifier])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgUserMappingsViewRow] = RowParser[PgUserMappingsViewRow] { row =>
    Success(
      PgUserMappingsViewRow(
        oid = row[Option[/* oid */ Long]](idx + 0),
        umoptions = row[Option[Array[String]]](idx + 1),
        umuser = row[Option[/* oid */ Long]](idx + 2),
        authorizationIdentifier = row[Option[SqlIdentifier]](idx + 3),
        foreignServerCatalog = row[Option[SqlIdentifier]](idx + 4),
        foreignServerName = row[Option[SqlIdentifier]](idx + 5),
        srvowner = row[Option[SqlIdentifier]](idx + 6)
      )
    )
  }
  implicit val writes: OWrites[PgUserMappingsViewRow] = OWrites[PgUserMappingsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Json.toJson(o.oid),
      "umoptions" -> Json.toJson(o.umoptions),
      "umuser" -> Json.toJson(o.umuser),
      "authorization_identifier" -> Json.toJson(o.authorizationIdentifier),
      "foreign_server_catalog" -> Json.toJson(o.foreignServerCatalog),
      "foreign_server_name" -> Json.toJson(o.foreignServerName),
      "srvowner" -> Json.toJson(o.srvowner)
    ))
  )
}
