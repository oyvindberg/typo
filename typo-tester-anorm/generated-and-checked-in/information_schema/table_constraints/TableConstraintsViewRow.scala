/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package table_constraints

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class TableConstraintsViewRow(
  constraintCatalog: Option[SqlIdentifier],
  constraintSchema: Option[SqlIdentifier],
  constraintName: Option[SqlIdentifier],
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  constraintType: Option[CharacterData],
  isDeferrable: Option[YesOrNo],
  initiallyDeferred: Option[YesOrNo],
  enforced: Option[YesOrNo]
)

object TableConstraintsViewRow {
  def rowParser(idx: Int): RowParser[TableConstraintsViewRow] =
    RowParser[TableConstraintsViewRow] { row =>
      Success(
        TableConstraintsViewRow(
          constraintCatalog = row[Option[SqlIdentifier]](idx + 0),
          constraintSchema = row[Option[SqlIdentifier]](idx + 1),
          constraintName = row[Option[SqlIdentifier]](idx + 2),
          tableCatalog = row[Option[SqlIdentifier]](idx + 3),
          tableSchema = row[Option[SqlIdentifier]](idx + 4),
          tableName = row[Option[SqlIdentifier]](idx + 5),
          constraintType = row[Option[CharacterData]](idx + 6),
          isDeferrable = row[Option[YesOrNo]](idx + 7),
          initiallyDeferred = row[Option[YesOrNo]](idx + 8),
          enforced = row[Option[YesOrNo]](idx + 9)
        )
      )
    }
  implicit val oFormat: OFormat[TableConstraintsViewRow] = new OFormat[TableConstraintsViewRow]{
    override def writes(o: TableConstraintsViewRow): JsObject =
      Json.obj(
        "constraint_catalog" -> o.constraintCatalog,
        "constraint_schema" -> o.constraintSchema,
        "constraint_name" -> o.constraintName,
        "table_catalog" -> o.tableCatalog,
        "table_schema" -> o.tableSchema,
        "table_name" -> o.tableName,
        "constraint_type" -> o.constraintType,
        "is_deferrable" -> o.isDeferrable,
        "initially_deferred" -> o.initiallyDeferred,
        "enforced" -> o.enforced
      )
  
    override def reads(json: JsValue): JsResult[TableConstraintsViewRow] = {
      JsResult.fromTry(
        Try(
          TableConstraintsViewRow(
            constraintCatalog = json.\("constraint_catalog").toOption.map(_.as[SqlIdentifier]),
            constraintSchema = json.\("constraint_schema").toOption.map(_.as[SqlIdentifier]),
            constraintName = json.\("constraint_name").toOption.map(_.as[SqlIdentifier]),
            tableCatalog = json.\("table_catalog").toOption.map(_.as[SqlIdentifier]),
            tableSchema = json.\("table_schema").toOption.map(_.as[SqlIdentifier]),
            tableName = json.\("table_name").toOption.map(_.as[SqlIdentifier]),
            constraintType = json.\("constraint_type").toOption.map(_.as[CharacterData]),
            isDeferrable = json.\("is_deferrable").toOption.map(_.as[YesOrNo]),
            initiallyDeferred = json.\("initially_deferred").toOption.map(_.as[YesOrNo]),
            enforced = json.\("enforced").toOption.map(_.as[YesOrNo])
          )
        )
      )
    }
  }
}
