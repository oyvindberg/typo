/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package applicable_roles

import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ApplicableRolesViewRow(
  grantee: Option[SqlIdentifier],
  roleName: Option[SqlIdentifier],
  isGrantable: Option[YesOrNo]
)

object ApplicableRolesViewRow {
  def rowParser(idx: Int): RowParser[ApplicableRolesViewRow] =
    RowParser[ApplicableRolesViewRow] { row =>
      Success(
        ApplicableRolesViewRow(
          grantee = row[Option[SqlIdentifier]](idx + 0),
          roleName = row[Option[SqlIdentifier]](idx + 1),
          isGrantable = row[Option[YesOrNo]](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[ApplicableRolesViewRow] = new OFormat[ApplicableRolesViewRow]{
    override def writes(o: ApplicableRolesViewRow): JsObject =
      Json.obj(
        "grantee" -> o.grantee,
        "role_name" -> o.roleName,
        "is_grantable" -> o.isGrantable
      )
  
    override def reads(json: JsValue): JsResult[ApplicableRolesViewRow] = {
      JsResult.fromTry(
        Try(
          ApplicableRolesViewRow(
            grantee = json.\("grantee").toOption.map(_.as[SqlIdentifier]),
            roleName = json.\("role_name").toOption.map(_.as[SqlIdentifier]),
            isGrantable = json.\("is_grantable").toOption.map(_.as[YesOrNo])
          )
        )
      )
    }
  }
}
