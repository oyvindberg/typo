/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package parameters

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class ParametersViewStructure[Row](val prefix: Option[String], val extract: Row => ParametersViewRow, val merge: (Row, ParametersViewRow) => Row)
  extends Relation[ParametersViewFields, ParametersViewRow, Row]
    with ParametersViewFields[Row] { outer =>

  override val specificCatalog = new OptField[SqlIdentifier, Row](prefix, "specific_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).specificCatalog, (row, value) => merge(row, extract(row).copy(specificCatalog = value)))
  override val specificSchema = new OptField[SqlIdentifier, Row](prefix, "specific_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).specificSchema, (row, value) => merge(row, extract(row).copy(specificSchema = value)))
  override val specificName = new OptField[SqlIdentifier, Row](prefix, "specific_name", None, Some("information_schema.sql_identifier"))(x => extract(x).specificName, (row, value) => merge(row, extract(row).copy(specificName = value)))
  override val ordinalPosition = new OptField[CardinalNumber, Row](prefix, "ordinal_position", None, Some("information_schema.cardinal_number"))(x => extract(x).ordinalPosition, (row, value) => merge(row, extract(row).copy(ordinalPosition = value)))
  override val parameterMode = new OptField[CharacterData, Row](prefix, "parameter_mode", None, Some("information_schema.character_data"))(x => extract(x).parameterMode, (row, value) => merge(row, extract(row).copy(parameterMode = value)))
  override val isResult = new OptField[YesOrNo, Row](prefix, "is_result", None, Some("information_schema.yes_or_no"))(x => extract(x).isResult, (row, value) => merge(row, extract(row).copy(isResult = value)))
  override val asLocator = new OptField[YesOrNo, Row](prefix, "as_locator", None, Some("information_schema.yes_or_no"))(x => extract(x).asLocator, (row, value) => merge(row, extract(row).copy(asLocator = value)))
  override val parameterName = new OptField[SqlIdentifier, Row](prefix, "parameter_name", None, Some("information_schema.sql_identifier"))(x => extract(x).parameterName, (row, value) => merge(row, extract(row).copy(parameterName = value)))
  override val dataType = new OptField[CharacterData, Row](prefix, "data_type", None, Some("information_schema.character_data"))(x => extract(x).dataType, (row, value) => merge(row, extract(row).copy(dataType = value)))
  override val characterMaximumLength = new OptField[CardinalNumber, Row](prefix, "character_maximum_length", None, Some("information_schema.cardinal_number"))(x => extract(x).characterMaximumLength, (row, value) => merge(row, extract(row).copy(characterMaximumLength = value)))
  override val characterOctetLength = new OptField[CardinalNumber, Row](prefix, "character_octet_length", None, Some("information_schema.cardinal_number"))(x => extract(x).characterOctetLength, (row, value) => merge(row, extract(row).copy(characterOctetLength = value)))
  override val characterSetCatalog = new OptField[SqlIdentifier, Row](prefix, "character_set_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).characterSetCatalog, (row, value) => merge(row, extract(row).copy(characterSetCatalog = value)))
  override val characterSetSchema = new OptField[SqlIdentifier, Row](prefix, "character_set_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).characterSetSchema, (row, value) => merge(row, extract(row).copy(characterSetSchema = value)))
  override val characterSetName = new OptField[SqlIdentifier, Row](prefix, "character_set_name", None, Some("information_schema.sql_identifier"))(x => extract(x).characterSetName, (row, value) => merge(row, extract(row).copy(characterSetName = value)))
  override val collationCatalog = new OptField[SqlIdentifier, Row](prefix, "collation_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).collationCatalog, (row, value) => merge(row, extract(row).copy(collationCatalog = value)))
  override val collationSchema = new OptField[SqlIdentifier, Row](prefix, "collation_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).collationSchema, (row, value) => merge(row, extract(row).copy(collationSchema = value)))
  override val collationName = new OptField[SqlIdentifier, Row](prefix, "collation_name", None, Some("information_schema.sql_identifier"))(x => extract(x).collationName, (row, value) => merge(row, extract(row).copy(collationName = value)))
  override val numericPrecision = new OptField[CardinalNumber, Row](prefix, "numeric_precision", None, Some("information_schema.cardinal_number"))(x => extract(x).numericPrecision, (row, value) => merge(row, extract(row).copy(numericPrecision = value)))
  override val numericPrecisionRadix = new OptField[CardinalNumber, Row](prefix, "numeric_precision_radix", None, Some("information_schema.cardinal_number"))(x => extract(x).numericPrecisionRadix, (row, value) => merge(row, extract(row).copy(numericPrecisionRadix = value)))
  override val numericScale = new OptField[CardinalNumber, Row](prefix, "numeric_scale", None, Some("information_schema.cardinal_number"))(x => extract(x).numericScale, (row, value) => merge(row, extract(row).copy(numericScale = value)))
  override val datetimePrecision = new OptField[CardinalNumber, Row](prefix, "datetime_precision", None, Some("information_schema.cardinal_number"))(x => extract(x).datetimePrecision, (row, value) => merge(row, extract(row).copy(datetimePrecision = value)))
  override val intervalType = new OptField[CharacterData, Row](prefix, "interval_type", None, Some("information_schema.character_data"))(x => extract(x).intervalType, (row, value) => merge(row, extract(row).copy(intervalType = value)))
  override val intervalPrecision = new OptField[CardinalNumber, Row](prefix, "interval_precision", None, Some("information_schema.cardinal_number"))(x => extract(x).intervalPrecision, (row, value) => merge(row, extract(row).copy(intervalPrecision = value)))
  override val udtCatalog = new OptField[SqlIdentifier, Row](prefix, "udt_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).udtCatalog, (row, value) => merge(row, extract(row).copy(udtCatalog = value)))
  override val udtSchema = new OptField[SqlIdentifier, Row](prefix, "udt_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).udtSchema, (row, value) => merge(row, extract(row).copy(udtSchema = value)))
  override val udtName = new OptField[SqlIdentifier, Row](prefix, "udt_name", None, Some("information_schema.sql_identifier"))(x => extract(x).udtName, (row, value) => merge(row, extract(row).copy(udtName = value)))
  override val scopeCatalog = new OptField[SqlIdentifier, Row](prefix, "scope_catalog", None, Some("information_schema.sql_identifier"))(x => extract(x).scopeCatalog, (row, value) => merge(row, extract(row).copy(scopeCatalog = value)))
  override val scopeSchema = new OptField[SqlIdentifier, Row](prefix, "scope_schema", None, Some("information_schema.sql_identifier"))(x => extract(x).scopeSchema, (row, value) => merge(row, extract(row).copy(scopeSchema = value)))
  override val scopeName = new OptField[SqlIdentifier, Row](prefix, "scope_name", None, Some("information_schema.sql_identifier"))(x => extract(x).scopeName, (row, value) => merge(row, extract(row).copy(scopeName = value)))
  override val maximumCardinality = new OptField[CardinalNumber, Row](prefix, "maximum_cardinality", None, Some("information_schema.cardinal_number"))(x => extract(x).maximumCardinality, (row, value) => merge(row, extract(row).copy(maximumCardinality = value)))
  override val dtdIdentifier = new OptField[SqlIdentifier, Row](prefix, "dtd_identifier", None, Some("information_schema.sql_identifier"))(x => extract(x).dtdIdentifier, (row, value) => merge(row, extract(row).copy(dtdIdentifier = value)))
  override val parameterDefault = new OptField[CharacterData, Row](prefix, "parameter_default", None, Some("information_schema.character_data"))(x => extract(x).parameterDefault, (row, value) => merge(row, extract(row).copy(parameterDefault = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](specificCatalog, specificSchema, specificName, ordinalPosition, parameterMode, isResult, asLocator, parameterName, dataType, characterMaximumLength, characterOctetLength, characterSetCatalog, characterSetSchema, characterSetName, collationCatalog, collationSchema, collationName, numericPrecision, numericPrecisionRadix, numericScale, datetimePrecision, intervalType, intervalPrecision, udtCatalog, udtSchema, udtName, scopeCatalog, scopeSchema, scopeName, maximumCardinality, dtdIdentifier, parameterDefault)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => ParametersViewRow, merge: (NewRow, ParametersViewRow) => NewRow): ParametersViewStructure[NewRow] =
    new ParametersViewStructure(prefix, extract, merge)
}
