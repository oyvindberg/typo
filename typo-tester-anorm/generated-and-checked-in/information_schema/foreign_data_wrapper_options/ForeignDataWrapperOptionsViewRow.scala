/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_data_wrapper_options

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ForeignDataWrapperOptionsViewRow(
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperCatalog]] */
  foreignDataWrapperCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperName]] */
  foreignDataWrapperName: Option[SqlIdentifier],
  optionName: Option[SqlIdentifier],
  optionValue: Option[CharacterData]
)

object ForeignDataWrapperOptionsViewRow {
  def rowParser(idx: Int): RowParser[ForeignDataWrapperOptionsViewRow] =
    RowParser[ForeignDataWrapperOptionsViewRow] { row =>
      Success(
        ForeignDataWrapperOptionsViewRow(
          foreignDataWrapperCatalog = row[Option[SqlIdentifier]](idx + 0),
          foreignDataWrapperName = row[Option[SqlIdentifier]](idx + 1),
          optionName = row[Option[SqlIdentifier]](idx + 2),
          optionValue = row[Option[CharacterData]](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[ForeignDataWrapperOptionsViewRow] = new OFormat[ForeignDataWrapperOptionsViewRow]{
    override def writes(o: ForeignDataWrapperOptionsViewRow): JsObject =
      Json.obj(
        "foreign_data_wrapper_catalog" -> o.foreignDataWrapperCatalog,
        "foreign_data_wrapper_name" -> o.foreignDataWrapperName,
        "option_name" -> o.optionName,
        "option_value" -> o.optionValue
      )
  
    override def reads(json: JsValue): JsResult[ForeignDataWrapperOptionsViewRow] = {
      JsResult.fromTry(
        Try(
          ForeignDataWrapperOptionsViewRow(
            foreignDataWrapperCatalog = json.\("foreign_data_wrapper_catalog").toOption.map(_.as[SqlIdentifier]),
            foreignDataWrapperName = json.\("foreign_data_wrapper_name").toOption.map(_.as[SqlIdentifier]),
            optionName = json.\("option_name").toOption.map(_.as[SqlIdentifier]),
            optionValue = json.\("option_value").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
