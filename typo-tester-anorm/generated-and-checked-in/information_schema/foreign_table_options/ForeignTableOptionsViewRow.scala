/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_table_options

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ForeignTableOptionsViewRow(
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableCatalog]] */
  foreignTableCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableSchema]] */
  foreignTableSchema: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableName]] */
  foreignTableName: Option[SqlIdentifier],
  optionName: Option[SqlIdentifier],
  optionValue: Option[CharacterData]
)

object ForeignTableOptionsViewRow {
  def rowParser(idx: Int): RowParser[ForeignTableOptionsViewRow] =
    RowParser[ForeignTableOptionsViewRow] { row =>
      Success(
        ForeignTableOptionsViewRow(
          foreignTableCatalog = row[Option[SqlIdentifier]](idx + 0),
          foreignTableSchema = row[Option[SqlIdentifier]](idx + 1),
          foreignTableName = row[Option[SqlIdentifier]](idx + 2),
          optionName = row[Option[SqlIdentifier]](idx + 3),
          optionValue = row[Option[CharacterData]](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[ForeignTableOptionsViewRow] = new OFormat[ForeignTableOptionsViewRow]{
    override def writes(o: ForeignTableOptionsViewRow): JsObject =
      Json.obj(
        "foreign_table_catalog" -> o.foreignTableCatalog,
        "foreign_table_schema" -> o.foreignTableSchema,
        "foreign_table_name" -> o.foreignTableName,
        "option_name" -> o.optionName,
        "option_value" -> o.optionValue
      )
  
    override def reads(json: JsValue): JsResult[ForeignTableOptionsViewRow] = {
      JsResult.fromTry(
        Try(
          ForeignTableOptionsViewRow(
            foreignTableCatalog = json.\("foreign_table_catalog").toOption.map(_.as[SqlIdentifier]),
            foreignTableSchema = json.\("foreign_table_schema").toOption.map(_.as[SqlIdentifier]),
            foreignTableName = json.\("foreign_table_name").toOption.map(_.as[SqlIdentifier]),
            optionName = json.\("option_name").toOption.map(_.as[SqlIdentifier]),
            optionValue = json.\("option_value").toOption.map(_.as[CharacterData])
          )
        )
      )
    }
  }
}
