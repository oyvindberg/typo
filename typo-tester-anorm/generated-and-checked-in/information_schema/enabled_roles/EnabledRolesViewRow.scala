/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package enabled_roles

import adventureworks.information_schema.SqlIdentifier
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class EnabledRolesViewRow(
  roleName: Option[SqlIdentifier]
)

object EnabledRolesViewRow {
  implicit val reads: Reads[EnabledRolesViewRow] = Reads[EnabledRolesViewRow](json => JsResult.fromTry(
      Try(
        EnabledRolesViewRow(
          roleName = json.\("role_name").toOption.map(_.as(SqlIdentifier.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[EnabledRolesViewRow] = RowParser[EnabledRolesViewRow] { row =>
    Success(
      EnabledRolesViewRow(
        roleName = row(idx + 0)(Column.columnToOption(SqlIdentifier.column))
      )
    )
  }
  implicit val writes: OWrites[EnabledRolesViewRow] = OWrites[EnabledRolesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "role_name" -> Writes.OptionWrites(SqlIdentifier.writes).writes(o.roleName)
    ))
  )
}
