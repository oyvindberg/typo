/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package domain_constraints

import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class DomainConstraintsViewRow(
  constraintCatalog: Option[SqlIdentifier],
  constraintSchema: Option[SqlIdentifier],
  constraintName: Option[SqlIdentifier],
  domainCatalog: Option[SqlIdentifier],
  domainSchema: Option[SqlIdentifier],
  domainName: Option[SqlIdentifier],
  isDeferrable: Option[YesOrNo],
  initiallyDeferred: Option[YesOrNo]
)

object DomainConstraintsViewRow {
  def rowParser(idx: Int): RowParser[DomainConstraintsViewRow] =
    RowParser[DomainConstraintsViewRow] { row =>
      Success(
        DomainConstraintsViewRow(
          constraintCatalog = row[Option[SqlIdentifier]](idx + 0),
          constraintSchema = row[Option[SqlIdentifier]](idx + 1),
          constraintName = row[Option[SqlIdentifier]](idx + 2),
          domainCatalog = row[Option[SqlIdentifier]](idx + 3),
          domainSchema = row[Option[SqlIdentifier]](idx + 4),
          domainName = row[Option[SqlIdentifier]](idx + 5),
          isDeferrable = row[Option[YesOrNo]](idx + 6),
          initiallyDeferred = row[Option[YesOrNo]](idx + 7)
        )
      )
    }
  implicit val oFormat: OFormat[DomainConstraintsViewRow] = new OFormat[DomainConstraintsViewRow]{
    override def writes(o: DomainConstraintsViewRow): JsObject =
      Json.obj(
        "constraint_catalog" -> o.constraintCatalog,
        "constraint_schema" -> o.constraintSchema,
        "constraint_name" -> o.constraintName,
        "domain_catalog" -> o.domainCatalog,
        "domain_schema" -> o.domainSchema,
        "domain_name" -> o.domainName,
        "is_deferrable" -> o.isDeferrable,
        "initially_deferred" -> o.initiallyDeferred
      )
  
    override def reads(json: JsValue): JsResult[DomainConstraintsViewRow] = {
      JsResult.fromTry(
        Try(
          DomainConstraintsViewRow(
            constraintCatalog = json.\("constraint_catalog").toOption.map(_.as[SqlIdentifier]),
            constraintSchema = json.\("constraint_schema").toOption.map(_.as[SqlIdentifier]),
            constraintName = json.\("constraint_name").toOption.map(_.as[SqlIdentifier]),
            domainCatalog = json.\("domain_catalog").toOption.map(_.as[SqlIdentifier]),
            domainSchema = json.\("domain_schema").toOption.map(_.as[SqlIdentifier]),
            domainName = json.\("domain_name").toOption.map(_.as[SqlIdentifier]),
            isDeferrable = json.\("is_deferrable").toOption.map(_.as[YesOrNo]),
            initiallyDeferred = json.\("initially_deferred").toOption.map(_.as[YesOrNo])
          )
        )
      )
    }
  }
}
