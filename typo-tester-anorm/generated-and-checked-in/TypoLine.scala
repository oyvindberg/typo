/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import org.postgresql.geometric.PGline
import org.postgresql.jdbc.PgArray
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** This implements a line represented by the linear equation Ax + By + C = 0 */
case class TypoLine(a: Double, b: Double, c: Double)

object TypoLine {
  implicit val arrayColumn: Column[Array[TypoLine]] = Column.nonNull[Array[TypoLine]]((v1: Any, _) =>
    v1 match {
        case v: PgArray =>
         v.getArray match {
           case v: Array[?] =>
             Right(v.map(v => TypoLine(v.asInstanceOf[PGline].a, v.asInstanceOf[PGline].b, v.asInstanceOf[PGline].c)))
           case other => Left(TypeDoesNotMatch(s"Expected one-dimensional array from JDBC to produce an array of TypoLine, got ${other.getClass.getName}"))
         }
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit val arrayParameterMetaData: ParameterMetaData[Array[TypoLine]] = new ParameterMetaData[Array[TypoLine]] {
    override def sqlType: String = "_line"
    override def jdbcType: Int = Types.ARRAY
  }
  implicit val arrayToStatement: ToStatement[Array[TypoLine]] = ToStatement[Array[TypoLine]]((s, index, v) => s.setArray(index, s.getConnection.createArrayOf("line", v.map(v => new PGline(v.a, v.b, v.c)))))
  implicit val column: Column[TypoLine] = Column.nonNull[TypoLine]((v1: Any, _) =>
    v1 match {
      case v: PGline => Right(TypoLine(v.a, v.b, v.c))
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.geometric.PGline, got ${other.getClass.getName}"))
    }
  )
  implicit val parameterMetadata: ParameterMetaData[TypoLine] = new ParameterMetaData[TypoLine] {
    override def sqlType: String = "line"
    override def jdbcType: Int = Types.OTHER
  }
  implicit val reads: Reads[TypoLine] = Reads[TypoLine](json => JsResult.fromTry(
      Try(
        TypoLine(
          a = json.\("a").as[Double],
          b = json.\("b").as[Double],
          c = json.\("c").as[Double]
        )
      )
    ),
  )
  implicit val toStatement: ToStatement[TypoLine] = ToStatement[TypoLine]((s, index, v) => s.setObject(index, new PGline(v.a, v.b, v.c)))
  implicit val writes: OWrites[TypoLine] = OWrites[TypoLine](o =>
    new JsObject(ListMap[String, JsValue](
      "a" -> Json.toJson(o.a),
      "b" -> Json.toJson(o.b),
      "c" -> Json.toJson(o.c)
    ))
  )
}
