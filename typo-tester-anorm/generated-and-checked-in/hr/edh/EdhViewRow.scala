/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package edh

import adventureworks.TypoLocalDate
import adventureworks.TypoLocalDateTime
import adventureworks.humanresources.department.DepartmentId
import adventureworks.humanresources.shift.ShiftId
import adventureworks.person.businessentity.BusinessentityId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class EdhViewRow(
  id: Option[Int],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.departmentid]] */
  departmentid: Option[DepartmentId],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.shiftid]] */
  shiftid: Option[ShiftId],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.startdate]] */
  startdate: Option[TypoLocalDate],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.enddate]] */
  enddate: Option[TypoLocalDate],
  /** Points to [[humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object EdhViewRow {
  implicit val reads: Reads[EdhViewRow] = Reads[EdhViewRow](json => JsResult.fromTry(
      Try(
        EdhViewRow(
          id = json.\("id").toOption.map(_.as(Reads.IntReads)),
          businessentityid = json.\("businessentityid").toOption.map(_.as(BusinessentityId.reads)),
          departmentid = json.\("departmentid").toOption.map(_.as(DepartmentId.reads)),
          shiftid = json.\("shiftid").toOption.map(_.as(ShiftId.reads)),
          startdate = json.\("startdate").toOption.map(_.as(TypoLocalDate.reads)),
          enddate = json.\("enddate").toOption.map(_.as(TypoLocalDate.reads)),
          modifieddate = json.\("modifieddate").toOption.map(_.as(TypoLocalDateTime.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[EdhViewRow] = RowParser[EdhViewRow] { row =>
    Success(
      EdhViewRow(
        id = row(idx + 0)(Column.columnToOption(Column.columnToInt)),
        businessentityid = row(idx + 1)(Column.columnToOption(BusinessentityId.column)),
        departmentid = row(idx + 2)(Column.columnToOption(DepartmentId.column)),
        shiftid = row(idx + 3)(Column.columnToOption(ShiftId.column)),
        startdate = row(idx + 4)(Column.columnToOption(TypoLocalDate.column)),
        enddate = row(idx + 5)(Column.columnToOption(TypoLocalDate.column)),
        modifieddate = row(idx + 6)(Column.columnToOption(TypoLocalDateTime.column))
      )
    )
  }
  implicit val writes: OWrites[EdhViewRow] = OWrites[EdhViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Writes.OptionWrites(Writes.IntWrites).writes(o.id),
      "businessentityid" -> Writes.OptionWrites(BusinessentityId.writes).writes(o.businessentityid),
      "departmentid" -> Writes.OptionWrites(DepartmentId.writes).writes(o.departmentid),
      "shiftid" -> Writes.OptionWrites(ShiftId.writes).writes(o.shiftid),
      "startdate" -> Writes.OptionWrites(TypoLocalDate.writes).writes(o.startdate),
      "enddate" -> Writes.OptionWrites(TypoLocalDate.writes).writes(o.enddate),
      "modifieddate" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.modifieddate)
    ))
  )
}
