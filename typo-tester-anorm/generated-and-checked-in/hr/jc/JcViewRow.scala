/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package jc

import adventureworks.TypoLocalDateTime
import adventureworks.TypoXml
import adventureworks.humanresources.jobcandidate.JobcandidateId
import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class JcViewRow(
  id: Option[Int],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: Option[JobcandidateId],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.resume]] */
  resume: Option[TypoXml],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object JcViewRow {
  implicit val reads: Reads[JcViewRow] = Reads[JcViewRow](json => JsResult.fromTry(
      Try(
        JcViewRow(
          id = json.\("id").toOption.map(_.as[Int]),
          jobcandidateid = json.\("jobcandidateid").toOption.map(_.as[JobcandidateId]),
          businessentityid = json.\("businessentityid").toOption.map(_.as[BusinessentityId]),
          resume = json.\("resume").toOption.map(_.as[TypoXml]),
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[JcViewRow] = RowParser[JcViewRow] { row =>
    Success(
      JcViewRow(
        id = row[Option[Int]](idx + 0),
        jobcandidateid = row[Option[JobcandidateId]](idx + 1),
        businessentityid = row[Option[BusinessentityId]](idx + 2),
        resume = row[Option[TypoXml]](idx + 3),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 4)
      )
    )
  }
  implicit val writes: OWrites[JcViewRow] = OWrites[JcViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Json.toJson(o.id),
      "jobcandidateid" -> Json.toJson(o.jobcandidateid),
      "businessentityid" -> Json.toJson(o.businessentityid),
      "resume" -> Json.toJson(o.resume),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
