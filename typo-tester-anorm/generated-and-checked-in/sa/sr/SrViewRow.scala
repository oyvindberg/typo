/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sr

import adventureworks.TypoLocalDateTime
import adventureworks.public.Name
import adventureworks.sales.salesreason.SalesreasonId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class SrViewRow(
  id: Option[Int],
  /** Points to [[sales.salesreason.SalesreasonRow.salesreasonid]] */
  salesreasonid: Option[SalesreasonId],
  /** Points to [[sales.salesreason.SalesreasonRow.name]] */
  name: Option[Name],
  /** Points to [[sales.salesreason.SalesreasonRow.reasontype]] */
  reasontype: Option[Name],
  /** Points to [[sales.salesreason.SalesreasonRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object SrViewRow {
  implicit val reads: Reads[SrViewRow] = Reads[SrViewRow](json => JsResult.fromTry(
      Try(
        SrViewRow(
          id = json.\("id").toOption.map(_.as[Int]),
          salesreasonid = json.\("salesreasonid").toOption.map(_.as[SalesreasonId]),
          name = json.\("name").toOption.map(_.as[Name]),
          reasontype = json.\("reasontype").toOption.map(_.as[Name]),
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SrViewRow] = RowParser[SrViewRow] { row =>
    Success(
      SrViewRow(
        id = row[Option[Int]](idx + 0),
        salesreasonid = row[Option[SalesreasonId]](idx + 1),
        name = row[Option[Name]](idx + 2),
        reasontype = row[Option[Name]](idx + 3),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 4)
      )
    )
  }
  implicit val writes: OWrites[SrViewRow] = OWrites[SrViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Json.toJson(o.id),
      "salesreasonid" -> Json.toJson(o.salesreasonid),
      "name" -> Json.toJson(o.name),
      "reasontype" -> Json.toJson(o.reasontype),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
