/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package tha

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** View: pr.tha */
case class ThaViewRow(
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.transactionid]] */
  id: TransactionhistoryarchiveId,
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.transactionid]] */
  transactionid: TransactionhistoryarchiveId,
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.productid]] */
  productid: Int,
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.referenceorderid]] */
  referenceorderid: Int,
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.referenceorderlineid]] */
  referenceorderlineid: Int,
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.transactiondate]] */
  transactiondate: TypoLocalDateTime,
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.transactiontype]] */
  transactiontype: /* bpchar, max 1 chars */ String,
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.quantity]] */
  quantity: Int,
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.actualcost]] */
  actualcost: BigDecimal,
  /** Points to [[production.transactionhistoryarchive.TransactionhistoryarchiveRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object ThaViewRow {
  implicit lazy val reads: Reads[ThaViewRow] = Reads[ThaViewRow](json => JsResult.fromTry(
      Try(
        ThaViewRow(
          id = json.\("id").as(TransactionhistoryarchiveId.reads),
          transactionid = json.\("transactionid").as(TransactionhistoryarchiveId.reads),
          productid = json.\("productid").as(Reads.IntReads),
          referenceorderid = json.\("referenceorderid").as(Reads.IntReads),
          referenceorderlineid = json.\("referenceorderlineid").as(Reads.IntReads),
          transactiondate = json.\("transactiondate").as(TypoLocalDateTime.reads),
          transactiontype = json.\("transactiontype").as(Reads.StringReads),
          quantity = json.\("quantity").as(Reads.IntReads),
          actualcost = json.\("actualcost").as(Reads.bigDecReads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ThaViewRow] = RowParser[ThaViewRow] { row =>
    Success(
      ThaViewRow(
        id = row(idx + 0)(TransactionhistoryarchiveId.column),
        transactionid = row(idx + 1)(TransactionhistoryarchiveId.column),
        productid = row(idx + 2)(Column.columnToInt),
        referenceorderid = row(idx + 3)(Column.columnToInt),
        referenceorderlineid = row(idx + 4)(Column.columnToInt),
        transactiondate = row(idx + 5)(TypoLocalDateTime.column),
        transactiontype = row(idx + 6)(Column.columnToString),
        quantity = row(idx + 7)(Column.columnToInt),
        actualcost = row(idx + 8)(Column.columnToScalaBigDecimal),
        modifieddate = row(idx + 9)(TypoLocalDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[ThaViewRow] = OWrites[ThaViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> TransactionhistoryarchiveId.writes.writes(o.id),
      "transactionid" -> TransactionhistoryarchiveId.writes.writes(o.transactionid),
      "productid" -> Writes.IntWrites.writes(o.productid),
      "referenceorderid" -> Writes.IntWrites.writes(o.referenceorderid),
      "referenceorderlineid" -> Writes.IntWrites.writes(o.referenceorderlineid),
      "transactiondate" -> TypoLocalDateTime.writes.writes(o.transactiondate),
      "transactiontype" -> Writes.StringWrites.writes(o.transactiontype),
      "quantity" -> Writes.IntWrites.writes(o.quantity),
      "actualcost" -> Writes.BigDecimalWrites.writes(o.actualcost),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
