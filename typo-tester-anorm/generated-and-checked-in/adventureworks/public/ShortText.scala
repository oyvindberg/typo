/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public

import adventureworks.Text
import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Domain `public.short_text`
  * Constraint: CHECK ((length(VALUE) <= 55))
  */
case class ShortText(value: String)
object ShortText {
  implicit lazy val arrayColumn: Column[Array[ShortText]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[ShortText]] = ToStatement.arrayToParameter(ParameterMetaData.StringParameterMetaData).contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[ShortText, String] = Bijection[ShortText, String](_.value)(ShortText.apply)
  implicit lazy val column: Column[ShortText] = Column.columnToString.map(ShortText.apply)
  implicit lazy val ordering: Ordering[ShortText] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[ShortText] = new ParameterMetaData[ShortText] {
    override def sqlType: String = ParameterMetaData.StringParameterMetaData.sqlType
    override def jdbcType: Int = ParameterMetaData.StringParameterMetaData.jdbcType
  }
  implicit lazy val reads: Reads[ShortText] = Reads.StringReads.map(ShortText.apply)
  implicit lazy val text: Text[ShortText] = new Text[ShortText] {
    override def unsafeEncode(v: ShortText, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: ShortText, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[ShortText] = ToStatement.stringToStatement.contramap(_.value)
  implicit lazy val writes: Writes[ShortText] = Writes.StringWrites.contramap(_.value)
}