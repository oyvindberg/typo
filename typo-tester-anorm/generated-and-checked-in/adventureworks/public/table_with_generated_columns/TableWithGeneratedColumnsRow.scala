/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package table_with_generated_columns

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: public.table-with-generated-columns
    Primary key: name */
case class TableWithGeneratedColumnsRow(
  name: TableWithGeneratedColumnsId,
  /** Generated ALWAYS, expression: 
      CASE
          WHEN (name IS NOT NULL) THEN 'no-name'::text
          WHEN (name = 'a'::text) THEN 'a-name'::text
          ELSE 'some-name'::text
      END */
  nameTypeAlways: String
){
   val id = name
   def toUnsavedRow(): TableWithGeneratedColumnsRowUnsaved =
     TableWithGeneratedColumnsRowUnsaved(name)
 }

object TableWithGeneratedColumnsRow {
  implicit lazy val reads: Reads[TableWithGeneratedColumnsRow] = Reads[TableWithGeneratedColumnsRow](json => JsResult.fromTry(
      Try(
        TableWithGeneratedColumnsRow(
          name = json.\("name").as(TableWithGeneratedColumnsId.reads),
          nameTypeAlways = json.\("name-type-always").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TableWithGeneratedColumnsRow] = RowParser[TableWithGeneratedColumnsRow] { row =>
    Success(
      TableWithGeneratedColumnsRow(
        name = row(idx + 0)(TableWithGeneratedColumnsId.column),
        nameTypeAlways = row(idx + 1)(Column.columnToString)
      )
    )
  }
  implicit lazy val text: Text[TableWithGeneratedColumnsRow] = Text.instance[TableWithGeneratedColumnsRow]{ (row, sb) =>
    TableWithGeneratedColumnsId.text.unsafeEncode(row.name, sb)
  }
  implicit lazy val writes: OWrites[TableWithGeneratedColumnsRow] = OWrites[TableWithGeneratedColumnsRow](o =>
    new JsObject(ListMap[String, JsValue](
      "name" -> TableWithGeneratedColumnsId.writes.writes(o.name),
      "name-type-always" -> Writes.StringWrites.writes(o.nameTypeAlways)
    ))
  )
}
