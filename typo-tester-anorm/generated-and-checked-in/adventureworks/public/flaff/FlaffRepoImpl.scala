/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package flaff

import anorm.BatchSql
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import scala.annotation.nowarn
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class FlaffRepoImpl extends FlaffRepo {
  override def delete: DeleteBuilder[FlaffFields, FlaffRow] = {
    DeleteBuilder("public.flaff", FlaffFields.structure)
  }
  override def deleteById(compositeId: FlaffId)(implicit c: Connection): Boolean = {
    SQL"""delete from public.flaff where "code" = ${ParameterValue(compositeId.code, null, ShortText.toStatement)} AND "another_code" = ${ParameterValue(compositeId.anotherCode, null, ToStatement.stringToStatement)} AND "some_number" = ${ParameterValue(compositeId.someNumber, null, ToStatement.intToStatement)} AND "specifier" = ${ParameterValue(compositeId.specifier, null, ShortText.toStatement)}""".executeUpdate() > 0
  }
  override def deleteByIds(compositeIds: Array[FlaffId])(implicit c: Connection): Int = {
    val code = compositeIds.map(_.code)
    val anotherCode = compositeIds.map(_.anotherCode)
    val someNumber = compositeIds.map(_.someNumber)
    val specifier = compositeIds.map(_.specifier)
    SQL"""delete
          from public.flaff
          where ("code", "another_code", "some_number", "specifier")
          in (select unnest(${code}), unnest(${anotherCode}), unnest(${someNumber}), unnest(${specifier}))
       """.executeUpdate()
    
  }
  override def insert(unsaved: FlaffRow)(implicit c: Connection): FlaffRow = {
    SQL"""insert into public.flaff("code", "another_code", "some_number", "specifier", "parentspecifier")
          values (${ParameterValue(unsaved.code, null, ShortText.toStatement)}::text, ${ParameterValue(unsaved.anotherCode, null, ToStatement.stringToStatement)}, ${ParameterValue(unsaved.someNumber, null, ToStatement.intToStatement)}::int4, ${ParameterValue(unsaved.specifier, null, ShortText.toStatement)}::text, ${ParameterValue(unsaved.parentspecifier, null, ToStatement.optionToStatement(ShortText.toStatement, ShortText.parameterMetadata))}::text)
          returning "code", "another_code", "some_number", "specifier", "parentspecifier"
       """
      .executeInsert(FlaffRow.rowParser(1).single)
    
  }
  override def insertStreaming(unsaved: Iterator[FlaffRow], batchSize: Int = 10000)(implicit c: Connection): Long = {
    streamingInsert(s"""COPY public.flaff("code", "another_code", "some_number", "specifier", "parentspecifier") FROM STDIN""", batchSize, unsaved)(FlaffRow.text, c)
  }
  override def select: SelectBuilder[FlaffFields, FlaffRow] = {
    SelectBuilderSql("public.flaff", FlaffFields.structure, FlaffRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[FlaffRow] = {
    SQL"""select "code", "another_code", "some_number", "specifier", "parentspecifier"
          from public.flaff
       """.as(FlaffRow.rowParser(1).*)
  }
  override def selectById(compositeId: FlaffId)(implicit c: Connection): Option[FlaffRow] = {
    SQL"""select "code", "another_code", "some_number", "specifier", "parentspecifier"
          from public.flaff
          where "code" = ${ParameterValue(compositeId.code, null, ShortText.toStatement)} AND "another_code" = ${ParameterValue(compositeId.anotherCode, null, ToStatement.stringToStatement)} AND "some_number" = ${ParameterValue(compositeId.someNumber, null, ToStatement.intToStatement)} AND "specifier" = ${ParameterValue(compositeId.specifier, null, ShortText.toStatement)}
       """.as(FlaffRow.rowParser(1).singleOpt)
  }
  override def selectByIds(compositeIds: Array[FlaffId])(implicit c: Connection): List[FlaffRow] = {
    val code = compositeIds.map(_.code)
    val anotherCode = compositeIds.map(_.anotherCode)
    val someNumber = compositeIds.map(_.someNumber)
    val specifier = compositeIds.map(_.specifier)
    SQL"""select "code", "another_code", "some_number", "specifier", "parentspecifier"
          from public.flaff
          where ("code", "another_code", "some_number", "specifier") 
          in (select unnest(${code}), unnest(${anotherCode}), unnest(${someNumber}), unnest(${specifier}))
       """.as(FlaffRow.rowParser(1).*)
    
  }
  override def selectByIdsTracked(compositeIds: Array[FlaffId])(implicit c: Connection): Map[FlaffId, FlaffRow] = {
    val byId = selectByIds(compositeIds).view.map(x => (x.compositeId, x)).toMap
    compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
  }
  override def update: UpdateBuilder[FlaffFields, FlaffRow] = {
    UpdateBuilder("public.flaff", FlaffFields.structure, FlaffRow.rowParser)
  }
  override def update(row: FlaffRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update public.flaff
          set "parentspecifier" = ${ParameterValue(row.parentspecifier, null, ToStatement.optionToStatement(ShortText.toStatement, ShortText.parameterMetadata))}::text
          where "code" = ${ParameterValue(compositeId.code, null, ShortText.toStatement)} AND "another_code" = ${ParameterValue(compositeId.anotherCode, null, ToStatement.stringToStatement)} AND "some_number" = ${ParameterValue(compositeId.someNumber, null, ToStatement.intToStatement)} AND "specifier" = ${ParameterValue(compositeId.specifier, null, ShortText.toStatement)}
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: FlaffRow)(implicit c: Connection): FlaffRow = {
    SQL"""insert into public.flaff("code", "another_code", "some_number", "specifier", "parentspecifier")
          values (
            ${ParameterValue(unsaved.code, null, ShortText.toStatement)}::text,
            ${ParameterValue(unsaved.anotherCode, null, ToStatement.stringToStatement)},
            ${ParameterValue(unsaved.someNumber, null, ToStatement.intToStatement)}::int4,
            ${ParameterValue(unsaved.specifier, null, ShortText.toStatement)}::text,
            ${ParameterValue(unsaved.parentspecifier, null, ToStatement.optionToStatement(ShortText.toStatement, ShortText.parameterMetadata))}::text
          )
          on conflict ("code", "another_code", "some_number", "specifier")
          do update set
            "parentspecifier" = EXCLUDED."parentspecifier"
          returning "code", "another_code", "some_number", "specifier", "parentspecifier"
       """
      .executeInsert(FlaffRow.rowParser(1).single)
    
  }
  override def upsertBatch(unsaved: Iterable[FlaffRow])(implicit c: Connection): List[FlaffRow] = {
    def toNamedParameter(row: FlaffRow): List[NamedParameter] = List(
      NamedParameter("code", ParameterValue(row.code, null, ShortText.toStatement)),
      NamedParameter("another_code", ParameterValue(row.anotherCode, null, ToStatement.stringToStatement)),
      NamedParameter("some_number", ParameterValue(row.someNumber, null, ToStatement.intToStatement)),
      NamedParameter("specifier", ParameterValue(row.specifier, null, ShortText.toStatement)),
      NamedParameter("parentspecifier", ParameterValue(row.parentspecifier, null, ToStatement.optionToStatement(ShortText.toStatement, ShortText.parameterMetadata)))
    )
    unsaved.toList match {
      case Nil => Nil
      case head :: rest =>
        new anorm.adventureworks.ExecuteReturningSyntax.Ops(
          BatchSql(
            s"""insert into public.flaff("code", "another_code", "some_number", "specifier", "parentspecifier")
                values ({code}::text, {another_code}, {some_number}::int4, {specifier}::text, {parentspecifier}::text)
                on conflict ("code", "another_code", "some_number", "specifier")
                do update set
                  "parentspecifier" = EXCLUDED."parentspecifier"
                returning "code", "another_code", "some_number", "specifier", "parentspecifier"
             """,
            toNamedParameter(head),
            rest.map(toNamedParameter)*
          )
        ).executeReturning(FlaffRow.rowParser(1).*)
    }
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Iterator[FlaffRow], batchSize: Int = 10000)(implicit c: Connection): Int = {
    SQL"create temporary table flaff_TEMP (like public.flaff) on commit drop".execute(): @nowarn
    streamingInsert(s"""copy flaff_TEMP("code", "another_code", "some_number", "specifier", "parentspecifier") from stdin""", batchSize, unsaved)(FlaffRow.text, c): @nowarn
    SQL"""insert into public.flaff("code", "another_code", "some_number", "specifier", "parentspecifier")
          select * from flaff_TEMP
          on conflict ("code", "another_code", "some_number", "specifier")
          do update set
            "parentspecifier" = EXCLUDED."parentspecifier"
          ;
          drop table flaff_TEMP;""".executeUpdate()
  }
}
