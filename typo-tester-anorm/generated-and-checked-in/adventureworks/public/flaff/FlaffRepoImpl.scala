/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package flaff

import adventureworks.public.ShortText
import adventureworks.streamingInsert
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class FlaffRepoImpl extends FlaffRepo {
  override def delete: DeleteBuilder[FlaffFields, FlaffRow] = {
    DeleteBuilder("public.flaff", FlaffFields.structure)
  }
  override def deleteById(compositeId: FlaffId)(implicit c: Connection): Boolean = {
    SQL"""delete from public.flaff where "code" = ${ParameterValue(compositeId.code, null, ShortText.toStatement)} AND "another_code" = ${ParameterValue(compositeId.anotherCode, null, ToStatement.stringToStatement)} AND "some_number" = ${ParameterValue(compositeId.someNumber, null, ToStatement.intToStatement)} AND "specifier" = ${ParameterValue(compositeId.specifier, null, ShortText.toStatement)}""".executeUpdate() > 0
  }
  override def deleteByIds(compositeIds: Array[FlaffId])(implicit c: Connection): Int = {
    val code = compositeIds.map(_.code)
    val anotherCode = compositeIds.map(_.anotherCode)
    val someNumber = compositeIds.map(_.someNumber)
    val specifier = compositeIds.map(_.specifier)
    SQL"""delete
          from public.flaff
          where ("code", "another_code", "some_number", "specifier")
          in (select unnest(${code}), unnest(${anotherCode}), unnest(${someNumber}), unnest(${specifier}))
       """.executeUpdate()
    
  }
  override def insert(unsaved: FlaffRow)(implicit c: Connection): FlaffRow = {
    SQL"""insert into public.flaff("code", "another_code", "some_number", "specifier", "parentspecifier")
          values (${ParameterValue(unsaved.code, null, ShortText.toStatement)}::text, ${ParameterValue(unsaved.anotherCode, null, ToStatement.stringToStatement)}, ${ParameterValue(unsaved.someNumber, null, ToStatement.intToStatement)}::int4, ${ParameterValue(unsaved.specifier, null, ShortText.toStatement)}::text, ${ParameterValue(unsaved.parentspecifier, null, ToStatement.optionToStatement(ShortText.toStatement, ShortText.parameterMetadata))}::text)
          returning "code", "another_code", "some_number", "specifier", "parentspecifier"
       """
      .executeInsert(FlaffRow.rowParser(1).single)
    
  }
  override def insertStreaming(unsaved: Iterator[FlaffRow], batchSize: Int)(implicit c: Connection): Long = {
    streamingInsert(s"""COPY public.flaff("code", "another_code", "some_number", "specifier", "parentspecifier") FROM STDIN""", batchSize, unsaved)(FlaffRow.text, c)
  }
  override def select: SelectBuilder[FlaffFields, FlaffRow] = {
    SelectBuilderSql("public.flaff", FlaffFields.structure, FlaffRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[FlaffRow] = {
    SQL"""select "code", "another_code", "some_number", "specifier", "parentspecifier"
          from public.flaff
       """.as(FlaffRow.rowParser(1).*)
  }
  override def selectById(compositeId: FlaffId)(implicit c: Connection): Option[FlaffRow] = {
    SQL"""select "code", "another_code", "some_number", "specifier", "parentspecifier"
          from public.flaff
          where "code" = ${ParameterValue(compositeId.code, null, ShortText.toStatement)} AND "another_code" = ${ParameterValue(compositeId.anotherCode, null, ToStatement.stringToStatement)} AND "some_number" = ${ParameterValue(compositeId.someNumber, null, ToStatement.intToStatement)} AND "specifier" = ${ParameterValue(compositeId.specifier, null, ShortText.toStatement)}
       """.as(FlaffRow.rowParser(1).singleOpt)
  }
  override def selectByIds(compositeIds: Array[FlaffId])(implicit c: Connection): List[FlaffRow] = {
    val code = compositeIds.map(_.code)
    val anotherCode = compositeIds.map(_.anotherCode)
    val someNumber = compositeIds.map(_.someNumber)
    val specifier = compositeIds.map(_.specifier)
    SQL"""select "code", "another_code", "some_number", "specifier", "parentspecifier"
          from public.flaff
          where ("code", "another_code", "some_number", "specifier") 
          in (select unnest(${code}), unnest(${anotherCode}), unnest(${someNumber}), unnest(${specifier}))
       """.as(FlaffRow.rowParser(1).*)
    
  }
  override def update: UpdateBuilder[FlaffFields, FlaffRow] = {
    UpdateBuilder("public.flaff", FlaffFields.structure, FlaffRow.rowParser)
  }
  override def update(row: FlaffRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update public.flaff
          set "parentspecifier" = ${ParameterValue(row.parentspecifier, null, ToStatement.optionToStatement(ShortText.toStatement, ShortText.parameterMetadata))}::text
          where "code" = ${ParameterValue(compositeId.code, null, ShortText.toStatement)} AND "another_code" = ${ParameterValue(compositeId.anotherCode, null, ToStatement.stringToStatement)} AND "some_number" = ${ParameterValue(compositeId.someNumber, null, ToStatement.intToStatement)} AND "specifier" = ${ParameterValue(compositeId.specifier, null, ShortText.toStatement)}
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: FlaffRow)(implicit c: Connection): FlaffRow = {
    SQL"""insert into public.flaff("code", "another_code", "some_number", "specifier", "parentspecifier")
          values (
            ${ParameterValue(unsaved.code, null, ShortText.toStatement)}::text,
            ${ParameterValue(unsaved.anotherCode, null, ToStatement.stringToStatement)},
            ${ParameterValue(unsaved.someNumber, null, ToStatement.intToStatement)}::int4,
            ${ParameterValue(unsaved.specifier, null, ShortText.toStatement)}::text,
            ${ParameterValue(unsaved.parentspecifier, null, ToStatement.optionToStatement(ShortText.toStatement, ShortText.parameterMetadata))}::text
          )
          on conflict ("code", "another_code", "some_number", "specifier")
          do update set
            "parentspecifier" = EXCLUDED."parentspecifier"
          returning "code", "another_code", "some_number", "specifier", "parentspecifier"
       """
      .executeInsert(FlaffRow.rowParser(1).single)
    
  }
}
