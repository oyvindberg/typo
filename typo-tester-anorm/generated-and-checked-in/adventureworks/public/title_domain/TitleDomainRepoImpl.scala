/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package title_domain

import anorm.BatchSql
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import scala.annotation.nowarn
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class TitleDomainRepoImpl extends TitleDomainRepo {
  override def delete: DeleteBuilder[TitleDomainFields, TitleDomainRow] = {
    DeleteBuilder(""""public"."title_domain"""", TitleDomainFields.structure)
  }
  override def deleteById(code: TitleDomainId)(implicit c: Connection): Boolean = {
    SQL"""delete from "public"."title_domain" where "code" = ${ParameterValue(code, null, TitleDomainId.toStatement)}""".executeUpdate() > 0
  }
  override def deleteByIds(codes: Array[TitleDomainId])(implicit c: Connection): Int = {
    SQL"""delete
          from "public"."title_domain"
          where "code" = ANY(${codes})
       """.executeUpdate()
    
  }
  override def insert(unsaved: TitleDomainRow)(implicit c: Connection): TitleDomainRow = {
    SQL"""insert into "public"."title_domain"("code")
          values (${ParameterValue(unsaved.code, null, TitleDomainId.toStatement)}::text)
          returning "code"
       """
      .executeInsert(TitleDomainRow.rowParser(1).single)
    
  }
  override def insertStreaming(unsaved: Iterator[TitleDomainRow], batchSize: Int = 10000)(implicit c: Connection): Long = {
    streamingInsert(s"""COPY "public"."title_domain"("code") FROM STDIN""", batchSize, unsaved)(TitleDomainRow.text, c)
  }
  override def select: SelectBuilder[TitleDomainFields, TitleDomainRow] = {
    SelectBuilderSql(""""public"."title_domain"""", TitleDomainFields.structure, TitleDomainRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[TitleDomainRow] = {
    SQL"""select "code"
          from "public"."title_domain"
       """.as(TitleDomainRow.rowParser(1).*)
  }
  override def selectById(code: TitleDomainId)(implicit c: Connection): Option[TitleDomainRow] = {
    SQL"""select "code"
          from "public"."title_domain"
          where "code" = ${ParameterValue(code, null, TitleDomainId.toStatement)}
       """.as(TitleDomainRow.rowParser(1).singleOpt)
  }
  override def selectByIds(codes: Array[TitleDomainId])(implicit c: Connection): List[TitleDomainRow] = {
    SQL"""select "code"
          from "public"."title_domain"
          where "code" = ANY(${codes})
       """.as(TitleDomainRow.rowParser(1).*)
    
  }
  override def selectByIdsTracked(codes: Array[TitleDomainId])(implicit c: Connection): Map[TitleDomainId, TitleDomainRow] = {
    val byId = selectByIds(codes).view.map(x => (x.code, x)).toMap
    codes.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
  }
  override def update: UpdateBuilder[TitleDomainFields, TitleDomainRow] = {
    UpdateBuilder(""""public"."title_domain"""", TitleDomainFields.structure, TitleDomainRow.rowParser)
  }
  override def upsert(unsaved: TitleDomainRow)(implicit c: Connection): TitleDomainRow = {
    SQL"""insert into "public"."title_domain"("code")
          values (
            ${ParameterValue(unsaved.code, null, TitleDomainId.toStatement)}::text
          )
          on conflict ("code")
          do update set "code" = EXCLUDED."code"
          returning "code"
       """
      .executeInsert(TitleDomainRow.rowParser(1).single)
    
  }
  override def upsertBatch(unsaved: Iterable[TitleDomainRow])(implicit c: Connection): List[TitleDomainRow] = {
    def toNamedParameter(row: TitleDomainRow): List[NamedParameter] = List(
      NamedParameter("code", ParameterValue(row.code, null, TitleDomainId.toStatement))
    )
    unsaved.toList match {
      case Nil => Nil
      case head :: rest =>
        new anorm.adventureworks.ExecuteReturningSyntax.Ops(
          BatchSql(
            s"""insert into "public"."title_domain"("code")
                values ({code}::text)
                on conflict ("code")
                do nothing
                returning "code"
             """,
            toNamedParameter(head),
            rest.map(toNamedParameter)*
          )
        ).executeReturning(TitleDomainRow.rowParser(1).*)
    }
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Iterator[TitleDomainRow], batchSize: Int = 10000)(implicit c: Connection): Int = {
    SQL"""create temporary table title_domain_TEMP (like "public"."title_domain") on commit drop""".execute(): @nowarn
    streamingInsert(s"""copy title_domain_TEMP("code") from stdin""", batchSize, unsaved)(TitleDomainRow.text, c): @nowarn
    SQL"""insert into "public"."title_domain"("code")
          select * from title_domain_TEMP
          on conflict ("code")
          do nothing
          ;
          drop table title_domain_TEMP;""".executeUpdate()
  }
}
