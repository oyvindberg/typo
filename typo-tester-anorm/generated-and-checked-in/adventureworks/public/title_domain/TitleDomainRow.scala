/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package title_domain

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: public.title_domain
    Primary key: code */
case class TitleDomainRow(
  code: TitleDomainId
){
   val id = code
 }

object TitleDomainRow {
  implicit lazy val reads: Reads[TitleDomainRow] = Reads[TitleDomainRow](json => JsResult.fromTry(
      Try(
        TitleDomainRow(
          code = json.\("code").as(TitleDomainId.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TitleDomainRow] = RowParser[TitleDomainRow] { row =>
    Success(
      TitleDomainRow(
        code = row(idx + 0)(TitleDomainId.column)
      )
    )
  }
  implicit lazy val text: Text[TitleDomainRow] = Text.instance[TitleDomainRow]{ (row, sb) =>
    TitleDomainId.text.unsafeEncode(row.code, sb)
  }
  implicit lazy val writes: OWrites[TitleDomainRow] = OWrites[TitleDomainRow](o =>
    new JsObject(ListMap[String, JsValue](
      "code" -> TitleDomainId.writes.writes(o.code)
    ))
  )
}
