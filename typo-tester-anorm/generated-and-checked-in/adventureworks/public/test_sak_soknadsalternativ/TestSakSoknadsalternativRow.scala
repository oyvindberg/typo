/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_sak_soknadsalternativ

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import adventureworks.public.test_utdanningstilbud.TestUtdanningstilbudId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: public.test_sak_soknadsalternativ
    Composite primary key: organisasjonskode_saksbehandler, utdanningsmulighet_kode */
case class TestSakSoknadsalternativRow(
  organisasjonskodeSaksbehandler: String,
  /** Points to [[test_utdanningstilbud.TestUtdanningstilbudRow.utdanningsmulighetKode]] */
  utdanningsmulighetKode: String,
  /** Points to [[test_utdanningstilbud.TestUtdanningstilbudRow.organisasjonskode]] */
  organisasjonskodeTilbyder: TestOrganisasjonId
){
   val compositeId: TestSakSoknadsalternativId = TestSakSoknadsalternativId(organisasjonskodeSaksbehandler, utdanningsmulighetKode)
   val id = compositeId
   val extractTestUtdanningstilbudId: TestUtdanningstilbudId = TestUtdanningstilbudId(
     organisasjonskode = organisasjonskodeTilbyder,
     utdanningsmulighetKode = utdanningsmulighetKode
   )
 }

object TestSakSoknadsalternativRow {
  def apply(compositeId: TestSakSoknadsalternativId, organisasjonskodeTilbyder: TestOrganisasjonId) =
    new TestSakSoknadsalternativRow(compositeId.organisasjonskodeSaksbehandler, compositeId.utdanningsmulighetKode, organisasjonskodeTilbyder)
  implicit lazy val reads: Reads[TestSakSoknadsalternativRow] = Reads[TestSakSoknadsalternativRow](json => JsResult.fromTry(
      Try(
        TestSakSoknadsalternativRow(
          organisasjonskodeSaksbehandler = json.\("organisasjonskode_saksbehandler").as(Reads.StringReads),
          utdanningsmulighetKode = json.\("utdanningsmulighet_kode").as(Reads.StringReads),
          organisasjonskodeTilbyder = json.\("organisasjonskode_tilbyder").as(TestOrganisasjonId.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TestSakSoknadsalternativRow] = RowParser[TestSakSoknadsalternativRow] { row =>
    Success(
      TestSakSoknadsalternativRow(
        organisasjonskodeSaksbehandler = row(idx + 0)(Column.columnToString),
        utdanningsmulighetKode = row(idx + 1)(Column.columnToString),
        organisasjonskodeTilbyder = row(idx + 2)(TestOrganisasjonId.column)
      )
    )
  }
  implicit lazy val text: Text[TestSakSoknadsalternativRow] = Text.instance[TestSakSoknadsalternativRow]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.organisasjonskodeSaksbehandler, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.utdanningsmulighetKode, sb)
    sb.append(Text.DELIMETER)
    TestOrganisasjonId.text.unsafeEncode(row.organisasjonskodeTilbyder, sb)
  }
  implicit lazy val writes: OWrites[TestSakSoknadsalternativRow] = OWrites[TestSakSoknadsalternativRow](o =>
    new JsObject(ListMap[String, JsValue](
      "organisasjonskode_saksbehandler" -> Writes.StringWrites.writes(o.organisasjonskodeSaksbehandler),
      "utdanningsmulighet_kode" -> Writes.StringWrites.writes(o.utdanningsmulighetKode),
      "organisasjonskode_tilbyder" -> TestOrganisasjonId.writes.writes(o.organisasjonskodeTilbyder)
    ))
  )
}
