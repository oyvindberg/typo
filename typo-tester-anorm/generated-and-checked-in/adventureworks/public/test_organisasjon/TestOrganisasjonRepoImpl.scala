/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_organisasjon

import anorm.BatchSql
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import scala.annotation.nowarn
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class TestOrganisasjonRepoImpl extends TestOrganisasjonRepo {
  override def delete: DeleteBuilder[TestOrganisasjonFields, TestOrganisasjonRow] = {
    DeleteBuilder(""""public"."test_organisasjon"""", TestOrganisasjonFields.structure)
  }
  override def deleteById(organisasjonskode: TestOrganisasjonId)(implicit c: Connection): Boolean = {
    SQL"""delete from "public"."test_organisasjon" where "organisasjonskode" = ${ParameterValue(organisasjonskode, null, TestOrganisasjonId.toStatement)}""".executeUpdate() > 0
  }
  override def deleteByIds(organisasjonskodes: Array[TestOrganisasjonId])(implicit c: Connection): Int = {
    SQL"""delete
          from "public"."test_organisasjon"
          where "organisasjonskode" = ANY(${organisasjonskodes})
       """.executeUpdate()
    
  }
  override def insert(unsaved: TestOrganisasjonRow)(implicit c: Connection): TestOrganisasjonRow = {
    SQL"""insert into "public"."test_organisasjon"("organisasjonskode")
          values (${ParameterValue(unsaved.organisasjonskode, null, TestOrganisasjonId.toStatement)})
          returning "organisasjonskode"
       """
      .executeInsert(TestOrganisasjonRow.rowParser(1).single)
    
  }
  override def insertStreaming(unsaved: Iterator[TestOrganisasjonRow], batchSize: Int = 10000)(implicit c: Connection): Long = {
    streamingInsert(s"""COPY "public"."test_organisasjon"("organisasjonskode") FROM STDIN""", batchSize, unsaved)(TestOrganisasjonRow.text, c)
  }
  override def select: SelectBuilder[TestOrganisasjonFields, TestOrganisasjonRow] = {
    SelectBuilderSql(""""public"."test_organisasjon"""", TestOrganisasjonFields.structure, TestOrganisasjonRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[TestOrganisasjonRow] = {
    SQL"""select "organisasjonskode"
          from "public"."test_organisasjon"
       """.as(TestOrganisasjonRow.rowParser(1).*)
  }
  override def selectById(organisasjonskode: TestOrganisasjonId)(implicit c: Connection): Option[TestOrganisasjonRow] = {
    SQL"""select "organisasjonskode"
          from "public"."test_organisasjon"
          where "organisasjonskode" = ${ParameterValue(organisasjonskode, null, TestOrganisasjonId.toStatement)}
       """.as(TestOrganisasjonRow.rowParser(1).singleOpt)
  }
  override def selectByIds(organisasjonskodes: Array[TestOrganisasjonId])(implicit c: Connection): List[TestOrganisasjonRow] = {
    SQL"""select "organisasjonskode"
          from "public"."test_organisasjon"
          where "organisasjonskode" = ANY(${organisasjonskodes})
       """.as(TestOrganisasjonRow.rowParser(1).*)
    
  }
  override def selectByIdsTracked(organisasjonskodes: Array[TestOrganisasjonId])(implicit c: Connection): Map[TestOrganisasjonId, TestOrganisasjonRow] = {
    val byId = selectByIds(organisasjonskodes).view.map(x => (x.organisasjonskode, x)).toMap
    organisasjonskodes.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
  }
  override def update: UpdateBuilder[TestOrganisasjonFields, TestOrganisasjonRow] = {
    UpdateBuilder(""""public"."test_organisasjon"""", TestOrganisasjonFields.structure, TestOrganisasjonRow.rowParser)
  }
  override def upsert(unsaved: TestOrganisasjonRow)(implicit c: Connection): TestOrganisasjonRow = {
    SQL"""insert into "public"."test_organisasjon"("organisasjonskode")
          values (
            ${ParameterValue(unsaved.organisasjonskode, null, TestOrganisasjonId.toStatement)}
          )
          on conflict ("organisasjonskode")
          do update set "organisasjonskode" = EXCLUDED."organisasjonskode"
          returning "organisasjonskode"
       """
      .executeInsert(TestOrganisasjonRow.rowParser(1).single)
    
  }
  override def upsertBatch(unsaved: Iterable[TestOrganisasjonRow])(implicit c: Connection): List[TestOrganisasjonRow] = {
    def toNamedParameter(row: TestOrganisasjonRow): List[NamedParameter] = List(
      NamedParameter("organisasjonskode", ParameterValue(row.organisasjonskode, null, TestOrganisasjonId.toStatement))
    )
    unsaved.toList match {
      case Nil => Nil
      case head :: rest =>
        new anorm.adventureworks.ExecuteReturningSyntax.Ops(
          BatchSql(
            s"""insert into "public"."test_organisasjon"("organisasjonskode")
                values ({organisasjonskode})
                on conflict ("organisasjonskode")
                do nothing
                returning "organisasjonskode"
             """,
            toNamedParameter(head),
            rest.map(toNamedParameter)*
          )
        ).executeReturning(TestOrganisasjonRow.rowParser(1).*)
    }
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Iterator[TestOrganisasjonRow], batchSize: Int = 10000)(implicit c: Connection): Int = {
    SQL"""create temporary table test_organisasjon_TEMP (like "public"."test_organisasjon") on commit drop""".execute(): @nowarn
    streamingInsert(s"""copy test_organisasjon_TEMP("organisasjonskode") from stdin""", batchSize, unsaved)(TestOrganisasjonRow.text, c): @nowarn
    SQL"""insert into "public"."test_organisasjon"("organisasjonskode")
          select * from test_organisasjon_TEMP
          on conflict ("organisasjonskode")
          do nothing
          ;
          drop table test_organisasjon_TEMP;""".executeUpdate()
  }
}
