/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_organisasjon

import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: public.test_organisasjon
    Primary key: organisasjonskode */
case class TestOrganisasjonRow(
  organisasjonskode: TestOrganisasjonId
){
   val id = organisasjonskode
 }

object TestOrganisasjonRow {
  implicit lazy val reads: Reads[TestOrganisasjonRow] = Reads[TestOrganisasjonRow](json => JsResult.fromTry(
      Try(
        TestOrganisasjonRow(
          organisasjonskode = json.\("organisasjonskode").as(TestOrganisasjonId.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TestOrganisasjonRow] = RowParser[TestOrganisasjonRow] { row =>
    Success(
      TestOrganisasjonRow(
        organisasjonskode = row(idx + 0)(TestOrganisasjonId.column)
      )
    )
  }
  implicit lazy val text: Text[TestOrganisasjonRow] = Text.instance[TestOrganisasjonRow]{ (row, sb) =>
    TestOrganisasjonId.text.unsafeEncode(row.organisasjonskode, sb)
  }
  implicit lazy val writes: OWrites[TestOrganisasjonRow] = OWrites[TestOrganisasjonRow](o =>
    new JsObject(ListMap[String, JsValue](
      "organisasjonskode" -> TestOrganisasjonId.writes.writes(o.organisasjonskode)
    ))
  )
}
