/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtestnull

import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXml
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: public.pgtestnull */
case class PgtestnullRow(
  bool: Option[Boolean],
  box: Option[TypoBox],
  bpchar: Option[/* bpchar, max 3 chars */ String],
  bytea: Option[TypoBytea],
  char: Option[/* bpchar, max 1 chars */ String],
  circle: Option[TypoCircle],
  date: Option[TypoLocalDate],
  float4: Option[Float],
  float8: Option[Double],
  hstore: Option[TypoHStore],
  inet: Option[TypoInet],
  int2: Option[TypoShort],
  int2vector: Option[TypoInt2Vector],
  int4: Option[Int],
  int8: Option[Long],
  interval: Option[TypoInterval],
  json: Option[TypoJson],
  jsonb: Option[TypoJsonb],
  line: Option[TypoLine],
  lseg: Option[TypoLineSegment],
  money: Option[TypoMoney],
  mydomain: Option[Mydomain],
  myenum: Option[Myenum],
  name: Option[String],
  numeric: Option[BigDecimal],
  path: Option[TypoPath],
  point: Option[TypoPoint],
  polygon: Option[TypoPolygon],
  text: Option[String],
  time: Option[TypoLocalTime],
  timestamp: Option[TypoLocalDateTime],
  timestampz: Option[TypoInstant],
  timez: Option[TypoOffsetTime],
  uuid: Option[TypoUUID],
  varchar: Option[String],
  vector: Option[TypoVector],
  xml: Option[TypoXml],
  boxes: Option[Array[TypoBox]],
  bpchares: Option[Array[/* bpchar */ String]],
  chares: Option[Array[/* bpchar */ String]],
  circlees: Option[Array[TypoCircle]],
  datees: Option[Array[TypoLocalDate]],
  float4es: Option[Array[Float]],
  float8es: Option[Array[Double]],
  inetes: Option[Array[TypoInet]],
  int2es: Option[Array[TypoShort]],
  int2vectores: Option[Array[TypoInt2Vector]],
  int4es: Option[Array[Int]],
  int8es: Option[Array[Long]],
  intervales: Option[Array[TypoInterval]],
  jsones: Option[Array[TypoJson]],
  jsonbes: Option[Array[TypoJsonb]],
  linees: Option[Array[TypoLine]],
  lseges: Option[Array[TypoLineSegment]],
  moneyes: Option[Array[TypoMoney]],
  mydomaines: Option[Array[Mydomain]],
  myenumes: Option[Array[Myenum]],
  namees: Option[Array[String]],
  numerices: Option[Array[BigDecimal]],
  pathes: Option[Array[TypoPath]],
  pointes: Option[Array[TypoPoint]],
  polygones: Option[Array[TypoPolygon]],
  textes: Option[Array[String]],
  timees: Option[Array[TypoLocalTime]],
  timestampes: Option[Array[TypoLocalDateTime]],
  timestampzes: Option[Array[TypoInstant]],
  timezes: Option[Array[TypoOffsetTime]],
  uuides: Option[Array[TypoUUID]],
  varchares: Option[Array[String]],
  xmles: Option[Array[TypoXml]]
)

object PgtestnullRow {
  implicit lazy val reads: Reads[PgtestnullRow] = Reads[PgtestnullRow](json => JsResult.fromTry(
      Try(
        PgtestnullRow(
          bool = json.\("bool").toOption.map(_.as(Reads.BooleanReads)),
          box = json.\("box").toOption.map(_.as(TypoBox.reads)),
          bpchar = json.\("bpchar").toOption.map(_.as(Reads.StringReads)),
          bytea = json.\("bytea").toOption.map(_.as(TypoBytea.reads)),
          char = json.\("char").toOption.map(_.as(Reads.StringReads)),
          circle = json.\("circle").toOption.map(_.as(TypoCircle.reads)),
          date = json.\("date").toOption.map(_.as(TypoLocalDate.reads)),
          float4 = json.\("float4").toOption.map(_.as(Reads.FloatReads)),
          float8 = json.\("float8").toOption.map(_.as(Reads.DoubleReads)),
          hstore = json.\("hstore").toOption.map(_.as(TypoHStore.reads)),
          inet = json.\("inet").toOption.map(_.as(TypoInet.reads)),
          int2 = json.\("int2").toOption.map(_.as(TypoShort.reads)),
          int2vector = json.\("int2vector").toOption.map(_.as(TypoInt2Vector.reads)),
          int4 = json.\("int4").toOption.map(_.as(Reads.IntReads)),
          int8 = json.\("int8").toOption.map(_.as(Reads.LongReads)),
          interval = json.\("interval").toOption.map(_.as(TypoInterval.reads)),
          json = json.\("json").toOption.map(_.as(TypoJson.reads)),
          jsonb = json.\("jsonb").toOption.map(_.as(TypoJsonb.reads)),
          line = json.\("line").toOption.map(_.as(TypoLine.reads)),
          lseg = json.\("lseg").toOption.map(_.as(TypoLineSegment.reads)),
          money = json.\("money").toOption.map(_.as(TypoMoney.reads)),
          mydomain = json.\("mydomain").toOption.map(_.as(Mydomain.reads)),
          myenum = json.\("myenum").toOption.map(_.as(Myenum.reads)),
          name = json.\("name").toOption.map(_.as(Reads.StringReads)),
          numeric = json.\("numeric").toOption.map(_.as(Reads.bigDecReads)),
          path = json.\("path").toOption.map(_.as(TypoPath.reads)),
          point = json.\("point").toOption.map(_.as(TypoPoint.reads)),
          polygon = json.\("polygon").toOption.map(_.as(TypoPolygon.reads)),
          text = json.\("text").toOption.map(_.as(Reads.StringReads)),
          time = json.\("time").toOption.map(_.as(TypoLocalTime.reads)),
          timestamp = json.\("timestamp").toOption.map(_.as(TypoLocalDateTime.reads)),
          timestampz = json.\("timestampz").toOption.map(_.as(TypoInstant.reads)),
          timez = json.\("timez").toOption.map(_.as(TypoOffsetTime.reads)),
          uuid = json.\("uuid").toOption.map(_.as(TypoUUID.reads)),
          varchar = json.\("varchar").toOption.map(_.as(Reads.StringReads)),
          vector = json.\("vector").toOption.map(_.as(TypoVector.reads)),
          xml = json.\("xml").toOption.map(_.as(TypoXml.reads)),
          boxes = json.\("boxes").toOption.map(_.as(Reads.ArrayReads[TypoBox](using TypoBox.reads, implicitly))),
          bpchares = json.\("bpchares").toOption.map(_.as(Reads.ArrayReads[String](using Reads.StringReads, implicitly))),
          chares = json.\("chares").toOption.map(_.as(Reads.ArrayReads[String](using Reads.StringReads, implicitly))),
          circlees = json.\("circlees").toOption.map(_.as(Reads.ArrayReads[TypoCircle](using TypoCircle.reads, implicitly))),
          datees = json.\("datees").toOption.map(_.as(Reads.ArrayReads[TypoLocalDate](using TypoLocalDate.reads, implicitly))),
          float4es = json.\("float4es").toOption.map(_.as(Reads.ArrayReads[Float](using Reads.FloatReads, implicitly))),
          float8es = json.\("float8es").toOption.map(_.as(Reads.ArrayReads[Double](using Reads.DoubleReads, implicitly))),
          inetes = json.\("inetes").toOption.map(_.as(Reads.ArrayReads[TypoInet](using TypoInet.reads, implicitly))),
          int2es = json.\("int2es").toOption.map(_.as(Reads.ArrayReads[TypoShort](using TypoShort.reads, implicitly))),
          int2vectores = json.\("int2vectores").toOption.map(_.as(Reads.ArrayReads[TypoInt2Vector](using TypoInt2Vector.reads, implicitly))),
          int4es = json.\("int4es").toOption.map(_.as(Reads.ArrayReads[Int](using Reads.IntReads, implicitly))),
          int8es = json.\("int8es").toOption.map(_.as(Reads.ArrayReads[Long](using Reads.LongReads, implicitly))),
          intervales = json.\("intervales").toOption.map(_.as(Reads.ArrayReads[TypoInterval](using TypoInterval.reads, implicitly))),
          jsones = json.\("jsones").toOption.map(_.as(Reads.ArrayReads[TypoJson](using TypoJson.reads, implicitly))),
          jsonbes = json.\("jsonbes").toOption.map(_.as(Reads.ArrayReads[TypoJsonb](using TypoJsonb.reads, implicitly))),
          linees = json.\("linees").toOption.map(_.as(Reads.ArrayReads[TypoLine](using TypoLine.reads, implicitly))),
          lseges = json.\("lseges").toOption.map(_.as(Reads.ArrayReads[TypoLineSegment](using TypoLineSegment.reads, implicitly))),
          moneyes = json.\("moneyes").toOption.map(_.as(Reads.ArrayReads[TypoMoney](using TypoMoney.reads, implicitly))),
          mydomaines = json.\("mydomaines").toOption.map(_.as(Reads.ArrayReads[Mydomain](using Mydomain.reads, implicitly))),
          myenumes = json.\("myenumes").toOption.map(_.as(Reads.ArrayReads[Myenum](using Myenum.reads, implicitly))),
          namees = json.\("namees").toOption.map(_.as(Reads.ArrayReads[String](using Reads.StringReads, implicitly))),
          numerices = json.\("numerices").toOption.map(_.as(Reads.ArrayReads[BigDecimal](using Reads.bigDecReads, implicitly))),
          pathes = json.\("pathes").toOption.map(_.as(Reads.ArrayReads[TypoPath](using TypoPath.reads, implicitly))),
          pointes = json.\("pointes").toOption.map(_.as(Reads.ArrayReads[TypoPoint](using TypoPoint.reads, implicitly))),
          polygones = json.\("polygones").toOption.map(_.as(Reads.ArrayReads[TypoPolygon](using TypoPolygon.reads, implicitly))),
          textes = json.\("textes").toOption.map(_.as(Reads.ArrayReads[String](using Reads.StringReads, implicitly))),
          timees = json.\("timees").toOption.map(_.as(Reads.ArrayReads[TypoLocalTime](using TypoLocalTime.reads, implicitly))),
          timestampes = json.\("timestampes").toOption.map(_.as(Reads.ArrayReads[TypoLocalDateTime](using TypoLocalDateTime.reads, implicitly))),
          timestampzes = json.\("timestampzes").toOption.map(_.as(Reads.ArrayReads[TypoInstant](using TypoInstant.reads, implicitly))),
          timezes = json.\("timezes").toOption.map(_.as(Reads.ArrayReads[TypoOffsetTime](using TypoOffsetTime.reads, implicitly))),
          uuides = json.\("uuides").toOption.map(_.as(Reads.ArrayReads[TypoUUID](using TypoUUID.reads, implicitly))),
          varchares = json.\("varchares").toOption.map(_.as(Reads.ArrayReads[String](using Reads.StringReads, implicitly))),
          xmles = json.\("xmles").toOption.map(_.as(Reads.ArrayReads[TypoXml](using TypoXml.reads, implicitly)))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgtestnullRow] = RowParser[PgtestnullRow] { row =>
    Success(
      PgtestnullRow(
        bool = row(idx + 0)(Column.columnToOption(Column.columnToBoolean)),
        box = row(idx + 1)(Column.columnToOption(TypoBox.column)),
        bpchar = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        bytea = row(idx + 3)(Column.columnToOption(TypoBytea.column)),
        char = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        circle = row(idx + 5)(Column.columnToOption(TypoCircle.column)),
        date = row(idx + 6)(Column.columnToOption(TypoLocalDate.column)),
        float4 = row(idx + 7)(Column.columnToOption(Column.columnToFloat)),
        float8 = row(idx + 8)(Column.columnToOption(Column.columnToDouble)),
        hstore = row(idx + 9)(Column.columnToOption(TypoHStore.column)),
        inet = row(idx + 10)(Column.columnToOption(TypoInet.column)),
        int2 = row(idx + 11)(Column.columnToOption(TypoShort.column)),
        int2vector = row(idx + 12)(Column.columnToOption(TypoInt2Vector.column)),
        int4 = row(idx + 13)(Column.columnToOption(Column.columnToInt)),
        int8 = row(idx + 14)(Column.columnToOption(Column.columnToLong)),
        interval = row(idx + 15)(Column.columnToOption(TypoInterval.column)),
        json = row(idx + 16)(Column.columnToOption(TypoJson.column)),
        jsonb = row(idx + 17)(Column.columnToOption(TypoJsonb.column)),
        line = row(idx + 18)(Column.columnToOption(TypoLine.column)),
        lseg = row(idx + 19)(Column.columnToOption(TypoLineSegment.column)),
        money = row(idx + 20)(Column.columnToOption(TypoMoney.column)),
        mydomain = row(idx + 21)(Column.columnToOption(Mydomain.column)),
        myenum = row(idx + 22)(Column.columnToOption(Myenum.column)),
        name = row(idx + 23)(Column.columnToOption(Column.columnToString)),
        numeric = row(idx + 24)(Column.columnToOption(Column.columnToScalaBigDecimal)),
        path = row(idx + 25)(Column.columnToOption(TypoPath.column)),
        point = row(idx + 26)(Column.columnToOption(TypoPoint.column)),
        polygon = row(idx + 27)(Column.columnToOption(TypoPolygon.column)),
        text = row(idx + 28)(Column.columnToOption(Column.columnToString)),
        time = row(idx + 29)(Column.columnToOption(TypoLocalTime.column)),
        timestamp = row(idx + 30)(Column.columnToOption(TypoLocalDateTime.column)),
        timestampz = row(idx + 31)(Column.columnToOption(TypoInstant.column)),
        timez = row(idx + 32)(Column.columnToOption(TypoOffsetTime.column)),
        uuid = row(idx + 33)(Column.columnToOption(TypoUUID.column)),
        varchar = row(idx + 34)(Column.columnToOption(Column.columnToString)),
        vector = row(idx + 35)(Column.columnToOption(TypoVector.column)),
        xml = row(idx + 36)(Column.columnToOption(TypoXml.column)),
        boxes = row(idx + 37)(Column.columnToOption(TypoBox.arrayColumn)),
        bpchares = row(idx + 38)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly))),
        chares = row(idx + 39)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly))),
        circlees = row(idx + 40)(Column.columnToOption(TypoCircle.arrayColumn)),
        datees = row(idx + 41)(Column.columnToOption(TypoLocalDate.arrayColumn)),
        float4es = row(idx + 42)(Column.columnToOption(Column.columnToArray[Float](Column.columnToFloat, implicitly))),
        float8es = row(idx + 43)(Column.columnToOption(Column.columnToArray[Double](Column.columnToDouble, implicitly))),
        inetes = row(idx + 44)(Column.columnToOption(TypoInet.arrayColumn)),
        int2es = row(idx + 45)(Column.columnToOption(TypoShort.arrayColumn)),
        int2vectores = row(idx + 46)(Column.columnToOption(TypoInt2Vector.arrayColumn)),
        int4es = row(idx + 47)(Column.columnToOption(Column.columnToArray[Int](Column.columnToInt, implicitly))),
        int8es = row(idx + 48)(Column.columnToOption(Column.columnToArray[Long](Column.columnToLong, implicitly))),
        intervales = row(idx + 49)(Column.columnToOption(TypoInterval.arrayColumn)),
        jsones = row(idx + 50)(Column.columnToOption(TypoJson.arrayColumn)),
        jsonbes = row(idx + 51)(Column.columnToOption(TypoJsonb.arrayColumn)),
        linees = row(idx + 52)(Column.columnToOption(TypoLine.arrayColumn)),
        lseges = row(idx + 53)(Column.columnToOption(TypoLineSegment.arrayColumn)),
        moneyes = row(idx + 54)(Column.columnToOption(TypoMoney.arrayColumn)),
        mydomaines = row(idx + 55)(Column.columnToOption(Mydomain.arrayColumn)),
        myenumes = row(idx + 56)(Column.columnToOption(Myenum.arrayColumn)),
        namees = row(idx + 57)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly))),
        numerices = row(idx + 58)(Column.columnToOption(Column.columnToArray[BigDecimal](Column.columnToScalaBigDecimal, implicitly))),
        pathes = row(idx + 59)(Column.columnToOption(TypoPath.arrayColumn)),
        pointes = row(idx + 60)(Column.columnToOption(TypoPoint.arrayColumn)),
        polygones = row(idx + 61)(Column.columnToOption(TypoPolygon.arrayColumn)),
        textes = row(idx + 62)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly))),
        timees = row(idx + 63)(Column.columnToOption(TypoLocalTime.arrayColumn)),
        timestampes = row(idx + 64)(Column.columnToOption(TypoLocalDateTime.arrayColumn)),
        timestampzes = row(idx + 65)(Column.columnToOption(TypoInstant.arrayColumn)),
        timezes = row(idx + 66)(Column.columnToOption(TypoOffsetTime.arrayColumn)),
        uuides = row(idx + 67)(Column.columnToOption(TypoUUID.arrayColumn)),
        varchares = row(idx + 68)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly))),
        xmles = row(idx + 69)(Column.columnToOption(TypoXml.arrayColumn))
      )
    )
  }
  implicit lazy val text: Text[PgtestnullRow] = Text.instance[PgtestnullRow]{ (row, sb) =>
    Text.option(Text.booleanInstance).unsafeEncode(row.bool, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoBox.text).unsafeEncode(row.box, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.bpchar, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoBytea.text).unsafeEncode(row.bytea, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.char, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoCircle.text).unsafeEncode(row.circle, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDate.text).unsafeEncode(row.date, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.floatInstance).unsafeEncode(row.float4, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.doubleInstance).unsafeEncode(row.float8, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoHStore.text).unsafeEncode(row.hstore, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInet.text).unsafeEncode(row.inet, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoShort.text).unsafeEncode(row.int2, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInt2Vector.text).unsafeEncode(row.int2vector, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.intInstance).unsafeEncode(row.int4, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.longInstance).unsafeEncode(row.int8, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInterval.text).unsafeEncode(row.interval, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoJson.text).unsafeEncode(row.json, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoJsonb.text).unsafeEncode(row.jsonb, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLine.text).unsafeEncode(row.line, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLineSegment.text).unsafeEncode(row.lseg, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoMoney.text).unsafeEncode(row.money, sb)
    sb.append(Text.DELIMETER)
    Text.option(Mydomain.text).unsafeEncode(row.mydomain, sb)
    sb.append(Text.DELIMETER)
    Text.option(Myenum.text).unsafeEncode(row.myenum, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.numeric, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPath.text).unsafeEncode(row.path, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPoint.text).unsafeEncode(row.point, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPolygon.text).unsafeEncode(row.polygon, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.text, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalTime.text).unsafeEncode(row.time, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.timestamp, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInstant.text).unsafeEncode(row.timestampz, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoOffsetTime.text).unsafeEncode(row.timez, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoUUID.text).unsafeEncode(row.uuid, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.varchar, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoVector.text).unsafeEncode(row.vector, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoXml.text).unsafeEncode(row.xml, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoBox](TypoBox.text, implicitly)).unsafeEncode(row.boxes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.bpchares, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.chares, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoCircle](TypoCircle.text, implicitly)).unsafeEncode(row.circlees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLocalDate](TypoLocalDate.text, implicitly)).unsafeEncode(row.datees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Float]]).unsafeEncode(row.float4es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Double]]).unsafeEncode(row.float8es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInet](TypoInet.text, implicitly)).unsafeEncode(row.inetes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoShort](TypoShort.text, implicitly)).unsafeEncode(row.int2es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInt2Vector](TypoInt2Vector.text, implicitly)).unsafeEncode(row.int2vectores, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Int]]).unsafeEncode(row.int4es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Long]]).unsafeEncode(row.int8es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInterval](TypoInterval.text, implicitly)).unsafeEncode(row.intervales, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoJson](TypoJson.text, implicitly)).unsafeEncode(row.jsones, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoJsonb](TypoJsonb.text, implicitly)).unsafeEncode(row.jsonbes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLine](TypoLine.text, implicitly)).unsafeEncode(row.linees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLineSegment](TypoLineSegment.text, implicitly)).unsafeEncode(row.lseges, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoMoney](TypoMoney.text, implicitly)).unsafeEncode(row.moneyes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, Mydomain](Mydomain.text, implicitly)).unsafeEncode(row.mydomaines, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, Myenum](Myenum.text, implicitly)).unsafeEncode(row.myenumes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.namees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[BigDecimal]]).unsafeEncode(row.numerices, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoPath](TypoPath.text, implicitly)).unsafeEncode(row.pathes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoPoint](TypoPoint.text, implicitly)).unsafeEncode(row.pointes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoPolygon](TypoPolygon.text, implicitly)).unsafeEncode(row.polygones, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.textes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLocalTime](TypoLocalTime.text, implicitly)).unsafeEncode(row.timees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLocalDateTime](TypoLocalDateTime.text, implicitly)).unsafeEncode(row.timestampes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInstant](TypoInstant.text, implicitly)).unsafeEncode(row.timestampzes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoOffsetTime](TypoOffsetTime.text, implicitly)).unsafeEncode(row.timezes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoUUID](TypoUUID.text, implicitly)).unsafeEncode(row.uuides, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.varchares, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoXml](TypoXml.text, implicitly)).unsafeEncode(row.xmles, sb)
  }
  implicit lazy val writes: OWrites[PgtestnullRow] = OWrites[PgtestnullRow](o =>
    new JsObject(ListMap[String, JsValue](
      "bool" -> Writes.OptionWrites(Writes.BooleanWrites).writes(o.bool),
      "box" -> Writes.OptionWrites(TypoBox.writes).writes(o.box),
      "bpchar" -> Writes.OptionWrites(Writes.StringWrites).writes(o.bpchar),
      "bytea" -> Writes.OptionWrites(TypoBytea.writes).writes(o.bytea),
      "char" -> Writes.OptionWrites(Writes.StringWrites).writes(o.char),
      "circle" -> Writes.OptionWrites(TypoCircle.writes).writes(o.circle),
      "date" -> Writes.OptionWrites(TypoLocalDate.writes).writes(o.date),
      "float4" -> Writes.OptionWrites(Writes.FloatWrites).writes(o.float4),
      "float8" -> Writes.OptionWrites(Writes.DoubleWrites).writes(o.float8),
      "hstore" -> Writes.OptionWrites(TypoHStore.writes).writes(o.hstore),
      "inet" -> Writes.OptionWrites(TypoInet.writes).writes(o.inet),
      "int2" -> Writes.OptionWrites(TypoShort.writes).writes(o.int2),
      "int2vector" -> Writes.OptionWrites(TypoInt2Vector.writes).writes(o.int2vector),
      "int4" -> Writes.OptionWrites(Writes.IntWrites).writes(o.int4),
      "int8" -> Writes.OptionWrites(Writes.LongWrites).writes(o.int8),
      "interval" -> Writes.OptionWrites(TypoInterval.writes).writes(o.interval),
      "json" -> Writes.OptionWrites(TypoJson.writes).writes(o.json),
      "jsonb" -> Writes.OptionWrites(TypoJsonb.writes).writes(o.jsonb),
      "line" -> Writes.OptionWrites(TypoLine.writes).writes(o.line),
      "lseg" -> Writes.OptionWrites(TypoLineSegment.writes).writes(o.lseg),
      "money" -> Writes.OptionWrites(TypoMoney.writes).writes(o.money),
      "mydomain" -> Writes.OptionWrites(Mydomain.writes).writes(o.mydomain),
      "myenum" -> Writes.OptionWrites(Myenum.writes).writes(o.myenum),
      "name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.name),
      "numeric" -> Writes.OptionWrites(Writes.BigDecimalWrites).writes(o.numeric),
      "path" -> Writes.OptionWrites(TypoPath.writes).writes(o.path),
      "point" -> Writes.OptionWrites(TypoPoint.writes).writes(o.point),
      "polygon" -> Writes.OptionWrites(TypoPolygon.writes).writes(o.polygon),
      "text" -> Writes.OptionWrites(Writes.StringWrites).writes(o.text),
      "time" -> Writes.OptionWrites(TypoLocalTime.writes).writes(o.time),
      "timestamp" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.timestamp),
      "timestampz" -> Writes.OptionWrites(TypoInstant.writes).writes(o.timestampz),
      "timez" -> Writes.OptionWrites(TypoOffsetTime.writes).writes(o.timez),
      "uuid" -> Writes.OptionWrites(TypoUUID.writes).writes(o.uuid),
      "varchar" -> Writes.OptionWrites(Writes.StringWrites).writes(o.varchar),
      "vector" -> Writes.OptionWrites(TypoVector.writes).writes(o.vector),
      "xml" -> Writes.OptionWrites(TypoXml.writes).writes(o.xml),
      "boxes" -> Writes.OptionWrites(Writes.arrayWrites[TypoBox](using implicitly, TypoBox.writes)).writes(o.boxes),
      "bpchares" -> Writes.OptionWrites(Writes.arrayWrites[String](using implicitly, Writes.StringWrites)).writes(o.bpchares),
      "chares" -> Writes.OptionWrites(Writes.arrayWrites[String](using implicitly, Writes.StringWrites)).writes(o.chares),
      "circlees" -> Writes.OptionWrites(Writes.arrayWrites[TypoCircle](using implicitly, TypoCircle.writes)).writes(o.circlees),
      "datees" -> Writes.OptionWrites(Writes.arrayWrites[TypoLocalDate](using implicitly, TypoLocalDate.writes)).writes(o.datees),
      "float4es" -> Writes.OptionWrites(Writes.arrayWrites[Float](using implicitly, Writes.FloatWrites)).writes(o.float4es),
      "float8es" -> Writes.OptionWrites(Writes.arrayWrites[Double](using implicitly, Writes.DoubleWrites)).writes(o.float8es),
      "inetes" -> Writes.OptionWrites(Writes.arrayWrites[TypoInet](using implicitly, TypoInet.writes)).writes(o.inetes),
      "int2es" -> Writes.OptionWrites(Writes.arrayWrites[TypoShort](using implicitly, TypoShort.writes)).writes(o.int2es),
      "int2vectores" -> Writes.OptionWrites(Writes.arrayWrites[TypoInt2Vector](using implicitly, TypoInt2Vector.writes)).writes(o.int2vectores),
      "int4es" -> Writes.OptionWrites(Writes.arrayWrites[Int](using implicitly, Writes.IntWrites)).writes(o.int4es),
      "int8es" -> Writes.OptionWrites(Writes.arrayWrites[Long](using implicitly, Writes.LongWrites)).writes(o.int8es),
      "intervales" -> Writes.OptionWrites(Writes.arrayWrites[TypoInterval](using implicitly, TypoInterval.writes)).writes(o.intervales),
      "jsones" -> Writes.OptionWrites(Writes.arrayWrites[TypoJson](using implicitly, TypoJson.writes)).writes(o.jsones),
      "jsonbes" -> Writes.OptionWrites(Writes.arrayWrites[TypoJsonb](using implicitly, TypoJsonb.writes)).writes(o.jsonbes),
      "linees" -> Writes.OptionWrites(Writes.arrayWrites[TypoLine](using implicitly, TypoLine.writes)).writes(o.linees),
      "lseges" -> Writes.OptionWrites(Writes.arrayWrites[TypoLineSegment](using implicitly, TypoLineSegment.writes)).writes(o.lseges),
      "moneyes" -> Writes.OptionWrites(Writes.arrayWrites[TypoMoney](using implicitly, TypoMoney.writes)).writes(o.moneyes),
      "mydomaines" -> Writes.OptionWrites(Writes.arrayWrites[Mydomain](using implicitly, Mydomain.writes)).writes(o.mydomaines),
      "myenumes" -> Writes.OptionWrites(Writes.arrayWrites[Myenum](using implicitly, Myenum.writes)).writes(o.myenumes),
      "namees" -> Writes.OptionWrites(Writes.arrayWrites[String](using implicitly, Writes.StringWrites)).writes(o.namees),
      "numerices" -> Writes.OptionWrites(Writes.arrayWrites[BigDecimal](using implicitly, Writes.BigDecimalWrites)).writes(o.numerices),
      "pathes" -> Writes.OptionWrites(Writes.arrayWrites[TypoPath](using implicitly, TypoPath.writes)).writes(o.pathes),
      "pointes" -> Writes.OptionWrites(Writes.arrayWrites[TypoPoint](using implicitly, TypoPoint.writes)).writes(o.pointes),
      "polygones" -> Writes.OptionWrites(Writes.arrayWrites[TypoPolygon](using implicitly, TypoPolygon.writes)).writes(o.polygones),
      "textes" -> Writes.OptionWrites(Writes.arrayWrites[String](using implicitly, Writes.StringWrites)).writes(o.textes),
      "timees" -> Writes.OptionWrites(Writes.arrayWrites[TypoLocalTime](using implicitly, TypoLocalTime.writes)).writes(o.timees),
      "timestampes" -> Writes.OptionWrites(Writes.arrayWrites[TypoLocalDateTime](using implicitly, TypoLocalDateTime.writes)).writes(o.timestampes),
      "timestampzes" -> Writes.OptionWrites(Writes.arrayWrites[TypoInstant](using implicitly, TypoInstant.writes)).writes(o.timestampzes),
      "timezes" -> Writes.OptionWrites(Writes.arrayWrites[TypoOffsetTime](using implicitly, TypoOffsetTime.writes)).writes(o.timezes),
      "uuides" -> Writes.OptionWrites(Writes.arrayWrites[TypoUUID](using implicitly, TypoUUID.writes)).writes(o.uuides),
      "varchares" -> Writes.OptionWrites(Writes.arrayWrites[String](using implicitly, Writes.StringWrites)).writes(o.varchares),
      "xmles" -> Writes.OptionWrites(Writes.arrayWrites[TypoXml](using implicitly, TypoXml.writes)).writes(o.xmles)
    ))
  )
}
