/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtestnull

import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXml
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgtestnullRow(
  box: Option[TypoBox],
  circle: Option[TypoCircle],
  line: Option[TypoLine],
  lseg: Option[TypoLineSegment],
  path: Option[TypoPath],
  point: Option[TypoPoint],
  polygon: Option[TypoPolygon],
  interval: Option[TypoInterval],
  money: Option[TypoMoney],
  xml: Option[TypoXml],
  json: Option[TypoJson],
  jsonb: Option[TypoJsonb],
  hstore: Option[TypoHStore],
  inet: Option[TypoInet],
  timestamp: Option[TypoLocalDateTime],
  timestampz: Option[TypoInstant],
  time: Option[TypoLocalTime],
  timez: Option[TypoOffsetTime],
  date: Option[TypoLocalDate],
  uuid: Option[TypoUUID],
  numeric: Option[BigDecimal],
  vector: Option[TypoVector],
  boxes: Option[Array[TypoBox]],
  circlees: Option[Array[TypoCircle]],
  linees: Option[Array[TypoLine]],
  lseges: Option[Array[TypoLineSegment]],
  pathes: Option[Array[TypoPath]],
  pointes: Option[Array[TypoPoint]],
  polygones: Option[Array[TypoPolygon]],
  intervales: Option[Array[TypoInterval]],
  moneyes: Option[Array[TypoMoney]],
  xmles: Option[Array[TypoXml]],
  jsones: Option[Array[TypoJson]],
  jsonbes: Option[Array[TypoJsonb]],
  inets: Option[Array[TypoInet]],
  timestamps: Option[Array[TypoLocalDateTime]],
  timestampzs: Option[Array[TypoInstant]],
  times: Option[Array[TypoLocalTime]],
  timezs: Option[Array[TypoOffsetTime]],
  dates: Option[Array[TypoLocalDate]],
  uuids: Option[Array[TypoUUID]],
  numerics: Option[Array[BigDecimal]]
)

object PgtestnullRow {
  implicit lazy val reads: Reads[PgtestnullRow] = Reads[PgtestnullRow](json => JsResult.fromTry(
      Try(
        PgtestnullRow(
          box = json.\("box").toOption.map(_.as(TypoBox.reads)),
          circle = json.\("circle").toOption.map(_.as(TypoCircle.reads)),
          line = json.\("line").toOption.map(_.as(TypoLine.reads)),
          lseg = json.\("lseg").toOption.map(_.as(TypoLineSegment.reads)),
          path = json.\("path").toOption.map(_.as(TypoPath.reads)),
          point = json.\("point").toOption.map(_.as(TypoPoint.reads)),
          polygon = json.\("polygon").toOption.map(_.as(TypoPolygon.reads)),
          interval = json.\("interval").toOption.map(_.as(TypoInterval.reads)),
          money = json.\("money").toOption.map(_.as(TypoMoney.reads)),
          xml = json.\("xml").toOption.map(_.as(TypoXml.reads)),
          json = json.\("json").toOption.map(_.as(TypoJson.reads)),
          jsonb = json.\("jsonb").toOption.map(_.as(TypoJsonb.reads)),
          hstore = json.\("hstore").toOption.map(_.as(TypoHStore.reads)),
          inet = json.\("inet").toOption.map(_.as(TypoInet.reads)),
          timestamp = json.\("timestamp").toOption.map(_.as(TypoLocalDateTime.reads)),
          timestampz = json.\("timestampz").toOption.map(_.as(TypoInstant.reads)),
          time = json.\("time").toOption.map(_.as(TypoLocalTime.reads)),
          timez = json.\("timez").toOption.map(_.as(TypoOffsetTime.reads)),
          date = json.\("date").toOption.map(_.as(TypoLocalDate.reads)),
          uuid = json.\("uuid").toOption.map(_.as(TypoUUID.reads)),
          numeric = json.\("numeric").toOption.map(_.as(Reads.bigDecReads)),
          vector = json.\("vector").toOption.map(_.as(TypoVector.reads)),
          boxes = json.\("boxes").toOption.map(_.as(Reads.ArrayReads[TypoBox](TypoBox.reads, implicitly))),
          circlees = json.\("circlees").toOption.map(_.as(Reads.ArrayReads[TypoCircle](TypoCircle.reads, implicitly))),
          linees = json.\("linees").toOption.map(_.as(Reads.ArrayReads[TypoLine](TypoLine.reads, implicitly))),
          lseges = json.\("lseges").toOption.map(_.as(Reads.ArrayReads[TypoLineSegment](TypoLineSegment.reads, implicitly))),
          pathes = json.\("pathes").toOption.map(_.as(Reads.ArrayReads[TypoPath](TypoPath.reads, implicitly))),
          pointes = json.\("pointes").toOption.map(_.as(Reads.ArrayReads[TypoPoint](TypoPoint.reads, implicitly))),
          polygones = json.\("polygones").toOption.map(_.as(Reads.ArrayReads[TypoPolygon](TypoPolygon.reads, implicitly))),
          intervales = json.\("intervales").toOption.map(_.as(Reads.ArrayReads[TypoInterval](TypoInterval.reads, implicitly))),
          moneyes = json.\("moneyes").toOption.map(_.as(Reads.ArrayReads[TypoMoney](TypoMoney.reads, implicitly))),
          xmles = json.\("xmles").toOption.map(_.as(Reads.ArrayReads[TypoXml](TypoXml.reads, implicitly))),
          jsones = json.\("jsones").toOption.map(_.as(Reads.ArrayReads[TypoJson](TypoJson.reads, implicitly))),
          jsonbes = json.\("jsonbes").toOption.map(_.as(Reads.ArrayReads[TypoJsonb](TypoJsonb.reads, implicitly))),
          inets = json.\("inets").toOption.map(_.as(Reads.ArrayReads[TypoInet](TypoInet.reads, implicitly))),
          timestamps = json.\("timestamps").toOption.map(_.as(Reads.ArrayReads[TypoLocalDateTime](TypoLocalDateTime.reads, implicitly))),
          timestampzs = json.\("timestampzs").toOption.map(_.as(Reads.ArrayReads[TypoInstant](TypoInstant.reads, implicitly))),
          times = json.\("times").toOption.map(_.as(Reads.ArrayReads[TypoLocalTime](TypoLocalTime.reads, implicitly))),
          timezs = json.\("timezs").toOption.map(_.as(Reads.ArrayReads[TypoOffsetTime](TypoOffsetTime.reads, implicitly))),
          dates = json.\("dates").toOption.map(_.as(Reads.ArrayReads[TypoLocalDate](TypoLocalDate.reads, implicitly))),
          uuids = json.\("uuids").toOption.map(_.as(Reads.ArrayReads[TypoUUID](TypoUUID.reads, implicitly))),
          numerics = json.\("numerics").toOption.map(_.as(Reads.ArrayReads[BigDecimal](Reads.bigDecReads, implicitly)))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgtestnullRow] = RowParser[PgtestnullRow] { row =>
    Success(
      PgtestnullRow(
        box = row(idx + 0)(Column.columnToOption(TypoBox.column)),
        circle = row(idx + 1)(Column.columnToOption(TypoCircle.column)),
        line = row(idx + 2)(Column.columnToOption(TypoLine.column)),
        lseg = row(idx + 3)(Column.columnToOption(TypoLineSegment.column)),
        path = row(idx + 4)(Column.columnToOption(TypoPath.column)),
        point = row(idx + 5)(Column.columnToOption(TypoPoint.column)),
        polygon = row(idx + 6)(Column.columnToOption(TypoPolygon.column)),
        interval = row(idx + 7)(Column.columnToOption(TypoInterval.column)),
        money = row(idx + 8)(Column.columnToOption(TypoMoney.column)),
        xml = row(idx + 9)(Column.columnToOption(TypoXml.column)),
        json = row(idx + 10)(Column.columnToOption(TypoJson.column)),
        jsonb = row(idx + 11)(Column.columnToOption(TypoJsonb.column)),
        hstore = row(idx + 12)(Column.columnToOption(TypoHStore.column)),
        inet = row(idx + 13)(Column.columnToOption(TypoInet.column)),
        timestamp = row(idx + 14)(Column.columnToOption(TypoLocalDateTime.column)),
        timestampz = row(idx + 15)(Column.columnToOption(TypoInstant.column)),
        time = row(idx + 16)(Column.columnToOption(TypoLocalTime.column)),
        timez = row(idx + 17)(Column.columnToOption(TypoOffsetTime.column)),
        date = row(idx + 18)(Column.columnToOption(TypoLocalDate.column)),
        uuid = row(idx + 19)(Column.columnToOption(TypoUUID.column)),
        numeric = row(idx + 20)(Column.columnToOption(Column.columnToScalaBigDecimal)),
        vector = row(idx + 21)(Column.columnToOption(TypoVector.column)),
        boxes = row(idx + 22)(Column.columnToOption(TypoBox.arrayColumn)),
        circlees = row(idx + 23)(Column.columnToOption(TypoCircle.arrayColumn)),
        linees = row(idx + 24)(Column.columnToOption(TypoLine.arrayColumn)),
        lseges = row(idx + 25)(Column.columnToOption(TypoLineSegment.arrayColumn)),
        pathes = row(idx + 26)(Column.columnToOption(TypoPath.arrayColumn)),
        pointes = row(idx + 27)(Column.columnToOption(TypoPoint.arrayColumn)),
        polygones = row(idx + 28)(Column.columnToOption(TypoPolygon.arrayColumn)),
        intervales = row(idx + 29)(Column.columnToOption(TypoInterval.arrayColumn)),
        moneyes = row(idx + 30)(Column.columnToOption(TypoMoney.arrayColumn)),
        xmles = row(idx + 31)(Column.columnToOption(TypoXml.arrayColumn)),
        jsones = row(idx + 32)(Column.columnToOption(TypoJson.arrayColumn)),
        jsonbes = row(idx + 33)(Column.columnToOption(TypoJsonb.arrayColumn)),
        inets = row(idx + 34)(Column.columnToOption(TypoInet.arrayColumn)),
        timestamps = row(idx + 35)(Column.columnToOption(TypoLocalDateTime.arrayColumn)),
        timestampzs = row(idx + 36)(Column.columnToOption(TypoInstant.arrayColumn)),
        times = row(idx + 37)(Column.columnToOption(TypoLocalTime.arrayColumn)),
        timezs = row(idx + 38)(Column.columnToOption(TypoOffsetTime.arrayColumn)),
        dates = row(idx + 39)(Column.columnToOption(TypoLocalDate.arrayColumn)),
        uuids = row(idx + 40)(Column.columnToOption(TypoUUID.arrayColumn)),
        numerics = row(idx + 41)(Column.columnToOption(Column.columnToArray[BigDecimal](Column.columnToScalaBigDecimal, implicitly)))
      )
    )
  }
  implicit lazy val writes: OWrites[PgtestnullRow] = OWrites[PgtestnullRow](o =>
    new JsObject(ListMap[String, JsValue](
      "box" -> Writes.OptionWrites(TypoBox.writes).writes(o.box),
      "circle" -> Writes.OptionWrites(TypoCircle.writes).writes(o.circle),
      "line" -> Writes.OptionWrites(TypoLine.writes).writes(o.line),
      "lseg" -> Writes.OptionWrites(TypoLineSegment.writes).writes(o.lseg),
      "path" -> Writes.OptionWrites(TypoPath.writes).writes(o.path),
      "point" -> Writes.OptionWrites(TypoPoint.writes).writes(o.point),
      "polygon" -> Writes.OptionWrites(TypoPolygon.writes).writes(o.polygon),
      "interval" -> Writes.OptionWrites(TypoInterval.writes).writes(o.interval),
      "money" -> Writes.OptionWrites(TypoMoney.writes).writes(o.money),
      "xml" -> Writes.OptionWrites(TypoXml.writes).writes(o.xml),
      "json" -> Writes.OptionWrites(TypoJson.writes).writes(o.json),
      "jsonb" -> Writes.OptionWrites(TypoJsonb.writes).writes(o.jsonb),
      "hstore" -> Writes.OptionWrites(TypoHStore.writes).writes(o.hstore),
      "inet" -> Writes.OptionWrites(TypoInet.writes).writes(o.inet),
      "timestamp" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.timestamp),
      "timestampz" -> Writes.OptionWrites(TypoInstant.writes).writes(o.timestampz),
      "time" -> Writes.OptionWrites(TypoLocalTime.writes).writes(o.time),
      "timez" -> Writes.OptionWrites(TypoOffsetTime.writes).writes(o.timez),
      "date" -> Writes.OptionWrites(TypoLocalDate.writes).writes(o.date),
      "uuid" -> Writes.OptionWrites(TypoUUID.writes).writes(o.uuid),
      "numeric" -> Writes.OptionWrites(Writes.BigDecimalWrites).writes(o.numeric),
      "vector" -> Writes.OptionWrites(TypoVector.writes).writes(o.vector),
      "boxes" -> Writes.OptionWrites(Writes.arrayWrites[TypoBox](implicitly, TypoBox.writes)).writes(o.boxes),
      "circlees" -> Writes.OptionWrites(Writes.arrayWrites[TypoCircle](implicitly, TypoCircle.writes)).writes(o.circlees),
      "linees" -> Writes.OptionWrites(Writes.arrayWrites[TypoLine](implicitly, TypoLine.writes)).writes(o.linees),
      "lseges" -> Writes.OptionWrites(Writes.arrayWrites[TypoLineSegment](implicitly, TypoLineSegment.writes)).writes(o.lseges),
      "pathes" -> Writes.OptionWrites(Writes.arrayWrites[TypoPath](implicitly, TypoPath.writes)).writes(o.pathes),
      "pointes" -> Writes.OptionWrites(Writes.arrayWrites[TypoPoint](implicitly, TypoPoint.writes)).writes(o.pointes),
      "polygones" -> Writes.OptionWrites(Writes.arrayWrites[TypoPolygon](implicitly, TypoPolygon.writes)).writes(o.polygones),
      "intervales" -> Writes.OptionWrites(Writes.arrayWrites[TypoInterval](implicitly, TypoInterval.writes)).writes(o.intervales),
      "moneyes" -> Writes.OptionWrites(Writes.arrayWrites[TypoMoney](implicitly, TypoMoney.writes)).writes(o.moneyes),
      "xmles" -> Writes.OptionWrites(Writes.arrayWrites[TypoXml](implicitly, TypoXml.writes)).writes(o.xmles),
      "jsones" -> Writes.OptionWrites(Writes.arrayWrites[TypoJson](implicitly, TypoJson.writes)).writes(o.jsones),
      "jsonbes" -> Writes.OptionWrites(Writes.arrayWrites[TypoJsonb](implicitly, TypoJsonb.writes)).writes(o.jsonbes),
      "inets" -> Writes.OptionWrites(Writes.arrayWrites[TypoInet](implicitly, TypoInet.writes)).writes(o.inets),
      "timestamps" -> Writes.OptionWrites(Writes.arrayWrites[TypoLocalDateTime](implicitly, TypoLocalDateTime.writes)).writes(o.timestamps),
      "timestampzs" -> Writes.OptionWrites(Writes.arrayWrites[TypoInstant](implicitly, TypoInstant.writes)).writes(o.timestampzs),
      "times" -> Writes.OptionWrites(Writes.arrayWrites[TypoLocalTime](implicitly, TypoLocalTime.writes)).writes(o.times),
      "timezs" -> Writes.OptionWrites(Writes.arrayWrites[TypoOffsetTime](implicitly, TypoOffsetTime.writes)).writes(o.timezs),
      "dates" -> Writes.OptionWrites(Writes.arrayWrites[TypoLocalDate](implicitly, TypoLocalDate.writes)).writes(o.dates),
      "uuids" -> Writes.OptionWrites(Writes.arrayWrites[TypoUUID](implicitly, TypoUUID.writes)).writes(o.uuids),
      "numerics" -> Writes.OptionWrites(Writes.arrayWrites[BigDecimal](implicitly, Writes.BigDecimalWrites)).writes(o.numerics)
    ))
  )
}
