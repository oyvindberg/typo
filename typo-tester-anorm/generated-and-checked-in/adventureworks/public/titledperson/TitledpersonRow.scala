/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package titledperson

import adventureworks.public.title.TitleId
import adventureworks.public.title_domain.TitleDomainId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: public.titledperson */
case class TitledpersonRow(
  /** Points to [[title_domain.TitleDomainRow.code]] */
  titleShort: TitleDomainId,
  /** Points to [[title.TitleRow.code]] */
  title: TitleId,
  name: String
)

object TitledpersonRow {
  implicit lazy val reads: Reads[TitledpersonRow] = Reads[TitledpersonRow](json => JsResult.fromTry(
      Try(
        TitledpersonRow(
          titleShort = json.\("title_short").as(TitleDomainId.reads),
          title = json.\("title").as(TitleId.reads),
          name = json.\("name").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TitledpersonRow] = RowParser[TitledpersonRow] { row =>
    Success(
      TitledpersonRow(
        titleShort = row(idx + 0)(TitleDomainId.column),
        title = row(idx + 1)(TitleId.column),
        name = row(idx + 2)(Column.columnToString)
      )
    )
  }
  implicit lazy val text: Text[TitledpersonRow] = Text.instance[TitledpersonRow]{ (row, sb) =>
    TitleDomainId.text.unsafeEncode(row.titleShort, sb)
    sb.append(Text.DELIMETER)
    TitleId.text.unsafeEncode(row.title, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
  }
  implicit lazy val writes: OWrites[TitledpersonRow] = OWrites[TitledpersonRow](o =>
    new JsObject(ListMap[String, JsValue](
      "title_short" -> TitleDomainId.writes.writes(o.titleShort),
      "title" -> TitleId.writes.writes(o.title),
      "name" -> Writes.StringWrites.writes(o.name)
    ))
  )
}
