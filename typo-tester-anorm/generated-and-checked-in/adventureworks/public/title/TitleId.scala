/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package title

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import java.sql.Types
import play.api.libs.json.JsValue
import play.api.libs.json.Reads
import play.api.libs.json.Writes

/** Type for the primary key of table `public.title`. It has some known values: 
  *  - dr
  *  - mr
  *  - ms
  *  - phd
  */
sealed abstract class TitleId(val value: String)

object TitleId {
  def apply(underlying: String): TitleId =
    ByName.getOrElse(underlying, Unknown(underlying))
  case object dr extends TitleId("dr")
  case object mr extends TitleId("mr")
  case object ms extends TitleId("ms")
  case object phd extends TitleId("phd")
  case class Unknown(override val value: String) extends TitleId(value)
  val All: List[TitleId] = List(dr, mr, ms, phd)
  val ByName: Map[String, TitleId] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayColumn: Column[Array[TitleId]] = Column.columnToArray[String](Column.columnToString, implicitly).map(_.map(TitleId.apply))
  implicit lazy val arrayToStatement: ToStatement[Array[TitleId]] = ToStatement.arrayToParameter(ParameterMetaData.StringParameterMetaData).contramap(_.map(_.value))
  implicit lazy val column: Column[TitleId] = Column.columnToString.map(TitleId.apply)
  implicit lazy val ordering: Ordering[TitleId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[TitleId] = new ParameterMetaData[TitleId] {
    override def sqlType: String = "text"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[TitleId] = Reads[TitleId]{(value: JsValue) => value.validate(Reads.StringReads).map(TitleId.apply)}
  implicit lazy val text: Text[TitleId] = new Text[TitleId] {
    override def unsafeEncode(v: TitleId, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: TitleId, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[TitleId] = ToStatement.stringToStatement.contramap(_.value)
  implicit lazy val writes: Writes[TitleId] = Writes[TitleId](value => Writes.StringWrites.writes(value.value))
}
