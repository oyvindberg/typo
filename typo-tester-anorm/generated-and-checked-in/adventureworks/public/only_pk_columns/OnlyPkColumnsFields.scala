/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package only_pk_columns

import typo.dsl.Path
import typo.dsl.Required
import typo.dsl.SqlExpr
import typo.dsl.SqlExpr.CompositeIn
import typo.dsl.SqlExpr.CompositeIn.TuplePart
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

trait OnlyPkColumnsFields {
  def keyColumn1: IdField[String, OnlyPkColumnsRow]
  def keyColumn2: IdField[Int, OnlyPkColumnsRow]
  def compositeIdIs(compositeId: OnlyPkColumnsId): SqlExpr[Boolean, Required] =
    keyColumn1.isEqual(compositeId.keyColumn1).and(keyColumn2.isEqual(compositeId.keyColumn2))
  def compositeIdIn(compositeIds: Array[OnlyPkColumnsId]): SqlExpr[Boolean, Required] =
    new CompositeIn(compositeIds)(TuplePart(keyColumn1)(_.keyColumn1), TuplePart(keyColumn2)(_.keyColumn2))
  
}

object OnlyPkColumnsFields {
  lazy val structure: Relation[OnlyPkColumnsFields, OnlyPkColumnsRow] =
    new Impl(Nil)
    
  private final class Impl(val _path: List[Path])
    extends Relation[OnlyPkColumnsFields, OnlyPkColumnsRow] {
  
    override lazy val fields: OnlyPkColumnsFields = new OnlyPkColumnsFields {
      override def keyColumn1 = IdField[String, OnlyPkColumnsRow](_path, "key_column_1", None, None, x => x.keyColumn1, (row, value) => row.copy(keyColumn1 = value))
      override def keyColumn2 = IdField[Int, OnlyPkColumnsRow](_path, "key_column_2", None, Some("int4"), x => x.keyColumn2, (row, value) => row.copy(keyColumn2 = value))
    }
  
    override lazy val columns: List[FieldLikeNoHkt[?, OnlyPkColumnsRow]] =
      List[FieldLikeNoHkt[?, OnlyPkColumnsRow]](fields.keyColumn1, fields.keyColumn2)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
