/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package users

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoUnknownCitext
import anorm.BatchSql
import anorm.NamedParameter
import anorm.ParameterMetaData
import anorm.ParameterValue
import anorm.RowParser
import anorm.SQL
import anorm.SimpleSql
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import scala.annotation.nowarn
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class UsersRepoImpl extends UsersRepo {
  override def delete: DeleteBuilder[UsersFields, UsersRow] = {
    DeleteBuilder("public.users", UsersFields.structure)
  }
  override def deleteById(userId: UsersId)(implicit c: Connection): Boolean = {
    SQL"""delete from public.users where "user_id" = ${ParameterValue(userId, null, UsersId.toStatement)}""".executeUpdate() > 0
  }
  override def deleteByIds(userIds: Array[UsersId])(implicit c: Connection): Int = {
    SQL"""delete
          from public.users
          where "user_id" = ANY(${userIds})
       """.executeUpdate()
    
  }
  override def insert(unsaved: UsersRow)(implicit c: Connection): UsersRow = {
    SQL"""insert into public.users("user_id", "name", "last_name", "email", "password", "created_at", "verified_on")
          values (${ParameterValue(unsaved.userId, null, UsersId.toStatement)}::uuid, ${ParameterValue(unsaved.name, null, ToStatement.stringToStatement)}, ${ParameterValue(unsaved.lastName, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))}, ${ParameterValue(unsaved.email, null, TypoUnknownCitext.toStatement)}::citext, ${ParameterValue(unsaved.password, null, ToStatement.stringToStatement)}, ${ParameterValue(unsaved.createdAt, null, TypoInstant.toStatement)}::timestamptz, ${ParameterValue(unsaved.verifiedOn, null, ToStatement.optionToStatement(TypoInstant.toStatement, TypoInstant.parameterMetadata))}::timestamptz)
          returning "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
       """
      .executeInsert(UsersRow.rowParser(1).single)
    
  }
  override def insert(unsaved: UsersRowUnsaved)(implicit c: Connection): UsersRow = {
    val namedParameters = List(
      Some((NamedParameter("user_id", ParameterValue(unsaved.userId, null, UsersId.toStatement)), "::uuid")),
      Some((NamedParameter("name", ParameterValue(unsaved.name, null, ToStatement.stringToStatement)), "")),
      Some((NamedParameter("last_name", ParameterValue(unsaved.lastName, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))), "")),
      Some((NamedParameter("email", ParameterValue(unsaved.email, null, TypoUnknownCitext.toStatement)), "::citext")),
      Some((NamedParameter("password", ParameterValue(unsaved.password, null, ToStatement.stringToStatement)), "")),
      Some((NamedParameter("verified_on", ParameterValue(unsaved.verifiedOn, null, ToStatement.optionToStatement(TypoInstant.toStatement, TypoInstant.parameterMetadata))), "::timestamptz")),
      unsaved.createdAt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("created_at", ParameterValue(value, null, TypoInstant.toStatement)), "::timestamptz"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into public.users default values
            returning "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
         """
        .executeInsert(UsersRow.rowParser(1).single)
    } else {
      val q = s"""insert into public.users(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
               """
      SimpleSql(SQL(q), namedParameters.map { case (np, _) => np.tupled }.toMap, RowParser.successful)
        .executeInsert(UsersRow.rowParser(1).single)
    }
    
  }
  override def insertStreaming(unsaved: Iterator[UsersRow], batchSize: Int = 10000)(implicit c: Connection): Long = {
    streamingInsert(s"""COPY public.users("user_id", "name", "last_name", "email", "password", "created_at", "verified_on") FROM STDIN""", batchSize, unsaved)(UsersRow.text, c)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Iterator[UsersRowUnsaved], batchSize: Int = 10000)(implicit c: Connection): Long = {
    streamingInsert(s"""COPY public.users("user_id", "name", "last_name", "email", "password", "verified_on", "created_at") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""", batchSize, unsaved)(UsersRowUnsaved.text, c)
  }
  override def select: SelectBuilder[UsersFields, UsersRow] = {
    SelectBuilderSql("public.users", UsersFields.structure, UsersRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[UsersRow] = {
    SQL"""select "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
          from public.users
       """.as(UsersRow.rowParser(1).*)
  }
  override def selectById(userId: UsersId)(implicit c: Connection): Option[UsersRow] = {
    SQL"""select "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
          from public.users
          where "user_id" = ${ParameterValue(userId, null, UsersId.toStatement)}
       """.as(UsersRow.rowParser(1).singleOpt)
  }
  override def selectByIds(userIds: Array[UsersId])(implicit c: Connection): List[UsersRow] = {
    SQL"""select "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
          from public.users
          where "user_id" = ANY(${userIds})
       """.as(UsersRow.rowParser(1).*)
    
  }
  override def selectByIdsTracked(userIds: Array[UsersId])(implicit c: Connection): Map[UsersId, UsersRow] = {
    val byId = selectByIds(userIds).view.map(x => (x.userId, x)).toMap
    userIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
  }
  override def selectByUniqueEmail(email: TypoUnknownCitext)(implicit c: Connection): Option[UsersRow] = {
    SQL"""select "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
          from public.users
          where "email" = ${ParameterValue(email, null, TypoUnknownCitext.toStatement)}
       """.as(UsersRow.rowParser(1).singleOpt)
    
  }
  override def update: UpdateBuilder[UsersFields, UsersRow] = {
    UpdateBuilder("public.users", UsersFields.structure, UsersRow.rowParser)
  }
  override def update(row: UsersRow)(implicit c: Connection): Boolean = {
    val userId = row.userId
    SQL"""update public.users
          set "name" = ${ParameterValue(row.name, null, ToStatement.stringToStatement)},
              "last_name" = ${ParameterValue(row.lastName, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))},
              "email" = ${ParameterValue(row.email, null, TypoUnknownCitext.toStatement)}::citext,
              "password" = ${ParameterValue(row.password, null, ToStatement.stringToStatement)},
              "created_at" = ${ParameterValue(row.createdAt, null, TypoInstant.toStatement)}::timestamptz,
              "verified_on" = ${ParameterValue(row.verifiedOn, null, ToStatement.optionToStatement(TypoInstant.toStatement, TypoInstant.parameterMetadata))}::timestamptz
          where "user_id" = ${ParameterValue(userId, null, UsersId.toStatement)}
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: UsersRow)(implicit c: Connection): UsersRow = {
    SQL"""insert into public.users("user_id", "name", "last_name", "email", "password", "created_at", "verified_on")
          values (
            ${ParameterValue(unsaved.userId, null, UsersId.toStatement)}::uuid,
            ${ParameterValue(unsaved.name, null, ToStatement.stringToStatement)},
            ${ParameterValue(unsaved.lastName, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))},
            ${ParameterValue(unsaved.email, null, TypoUnknownCitext.toStatement)}::citext,
            ${ParameterValue(unsaved.password, null, ToStatement.stringToStatement)},
            ${ParameterValue(unsaved.createdAt, null, TypoInstant.toStatement)}::timestamptz,
            ${ParameterValue(unsaved.verifiedOn, null, ToStatement.optionToStatement(TypoInstant.toStatement, TypoInstant.parameterMetadata))}::timestamptz
          )
          on conflict ("user_id")
          do update set
            "name" = EXCLUDED."name",
            "last_name" = EXCLUDED."last_name",
            "email" = EXCLUDED."email",
            "password" = EXCLUDED."password",
            "created_at" = EXCLUDED."created_at",
            "verified_on" = EXCLUDED."verified_on"
          returning "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
       """
      .executeInsert(UsersRow.rowParser(1).single)
    
  }
  override def upsertBatch(unsaved: Iterable[UsersRow])(implicit c: Connection): List[UsersRow] = {
    def toNamedParameter(row: UsersRow): List[NamedParameter] = List(
      NamedParameter("user_id", ParameterValue(row.userId, null, UsersId.toStatement)),
      NamedParameter("name", ParameterValue(row.name, null, ToStatement.stringToStatement)),
      NamedParameter("last_name", ParameterValue(row.lastName, null, ToStatement.optionToStatement(ToStatement.stringToStatement, ParameterMetaData.StringParameterMetaData))),
      NamedParameter("email", ParameterValue(row.email, null, TypoUnknownCitext.toStatement)),
      NamedParameter("password", ParameterValue(row.password, null, ToStatement.stringToStatement)),
      NamedParameter("created_at", ParameterValue(row.createdAt, null, TypoInstant.toStatement)),
      NamedParameter("verified_on", ParameterValue(row.verifiedOn, null, ToStatement.optionToStatement(TypoInstant.toStatement, TypoInstant.parameterMetadata)))
    )
    unsaved.toList match {
      case Nil => Nil
      case head :: rest =>
        new anorm.adventureworks.ExecuteReturningSyntax.Ops(
          BatchSql(
            s"""insert into public.users("user_id", "name", "last_name", "email", "password", "created_at", "verified_on")
                values ({user_id}::uuid, {name}, {last_name}, {email}::citext, {password}, {created_at}::timestamptz, {verified_on}::timestamptz)
                on conflict ("user_id")
                do update set
                  "name" = EXCLUDED."name",
                  "last_name" = EXCLUDED."last_name",
                  "email" = EXCLUDED."email",
                  "password" = EXCLUDED."password",
                  "created_at" = EXCLUDED."created_at",
                  "verified_on" = EXCLUDED."verified_on"
                returning "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
             """,
            toNamedParameter(head),
            rest.map(toNamedParameter)*
          )
        ).executeReturning(UsersRow.rowParser(1).*)
    }
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Iterator[UsersRow], batchSize: Int = 10000)(implicit c: Connection): Int = {
    SQL"create temporary table users_TEMP (like public.users) on commit drop".execute(): @nowarn
    streamingInsert(s"""copy users_TEMP("user_id", "name", "last_name", "email", "password", "created_at", "verified_on") from stdin""", batchSize, unsaved)(UsersRow.text, c): @nowarn
    SQL"""insert into public.users("user_id", "name", "last_name", "email", "password", "created_at", "verified_on")
          select * from users_TEMP
          on conflict ("user_id")
          do update set
            "name" = EXCLUDED."name",
            "last_name" = EXCLUDED."last_name",
            "email" = EXCLUDED."email",
            "password" = EXCLUDED."password",
            "created_at" = EXCLUDED."created_at",
            "verified_on" = EXCLUDED."verified_on"
          ;
          drop table users_TEMP;""".executeUpdate()
  }
}
