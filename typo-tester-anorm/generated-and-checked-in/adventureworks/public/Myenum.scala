/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public

import adventureworks.Text
import anorm.Column
import anorm.ParameterMetaData
import anorm.SqlMappingError
import anorm.ToStatement
import play.api.libs.json.JsError
import play.api.libs.json.JsSuccess
import play.api.libs.json.JsValue
import play.api.libs.json.Reads
import play.api.libs.json.Writes

/** Enum `public.myenum`
  *  - a
  *  - b
  *  - c
  */
sealed abstract class Myenum(val value: String)

object Myenum {
  def apply(str: String): Either[String, Myenum] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): Myenum =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object a extends Myenum("a")
  case object b extends Myenum("b")
  case object c extends Myenum("c")
  val All: List[Myenum] = List(a, b, c)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, Myenum] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayColumn: Column[Array[Myenum]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[Myenum]] = ToStatement.arrayToParameter(ParameterMetaData.StringParameterMetaData).contramap(_.map(_.value))
  implicit lazy val column: Column[Myenum] = Column.columnToString.mapResult(str => Myenum(str).left.map(SqlMappingError.apply))
  implicit lazy val ordering: Ordering[Myenum] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[Myenum] = new ParameterMetaData[Myenum] {
    override def sqlType: String = ParameterMetaData.StringParameterMetaData.sqlType
    override def jdbcType: Int = ParameterMetaData.StringParameterMetaData.jdbcType
  }
  implicit lazy val reads: Reads[Myenum] = Reads[Myenum]{(value: JsValue) => value.validate(Reads.StringReads).flatMap(str => Myenum(str).fold(JsError.apply, JsSuccess(_)))}
  implicit lazy val text: Text[Myenum] = new Text[Myenum] {
    override def unsafeEncode(v: Myenum, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: Myenum, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[Myenum] = ToStatement.stringToStatement.contramap(_.value)
  implicit lazy val writes: Writes[Myenum] = Writes[Myenum](value => Writes.StringWrites.writes(value.value))
}
