/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_replication_slots

import adventureworks.customtypes.TypoInstant
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class PgStatReplicationSlotsViewRow(
  slotName: /* nullability unknown */ Option[String],
  spillTxns: /* nullability unknown */ Option[Long],
  spillCount: /* nullability unknown */ Option[Long],
  spillBytes: /* nullability unknown */ Option[Long],
  streamTxns: /* nullability unknown */ Option[Long],
  streamCount: /* nullability unknown */ Option[Long],
  streamBytes: /* nullability unknown */ Option[Long],
  totalTxns: /* nullability unknown */ Option[Long],
  totalBytes: /* nullability unknown */ Option[Long],
  statsReset: /* nullability unknown */ Option[TypoInstant]
)

object PgStatReplicationSlotsViewRow {
  implicit lazy val reads: Reads[PgStatReplicationSlotsViewRow] = Reads[PgStatReplicationSlotsViewRow](json => JsResult.fromTry(
      Try(
        PgStatReplicationSlotsViewRow(
          slotName = json.\("slot_name").toOption.map(_.as(Reads.StringReads)),
          spillTxns = json.\("spill_txns").toOption.map(_.as(Reads.LongReads)),
          spillCount = json.\("spill_count").toOption.map(_.as(Reads.LongReads)),
          spillBytes = json.\("spill_bytes").toOption.map(_.as(Reads.LongReads)),
          streamTxns = json.\("stream_txns").toOption.map(_.as(Reads.LongReads)),
          streamCount = json.\("stream_count").toOption.map(_.as(Reads.LongReads)),
          streamBytes = json.\("stream_bytes").toOption.map(_.as(Reads.LongReads)),
          totalTxns = json.\("total_txns").toOption.map(_.as(Reads.LongReads)),
          totalBytes = json.\("total_bytes").toOption.map(_.as(Reads.LongReads)),
          statsReset = json.\("stats_reset").toOption.map(_.as(TypoInstant.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgStatReplicationSlotsViewRow] = RowParser[PgStatReplicationSlotsViewRow] { row =>
    Success(
      PgStatReplicationSlotsViewRow(
        slotName = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        spillTxns = row(idx + 1)(Column.columnToOption(Column.columnToLong)),
        spillCount = row(idx + 2)(Column.columnToOption(Column.columnToLong)),
        spillBytes = row(idx + 3)(Column.columnToOption(Column.columnToLong)),
        streamTxns = row(idx + 4)(Column.columnToOption(Column.columnToLong)),
        streamCount = row(idx + 5)(Column.columnToOption(Column.columnToLong)),
        streamBytes = row(idx + 6)(Column.columnToOption(Column.columnToLong)),
        totalTxns = row(idx + 7)(Column.columnToOption(Column.columnToLong)),
        totalBytes = row(idx + 8)(Column.columnToOption(Column.columnToLong)),
        statsReset = row(idx + 9)(Column.columnToOption(TypoInstant.column))
      )
    )
  }
  implicit lazy val writes: OWrites[PgStatReplicationSlotsViewRow] = OWrites[PgStatReplicationSlotsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "slot_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.slotName),
      "spill_txns" -> Writes.OptionWrites(Writes.LongWrites).writes(o.spillTxns),
      "spill_count" -> Writes.OptionWrites(Writes.LongWrites).writes(o.spillCount),
      "spill_bytes" -> Writes.OptionWrites(Writes.LongWrites).writes(o.spillBytes),
      "stream_txns" -> Writes.OptionWrites(Writes.LongWrites).writes(o.streamTxns),
      "stream_count" -> Writes.OptionWrites(Writes.LongWrites).writes(o.streamCount),
      "stream_bytes" -> Writes.OptionWrites(Writes.LongWrites).writes(o.streamBytes),
      "total_txns" -> Writes.OptionWrites(Writes.LongWrites).writes(o.totalTxns),
      "total_bytes" -> Writes.OptionWrites(Writes.LongWrites).writes(o.totalBytes),
      "stats_reset" -> Writes.OptionWrites(TypoInstant.writes).writes(o.statsReset)
    ))
  )
}
