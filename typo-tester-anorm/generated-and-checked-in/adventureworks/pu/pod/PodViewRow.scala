/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package pod

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.production.product.ProductId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** View: pu.pod */
case class PodViewRow(
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.purchaseorderdetailid]] */
  id: Int,
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.purchaseorderid]] */
  purchaseorderid: PurchaseorderheaderId,
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.purchaseorderdetailid]] */
  purchaseorderdetailid: Int,
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.duedate]] */
  duedate: TypoLocalDateTime,
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.orderqty]] */
  orderqty: TypoShort,
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.productid]] */
  productid: ProductId,
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.unitprice]] */
  unitprice: BigDecimal,
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.receivedqty]] */
  receivedqty: BigDecimal,
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.rejectedqty]] */
  rejectedqty: BigDecimal,
  /** Points to [[purchasing.purchaseorderdetail.PurchaseorderdetailRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object PodViewRow {
  implicit lazy val reads: Reads[PodViewRow] = Reads[PodViewRow](json => JsResult.fromTry(
      Try(
        PodViewRow(
          id = json.\("id").as(Reads.IntReads),
          purchaseorderid = json.\("purchaseorderid").as(PurchaseorderheaderId.reads),
          purchaseorderdetailid = json.\("purchaseorderdetailid").as(Reads.IntReads),
          duedate = json.\("duedate").as(TypoLocalDateTime.reads),
          orderqty = json.\("orderqty").as(TypoShort.reads),
          productid = json.\("productid").as(ProductId.reads),
          unitprice = json.\("unitprice").as(Reads.bigDecReads),
          receivedqty = json.\("receivedqty").as(Reads.bigDecReads),
          rejectedqty = json.\("rejectedqty").as(Reads.bigDecReads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PodViewRow] = RowParser[PodViewRow] { row =>
    Success(
      PodViewRow(
        id = row(idx + 0)(Column.columnToInt),
        purchaseorderid = row(idx + 1)(PurchaseorderheaderId.column),
        purchaseorderdetailid = row(idx + 2)(Column.columnToInt),
        duedate = row(idx + 3)(TypoLocalDateTime.column),
        orderqty = row(idx + 4)(TypoShort.column),
        productid = row(idx + 5)(ProductId.column),
        unitprice = row(idx + 6)(Column.columnToScalaBigDecimal),
        receivedqty = row(idx + 7)(Column.columnToScalaBigDecimal),
        rejectedqty = row(idx + 8)(Column.columnToScalaBigDecimal),
        modifieddate = row(idx + 9)(TypoLocalDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[PodViewRow] = OWrites[PodViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Writes.IntWrites.writes(o.id),
      "purchaseorderid" -> PurchaseorderheaderId.writes.writes(o.purchaseorderid),
      "purchaseorderdetailid" -> Writes.IntWrites.writes(o.purchaseorderdetailid),
      "duedate" -> TypoLocalDateTime.writes.writes(o.duedate),
      "orderqty" -> TypoShort.writes.writes(o.orderqty),
      "productid" -> ProductId.writes.writes(o.productid),
      "unitprice" -> Writes.BigDecimalWrites.writes(o.unitprice),
      "receivedqty" -> Writes.BigDecimalWrites.writes(o.receivedqty),
      "rejectedqty" -> Writes.BigDecimalWrites.writes(o.rejectedqty),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
