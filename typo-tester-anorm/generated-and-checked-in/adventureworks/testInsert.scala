/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoAnyArray
import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoOidVector
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoRegproc
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoUnknownCitext
import adventureworks.customtypes.TypoUnknownPgDependencies
import adventureworks.customtypes.TypoUnknownPgMcvList
import adventureworks.customtypes.TypoUnknownPgNdistinct
import adventureworks.customtypes.TypoUnknownPgStatistic
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXid
import adventureworks.customtypes.TypoXml
import adventureworks.humanresources.department.DepartmentId
import adventureworks.humanresources.department.DepartmentRepoImpl
import adventureworks.humanresources.department.DepartmentRow
import adventureworks.humanresources.department.DepartmentRowUnsaved
import adventureworks.humanresources.employee.EmployeeRepoImpl
import adventureworks.humanresources.employee.EmployeeRow
import adventureworks.humanresources.employee.EmployeeRowUnsaved
import adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRepoImpl
import adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow
import adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRowUnsaved
import adventureworks.humanresources.employeepayhistory.EmployeepayhistoryRepoImpl
import adventureworks.humanresources.employeepayhistory.EmployeepayhistoryRow
import adventureworks.humanresources.employeepayhistory.EmployeepayhistoryRowUnsaved
import adventureworks.humanresources.jobcandidate.JobcandidateId
import adventureworks.humanresources.jobcandidate.JobcandidateRepoImpl
import adventureworks.humanresources.jobcandidate.JobcandidateRow
import adventureworks.humanresources.jobcandidate.JobcandidateRowUnsaved
import adventureworks.humanresources.shift.ShiftId
import adventureworks.humanresources.shift.ShiftRepoImpl
import adventureworks.humanresources.shift.ShiftRow
import adventureworks.humanresources.shift.ShiftRowUnsaved
import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.YesOrNo
import adventureworks.information_schema.sql_features.SqlFeaturesRepoImpl
import adventureworks.information_schema.sql_features.SqlFeaturesRow
import adventureworks.information_schema.sql_implementation_info.SqlImplementationInfoRepoImpl
import adventureworks.information_schema.sql_implementation_info.SqlImplementationInfoRow
import adventureworks.information_schema.sql_parts.SqlPartsRepoImpl
import adventureworks.information_schema.sql_parts.SqlPartsRow
import adventureworks.information_schema.sql_sizing.SqlSizingRepoImpl
import adventureworks.information_schema.sql_sizing.SqlSizingRow
import adventureworks.person.address.AddressId
import adventureworks.person.address.AddressRepoImpl
import adventureworks.person.address.AddressRow
import adventureworks.person.address.AddressRowUnsaved
import adventureworks.person.addresstype.AddresstypeId
import adventureworks.person.addresstype.AddresstypeRepoImpl
import adventureworks.person.addresstype.AddresstypeRow
import adventureworks.person.addresstype.AddresstypeRowUnsaved
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.businessentity.BusinessentityRepoImpl
import adventureworks.person.businessentity.BusinessentityRow
import adventureworks.person.businessentity.BusinessentityRowUnsaved
import adventureworks.person.businessentityaddress.BusinessentityaddressRepoImpl
import adventureworks.person.businessentityaddress.BusinessentityaddressRow
import adventureworks.person.businessentityaddress.BusinessentityaddressRowUnsaved
import adventureworks.person.businessentitycontact.BusinessentitycontactRepoImpl
import adventureworks.person.businessentitycontact.BusinessentitycontactRow
import adventureworks.person.businessentitycontact.BusinessentitycontactRowUnsaved
import adventureworks.person.contacttype.ContacttypeId
import adventureworks.person.contacttype.ContacttypeRepoImpl
import adventureworks.person.contacttype.ContacttypeRow
import adventureworks.person.contacttype.ContacttypeRowUnsaved
import adventureworks.person.countryregion.CountryregionId
import adventureworks.person.countryregion.CountryregionRepoImpl
import adventureworks.person.countryregion.CountryregionRow
import adventureworks.person.countryregion.CountryregionRowUnsaved
import adventureworks.person.emailaddress.EmailaddressRepoImpl
import adventureworks.person.emailaddress.EmailaddressRow
import adventureworks.person.emailaddress.EmailaddressRowUnsaved
import adventureworks.person.password.PasswordRepoImpl
import adventureworks.person.password.PasswordRow
import adventureworks.person.password.PasswordRowUnsaved
import adventureworks.person.person.PersonRepoImpl
import adventureworks.person.person.PersonRow
import adventureworks.person.person.PersonRowUnsaved
import adventureworks.person.personphone.PersonphoneRepoImpl
import adventureworks.person.personphone.PersonphoneRow
import adventureworks.person.personphone.PersonphoneRowUnsaved
import adventureworks.person.phonenumbertype.PhonenumbertypeId
import adventureworks.person.phonenumbertype.PhonenumbertypeRepoImpl
import adventureworks.person.phonenumbertype.PhonenumbertypeRow
import adventureworks.person.phonenumbertype.PhonenumbertypeRowUnsaved
import adventureworks.person.stateprovince.StateprovinceId
import adventureworks.person.stateprovince.StateprovinceRepoImpl
import adventureworks.person.stateprovince.StateprovinceRow
import adventureworks.person.stateprovince.StateprovinceRowUnsaved
import adventureworks.pg_catalog.pg_aggregate.PgAggregateId
import adventureworks.pg_catalog.pg_aggregate.PgAggregateRepoImpl
import adventureworks.pg_catalog.pg_aggregate.PgAggregateRow
import adventureworks.pg_catalog.pg_am.PgAmId
import adventureworks.pg_catalog.pg_am.PgAmRepoImpl
import adventureworks.pg_catalog.pg_am.PgAmRow
import adventureworks.pg_catalog.pg_amop.PgAmopId
import adventureworks.pg_catalog.pg_amop.PgAmopRepoImpl
import adventureworks.pg_catalog.pg_amop.PgAmopRow
import adventureworks.pg_catalog.pg_amproc.PgAmprocId
import adventureworks.pg_catalog.pg_amproc.PgAmprocRepoImpl
import adventureworks.pg_catalog.pg_amproc.PgAmprocRow
import adventureworks.pg_catalog.pg_attrdef.PgAttrdefId
import adventureworks.pg_catalog.pg_attrdef.PgAttrdefRepoImpl
import adventureworks.pg_catalog.pg_attrdef.PgAttrdefRow
import adventureworks.pg_catalog.pg_attribute.PgAttributeRepoImpl
import adventureworks.pg_catalog.pg_attribute.PgAttributeRow
import adventureworks.pg_catalog.pg_auth_members.PgAuthMembersRepoImpl
import adventureworks.pg_catalog.pg_auth_members.PgAuthMembersRow
import adventureworks.pg_catalog.pg_authid.PgAuthidId
import adventureworks.pg_catalog.pg_authid.PgAuthidRepoImpl
import adventureworks.pg_catalog.pg_authid.PgAuthidRow
import adventureworks.pg_catalog.pg_cast.PgCastId
import adventureworks.pg_catalog.pg_cast.PgCastRepoImpl
import adventureworks.pg_catalog.pg_cast.PgCastRow
import adventureworks.pg_catalog.pg_class.PgClassId
import adventureworks.pg_catalog.pg_class.PgClassRepoImpl
import adventureworks.pg_catalog.pg_class.PgClassRow
import adventureworks.pg_catalog.pg_collation.PgCollationId
import adventureworks.pg_catalog.pg_collation.PgCollationRepoImpl
import adventureworks.pg_catalog.pg_collation.PgCollationRow
import adventureworks.pg_catalog.pg_constraint.PgConstraintId
import adventureworks.pg_catalog.pg_constraint.PgConstraintRepoImpl
import adventureworks.pg_catalog.pg_constraint.PgConstraintRow
import adventureworks.pg_catalog.pg_conversion.PgConversionId
import adventureworks.pg_catalog.pg_conversion.PgConversionRepoImpl
import adventureworks.pg_catalog.pg_conversion.PgConversionRow
import adventureworks.pg_catalog.pg_database.PgDatabaseId
import adventureworks.pg_catalog.pg_database.PgDatabaseRepoImpl
import adventureworks.pg_catalog.pg_database.PgDatabaseRow
import adventureworks.pg_catalog.pg_db_role_setting.PgDbRoleSettingRepoImpl
import adventureworks.pg_catalog.pg_db_role_setting.PgDbRoleSettingRow
import adventureworks.pg_catalog.pg_default_acl.PgDefaultAclId
import adventureworks.pg_catalog.pg_default_acl.PgDefaultAclRepoImpl
import adventureworks.pg_catalog.pg_default_acl.PgDefaultAclRow
import adventureworks.pg_catalog.pg_depend.PgDependRepoImpl
import adventureworks.pg_catalog.pg_depend.PgDependRow
import adventureworks.pg_catalog.pg_description.PgDescriptionRepoImpl
import adventureworks.pg_catalog.pg_description.PgDescriptionRow
import adventureworks.pg_catalog.pg_enum.PgEnumId
import adventureworks.pg_catalog.pg_enum.PgEnumRepoImpl
import adventureworks.pg_catalog.pg_enum.PgEnumRow
import adventureworks.pg_catalog.pg_event_trigger.PgEventTriggerId
import adventureworks.pg_catalog.pg_event_trigger.PgEventTriggerRepoImpl
import adventureworks.pg_catalog.pg_event_trigger.PgEventTriggerRow
import adventureworks.pg_catalog.pg_extension.PgExtensionId
import adventureworks.pg_catalog.pg_extension.PgExtensionRepoImpl
import adventureworks.pg_catalog.pg_extension.PgExtensionRow
import adventureworks.pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperId
import adventureworks.pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperRepoImpl
import adventureworks.pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperRow
import adventureworks.pg_catalog.pg_foreign_server.PgForeignServerId
import adventureworks.pg_catalog.pg_foreign_server.PgForeignServerRepoImpl
import adventureworks.pg_catalog.pg_foreign_server.PgForeignServerRow
import adventureworks.pg_catalog.pg_foreign_table.PgForeignTableId
import adventureworks.pg_catalog.pg_foreign_table.PgForeignTableRepoImpl
import adventureworks.pg_catalog.pg_foreign_table.PgForeignTableRow
import adventureworks.pg_catalog.pg_index.PgIndexId
import adventureworks.pg_catalog.pg_index.PgIndexRepoImpl
import adventureworks.pg_catalog.pg_index.PgIndexRow
import adventureworks.pg_catalog.pg_inherits.PgInheritsRepoImpl
import adventureworks.pg_catalog.pg_inherits.PgInheritsRow
import adventureworks.pg_catalog.pg_init_privs.PgInitPrivsRepoImpl
import adventureworks.pg_catalog.pg_init_privs.PgInitPrivsRow
import adventureworks.pg_catalog.pg_language.PgLanguageId
import adventureworks.pg_catalog.pg_language.PgLanguageRepoImpl
import adventureworks.pg_catalog.pg_language.PgLanguageRow
import adventureworks.pg_catalog.pg_largeobject.PgLargeobjectRepoImpl
import adventureworks.pg_catalog.pg_largeobject.PgLargeobjectRow
import adventureworks.pg_catalog.pg_largeobject_metadata.PgLargeobjectMetadataId
import adventureworks.pg_catalog.pg_largeobject_metadata.PgLargeobjectMetadataRepoImpl
import adventureworks.pg_catalog.pg_largeobject_metadata.PgLargeobjectMetadataRow
import adventureworks.pg_catalog.pg_namespace.PgNamespaceId
import adventureworks.pg_catalog.pg_namespace.PgNamespaceRepoImpl
import adventureworks.pg_catalog.pg_namespace.PgNamespaceRow
import adventureworks.pg_catalog.pg_opclass.PgOpclassId
import adventureworks.pg_catalog.pg_opclass.PgOpclassRepoImpl
import adventureworks.pg_catalog.pg_opclass.PgOpclassRow
import adventureworks.pg_catalog.pg_operator.PgOperatorId
import adventureworks.pg_catalog.pg_operator.PgOperatorRepoImpl
import adventureworks.pg_catalog.pg_operator.PgOperatorRow
import adventureworks.pg_catalog.pg_opfamily.PgOpfamilyId
import adventureworks.pg_catalog.pg_opfamily.PgOpfamilyRepoImpl
import adventureworks.pg_catalog.pg_opfamily.PgOpfamilyRow
import adventureworks.pg_catalog.pg_partitioned_table.PgPartitionedTableId
import adventureworks.pg_catalog.pg_partitioned_table.PgPartitionedTableRepoImpl
import adventureworks.pg_catalog.pg_partitioned_table.PgPartitionedTableRow
import adventureworks.pg_catalog.pg_policy.PgPolicyId
import adventureworks.pg_catalog.pg_policy.PgPolicyRepoImpl
import adventureworks.pg_catalog.pg_policy.PgPolicyRow
import adventureworks.pg_catalog.pg_proc.PgProcId
import adventureworks.pg_catalog.pg_proc.PgProcRepoImpl
import adventureworks.pg_catalog.pg_proc.PgProcRow
import adventureworks.pg_catalog.pg_publication.PgPublicationId
import adventureworks.pg_catalog.pg_publication.PgPublicationRepoImpl
import adventureworks.pg_catalog.pg_publication.PgPublicationRow
import adventureworks.pg_catalog.pg_publication_rel.PgPublicationRelId
import adventureworks.pg_catalog.pg_publication_rel.PgPublicationRelRepoImpl
import adventureworks.pg_catalog.pg_publication_rel.PgPublicationRelRow
import adventureworks.pg_catalog.pg_range.PgRangeId
import adventureworks.pg_catalog.pg_range.PgRangeRepoImpl
import adventureworks.pg_catalog.pg_range.PgRangeRow
import adventureworks.pg_catalog.pg_replication_origin.PgReplicationOriginId
import adventureworks.pg_catalog.pg_replication_origin.PgReplicationOriginRepoImpl
import adventureworks.pg_catalog.pg_replication_origin.PgReplicationOriginRow
import adventureworks.pg_catalog.pg_rewrite.PgRewriteId
import adventureworks.pg_catalog.pg_rewrite.PgRewriteRepoImpl
import adventureworks.pg_catalog.pg_rewrite.PgRewriteRow
import adventureworks.pg_catalog.pg_seclabel.PgSeclabelRepoImpl
import adventureworks.pg_catalog.pg_seclabel.PgSeclabelRow
import adventureworks.pg_catalog.pg_sequence.PgSequenceId
import adventureworks.pg_catalog.pg_sequence.PgSequenceRepoImpl
import adventureworks.pg_catalog.pg_sequence.PgSequenceRow
import adventureworks.pg_catalog.pg_shdepend.PgShdependRepoImpl
import adventureworks.pg_catalog.pg_shdepend.PgShdependRow
import adventureworks.pg_catalog.pg_shdescription.PgShdescriptionRepoImpl
import adventureworks.pg_catalog.pg_shdescription.PgShdescriptionRow
import adventureworks.pg_catalog.pg_shseclabel.PgShseclabelRepoImpl
import adventureworks.pg_catalog.pg_shseclabel.PgShseclabelRow
import adventureworks.pg_catalog.pg_statistic.PgStatisticRepoImpl
import adventureworks.pg_catalog.pg_statistic.PgStatisticRow
import adventureworks.pg_catalog.pg_statistic_ext.PgStatisticExtId
import adventureworks.pg_catalog.pg_statistic_ext.PgStatisticExtRepoImpl
import adventureworks.pg_catalog.pg_statistic_ext.PgStatisticExtRow
import adventureworks.pg_catalog.pg_statistic_ext_data.PgStatisticExtDataId
import adventureworks.pg_catalog.pg_statistic_ext_data.PgStatisticExtDataRepoImpl
import adventureworks.pg_catalog.pg_statistic_ext_data.PgStatisticExtDataRow
import adventureworks.pg_catalog.pg_subscription.PgSubscriptionId
import adventureworks.pg_catalog.pg_subscription.PgSubscriptionRepoImpl
import adventureworks.pg_catalog.pg_subscription.PgSubscriptionRow
import adventureworks.pg_catalog.pg_subscription_rel.PgSubscriptionRelRepoImpl
import adventureworks.pg_catalog.pg_subscription_rel.PgSubscriptionRelRow
import adventureworks.pg_catalog.pg_tablespace.PgTablespaceId
import adventureworks.pg_catalog.pg_tablespace.PgTablespaceRepoImpl
import adventureworks.pg_catalog.pg_tablespace.PgTablespaceRow
import adventureworks.pg_catalog.pg_transform.PgTransformId
import adventureworks.pg_catalog.pg_transform.PgTransformRepoImpl
import adventureworks.pg_catalog.pg_transform.PgTransformRow
import adventureworks.pg_catalog.pg_trigger.PgTriggerId
import adventureworks.pg_catalog.pg_trigger.PgTriggerRepoImpl
import adventureworks.pg_catalog.pg_trigger.PgTriggerRow
import adventureworks.pg_catalog.pg_ts_config.PgTsConfigId
import adventureworks.pg_catalog.pg_ts_config.PgTsConfigRepoImpl
import adventureworks.pg_catalog.pg_ts_config.PgTsConfigRow
import adventureworks.pg_catalog.pg_ts_config_map.PgTsConfigMapRepoImpl
import adventureworks.pg_catalog.pg_ts_config_map.PgTsConfigMapRow
import adventureworks.pg_catalog.pg_ts_dict.PgTsDictId
import adventureworks.pg_catalog.pg_ts_dict.PgTsDictRepoImpl
import adventureworks.pg_catalog.pg_ts_dict.PgTsDictRow
import adventureworks.pg_catalog.pg_ts_parser.PgTsParserId
import adventureworks.pg_catalog.pg_ts_parser.PgTsParserRepoImpl
import adventureworks.pg_catalog.pg_ts_parser.PgTsParserRow
import adventureworks.pg_catalog.pg_ts_template.PgTsTemplateId
import adventureworks.pg_catalog.pg_ts_template.PgTsTemplateRepoImpl
import adventureworks.pg_catalog.pg_ts_template.PgTsTemplateRow
import adventureworks.pg_catalog.pg_type.PgTypeId
import adventureworks.pg_catalog.pg_type.PgTypeRepoImpl
import adventureworks.pg_catalog.pg_type.PgTypeRow
import adventureworks.pg_catalog.pg_user_mapping.PgUserMappingId
import adventureworks.pg_catalog.pg_user_mapping.PgUserMappingRepoImpl
import adventureworks.pg_catalog.pg_user_mapping.PgUserMappingRow
import adventureworks.production.billofmaterials.BillofmaterialsId
import adventureworks.production.billofmaterials.BillofmaterialsRepoImpl
import adventureworks.production.billofmaterials.BillofmaterialsRow
import adventureworks.production.billofmaterials.BillofmaterialsRowUnsaved
import adventureworks.production.culture.CultureId
import adventureworks.production.culture.CultureRepoImpl
import adventureworks.production.culture.CultureRow
import adventureworks.production.culture.CultureRowUnsaved
import adventureworks.production.document.DocumentId
import adventureworks.production.document.DocumentRepoImpl
import adventureworks.production.document.DocumentRow
import adventureworks.production.document.DocumentRowUnsaved
import adventureworks.production.illustration.IllustrationId
import adventureworks.production.illustration.IllustrationRepoImpl
import adventureworks.production.illustration.IllustrationRow
import adventureworks.production.illustration.IllustrationRowUnsaved
import adventureworks.production.location.LocationId
import adventureworks.production.location.LocationRepoImpl
import adventureworks.production.location.LocationRow
import adventureworks.production.location.LocationRowUnsaved
import adventureworks.production.product.ProductId
import adventureworks.production.product.ProductRepoImpl
import adventureworks.production.product.ProductRow
import adventureworks.production.product.ProductRowUnsaved
import adventureworks.production.productcategory.ProductcategoryId
import adventureworks.production.productcategory.ProductcategoryRepoImpl
import adventureworks.production.productcategory.ProductcategoryRow
import adventureworks.production.productcategory.ProductcategoryRowUnsaved
import adventureworks.production.productcosthistory.ProductcosthistoryRepoImpl
import adventureworks.production.productcosthistory.ProductcosthistoryRow
import adventureworks.production.productcosthistory.ProductcosthistoryRowUnsaved
import adventureworks.production.productdescription.ProductdescriptionId
import adventureworks.production.productdescription.ProductdescriptionRepoImpl
import adventureworks.production.productdescription.ProductdescriptionRow
import adventureworks.production.productdescription.ProductdescriptionRowUnsaved
import adventureworks.production.productdocument.ProductdocumentRepoImpl
import adventureworks.production.productdocument.ProductdocumentRow
import adventureworks.production.productdocument.ProductdocumentRowUnsaved
import adventureworks.production.productinventory.ProductinventoryRepoImpl
import adventureworks.production.productinventory.ProductinventoryRow
import adventureworks.production.productinventory.ProductinventoryRowUnsaved
import adventureworks.production.productlistpricehistory.ProductlistpricehistoryRepoImpl
import adventureworks.production.productlistpricehistory.ProductlistpricehistoryRow
import adventureworks.production.productlistpricehistory.ProductlistpricehistoryRowUnsaved
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productmodel.ProductmodelRepoImpl
import adventureworks.production.productmodel.ProductmodelRow
import adventureworks.production.productmodel.ProductmodelRowUnsaved
import adventureworks.production.productmodelillustration.ProductmodelillustrationRepoImpl
import adventureworks.production.productmodelillustration.ProductmodelillustrationRow
import adventureworks.production.productmodelillustration.ProductmodelillustrationRowUnsaved
import adventureworks.production.productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRepoImpl
import adventureworks.production.productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRow
import adventureworks.production.productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRowUnsaved
import adventureworks.production.productphoto.ProductphotoId
import adventureworks.production.productphoto.ProductphotoRepoImpl
import adventureworks.production.productphoto.ProductphotoRow
import adventureworks.production.productphoto.ProductphotoRowUnsaved
import adventureworks.production.productproductphoto.ProductproductphotoRepoImpl
import adventureworks.production.productproductphoto.ProductproductphotoRow
import adventureworks.production.productproductphoto.ProductproductphotoRowUnsaved
import adventureworks.production.productreview.ProductreviewId
import adventureworks.production.productreview.ProductreviewRepoImpl
import adventureworks.production.productreview.ProductreviewRow
import adventureworks.production.productreview.ProductreviewRowUnsaved
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.productsubcategory.ProductsubcategoryRepoImpl
import adventureworks.production.productsubcategory.ProductsubcategoryRow
import adventureworks.production.productsubcategory.ProductsubcategoryRowUnsaved
import adventureworks.production.scrapreason.ScrapreasonId
import adventureworks.production.scrapreason.ScrapreasonRepoImpl
import adventureworks.production.scrapreason.ScrapreasonRow
import adventureworks.production.scrapreason.ScrapreasonRowUnsaved
import adventureworks.production.transactionhistory.TransactionhistoryId
import adventureworks.production.transactionhistory.TransactionhistoryRepoImpl
import adventureworks.production.transactionhistory.TransactionhistoryRow
import adventureworks.production.transactionhistory.TransactionhistoryRowUnsaved
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveId
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveRepoImpl
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveRow
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveRowUnsaved
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.production.unitmeasure.UnitmeasureRepoImpl
import adventureworks.production.unitmeasure.UnitmeasureRow
import adventureworks.production.unitmeasure.UnitmeasureRowUnsaved
import adventureworks.production.workorder.WorkorderId
import adventureworks.production.workorder.WorkorderRepoImpl
import adventureworks.production.workorder.WorkorderRow
import adventureworks.production.workorder.WorkorderRowUnsaved
import adventureworks.production.workorderrouting.WorkorderroutingRepoImpl
import adventureworks.production.workorderrouting.WorkorderroutingRow
import adventureworks.production.workorderrouting.WorkorderroutingRowUnsaved
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Mydomain
import adventureworks.public.Myenum
import adventureworks.public.Name
import adventureworks.public.NameStyle
import adventureworks.public.OrderNumber
import adventureworks.public.Phone
import adventureworks.public.pgtest.PgtestRepoImpl
import adventureworks.public.pgtest.PgtestRow
import adventureworks.public.pgtestnull.PgtestnullRepoImpl
import adventureworks.public.pgtestnull.PgtestnullRow
import adventureworks.public.users.UsersId
import adventureworks.public.users.UsersRepoImpl
import adventureworks.public.users.UsersRow
import adventureworks.public.users.UsersRowUnsaved
import adventureworks.purchasing.productvendor.ProductvendorRepoImpl
import adventureworks.purchasing.productvendor.ProductvendorRow
import adventureworks.purchasing.productvendor.ProductvendorRowUnsaved
import adventureworks.purchasing.purchaseorderdetail.PurchaseorderdetailRepoImpl
import adventureworks.purchasing.purchaseorderdetail.PurchaseorderdetailRow
import adventureworks.purchasing.purchaseorderdetail.PurchaseorderdetailRowUnsaved
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderRepoImpl
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderRow
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderRowUnsaved
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.purchasing.shipmethod.ShipmethodRepoImpl
import adventureworks.purchasing.shipmethod.ShipmethodRow
import adventureworks.purchasing.shipmethod.ShipmethodRowUnsaved
import adventureworks.purchasing.vendor.VendorRepoImpl
import adventureworks.purchasing.vendor.VendorRow
import adventureworks.purchasing.vendor.VendorRowUnsaved
import adventureworks.sales.countryregioncurrency.CountryregioncurrencyRepoImpl
import adventureworks.sales.countryregioncurrency.CountryregioncurrencyRow
import adventureworks.sales.countryregioncurrency.CountryregioncurrencyRowUnsaved
import adventureworks.sales.creditcard.CreditcardRepoImpl
import adventureworks.sales.creditcard.CreditcardRow
import adventureworks.sales.creditcard.CreditcardRowUnsaved
import adventureworks.sales.currency.CurrencyId
import adventureworks.sales.currency.CurrencyRepoImpl
import adventureworks.sales.currency.CurrencyRow
import adventureworks.sales.currency.CurrencyRowUnsaved
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.currencyrate.CurrencyrateRepoImpl
import adventureworks.sales.currencyrate.CurrencyrateRow
import adventureworks.sales.currencyrate.CurrencyrateRowUnsaved
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.customer.CustomerRepoImpl
import adventureworks.sales.customer.CustomerRow
import adventureworks.sales.customer.CustomerRowUnsaved
import adventureworks.sales.personcreditcard.PersoncreditcardRepoImpl
import adventureworks.sales.personcreditcard.PersoncreditcardRow
import adventureworks.sales.personcreditcard.PersoncreditcardRowUnsaved
import adventureworks.sales.salesorderdetail.SalesorderdetailRepoImpl
import adventureworks.sales.salesorderdetail.SalesorderdetailRow
import adventureworks.sales.salesorderdetail.SalesorderdetailRowUnsaved
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.salesorderheader.SalesorderheaderRepoImpl
import adventureworks.sales.salesorderheader.SalesorderheaderRow
import adventureworks.sales.salesorderheader.SalesorderheaderRowUnsaved
import adventureworks.sales.salesorderheadersalesreason.SalesorderheadersalesreasonRepoImpl
import adventureworks.sales.salesorderheadersalesreason.SalesorderheadersalesreasonRow
import adventureworks.sales.salesorderheadersalesreason.SalesorderheadersalesreasonRowUnsaved
import adventureworks.sales.salesperson.SalespersonRepoImpl
import adventureworks.sales.salesperson.SalespersonRow
import adventureworks.sales.salesperson.SalespersonRowUnsaved
import adventureworks.sales.salespersonquotahistory.SalespersonquotahistoryRepoImpl
import adventureworks.sales.salespersonquotahistory.SalespersonquotahistoryRow
import adventureworks.sales.salespersonquotahistory.SalespersonquotahistoryRowUnsaved
import adventureworks.sales.salesreason.SalesreasonId
import adventureworks.sales.salesreason.SalesreasonRepoImpl
import adventureworks.sales.salesreason.SalesreasonRow
import adventureworks.sales.salesreason.SalesreasonRowUnsaved
import adventureworks.sales.salestaxrate.SalestaxrateId
import adventureworks.sales.salestaxrate.SalestaxrateRepoImpl
import adventureworks.sales.salestaxrate.SalestaxrateRow
import adventureworks.sales.salestaxrate.SalestaxrateRowUnsaved
import adventureworks.sales.salesterritory.SalesterritoryId
import adventureworks.sales.salesterritory.SalesterritoryRepoImpl
import adventureworks.sales.salesterritory.SalesterritoryRow
import adventureworks.sales.salesterritory.SalesterritoryRowUnsaved
import adventureworks.sales.salesterritoryhistory.SalesterritoryhistoryRepoImpl
import adventureworks.sales.salesterritoryhistory.SalesterritoryhistoryRow
import adventureworks.sales.salesterritoryhistory.SalesterritoryhistoryRowUnsaved
import adventureworks.sales.shoppingcartitem.ShoppingcartitemId
import adventureworks.sales.shoppingcartitem.ShoppingcartitemRepoImpl
import adventureworks.sales.shoppingcartitem.ShoppingcartitemRow
import adventureworks.sales.shoppingcartitem.ShoppingcartitemRowUnsaved
import adventureworks.sales.specialoffer.SpecialofferId
import adventureworks.sales.specialoffer.SpecialofferRepoImpl
import adventureworks.sales.specialoffer.SpecialofferRow
import adventureworks.sales.specialoffer.SpecialofferRowUnsaved
import adventureworks.sales.specialofferproduct.SpecialofferproductRepoImpl
import adventureworks.sales.specialofferproduct.SpecialofferproductRow
import adventureworks.sales.specialofferproduct.SpecialofferproductRowUnsaved
import adventureworks.sales.store.StoreRepoImpl
import adventureworks.sales.store.StoreRow
import adventureworks.sales.store.StoreRowUnsaved
import adventureworks.userdefined.CustomCreditcardId
import adventureworks.userdefined.FirstName
import java.sql.Connection
import java.time.Instant
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.ZoneOffset
import scala.util.Random

class testInsert(random: Random) {
  def humanresourcesDepartment(name: Name = Name(random.alphanumeric.take(20).mkString), groupname: Name = Name(random.alphanumeric.take(20).mkString), departmentid: Defaulted[DepartmentId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): DepartmentRow = DepartmentRepoImpl.insert(new DepartmentRowUnsaved(name = name, groupname = groupname, departmentid = departmentid, modifieddate = modifieddate))
  def humanresourcesEmployee(businessentityid: BusinessentityId, nationalidnumber: /* max 15 chars */ String = random.alphanumeric.take(15).mkString, loginid: /* max 256 chars */ String = random.alphanumeric.take(20).mkString, jobtitle: /* max 50 chars */ String = random.alphanumeric.take(20).mkString, birthdate: TypoLocalDate = TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)), maritalstatus: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString, gender: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString, hiredate: TypoLocalDate = TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)), salariedflag: Defaulted[Flag] = Defaulted.UseDefault, vacationhours: Defaulted[TypoShort] = Defaulted.UseDefault, sickleavehours: Defaulted[TypoShort] = Defaulted.UseDefault, currentflag: Defaulted[Flag] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, organizationnode: Defaulted[Option[String]] = Defaulted.UseDefault)(implicit c: Connection): EmployeeRow = EmployeeRepoImpl.insert(new EmployeeRowUnsaved(businessentityid = businessentityid, nationalidnumber = nationalidnumber, loginid = loginid, jobtitle = jobtitle, birthdate = birthdate, maritalstatus = maritalstatus, gender = gender, hiredate = hiredate, salariedflag = salariedflag, vacationhours = vacationhours, sickleavehours = sickleavehours, currentflag = currentflag, rowguid = rowguid, modifieddate = modifieddate, organizationnode = organizationnode))
  def humanresourcesEmployeedepartmenthistory(businessentityid: BusinessentityId, departmentid: DepartmentId, shiftid: ShiftId, startdate: TypoLocalDate = TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)), enddate: Option[TypoLocalDate] = if (random.nextBoolean()) None else Some(TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong))), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): EmployeedepartmenthistoryRow = EmployeedepartmenthistoryRepoImpl.insert(new EmployeedepartmenthistoryRowUnsaved(businessentityid = businessentityid, departmentid = departmentid, shiftid = shiftid, startdate = startdate, enddate = enddate, modifieddate = modifieddate))
  def humanresourcesEmployeepayhistory(businessentityid: BusinessentityId, ratechangedate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), rate: BigDecimal = BigDecimal.decimal(random.nextDouble()), payfrequency: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): EmployeepayhistoryRow = EmployeepayhistoryRepoImpl.insert(new EmployeepayhistoryRowUnsaved(businessentityid = businessentityid, ratechangedate = ratechangedate, rate = rate, payfrequency = payfrequency, modifieddate = modifieddate))
  def humanresourcesJobcandidate(businessentityid: Option[BusinessentityId] = None, resume: Option[TypoXml] = None, jobcandidateid: Defaulted[JobcandidateId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): JobcandidateRow = JobcandidateRepoImpl.insert(new JobcandidateRowUnsaved(businessentityid = businessentityid, resume = resume, jobcandidateid = jobcandidateid, modifieddate = modifieddate))
  def humanresourcesShift(name: Name = Name(random.alphanumeric.take(20).mkString), starttime: TypoLocalTime = TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)), endtime: TypoLocalTime = TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)), shiftid: Defaulted[ShiftId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ShiftRow = ShiftRepoImpl.insert(new ShiftRowUnsaved(name = name, starttime = starttime, endtime = endtime, shiftid = shiftid, modifieddate = modifieddate))
  def informationSchemaSqlFeatures(featureId: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), featureName: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), subFeatureId: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), subFeatureName: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), isSupported: Option[YesOrNo] = if (random.nextBoolean()) None else Some(YesOrNo(random.alphanumeric.take(20).mkString)), isVerifiedBy: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), comments: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)))(implicit c: Connection): SqlFeaturesRow = SqlFeaturesRepoImpl.insert(new SqlFeaturesRow(featureId = featureId, featureName = featureName, subFeatureId = subFeatureId, subFeatureName = subFeatureName, isSupported = isSupported, isVerifiedBy = isVerifiedBy, comments = comments))
  def informationSchemaSqlImplementationInfo(implementationInfoId: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), implementationInfoName: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), integerValue: Option[CardinalNumber] = if (random.nextBoolean()) None else Some(CardinalNumber(random.nextInt())), characterValue: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), comments: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)))(implicit c: Connection): SqlImplementationInfoRow = SqlImplementationInfoRepoImpl.insert(new SqlImplementationInfoRow(implementationInfoId = implementationInfoId, implementationInfoName = implementationInfoName, integerValue = integerValue, characterValue = characterValue, comments = comments))
  def informationSchemaSqlParts(featureId: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), featureName: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), isSupported: Option[YesOrNo] = if (random.nextBoolean()) None else Some(YesOrNo(random.alphanumeric.take(20).mkString)), isVerifiedBy: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), comments: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)))(implicit c: Connection): SqlPartsRow = SqlPartsRepoImpl.insert(new SqlPartsRow(featureId = featureId, featureName = featureName, isSupported = isSupported, isVerifiedBy = isVerifiedBy, comments = comments))
  def informationSchemaSqlSizing(sizingId: Option[CardinalNumber] = if (random.nextBoolean()) None else Some(CardinalNumber(random.nextInt())), sizingName: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)), supportedValue: Option[CardinalNumber] = if (random.nextBoolean()) None else Some(CardinalNumber(random.nextInt())), comments: Option[CharacterData] = if (random.nextBoolean()) None else Some(CharacterData(random.alphanumeric.take(20).mkString)))(implicit c: Connection): SqlSizingRow = SqlSizingRepoImpl.insert(new SqlSizingRow(sizingId = sizingId, sizingName = sizingName, supportedValue = supportedValue, comments = comments))
  def personAddress(stateprovinceid: StateprovinceId, addressline1: /* max 60 chars */ String = random.alphanumeric.take(20).mkString, addressline2: Option[/* max 60 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), city: /* max 30 chars */ String = random.alphanumeric.take(20).mkString, postalcode: /* max 15 chars */ String = random.alphanumeric.take(15).mkString, spatiallocation: Option[TypoBytea] = None, addressid: Defaulted[AddressId] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): AddressRow = AddressRepoImpl.insert(new AddressRowUnsaved(stateprovinceid = stateprovinceid, addressline1 = addressline1, addressline2 = addressline2, city = city, postalcode = postalcode, spatiallocation = spatiallocation, addressid = addressid, rowguid = rowguid, modifieddate = modifieddate))
  def personAddresstype(name: Name = Name(random.alphanumeric.take(20).mkString), addresstypeid: Defaulted[AddresstypeId] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): AddresstypeRow = AddresstypeRepoImpl.insert(new AddresstypeRowUnsaved(name = name, addresstypeid = addresstypeid, rowguid = rowguid, modifieddate = modifieddate))
  def personBusinessentity(businessentityid: Defaulted[BusinessentityId] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): BusinessentityRow = BusinessentityRepoImpl.insert(new BusinessentityRowUnsaved(businessentityid = businessentityid, rowguid = rowguid, modifieddate = modifieddate))
  def personBusinessentityaddress(businessentityid: BusinessentityId, addressid: AddressId, addresstypeid: AddresstypeId, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): BusinessentityaddressRow = BusinessentityaddressRepoImpl.insert(new BusinessentityaddressRowUnsaved(businessentityid = businessentityid, addressid = addressid, addresstypeid = addresstypeid, rowguid = rowguid, modifieddate = modifieddate))
  def personBusinessentitycontact(businessentityid: BusinessentityId, personid: BusinessentityId, contacttypeid: ContacttypeId, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): BusinessentitycontactRow = BusinessentitycontactRepoImpl.insert(new BusinessentitycontactRowUnsaved(businessentityid = businessentityid, personid = personid, contacttypeid = contacttypeid, rowguid = rowguid, modifieddate = modifieddate))
  def personContacttype(name: Name = Name(random.alphanumeric.take(20).mkString), contacttypeid: Defaulted[ContacttypeId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ContacttypeRow = ContacttypeRepoImpl.insert(new ContacttypeRowUnsaved(name = name, contacttypeid = contacttypeid, modifieddate = modifieddate))
  def personCountryregion(countryregioncode: CountryregionId, name: Name = Name(random.alphanumeric.take(20).mkString), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): CountryregionRow = CountryregionRepoImpl.insert(new CountryregionRowUnsaved(countryregioncode = countryregioncode, name = name, modifieddate = modifieddate))
  def personEmailaddress(businessentityid: BusinessentityId, emailaddress: Option[/* max 50 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), emailaddressid: Defaulted[Int] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): EmailaddressRow = EmailaddressRepoImpl.insert(new EmailaddressRowUnsaved(businessentityid = businessentityid, emailaddress = emailaddress, emailaddressid = emailaddressid, rowguid = rowguid, modifieddate = modifieddate))
  def personPassword(businessentityid: BusinessentityId, passwordhash: /* max 128 chars */ String = random.alphanumeric.take(20).mkString, passwordsalt: /* max 10 chars */ String = random.alphanumeric.take(10).mkString, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): PasswordRow = PasswordRepoImpl.insert(new PasswordRowUnsaved(businessentityid = businessentityid, passwordhash = passwordhash, passwordsalt = passwordsalt, rowguid = rowguid, modifieddate = modifieddate))
  def personPerson(businessentityid: BusinessentityId, firstname: /* user-picked */ FirstName, persontype: /* bpchar, max 2 chars */ String = random.alphanumeric.take(2).mkString, title: Option[/* max 8 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(8).mkString), middlename: Option[Name] = if (random.nextBoolean()) None else Some(Name(random.alphanumeric.take(20).mkString)), lastname: Name = Name(random.alphanumeric.take(20).mkString), suffix: Option[/* max 10 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(10).mkString), additionalcontactinfo: Option[TypoXml] = None, demographics: Option[TypoXml] = None, namestyle: Defaulted[NameStyle] = Defaulted.UseDefault, emailpromotion: Defaulted[Int] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): PersonRow = PersonRepoImpl.insert(new PersonRowUnsaved(businessentityid = businessentityid, firstname = firstname, persontype = persontype, title = title, middlename = middlename, lastname = lastname, suffix = suffix, additionalcontactinfo = additionalcontactinfo, demographics = demographics, namestyle = namestyle, emailpromotion = emailpromotion, rowguid = rowguid, modifieddate = modifieddate))
  def personPersonphone(businessentityid: BusinessentityId, phonenumbertypeid: PhonenumbertypeId, phonenumber: Phone = Phone(random.alphanumeric.take(20).mkString), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): PersonphoneRow = PersonphoneRepoImpl.insert(new PersonphoneRowUnsaved(businessentityid = businessentityid, phonenumbertypeid = phonenumbertypeid, phonenumber = phonenumber, modifieddate = modifieddate))
  def personPhonenumbertype(name: Name = Name(random.alphanumeric.take(20).mkString), phonenumbertypeid: Defaulted[PhonenumbertypeId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): PhonenumbertypeRow = PhonenumbertypeRepoImpl.insert(new PhonenumbertypeRowUnsaved(name = name, phonenumbertypeid = phonenumbertypeid, modifieddate = modifieddate))
  def personStateprovince(countryregioncode: CountryregionId, territoryid: SalesterritoryId, stateprovincecode: /* bpchar, max 3 chars */ String = random.alphanumeric.take(3).mkString, name: Name = Name(random.alphanumeric.take(20).mkString), stateprovinceid: Defaulted[StateprovinceId] = Defaulted.UseDefault, isonlystateprovinceflag: Defaulted[Flag] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): StateprovinceRow = StateprovinceRepoImpl.insert(new StateprovinceRowUnsaved(countryregioncode = countryregioncode, territoryid = territoryid, stateprovincecode = stateprovincecode, name = name, stateprovinceid = stateprovinceid, isonlystateprovinceflag = isonlystateprovinceflag, rowguid = rowguid, modifieddate = modifieddate))
  def pgCatalogPgAggregate(aggfnoid: PgAggregateId, aggtransfn: TypoRegproc, aggfinalfn: TypoRegproc, aggcombinefn: TypoRegproc, aggserialfn: TypoRegproc, aggdeserialfn: TypoRegproc, aggmtransfn: TypoRegproc, aggminvtransfn: TypoRegproc, aggmfinalfn: TypoRegproc, aggkind: String = random.alphanumeric.take(20).mkString, aggnumdirectargs: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), aggfinalextra: Boolean = random.nextBoolean(), aggmfinalextra: Boolean = random.nextBoolean(), aggfinalmodify: String = random.alphanumeric.take(20).mkString, aggmfinalmodify: String = random.alphanumeric.take(20).mkString, aggsortop: /* oid */ Long = random.nextLong(), aggtranstype: /* oid */ Long = random.nextLong(), aggtransspace: Int = random.nextInt(), aggmtranstype: /* oid */ Long = random.nextLong(), aggmtransspace: Int = random.nextInt(), agginitval: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), aggminitval: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString))(implicit c: Connection): PgAggregateRow = PgAggregateRepoImpl.insert(new PgAggregateRow(aggfnoid = aggfnoid, aggtransfn = aggtransfn, aggfinalfn = aggfinalfn, aggcombinefn = aggcombinefn, aggserialfn = aggserialfn, aggdeserialfn = aggdeserialfn, aggmtransfn = aggmtransfn, aggminvtransfn = aggminvtransfn, aggmfinalfn = aggmfinalfn, aggkind = aggkind, aggnumdirectargs = aggnumdirectargs, aggfinalextra = aggfinalextra, aggmfinalextra = aggmfinalextra, aggfinalmodify = aggfinalmodify, aggmfinalmodify = aggmfinalmodify, aggsortop = aggsortop, aggtranstype = aggtranstype, aggtransspace = aggtransspace, aggmtranstype = aggmtranstype, aggmtransspace = aggmtransspace, agginitval = agginitval, aggminitval = aggminitval))
  def pgCatalogPgAm(oid: PgAmId, amhandler: TypoRegproc, amname: String = random.alphanumeric.take(20).mkString, amtype: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgAmRow = PgAmRepoImpl.insert(new PgAmRow(oid = oid, amhandler = amhandler, amname = amname, amtype = amtype))
  def pgCatalogPgAmop(oid: PgAmopId, amopfamily: /* oid */ Long = random.nextLong(), amoplefttype: /* oid */ Long = random.nextLong(), amoprighttype: /* oid */ Long = random.nextLong(), amopstrategy: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), amoppurpose: String = random.alphanumeric.take(20).mkString, amopopr: /* oid */ Long = random.nextLong(), amopmethod: /* oid */ Long = random.nextLong(), amopsortfamily: /* oid */ Long = random.nextLong())(implicit c: Connection): PgAmopRow = PgAmopRepoImpl.insert(new PgAmopRow(oid = oid, amopfamily = amopfamily, amoplefttype = amoplefttype, amoprighttype = amoprighttype, amopstrategy = amopstrategy, amoppurpose = amoppurpose, amopopr = amopopr, amopmethod = amopmethod, amopsortfamily = amopsortfamily))
  def pgCatalogPgAmproc(oid: PgAmprocId, amproc: TypoRegproc, amprocfamily: /* oid */ Long = random.nextLong(), amproclefttype: /* oid */ Long = random.nextLong(), amprocrighttype: /* oid */ Long = random.nextLong(), amprocnum: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort))(implicit c: Connection): PgAmprocRow = PgAmprocRepoImpl.insert(new PgAmprocRow(oid = oid, amproc = amproc, amprocfamily = amprocfamily, amproclefttype = amproclefttype, amprocrighttype = amprocrighttype, amprocnum = amprocnum))
  def pgCatalogPgAttrdef(oid: PgAttrdefId, adbin: TypoPgNodeTree, adrelid: /* oid */ Long = random.nextLong(), adnum: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort))(implicit c: Connection): PgAttrdefRow = PgAttrdefRepoImpl.insert(new PgAttrdefRow(oid = oid, adbin = adbin, adrelid = adrelid, adnum = adnum))
  def pgCatalogPgAttribute(attrelid: /* oid */ Long = random.nextLong(), attname: String = random.alphanumeric.take(20).mkString, atttypid: /* oid */ Long = random.nextLong(), attstattarget: Int = random.nextInt(), attlen: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), attnum: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), attndims: Int = random.nextInt(), attcacheoff: Int = random.nextInt(), atttypmod: Int = random.nextInt(), attbyval: Boolean = random.nextBoolean(), attalign: String = random.alphanumeric.take(20).mkString, attstorage: String = random.alphanumeric.take(20).mkString, attcompression: String = random.alphanumeric.take(20).mkString, attnotnull: Boolean = random.nextBoolean(), atthasdef: Boolean = random.nextBoolean(), atthasmissing: Boolean = random.nextBoolean(), attidentity: String = random.alphanumeric.take(20).mkString, attgenerated: String = random.alphanumeric.take(20).mkString, attisdropped: Boolean = random.nextBoolean(), attislocal: Boolean = random.nextBoolean(), attinhcount: Int = random.nextInt(), attcollation: /* oid */ Long = random.nextLong(), attacl: Option[Array[TypoAclItem]] = None, attoptions: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), attfdwoptions: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), attmissingval: Option[TypoAnyArray] = None)(implicit c: Connection): PgAttributeRow = PgAttributeRepoImpl.insert(new PgAttributeRow(attrelid = attrelid, attname = attname, atttypid = atttypid, attstattarget = attstattarget, attlen = attlen, attnum = attnum, attndims = attndims, attcacheoff = attcacheoff, atttypmod = atttypmod, attbyval = attbyval, attalign = attalign, attstorage = attstorage, attcompression = attcompression, attnotnull = attnotnull, atthasdef = atthasdef, atthasmissing = atthasmissing, attidentity = attidentity, attgenerated = attgenerated, attisdropped = attisdropped, attislocal = attislocal, attinhcount = attinhcount, attcollation = attcollation, attacl = attacl, attoptions = attoptions, attfdwoptions = attfdwoptions, attmissingval = attmissingval))
  def pgCatalogPgAuthMembers(roleid: /* oid */ Long = random.nextLong(), member: /* oid */ Long = random.nextLong(), grantor: /* oid */ Long = random.nextLong(), adminOption: Boolean = random.nextBoolean())(implicit c: Connection): PgAuthMembersRow = PgAuthMembersRepoImpl.insert(new PgAuthMembersRow(roleid = roleid, member = member, grantor = grantor, adminOption = adminOption))
  def pgCatalogPgAuthid(oid: PgAuthidId, rolname: String = random.alphanumeric.take(20).mkString, rolsuper: Boolean = random.nextBoolean(), rolinherit: Boolean = random.nextBoolean(), rolcreaterole: Boolean = random.nextBoolean(), rolcreatedb: Boolean = random.nextBoolean(), rolcanlogin: Boolean = random.nextBoolean(), rolreplication: Boolean = random.nextBoolean(), rolbypassrls: Boolean = random.nextBoolean(), rolconnlimit: Int = random.nextInt(), rolpassword: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), rolvaliduntil: Option[TypoInstant] = if (random.nextBoolean()) None else Some(TypoInstant(Instant.ofEpochMilli(random.nextLong()))))(implicit c: Connection): PgAuthidRow = PgAuthidRepoImpl.insert(new PgAuthidRow(oid = oid, rolname = rolname, rolsuper = rolsuper, rolinherit = rolinherit, rolcreaterole = rolcreaterole, rolcreatedb = rolcreatedb, rolcanlogin = rolcanlogin, rolreplication = rolreplication, rolbypassrls = rolbypassrls, rolconnlimit = rolconnlimit, rolpassword = rolpassword, rolvaliduntil = rolvaliduntil))
  def pgCatalogPgCast(oid: PgCastId, castsource: /* oid */ Long = random.nextLong(), casttarget: /* oid */ Long = random.nextLong(), castfunc: /* oid */ Long = random.nextLong(), castcontext: String = random.alphanumeric.take(20).mkString, castmethod: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgCastRow = PgCastRepoImpl.insert(new PgCastRow(oid = oid, castsource = castsource, casttarget = casttarget, castfunc = castfunc, castcontext = castcontext, castmethod = castmethod))
  def pgCatalogPgClass(oid: PgClassId, relfrozenxid: TypoXid, relminmxid: TypoXid, relname: String = random.alphanumeric.take(20).mkString, relnamespace: /* oid */ Long = random.nextLong(), reltype: /* oid */ Long = random.nextLong(), reloftype: /* oid */ Long = random.nextLong(), relowner: /* oid */ Long = random.nextLong(), relam: /* oid */ Long = random.nextLong(), relfilenode: /* oid */ Long = random.nextLong(), reltablespace: /* oid */ Long = random.nextLong(), relpages: Int = random.nextInt(), reltuples: Float = random.nextFloat(), relallvisible: Int = random.nextInt(), reltoastrelid: /* oid */ Long = random.nextLong(), relhasindex: Boolean = random.nextBoolean(), relisshared: Boolean = random.nextBoolean(), relpersistence: String = random.alphanumeric.take(20).mkString, relkind: String = random.alphanumeric.take(20).mkString, relnatts: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), relchecks: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), relhasrules: Boolean = random.nextBoolean(), relhastriggers: Boolean = random.nextBoolean(), relhassubclass: Boolean = random.nextBoolean(), relrowsecurity: Boolean = random.nextBoolean(), relforcerowsecurity: Boolean = random.nextBoolean(), relispopulated: Boolean = random.nextBoolean(), relreplident: String = random.alphanumeric.take(20).mkString, relispartition: Boolean = random.nextBoolean(), relrewrite: /* oid */ Long = random.nextLong(), relacl: Option[Array[TypoAclItem]] = None, reloptions: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), relpartbound: Option[TypoPgNodeTree] = None)(implicit c: Connection): PgClassRow = PgClassRepoImpl.insert(new PgClassRow(oid = oid, relfrozenxid = relfrozenxid, relminmxid = relminmxid, relname = relname, relnamespace = relnamespace, reltype = reltype, reloftype = reloftype, relowner = relowner, relam = relam, relfilenode = relfilenode, reltablespace = reltablespace, relpages = relpages, reltuples = reltuples, relallvisible = relallvisible, reltoastrelid = reltoastrelid, relhasindex = relhasindex, relisshared = relisshared, relpersistence = relpersistence, relkind = relkind, relnatts = relnatts, relchecks = relchecks, relhasrules = relhasrules, relhastriggers = relhastriggers, relhassubclass = relhassubclass, relrowsecurity = relrowsecurity, relforcerowsecurity = relforcerowsecurity, relispopulated = relispopulated, relreplident = relreplident, relispartition = relispartition, relrewrite = relrewrite, relacl = relacl, reloptions = reloptions, relpartbound = relpartbound))
  def pgCatalogPgCollation(oid: PgCollationId, collname: String = random.alphanumeric.take(20).mkString, collnamespace: /* oid */ Long = random.nextLong(), collowner: /* oid */ Long = random.nextLong(), collprovider: String = random.alphanumeric.take(20).mkString, collisdeterministic: Boolean = random.nextBoolean(), collencoding: Int = random.nextInt(), collcollate: String = random.alphanumeric.take(20).mkString, collctype: String = random.alphanumeric.take(20).mkString, collversion: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString))(implicit c: Connection): PgCollationRow = PgCollationRepoImpl.insert(new PgCollationRow(oid = oid, collname = collname, collnamespace = collnamespace, collowner = collowner, collprovider = collprovider, collisdeterministic = collisdeterministic, collencoding = collencoding, collcollate = collcollate, collctype = collctype, collversion = collversion))
  def pgCatalogPgConstraint(oid: PgConstraintId, conname: String = random.alphanumeric.take(20).mkString, connamespace: /* oid */ Long = random.nextLong(), contype: String = random.alphanumeric.take(20).mkString, condeferrable: Boolean = random.nextBoolean(), condeferred: Boolean = random.nextBoolean(), convalidated: Boolean = random.nextBoolean(), conrelid: /* oid */ Long = random.nextLong(), contypid: /* oid */ Long = random.nextLong(), conindid: /* oid */ Long = random.nextLong(), conparentid: /* oid */ Long = random.nextLong(), confrelid: /* oid */ Long = random.nextLong(), confupdtype: String = random.alphanumeric.take(20).mkString, confdeltype: String = random.alphanumeric.take(20).mkString, confmatchtype: String = random.alphanumeric.take(20).mkString, conislocal: Boolean = random.nextBoolean(), coninhcount: Int = random.nextInt(), connoinherit: Boolean = random.nextBoolean(), conkey: Option[Array[TypoShort]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoShort(random.nextInt(Short.MaxValue).toShort))), confkey: Option[Array[TypoShort]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoShort(random.nextInt(Short.MaxValue).toShort))), conpfeqop: Option[Array[/* oid */ Long]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextLong())), conppeqop: Option[Array[/* oid */ Long]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextLong())), conffeqop: Option[Array[/* oid */ Long]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextLong())), conexclop: Option[Array[/* oid */ Long]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextLong())), conbin: Option[TypoPgNodeTree] = None)(implicit c: Connection): PgConstraintRow = PgConstraintRepoImpl.insert(new PgConstraintRow(oid = oid, conname = conname, connamespace = connamespace, contype = contype, condeferrable = condeferrable, condeferred = condeferred, convalidated = convalidated, conrelid = conrelid, contypid = contypid, conindid = conindid, conparentid = conparentid, confrelid = confrelid, confupdtype = confupdtype, confdeltype = confdeltype, confmatchtype = confmatchtype, conislocal = conislocal, coninhcount = coninhcount, connoinherit = connoinherit, conkey = conkey, confkey = confkey, conpfeqop = conpfeqop, conppeqop = conppeqop, conffeqop = conffeqop, conexclop = conexclop, conbin = conbin))
  def pgCatalogPgConversion(oid: PgConversionId, conproc: TypoRegproc, conname: String = random.alphanumeric.take(20).mkString, connamespace: /* oid */ Long = random.nextLong(), conowner: /* oid */ Long = random.nextLong(), conforencoding: Int = random.nextInt(), contoencoding: Int = random.nextInt(), condefault: Boolean = random.nextBoolean())(implicit c: Connection): PgConversionRow = PgConversionRepoImpl.insert(new PgConversionRow(oid = oid, conproc = conproc, conname = conname, connamespace = connamespace, conowner = conowner, conforencoding = conforencoding, contoencoding = contoencoding, condefault = condefault))
  def pgCatalogPgDatabase(oid: PgDatabaseId, datfrozenxid: TypoXid, datminmxid: TypoXid, datname: String = random.alphanumeric.take(20).mkString, datdba: /* oid */ Long = random.nextLong(), encoding: Int = random.nextInt(), datcollate: String = random.alphanumeric.take(20).mkString, datctype: String = random.alphanumeric.take(20).mkString, datistemplate: Boolean = random.nextBoolean(), datallowconn: Boolean = random.nextBoolean(), datconnlimit: Int = random.nextInt(), datlastsysoid: /* oid */ Long = random.nextLong(), dattablespace: /* oid */ Long = random.nextLong(), datacl: Option[Array[TypoAclItem]] = None)(implicit c: Connection): PgDatabaseRow = PgDatabaseRepoImpl.insert(new PgDatabaseRow(oid = oid, datfrozenxid = datfrozenxid, datminmxid = datminmxid, datname = datname, datdba = datdba, encoding = encoding, datcollate = datcollate, datctype = datctype, datistemplate = datistemplate, datallowconn = datallowconn, datconnlimit = datconnlimit, datlastsysoid = datlastsysoid, dattablespace = dattablespace, datacl = datacl))
  def pgCatalogPgDbRoleSetting(setdatabase: /* oid */ Long = random.nextLong(), setrole: /* oid */ Long = random.nextLong(), setconfig: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)))(implicit c: Connection): PgDbRoleSettingRow = PgDbRoleSettingRepoImpl.insert(new PgDbRoleSettingRow(setdatabase = setdatabase, setrole = setrole, setconfig = setconfig))
  def pgCatalogPgDefaultAcl(oid: PgDefaultAclId, defaclacl: Array[TypoAclItem], defaclrole: /* oid */ Long = random.nextLong(), defaclnamespace: /* oid */ Long = random.nextLong(), defaclobjtype: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgDefaultAclRow = PgDefaultAclRepoImpl.insert(new PgDefaultAclRow(oid = oid, defaclacl = defaclacl, defaclrole = defaclrole, defaclnamespace = defaclnamespace, defaclobjtype = defaclobjtype))
  def pgCatalogPgDepend(classid: /* oid */ Long = random.nextLong(), objid: /* oid */ Long = random.nextLong(), objsubid: Int = random.nextInt(), refclassid: /* oid */ Long = random.nextLong(), refobjid: /* oid */ Long = random.nextLong(), refobjsubid: Int = random.nextInt(), deptype: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgDependRow = PgDependRepoImpl.insert(new PgDependRow(classid = classid, objid = objid, objsubid = objsubid, refclassid = refclassid, refobjid = refobjid, refobjsubid = refobjsubid, deptype = deptype))
  def pgCatalogPgDescription(objoid: /* oid */ Long = random.nextLong(), classoid: /* oid */ Long = random.nextLong(), objsubid: Int = random.nextInt(), description: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgDescriptionRow = PgDescriptionRepoImpl.insert(new PgDescriptionRow(objoid = objoid, classoid = classoid, objsubid = objsubid, description = description))
  def pgCatalogPgEnum(oid: PgEnumId, enumtypid: /* oid */ Long = random.nextLong(), enumsortorder: Float = random.nextFloat(), enumlabel: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgEnumRow = PgEnumRepoImpl.insert(new PgEnumRow(oid = oid, enumtypid = enumtypid, enumsortorder = enumsortorder, enumlabel = enumlabel))
  def pgCatalogPgEventTrigger(oid: PgEventTriggerId, evtname: String = random.alphanumeric.take(20).mkString, evtevent: String = random.alphanumeric.take(20).mkString, evtowner: /* oid */ Long = random.nextLong(), evtfoid: /* oid */ Long = random.nextLong(), evtenabled: String = random.alphanumeric.take(20).mkString, evttags: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)))(implicit c: Connection): PgEventTriggerRow = PgEventTriggerRepoImpl.insert(new PgEventTriggerRow(oid = oid, evtname = evtname, evtevent = evtevent, evtowner = evtowner, evtfoid = evtfoid, evtenabled = evtenabled, evttags = evttags))
  def pgCatalogPgExtension(oid: PgExtensionId, extname: String = random.alphanumeric.take(20).mkString, extowner: /* oid */ Long = random.nextLong(), extnamespace: /* oid */ Long = random.nextLong(), extrelocatable: Boolean = random.nextBoolean(), extversion: String = random.alphanumeric.take(20).mkString, extconfig: Option[Array[/* oid */ Long]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextLong())), extcondition: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)))(implicit c: Connection): PgExtensionRow = PgExtensionRepoImpl.insert(new PgExtensionRow(oid = oid, extname = extname, extowner = extowner, extnamespace = extnamespace, extrelocatable = extrelocatable, extversion = extversion, extconfig = extconfig, extcondition = extcondition))
  def pgCatalogPgForeignDataWrapper(oid: PgForeignDataWrapperId, fdwname: String = random.alphanumeric.take(20).mkString, fdwowner: /* oid */ Long = random.nextLong(), fdwhandler: /* oid */ Long = random.nextLong(), fdwvalidator: /* oid */ Long = random.nextLong(), fdwacl: Option[Array[TypoAclItem]] = None, fdwoptions: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)))(implicit c: Connection): PgForeignDataWrapperRow = PgForeignDataWrapperRepoImpl.insert(new PgForeignDataWrapperRow(oid = oid, fdwname = fdwname, fdwowner = fdwowner, fdwhandler = fdwhandler, fdwvalidator = fdwvalidator, fdwacl = fdwacl, fdwoptions = fdwoptions))
  def pgCatalogPgForeignServer(oid: PgForeignServerId, srvname: String = random.alphanumeric.take(20).mkString, srvowner: /* oid */ Long = random.nextLong(), srvfdw: /* oid */ Long = random.nextLong(), srvtype: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), srvversion: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), srvacl: Option[Array[TypoAclItem]] = None, srvoptions: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)))(implicit c: Connection): PgForeignServerRow = PgForeignServerRepoImpl.insert(new PgForeignServerRow(oid = oid, srvname = srvname, srvowner = srvowner, srvfdw = srvfdw, srvtype = srvtype, srvversion = srvversion, srvacl = srvacl, srvoptions = srvoptions))
  def pgCatalogPgForeignTable(ftrelid: PgForeignTableId, ftserver: /* oid */ Long = random.nextLong(), ftoptions: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)))(implicit c: Connection): PgForeignTableRow = PgForeignTableRepoImpl.insert(new PgForeignTableRow(ftrelid = ftrelid, ftserver = ftserver, ftoptions = ftoptions))
  def pgCatalogPgIndex(indexrelid: PgIndexId, indkey: TypoInt2Vector, indcollation: TypoOidVector, indclass: TypoOidVector, indoption: TypoInt2Vector, indrelid: /* oid */ Long = random.nextLong(), indnatts: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), indnkeyatts: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), indisunique: Boolean = random.nextBoolean(), indisprimary: Boolean = random.nextBoolean(), indisexclusion: Boolean = random.nextBoolean(), indimmediate: Boolean = random.nextBoolean(), indisclustered: Boolean = random.nextBoolean(), indisvalid: Boolean = random.nextBoolean(), indcheckxmin: Boolean = random.nextBoolean(), indisready: Boolean = random.nextBoolean(), indislive: Boolean = random.nextBoolean(), indisreplident: Boolean = random.nextBoolean(), indexprs: Option[TypoPgNodeTree] = None, indpred: Option[TypoPgNodeTree] = None)(implicit c: Connection): PgIndexRow = PgIndexRepoImpl.insert(new PgIndexRow(indexrelid = indexrelid, indkey = indkey, indcollation = indcollation, indclass = indclass, indoption = indoption, indrelid = indrelid, indnatts = indnatts, indnkeyatts = indnkeyatts, indisunique = indisunique, indisprimary = indisprimary, indisexclusion = indisexclusion, indimmediate = indimmediate, indisclustered = indisclustered, indisvalid = indisvalid, indcheckxmin = indcheckxmin, indisready = indisready, indislive = indislive, indisreplident = indisreplident, indexprs = indexprs, indpred = indpred))
  def pgCatalogPgInherits(inhrelid: /* oid */ Long = random.nextLong(), inhparent: /* oid */ Long = random.nextLong(), inhseqno: Int = random.nextInt(), inhdetachpending: Boolean = random.nextBoolean())(implicit c: Connection): PgInheritsRow = PgInheritsRepoImpl.insert(new PgInheritsRow(inhrelid = inhrelid, inhparent = inhparent, inhseqno = inhseqno, inhdetachpending = inhdetachpending))
  def pgCatalogPgInitPrivs(initprivs: Array[TypoAclItem], objoid: /* oid */ Long = random.nextLong(), classoid: /* oid */ Long = random.nextLong(), objsubid: Int = random.nextInt(), privtype: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgInitPrivsRow = PgInitPrivsRepoImpl.insert(new PgInitPrivsRow(initprivs = initprivs, objoid = objoid, classoid = classoid, objsubid = objsubid, privtype = privtype))
  def pgCatalogPgLanguage(oid: PgLanguageId, lanname: String = random.alphanumeric.take(20).mkString, lanowner: /* oid */ Long = random.nextLong(), lanispl: Boolean = random.nextBoolean(), lanpltrusted: Boolean = random.nextBoolean(), lanplcallfoid: /* oid */ Long = random.nextLong(), laninline: /* oid */ Long = random.nextLong(), lanvalidator: /* oid */ Long = random.nextLong(), lanacl: Option[Array[TypoAclItem]] = None)(implicit c: Connection): PgLanguageRow = PgLanguageRepoImpl.insert(new PgLanguageRow(oid = oid, lanname = lanname, lanowner = lanowner, lanispl = lanispl, lanpltrusted = lanpltrusted, lanplcallfoid = lanplcallfoid, laninline = laninline, lanvalidator = lanvalidator, lanacl = lanacl))
  def pgCatalogPgLargeobject(data: TypoBytea, loid: /* oid */ Long = random.nextLong(), pageno: Int = random.nextInt())(implicit c: Connection): PgLargeobjectRow = PgLargeobjectRepoImpl.insert(new PgLargeobjectRow(data = data, loid = loid, pageno = pageno))
  def pgCatalogPgLargeobjectMetadata(oid: PgLargeobjectMetadataId, lomowner: /* oid */ Long = random.nextLong(), lomacl: Option[Array[TypoAclItem]] = None)(implicit c: Connection): PgLargeobjectMetadataRow = PgLargeobjectMetadataRepoImpl.insert(new PgLargeobjectMetadataRow(oid = oid, lomowner = lomowner, lomacl = lomacl))
  def pgCatalogPgNamespace(oid: PgNamespaceId, nspname: String = random.alphanumeric.take(20).mkString, nspowner: /* oid */ Long = random.nextLong(), nspacl: Option[Array[TypoAclItem]] = None)(implicit c: Connection): PgNamespaceRow = PgNamespaceRepoImpl.insert(new PgNamespaceRow(oid = oid, nspname = nspname, nspowner = nspowner, nspacl = nspacl))
  def pgCatalogPgOpclass(oid: PgOpclassId, opcmethod: /* oid */ Long = random.nextLong(), opcname: String = random.alphanumeric.take(20).mkString, opcnamespace: /* oid */ Long = random.nextLong(), opcowner: /* oid */ Long = random.nextLong(), opcfamily: /* oid */ Long = random.nextLong(), opcintype: /* oid */ Long = random.nextLong(), opcdefault: Boolean = random.nextBoolean(), opckeytype: /* oid */ Long = random.nextLong())(implicit c: Connection): PgOpclassRow = PgOpclassRepoImpl.insert(new PgOpclassRow(oid = oid, opcmethod = opcmethod, opcname = opcname, opcnamespace = opcnamespace, opcowner = opcowner, opcfamily = opcfamily, opcintype = opcintype, opcdefault = opcdefault, opckeytype = opckeytype))
  def pgCatalogPgOperator(oid: PgOperatorId, oprcode: TypoRegproc, oprrest: TypoRegproc, oprjoin: TypoRegproc, oprname: String = random.alphanumeric.take(20).mkString, oprnamespace: /* oid */ Long = random.nextLong(), oprowner: /* oid */ Long = random.nextLong(), oprkind: String = random.alphanumeric.take(20).mkString, oprcanmerge: Boolean = random.nextBoolean(), oprcanhash: Boolean = random.nextBoolean(), oprleft: /* oid */ Long = random.nextLong(), oprright: /* oid */ Long = random.nextLong(), oprresult: /* oid */ Long = random.nextLong(), oprcom: /* oid */ Long = random.nextLong(), oprnegate: /* oid */ Long = random.nextLong())(implicit c: Connection): PgOperatorRow = PgOperatorRepoImpl.insert(new PgOperatorRow(oid = oid, oprcode = oprcode, oprrest = oprrest, oprjoin = oprjoin, oprname = oprname, oprnamespace = oprnamespace, oprowner = oprowner, oprkind = oprkind, oprcanmerge = oprcanmerge, oprcanhash = oprcanhash, oprleft = oprleft, oprright = oprright, oprresult = oprresult, oprcom = oprcom, oprnegate = oprnegate))
  def pgCatalogPgOpfamily(oid: PgOpfamilyId, opfmethod: /* oid */ Long = random.nextLong(), opfname: String = random.alphanumeric.take(20).mkString, opfnamespace: /* oid */ Long = random.nextLong(), opfowner: /* oid */ Long = random.nextLong())(implicit c: Connection): PgOpfamilyRow = PgOpfamilyRepoImpl.insert(new PgOpfamilyRow(oid = oid, opfmethod = opfmethod, opfname = opfname, opfnamespace = opfnamespace, opfowner = opfowner))
  def pgCatalogPgPartitionedTable(partrelid: PgPartitionedTableId, partattrs: TypoInt2Vector, partclass: TypoOidVector, partcollation: TypoOidVector, partstrat: String = random.alphanumeric.take(20).mkString, partnatts: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), partdefid: /* oid */ Long = random.nextLong(), partexprs: Option[TypoPgNodeTree] = None)(implicit c: Connection): PgPartitionedTableRow = PgPartitionedTableRepoImpl.insert(new PgPartitionedTableRow(partrelid = partrelid, partattrs = partattrs, partclass = partclass, partcollation = partcollation, partstrat = partstrat, partnatts = partnatts, partdefid = partdefid, partexprs = partexprs))
  def pgCatalogPgPolicy(oid: PgPolicyId, polname: String = random.alphanumeric.take(20).mkString, polrelid: /* oid */ Long = random.nextLong(), polcmd: String = random.alphanumeric.take(20).mkString, polpermissive: Boolean = random.nextBoolean(), polroles: Array[/* oid */ Long] = Array.fill(random.nextInt(3))(random.nextLong()), polqual: Option[TypoPgNodeTree] = None, polwithcheck: Option[TypoPgNodeTree] = None)(implicit c: Connection): PgPolicyRow = PgPolicyRepoImpl.insert(new PgPolicyRow(oid = oid, polname = polname, polrelid = polrelid, polcmd = polcmd, polpermissive = polpermissive, polroles = polroles, polqual = polqual, polwithcheck = polwithcheck))
  def pgCatalogPgProc(oid: PgProcId, prosupport: TypoRegproc, proargtypes: TypoOidVector, proname: String = random.alphanumeric.take(20).mkString, pronamespace: /* oid */ Long = random.nextLong(), proowner: /* oid */ Long = random.nextLong(), prolang: /* oid */ Long = random.nextLong(), procost: Float = random.nextFloat(), prorows: Float = random.nextFloat(), provariadic: /* oid */ Long = random.nextLong(), prokind: String = random.alphanumeric.take(20).mkString, prosecdef: Boolean = random.nextBoolean(), proleakproof: Boolean = random.nextBoolean(), proisstrict: Boolean = random.nextBoolean(), proretset: Boolean = random.nextBoolean(), provolatile: String = random.alphanumeric.take(20).mkString, proparallel: String = random.alphanumeric.take(20).mkString, pronargs: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), pronargdefaults: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), prorettype: /* oid */ Long = random.nextLong(), proallargtypes: Option[Array[/* oid */ Long]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextLong())), proargmodes: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), proargnames: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), proargdefaults: Option[TypoPgNodeTree] = None, protrftypes: Option[Array[/* oid */ Long]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextLong())), prosrc: String = random.alphanumeric.take(20).mkString, probin: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), prosqlbody: Option[TypoPgNodeTree] = None, proconfig: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), proacl: Option[Array[TypoAclItem]] = None)(implicit c: Connection): PgProcRow = PgProcRepoImpl.insert(new PgProcRow(oid = oid, prosupport = prosupport, proargtypes = proargtypes, proname = proname, pronamespace = pronamespace, proowner = proowner, prolang = prolang, procost = procost, prorows = prorows, provariadic = provariadic, prokind = prokind, prosecdef = prosecdef, proleakproof = proleakproof, proisstrict = proisstrict, proretset = proretset, provolatile = provolatile, proparallel = proparallel, pronargs = pronargs, pronargdefaults = pronargdefaults, prorettype = prorettype, proallargtypes = proallargtypes, proargmodes = proargmodes, proargnames = proargnames, proargdefaults = proargdefaults, protrftypes = protrftypes, prosrc = prosrc, probin = probin, prosqlbody = prosqlbody, proconfig = proconfig, proacl = proacl))
  def pgCatalogPgPublication(oid: PgPublicationId, pubname: String = random.alphanumeric.take(20).mkString, pubowner: /* oid */ Long = random.nextLong(), puballtables: Boolean = random.nextBoolean(), pubinsert: Boolean = random.nextBoolean(), pubupdate: Boolean = random.nextBoolean(), pubdelete: Boolean = random.nextBoolean(), pubtruncate: Boolean = random.nextBoolean(), pubviaroot: Boolean = random.nextBoolean())(implicit c: Connection): PgPublicationRow = PgPublicationRepoImpl.insert(new PgPublicationRow(oid = oid, pubname = pubname, pubowner = pubowner, puballtables = puballtables, pubinsert = pubinsert, pubupdate = pubupdate, pubdelete = pubdelete, pubtruncate = pubtruncate, pubviaroot = pubviaroot))
  def pgCatalogPgPublicationRel(oid: PgPublicationRelId, prpubid: /* oid */ Long = random.nextLong(), prrelid: /* oid */ Long = random.nextLong())(implicit c: Connection): PgPublicationRelRow = PgPublicationRelRepoImpl.insert(new PgPublicationRelRow(oid = oid, prpubid = prpubid, prrelid = prrelid))
  def pgCatalogPgRange(rngtypid: PgRangeId, rngcanonical: TypoRegproc, rngsubdiff: TypoRegproc, rngsubtype: /* oid */ Long = random.nextLong(), rngmultitypid: /* oid */ Long = random.nextLong(), rngcollation: /* oid */ Long = random.nextLong(), rngsubopc: /* oid */ Long = random.nextLong())(implicit c: Connection): PgRangeRow = PgRangeRepoImpl.insert(new PgRangeRow(rngtypid = rngtypid, rngcanonical = rngcanonical, rngsubdiff = rngsubdiff, rngsubtype = rngsubtype, rngmultitypid = rngmultitypid, rngcollation = rngcollation, rngsubopc = rngsubopc))
  def pgCatalogPgReplicationOrigin(roident: PgReplicationOriginId, roname: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgReplicationOriginRow = PgReplicationOriginRepoImpl.insert(new PgReplicationOriginRow(roident = roident, roname = roname))
  def pgCatalogPgRewrite(oid: PgRewriteId, evQual: TypoPgNodeTree, evAction: TypoPgNodeTree, rulename: String = random.alphanumeric.take(20).mkString, evClass: /* oid */ Long = random.nextLong(), evType: String = random.alphanumeric.take(20).mkString, evEnabled: String = random.alphanumeric.take(20).mkString, isInstead: Boolean = random.nextBoolean())(implicit c: Connection): PgRewriteRow = PgRewriteRepoImpl.insert(new PgRewriteRow(oid = oid, evQual = evQual, evAction = evAction, rulename = rulename, evClass = evClass, evType = evType, evEnabled = evEnabled, isInstead = isInstead))
  def pgCatalogPgSeclabel(objoid: /* oid */ Long = random.nextLong(), classoid: /* oid */ Long = random.nextLong(), objsubid: Int = random.nextInt(), provider: String = random.alphanumeric.take(20).mkString, label: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgSeclabelRow = PgSeclabelRepoImpl.insert(new PgSeclabelRow(objoid = objoid, classoid = classoid, objsubid = objsubid, provider = provider, label = label))
  def pgCatalogPgSequence(seqrelid: PgSequenceId, seqtypid: /* oid */ Long = random.nextLong(), seqstart: Long = random.nextLong(), seqincrement: Long = random.nextLong(), seqmax: Long = random.nextLong(), seqmin: Long = random.nextLong(), seqcache: Long = random.nextLong(), seqcycle: Boolean = random.nextBoolean())(implicit c: Connection): PgSequenceRow = PgSequenceRepoImpl.insert(new PgSequenceRow(seqrelid = seqrelid, seqtypid = seqtypid, seqstart = seqstart, seqincrement = seqincrement, seqmax = seqmax, seqmin = seqmin, seqcache = seqcache, seqcycle = seqcycle))
  def pgCatalogPgShdepend(dbid: /* oid */ Long = random.nextLong(), classid: /* oid */ Long = random.nextLong(), objid: /* oid */ Long = random.nextLong(), objsubid: Int = random.nextInt(), refclassid: /* oid */ Long = random.nextLong(), refobjid: /* oid */ Long = random.nextLong(), deptype: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgShdependRow = PgShdependRepoImpl.insert(new PgShdependRow(dbid = dbid, classid = classid, objid = objid, objsubid = objsubid, refclassid = refclassid, refobjid = refobjid, deptype = deptype))
  def pgCatalogPgShdescription(objoid: /* oid */ Long = random.nextLong(), classoid: /* oid */ Long = random.nextLong(), description: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgShdescriptionRow = PgShdescriptionRepoImpl.insert(new PgShdescriptionRow(objoid = objoid, classoid = classoid, description = description))
  def pgCatalogPgShseclabel(objoid: /* oid */ Long = random.nextLong(), classoid: /* oid */ Long = random.nextLong(), provider: String = random.alphanumeric.take(20).mkString, label: String = random.alphanumeric.take(20).mkString)(implicit c: Connection): PgShseclabelRow = PgShseclabelRepoImpl.insert(new PgShseclabelRow(objoid = objoid, classoid = classoid, provider = provider, label = label))
  def pgCatalogPgStatistic(starelid: /* oid */ Long = random.nextLong(), staattnum: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), stainherit: Boolean = random.nextBoolean(), stanullfrac: Float = random.nextFloat(), stawidth: Int = random.nextInt(), stadistinct: Float = random.nextFloat(), stakind1: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), stakind2: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), stakind3: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), stakind4: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), stakind5: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), staop1: /* oid */ Long = random.nextLong(), staop2: /* oid */ Long = random.nextLong(), staop3: /* oid */ Long = random.nextLong(), staop4: /* oid */ Long = random.nextLong(), staop5: /* oid */ Long = random.nextLong(), stacoll1: /* oid */ Long = random.nextLong(), stacoll2: /* oid */ Long = random.nextLong(), stacoll3: /* oid */ Long = random.nextLong(), stacoll4: /* oid */ Long = random.nextLong(), stacoll5: /* oid */ Long = random.nextLong(), stanumbers1: Option[Array[Float]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextFloat())), stanumbers2: Option[Array[Float]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextFloat())), stanumbers3: Option[Array[Float]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextFloat())), stanumbers4: Option[Array[Float]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextFloat())), stanumbers5: Option[Array[Float]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextFloat())), stavalues1: Option[TypoAnyArray] = None, stavalues2: Option[TypoAnyArray] = None, stavalues3: Option[TypoAnyArray] = None, stavalues4: Option[TypoAnyArray] = None, stavalues5: Option[TypoAnyArray] = None)(implicit c: Connection): PgStatisticRow = PgStatisticRepoImpl.insert(new PgStatisticRow(starelid = starelid, staattnum = staattnum, stainherit = stainherit, stanullfrac = stanullfrac, stawidth = stawidth, stadistinct = stadistinct, stakind1 = stakind1, stakind2 = stakind2, stakind3 = stakind3, stakind4 = stakind4, stakind5 = stakind5, staop1 = staop1, staop2 = staop2, staop3 = staop3, staop4 = staop4, staop5 = staop5, stacoll1 = stacoll1, stacoll2 = stacoll2, stacoll3 = stacoll3, stacoll4 = stacoll4, stacoll5 = stacoll5, stanumbers1 = stanumbers1, stanumbers2 = stanumbers2, stanumbers3 = stanumbers3, stanumbers4 = stanumbers4, stanumbers5 = stanumbers5, stavalues1 = stavalues1, stavalues2 = stavalues2, stavalues3 = stavalues3, stavalues4 = stavalues4, stavalues5 = stavalues5))
  def pgCatalogPgStatisticExt(oid: PgStatisticExtId, stxkeys: TypoInt2Vector, stxrelid: /* oid */ Long = random.nextLong(), stxname: String = random.alphanumeric.take(20).mkString, stxnamespace: /* oid */ Long = random.nextLong(), stxowner: /* oid */ Long = random.nextLong(), stxstattarget: Int = random.nextInt(), stxkind: Array[String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString), stxexprs: Option[TypoPgNodeTree] = None)(implicit c: Connection): PgStatisticExtRow = PgStatisticExtRepoImpl.insert(new PgStatisticExtRow(oid = oid, stxkeys = stxkeys, stxrelid = stxrelid, stxname = stxname, stxnamespace = stxnamespace, stxowner = stxowner, stxstattarget = stxstattarget, stxkind = stxkind, stxexprs = stxexprs))
  def pgCatalogPgStatisticExtData(stxoid: PgStatisticExtDataId, stxdndistinct: Option[TypoUnknownPgNdistinct] = None, stxddependencies: Option[TypoUnknownPgDependencies] = None, stxdmcv: Option[TypoUnknownPgMcvList] = None, stxdexpr: Option[Array[TypoUnknownPgStatistic]] = None)(implicit c: Connection): PgStatisticExtDataRow = PgStatisticExtDataRepoImpl.insert(new PgStatisticExtDataRow(stxoid = stxoid, stxdndistinct = stxdndistinct, stxddependencies = stxddependencies, stxdmcv = stxdmcv, stxdexpr = stxdexpr))
  def pgCatalogPgSubscription(oid: PgSubscriptionId, subdbid: /* oid */ Long = random.nextLong(), subname: String = random.alphanumeric.take(20).mkString, subowner: /* oid */ Long = random.nextLong(), subenabled: Boolean = random.nextBoolean(), subbinary: Boolean = random.nextBoolean(), substream: Boolean = random.nextBoolean(), subconninfo: String = random.alphanumeric.take(20).mkString, subslotname: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), subsynccommit: String = random.alphanumeric.take(20).mkString, subpublications: Array[String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString))(implicit c: Connection): PgSubscriptionRow = PgSubscriptionRepoImpl.insert(new PgSubscriptionRow(oid = oid, subdbid = subdbid, subname = subname, subowner = subowner, subenabled = subenabled, subbinary = subbinary, substream = substream, subconninfo = subconninfo, subslotname = subslotname, subsynccommit = subsynccommit, subpublications = subpublications))
  def pgCatalogPgSubscriptionRel(srsubid: /* oid */ Long = random.nextLong(), srrelid: /* oid */ Long = random.nextLong(), srsubstate: String = random.alphanumeric.take(20).mkString, srsublsn: Option[/* pg_lsn */ Long] = if (random.nextBoolean()) None else Some(random.nextLong()))(implicit c: Connection): PgSubscriptionRelRow = PgSubscriptionRelRepoImpl.insert(new PgSubscriptionRelRow(srsubid = srsubid, srrelid = srrelid, srsubstate = srsubstate, srsublsn = srsublsn))
  def pgCatalogPgTablespace(oid: PgTablespaceId, spcname: String = random.alphanumeric.take(20).mkString, spcowner: /* oid */ Long = random.nextLong(), spcacl: Option[Array[TypoAclItem]] = None, spcoptions: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)))(implicit c: Connection): PgTablespaceRow = PgTablespaceRepoImpl.insert(new PgTablespaceRow(oid = oid, spcname = spcname, spcowner = spcowner, spcacl = spcacl, spcoptions = spcoptions))
  def pgCatalogPgTransform(oid: PgTransformId, trffromsql: TypoRegproc, trftosql: TypoRegproc, trftype: /* oid */ Long = random.nextLong(), trflang: /* oid */ Long = random.nextLong())(implicit c: Connection): PgTransformRow = PgTransformRepoImpl.insert(new PgTransformRow(oid = oid, trffromsql = trffromsql, trftosql = trftosql, trftype = trftype, trflang = trflang))
  def pgCatalogPgTrigger(oid: PgTriggerId, tgattr: TypoInt2Vector, tgargs: TypoBytea, tgrelid: /* oid */ Long = random.nextLong(), tgparentid: /* oid */ Long = random.nextLong(), tgname: String = random.alphanumeric.take(20).mkString, tgfoid: /* oid */ Long = random.nextLong(), tgtype: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), tgenabled: String = random.alphanumeric.take(20).mkString, tgisinternal: Boolean = random.nextBoolean(), tgconstrrelid: /* oid */ Long = random.nextLong(), tgconstrindid: /* oid */ Long = random.nextLong(), tgconstraint: /* oid */ Long = random.nextLong(), tgdeferrable: Boolean = random.nextBoolean(), tginitdeferred: Boolean = random.nextBoolean(), tgnargs: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), tgqual: Option[TypoPgNodeTree] = None, tgoldtable: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), tgnewtable: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString))(implicit c: Connection): PgTriggerRow = PgTriggerRepoImpl.insert(new PgTriggerRow(oid = oid, tgattr = tgattr, tgargs = tgargs, tgrelid = tgrelid, tgparentid = tgparentid, tgname = tgname, tgfoid = tgfoid, tgtype = tgtype, tgenabled = tgenabled, tgisinternal = tgisinternal, tgconstrrelid = tgconstrrelid, tgconstrindid = tgconstrindid, tgconstraint = tgconstraint, tgdeferrable = tgdeferrable, tginitdeferred = tginitdeferred, tgnargs = tgnargs, tgqual = tgqual, tgoldtable = tgoldtable, tgnewtable = tgnewtable))
  def pgCatalogPgTsConfig(oid: PgTsConfigId, cfgname: String = random.alphanumeric.take(20).mkString, cfgnamespace: /* oid */ Long = random.nextLong(), cfgowner: /* oid */ Long = random.nextLong(), cfgparser: /* oid */ Long = random.nextLong())(implicit c: Connection): PgTsConfigRow = PgTsConfigRepoImpl.insert(new PgTsConfigRow(oid = oid, cfgname = cfgname, cfgnamespace = cfgnamespace, cfgowner = cfgowner, cfgparser = cfgparser))
  def pgCatalogPgTsConfigMap(mapcfg: /* oid */ Long = random.nextLong(), maptokentype: Int = random.nextInt(), mapseqno: Int = random.nextInt(), mapdict: /* oid */ Long = random.nextLong())(implicit c: Connection): PgTsConfigMapRow = PgTsConfigMapRepoImpl.insert(new PgTsConfigMapRow(mapcfg = mapcfg, maptokentype = maptokentype, mapseqno = mapseqno, mapdict = mapdict))
  def pgCatalogPgTsDict(oid: PgTsDictId, dictname: String = random.alphanumeric.take(20).mkString, dictnamespace: /* oid */ Long = random.nextLong(), dictowner: /* oid */ Long = random.nextLong(), dicttemplate: /* oid */ Long = random.nextLong(), dictinitoption: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString))(implicit c: Connection): PgTsDictRow = PgTsDictRepoImpl.insert(new PgTsDictRow(oid = oid, dictname = dictname, dictnamespace = dictnamespace, dictowner = dictowner, dicttemplate = dicttemplate, dictinitoption = dictinitoption))
  def pgCatalogPgTsParser(oid: PgTsParserId, prsstart: TypoRegproc, prstoken: TypoRegproc, prsend: TypoRegproc, prsheadline: TypoRegproc, prslextype: TypoRegproc, prsname: String = random.alphanumeric.take(20).mkString, prsnamespace: /* oid */ Long = random.nextLong())(implicit c: Connection): PgTsParserRow = PgTsParserRepoImpl.insert(new PgTsParserRow(oid = oid, prsstart = prsstart, prstoken = prstoken, prsend = prsend, prsheadline = prsheadline, prslextype = prslextype, prsname = prsname, prsnamespace = prsnamespace))
  def pgCatalogPgTsTemplate(oid: PgTsTemplateId, tmplinit: TypoRegproc, tmpllexize: TypoRegproc, tmplname: String = random.alphanumeric.take(20).mkString, tmplnamespace: /* oid */ Long = random.nextLong())(implicit c: Connection): PgTsTemplateRow = PgTsTemplateRepoImpl.insert(new PgTsTemplateRow(oid = oid, tmplinit = tmplinit, tmpllexize = tmpllexize, tmplname = tmplname, tmplnamespace = tmplnamespace))
  def pgCatalogPgType(oid: PgTypeId, typsubscript: TypoRegproc, typinput: TypoRegproc, typoutput: TypoRegproc, typreceive: TypoRegproc, typsend: TypoRegproc, typmodin: TypoRegproc, typmodout: TypoRegproc, typanalyze: TypoRegproc, typname: String = random.alphanumeric.take(20).mkString, typnamespace: /* oid */ Long = random.nextLong(), typowner: /* oid */ Long = random.nextLong(), typlen: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), typbyval: Boolean = random.nextBoolean(), typtype: String = random.alphanumeric.take(20).mkString, typcategory: String = random.alphanumeric.take(20).mkString, typispreferred: Boolean = random.nextBoolean(), typisdefined: Boolean = random.nextBoolean(), typdelim: String = random.alphanumeric.take(20).mkString, typrelid: /* oid */ Long = random.nextLong(), typelem: /* oid */ Long = random.nextLong(), typarray: /* oid */ Long = random.nextLong(), typalign: String = random.alphanumeric.take(20).mkString, typstorage: String = random.alphanumeric.take(20).mkString, typnotnull: Boolean = random.nextBoolean(), typbasetype: /* oid */ Long = random.nextLong(), typtypmod: Int = random.nextInt(), typndims: Int = random.nextInt(), typcollation: /* oid */ Long = random.nextLong(), typdefaultbin: Option[TypoPgNodeTree] = None, typdefault: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), typacl: Option[Array[TypoAclItem]] = None)(implicit c: Connection): PgTypeRow = PgTypeRepoImpl.insert(new PgTypeRow(oid = oid, typsubscript = typsubscript, typinput = typinput, typoutput = typoutput, typreceive = typreceive, typsend = typsend, typmodin = typmodin, typmodout = typmodout, typanalyze = typanalyze, typname = typname, typnamespace = typnamespace, typowner = typowner, typlen = typlen, typbyval = typbyval, typtype = typtype, typcategory = typcategory, typispreferred = typispreferred, typisdefined = typisdefined, typdelim = typdelim, typrelid = typrelid, typelem = typelem, typarray = typarray, typalign = typalign, typstorage = typstorage, typnotnull = typnotnull, typbasetype = typbasetype, typtypmod = typtypmod, typndims = typndims, typcollation = typcollation, typdefaultbin = typdefaultbin, typdefault = typdefault, typacl = typacl))
  def pgCatalogPgUserMapping(oid: PgUserMappingId, umuser: /* oid */ Long = random.nextLong(), umserver: /* oid */ Long = random.nextLong(), umoptions: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)))(implicit c: Connection): PgUserMappingRow = PgUserMappingRepoImpl.insert(new PgUserMappingRow(oid = oid, umuser = umuser, umserver = umserver, umoptions = umoptions))
  def productionBillofmaterials(componentid: ProductId, unitmeasurecode: UnitmeasureId, productassemblyid: Option[ProductId] = None, enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), bomlevel: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), billofmaterialsid: Defaulted[BillofmaterialsId] = Defaulted.UseDefault, startdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, perassemblyqty: Defaulted[BigDecimal] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): BillofmaterialsRow = BillofmaterialsRepoImpl.insert(new BillofmaterialsRowUnsaved(componentid = componentid, unitmeasurecode = unitmeasurecode, productassemblyid = productassemblyid, enddate = enddate, bomlevel = bomlevel, billofmaterialsid = billofmaterialsid, startdate = startdate, perassemblyqty = perassemblyqty, modifieddate = modifieddate))
  def productionCulture(cultureid: CultureId, name: Name = Name(random.alphanumeric.take(20).mkString), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): CultureRow = CultureRepoImpl.insert(new CultureRowUnsaved(cultureid = cultureid, name = name, modifieddate = modifieddate))
  def productionDocument(owner: BusinessentityId, title: /* max 50 chars */ String = random.alphanumeric.take(20).mkString, filename: /* max 400 chars */ String = random.alphanumeric.take(20).mkString, fileextension: Option[/* max 8 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(8).mkString), revision: /* bpchar, max 5 chars */ String = random.alphanumeric.take(5).mkString, status: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), documentsummary: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), document: Option[TypoBytea] = None, folderflag: Defaulted[Flag] = Defaulted.UseDefault, changenumber: Defaulted[Int] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, documentnode: Defaulted[DocumentId] = Defaulted.UseDefault)(implicit c: Connection): DocumentRow = DocumentRepoImpl.insert(new DocumentRowUnsaved(owner = owner, title = title, filename = filename, fileextension = fileextension, revision = revision, status = status, documentsummary = documentsummary, document = document, folderflag = folderflag, changenumber = changenumber, rowguid = rowguid, modifieddate = modifieddate, documentnode = documentnode))
  def productionIllustration(diagram: Option[TypoXml] = None, illustrationid: Defaulted[IllustrationId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): IllustrationRow = IllustrationRepoImpl.insert(new IllustrationRowUnsaved(diagram = diagram, illustrationid = illustrationid, modifieddate = modifieddate))
  def productionLocation(name: Name = Name(random.alphanumeric.take(20).mkString), locationid: Defaulted[LocationId] = Defaulted.UseDefault, costrate: Defaulted[BigDecimal] = Defaulted.UseDefault, availability: Defaulted[BigDecimal] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): LocationRow = LocationRepoImpl.insert(new LocationRowUnsaved(name = name, locationid = locationid, costrate = costrate, availability = availability, modifieddate = modifieddate))
  def productionProduct(name: Name = Name(random.alphanumeric.take(20).mkString), productnumber: /* max 25 chars */ String = random.alphanumeric.take(20).mkString, color: Option[/* max 15 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(15).mkString), safetystocklevel: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), reorderpoint: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), standardcost: BigDecimal = BigDecimal.decimal(random.nextDouble()), listprice: BigDecimal = BigDecimal.decimal(random.nextDouble()), size: Option[/* max 5 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(5).mkString), sizeunitmeasurecode: Option[UnitmeasureId] = None, weightunitmeasurecode: Option[UnitmeasureId] = None, weight: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())), daystomanufacture: Int = random.nextInt(), productline: Option[/* bpchar, max 2 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(2).mkString), `class`: Option[/* bpchar, max 2 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(2).mkString), style: Option[/* bpchar, max 2 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(2).mkString), productsubcategoryid: Option[ProductsubcategoryId] = None, productmodelid: Option[ProductmodelId] = None, sellstartdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), sellenddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), discontinueddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), productid: Defaulted[ProductId] = Defaulted.UseDefault, makeflag: Defaulted[Flag] = Defaulted.UseDefault, finishedgoodsflag: Defaulted[Flag] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductRow = ProductRepoImpl.insert(new ProductRowUnsaved(name = name, productnumber = productnumber, color = color, safetystocklevel = safetystocklevel, reorderpoint = reorderpoint, standardcost = standardcost, listprice = listprice, size = size, sizeunitmeasurecode = sizeunitmeasurecode, weightunitmeasurecode = weightunitmeasurecode, weight = weight, daystomanufacture = daystomanufacture, productline = productline, `class` = `class`, style = style, productsubcategoryid = productsubcategoryid, productmodelid = productmodelid, sellstartdate = sellstartdate, sellenddate = sellenddate, discontinueddate = discontinueddate, productid = productid, makeflag = makeflag, finishedgoodsflag = finishedgoodsflag, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductcategory(name: Name = Name(random.alphanumeric.take(20).mkString), productcategoryid: Defaulted[ProductcategoryId] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductcategoryRow = ProductcategoryRepoImpl.insert(new ProductcategoryRowUnsaved(name = name, productcategoryid = productcategoryid, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductcosthistory(productid: ProductId, startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), standardcost: BigDecimal = BigDecimal.decimal(random.nextDouble()), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductcosthistoryRow = ProductcosthistoryRepoImpl.insert(new ProductcosthistoryRowUnsaved(productid = productid, startdate = startdate, enddate = enddate, standardcost = standardcost, modifieddate = modifieddate))
  def productionProductdescription(description: /* max 400 chars */ String = random.alphanumeric.take(20).mkString, productdescriptionid: Defaulted[ProductdescriptionId] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductdescriptionRow = ProductdescriptionRepoImpl.insert(new ProductdescriptionRowUnsaved(description = description, productdescriptionid = productdescriptionid, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductdocument(productid: ProductId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, documentnode: Defaulted[DocumentId] = Defaulted.UseDefault)(implicit c: Connection): ProductdocumentRow = ProductdocumentRepoImpl.insert(new ProductdocumentRowUnsaved(productid = productid, modifieddate = modifieddate, documentnode = documentnode))
  def productionProductinventory(productid: ProductId, locationid: LocationId, shelf: /* max 10 chars */ String = random.alphanumeric.take(10).mkString, bin: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), quantity: Defaulted[TypoShort] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductinventoryRow = ProductinventoryRepoImpl.insert(new ProductinventoryRowUnsaved(productid = productid, locationid = locationid, shelf = shelf, bin = bin, quantity = quantity, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductlistpricehistory(productid: ProductId, startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), listprice: BigDecimal = BigDecimal.decimal(random.nextDouble()), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductlistpricehistoryRow = ProductlistpricehistoryRepoImpl.insert(new ProductlistpricehistoryRowUnsaved(productid = productid, startdate = startdate, enddate = enddate, listprice = listprice, modifieddate = modifieddate))
  def productionProductmodel(name: Name = Name(random.alphanumeric.take(20).mkString), catalogdescription: Option[TypoXml] = None, instructions: Option[TypoXml] = None, productmodelid: Defaulted[ProductmodelId] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductmodelRow = ProductmodelRepoImpl.insert(new ProductmodelRowUnsaved(name = name, catalogdescription = catalogdescription, instructions = instructions, productmodelid = productmodelid, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductmodelillustration(productmodelid: ProductmodelId, illustrationid: IllustrationId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductmodelillustrationRow = ProductmodelillustrationRepoImpl.insert(new ProductmodelillustrationRowUnsaved(productmodelid = productmodelid, illustrationid = illustrationid, modifieddate = modifieddate))
  def productionProductmodelproductdescriptionculture(productmodelid: ProductmodelId, productdescriptionid: ProductdescriptionId, cultureid: CultureId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductmodelproductdescriptioncultureRow = ProductmodelproductdescriptioncultureRepoImpl.insert(new ProductmodelproductdescriptioncultureRowUnsaved(productmodelid = productmodelid, productdescriptionid = productdescriptionid, cultureid = cultureid, modifieddate = modifieddate))
  def productionProductphoto(thumbnailphoto: Option[TypoBytea] = None, thumbnailphotofilename: Option[/* max 50 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), largephoto: Option[TypoBytea] = None, largephotofilename: Option[/* max 50 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), productphotoid: Defaulted[ProductphotoId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductphotoRow = ProductphotoRepoImpl.insert(new ProductphotoRowUnsaved(thumbnailphoto = thumbnailphoto, thumbnailphotofilename = thumbnailphotofilename, largephoto = largephoto, largephotofilename = largephotofilename, productphotoid = productphotoid, modifieddate = modifieddate))
  def productionProductproductphoto(productid: ProductId, productphotoid: ProductphotoId, primary: Defaulted[Flag] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductproductphotoRow = ProductproductphotoRepoImpl.insert(new ProductproductphotoRowUnsaved(productid = productid, productphotoid = productphotoid, primary = primary, modifieddate = modifieddate))
  def productionProductreview(productid: ProductId, reviewername: Name = Name(random.alphanumeric.take(20).mkString), emailaddress: /* max 50 chars */ String = random.alphanumeric.take(20).mkString, rating: Int = random.nextInt(), comments: Option[/* max 3850 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), productreviewid: Defaulted[ProductreviewId] = Defaulted.UseDefault, reviewdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductreviewRow = ProductreviewRepoImpl.insert(new ProductreviewRowUnsaved(productid = productid, reviewername = reviewername, emailaddress = emailaddress, rating = rating, comments = comments, productreviewid = productreviewid, reviewdate = reviewdate, modifieddate = modifieddate))
  def productionProductsubcategory(productcategoryid: ProductcategoryId, name: Name = Name(random.alphanumeric.take(20).mkString), productsubcategoryid: Defaulted[ProductsubcategoryId] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductsubcategoryRow = ProductsubcategoryRepoImpl.insert(new ProductsubcategoryRowUnsaved(productcategoryid = productcategoryid, name = name, productsubcategoryid = productsubcategoryid, rowguid = rowguid, modifieddate = modifieddate))
  def productionScrapreason(name: Name = Name(random.alphanumeric.take(20).mkString), scrapreasonid: Defaulted[ScrapreasonId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ScrapreasonRow = ScrapreasonRepoImpl.insert(new ScrapreasonRowUnsaved(name = name, scrapreasonid = scrapreasonid, modifieddate = modifieddate))
  def productionTransactionhistory(productid: ProductId, referenceorderid: Int = random.nextInt(), transactiontype: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString, quantity: Int = random.nextInt(), actualcost: BigDecimal = BigDecimal.decimal(random.nextDouble()), transactionid: Defaulted[TransactionhistoryId] = Defaulted.UseDefault, referenceorderlineid: Defaulted[Int] = Defaulted.UseDefault, transactiondate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): TransactionhistoryRow = TransactionhistoryRepoImpl.insert(new TransactionhistoryRowUnsaved(productid = productid, referenceorderid = referenceorderid, transactiontype = transactiontype, quantity = quantity, actualcost = actualcost, transactionid = transactionid, referenceorderlineid = referenceorderlineid, transactiondate = transactiondate, modifieddate = modifieddate))
  def productionTransactionhistoryarchive(transactionid: TransactionhistoryarchiveId, productid: Int = random.nextInt(), referenceorderid: Int = random.nextInt(), transactiontype: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString, quantity: Int = random.nextInt(), actualcost: BigDecimal = BigDecimal.decimal(random.nextDouble()), referenceorderlineid: Defaulted[Int] = Defaulted.UseDefault, transactiondate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): TransactionhistoryarchiveRow = TransactionhistoryarchiveRepoImpl.insert(new TransactionhistoryarchiveRowUnsaved(transactionid = transactionid, productid = productid, referenceorderid = referenceorderid, transactiontype = transactiontype, quantity = quantity, actualcost = actualcost, referenceorderlineid = referenceorderlineid, transactiondate = transactiondate, modifieddate = modifieddate))
  def productionUnitmeasure(unitmeasurecode: UnitmeasureId, name: Name = Name(random.alphanumeric.take(20).mkString), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): UnitmeasureRow = UnitmeasureRepoImpl.insert(new UnitmeasureRowUnsaved(unitmeasurecode = unitmeasurecode, name = name, modifieddate = modifieddate))
  def productionWorkorder(productid: ProductId, orderqty: Int = random.nextInt(), scrappedqty: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), duedate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), scrapreasonid: Option[ScrapreasonId] = None, workorderid: Defaulted[WorkorderId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): WorkorderRow = WorkorderRepoImpl.insert(new WorkorderRowUnsaved(productid = productid, orderqty = orderqty, scrappedqty = scrappedqty, startdate = startdate, enddate = enddate, duedate = duedate, scrapreasonid = scrapreasonid, workorderid = workorderid, modifieddate = modifieddate))
  def productionWorkorderrouting(workorderid: WorkorderId, locationid: LocationId, productid: Int = random.nextInt(), operationsequence: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), scheduledstartdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), scheduledenddate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), actualstartdate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), actualenddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), actualresourcehrs: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())), plannedcost: BigDecimal = BigDecimal.decimal(random.nextDouble()), actualcost: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): WorkorderroutingRow = WorkorderroutingRepoImpl.insert(new WorkorderroutingRowUnsaved(workorderid = workorderid, locationid = locationid, productid = productid, operationsequence = operationsequence, scheduledstartdate = scheduledstartdate, scheduledenddate = scheduledenddate, actualstartdate = actualstartdate, actualenddate = actualenddate, actualresourcehrs = actualresourcehrs, plannedcost = plannedcost, actualcost = actualcost, modifieddate = modifieddate))
  def publicPgtest(box: TypoBox, bytea: TypoBytea, circle: TypoCircle, hstore: TypoHStore, inet: TypoInet, int2vector: TypoInt2Vector, interval: TypoInterval, json: TypoJson, jsonb: TypoJsonb, line: TypoLine, lseg: TypoLineSegment, money: TypoMoney, path: TypoPath, point: TypoPoint, polygon: TypoPolygon, uuid: TypoUUID, vector: TypoVector, xml: TypoXml, boxes: Array[TypoBox], circlees: Array[TypoCircle], inetes: Array[TypoInet], int2vectores: Array[TypoInt2Vector], intervales: Array[TypoInterval], jsones: Array[TypoJson], jsonbes: Array[TypoJsonb], linees: Array[TypoLine], lseges: Array[TypoLineSegment], moneyes: Array[TypoMoney], pathes: Array[TypoPath], pointes: Array[TypoPoint], polygones: Array[TypoPolygon], uuides: Array[TypoUUID], xmles: Array[TypoXml], bool: Boolean = random.nextBoolean(), bpchar: /* bpchar, max 3 chars */ String = random.alphanumeric.take(3).mkString, char: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString, date: TypoLocalDate = TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)), float4: Float = random.nextFloat(), float8: Double = random.nextDouble(), int2: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), int4: Int = random.nextInt(), int8: Long = random.nextLong(), mydomain: Mydomain = Mydomain(random.alphanumeric.take(20).mkString), myenum: Myenum = Myenum.All(random.nextInt(Myenum.All.length)), name: String = random.alphanumeric.take(20).mkString, numeric: BigDecimal = BigDecimal.decimal(random.nextDouble()), text: String = random.alphanumeric.take(20).mkString, time: TypoLocalTime = TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)), timestamp: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), timestampz: TypoInstant = TypoInstant(Instant.ofEpochMilli(random.nextLong())), timez: TypoOffsetTime = TypoOffsetTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong).atOffset(ZoneOffset.ofHours(random.nextInt(24) - 12))), varchar: String = random.alphanumeric.take(20).mkString, bpchares: Array[/* bpchar */ String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString), chares: Array[/* bpchar */ String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString), datees: Array[TypoLocalDate] = Array.fill(random.nextInt(3))(TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong))), float4es: Array[Float] = Array.fill(random.nextInt(3))(random.nextFloat()), float8es: Array[Double] = Array.fill(random.nextInt(3))(random.nextDouble()), int2es: Array[TypoShort] = Array.fill(random.nextInt(3))(TypoShort(random.nextInt(Short.MaxValue).toShort)), int4es: Array[Int] = Array.fill(random.nextInt(3))(random.nextInt()), int8es: Array[Long] = Array.fill(random.nextInt(3))(random.nextLong()), myenumes: Array[Myenum] = Array.fill(random.nextInt(3))(Myenum.All(random.nextInt(Myenum.All.length))), namees: Array[String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString), numerices: Array[BigDecimal] = Array.fill(random.nextInt(3))(BigDecimal.decimal(random.nextDouble())), textes: Array[String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString), timees: Array[TypoLocalTime] = Array.fill(random.nextInt(3))(TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), timestampes: Array[TypoLocalDateTime] = Array.fill(random.nextInt(3))(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), timestampzes: Array[TypoInstant] = Array.fill(random.nextInt(3))(TypoInstant(Instant.ofEpochMilli(random.nextLong()))), timezes: Array[TypoOffsetTime] = Array.fill(random.nextInt(3))(TypoOffsetTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong).atOffset(ZoneOffset.ofHours(random.nextInt(24) - 12)))), varchares: Array[String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString))(implicit c: Connection): PgtestRow = PgtestRepoImpl.insert(new PgtestRow(box = box, bytea = bytea, circle = circle, hstore = hstore, inet = inet, int2vector = int2vector, interval = interval, json = json, jsonb = jsonb, line = line, lseg = lseg, money = money, path = path, point = point, polygon = polygon, uuid = uuid, vector = vector, xml = xml, boxes = boxes, circlees = circlees, inetes = inetes, int2vectores = int2vectores, intervales = intervales, jsones = jsones, jsonbes = jsonbes, linees = linees, lseges = lseges, moneyes = moneyes, pathes = pathes, pointes = pointes, polygones = polygones, uuides = uuides, xmles = xmles, bool = bool, bpchar = bpchar, char = char, date = date, float4 = float4, float8 = float8, int2 = int2, int4 = int4, int8 = int8, mydomain = mydomain, myenum = myenum, name = name, numeric = numeric, text = text, time = time, timestamp = timestamp, timestampz = timestampz, timez = timez, varchar = varchar, bpchares = bpchares, chares = chares, datees = datees, float4es = float4es, float8es = float8es, int2es = int2es, int4es = int4es, int8es = int8es, myenumes = myenumes, namees = namees, numerices = numerices, textes = textes, timees = timees, timestampes = timestampes, timestampzes = timestampzes, timezes = timezes, varchares = varchares))
  def publicPgtestnull(bool: Option[Boolean] = if (random.nextBoolean()) None else Some(random.nextBoolean()), box: Option[TypoBox] = None, bpchar: Option[/* bpchar, max 3 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(3).mkString), bytea: Option[TypoBytea] = None, char: Option[/* bpchar, max 1 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(1).mkString), circle: Option[TypoCircle] = None, date: Option[TypoLocalDate] = if (random.nextBoolean()) None else Some(TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong))), float4: Option[Float] = if (random.nextBoolean()) None else Some(random.nextFloat()), float8: Option[Double] = if (random.nextBoolean()) None else Some(random.nextDouble()), hstore: Option[TypoHStore] = None, inet: Option[TypoInet] = None, int2: Option[TypoShort] = if (random.nextBoolean()) None else Some(TypoShort(random.nextInt(Short.MaxValue).toShort)), int2vector: Option[TypoInt2Vector] = None, int4: Option[Int] = if (random.nextBoolean()) None else Some(random.nextInt()), int8: Option[Long] = if (random.nextBoolean()) None else Some(random.nextLong()), interval: Option[TypoInterval] = None, json: Option[TypoJson] = None, jsonb: Option[TypoJsonb] = None, line: Option[TypoLine] = None, lseg: Option[TypoLineSegment] = None, money: Option[TypoMoney] = None, mydomain: Option[Mydomain] = if (random.nextBoolean()) None else Some(Mydomain(random.alphanumeric.take(20).mkString)), myenum: Option[Myenum] = if (random.nextBoolean()) None else Some(Myenum.All(random.nextInt(Myenum.All.length))), name: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), numeric: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())), path: Option[TypoPath] = None, point: Option[TypoPoint] = None, polygon: Option[TypoPolygon] = None, text: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), time: Option[TypoLocalTime] = if (random.nextBoolean()) None else Some(TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), timestamp: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), timestampz: Option[TypoInstant] = if (random.nextBoolean()) None else Some(TypoInstant(Instant.ofEpochMilli(random.nextLong()))), timez: Option[TypoOffsetTime] = if (random.nextBoolean()) None else Some(TypoOffsetTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong).atOffset(ZoneOffset.ofHours(random.nextInt(24) - 12)))), uuid: Option[TypoUUID] = None, varchar: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), vector: Option[TypoVector] = None, xml: Option[TypoXml] = None, boxes: Option[Array[TypoBox]] = None, bpchares: Option[Array[/* bpchar */ String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), chares: Option[Array[/* bpchar */ String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), circlees: Option[Array[TypoCircle]] = None, datees: Option[Array[TypoLocalDate]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)))), float4es: Option[Array[Float]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextFloat())), float8es: Option[Array[Double]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextDouble())), inetes: Option[Array[TypoInet]] = None, int2es: Option[Array[TypoShort]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoShort(random.nextInt(Short.MaxValue).toShort))), int2vectores: Option[Array[TypoInt2Vector]] = None, int4es: Option[Array[Int]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextInt())), int8es: Option[Array[Long]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextLong())), intervales: Option[Array[TypoInterval]] = None, jsones: Option[Array[TypoJson]] = None, jsonbes: Option[Array[TypoJsonb]] = None, linees: Option[Array[TypoLine]] = None, lseges: Option[Array[TypoLineSegment]] = None, moneyes: Option[Array[TypoMoney]] = None, myenumes: Option[Array[Myenum]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(Myenum.All(random.nextInt(Myenum.All.length)))), namees: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), numerices: Option[Array[BigDecimal]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(BigDecimal.decimal(random.nextDouble()))), pathes: Option[Array[TypoPath]] = None, pointes: Option[Array[TypoPoint]] = None, polygones: Option[Array[TypoPolygon]] = None, textes: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), timees: Option[Array[TypoLocalTime]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), timestampes: Option[Array[TypoLocalDateTime]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))))), timestampzes: Option[Array[TypoInstant]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoInstant(Instant.ofEpochMilli(random.nextLong())))), timezes: Option[Array[TypoOffsetTime]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoOffsetTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong).atOffset(ZoneOffset.ofHours(random.nextInt(24) - 12))))), uuides: Option[Array[TypoUUID]] = None, varchares: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)), xmles: Option[Array[TypoXml]] = None)(implicit c: Connection): PgtestnullRow = PgtestnullRepoImpl.insert(new PgtestnullRow(bool = bool, box = box, bpchar = bpchar, bytea = bytea, char = char, circle = circle, date = date, float4 = float4, float8 = float8, hstore = hstore, inet = inet, int2 = int2, int2vector = int2vector, int4 = int4, int8 = int8, interval = interval, json = json, jsonb = jsonb, line = line, lseg = lseg, money = money, mydomain = mydomain, myenum = myenum, name = name, numeric = numeric, path = path, point = point, polygon = polygon, text = text, time = time, timestamp = timestamp, timestampz = timestampz, timez = timez, uuid = uuid, varchar = varchar, vector = vector, xml = xml, boxes = boxes, bpchares = bpchares, chares = chares, circlees = circlees, datees = datees, float4es = float4es, float8es = float8es, inetes = inetes, int2es = int2es, int2vectores = int2vectores, int4es = int4es, int8es = int8es, intervales = intervales, jsones = jsones, jsonbes = jsonbes, linees = linees, lseges = lseges, moneyes = moneyes, myenumes = myenumes, namees = namees, numerices = numerices, pathes = pathes, pointes = pointes, polygones = polygones, textes = textes, timees = timees, timestampes = timestampes, timestampzes = timestampzes, timezes = timezes, uuides = uuides, varchares = varchares, xmles = xmles))
  def publicUsers(userId: UsersId, email: TypoUnknownCitext, name: String = random.alphanumeric.take(20).mkString, lastName: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), password: String = random.alphanumeric.take(20).mkString, verifiedOn: Option[TypoInstant] = if (random.nextBoolean()) None else Some(TypoInstant(Instant.ofEpochMilli(random.nextLong()))), createdAt: Defaulted[TypoInstant] = Defaulted.UseDefault)(implicit c: Connection): UsersRow = UsersRepoImpl.insert(new UsersRowUnsaved(userId = userId, email = email, name = name, lastName = lastName, password = password, verifiedOn = verifiedOn, createdAt = createdAt))
  def purchasingProductvendor(productid: ProductId, businessentityid: BusinessentityId, unitmeasurecode: UnitmeasureId, averageleadtime: Int = random.nextInt(), standardprice: BigDecimal = BigDecimal.decimal(random.nextDouble()), lastreceiptcost: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())), lastreceiptdate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), minorderqty: Int = random.nextInt(), maxorderqty: Int = random.nextInt(), onorderqty: Option[Int] = if (random.nextBoolean()) None else Some(random.nextInt()), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ProductvendorRow = ProductvendorRepoImpl.insert(new ProductvendorRowUnsaved(productid = productid, businessentityid = businessentityid, unitmeasurecode = unitmeasurecode, averageleadtime = averageleadtime, standardprice = standardprice, lastreceiptcost = lastreceiptcost, lastreceiptdate = lastreceiptdate, minorderqty = minorderqty, maxorderqty = maxorderqty, onorderqty = onorderqty, modifieddate = modifieddate))
  def purchasingPurchaseorderdetail(purchaseorderid: PurchaseorderheaderId, productid: ProductId, duedate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), orderqty: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), unitprice: BigDecimal = BigDecimal.decimal(random.nextDouble()), receivedqty: BigDecimal = BigDecimal.decimal(random.nextDouble()), rejectedqty: BigDecimal = BigDecimal.decimal(random.nextDouble()), purchaseorderdetailid: Defaulted[Int] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): PurchaseorderdetailRow = PurchaseorderdetailRepoImpl.insert(new PurchaseorderdetailRowUnsaved(purchaseorderid = purchaseorderid, productid = productid, duedate = duedate, orderqty = orderqty, unitprice = unitprice, receivedqty = receivedqty, rejectedqty = rejectedqty, purchaseorderdetailid = purchaseorderdetailid, modifieddate = modifieddate))
  def purchasingPurchaseorderheader(employeeid: BusinessentityId, vendorid: BusinessentityId, shipmethodid: ShipmethodId, shipdate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), purchaseorderid: Defaulted[PurchaseorderheaderId] = Defaulted.UseDefault, revisionnumber: Defaulted[TypoShort] = Defaulted.UseDefault, status: Defaulted[TypoShort] = Defaulted.UseDefault, orderdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, subtotal: Defaulted[BigDecimal] = Defaulted.UseDefault, taxamt: Defaulted[BigDecimal] = Defaulted.UseDefault, freight: Defaulted[BigDecimal] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): PurchaseorderheaderRow = PurchaseorderheaderRepoImpl.insert(new PurchaseorderheaderRowUnsaved(employeeid = employeeid, vendorid = vendorid, shipmethodid = shipmethodid, shipdate = shipdate, purchaseorderid = purchaseorderid, revisionnumber = revisionnumber, status = status, orderdate = orderdate, subtotal = subtotal, taxamt = taxamt, freight = freight, modifieddate = modifieddate))
  def purchasingShipmethod(name: Name = Name(random.alphanumeric.take(20).mkString), shipmethodid: Defaulted[ShipmethodId] = Defaulted.UseDefault, shipbase: Defaulted[BigDecimal] = Defaulted.UseDefault, shiprate: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ShipmethodRow = ShipmethodRepoImpl.insert(new ShipmethodRowUnsaved(name = name, shipmethodid = shipmethodid, shipbase = shipbase, shiprate = shiprate, rowguid = rowguid, modifieddate = modifieddate))
  def purchasingVendor(businessentityid: BusinessentityId, accountnumber: AccountNumber = AccountNumber(random.alphanumeric.take(20).mkString), name: Name = Name(random.alphanumeric.take(20).mkString), creditrating: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), purchasingwebserviceurl: Option[/* max 1024 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), preferredvendorstatus: Defaulted[Flag] = Defaulted.UseDefault, activeflag: Defaulted[Flag] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): VendorRow = VendorRepoImpl.insert(new VendorRowUnsaved(businessentityid = businessentityid, accountnumber = accountnumber, name = name, creditrating = creditrating, purchasingwebserviceurl = purchasingwebserviceurl, preferredvendorstatus = preferredvendorstatus, activeflag = activeflag, modifieddate = modifieddate))
  def salesCountryregioncurrency(countryregioncode: CountryregionId, currencycode: CurrencyId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): CountryregioncurrencyRow = CountryregioncurrencyRepoImpl.insert(new CountryregioncurrencyRowUnsaved(countryregioncode = countryregioncode, currencycode = currencycode, modifieddate = modifieddate))
  def salesCreditcard(cardtype: /* max 50 chars */ String = random.alphanumeric.take(20).mkString, cardnumber: /* max 25 chars */ String = random.alphanumeric.take(20).mkString, expmonth: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), expyear: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), creditcardid: Defaulted[/* user-picked */ CustomCreditcardId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): CreditcardRow = CreditcardRepoImpl.insert(new CreditcardRowUnsaved(cardtype = cardtype, cardnumber = cardnumber, expmonth = expmonth, expyear = expyear, creditcardid = creditcardid, modifieddate = modifieddate))
  def salesCurrency(currencycode: CurrencyId, name: Name = Name(random.alphanumeric.take(20).mkString), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): CurrencyRow = CurrencyRepoImpl.insert(new CurrencyRowUnsaved(currencycode = currencycode, name = name, modifieddate = modifieddate))
  def salesCurrencyrate(fromcurrencycode: CurrencyId, tocurrencycode: CurrencyId, currencyratedate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), averagerate: BigDecimal = BigDecimal.decimal(random.nextDouble()), endofdayrate: BigDecimal = BigDecimal.decimal(random.nextDouble()), currencyrateid: Defaulted[CurrencyrateId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): CurrencyrateRow = CurrencyrateRepoImpl.insert(new CurrencyrateRowUnsaved(fromcurrencycode = fromcurrencycode, tocurrencycode = tocurrencycode, currencyratedate = currencyratedate, averagerate = averagerate, endofdayrate = endofdayrate, currencyrateid = currencyrateid, modifieddate = modifieddate))
  def salesCustomer(personid: Option[BusinessentityId] = None, storeid: Option[BusinessentityId] = None, territoryid: Option[SalesterritoryId] = None, customerid: Defaulted[CustomerId] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): CustomerRow = CustomerRepoImpl.insert(new CustomerRowUnsaved(personid = personid, storeid = storeid, territoryid = territoryid, customerid = customerid, rowguid = rowguid, modifieddate = modifieddate))
  def salesPersoncreditcard(businessentityid: BusinessentityId, creditcardid: /* user-picked */ CustomCreditcardId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): PersoncreditcardRow = PersoncreditcardRepoImpl.insert(new PersoncreditcardRowUnsaved(businessentityid = businessentityid, creditcardid = creditcardid, modifieddate = modifieddate))
  def salesSalesorderdetail(salesorderid: SalesorderheaderId, productid: ProductId, specialofferid: SpecialofferId, carriertrackingnumber: Option[/* max 25 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), orderqty: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), unitprice: BigDecimal = BigDecimal.decimal(random.nextDouble()), salesorderdetailid: Defaulted[Int] = Defaulted.UseDefault, unitpricediscount: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SalesorderdetailRow = SalesorderdetailRepoImpl.insert(new SalesorderdetailRowUnsaved(salesorderid = salesorderid, productid = productid, specialofferid = specialofferid, carriertrackingnumber = carriertrackingnumber, orderqty = orderqty, unitprice = unitprice, salesorderdetailid = salesorderdetailid, unitpricediscount = unitpricediscount, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesorderheader(customerid: CustomerId, billtoaddressid: AddressId, shiptoaddressid: AddressId, shipmethodid: ShipmethodId, duedate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), shipdate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), purchaseordernumber: Option[OrderNumber] = if (random.nextBoolean()) None else Some(OrderNumber(random.alphanumeric.take(20).mkString)), accountnumber: Option[AccountNumber] = if (random.nextBoolean()) None else Some(AccountNumber(random.alphanumeric.take(20).mkString)), salespersonid: Option[BusinessentityId] = None, territoryid: Option[SalesterritoryId] = None, creditcardid: Option[/* user-picked */ CustomCreditcardId] = None, creditcardapprovalcode: Option[/* max 15 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(15).mkString), currencyrateid: Option[CurrencyrateId] = None, totaldue: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())), comment: Option[/* max 128 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString), salesorderid: Defaulted[SalesorderheaderId] = Defaulted.UseDefault, revisionnumber: Defaulted[TypoShort] = Defaulted.UseDefault, orderdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, status: Defaulted[TypoShort] = Defaulted.UseDefault, onlineorderflag: Defaulted[Flag] = Defaulted.UseDefault, subtotal: Defaulted[BigDecimal] = Defaulted.UseDefault, taxamt: Defaulted[BigDecimal] = Defaulted.UseDefault, freight: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SalesorderheaderRow = SalesorderheaderRepoImpl.insert(new SalesorderheaderRowUnsaved(customerid = customerid, billtoaddressid = billtoaddressid, shiptoaddressid = shiptoaddressid, shipmethodid = shipmethodid, duedate = duedate, shipdate = shipdate, purchaseordernumber = purchaseordernumber, accountnumber = accountnumber, salespersonid = salespersonid, territoryid = territoryid, creditcardid = creditcardid, creditcardapprovalcode = creditcardapprovalcode, currencyrateid = currencyrateid, totaldue = totaldue, comment = comment, salesorderid = salesorderid, revisionnumber = revisionnumber, orderdate = orderdate, status = status, onlineorderflag = onlineorderflag, subtotal = subtotal, taxamt = taxamt, freight = freight, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesorderheadersalesreason(salesorderid: SalesorderheaderId, salesreasonid: SalesreasonId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SalesorderheadersalesreasonRow = SalesorderheadersalesreasonRepoImpl.insert(new SalesorderheadersalesreasonRowUnsaved(salesorderid = salesorderid, salesreasonid = salesreasonid, modifieddate = modifieddate))
  def salesSalesperson(businessentityid: BusinessentityId, territoryid: Option[SalesterritoryId] = None, salesquota: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())), bonus: Defaulted[BigDecimal] = Defaulted.UseDefault, commissionpct: Defaulted[BigDecimal] = Defaulted.UseDefault, salesytd: Defaulted[BigDecimal] = Defaulted.UseDefault, saleslastyear: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SalespersonRow = SalespersonRepoImpl.insert(new SalespersonRowUnsaved(businessentityid = businessentityid, territoryid = territoryid, salesquota = salesquota, bonus = bonus, commissionpct = commissionpct, salesytd = salesytd, saleslastyear = saleslastyear, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalespersonquotahistory(businessentityid: BusinessentityId, quotadate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), salesquota: BigDecimal = BigDecimal.decimal(random.nextDouble()), rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SalespersonquotahistoryRow = SalespersonquotahistoryRepoImpl.insert(new SalespersonquotahistoryRowUnsaved(businessentityid = businessentityid, quotadate = quotadate, salesquota = salesquota, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesreason(name: Name = Name(random.alphanumeric.take(20).mkString), reasontype: Name = Name(random.alphanumeric.take(20).mkString), salesreasonid: Defaulted[SalesreasonId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SalesreasonRow = SalesreasonRepoImpl.insert(new SalesreasonRowUnsaved(name = name, reasontype = reasontype, salesreasonid = salesreasonid, modifieddate = modifieddate))
  def salesSalestaxrate(stateprovinceid: StateprovinceId, taxtype: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort), name: Name = Name(random.alphanumeric.take(20).mkString), salestaxrateid: Defaulted[SalestaxrateId] = Defaulted.UseDefault, taxrate: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SalestaxrateRow = SalestaxrateRepoImpl.insert(new SalestaxrateRowUnsaved(stateprovinceid = stateprovinceid, taxtype = taxtype, name = name, salestaxrateid = salestaxrateid, taxrate = taxrate, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesterritory(countryregioncode: CountryregionId, name: Name = Name(random.alphanumeric.take(20).mkString), group: /* max 50 chars */ String = random.alphanumeric.take(20).mkString, territoryid: Defaulted[SalesterritoryId] = Defaulted.UseDefault, salesytd: Defaulted[BigDecimal] = Defaulted.UseDefault, saleslastyear: Defaulted[BigDecimal] = Defaulted.UseDefault, costytd: Defaulted[BigDecimal] = Defaulted.UseDefault, costlastyear: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SalesterritoryRow = SalesterritoryRepoImpl.insert(new SalesterritoryRowUnsaved(countryregioncode = countryregioncode, name = name, group = group, territoryid = territoryid, salesytd = salesytd, saleslastyear = saleslastyear, costytd = costytd, costlastyear = costlastyear, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesterritoryhistory(businessentityid: BusinessentityId, territoryid: SalesterritoryId, startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))), rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SalesterritoryhistoryRow = SalesterritoryhistoryRepoImpl.insert(new SalesterritoryhistoryRowUnsaved(businessentityid = businessentityid, territoryid = territoryid, startdate = startdate, enddate = enddate, rowguid = rowguid, modifieddate = modifieddate))
  def salesShoppingcartitem(productid: ProductId, shoppingcartid: /* max 50 chars */ String = random.alphanumeric.take(20).mkString, shoppingcartitemid: Defaulted[ShoppingcartitemId] = Defaulted.UseDefault, quantity: Defaulted[Int] = Defaulted.UseDefault, datecreated: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): ShoppingcartitemRow = ShoppingcartitemRepoImpl.insert(new ShoppingcartitemRowUnsaved(productid = productid, shoppingcartid = shoppingcartid, shoppingcartitemid = shoppingcartitemid, quantity = quantity, datecreated = datecreated, modifieddate = modifieddate))
  def salesSpecialoffer(description: /* max 255 chars */ String = random.alphanumeric.take(20).mkString, `type`: /* max 50 chars */ String = random.alphanumeric.take(20).mkString, category: /* max 50 chars */ String = random.alphanumeric.take(20).mkString, startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), enddate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))), maxqty: Option[Int] = if (random.nextBoolean()) None else Some(random.nextInt()), specialofferid: Defaulted[SpecialofferId] = Defaulted.UseDefault, discountpct: Defaulted[BigDecimal] = Defaulted.UseDefault, minqty: Defaulted[Int] = Defaulted.UseDefault, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SpecialofferRow = SpecialofferRepoImpl.insert(new SpecialofferRowUnsaved(description = description, `type` = `type`, category = category, startdate = startdate, enddate = enddate, maxqty = maxqty, specialofferid = specialofferid, discountpct = discountpct, minqty = minqty, rowguid = rowguid, modifieddate = modifieddate))
  def salesSpecialofferproduct(specialofferid: SpecialofferId, productid: ProductId, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): SpecialofferproductRow = SpecialofferproductRepoImpl.insert(new SpecialofferproductRowUnsaved(specialofferid = specialofferid, productid = productid, rowguid = rowguid, modifieddate = modifieddate))
  def salesStore(businessentityid: BusinessentityId, name: Name = Name(random.alphanumeric.take(20).mkString), salespersonid: Option[BusinessentityId] = None, demographics: Option[TypoXml] = None, rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault)(implicit c: Connection): StoreRow = StoreRepoImpl.insert(new StoreRowUnsaved(businessentityid = businessentityid, name = name, salespersonid = salespersonid, demographics = demographics, rowguid = rowguid, modifieddate = modifieddate))
}