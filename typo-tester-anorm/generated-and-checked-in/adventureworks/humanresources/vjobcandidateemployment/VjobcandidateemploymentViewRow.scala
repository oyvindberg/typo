/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidateemployment

import adventureworks.customtypes.TypoLocalDate
import adventureworks.humanresources.jobcandidate.JobcandidateId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** View: humanresources.vjobcandidateemployment */
case class VjobcandidateemploymentViewRow(
  /** Points to [[jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: JobcandidateId,
  EmpStartDate: /* nullability unknown */ Option[TypoLocalDate],
  EmpEndDate: /* nullability unknown */ Option[TypoLocalDate],
  EmpOrgName: /* nullability unknown */ Option[/* max 100 chars */ String],
  EmpJobTitle: /* nullability unknown */ Option[/* max 100 chars */ String],
  EmpResponsibility: /* nullability unknown */ Option[String],
  EmpFunctionCategory: /* nullability unknown */ Option[String],
  EmpIndustryCategory: /* nullability unknown */ Option[String],
  EmpLocCountryRegion: /* nullability unknown */ Option[String],
  EmpLocState: /* nullability unknown */ Option[String],
  EmpLocCity: /* nullability unknown */ Option[String]
)

object VjobcandidateemploymentViewRow {
  implicit lazy val reads: Reads[VjobcandidateemploymentViewRow] = Reads[VjobcandidateemploymentViewRow](json => JsResult.fromTry(
      Try(
        VjobcandidateemploymentViewRow(
          jobcandidateid = json.\("jobcandidateid").as(JobcandidateId.reads),
          EmpStartDate = json.\("Emp.StartDate").toOption.map(_.as(TypoLocalDate.reads)),
          EmpEndDate = json.\("Emp.EndDate").toOption.map(_.as(TypoLocalDate.reads)),
          EmpOrgName = json.\("Emp.OrgName").toOption.map(_.as(Reads.StringReads)),
          EmpJobTitle = json.\("Emp.JobTitle").toOption.map(_.as(Reads.StringReads)),
          EmpResponsibility = json.\("Emp.Responsibility").toOption.map(_.as(Reads.StringReads)),
          EmpFunctionCategory = json.\("Emp.FunctionCategory").toOption.map(_.as(Reads.StringReads)),
          EmpIndustryCategory = json.\("Emp.IndustryCategory").toOption.map(_.as(Reads.StringReads)),
          EmpLocCountryRegion = json.\("Emp.Loc.CountryRegion").toOption.map(_.as(Reads.StringReads)),
          EmpLocState = json.\("Emp.Loc.State").toOption.map(_.as(Reads.StringReads)),
          EmpLocCity = json.\("Emp.Loc.City").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VjobcandidateemploymentViewRow] = RowParser[VjobcandidateemploymentViewRow] { row =>
    Success(
      VjobcandidateemploymentViewRow(
        jobcandidateid = row(idx + 0)(JobcandidateId.column),
        EmpStartDate = row(idx + 1)(Column.columnToOption(TypoLocalDate.column)),
        EmpEndDate = row(idx + 2)(Column.columnToOption(TypoLocalDate.column)),
        EmpOrgName = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        EmpJobTitle = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        EmpResponsibility = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        EmpFunctionCategory = row(idx + 6)(Column.columnToOption(Column.columnToString)),
        EmpIndustryCategory = row(idx + 7)(Column.columnToOption(Column.columnToString)),
        EmpLocCountryRegion = row(idx + 8)(Column.columnToOption(Column.columnToString)),
        EmpLocState = row(idx + 9)(Column.columnToOption(Column.columnToString)),
        EmpLocCity = row(idx + 10)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit lazy val writes: OWrites[VjobcandidateemploymentViewRow] = OWrites[VjobcandidateemploymentViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "jobcandidateid" -> JobcandidateId.writes.writes(o.jobcandidateid),
      "Emp.StartDate" -> Writes.OptionWrites(TypoLocalDate.writes).writes(o.EmpStartDate),
      "Emp.EndDate" -> Writes.OptionWrites(TypoLocalDate.writes).writes(o.EmpEndDate),
      "Emp.OrgName" -> Writes.OptionWrites(Writes.StringWrites).writes(o.EmpOrgName),
      "Emp.JobTitle" -> Writes.OptionWrites(Writes.StringWrites).writes(o.EmpJobTitle),
      "Emp.Responsibility" -> Writes.OptionWrites(Writes.StringWrites).writes(o.EmpResponsibility),
      "Emp.FunctionCategory" -> Writes.OptionWrites(Writes.StringWrites).writes(o.EmpFunctionCategory),
      "Emp.IndustryCategory" -> Writes.OptionWrites(Writes.StringWrites).writes(o.EmpIndustryCategory),
      "Emp.Loc.CountryRegion" -> Writes.OptionWrites(Writes.StringWrites).writes(o.EmpLocCountryRegion),
      "Emp.Loc.State" -> Writes.OptionWrites(Writes.StringWrites).writes(o.EmpLocState),
      "Emp.Loc.City" -> Writes.OptionWrites(Writes.StringWrites).writes(o.EmpLocCity)
    ))
  )
}
