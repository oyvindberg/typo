/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product

import adventureworks.customtypes.TypoUUID
import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Type for the primary key of table `frontpage.product` */
case class ProductId(value: TypoUUID) extends AnyVal
object ProductId {
  implicit lazy val arrayColumn: Column[Array[ProductId]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[ProductId]] = TypoUUID.arrayToStatement.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[ProductId, TypoUUID] = Bijection[ProductId, TypoUUID](_.value)(ProductId.apply)
  implicit lazy val column: Column[ProductId] = TypoUUID.column.map(ProductId.apply)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[ProductId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[ProductId] = new ParameterMetaData[ProductId] {
    override def sqlType: String = TypoUUID.parameterMetadata.sqlType
    override def jdbcType: Int = TypoUUID.parameterMetadata.jdbcType
  }
  implicit lazy val reads: Reads[ProductId] = TypoUUID.reads.map(ProductId.apply)
  implicit lazy val text: Text[ProductId] = new Text[ProductId] {
    override def unsafeEncode(v: ProductId, sb: StringBuilder) = TypoUUID.text.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: ProductId, sb: StringBuilder) = TypoUUID.text.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[ProductId] = TypoUUID.toStatement.contramap(_.value)
  implicit lazy val writes: Writes[ProductId] = TypoUUID.writes.contramap(_.value)
}
