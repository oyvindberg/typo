/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** This class corresponds to a row in table `frontpage.product` which has not been persisted yet */
case class ProductRowUnsaved(
  name: String,
  price: BigDecimal,
  lastRestocked: Option[TypoLocalDateTime],
  /** Default: gen_random_uuid() */
  id: Defaulted[ProductId] = Defaulted.UseDefault,
  /** Default: true */
  inStock: Defaulted[Option[Boolean]] = Defaulted.UseDefault,
  /** Default: 0 */
  quantity: Defaulted[Option[Int]] = Defaulted.UseDefault,
  /** Default: now() */
  lastModified: Defaulted[Option[TypoLocalDateTime]] = Defaulted.UseDefault,
  /** Default: '{}'::text[] */
  tags: Defaulted[Option[Array[String]]] = Defaulted.UseDefault,
  /** Default: '{}'::integer[] */
  categories: Defaulted[Option[Array[Int]]] = Defaulted.UseDefault,
  /** Default: '{}'::numeric[] */
  prices: Defaulted[Option[Array[BigDecimal]]] = Defaulted.UseDefault,
  /** Default: '{}'::jsonb[] */
  attributes: Defaulted[Option[Array[TypoJsonb]]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => ProductId, inStockDefault: => Option[Boolean], quantityDefault: => Option[Int], lastModifiedDefault: => Option[TypoLocalDateTime], tagsDefault: => Option[Array[String]], categoriesDefault: => Option[Array[Int]], pricesDefault: => Option[Array[BigDecimal]], attributesDefault: => Option[Array[TypoJsonb]]): ProductRow =
    ProductRow(
      name = name,
      price = price,
      lastRestocked = lastRestocked,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      inStock = inStock match {
                  case Defaulted.UseDefault => inStockDefault
                  case Defaulted.Provided(value) => value
                },
      quantity = quantity match {
                   case Defaulted.UseDefault => quantityDefault
                   case Defaulted.Provided(value) => value
                 },
      lastModified = lastModified match {
                       case Defaulted.UseDefault => lastModifiedDefault
                       case Defaulted.Provided(value) => value
                     },
      tags = tags match {
               case Defaulted.UseDefault => tagsDefault
               case Defaulted.Provided(value) => value
             },
      categories = categories match {
                     case Defaulted.UseDefault => categoriesDefault
                     case Defaulted.Provided(value) => value
                   },
      prices = prices match {
                 case Defaulted.UseDefault => pricesDefault
                 case Defaulted.Provided(value) => value
               },
      attributes = attributes match {
                     case Defaulted.UseDefault => attributesDefault
                     case Defaulted.Provided(value) => value
                   }
    )
}
object ProductRowUnsaved {
  implicit lazy val reads: Reads[ProductRowUnsaved] = Reads[ProductRowUnsaved](json => JsResult.fromTry(
      Try(
        ProductRowUnsaved(
          name = json.\("name").as(Reads.StringReads),
          price = json.\("price").as(Reads.bigDecReads),
          lastRestocked = json.\("last_restocked").toOption.map(_.as(TypoLocalDateTime.reads)),
          id = json.\("id").as(Defaulted.reads(ProductId.reads)),
          inStock = json.\("in_stock").as(Defaulted.readsOpt(Reads.BooleanReads)),
          quantity = json.\("quantity").as(Defaulted.readsOpt(Reads.IntReads)),
          lastModified = json.\("last_modified").as(Defaulted.readsOpt(TypoLocalDateTime.reads)),
          tags = json.\("tags").as(Defaulted.readsOpt(Reads.ArrayReads[String](using Reads.StringReads, implicitly))),
          categories = json.\("categories").as(Defaulted.readsOpt(Reads.ArrayReads[Int](using Reads.IntReads, implicitly))),
          prices = json.\("prices").as(Defaulted.readsOpt(Reads.ArrayReads[BigDecimal](using Reads.bigDecReads, implicitly))),
          attributes = json.\("attributes").as(Defaulted.readsOpt(Reads.ArrayReads[TypoJsonb](using TypoJsonb.reads, implicitly)))
        )
      )
    ),
  )
  implicit lazy val text: Text[ProductRowUnsaved] = Text.instance[ProductRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.price, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.lastRestocked, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(ProductId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.booleanInstance)).unsafeEncode(row.inStock, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.intInstance)).unsafeEncode(row.quantity, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoLocalDateTime.text)).unsafeEncode(row.lastModified, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text[Array[String]])).unsafeEncode(row.tags, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text[Array[Int]])).unsafeEncode(row.categories, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text[Array[BigDecimal]])).unsafeEncode(row.prices, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.iterableInstance[Array, TypoJsonb](TypoJsonb.text, implicitly))).unsafeEncode(row.attributes, sb)
  }
  implicit lazy val writes: OWrites[ProductRowUnsaved] = OWrites[ProductRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "name" -> Writes.StringWrites.writes(o.name),
      "price" -> Writes.BigDecimalWrites.writes(o.price),
      "last_restocked" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.lastRestocked),
      "id" -> Defaulted.writes(ProductId.writes).writes(o.id),
      "in_stock" -> Defaulted.writes(Writes.OptionWrites(Writes.BooleanWrites)).writes(o.inStock),
      "quantity" -> Defaulted.writes(Writes.OptionWrites(Writes.IntWrites)).writes(o.quantity),
      "last_modified" -> Defaulted.writes(Writes.OptionWrites(TypoLocalDateTime.writes)).writes(o.lastModified),
      "tags" -> Defaulted.writes(Writes.OptionWrites(Writes.arrayWrites[String](using implicitly, Writes.StringWrites))).writes(o.tags),
      "categories" -> Defaulted.writes(Writes.OptionWrites(Writes.arrayWrites[Int](using implicitly, Writes.IntWrites))).writes(o.categories),
      "prices" -> Defaulted.writes(Writes.OptionWrites(Writes.arrayWrites[BigDecimal](using implicitly, Writes.BigDecimalWrites))).writes(o.prices),
      "attributes" -> Defaulted.writes(Writes.OptionWrites(Writes.arrayWrites[TypoJsonb](using implicitly, TypoJsonb.writes))).writes(o.attributes)
    ))
  )
}
