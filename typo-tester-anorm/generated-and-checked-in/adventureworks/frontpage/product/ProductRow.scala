/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLocalDateTime
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: frontpage.product
    Primary key: id */
case class ProductRow(
  /** Default: gen_random_uuid() */
  id: ProductId,
  name: String,
  price: BigDecimal,
  /** Default: true */
  inStock: Option[Boolean],
  /** Default: 0 */
  quantity: Option[Int],
  lastRestocked: Option[TypoLocalDateTime],
  /** Default: now() */
  lastModified: Option[TypoLocalDateTime],
  /** Default: '{}'::text[] */
  tags: Option[Array[String]],
  /** Default: '{}'::integer[] */
  categories: Option[Array[Int]],
  /** Default: '{}'::numeric[] */
  prices: Option[Array[BigDecimal]],
  /** Default: '{}'::jsonb[] */
  attributes: Option[Array[TypoJsonb]]
){
   def toUnsavedRow(id: Defaulted[ProductId], inStock: Defaulted[Option[Boolean]] = Defaulted.Provided(this.inStock), quantity: Defaulted[Option[Int]] = Defaulted.Provided(this.quantity), lastModified: Defaulted[Option[TypoLocalDateTime]] = Defaulted.Provided(this.lastModified), tags: Defaulted[Option[Array[String]]] = Defaulted.Provided(this.tags), categories: Defaulted[Option[Array[Int]]] = Defaulted.Provided(this.categories), prices: Defaulted[Option[Array[BigDecimal]]] = Defaulted.Provided(this.prices), attributes: Defaulted[Option[Array[TypoJsonb]]] = Defaulted.Provided(this.attributes)): ProductRowUnsaved =
     ProductRowUnsaved(name, price, lastRestocked, id, inStock, quantity, lastModified, tags, categories, prices, attributes)
 }

object ProductRow {
  implicit lazy val reads: Reads[ProductRow] = Reads[ProductRow](json => JsResult.fromTry(
      Try(
        ProductRow(
          id = json.\("id").as(ProductId.reads),
          name = json.\("name").as(Reads.StringReads),
          price = json.\("price").as(Reads.bigDecReads),
          inStock = json.\("in_stock").toOption.map(_.as(Reads.BooleanReads)),
          quantity = json.\("quantity").toOption.map(_.as(Reads.IntReads)),
          lastRestocked = json.\("last_restocked").toOption.map(_.as(TypoLocalDateTime.reads)),
          lastModified = json.\("last_modified").toOption.map(_.as(TypoLocalDateTime.reads)),
          tags = json.\("tags").toOption.map(_.as(Reads.ArrayReads[String](using Reads.StringReads, implicitly))),
          categories = json.\("categories").toOption.map(_.as(Reads.ArrayReads[Int](using Reads.IntReads, implicitly))),
          prices = json.\("prices").toOption.map(_.as(Reads.ArrayReads[BigDecimal](using Reads.bigDecReads, implicitly))),
          attributes = json.\("attributes").toOption.map(_.as(Reads.ArrayReads[TypoJsonb](using TypoJsonb.reads, implicitly)))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ProductRow] = RowParser[ProductRow] { row =>
    Success(
      ProductRow(
        id = row(idx + 0)(ProductId.column),
        name = row(idx + 1)(Column.columnToString),
        price = row(idx + 2)(Column.columnToScalaBigDecimal),
        inStock = row(idx + 3)(Column.columnToOption(Column.columnToBoolean)),
        quantity = row(idx + 4)(Column.columnToOption(Column.columnToInt)),
        lastRestocked = row(idx + 5)(Column.columnToOption(TypoLocalDateTime.column)),
        lastModified = row(idx + 6)(Column.columnToOption(TypoLocalDateTime.column)),
        tags = row(idx + 7)(Column.columnToOption(Column.columnToArray[String](Column.columnToString, implicitly))),
        categories = row(idx + 8)(Column.columnToOption(Column.columnToArray[Int](Column.columnToInt, implicitly))),
        prices = row(idx + 9)(Column.columnToOption(Column.columnToArray[BigDecimal](Column.columnToScalaBigDecimal, implicitly))),
        attributes = row(idx + 10)(Column.columnToOption(TypoJsonb.arrayColumn))
      )
    )
  }
  implicit lazy val text: Text[ProductRow] = Text.instance[ProductRow]{ (row, sb) =>
    ProductId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.price, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.booleanInstance).unsafeEncode(row.inStock, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.intInstance).unsafeEncode(row.quantity, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.lastRestocked, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.lastModified, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.tags, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Int]]).unsafeEncode(row.categories, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[BigDecimal]]).unsafeEncode(row.prices, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoJsonb](TypoJsonb.text, implicitly)).unsafeEncode(row.attributes, sb)
  }
  implicit lazy val writes: OWrites[ProductRow] = OWrites[ProductRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> ProductId.writes.writes(o.id),
      "name" -> Writes.StringWrites.writes(o.name),
      "price" -> Writes.BigDecimalWrites.writes(o.price),
      "in_stock" -> Writes.OptionWrites(Writes.BooleanWrites).writes(o.inStock),
      "quantity" -> Writes.OptionWrites(Writes.IntWrites).writes(o.quantity),
      "last_restocked" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.lastRestocked),
      "last_modified" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.lastModified),
      "tags" -> Writes.OptionWrites(Writes.arrayWrites[String](using implicitly, Writes.StringWrites)).writes(o.tags),
      "categories" -> Writes.OptionWrites(Writes.arrayWrites[Int](using implicitly, Writes.IntWrites)).writes(o.categories),
      "prices" -> Writes.OptionWrites(Writes.arrayWrites[BigDecimal](using implicitly, Writes.BigDecimalWrites)).writes(o.prices),
      "attributes" -> Writes.OptionWrites(Writes.arrayWrites[TypoJsonb](using implicitly, TypoJsonb.writes)).writes(o.attributes)
    ))
  )
}
