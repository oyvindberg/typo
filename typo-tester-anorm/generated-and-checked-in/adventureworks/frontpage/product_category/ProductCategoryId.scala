/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product_category

import adventureworks.frontpage.category.CategoryId
import adventureworks.frontpage.product.ProductId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Type for the composite primary key of table `frontpage.product_category` */
case class ProductCategoryId(
  productId: ProductId,
  categoryId: CategoryId
)
object ProductCategoryId {
  implicit lazy val ordering: Ordering[ProductCategoryId] = Ordering.by(x => (x.productId, x.categoryId))
  implicit lazy val reads: Reads[ProductCategoryId] = Reads[ProductCategoryId](json => JsResult.fromTry(
      Try(
        ProductCategoryId(
          productId = json.\("product_id").as(ProductId.reads),
          categoryId = json.\("category_id").as(CategoryId.reads)
        )
      )
    ),
  )
  implicit lazy val writes: OWrites[ProductCategoryId] = OWrites[ProductCategoryId](o =>
    new JsObject(ListMap[String, JsValue](
      "product_id" -> ProductId.writes.writes(o.productId),
      "category_id" -> CategoryId.writes.writes(o.categoryId)
    ))
  )
}
