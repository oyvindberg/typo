/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product_category

import adventureworks.frontpage.category.CategoryId
import adventureworks.frontpage.product.ProductId
import anorm.BatchSql
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import scala.annotation.nowarn
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class ProductCategoryRepoImpl extends ProductCategoryRepo {
  override def delete: DeleteBuilder[ProductCategoryFields, ProductCategoryRow] = {
    DeleteBuilder(""""frontpage"."product_category"""", ProductCategoryFields.structure)
  }
  override def deleteById(compositeId: ProductCategoryId)(implicit c: Connection): Boolean = {
    SQL"""delete from "frontpage"."product_category" where "product_id" = ${ParameterValue(compositeId.productId, null, ProductId.toStatement)} AND "category_id" = ${ParameterValue(compositeId.categoryId, null, CategoryId.toStatement)}""".executeUpdate() > 0
  }
  override def deleteByIds(compositeIds: Array[ProductCategoryId])(implicit c: Connection): Int = {
    val productId = compositeIds.map(_.productId)
    val categoryId = compositeIds.map(_.categoryId)
    SQL"""delete
          from "frontpage"."product_category"
          where ("product_id", "category_id")
          in (select unnest(${productId}), unnest(${categoryId}))
       """.executeUpdate()
    
  }
  override def insert(unsaved: ProductCategoryRow)(implicit c: Connection): ProductCategoryRow = {
    SQL"""insert into "frontpage"."product_category"("product_id", "category_id")
          values (${ParameterValue(unsaved.productId, null, ProductId.toStatement)}::uuid, ${ParameterValue(unsaved.categoryId, null, CategoryId.toStatement)}::uuid)
          returning "product_id", "category_id"
       """
      .executeInsert(ProductCategoryRow.rowParser(1).single)
    
  }
  override def insertStreaming(unsaved: Iterator[ProductCategoryRow], batchSize: Int = 10000)(implicit c: Connection): Long = {
    streamingInsert(s"""COPY "frontpage"."product_category"("product_id", "category_id") FROM STDIN""", batchSize, unsaved)(ProductCategoryRow.text, c)
  }
  override def select: SelectBuilder[ProductCategoryFields, ProductCategoryRow] = {
    SelectBuilderSql(""""frontpage"."product_category"""", ProductCategoryFields.structure, ProductCategoryRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[ProductCategoryRow] = {
    SQL"""select "product_id", "category_id"
          from "frontpage"."product_category"
       """.as(ProductCategoryRow.rowParser(1).*)
  }
  override def selectById(compositeId: ProductCategoryId)(implicit c: Connection): Option[ProductCategoryRow] = {
    SQL"""select "product_id", "category_id"
          from "frontpage"."product_category"
          where "product_id" = ${ParameterValue(compositeId.productId, null, ProductId.toStatement)} AND "category_id" = ${ParameterValue(compositeId.categoryId, null, CategoryId.toStatement)}
       """.as(ProductCategoryRow.rowParser(1).singleOpt)
  }
  override def selectByIds(compositeIds: Array[ProductCategoryId])(implicit c: Connection): List[ProductCategoryRow] = {
    val productId = compositeIds.map(_.productId)
    val categoryId = compositeIds.map(_.categoryId)
    SQL"""select "product_id", "category_id"
          from "frontpage"."product_category"
          where ("product_id", "category_id")
          in (select unnest(${productId}), unnest(${categoryId}))
       """.as(ProductCategoryRow.rowParser(1).*)
    
  }
  override def selectByIdsTracked(compositeIds: Array[ProductCategoryId])(implicit c: Connection): Map[ProductCategoryId, ProductCategoryRow] = {
    val byId = selectByIds(compositeIds).view.map(x => (x.compositeId, x)).toMap
    compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
  }
  override def update: UpdateBuilder[ProductCategoryFields, ProductCategoryRow] = {
    UpdateBuilder(""""frontpage"."product_category"""", ProductCategoryFields.structure, ProductCategoryRow.rowParser)
  }
  override def upsert(unsaved: ProductCategoryRow)(implicit c: Connection): ProductCategoryRow = {
    SQL"""insert into "frontpage"."product_category"("product_id", "category_id")
          values (
            ${ParameterValue(unsaved.productId, null, ProductId.toStatement)}::uuid,
            ${ParameterValue(unsaved.categoryId, null, CategoryId.toStatement)}::uuid
          )
          on conflict ("product_id", "category_id")
          do update set "product_id" = EXCLUDED."product_id"
          returning "product_id", "category_id"
       """
      .executeInsert(ProductCategoryRow.rowParser(1).single)
    
  }
  override def upsertBatch(unsaved: Iterable[ProductCategoryRow])(implicit c: Connection): List[ProductCategoryRow] = {
    def toNamedParameter(row: ProductCategoryRow): List[NamedParameter] = List(
      NamedParameter("product_id", ParameterValue(row.productId, null, ProductId.toStatement)),
      NamedParameter("category_id", ParameterValue(row.categoryId, null, CategoryId.toStatement))
    )
    unsaved.toList match {
      case Nil => Nil
      case head :: rest =>
        new anorm.adventureworks.ExecuteReturningSyntax.Ops(
          BatchSql(
            s"""insert into "frontpage"."product_category"("product_id", "category_id")
                values ({product_id}::uuid, {category_id}::uuid)
                on conflict ("product_id", "category_id")
                do nothing
                returning "product_id", "category_id"
             """,
            toNamedParameter(head),
            rest.map(toNamedParameter)*
          )
        ).executeReturning(ProductCategoryRow.rowParser(1).*)
    }
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Iterator[ProductCategoryRow], batchSize: Int = 10000)(implicit c: Connection): Int = {
    SQL"""create temporary table product_category_TEMP (like "frontpage"."product_category") on commit drop""".execute(): @nowarn
    streamingInsert(s"""copy product_category_TEMP("product_id", "category_id") from stdin""", batchSize, unsaved)(ProductCategoryRow.text, c): @nowarn
    SQL"""insert into "frontpage"."product_category"("product_id", "category_id")
          select * from product_category_TEMP
          on conflict ("product_id", "category_id")
          do nothing
          ;
          drop table product_category_TEMP;""".executeUpdate()
  }
}
