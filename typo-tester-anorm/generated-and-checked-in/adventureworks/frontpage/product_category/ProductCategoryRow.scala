/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product_category

import adventureworks.frontpage.category.CategoryId
import adventureworks.frontpage.product.ProductId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: frontpage.product_category
    Composite primary key: product_id, category_id */
case class ProductCategoryRow(
  /** Points to [[product.ProductRow.id]] */
  productId: ProductId,
  /** Points to [[category.CategoryRow.id]] */
  categoryId: CategoryId
){
   val compositeId: ProductCategoryId = ProductCategoryId(productId, categoryId)
   val id = compositeId
 }

object ProductCategoryRow {
  def apply(compositeId: ProductCategoryId) =
    new ProductCategoryRow(compositeId.productId, compositeId.categoryId)
  implicit lazy val reads: Reads[ProductCategoryRow] = Reads[ProductCategoryRow](json => JsResult.fromTry(
      Try(
        ProductCategoryRow(
          productId = json.\("product_id").as(ProductId.reads),
          categoryId = json.\("category_id").as(CategoryId.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ProductCategoryRow] = RowParser[ProductCategoryRow] { row =>
    Success(
      ProductCategoryRow(
        productId = row(idx + 0)(ProductId.column),
        categoryId = row(idx + 1)(CategoryId.column)
      )
    )
  }
  implicit lazy val text: Text[ProductCategoryRow] = Text.instance[ProductCategoryRow]{ (row, sb) =>
    ProductId.text.unsafeEncode(row.productId, sb)
    sb.append(Text.DELIMETER)
    CategoryId.text.unsafeEncode(row.categoryId, sb)
  }
  implicit lazy val writes: OWrites[ProductCategoryRow] = OWrites[ProductCategoryRow](o =>
    new JsObject(ListMap[String, JsValue](
      "product_id" -> ProductId.writes.writes(o.productId),
      "category_id" -> CategoryId.writes.writes(o.categoryId)
    ))
  )
}
