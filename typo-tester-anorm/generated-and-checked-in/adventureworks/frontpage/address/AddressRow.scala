/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package address

import adventureworks.customtypes.Defaulted
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: frontpage.address
    Primary key: id */
case class AddressRow(
  /** Default: gen_random_uuid() */
  id: AddressId,
  city: String,
  country: String
){
   def toUnsavedRow(id: Defaulted[AddressId]): AddressRowUnsaved =
     AddressRowUnsaved(city, country, id)
 }

object AddressRow {
  implicit lazy val reads: Reads[AddressRow] = Reads[AddressRow](json => JsResult.fromTry(
      Try(
        AddressRow(
          id = json.\("id").as(AddressId.reads),
          city = json.\("city").as(Reads.StringReads),
          country = json.\("country").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[AddressRow] = RowParser[AddressRow] { row =>
    Success(
      AddressRow(
        id = row(idx + 0)(AddressId.column),
        city = row(idx + 1)(Column.columnToString),
        country = row(idx + 2)(Column.columnToString)
      )
    )
  }
  implicit lazy val text: Text[AddressRow] = Text.instance[AddressRow]{ (row, sb) =>
    AddressId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.city, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.country, sb)
  }
  implicit lazy val writes: OWrites[AddressRow] = OWrites[AddressRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> AddressId.writes.writes(o.id),
      "city" -> Writes.StringWrites.writes(o.city),
      "country" -> Writes.StringWrites.writes(o.country)
    ))
  )
}
