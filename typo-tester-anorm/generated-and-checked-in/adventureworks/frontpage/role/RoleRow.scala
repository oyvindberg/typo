/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package role

import adventureworks.customtypes.Defaulted
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: frontpage.role
    Primary key: id */
case class RoleRow(
  /** Default: gen_random_uuid() */
  id: RoleId,
  name: String
){
   def toUnsavedRow(id: Defaulted[RoleId]): RoleRowUnsaved =
     RoleRowUnsaved(name, id)
 }

object RoleRow {
  implicit lazy val reads: Reads[RoleRow] = Reads[RoleRow](json => JsResult.fromTry(
      Try(
        RoleRow(
          id = json.\("id").as(RoleId.reads),
          name = json.\("name").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[RoleRow] = RowParser[RoleRow] { row =>
    Success(
      RoleRow(
        id = row(idx + 0)(RoleId.column),
        name = row(idx + 1)(Column.columnToString)
      )
    )
  }
  implicit lazy val text: Text[RoleRow] = Text.instance[RoleRow]{ (row, sb) =>
    RoleId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
  }
  implicit lazy val writes: OWrites[RoleRow] = OWrites[RoleRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> RoleId.writes.writes(o.id),
      "name" -> Writes.StringWrites.writes(o.name)
    ))
  )
}
