/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage

import anorm.Column
import anorm.ParameterMetaData
import anorm.SqlMappingError
import anorm.ToStatement
import java.sql.Types
import play.api.libs.json.JsError
import play.api.libs.json.JsSuccess
import play.api.libs.json.JsValue
import play.api.libs.json.Reads
import play.api.libs.json.Writes

/** Enum `frontpage.user_role`
  *  - admin
  *  - manager
  *  - employee
  */
sealed abstract class UserRole(val value: String)

object UserRole {
  def apply(str: String): Either[String, UserRole] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): UserRole =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object admin extends UserRole("admin")
  case object manager extends UserRole("manager")
  case object employee extends UserRole("employee")
  val All: List[UserRole] = List(admin, manager, employee)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, UserRole] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayColumn: Column[Array[UserRole]] = Column.columnToArray[String](Column.columnToString, implicitly).map(_.map(UserRole.force))
  implicit lazy val arrayToStatement: ToStatement[Array[UserRole]] = ToStatement[Array[UserRole]]((ps, i, arr) => ps.setArray(i, ps.getConnection.createArrayOf("frontpage.user_role", arr.map[AnyRef](_.value))))
  implicit lazy val column: Column[UserRole] = Column.columnToString.mapResult(str => UserRole(str).left.map(SqlMappingError.apply))
  implicit lazy val ordering: Ordering[UserRole] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[UserRole] = new ParameterMetaData[UserRole] {
    override def sqlType: String = "frontpage.user_role"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[UserRole] = Reads[UserRole]{(value: JsValue) => value.validate(Reads.StringReads).flatMap(str => UserRole(str).fold(JsError.apply, JsSuccess(_)))}
  implicit lazy val text: Text[UserRole] = new Text[UserRole] {
    override def unsafeEncode(v: UserRole, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: UserRole, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[UserRole] = ToStatement.stringToStatement.contramap(_.value)
  implicit lazy val writes: Writes[UserRole] = Writes[UserRole](value => Writes.StringWrites.writes(value.value))
}
