/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user

import adventureworks.customtypes.TypoUUID
import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Type for the primary key of table `frontpage.user` */
case class UserId(value: TypoUUID) extends AnyVal
object UserId {
  implicit lazy val arrayColumn: Column[Array[UserId]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[UserId]] = TypoUUID.arrayToStatement.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[UserId, TypoUUID] = Bijection[UserId, TypoUUID](_.value)(UserId.apply)
  implicit lazy val column: Column[UserId] = TypoUUID.column.map(UserId.apply)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[UserId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[UserId] = new ParameterMetaData[UserId] {
    override def sqlType: String = TypoUUID.parameterMetadata.sqlType
    override def jdbcType: Int = TypoUUID.parameterMetadata.jdbcType
  }
  implicit lazy val reads: Reads[UserId] = TypoUUID.reads.map(UserId.apply)
  implicit lazy val text: Text[UserId] = new Text[UserId] {
    override def unsafeEncode(v: UserId, sb: StringBuilder) = TypoUUID.text.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: UserId, sb: StringBuilder) = TypoUUID.text.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[UserId] = TypoUUID.toStatement.contramap(_.value)
  implicit lazy val writes: Writes[UserId] = TypoUUID.writes.contramap(_.value)
}
