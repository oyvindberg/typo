/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.department.DepartmentId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** This class corresponds to a row in table `frontpage.user` which has not been persisted yet */
case class UserRowUnsaved(
  email: Email,
  name: String,
  /** Points to [[department.DepartmentRow.id]] */
  departmentId: Option[DepartmentId],
  /** Points to [[UserRow.id]] */
  managerId: Option[UserId],
  /** Default: gen_random_uuid() */
  id: Defaulted[UserId] = Defaulted.UseDefault,
  /** Default: now() */
  createdAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.UseDefault,
  /** Default: 'active'::frontpage.user_status */
  status: Defaulted[Option[UserStatus]] = Defaulted.UseDefault,
  /** Default: false */
  verified: Defaulted[Option[Boolean]] = Defaulted.UseDefault,
  /** Default: 'employee'::frontpage.user_role */
  role: Defaulted[Option[UserRole]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => UserId, createdAtDefault: => Option[TypoLocalDateTime], statusDefault: => Option[UserStatus], verifiedDefault: => Option[Boolean], roleDefault: => Option[UserRole]): UserRow =
    UserRow(
      email = email,
      name = name,
      departmentId = departmentId,
      managerId = managerId,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      createdAt = createdAt match {
                    case Defaulted.UseDefault => createdAtDefault
                    case Defaulted.Provided(value) => value
                  },
      status = status match {
                 case Defaulted.UseDefault => statusDefault
                 case Defaulted.Provided(value) => value
               },
      verified = verified match {
                   case Defaulted.UseDefault => verifiedDefault
                   case Defaulted.Provided(value) => value
                 },
      role = role match {
               case Defaulted.UseDefault => roleDefault
               case Defaulted.Provided(value) => value
             }
    )
}
object UserRowUnsaved {
  implicit lazy val reads: Reads[UserRowUnsaved] = Reads[UserRowUnsaved](json => JsResult.fromTry(
      Try(
        UserRowUnsaved(
          email = json.\("email").as(Email.reads),
          name = json.\("name").as(Reads.StringReads),
          departmentId = json.\("department_id").toOption.map(_.as(DepartmentId.reads)),
          managerId = json.\("manager_id").toOption.map(_.as(UserId.reads)),
          id = json.\("id").as(Defaulted.reads(UserId.reads)),
          createdAt = json.\("created_at").as(Defaulted.readsOpt(TypoLocalDateTime.reads)),
          status = json.\("status").as(Defaulted.readsOpt(UserStatus.reads)),
          verified = json.\("verified").as(Defaulted.readsOpt(Reads.BooleanReads)),
          role = json.\("role").as(Defaulted.readsOpt(UserRole.reads))
        )
      )
    ),
  )
  implicit lazy val text: Text[UserRowUnsaved] = Text.instance[UserRowUnsaved]{ (row, sb) =>
    Email.text.unsafeEncode(row.email, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(DepartmentId.text).unsafeEncode(row.departmentId, sb)
    sb.append(Text.DELIMETER)
    Text.option(UserId.text).unsafeEncode(row.managerId, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(UserId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoLocalDateTime.text)).unsafeEncode(row.createdAt, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(UserStatus.text)).unsafeEncode(row.status, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.booleanInstance)).unsafeEncode(row.verified, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(UserRole.text)).unsafeEncode(row.role, sb)
  }
  implicit lazy val writes: OWrites[UserRowUnsaved] = OWrites[UserRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "email" -> Email.writes.writes(o.email),
      "name" -> Writes.StringWrites.writes(o.name),
      "department_id" -> Writes.OptionWrites(DepartmentId.writes).writes(o.departmentId),
      "manager_id" -> Writes.OptionWrites(UserId.writes).writes(o.managerId),
      "id" -> Defaulted.writes(UserId.writes).writes(o.id),
      "created_at" -> Defaulted.writes(Writes.OptionWrites(TypoLocalDateTime.writes)).writes(o.createdAt),
      "status" -> Defaulted.writes(Writes.OptionWrites(UserStatus.writes)).writes(o.status),
      "verified" -> Defaulted.writes(Writes.OptionWrites(Writes.BooleanWrites)).writes(o.verified),
      "role" -> Defaulted.writes(Writes.OptionWrites(UserRole.writes)).writes(o.role)
    ))
  )
}
