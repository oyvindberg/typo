/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import java.sql.Types
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Domain `frontpage.email`
  * Constraint: CHECK ((VALUE ~ '^[^@]+@[^@]+\.[^@]+$'::text))
  */
case class Email(value: String)
object Email {
  implicit lazy val arrayColumn: Column[Array[Email]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[Email]] = ToStatement.arrayToParameter(ParameterMetaData.StringParameterMetaData).contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[Email, String] = Bijection[Email, String](_.value)(Email.apply)
  implicit lazy val column: Column[Email] = Column.columnToString.map(Email.apply)
  implicit lazy val ordering: Ordering[Email] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[Email] = new ParameterMetaData[Email] {
    override def sqlType: String = """"frontpage"."email""""
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[Email] = Reads.StringReads.map(Email.apply)
  implicit lazy val text: Text[Email] = new Text[Email] {
    override def unsafeEncode(v: Email, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: Email, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[Email] = ToStatement.stringToStatement.contramap(_.value)
  implicit lazy val writes: Writes[Email] = Writes.StringWrites.contramap(_.value)
}