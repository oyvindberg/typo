/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package location

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: frontpage.location
    Primary key: id */
case class LocationRow(
  /** Default: gen_random_uuid() */
  id: LocationId,
  name: String,
  position: Option[TypoPoint],
  area: Option[TypoPolygon],
  ipRange: Option[TypoInet],
  /** Default: '{}'::jsonb */
  metadata: Option[TypoJsonb]
){
   def toUnsavedRow(id: Defaulted[LocationId], metadata: Defaulted[Option[TypoJsonb]] = Defaulted.Provided(this.metadata)): LocationRowUnsaved =
     LocationRowUnsaved(name, position, area, ipRange, id, metadata)
 }

object LocationRow {
  implicit lazy val reads: Reads[LocationRow] = Reads[LocationRow](json => JsResult.fromTry(
      Try(
        LocationRow(
          id = json.\("id").as(LocationId.reads),
          name = json.\("name").as(Reads.StringReads),
          position = json.\("position").toOption.map(_.as(TypoPoint.reads)),
          area = json.\("area").toOption.map(_.as(TypoPolygon.reads)),
          ipRange = json.\("ip_range").toOption.map(_.as(TypoInet.reads)),
          metadata = json.\("metadata").toOption.map(_.as(TypoJsonb.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[LocationRow] = RowParser[LocationRow] { row =>
    Success(
      LocationRow(
        id = row(idx + 0)(LocationId.column),
        name = row(idx + 1)(Column.columnToString),
        position = row(idx + 2)(Column.columnToOption(TypoPoint.column)),
        area = row(idx + 3)(Column.columnToOption(TypoPolygon.column)),
        ipRange = row(idx + 4)(Column.columnToOption(TypoInet.column)),
        metadata = row(idx + 5)(Column.columnToOption(TypoJsonb.column))
      )
    )
  }
  implicit lazy val text: Text[LocationRow] = Text.instance[LocationRow]{ (row, sb) =>
    LocationId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPoint.text).unsafeEncode(row.position, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPolygon.text).unsafeEncode(row.area, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInet.text).unsafeEncode(row.ipRange, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoJsonb.text).unsafeEncode(row.metadata, sb)
  }
  implicit lazy val writes: OWrites[LocationRow] = OWrites[LocationRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> LocationId.writes.writes(o.id),
      "name" -> Writes.StringWrites.writes(o.name),
      "position" -> Writes.OptionWrites(TypoPoint.writes).writes(o.position),
      "area" -> Writes.OptionWrites(TypoPolygon.writes).writes(o.area),
      "ip_range" -> Writes.OptionWrites(TypoInet.writes).writes(o.ipRange),
      "metadata" -> Writes.OptionWrites(TypoJsonb.writes).writes(o.metadata)
    ))
  )
}
