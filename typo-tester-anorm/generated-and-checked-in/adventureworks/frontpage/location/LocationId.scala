/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package location

import adventureworks.customtypes.TypoUUID
import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Type for the primary key of table `frontpage.location` */
case class LocationId(value: TypoUUID) extends AnyVal
object LocationId {
  implicit lazy val arrayColumn: Column[Array[LocationId]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[LocationId]] = TypoUUID.arrayToStatement.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[LocationId, TypoUUID] = Bijection[LocationId, TypoUUID](_.value)(LocationId.apply)
  implicit lazy val column: Column[LocationId] = TypoUUID.column.map(LocationId.apply)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[LocationId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[LocationId] = new ParameterMetaData[LocationId] {
    override def sqlType: String = TypoUUID.parameterMetadata.sqlType
    override def jdbcType: Int = TypoUUID.parameterMetadata.jdbcType
  }
  implicit lazy val reads: Reads[LocationId] = TypoUUID.reads.map(LocationId.apply)
  implicit lazy val text: Text[LocationId] = new Text[LocationId] {
    override def unsafeEncode(v: LocationId, sb: StringBuilder) = TypoUUID.text.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: LocationId, sb: StringBuilder) = TypoUUID.text.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[LocationId] = TypoUUID.toStatement.contramap(_.value)
  implicit lazy val writes: Writes[LocationId] = TypoUUID.writes.contramap(_.value)
}
