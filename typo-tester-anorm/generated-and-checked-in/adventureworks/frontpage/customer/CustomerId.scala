/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package customer

import adventureworks.customtypes.TypoUUID
import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** Type for the primary key of table `frontpage.customer` */
case class CustomerId(value: TypoUUID) extends AnyVal
object CustomerId {
  implicit lazy val arrayColumn: Column[Array[CustomerId]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[CustomerId]] = TypoUUID.arrayToStatement.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[CustomerId, TypoUUID] = Bijection[CustomerId, TypoUUID](_.value)(CustomerId.apply)
  implicit lazy val column: Column[CustomerId] = TypoUUID.column.map(CustomerId.apply)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[CustomerId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[CustomerId] = new ParameterMetaData[CustomerId] {
    override def sqlType: String = TypoUUID.parameterMetadata.sqlType
    override def jdbcType: Int = TypoUUID.parameterMetadata.jdbcType
  }
  implicit lazy val reads: Reads[CustomerId] = TypoUUID.reads.map(CustomerId.apply)
  implicit lazy val text: Text[CustomerId] = new Text[CustomerId] {
    override def unsafeEncode(v: CustomerId, sb: StringBuilder) = TypoUUID.text.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: CustomerId, sb: StringBuilder) = TypoUUID.text.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[CustomerId] = TypoUUID.toStatement.contramap(_.value)
  implicit lazy val writes: Writes[CustomerId] = TypoUUID.writes.contramap(_.value)
}
