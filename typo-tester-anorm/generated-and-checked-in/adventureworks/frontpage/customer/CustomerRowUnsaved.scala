/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package customer

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.user.UserId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** This class corresponds to a row in table `frontpage.customer` which has not been persisted yet */
case class CustomerRowUnsaved(
  /** Points to [[user.UserRow.id]] */
  userId: Option[UserId],
  companyName: Option[String],
  creditLimit: Option[BigDecimal],
  /** Default: gen_random_uuid() */
  id: Defaulted[CustomerId] = Defaulted.UseDefault,
  /** Default: false */
  verified: Defaulted[Option[Boolean]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => CustomerId, verifiedDefault: => Option[Boolean]): CustomerRow =
    CustomerRow(
      userId = userId,
      companyName = companyName,
      creditLimit = creditLimit,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      verified = verified match {
                   case Defaulted.UseDefault => verifiedDefault
                   case Defaulted.Provided(value) => value
                 }
    )
}
object CustomerRowUnsaved {
  implicit lazy val reads: Reads[CustomerRowUnsaved] = Reads[CustomerRowUnsaved](json => JsResult.fromTry(
      Try(
        CustomerRowUnsaved(
          userId = json.\("user_id").toOption.map(_.as(UserId.reads)),
          companyName = json.\("company_name").toOption.map(_.as(Reads.StringReads)),
          creditLimit = json.\("credit_limit").toOption.map(_.as(Reads.bigDecReads)),
          id = json.\("id").as(Defaulted.reads(CustomerId.reads)),
          verified = json.\("verified").as(Defaulted.readsOpt(Reads.BooleanReads))
        )
      )
    ),
  )
  implicit lazy val text: Text[CustomerRowUnsaved] = Text.instance[CustomerRowUnsaved]{ (row, sb) =>
    Text.option(UserId.text).unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.companyName, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.creditLimit, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(CustomerId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.booleanInstance)).unsafeEncode(row.verified, sb)
  }
  implicit lazy val writes: OWrites[CustomerRowUnsaved] = OWrites[CustomerRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "user_id" -> Writes.OptionWrites(UserId.writes).writes(o.userId),
      "company_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.companyName),
      "credit_limit" -> Writes.OptionWrites(Writes.BigDecimalWrites).writes(o.creditLimit),
      "id" -> Defaulted.writes(CustomerId.writes).writes(o.id),
      "verified" -> Defaulted.writes(Writes.OptionWrites(Writes.BooleanWrites)).writes(o.verified)
    ))
  )
}
