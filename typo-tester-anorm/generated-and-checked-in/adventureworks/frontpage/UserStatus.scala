/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage

import anorm.Column
import anorm.ParameterMetaData
import anorm.SqlMappingError
import anorm.ToStatement
import java.sql.Types
import play.api.libs.json.JsError
import play.api.libs.json.JsSuccess
import play.api.libs.json.JsValue
import play.api.libs.json.Reads
import play.api.libs.json.Writes

/** Enum `frontpage.user_status`
  *  - active
  *  - inactive
  *  - suspended
  */
sealed abstract class UserStatus(val value: String)

object UserStatus {
  def apply(str: String): Either[String, UserStatus] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): UserStatus =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object active extends UserStatus("active")
  case object inactive extends UserStatus("inactive")
  case object suspended extends UserStatus("suspended")
  val All: List[UserStatus] = List(active, inactive, suspended)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, UserStatus] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayColumn: Column[Array[UserStatus]] = Column.columnToArray[String](Column.columnToString, implicitly).map(_.map(UserStatus.force))
  implicit lazy val arrayToStatement: ToStatement[Array[UserStatus]] = ToStatement[Array[UserStatus]]((ps, i, arr) => ps.setArray(i, ps.getConnection.createArrayOf("frontpage.user_status", arr.map[AnyRef](_.value))))
  implicit lazy val column: Column[UserStatus] = Column.columnToString.mapResult(str => UserStatus(str).left.map(SqlMappingError.apply))
  implicit lazy val ordering: Ordering[UserStatus] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[UserStatus] = new ParameterMetaData[UserStatus] {
    override def sqlType: String = "frontpage.user_status"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[UserStatus] = Reads[UserStatus]{(value: JsValue) => value.validate(Reads.StringReads).flatMap(str => UserStatus(str).fold(JsError.apply, JsSuccess(_)))}
  implicit lazy val text: Text[UserStatus] = new Text[UserStatus] {
    override def unsafeEncode(v: UserStatus, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: UserStatus, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[UserStatus] = ToStatement.stringToStatement.contramap(_.value)
  implicit lazy val writes: Writes[UserStatus] = Writes[UserStatus](value => Writes.StringWrites.writes(value.value))
}
