/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.product.ProductId
import adventureworks.frontpage.user.UserId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** This class corresponds to a row in table `frontpage.order` which has not been persisted yet */
case class OrderRowUnsaved(
  /** Points to [[user.UserRow.id]] */
  userId: Option[UserId],
  /** Points to [[product.ProductRow.id]] */
  productId: Option[ProductId],
  total: BigDecimal,
  shippedAt: Option[TypoLocalDateTime],
  /** Default: gen_random_uuid() */
  id: Defaulted[OrderId] = Defaulted.UseDefault,
  /** Default: 'pending'::frontpage.order_status */
  status: Defaulted[Option[OrderStatus]] = Defaulted.UseDefault,
  /** Default: now() */
  createdAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => OrderId, statusDefault: => Option[OrderStatus], createdAtDefault: => Option[TypoLocalDateTime]): OrderRow =
    OrderRow(
      userId = userId,
      productId = productId,
      total = total,
      shippedAt = shippedAt,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      status = status match {
                 case Defaulted.UseDefault => statusDefault
                 case Defaulted.Provided(value) => value
               },
      createdAt = createdAt match {
                    case Defaulted.UseDefault => createdAtDefault
                    case Defaulted.Provided(value) => value
                  }
    )
}
object OrderRowUnsaved {
  implicit lazy val reads: Reads[OrderRowUnsaved] = Reads[OrderRowUnsaved](json => JsResult.fromTry(
      Try(
        OrderRowUnsaved(
          userId = json.\("user_id").toOption.map(_.as(UserId.reads)),
          productId = json.\("product_id").toOption.map(_.as(ProductId.reads)),
          total = json.\("total").as(Reads.bigDecReads),
          shippedAt = json.\("shipped_at").toOption.map(_.as(TypoLocalDateTime.reads)),
          id = json.\("id").as(Defaulted.reads(OrderId.reads)),
          status = json.\("status").as(Defaulted.readsOpt(OrderStatus.reads)),
          createdAt = json.\("created_at").as(Defaulted.readsOpt(TypoLocalDateTime.reads))
        )
      )
    ),
  )
  implicit lazy val text: Text[OrderRowUnsaved] = Text.instance[OrderRowUnsaved]{ (row, sb) =>
    Text.option(UserId.text).unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    Text.option(ProductId.text).unsafeEncode(row.productId, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.total, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.shippedAt, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(OrderId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(OrderStatus.text)).unsafeEncode(row.status, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoLocalDateTime.text)).unsafeEncode(row.createdAt, sb)
  }
  implicit lazy val writes: OWrites[OrderRowUnsaved] = OWrites[OrderRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "user_id" -> Writes.OptionWrites(UserId.writes).writes(o.userId),
      "product_id" -> Writes.OptionWrites(ProductId.writes).writes(o.productId),
      "total" -> Writes.BigDecimalWrites.writes(o.total),
      "shipped_at" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.shippedAt),
      "id" -> Defaulted.writes(OrderId.writes).writes(o.id),
      "status" -> Defaulted.writes(Writes.OptionWrites(OrderStatus.writes)).writes(o.status),
      "created_at" -> Defaulted.writes(Writes.OptionWrites(TypoLocalDateTime.writes)).writes(o.createdAt)
    ))
  )
}
