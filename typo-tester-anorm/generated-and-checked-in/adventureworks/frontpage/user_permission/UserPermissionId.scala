/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.user.UserId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Type for the composite primary key of table `frontpage.user_permission` */
case class UserPermissionId(
  userId: UserId,
  permissionId: PermissionId
)
object UserPermissionId {
  implicit lazy val ordering: Ordering[UserPermissionId] = Ordering.by(x => (x.userId, x.permissionId))
  implicit lazy val reads: Reads[UserPermissionId] = Reads[UserPermissionId](json => JsResult.fromTry(
      Try(
        UserPermissionId(
          userId = json.\("user_id").as(UserId.reads),
          permissionId = json.\("permission_id").as(PermissionId.reads)
        )
      )
    ),
  )
  implicit lazy val writes: OWrites[UserPermissionId] = OWrites[UserPermissionId](o =>
    new JsObject(ListMap[String, JsValue](
      "user_id" -> UserId.writes.writes(o.userId),
      "permission_id" -> PermissionId.writes.writes(o.permissionId)
    ))
  )
}
