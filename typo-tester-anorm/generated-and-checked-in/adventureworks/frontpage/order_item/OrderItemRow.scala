/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order_item

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.order.OrderId
import adventureworks.frontpage.product.ProductId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: frontpage.order_item
    Primary key: id */
case class OrderItemRow(
  /** Default: gen_random_uuid() */
  id: OrderItemId,
  /** Points to [[order.OrderRow.id]] */
  orderId: Option[OrderId],
  /** Points to [[product.ProductRow.id]] */
  productId: Option[ProductId],
  quantity: Int,
  price: BigDecimal,
  shippedAt: Option[TypoLocalDateTime]
){
   def toUnsavedRow(id: Defaulted[OrderItemId]): OrderItemRowUnsaved =
     OrderItemRowUnsaved(orderId, productId, quantity, price, shippedAt, id)
 }

object OrderItemRow {
  implicit lazy val reads: Reads[OrderItemRow] = Reads[OrderItemRow](json => JsResult.fromTry(
      Try(
        OrderItemRow(
          id = json.\("id").as(OrderItemId.reads),
          orderId = json.\("order_id").toOption.map(_.as(OrderId.reads)),
          productId = json.\("product_id").toOption.map(_.as(ProductId.reads)),
          quantity = json.\("quantity").as(Reads.IntReads),
          price = json.\("price").as(Reads.bigDecReads),
          shippedAt = json.\("shipped_at").toOption.map(_.as(TypoLocalDateTime.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[OrderItemRow] = RowParser[OrderItemRow] { row =>
    Success(
      OrderItemRow(
        id = row(idx + 0)(OrderItemId.column),
        orderId = row(idx + 1)(Column.columnToOption(OrderId.column)),
        productId = row(idx + 2)(Column.columnToOption(ProductId.column)),
        quantity = row(idx + 3)(Column.columnToInt),
        price = row(idx + 4)(Column.columnToScalaBigDecimal),
        shippedAt = row(idx + 5)(Column.columnToOption(TypoLocalDateTime.column))
      )
    )
  }
  implicit lazy val text: Text[OrderItemRow] = Text.instance[OrderItemRow]{ (row, sb) =>
    OrderItemId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.option(OrderId.text).unsafeEncode(row.orderId, sb)
    sb.append(Text.DELIMETER)
    Text.option(ProductId.text).unsafeEncode(row.productId, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.quantity, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.price, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.shippedAt, sb)
  }
  implicit lazy val writes: OWrites[OrderItemRow] = OWrites[OrderItemRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> OrderItemId.writes.writes(o.id),
      "order_id" -> Writes.OptionWrites(OrderId.writes).writes(o.orderId),
      "product_id" -> Writes.OptionWrites(ProductId.writes).writes(o.productId),
      "quantity" -> Writes.IntWrites.writes(o.quantity),
      "price" -> Writes.BigDecimalWrites.writes(o.price),
      "shipped_at" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.shippedAt)
    ))
  )
}
