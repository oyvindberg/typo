/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package s

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.humanresources.shift.ShiftId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** View: hr.s */
case class SViewRow(
  /** Points to [[humanresources.shift.ShiftRow.shiftid]] */
  id: ShiftId,
  /** Points to [[humanresources.shift.ShiftRow.shiftid]] */
  shiftid: ShiftId,
  /** Points to [[humanresources.shift.ShiftRow.name]] */
  name: Name,
  /** Points to [[humanresources.shift.ShiftRow.starttime]] */
  starttime: TypoLocalTime,
  /** Points to [[humanresources.shift.ShiftRow.endtime]] */
  endtime: TypoLocalTime,
  /** Points to [[humanresources.shift.ShiftRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object SViewRow {
  implicit lazy val reads: Reads[SViewRow] = Reads[SViewRow](json => JsResult.fromTry(
      Try(
        SViewRow(
          id = json.\("id").as(ShiftId.reads),
          shiftid = json.\("shiftid").as(ShiftId.reads),
          name = json.\("name").as(Name.reads),
          starttime = json.\("starttime").as(TypoLocalTime.reads),
          endtime = json.\("endtime").as(TypoLocalTime.reads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SViewRow] = RowParser[SViewRow] { row =>
    Success(
      SViewRow(
        id = row(idx + 0)(ShiftId.column),
        shiftid = row(idx + 1)(ShiftId.column),
        name = row(idx + 2)(Name.column),
        starttime = row(idx + 3)(TypoLocalTime.column),
        endtime = row(idx + 4)(TypoLocalTime.column),
        modifieddate = row(idx + 5)(TypoLocalDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[SViewRow] = OWrites[SViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> ShiftId.writes.writes(o.id),
      "shiftid" -> ShiftId.writes.writes(o.shiftid),
      "name" -> Name.writes.writes(o.name),
      "starttime" -> TypoLocalTime.writes.writes(o.starttime),
      "endtime" -> TypoLocalTime.writes.writes(o.endtime),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
