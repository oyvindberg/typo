/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package e

import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** View: hr.e */
case class EViewRow(
  /** Points to [[humanresources.employee.EmployeeRow.businessentityid]] */
  id: BusinessentityId,
  /** Points to [[humanresources.employee.EmployeeRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[humanresources.employee.EmployeeRow.nationalidnumber]] */
  nationalidnumber: /* max 15 chars */ String,
  /** Points to [[humanresources.employee.EmployeeRow.loginid]] */
  loginid: /* max 256 chars */ String,
  /** Points to [[humanresources.employee.EmployeeRow.jobtitle]] */
  jobtitle: /* max 50 chars */ String,
  /** Points to [[humanresources.employee.EmployeeRow.birthdate]] */
  birthdate: TypoLocalDate,
  /** Points to [[humanresources.employee.EmployeeRow.maritalstatus]] */
  maritalstatus: /* bpchar, max 1 chars */ String,
  /** Points to [[humanresources.employee.EmployeeRow.gender]] */
  gender: /* bpchar, max 1 chars */ String,
  /** Points to [[humanresources.employee.EmployeeRow.hiredate]] */
  hiredate: TypoLocalDate,
  /** Points to [[humanresources.employee.EmployeeRow.salariedflag]] */
  salariedflag: Flag,
  /** Points to [[humanresources.employee.EmployeeRow.vacationhours]] */
  vacationhours: TypoShort,
  /** Points to [[humanresources.employee.EmployeeRow.sickleavehours]] */
  sickleavehours: TypoShort,
  /** Points to [[humanresources.employee.EmployeeRow.currentflag]] */
  currentflag: Flag,
  /** Points to [[humanresources.employee.EmployeeRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[humanresources.employee.EmployeeRow.modifieddate]] */
  modifieddate: TypoLocalDateTime,
  /** Points to [[humanresources.employee.EmployeeRow.organizationnode]] */
  organizationnode: Option[String]
)

object EViewRow {
  implicit lazy val reads: Reads[EViewRow] = Reads[EViewRow](json => JsResult.fromTry(
      Try(
        EViewRow(
          id = json.\("id").as(BusinessentityId.reads),
          businessentityid = json.\("businessentityid").as(BusinessentityId.reads),
          nationalidnumber = json.\("nationalidnumber").as(Reads.StringReads),
          loginid = json.\("loginid").as(Reads.StringReads),
          jobtitle = json.\("jobtitle").as(Reads.StringReads),
          birthdate = json.\("birthdate").as(TypoLocalDate.reads),
          maritalstatus = json.\("maritalstatus").as(Reads.StringReads),
          gender = json.\("gender").as(Reads.StringReads),
          hiredate = json.\("hiredate").as(TypoLocalDate.reads),
          salariedflag = json.\("salariedflag").as(Flag.reads),
          vacationhours = json.\("vacationhours").as(TypoShort.reads),
          sickleavehours = json.\("sickleavehours").as(TypoShort.reads),
          currentflag = json.\("currentflag").as(Flag.reads),
          rowguid = json.\("rowguid").as(TypoUUID.reads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads),
          organizationnode = json.\("organizationnode").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[EViewRow] = RowParser[EViewRow] { row =>
    Success(
      EViewRow(
        id = row(idx + 0)(BusinessentityId.column),
        businessentityid = row(idx + 1)(BusinessentityId.column),
        nationalidnumber = row(idx + 2)(Column.columnToString),
        loginid = row(idx + 3)(Column.columnToString),
        jobtitle = row(idx + 4)(Column.columnToString),
        birthdate = row(idx + 5)(TypoLocalDate.column),
        maritalstatus = row(idx + 6)(Column.columnToString),
        gender = row(idx + 7)(Column.columnToString),
        hiredate = row(idx + 8)(TypoLocalDate.column),
        salariedflag = row(idx + 9)(Flag.column),
        vacationhours = row(idx + 10)(TypoShort.column),
        sickleavehours = row(idx + 11)(TypoShort.column),
        currentflag = row(idx + 12)(Flag.column),
        rowguid = row(idx + 13)(TypoUUID.column),
        modifieddate = row(idx + 14)(TypoLocalDateTime.column),
        organizationnode = row(idx + 15)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit lazy val writes: OWrites[EViewRow] = OWrites[EViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> BusinessentityId.writes.writes(o.id),
      "businessentityid" -> BusinessentityId.writes.writes(o.businessentityid),
      "nationalidnumber" -> Writes.StringWrites.writes(o.nationalidnumber),
      "loginid" -> Writes.StringWrites.writes(o.loginid),
      "jobtitle" -> Writes.StringWrites.writes(o.jobtitle),
      "birthdate" -> TypoLocalDate.writes.writes(o.birthdate),
      "maritalstatus" -> Writes.StringWrites.writes(o.maritalstatus),
      "gender" -> Writes.StringWrites.writes(o.gender),
      "hiredate" -> TypoLocalDate.writes.writes(o.hiredate),
      "salariedflag" -> Flag.writes.writes(o.salariedflag),
      "vacationhours" -> TypoShort.writes.writes(o.vacationhours),
      "sickleavehours" -> TypoShort.writes.writes(o.sickleavehours),
      "currentflag" -> Flag.writes.writes(o.currentflag),
      "rowguid" -> TypoUUID.writes.writes(o.rowguid),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate),
      "organizationnode" -> Writes.OptionWrites(Writes.StringWrites).writes(o.organizationnode)
    ))
  )
}
