/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productdocument

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.document.DocumentId
import adventureworks.production.product.ProductId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: production.productdocument
    Cross-reference table mapping products to related product documents.
    Composite primary key: productid, documentnode */
case class ProductdocumentRow(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Default: now() */
  modifieddate: TypoLocalDateTime,
  /** Document identification number. Foreign key to Document.DocumentNode.
      Default: '/'::character varying
      Points to [[document.DocumentRow.documentnode]] */
  documentnode: DocumentId
){
   val compositeId: ProductdocumentId = ProductdocumentId(productid, documentnode)
   def toUnsavedRow(documentnode: Defaulted[DocumentId], modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): ProductdocumentRowUnsaved =
     ProductdocumentRowUnsaved(productid, modifieddate, documentnode)
 }

object ProductdocumentRow {
  def apply(compositeId: ProductdocumentId, modifieddate: TypoLocalDateTime) =
    new ProductdocumentRow(compositeId.productid, modifieddate, compositeId.documentnode)
  implicit lazy val reads: Reads[ProductdocumentRow] = Reads[ProductdocumentRow](json => JsResult.fromTry(
      Try(
        ProductdocumentRow(
          productid = json.\("productid").as(ProductId.reads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads),
          documentnode = json.\("documentnode").as(DocumentId.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ProductdocumentRow] = RowParser[ProductdocumentRow] { row =>
    Success(
      ProductdocumentRow(
        productid = row(idx + 0)(ProductId.column),
        modifieddate = row(idx + 1)(TypoLocalDateTime.column),
        documentnode = row(idx + 2)(DocumentId.column)
      )
    )
  }
  implicit lazy val text: Text[ProductdocumentRow] = Text.instance[ProductdocumentRow]{ (row, sb) =>
    ProductId.text.unsafeEncode(row.productid, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
    sb.append(Text.DELIMETER)
    DocumentId.text.unsafeEncode(row.documentnode, sb)
  }
  implicit lazy val writes: OWrites[ProductdocumentRow] = OWrites[ProductdocumentRow](o =>
    new JsObject(ListMap[String, JsValue](
      "productid" -> ProductId.writes.writes(o.productid),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate),
      "documentnode" -> DocumentId.writes.writes(o.documentnode)
    ))
  )
}
