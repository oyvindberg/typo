/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package vproductanddescription

import adventureworks.production.culture.CultureId
import adventureworks.production.product.ProductId
import adventureworks.public.Name
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Materialized View: production.vproductanddescription */
case class VproductanddescriptionMVRow(
  /** Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Points to [[product.ProductRow.name]] */
  name: Name,
  /** Points to [[productmodel.ProductmodelRow.name]] */
  productmodel: Name,
  /** Points to [[productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRow.cultureid]] */
  cultureid: CultureId,
  /** Points to [[productdescription.ProductdescriptionRow.description]] */
  description: /* max 400 chars */ String
)

object VproductanddescriptionMVRow {
  implicit lazy val reads: Reads[VproductanddescriptionMVRow] = Reads[VproductanddescriptionMVRow](json => JsResult.fromTry(
      Try(
        VproductanddescriptionMVRow(
          productid = json.\("productid").as(ProductId.reads),
          name = json.\("name").as(Name.reads),
          productmodel = json.\("productmodel").as(Name.reads),
          cultureid = json.\("cultureid").as(CultureId.reads),
          description = json.\("description").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VproductanddescriptionMVRow] = RowParser[VproductanddescriptionMVRow] { row =>
    Success(
      VproductanddescriptionMVRow(
        productid = row(idx + 0)(ProductId.column),
        name = row(idx + 1)(Name.column),
        productmodel = row(idx + 2)(Name.column),
        cultureid = row(idx + 3)(CultureId.column),
        description = row(idx + 4)(Column.columnToString)
      )
    )
  }
  implicit lazy val writes: OWrites[VproductanddescriptionMVRow] = OWrites[VproductanddescriptionMVRow](o =>
    new JsObject(ListMap[String, JsValue](
      "productid" -> ProductId.writes.writes(o.productid),
      "name" -> Name.writes.writes(o.name),
      "productmodel" -> Name.writes.writes(o.productmodel),
      "cultureid" -> CultureId.writes.writes(o.cultureid),
      "description" -> Writes.StringWrites.writes(o.description)
    ))
  )
}
