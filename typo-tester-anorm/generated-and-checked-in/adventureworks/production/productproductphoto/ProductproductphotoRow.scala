/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productproductphoto

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.production.productphoto.ProductphotoId
import adventureworks.public.Flag
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: production.productproductphoto
    Cross-reference table mapping products and product photos.
    Composite primary key: productid, productphotoid */
case class ProductproductphotoRow(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.
      Points to [[productphoto.ProductphotoRow.productphotoid]] */
  productphotoid: ProductphotoId,
  /** 0 = Photo is not the principal image. 1 = Photo is the principal image.
      Default: false */
  primary: Flag,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val compositeId: ProductproductphotoId = ProductproductphotoId(productid, productphotoid)
   def toUnsavedRow(primary: Defaulted[Flag] = Defaulted.Provided(this.primary), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): ProductproductphotoRowUnsaved =
     ProductproductphotoRowUnsaved(productid, productphotoid, primary, modifieddate)
 }

object ProductproductphotoRow {
  def apply(compositeId: ProductproductphotoId, primary: Flag, modifieddate: TypoLocalDateTime) =
    new ProductproductphotoRow(compositeId.productid, compositeId.productphotoid, primary, modifieddate)
  implicit lazy val reads: Reads[ProductproductphotoRow] = Reads[ProductproductphotoRow](json => JsResult.fromTry(
      Try(
        ProductproductphotoRow(
          productid = json.\("productid").as(ProductId.reads),
          productphotoid = json.\("productphotoid").as(ProductphotoId.reads),
          primary = json.\("primary").as(Flag.reads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ProductproductphotoRow] = RowParser[ProductproductphotoRow] { row =>
    Success(
      ProductproductphotoRow(
        productid = row(idx + 0)(ProductId.column),
        productphotoid = row(idx + 1)(ProductphotoId.column),
        primary = row(idx + 2)(Flag.column),
        modifieddate = row(idx + 3)(TypoLocalDateTime.column)
      )
    )
  }
  implicit lazy val text: Text[ProductproductphotoRow] = Text.instance[ProductproductphotoRow]{ (row, sb) =>
    ProductId.text.unsafeEncode(row.productid, sb)
    sb.append(Text.DELIMETER)
    ProductphotoId.text.unsafeEncode(row.productphotoid, sb)
    sb.append(Text.DELIMETER)
    Flag.text.unsafeEncode(row.primary, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val writes: OWrites[ProductproductphotoRow] = OWrites[ProductproductphotoRow](o =>
    new JsObject(ListMap[String, JsValue](
      "productid" -> ProductId.writes.writes(o.productid),
      "productphotoid" -> ProductphotoId.writes.writes(o.productphotoid),
      "primary" -> Flag.writes.writes(o.primary),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
