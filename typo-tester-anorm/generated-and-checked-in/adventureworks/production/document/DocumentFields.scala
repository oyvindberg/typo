/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package document

import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.humanresources.employee.EmployeeFields
import adventureworks.humanresources.employee.EmployeeRow
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import typo.dsl.ForeignKey
import typo.dsl.Path
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

trait DocumentFields {
  def title: Field[/* max 50 chars */ String, DocumentRow]
  def owner: Field[BusinessentityId, DocumentRow]
  def folderflag: Field[Flag, DocumentRow]
  def filename: Field[/* max 400 chars */ String, DocumentRow]
  def fileextension: OptField[/* max 8 chars */ String, DocumentRow]
  def revision: Field[/* bpchar, max 5 chars */ String, DocumentRow]
  def changenumber: Field[Int, DocumentRow]
  def status: Field[TypoShort, DocumentRow]
  def documentsummary: OptField[String, DocumentRow]
  def document: OptField[TypoBytea, DocumentRow]
  def rowguid: Field[TypoUUID, DocumentRow]
  def modifieddate: Field[TypoLocalDateTime, DocumentRow]
  def documentnode: IdField[DocumentId, DocumentRow]
  def fkHumanresourcesEmployee: ForeignKey[EmployeeFields, EmployeeRow] =
    ForeignKey[EmployeeFields, EmployeeRow]("production.FK_Document_Employee_Owner", Nil)
      .withColumnPair(owner, _.businessentityid)
}

object DocumentFields {
  lazy val structure: Relation[DocumentFields, DocumentRow] =
    new Impl(Nil)
    
  private final class Impl(val _path: List[Path])
    extends Relation[DocumentFields, DocumentRow] {
  
    override lazy val fields: DocumentFields = new DocumentFields {
      override def title = Field[/* max 50 chars */ String, DocumentRow](_path, "title", None, None, x => x.title, (row, value) => row.copy(title = value))
      override def owner = Field[BusinessentityId, DocumentRow](_path, "owner", None, Some("int4"), x => x.owner, (row, value) => row.copy(owner = value))
      override def folderflag = Field[Flag, DocumentRow](_path, "folderflag", None, Some("bool"), x => x.folderflag, (row, value) => row.copy(folderflag = value))
      override def filename = Field[/* max 400 chars */ String, DocumentRow](_path, "filename", None, None, x => x.filename, (row, value) => row.copy(filename = value))
      override def fileextension = OptField[/* max 8 chars */ String, DocumentRow](_path, "fileextension", None, None, x => x.fileextension, (row, value) => row.copy(fileextension = value))
      override def revision = Field[/* bpchar, max 5 chars */ String, DocumentRow](_path, "revision", None, Some("bpchar"), x => x.revision, (row, value) => row.copy(revision = value))
      override def changenumber = Field[Int, DocumentRow](_path, "changenumber", None, Some("int4"), x => x.changenumber, (row, value) => row.copy(changenumber = value))
      override def status = Field[TypoShort, DocumentRow](_path, "status", None, Some("int2"), x => x.status, (row, value) => row.copy(status = value))
      override def documentsummary = OptField[String, DocumentRow](_path, "documentsummary", None, None, x => x.documentsummary, (row, value) => row.copy(documentsummary = value))
      override def document = OptField[TypoBytea, DocumentRow](_path, "document", None, Some("bytea"), x => x.document, (row, value) => row.copy(document = value))
      override def rowguid = Field[TypoUUID, DocumentRow](_path, "rowguid", None, Some("uuid"), x => x.rowguid, (row, value) => row.copy(rowguid = value))
      override def modifieddate = Field[TypoLocalDateTime, DocumentRow](_path, "modifieddate", Some("text"), Some("timestamp"), x => x.modifieddate, (row, value) => row.copy(modifieddate = value))
      override def documentnode = IdField[DocumentId, DocumentRow](_path, "documentnode", None, None, x => x.documentnode, (row, value) => row.copy(documentnode = value))
    }
  
    override lazy val columns: List[FieldLikeNoHkt[?, DocumentRow]] =
      List[FieldLikeNoHkt[?, DocumentRow]](fields.title, fields.owner, fields.folderflag, fields.filename, fields.fileextension, fields.revision, fields.changenumber, fields.status, fields.documentsummary, fields.document, fields.rowguid, fields.modifieddate, fields.documentnode)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
