/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.production.product.ProductId
import adventureworks.production.scrapreason.ScrapreasonId
import anorm.BatchSql
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SQL
import anorm.SimpleSql
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import scala.annotation.nowarn
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class WorkorderRepoImpl extends WorkorderRepo {
  override def delete: DeleteBuilder[WorkorderFields, WorkorderRow] = {
    DeleteBuilder("production.workorder", WorkorderFields.structure)
  }
  override def deleteById(workorderid: WorkorderId)(implicit c: Connection): Boolean = {
    SQL"""delete from production.workorder where "workorderid" = ${ParameterValue(workorderid, null, WorkorderId.toStatement)}""".executeUpdate() > 0
  }
  override def deleteByIds(workorderids: Array[WorkorderId])(implicit c: Connection): Int = {
    SQL"""delete
          from production.workorder
          where "workorderid" = ANY(${workorderids})
       """.executeUpdate()
    
  }
  override def insert(unsaved: WorkorderRow)(implicit c: Connection): WorkorderRow = {
    SQL"""insert into production.workorder("workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate")
          values (${ParameterValue(unsaved.workorderid, null, WorkorderId.toStatement)}::int4, ${ParameterValue(unsaved.productid, null, ProductId.toStatement)}::int4, ${ParameterValue(unsaved.orderqty, null, ToStatement.intToStatement)}::int4, ${ParameterValue(unsaved.scrappedqty, null, TypoShort.toStatement)}::int2, ${ParameterValue(unsaved.startdate, null, TypoLocalDateTime.toStatement)}::timestamp, ${ParameterValue(unsaved.enddate, null, ToStatement.optionToStatement(TypoLocalDateTime.toStatement, TypoLocalDateTime.parameterMetadata))}::timestamp, ${ParameterValue(unsaved.duedate, null, TypoLocalDateTime.toStatement)}::timestamp, ${ParameterValue(unsaved.scrapreasonid, null, ToStatement.optionToStatement(ScrapreasonId.toStatement, ScrapreasonId.parameterMetadata))}::int2, ${ParameterValue(unsaved.modifieddate, null, TypoLocalDateTime.toStatement)}::timestamp)
          returning "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
       """
      .executeInsert(WorkorderRow.rowParser(1).single)
    
  }
  override def insert(unsaved: WorkorderRowUnsaved)(implicit c: Connection): WorkorderRow = {
    val namedParameters = List(
      Some((NamedParameter("productid", ParameterValue(unsaved.productid, null, ProductId.toStatement)), "::int4")),
      Some((NamedParameter("orderqty", ParameterValue(unsaved.orderqty, null, ToStatement.intToStatement)), "::int4")),
      Some((NamedParameter("scrappedqty", ParameterValue(unsaved.scrappedqty, null, TypoShort.toStatement)), "::int2")),
      Some((NamedParameter("startdate", ParameterValue(unsaved.startdate, null, TypoLocalDateTime.toStatement)), "::timestamp")),
      Some((NamedParameter("enddate", ParameterValue(unsaved.enddate, null, ToStatement.optionToStatement(TypoLocalDateTime.toStatement, TypoLocalDateTime.parameterMetadata))), "::timestamp")),
      Some((NamedParameter("duedate", ParameterValue(unsaved.duedate, null, TypoLocalDateTime.toStatement)), "::timestamp")),
      Some((NamedParameter("scrapreasonid", ParameterValue(unsaved.scrapreasonid, null, ToStatement.optionToStatement(ScrapreasonId.toStatement, ScrapreasonId.parameterMetadata))), "::int2")),
      unsaved.workorderid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("workorderid", ParameterValue(value, null, WorkorderId.toStatement)), "::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue(value, null, TypoLocalDateTime.toStatement)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.workorder default values
            returning "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
         """
        .executeInsert(WorkorderRow.rowParser(1).single)
    } else {
      val q = s"""insert into production.workorder(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
               """
      SimpleSql(SQL(q), namedParameters.map { case (np, _) => np.tupled }.toMap, RowParser.successful)
        .executeInsert(WorkorderRow.rowParser(1).single)
    }
    
  }
  override def insertStreaming(unsaved: Iterator[WorkorderRow], batchSize: Int = 10000)(implicit c: Connection): Long = {
    streamingInsert(s"""COPY production.workorder("workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate") FROM STDIN""", batchSize, unsaved)(WorkorderRow.text, c)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Iterator[WorkorderRowUnsaved], batchSize: Int = 10000)(implicit c: Connection): Long = {
    streamingInsert(s"""COPY production.workorder("productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "workorderid", "modifieddate") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""", batchSize, unsaved)(WorkorderRowUnsaved.text, c)
  }
  override def select: SelectBuilder[WorkorderFields, WorkorderRow] = {
    SelectBuilderSql("production.workorder", WorkorderFields.structure, WorkorderRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[WorkorderRow] = {
    SQL"""select "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
          from production.workorder
       """.as(WorkorderRow.rowParser(1).*)
  }
  override def selectById(workorderid: WorkorderId)(implicit c: Connection): Option[WorkorderRow] = {
    SQL"""select "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
          from production.workorder
          where "workorderid" = ${ParameterValue(workorderid, null, WorkorderId.toStatement)}
       """.as(WorkorderRow.rowParser(1).singleOpt)
  }
  override def selectByIds(workorderids: Array[WorkorderId])(implicit c: Connection): List[WorkorderRow] = {
    SQL"""select "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
          from production.workorder
          where "workorderid" = ANY(${workorderids})
       """.as(WorkorderRow.rowParser(1).*)
    
  }
  override def selectByIdsTracked(workorderids: Array[WorkorderId])(implicit c: Connection): Map[WorkorderId, WorkorderRow] = {
    val byId = selectByIds(workorderids).view.map(x => (x.workorderid, x)).toMap
    workorderids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
  }
  override def update: UpdateBuilder[WorkorderFields, WorkorderRow] = {
    UpdateBuilder("production.workorder", WorkorderFields.structure, WorkorderRow.rowParser)
  }
  override def update(row: WorkorderRow)(implicit c: Connection): Boolean = {
    val workorderid = row.workorderid
    SQL"""update production.workorder
          set "productid" = ${ParameterValue(row.productid, null, ProductId.toStatement)}::int4,
              "orderqty" = ${ParameterValue(row.orderqty, null, ToStatement.intToStatement)}::int4,
              "scrappedqty" = ${ParameterValue(row.scrappedqty, null, TypoShort.toStatement)}::int2,
              "startdate" = ${ParameterValue(row.startdate, null, TypoLocalDateTime.toStatement)}::timestamp,
              "enddate" = ${ParameterValue(row.enddate, null, ToStatement.optionToStatement(TypoLocalDateTime.toStatement, TypoLocalDateTime.parameterMetadata))}::timestamp,
              "duedate" = ${ParameterValue(row.duedate, null, TypoLocalDateTime.toStatement)}::timestamp,
              "scrapreasonid" = ${ParameterValue(row.scrapreasonid, null, ToStatement.optionToStatement(ScrapreasonId.toStatement, ScrapreasonId.parameterMetadata))}::int2,
              "modifieddate" = ${ParameterValue(row.modifieddate, null, TypoLocalDateTime.toStatement)}::timestamp
          where "workorderid" = ${ParameterValue(workorderid, null, WorkorderId.toStatement)}
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: WorkorderRow)(implicit c: Connection): WorkorderRow = {
    SQL"""insert into production.workorder("workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate")
          values (
            ${ParameterValue(unsaved.workorderid, null, WorkorderId.toStatement)}::int4,
            ${ParameterValue(unsaved.productid, null, ProductId.toStatement)}::int4,
            ${ParameterValue(unsaved.orderqty, null, ToStatement.intToStatement)}::int4,
            ${ParameterValue(unsaved.scrappedqty, null, TypoShort.toStatement)}::int2,
            ${ParameterValue(unsaved.startdate, null, TypoLocalDateTime.toStatement)}::timestamp,
            ${ParameterValue(unsaved.enddate, null, ToStatement.optionToStatement(TypoLocalDateTime.toStatement, TypoLocalDateTime.parameterMetadata))}::timestamp,
            ${ParameterValue(unsaved.duedate, null, TypoLocalDateTime.toStatement)}::timestamp,
            ${ParameterValue(unsaved.scrapreasonid, null, ToStatement.optionToStatement(ScrapreasonId.toStatement, ScrapreasonId.parameterMetadata))}::int2,
            ${ParameterValue(unsaved.modifieddate, null, TypoLocalDateTime.toStatement)}::timestamp
          )
          on conflict ("workorderid")
          do update set
            "productid" = EXCLUDED."productid",
            "orderqty" = EXCLUDED."orderqty",
            "scrappedqty" = EXCLUDED."scrappedqty",
            "startdate" = EXCLUDED."startdate",
            "enddate" = EXCLUDED."enddate",
            "duedate" = EXCLUDED."duedate",
            "scrapreasonid" = EXCLUDED."scrapreasonid",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
       """
      .executeInsert(WorkorderRow.rowParser(1).single)
    
  }
  override def upsertBatch(unsaved: Iterable[WorkorderRow])(implicit c: Connection): List[WorkorderRow] = {
    def toNamedParameter(row: WorkorderRow): List[NamedParameter] = List(
      NamedParameter("workorderid", ParameterValue(row.workorderid, null, WorkorderId.toStatement)),
      NamedParameter("productid", ParameterValue(row.productid, null, ProductId.toStatement)),
      NamedParameter("orderqty", ParameterValue(row.orderqty, null, ToStatement.intToStatement)),
      NamedParameter("scrappedqty", ParameterValue(row.scrappedqty, null, TypoShort.toStatement)),
      NamedParameter("startdate", ParameterValue(row.startdate, null, TypoLocalDateTime.toStatement)),
      NamedParameter("enddate", ParameterValue(row.enddate, null, ToStatement.optionToStatement(TypoLocalDateTime.toStatement, TypoLocalDateTime.parameterMetadata))),
      NamedParameter("duedate", ParameterValue(row.duedate, null, TypoLocalDateTime.toStatement)),
      NamedParameter("scrapreasonid", ParameterValue(row.scrapreasonid, null, ToStatement.optionToStatement(ScrapreasonId.toStatement, ScrapreasonId.parameterMetadata))),
      NamedParameter("modifieddate", ParameterValue(row.modifieddate, null, TypoLocalDateTime.toStatement))
    )
    unsaved.toList match {
      case Nil => Nil
      case head :: rest =>
        new anorm.adventureworks.ExecuteReturningSyntax.Ops(
          BatchSql(
            s"""insert into production.workorder("workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate")
                values ({workorderid}::int4, {productid}::int4, {orderqty}::int4, {scrappedqty}::int2, {startdate}::timestamp, {enddate}::timestamp, {duedate}::timestamp, {scrapreasonid}::int2, {modifieddate}::timestamp)
                on conflict ("workorderid")
                do update set
                  "productid" = EXCLUDED."productid",
                  "orderqty" = EXCLUDED."orderqty",
                  "scrappedqty" = EXCLUDED."scrappedqty",
                  "startdate" = EXCLUDED."startdate",
                  "enddate" = EXCLUDED."enddate",
                  "duedate" = EXCLUDED."duedate",
                  "scrapreasonid" = EXCLUDED."scrapreasonid",
                  "modifieddate" = EXCLUDED."modifieddate"
                returning "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
             """,
            toNamedParameter(head),
            rest.map(toNamedParameter)*
          )
        ).executeReturning(WorkorderRow.rowParser(1).*)
    }
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Iterator[WorkorderRow], batchSize: Int = 10000)(implicit c: Connection): Int = {
    SQL"create temporary table workorder_TEMP (like production.workorder) on commit drop".execute(): @nowarn
    streamingInsert(s"""copy workorder_TEMP("workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate") from stdin""", batchSize, unsaved)(WorkorderRow.text, c): @nowarn
    SQL"""insert into production.workorder("workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate")
          select * from workorder_TEMP
          on conflict ("workorderid")
          do update set
            "productid" = EXCLUDED."productid",
            "orderqty" = EXCLUDED."orderqty",
            "scrappedqty" = EXCLUDED."scrappedqty",
            "startdate" = EXCLUDED."startdate",
            "enddate" = EXCLUDED."enddate",
            "duedate" = EXCLUDED."duedate",
            "scrapreasonid" = EXCLUDED."scrapreasonid",
            "modifieddate" = EXCLUDED."modifieddate"
          ;
          drop table workorder_TEMP;""".executeUpdate()
  }
}
