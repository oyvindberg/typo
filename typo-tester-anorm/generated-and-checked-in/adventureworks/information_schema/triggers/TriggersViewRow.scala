/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package triggers

import adventureworks.customtypes.TypoInstant
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class TriggersViewRow(
  triggerCatalog: /* nullability unknown */ Option[String],
  triggerSchema: /* nullability unknown */ Option[String],
  triggerName: /* nullability unknown */ Option[String],
  eventManipulation: /* nullability unknown */ Option[String],
  eventObjectCatalog: /* nullability unknown */ Option[String],
  eventObjectSchema: /* nullability unknown */ Option[String],
  eventObjectTable: /* nullability unknown */ Option[String],
  actionOrder: /* nullability unknown */ Option[Int],
  actionCondition: /* nullability unknown */ Option[String],
  actionStatement: /* nullability unknown */ Option[String],
  actionOrientation: /* nullability unknown */ Option[String],
  actionTiming: /* nullability unknown */ Option[String],
  actionReferenceOldTable: /* nullability unknown */ Option[String],
  actionReferenceNewTable: /* nullability unknown */ Option[String],
  actionReferenceOldRow: /* nullability unknown */ Option[String],
  actionReferenceNewRow: /* nullability unknown */ Option[String],
  created: /* nullability unknown */ Option[TypoInstant]
)

object TriggersViewRow {
  implicit lazy val reads: Reads[TriggersViewRow] = Reads[TriggersViewRow](json => JsResult.fromTry(
      Try(
        TriggersViewRow(
          triggerCatalog = json.\("trigger_catalog").toOption.map(_.as(Reads.StringReads)),
          triggerSchema = json.\("trigger_schema").toOption.map(_.as(Reads.StringReads)),
          triggerName = json.\("trigger_name").toOption.map(_.as(Reads.StringReads)),
          eventManipulation = json.\("event_manipulation").toOption.map(_.as(Reads.StringReads)),
          eventObjectCatalog = json.\("event_object_catalog").toOption.map(_.as(Reads.StringReads)),
          eventObjectSchema = json.\("event_object_schema").toOption.map(_.as(Reads.StringReads)),
          eventObjectTable = json.\("event_object_table").toOption.map(_.as(Reads.StringReads)),
          actionOrder = json.\("action_order").toOption.map(_.as(Reads.IntReads)),
          actionCondition = json.\("action_condition").toOption.map(_.as(Reads.StringReads)),
          actionStatement = json.\("action_statement").toOption.map(_.as(Reads.StringReads)),
          actionOrientation = json.\("action_orientation").toOption.map(_.as(Reads.StringReads)),
          actionTiming = json.\("action_timing").toOption.map(_.as(Reads.StringReads)),
          actionReferenceOldTable = json.\("action_reference_old_table").toOption.map(_.as(Reads.StringReads)),
          actionReferenceNewTable = json.\("action_reference_new_table").toOption.map(_.as(Reads.StringReads)),
          actionReferenceOldRow = json.\("action_reference_old_row").toOption.map(_.as(Reads.StringReads)),
          actionReferenceNewRow = json.\("action_reference_new_row").toOption.map(_.as(Reads.StringReads)),
          created = json.\("created").toOption.map(_.as(TypoInstant.reads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[TriggersViewRow] = RowParser[TriggersViewRow] { row =>
    Success(
      TriggersViewRow(
        triggerCatalog = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        triggerSchema = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        triggerName = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        eventManipulation = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        eventObjectCatalog = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        eventObjectSchema = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        eventObjectTable = row(idx + 6)(Column.columnToOption(Column.columnToString)),
        actionOrder = row(idx + 7)(Column.columnToOption(Column.columnToInt)),
        actionCondition = row(idx + 8)(Column.columnToOption(Column.columnToString)),
        actionStatement = row(idx + 9)(Column.columnToOption(Column.columnToString)),
        actionOrientation = row(idx + 10)(Column.columnToOption(Column.columnToString)),
        actionTiming = row(idx + 11)(Column.columnToOption(Column.columnToString)),
        actionReferenceOldTable = row(idx + 12)(Column.columnToOption(Column.columnToString)),
        actionReferenceNewTable = row(idx + 13)(Column.columnToOption(Column.columnToString)),
        actionReferenceOldRow = row(idx + 14)(Column.columnToOption(Column.columnToString)),
        actionReferenceNewRow = row(idx + 15)(Column.columnToOption(Column.columnToString)),
        created = row(idx + 16)(Column.columnToOption(TypoInstant.column))
      )
    )
  }
  implicit lazy val writes: OWrites[TriggersViewRow] = OWrites[TriggersViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "trigger_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.triggerCatalog),
      "trigger_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.triggerSchema),
      "trigger_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.triggerName),
      "event_manipulation" -> Writes.OptionWrites(Writes.StringWrites).writes(o.eventManipulation),
      "event_object_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.eventObjectCatalog),
      "event_object_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.eventObjectSchema),
      "event_object_table" -> Writes.OptionWrites(Writes.StringWrites).writes(o.eventObjectTable),
      "action_order" -> Writes.OptionWrites(Writes.IntWrites).writes(o.actionOrder),
      "action_condition" -> Writes.OptionWrites(Writes.StringWrites).writes(o.actionCondition),
      "action_statement" -> Writes.OptionWrites(Writes.StringWrites).writes(o.actionStatement),
      "action_orientation" -> Writes.OptionWrites(Writes.StringWrites).writes(o.actionOrientation),
      "action_timing" -> Writes.OptionWrites(Writes.StringWrites).writes(o.actionTiming),
      "action_reference_old_table" -> Writes.OptionWrites(Writes.StringWrites).writes(o.actionReferenceOldTable),
      "action_reference_new_table" -> Writes.OptionWrites(Writes.StringWrites).writes(o.actionReferenceNewTable),
      "action_reference_old_row" -> Writes.OptionWrites(Writes.StringWrites).writes(o.actionReferenceOldRow),
      "action_reference_new_row" -> Writes.OptionWrites(Writes.StringWrites).writes(o.actionReferenceNewRow),
      "created" -> Writes.OptionWrites(TypoInstant.writes).writes(o.created)
    ))
  )
}
