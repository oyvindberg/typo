/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package routines

import adventureworks.customtypes.TypoInstant
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class RoutinesViewRow(
  specificCatalog: /* nullability unknown */ Option[String],
  specificSchema: /* nullability unknown */ Option[String],
  specificName: /* nullability unknown */ Option[String],
  routineCatalog: /* nullability unknown */ Option[String],
  routineSchema: /* nullability unknown */ Option[String],
  routineName: /* nullability unknown */ Option[String],
  routineType: /* nullability unknown */ Option[String],
  moduleCatalog: /* nullability unknown */ Option[String],
  moduleSchema: /* nullability unknown */ Option[String],
  moduleName: /* nullability unknown */ Option[String],
  udtCatalog: /* nullability unknown */ Option[String],
  udtSchema: /* nullability unknown */ Option[String],
  udtName: /* nullability unknown */ Option[String],
  dataType: /* nullability unknown */ Option[String],
  characterMaximumLength: /* nullability unknown */ Option[Int],
  characterOctetLength: /* nullability unknown */ Option[Int],
  characterSetCatalog: /* nullability unknown */ Option[String],
  characterSetSchema: /* nullability unknown */ Option[String],
  characterSetName: /* nullability unknown */ Option[String],
  collationCatalog: /* nullability unknown */ Option[String],
  collationSchema: /* nullability unknown */ Option[String],
  collationName: /* nullability unknown */ Option[String],
  numericPrecision: /* nullability unknown */ Option[Int],
  numericPrecisionRadix: /* nullability unknown */ Option[Int],
  numericScale: /* nullability unknown */ Option[Int],
  datetimePrecision: /* nullability unknown */ Option[Int],
  intervalType: /* nullability unknown */ Option[String],
  intervalPrecision: /* nullability unknown */ Option[Int],
  typeUdtCatalog: /* nullability unknown */ Option[String],
  typeUdtSchema: /* nullability unknown */ Option[String],
  typeUdtName: /* nullability unknown */ Option[String],
  scopeCatalog: /* nullability unknown */ Option[String],
  scopeSchema: /* nullability unknown */ Option[String],
  scopeName: /* nullability unknown */ Option[String],
  maximumCardinality: /* nullability unknown */ Option[Int],
  dtdIdentifier: /* nullability unknown */ Option[String],
  routineBody: /* nullability unknown */ Option[String],
  routineDefinition: /* nullability unknown */ Option[String],
  externalName: /* nullability unknown */ Option[String],
  externalLanguage: /* nullability unknown */ Option[String],
  parameterStyle: /* nullability unknown */ Option[String],
  isDeterministic: /* nullability unknown */ Option[/* max 3 chars */ String],
  sqlDataAccess: /* nullability unknown */ Option[String],
  isNullCall: /* nullability unknown */ Option[/* max 3 chars */ String],
  sqlPath: /* nullability unknown */ Option[String],
  schemaLevelRoutine: /* nullability unknown */ Option[/* max 3 chars */ String],
  maxDynamicResultSets: /* nullability unknown */ Option[Int],
  isUserDefinedCast: /* nullability unknown */ Option[/* max 3 chars */ String],
  isImplicitlyInvocable: /* nullability unknown */ Option[/* max 3 chars */ String],
  securityType: /* nullability unknown */ Option[String],
  toSqlSpecificCatalog: /* nullability unknown */ Option[String],
  toSqlSpecificSchema: /* nullability unknown */ Option[String],
  toSqlSpecificName: /* nullability unknown */ Option[String],
  asLocator: /* nullability unknown */ Option[/* max 3 chars */ String],
  created: /* nullability unknown */ Option[TypoInstant],
  lastAltered: /* nullability unknown */ Option[TypoInstant],
  newSavepointLevel: /* nullability unknown */ Option[/* max 3 chars */ String],
  isUdtDependent: /* nullability unknown */ Option[/* max 3 chars */ String],
  resultCastFromDataType: /* nullability unknown */ Option[String],
  resultCastAsLocator: /* nullability unknown */ Option[/* max 3 chars */ String],
  resultCastCharMaxLength: /* nullability unknown */ Option[Int],
  resultCastCharOctetLength: /* nullability unknown */ Option[Int],
  resultCastCharSetCatalog: /* nullability unknown */ Option[String],
  resultCastCharSetSchema: /* nullability unknown */ Option[String],
  resultCastCharSetName: /* nullability unknown */ Option[String],
  resultCastCollationCatalog: /* nullability unknown */ Option[String],
  resultCastCollationSchema: /* nullability unknown */ Option[String],
  resultCastCollationName: /* nullability unknown */ Option[String],
  resultCastNumericPrecision: /* nullability unknown */ Option[Int],
  resultCastNumericPrecisionRadix: /* nullability unknown */ Option[Int],
  resultCastNumericScale: /* nullability unknown */ Option[Int],
  resultCastDatetimePrecision: /* nullability unknown */ Option[Int],
  resultCastIntervalType: /* nullability unknown */ Option[String],
  resultCastIntervalPrecision: /* nullability unknown */ Option[Int],
  resultCastTypeUdtCatalog: /* nullability unknown */ Option[String],
  resultCastTypeUdtSchema: /* nullability unknown */ Option[String],
  resultCastTypeUdtName: /* nullability unknown */ Option[String],
  resultCastScopeCatalog: /* nullability unknown */ Option[String],
  resultCastScopeSchema: /* nullability unknown */ Option[String],
  resultCastScopeName: /* nullability unknown */ Option[String],
  resultCastMaximumCardinality: /* nullability unknown */ Option[Int],
  resultCastDtdIdentifier: /* nullability unknown */ Option[String]
)

object RoutinesViewRow {
  implicit lazy val reads: Reads[RoutinesViewRow] = Reads[RoutinesViewRow](json => JsResult.fromTry(
      Try(
        RoutinesViewRow(
          specificCatalog = json.\("specific_catalog").toOption.map(_.as(Reads.StringReads)),
          specificSchema = json.\("specific_schema").toOption.map(_.as(Reads.StringReads)),
          specificName = json.\("specific_name").toOption.map(_.as(Reads.StringReads)),
          routineCatalog = json.\("routine_catalog").toOption.map(_.as(Reads.StringReads)),
          routineSchema = json.\("routine_schema").toOption.map(_.as(Reads.StringReads)),
          routineName = json.\("routine_name").toOption.map(_.as(Reads.StringReads)),
          routineType = json.\("routine_type").toOption.map(_.as(Reads.StringReads)),
          moduleCatalog = json.\("module_catalog").toOption.map(_.as(Reads.StringReads)),
          moduleSchema = json.\("module_schema").toOption.map(_.as(Reads.StringReads)),
          moduleName = json.\("module_name").toOption.map(_.as(Reads.StringReads)),
          udtCatalog = json.\("udt_catalog").toOption.map(_.as(Reads.StringReads)),
          udtSchema = json.\("udt_schema").toOption.map(_.as(Reads.StringReads)),
          udtName = json.\("udt_name").toOption.map(_.as(Reads.StringReads)),
          dataType = json.\("data_type").toOption.map(_.as(Reads.StringReads)),
          characterMaximumLength = json.\("character_maximum_length").toOption.map(_.as(Reads.IntReads)),
          characterOctetLength = json.\("character_octet_length").toOption.map(_.as(Reads.IntReads)),
          characterSetCatalog = json.\("character_set_catalog").toOption.map(_.as(Reads.StringReads)),
          characterSetSchema = json.\("character_set_schema").toOption.map(_.as(Reads.StringReads)),
          characterSetName = json.\("character_set_name").toOption.map(_.as(Reads.StringReads)),
          collationCatalog = json.\("collation_catalog").toOption.map(_.as(Reads.StringReads)),
          collationSchema = json.\("collation_schema").toOption.map(_.as(Reads.StringReads)),
          collationName = json.\("collation_name").toOption.map(_.as(Reads.StringReads)),
          numericPrecision = json.\("numeric_precision").toOption.map(_.as(Reads.IntReads)),
          numericPrecisionRadix = json.\("numeric_precision_radix").toOption.map(_.as(Reads.IntReads)),
          numericScale = json.\("numeric_scale").toOption.map(_.as(Reads.IntReads)),
          datetimePrecision = json.\("datetime_precision").toOption.map(_.as(Reads.IntReads)),
          intervalType = json.\("interval_type").toOption.map(_.as(Reads.StringReads)),
          intervalPrecision = json.\("interval_precision").toOption.map(_.as(Reads.IntReads)),
          typeUdtCatalog = json.\("type_udt_catalog").toOption.map(_.as(Reads.StringReads)),
          typeUdtSchema = json.\("type_udt_schema").toOption.map(_.as(Reads.StringReads)),
          typeUdtName = json.\("type_udt_name").toOption.map(_.as(Reads.StringReads)),
          scopeCatalog = json.\("scope_catalog").toOption.map(_.as(Reads.StringReads)),
          scopeSchema = json.\("scope_schema").toOption.map(_.as(Reads.StringReads)),
          scopeName = json.\("scope_name").toOption.map(_.as(Reads.StringReads)),
          maximumCardinality = json.\("maximum_cardinality").toOption.map(_.as(Reads.IntReads)),
          dtdIdentifier = json.\("dtd_identifier").toOption.map(_.as(Reads.StringReads)),
          routineBody = json.\("routine_body").toOption.map(_.as(Reads.StringReads)),
          routineDefinition = json.\("routine_definition").toOption.map(_.as(Reads.StringReads)),
          externalName = json.\("external_name").toOption.map(_.as(Reads.StringReads)),
          externalLanguage = json.\("external_language").toOption.map(_.as(Reads.StringReads)),
          parameterStyle = json.\("parameter_style").toOption.map(_.as(Reads.StringReads)),
          isDeterministic = json.\("is_deterministic").toOption.map(_.as(Reads.StringReads)),
          sqlDataAccess = json.\("sql_data_access").toOption.map(_.as(Reads.StringReads)),
          isNullCall = json.\("is_null_call").toOption.map(_.as(Reads.StringReads)),
          sqlPath = json.\("sql_path").toOption.map(_.as(Reads.StringReads)),
          schemaLevelRoutine = json.\("schema_level_routine").toOption.map(_.as(Reads.StringReads)),
          maxDynamicResultSets = json.\("max_dynamic_result_sets").toOption.map(_.as(Reads.IntReads)),
          isUserDefinedCast = json.\("is_user_defined_cast").toOption.map(_.as(Reads.StringReads)),
          isImplicitlyInvocable = json.\("is_implicitly_invocable").toOption.map(_.as(Reads.StringReads)),
          securityType = json.\("security_type").toOption.map(_.as(Reads.StringReads)),
          toSqlSpecificCatalog = json.\("to_sql_specific_catalog").toOption.map(_.as(Reads.StringReads)),
          toSqlSpecificSchema = json.\("to_sql_specific_schema").toOption.map(_.as(Reads.StringReads)),
          toSqlSpecificName = json.\("to_sql_specific_name").toOption.map(_.as(Reads.StringReads)),
          asLocator = json.\("as_locator").toOption.map(_.as(Reads.StringReads)),
          created = json.\("created").toOption.map(_.as(TypoInstant.reads)),
          lastAltered = json.\("last_altered").toOption.map(_.as(TypoInstant.reads)),
          newSavepointLevel = json.\("new_savepoint_level").toOption.map(_.as(Reads.StringReads)),
          isUdtDependent = json.\("is_udt_dependent").toOption.map(_.as(Reads.StringReads)),
          resultCastFromDataType = json.\("result_cast_from_data_type").toOption.map(_.as(Reads.StringReads)),
          resultCastAsLocator = json.\("result_cast_as_locator").toOption.map(_.as(Reads.StringReads)),
          resultCastCharMaxLength = json.\("result_cast_char_max_length").toOption.map(_.as(Reads.IntReads)),
          resultCastCharOctetLength = json.\("result_cast_char_octet_length").toOption.map(_.as(Reads.IntReads)),
          resultCastCharSetCatalog = json.\("result_cast_char_set_catalog").toOption.map(_.as(Reads.StringReads)),
          resultCastCharSetSchema = json.\("result_cast_char_set_schema").toOption.map(_.as(Reads.StringReads)),
          resultCastCharSetName = json.\("result_cast_char_set_name").toOption.map(_.as(Reads.StringReads)),
          resultCastCollationCatalog = json.\("result_cast_collation_catalog").toOption.map(_.as(Reads.StringReads)),
          resultCastCollationSchema = json.\("result_cast_collation_schema").toOption.map(_.as(Reads.StringReads)),
          resultCastCollationName = json.\("result_cast_collation_name").toOption.map(_.as(Reads.StringReads)),
          resultCastNumericPrecision = json.\("result_cast_numeric_precision").toOption.map(_.as(Reads.IntReads)),
          resultCastNumericPrecisionRadix = json.\("result_cast_numeric_precision_radix").toOption.map(_.as(Reads.IntReads)),
          resultCastNumericScale = json.\("result_cast_numeric_scale").toOption.map(_.as(Reads.IntReads)),
          resultCastDatetimePrecision = json.\("result_cast_datetime_precision").toOption.map(_.as(Reads.IntReads)),
          resultCastIntervalType = json.\("result_cast_interval_type").toOption.map(_.as(Reads.StringReads)),
          resultCastIntervalPrecision = json.\("result_cast_interval_precision").toOption.map(_.as(Reads.IntReads)),
          resultCastTypeUdtCatalog = json.\("result_cast_type_udt_catalog").toOption.map(_.as(Reads.StringReads)),
          resultCastTypeUdtSchema = json.\("result_cast_type_udt_schema").toOption.map(_.as(Reads.StringReads)),
          resultCastTypeUdtName = json.\("result_cast_type_udt_name").toOption.map(_.as(Reads.StringReads)),
          resultCastScopeCatalog = json.\("result_cast_scope_catalog").toOption.map(_.as(Reads.StringReads)),
          resultCastScopeSchema = json.\("result_cast_scope_schema").toOption.map(_.as(Reads.StringReads)),
          resultCastScopeName = json.\("result_cast_scope_name").toOption.map(_.as(Reads.StringReads)),
          resultCastMaximumCardinality = json.\("result_cast_maximum_cardinality").toOption.map(_.as(Reads.IntReads)),
          resultCastDtdIdentifier = json.\("result_cast_dtd_identifier").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[RoutinesViewRow] = RowParser[RoutinesViewRow] { row =>
    Success(
      RoutinesViewRow(
        specificCatalog = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        specificSchema = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        specificName = row(idx + 2)(Column.columnToOption(Column.columnToString)),
        routineCatalog = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        routineSchema = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        routineName = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        routineType = row(idx + 6)(Column.columnToOption(Column.columnToString)),
        moduleCatalog = row(idx + 7)(Column.columnToOption(Column.columnToString)),
        moduleSchema = row(idx + 8)(Column.columnToOption(Column.columnToString)),
        moduleName = row(idx + 9)(Column.columnToOption(Column.columnToString)),
        udtCatalog = row(idx + 10)(Column.columnToOption(Column.columnToString)),
        udtSchema = row(idx + 11)(Column.columnToOption(Column.columnToString)),
        udtName = row(idx + 12)(Column.columnToOption(Column.columnToString)),
        dataType = row(idx + 13)(Column.columnToOption(Column.columnToString)),
        characterMaximumLength = row(idx + 14)(Column.columnToOption(Column.columnToInt)),
        characterOctetLength = row(idx + 15)(Column.columnToOption(Column.columnToInt)),
        characterSetCatalog = row(idx + 16)(Column.columnToOption(Column.columnToString)),
        characterSetSchema = row(idx + 17)(Column.columnToOption(Column.columnToString)),
        characterSetName = row(idx + 18)(Column.columnToOption(Column.columnToString)),
        collationCatalog = row(idx + 19)(Column.columnToOption(Column.columnToString)),
        collationSchema = row(idx + 20)(Column.columnToOption(Column.columnToString)),
        collationName = row(idx + 21)(Column.columnToOption(Column.columnToString)),
        numericPrecision = row(idx + 22)(Column.columnToOption(Column.columnToInt)),
        numericPrecisionRadix = row(idx + 23)(Column.columnToOption(Column.columnToInt)),
        numericScale = row(idx + 24)(Column.columnToOption(Column.columnToInt)),
        datetimePrecision = row(idx + 25)(Column.columnToOption(Column.columnToInt)),
        intervalType = row(idx + 26)(Column.columnToOption(Column.columnToString)),
        intervalPrecision = row(idx + 27)(Column.columnToOption(Column.columnToInt)),
        typeUdtCatalog = row(idx + 28)(Column.columnToOption(Column.columnToString)),
        typeUdtSchema = row(idx + 29)(Column.columnToOption(Column.columnToString)),
        typeUdtName = row(idx + 30)(Column.columnToOption(Column.columnToString)),
        scopeCatalog = row(idx + 31)(Column.columnToOption(Column.columnToString)),
        scopeSchema = row(idx + 32)(Column.columnToOption(Column.columnToString)),
        scopeName = row(idx + 33)(Column.columnToOption(Column.columnToString)),
        maximumCardinality = row(idx + 34)(Column.columnToOption(Column.columnToInt)),
        dtdIdentifier = row(idx + 35)(Column.columnToOption(Column.columnToString)),
        routineBody = row(idx + 36)(Column.columnToOption(Column.columnToString)),
        routineDefinition = row(idx + 37)(Column.columnToOption(Column.columnToString)),
        externalName = row(idx + 38)(Column.columnToOption(Column.columnToString)),
        externalLanguage = row(idx + 39)(Column.columnToOption(Column.columnToString)),
        parameterStyle = row(idx + 40)(Column.columnToOption(Column.columnToString)),
        isDeterministic = row(idx + 41)(Column.columnToOption(Column.columnToString)),
        sqlDataAccess = row(idx + 42)(Column.columnToOption(Column.columnToString)),
        isNullCall = row(idx + 43)(Column.columnToOption(Column.columnToString)),
        sqlPath = row(idx + 44)(Column.columnToOption(Column.columnToString)),
        schemaLevelRoutine = row(idx + 45)(Column.columnToOption(Column.columnToString)),
        maxDynamicResultSets = row(idx + 46)(Column.columnToOption(Column.columnToInt)),
        isUserDefinedCast = row(idx + 47)(Column.columnToOption(Column.columnToString)),
        isImplicitlyInvocable = row(idx + 48)(Column.columnToOption(Column.columnToString)),
        securityType = row(idx + 49)(Column.columnToOption(Column.columnToString)),
        toSqlSpecificCatalog = row(idx + 50)(Column.columnToOption(Column.columnToString)),
        toSqlSpecificSchema = row(idx + 51)(Column.columnToOption(Column.columnToString)),
        toSqlSpecificName = row(idx + 52)(Column.columnToOption(Column.columnToString)),
        asLocator = row(idx + 53)(Column.columnToOption(Column.columnToString)),
        created = row(idx + 54)(Column.columnToOption(TypoInstant.column)),
        lastAltered = row(idx + 55)(Column.columnToOption(TypoInstant.column)),
        newSavepointLevel = row(idx + 56)(Column.columnToOption(Column.columnToString)),
        isUdtDependent = row(idx + 57)(Column.columnToOption(Column.columnToString)),
        resultCastFromDataType = row(idx + 58)(Column.columnToOption(Column.columnToString)),
        resultCastAsLocator = row(idx + 59)(Column.columnToOption(Column.columnToString)),
        resultCastCharMaxLength = row(idx + 60)(Column.columnToOption(Column.columnToInt)),
        resultCastCharOctetLength = row(idx + 61)(Column.columnToOption(Column.columnToInt)),
        resultCastCharSetCatalog = row(idx + 62)(Column.columnToOption(Column.columnToString)),
        resultCastCharSetSchema = row(idx + 63)(Column.columnToOption(Column.columnToString)),
        resultCastCharSetName = row(idx + 64)(Column.columnToOption(Column.columnToString)),
        resultCastCollationCatalog = row(idx + 65)(Column.columnToOption(Column.columnToString)),
        resultCastCollationSchema = row(idx + 66)(Column.columnToOption(Column.columnToString)),
        resultCastCollationName = row(idx + 67)(Column.columnToOption(Column.columnToString)),
        resultCastNumericPrecision = row(idx + 68)(Column.columnToOption(Column.columnToInt)),
        resultCastNumericPrecisionRadix = row(idx + 69)(Column.columnToOption(Column.columnToInt)),
        resultCastNumericScale = row(idx + 70)(Column.columnToOption(Column.columnToInt)),
        resultCastDatetimePrecision = row(idx + 71)(Column.columnToOption(Column.columnToInt)),
        resultCastIntervalType = row(idx + 72)(Column.columnToOption(Column.columnToString)),
        resultCastIntervalPrecision = row(idx + 73)(Column.columnToOption(Column.columnToInt)),
        resultCastTypeUdtCatalog = row(idx + 74)(Column.columnToOption(Column.columnToString)),
        resultCastTypeUdtSchema = row(idx + 75)(Column.columnToOption(Column.columnToString)),
        resultCastTypeUdtName = row(idx + 76)(Column.columnToOption(Column.columnToString)),
        resultCastScopeCatalog = row(idx + 77)(Column.columnToOption(Column.columnToString)),
        resultCastScopeSchema = row(idx + 78)(Column.columnToOption(Column.columnToString)),
        resultCastScopeName = row(idx + 79)(Column.columnToOption(Column.columnToString)),
        resultCastMaximumCardinality = row(idx + 80)(Column.columnToOption(Column.columnToInt)),
        resultCastDtdIdentifier = row(idx + 81)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit lazy val writes: OWrites[RoutinesViewRow] = OWrites[RoutinesViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "specific_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.specificCatalog),
      "specific_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.specificSchema),
      "specific_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.specificName),
      "routine_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.routineCatalog),
      "routine_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.routineSchema),
      "routine_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.routineName),
      "routine_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.routineType),
      "module_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.moduleCatalog),
      "module_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.moduleSchema),
      "module_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.moduleName),
      "udt_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.udtCatalog),
      "udt_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.udtSchema),
      "udt_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.udtName),
      "data_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.dataType),
      "character_maximum_length" -> Writes.OptionWrites(Writes.IntWrites).writes(o.characterMaximumLength),
      "character_octet_length" -> Writes.OptionWrites(Writes.IntWrites).writes(o.characterOctetLength),
      "character_set_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterSetCatalog),
      "character_set_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterSetSchema),
      "character_set_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.characterSetName),
      "collation_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.collationCatalog),
      "collation_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.collationSchema),
      "collation_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.collationName),
      "numeric_precision" -> Writes.OptionWrites(Writes.IntWrites).writes(o.numericPrecision),
      "numeric_precision_radix" -> Writes.OptionWrites(Writes.IntWrites).writes(o.numericPrecisionRadix),
      "numeric_scale" -> Writes.OptionWrites(Writes.IntWrites).writes(o.numericScale),
      "datetime_precision" -> Writes.OptionWrites(Writes.IntWrites).writes(o.datetimePrecision),
      "interval_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.intervalType),
      "interval_precision" -> Writes.OptionWrites(Writes.IntWrites).writes(o.intervalPrecision),
      "type_udt_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.typeUdtCatalog),
      "type_udt_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.typeUdtSchema),
      "type_udt_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.typeUdtName),
      "scope_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.scopeCatalog),
      "scope_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.scopeSchema),
      "scope_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.scopeName),
      "maximum_cardinality" -> Writes.OptionWrites(Writes.IntWrites).writes(o.maximumCardinality),
      "dtd_identifier" -> Writes.OptionWrites(Writes.StringWrites).writes(o.dtdIdentifier),
      "routine_body" -> Writes.OptionWrites(Writes.StringWrites).writes(o.routineBody),
      "routine_definition" -> Writes.OptionWrites(Writes.StringWrites).writes(o.routineDefinition),
      "external_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.externalName),
      "external_language" -> Writes.OptionWrites(Writes.StringWrites).writes(o.externalLanguage),
      "parameter_style" -> Writes.OptionWrites(Writes.StringWrites).writes(o.parameterStyle),
      "is_deterministic" -> Writes.OptionWrites(Writes.StringWrites).writes(o.isDeterministic),
      "sql_data_access" -> Writes.OptionWrites(Writes.StringWrites).writes(o.sqlDataAccess),
      "is_null_call" -> Writes.OptionWrites(Writes.StringWrites).writes(o.isNullCall),
      "sql_path" -> Writes.OptionWrites(Writes.StringWrites).writes(o.sqlPath),
      "schema_level_routine" -> Writes.OptionWrites(Writes.StringWrites).writes(o.schemaLevelRoutine),
      "max_dynamic_result_sets" -> Writes.OptionWrites(Writes.IntWrites).writes(o.maxDynamicResultSets),
      "is_user_defined_cast" -> Writes.OptionWrites(Writes.StringWrites).writes(o.isUserDefinedCast),
      "is_implicitly_invocable" -> Writes.OptionWrites(Writes.StringWrites).writes(o.isImplicitlyInvocable),
      "security_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.securityType),
      "to_sql_specific_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.toSqlSpecificCatalog),
      "to_sql_specific_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.toSqlSpecificSchema),
      "to_sql_specific_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.toSqlSpecificName),
      "as_locator" -> Writes.OptionWrites(Writes.StringWrites).writes(o.asLocator),
      "created" -> Writes.OptionWrites(TypoInstant.writes).writes(o.created),
      "last_altered" -> Writes.OptionWrites(TypoInstant.writes).writes(o.lastAltered),
      "new_savepoint_level" -> Writes.OptionWrites(Writes.StringWrites).writes(o.newSavepointLevel),
      "is_udt_dependent" -> Writes.OptionWrites(Writes.StringWrites).writes(o.isUdtDependent),
      "result_cast_from_data_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastFromDataType),
      "result_cast_as_locator" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastAsLocator),
      "result_cast_char_max_length" -> Writes.OptionWrites(Writes.IntWrites).writes(o.resultCastCharMaxLength),
      "result_cast_char_octet_length" -> Writes.OptionWrites(Writes.IntWrites).writes(o.resultCastCharOctetLength),
      "result_cast_char_set_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastCharSetCatalog),
      "result_cast_char_set_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastCharSetSchema),
      "result_cast_char_set_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastCharSetName),
      "result_cast_collation_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastCollationCatalog),
      "result_cast_collation_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastCollationSchema),
      "result_cast_collation_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastCollationName),
      "result_cast_numeric_precision" -> Writes.OptionWrites(Writes.IntWrites).writes(o.resultCastNumericPrecision),
      "result_cast_numeric_precision_radix" -> Writes.OptionWrites(Writes.IntWrites).writes(o.resultCastNumericPrecisionRadix),
      "result_cast_numeric_scale" -> Writes.OptionWrites(Writes.IntWrites).writes(o.resultCastNumericScale),
      "result_cast_datetime_precision" -> Writes.OptionWrites(Writes.IntWrites).writes(o.resultCastDatetimePrecision),
      "result_cast_interval_type" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastIntervalType),
      "result_cast_interval_precision" -> Writes.OptionWrites(Writes.IntWrites).writes(o.resultCastIntervalPrecision),
      "result_cast_type_udt_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastTypeUdtCatalog),
      "result_cast_type_udt_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastTypeUdtSchema),
      "result_cast_type_udt_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastTypeUdtName),
      "result_cast_scope_catalog" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastScopeCatalog),
      "result_cast_scope_schema" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastScopeSchema),
      "result_cast_scope_name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastScopeName),
      "result_cast_maximum_cardinality" -> Writes.OptionWrites(Writes.IntWrites).writes(o.resultCastMaximumCardinality),
      "result_cast_dtd_identifier" -> Writes.OptionWrites(Writes.StringWrites).writes(o.resultCastDtdIdentifier)
    ))
  )
}
