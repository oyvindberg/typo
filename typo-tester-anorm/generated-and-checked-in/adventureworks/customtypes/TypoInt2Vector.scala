/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import org.postgresql.jdbc.PgArray
import org.postgresql.util.PGobject
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** int2vector (via PGObject). Valid syntax: `TypoInt2Vector("1 2 3") */
case class TypoInt2Vector(value: String)

object TypoInt2Vector {
  implicit lazy val arrayColumn: Column[Array[TypoInt2Vector]] = Column.nonNull[Array[TypoInt2Vector]]((v1: Any, _) =>
    v1 match {
        case v: PgArray =>
         v.getArray match {
           case v: Array[?] =>
             Right(v.map(v => TypoInt2Vector(v.asInstanceOf[PGobject].getValue)))
           case other => Left(TypeDoesNotMatch(s"Expected one-dimensional array from JDBC to produce an array of TypoInt2Vector, got ${other.getClass.getName}"))
         }
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit lazy val arrayToStatement: ToStatement[Array[TypoInt2Vector]] = ToStatement[Array[TypoInt2Vector]]((s, index, v) => s.setArray(index, s.getConnection.createArrayOf("int2vector", v.map(v => {
                                                                                                                                 val obj = new PGobject
                                                                                                                                 obj.setType("int2vector")
                                                                                                                                 obj.setValue(v.value)
                                                                                                                                 obj
                                                                                                                               }))))
  implicit lazy val bijection: Bijection[TypoInt2Vector, String] = Bijection[TypoInt2Vector, String](_.value)(TypoInt2Vector.apply)
  implicit lazy val column: Column[TypoInt2Vector] = Column.nonNull[TypoInt2Vector]((v1: Any, _) =>
    v1 match {
      case v: PGobject => Right(TypoInt2Vector(v.getValue))
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.util.PGobject, got ${other.getClass.getName}"))
    }
  )
  implicit lazy val ordering: Ordering[TypoInt2Vector] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[TypoInt2Vector] = new ParameterMetaData[TypoInt2Vector] {
    override def sqlType: String = "int2vector"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[TypoInt2Vector] = Reads.StringReads.map(TypoInt2Vector.apply)
  implicit lazy val toStatement: ToStatement[TypoInt2Vector] = ToStatement[TypoInt2Vector]((s, index, v) => s.setObject(index, {
                                                                    val obj = new PGobject
                                                                    obj.setType("int2vector")
                                                                    obj.setValue(v.value)
                                                                    obj
                                                                  }))
  implicit lazy val writes: Writes[TypoInt2Vector] = Writes.StringWrites.contramap(_.value)
}
