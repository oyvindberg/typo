/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import org.postgresql.jdbc.PgArray
import org.postgresql.util.PGobject
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** record (via PGObject) */
case class TypoRecord(value: String)

object TypoRecord {
  implicit lazy val arrayColumn: Column[Array[TypoRecord]] = Column.nonNull[Array[TypoRecord]]((v1: Any, _) =>
    v1 match {
        case v: PgArray =>
         v.getArray match {
           case v: Array[?] =>
             Right(v.map(v => TypoRecord(v.asInstanceOf[PGobject].getValue)))
           case other => Left(TypeDoesNotMatch(s"Expected one-dimensional array from JDBC to produce an array of TypoRecord, got ${other.getClass.getName}"))
         }
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit lazy val arrayToStatement: ToStatement[Array[TypoRecord]] = ToStatement[Array[TypoRecord]]((s, index, v) => s.setArray(index, s.getConnection.createArrayOf("record", v.map(v => {
                                                                                                                         val obj = new PGobject
                                                                                                                         obj.setType("record")
                                                                                                                         obj.setValue(v.value)
                                                                                                                         obj
                                                                                                                       }))))
  implicit lazy val bijection: Bijection[TypoRecord, String] = Bijection[TypoRecord, String](_.value)(TypoRecord.apply)
  implicit lazy val column: Column[TypoRecord] = Column.nonNull[TypoRecord]((v1: Any, _) =>
    v1 match {
      case v: PGobject => Right(TypoRecord(v.getValue))
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.util.PGobject, got ${other.getClass.getName}"))
    }
  )
  implicit lazy val ordering: Ordering[TypoRecord] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[TypoRecord] = new ParameterMetaData[TypoRecord] {
    override def sqlType: String = "record"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[TypoRecord] = Reads.StringReads.map(TypoRecord.apply)
  implicit lazy val text: Text[TypoRecord] = new Text[TypoRecord] {
    override def unsafeEncode(v: TypoRecord, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: TypoRecord, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[TypoRecord] = ToStatement[TypoRecord]((s, index, v) => s.setObject(index, {
                                                                val obj = new PGobject
                                                                obj.setType("record")
                                                                obj.setValue(v.value)
                                                                obj
                                                              }))
  implicit lazy val writes: Writes[TypoRecord] = Writes.StringWrites.contramap(_.value)
}
