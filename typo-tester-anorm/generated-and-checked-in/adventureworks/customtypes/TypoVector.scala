/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import anorm.TypeDoesNotMatch
import java.sql.Types
import org.postgresql.jdbc.PgArray
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import typo.dsl.Bijection

/** extension: https://github.com/pgvector/pgvector */
case class TypoVector(value: Array[Float])

object TypoVector {
  implicit lazy val bijection: Bijection[TypoVector, Array[Float]] = Bijection[TypoVector, Array[Float]](_.value)(TypoVector.apply)
  implicit lazy val column: Column[TypoVector] = Column.nonNull[TypoVector]((v1: Any, _) =>
    v1 match {
      case v: PgArray => Right(TypoVector(v.getArray.asInstanceOf[Array[java.lang.Float]].map(Float2float)))
      case other => Left(TypeDoesNotMatch(s"Expected instance of org.postgresql.jdbc.PgArray, got ${other.getClass.getName}"))
    }
  )
  implicit def ordering(implicit O0: Ordering[Array[Float]]): Ordering[TypoVector] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[TypoVector] = new ParameterMetaData[TypoVector] {
    override def sqlType: String = "vector"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[TypoVector] = Reads.ArrayReads[Float](using Reads.FloatReads, implicitly).map(TypoVector.apply)
  implicit lazy val text: Text[TypoVector] = new Text[TypoVector] {
    override def unsafeEncode(v: TypoVector, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value.mkString("[", ",", "]"), sb)
    override def unsafeArrayEncode(v: TypoVector, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value.mkString("[", ",", "]"), sb)
  }
  implicit lazy val toStatement: ToStatement[TypoVector] = ToStatement[TypoVector]((s, index, v) => s.setObject(index, v.value.map(x => x: java.lang.Float)))
  implicit lazy val writes: Writes[TypoVector] = Writes.arrayWrites[Float](using implicitly, Writes.FloatWrites).contramap(_.value)
}
