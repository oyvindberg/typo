/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vendor

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: purchasing.vendor
    Companies from whom Adventure Works Cycles purchases parts or other goods.
    Primary key: businessentityid */
case class VendorRow(
  /** Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID
      Points to [[person.businessentity.BusinessentityRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Vendor account (identification) number. */
  accountnumber: AccountNumber,
  /** Company name. */
  name: Name,
  /** 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
      Constraint CK_Vendor_CreditRating affecting columns creditrating: (((creditrating >= 1) AND (creditrating <= 5))) */
  creditrating: TypoShort,
  /** 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
      Default: true */
  preferredvendorstatus: Flag,
  /** 0 = Vendor no longer used. 1 = Vendor is actively used.
      Default: true */
  activeflag: Flag,
  /** Vendor URL. */
  purchasingwebserviceurl: Option[/* max 1024 chars */ String],
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val id = businessentityid
   def toUnsavedRow(preferredvendorstatus: Defaulted[Flag] = Defaulted.Provided(this.preferredvendorstatus), activeflag: Defaulted[Flag] = Defaulted.Provided(this.activeflag), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): VendorRowUnsaved =
     VendorRowUnsaved(businessentityid, accountnumber, name, creditrating, purchasingwebserviceurl, preferredvendorstatus, activeflag, modifieddate)
 }

object VendorRow {
  implicit lazy val reads: Reads[VendorRow] = Reads[VendorRow](json => JsResult.fromTry(
      Try(
        VendorRow(
          businessentityid = json.\("businessentityid").as(BusinessentityId.reads),
          accountnumber = json.\("accountnumber").as(AccountNumber.reads),
          name = json.\("name").as(Name.reads),
          creditrating = json.\("creditrating").as(TypoShort.reads),
          preferredvendorstatus = json.\("preferredvendorstatus").as(Flag.reads),
          activeflag = json.\("activeflag").as(Flag.reads),
          purchasingwebserviceurl = json.\("purchasingwebserviceurl").toOption.map(_.as(Reads.StringReads)),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VendorRow] = RowParser[VendorRow] { row =>
    Success(
      VendorRow(
        businessentityid = row(idx + 0)(BusinessentityId.column),
        accountnumber = row(idx + 1)(AccountNumber.column),
        name = row(idx + 2)(Name.column),
        creditrating = row(idx + 3)(TypoShort.column),
        preferredvendorstatus = row(idx + 4)(Flag.column),
        activeflag = row(idx + 5)(Flag.column),
        purchasingwebserviceurl = row(idx + 6)(Column.columnToOption(Column.columnToString)),
        modifieddate = row(idx + 7)(TypoLocalDateTime.column)
      )
    )
  }
  implicit lazy val text: Text[VendorRow] = Text.instance[VendorRow]{ (row, sb) =>
    BusinessentityId.text.unsafeEncode(row.businessentityid, sb)
    sb.append(Text.DELIMETER)
    AccountNumber.text.unsafeEncode(row.accountnumber, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.creditrating, sb)
    sb.append(Text.DELIMETER)
    Flag.text.unsafeEncode(row.preferredvendorstatus, sb)
    sb.append(Text.DELIMETER)
    Flag.text.unsafeEncode(row.activeflag, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.purchasingwebserviceurl, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val writes: OWrites[VendorRow] = OWrites[VendorRow](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> BusinessentityId.writes.writes(o.businessentityid),
      "accountnumber" -> AccountNumber.writes.writes(o.accountnumber),
      "name" -> Name.writes.writes(o.name),
      "creditrating" -> TypoShort.writes.writes(o.creditrating),
      "preferredvendorstatus" -> Flag.writes.writes(o.preferredvendorstatus),
      "activeflag" -> Flag.writes.writes(o.activeflag),
      "purchasingwebserviceurl" -> Writes.OptionWrites(Writes.StringWrites).writes(o.purchasingwebserviceurl),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
