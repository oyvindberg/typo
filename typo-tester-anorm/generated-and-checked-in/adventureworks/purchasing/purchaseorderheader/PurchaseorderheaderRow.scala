/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderheader

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.purchasing.shipmethod.ShipmethodId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Table: purchasing.purchaseorderheader
    General purchase order information. See PurchaseOrderDetail.
    Primary key: purchaseorderid */
case class PurchaseorderheaderRow(
  /** Primary key.
      Default: nextval('purchasing.purchaseorderheader_purchaseorderid_seq'::regclass) */
  purchaseorderid: PurchaseorderheaderId,
  /** Incremental number to track changes to the purchase order over time.
      Default: 0 */
  revisionnumber: TypoShort,
  /** Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
      Default: 1
      Constraint CK_PurchaseOrderHeader_Status affecting columns status: (((status >= 1) AND (status <= 4))) */
  status: TypoShort,
  /** Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
      Points to [[humanresources.employee.EmployeeRow.businessentityid]] */
  employeeid: BusinessentityId,
  /** Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
      Points to [[vendor.VendorRow.businessentityid]] */
  vendorid: BusinessentityId,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
      Points to [[shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: ShipmethodId,
  /** Purchase order creation date.
      Default: now()
      Constraint CK_PurchaseOrderHeader_ShipDate affecting columns orderdate, shipdate: (((shipdate >= orderdate) OR (shipdate IS NULL))) */
  orderdate: TypoLocalDateTime,
  /** Estimated shipment date from the vendor.
      Constraint CK_PurchaseOrderHeader_ShipDate affecting columns orderdate, shipdate: (((shipdate >= orderdate) OR (shipdate IS NULL))) */
  shipdate: Option[TypoLocalDateTime],
  /** Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
      Default: 0.00
      Constraint CK_PurchaseOrderHeader_SubTotal affecting columns subtotal: ((subtotal >= 0.00)) */
  subtotal: BigDecimal,
  /** Tax amount.
      Default: 0.00
      Constraint CK_PurchaseOrderHeader_TaxAmt affecting columns taxamt: ((taxamt >= 0.00)) */
  taxamt: BigDecimal,
  /** Shipping cost.
      Default: 0.00
      Constraint CK_PurchaseOrderHeader_Freight affecting columns freight: ((freight >= 0.00)) */
  freight: BigDecimal,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   def toUnsavedRow(purchaseorderid: Defaulted[PurchaseorderheaderId], revisionnumber: Defaulted[TypoShort] = Defaulted.Provided(this.revisionnumber), status: Defaulted[TypoShort] = Defaulted.Provided(this.status), orderdate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.orderdate), subtotal: Defaulted[BigDecimal] = Defaulted.Provided(this.subtotal), taxamt: Defaulted[BigDecimal] = Defaulted.Provided(this.taxamt), freight: Defaulted[BigDecimal] = Defaulted.Provided(this.freight), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): PurchaseorderheaderRowUnsaved =
     PurchaseorderheaderRowUnsaved(employeeid, vendorid, shipmethodid, shipdate, purchaseorderid, revisionnumber, status, orderdate, subtotal, taxamt, freight, modifieddate)
 }

object PurchaseorderheaderRow {
  implicit lazy val reads: Reads[PurchaseorderheaderRow] = Reads[PurchaseorderheaderRow](json => JsResult.fromTry(
      Try(
        PurchaseorderheaderRow(
          purchaseorderid = json.\("purchaseorderid").as(PurchaseorderheaderId.reads),
          revisionnumber = json.\("revisionnumber").as(TypoShort.reads),
          status = json.\("status").as(TypoShort.reads),
          employeeid = json.\("employeeid").as(BusinessentityId.reads),
          vendorid = json.\("vendorid").as(BusinessentityId.reads),
          shipmethodid = json.\("shipmethodid").as(ShipmethodId.reads),
          orderdate = json.\("orderdate").as(TypoLocalDateTime.reads),
          shipdate = json.\("shipdate").toOption.map(_.as(TypoLocalDateTime.reads)),
          subtotal = json.\("subtotal").as(Reads.bigDecReads),
          taxamt = json.\("taxamt").as(Reads.bigDecReads),
          freight = json.\("freight").as(Reads.bigDecReads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PurchaseorderheaderRow] = RowParser[PurchaseorderheaderRow] { row =>
    Success(
      PurchaseorderheaderRow(
        purchaseorderid = row(idx + 0)(PurchaseorderheaderId.column),
        revisionnumber = row(idx + 1)(TypoShort.column),
        status = row(idx + 2)(TypoShort.column),
        employeeid = row(idx + 3)(BusinessentityId.column),
        vendorid = row(idx + 4)(BusinessentityId.column),
        shipmethodid = row(idx + 5)(ShipmethodId.column),
        orderdate = row(idx + 6)(TypoLocalDateTime.column),
        shipdate = row(idx + 7)(Column.columnToOption(TypoLocalDateTime.column)),
        subtotal = row(idx + 8)(Column.columnToScalaBigDecimal),
        taxamt = row(idx + 9)(Column.columnToScalaBigDecimal),
        freight = row(idx + 10)(Column.columnToScalaBigDecimal),
        modifieddate = row(idx + 11)(TypoLocalDateTime.column)
      )
    )
  }
  implicit lazy val text: Text[PurchaseorderheaderRow] = Text.instance[PurchaseorderheaderRow]{ (row, sb) =>
    PurchaseorderheaderId.text.unsafeEncode(row.purchaseorderid, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.revisionnumber, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.status, sb)
    sb.append(Text.DELIMETER)
    BusinessentityId.text.unsafeEncode(row.employeeid, sb)
    sb.append(Text.DELIMETER)
    BusinessentityId.text.unsafeEncode(row.vendorid, sb)
    sb.append(Text.DELIMETER)
    ShipmethodId.text.unsafeEncode(row.shipmethodid, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.orderdate, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.shipdate, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.subtotal, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.taxamt, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.freight, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val writes: OWrites[PurchaseorderheaderRow] = OWrites[PurchaseorderheaderRow](o =>
    new JsObject(ListMap[String, JsValue](
      "purchaseorderid" -> PurchaseorderheaderId.writes.writes(o.purchaseorderid),
      "revisionnumber" -> TypoShort.writes.writes(o.revisionnumber),
      "status" -> TypoShort.writes.writes(o.status),
      "employeeid" -> BusinessentityId.writes.writes(o.employeeid),
      "vendorid" -> BusinessentityId.writes.writes(o.vendorid),
      "shipmethodid" -> ShipmethodId.writes.writes(o.shipmethodid),
      "orderdate" -> TypoLocalDateTime.writes.writes(o.orderdate),
      "shipdate" -> Writes.OptionWrites(TypoLocalDateTime.writes).writes(o.shipdate),
      "subtotal" -> Writes.BigDecimalWrites.writes(o.subtotal),
      "taxamt" -> Writes.BigDecimalWrites.writes(o.taxamt),
      "freight" -> Writes.BigDecimalWrites.writes(o.freight),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
