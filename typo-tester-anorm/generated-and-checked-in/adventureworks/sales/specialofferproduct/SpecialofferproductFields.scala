/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialofferproduct

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.production.product.ProductFields
import adventureworks.production.product.ProductId
import adventureworks.production.product.ProductRow
import adventureworks.sales.specialoffer.SpecialofferFields
import adventureworks.sales.specialoffer.SpecialofferId
import adventureworks.sales.specialoffer.SpecialofferRow
import typo.dsl.ForeignKey
import typo.dsl.Path
import typo.dsl.Required
import typo.dsl.SqlExpr
import typo.dsl.SqlExpr.CompositeIn
import typo.dsl.SqlExpr.CompositeIn.TuplePart
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

trait SpecialofferproductFields {
  def specialofferid: IdField[SpecialofferId, SpecialofferproductRow]
  def productid: IdField[ProductId, SpecialofferproductRow]
  def rowguid: Field[TypoUUID, SpecialofferproductRow]
  def modifieddate: Field[TypoLocalDateTime, SpecialofferproductRow]
  def fkProductionProduct: ForeignKey[ProductFields, ProductRow] =
    ForeignKey[ProductFields, ProductRow]("sales.FK_SpecialOfferProduct_Product_ProductID", Nil)
      .withColumnPair(productid, _.productid)
  def fkSpecialoffer: ForeignKey[SpecialofferFields, SpecialofferRow] =
    ForeignKey[SpecialofferFields, SpecialofferRow]("sales.FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", Nil)
      .withColumnPair(specialofferid, _.specialofferid)
  def compositeIdIs(compositeId: SpecialofferproductId): SqlExpr[Boolean, Required] =
    specialofferid.isEqual(compositeId.specialofferid).and(productid.isEqual(compositeId.productid))
  def compositeIdIn(compositeIds: Array[SpecialofferproductId]): SqlExpr[Boolean, Required] =
    new CompositeIn(compositeIds)(TuplePart(specialofferid)(_.specialofferid), TuplePart(productid)(_.productid))
  
}

object SpecialofferproductFields {
  lazy val structure: Relation[SpecialofferproductFields, SpecialofferproductRow] =
    new Impl(Nil)
    
  private final class Impl(val _path: List[Path])
    extends Relation[SpecialofferproductFields, SpecialofferproductRow] {
  
    override lazy val fields: SpecialofferproductFields = new SpecialofferproductFields {
      override def specialofferid = IdField[SpecialofferId, SpecialofferproductRow](_path, "specialofferid", None, Some("int4"), x => x.specialofferid, (row, value) => row.copy(specialofferid = value))
      override def productid = IdField[ProductId, SpecialofferproductRow](_path, "productid", None, Some("int4"), x => x.productid, (row, value) => row.copy(productid = value))
      override def rowguid = Field[TypoUUID, SpecialofferproductRow](_path, "rowguid", None, Some("uuid"), x => x.rowguid, (row, value) => row.copy(rowguid = value))
      override def modifieddate = Field[TypoLocalDateTime, SpecialofferproductRow](_path, "modifieddate", Some("text"), Some("timestamp"), x => x.modifieddate, (row, value) => row.copy(modifieddate = value))
    }
  
    override lazy val columns: List[FieldLikeNoHkt[?, SpecialofferproductRow]] =
      List[FieldLikeNoHkt[?, SpecialofferproductRow]](fields.specialofferid, fields.productid, fields.rowguid, fields.modifieddate)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
