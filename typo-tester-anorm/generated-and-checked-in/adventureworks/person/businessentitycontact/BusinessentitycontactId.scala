/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package businessentitycontact

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.contacttype.ContacttypeId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** Type for the composite primary key of table `person.businessentitycontact` */
case class BusinessentitycontactId(
  businessentityid: BusinessentityId,
  personid: BusinessentityId,
  contacttypeid: ContacttypeId
)
object BusinessentitycontactId {
  implicit lazy val ordering: Ordering[BusinessentitycontactId] = Ordering.by(x => (x.businessentityid, x.personid, x.contacttypeid))
  implicit lazy val reads: Reads[BusinessentitycontactId] = Reads[BusinessentitycontactId](json => JsResult.fromTry(
      Try(
        BusinessentitycontactId(
          businessentityid = json.\("businessentityid").as(BusinessentityId.reads),
          personid = json.\("personid").as(BusinessentityId.reads),
          contacttypeid = json.\("contacttypeid").as(ContacttypeId.reads)
        )
      )
    ),
  )
  implicit lazy val writes: OWrites[BusinessentitycontactId] = OWrites[BusinessentitycontactId](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> BusinessentityId.writes.writes(o.businessentityid),
      "personid" -> BusinessentityId.writes.writes(o.personid),
      "contacttypeid" -> ContacttypeId.writes.writes(o.contacttypeid)
    ))
  )
}
