/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package emailaddress

import adventureworks.person.businessentity.BusinessentityId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Type for the composite primary key of table `person.emailaddress` */
case class EmailaddressId(
  businessentityid: BusinessentityId,
  emailaddressid: Int
)
object EmailaddressId {
  implicit lazy val ordering: Ordering[EmailaddressId] = Ordering.by(x => (x.businessentityid, x.emailaddressid))
  implicit lazy val reads: Reads[EmailaddressId] = Reads[EmailaddressId](json => JsResult.fromTry(
      Try(
        EmailaddressId(
          businessentityid = json.\("businessentityid").as(BusinessentityId.reads),
          emailaddressid = json.\("emailaddressid").as(Reads.IntReads)
        )
      )
    ),
  )
  implicit lazy val writes: OWrites[EmailaddressId] = OWrites[EmailaddressId](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> BusinessentityId.writes.writes(o.businessentityid),
      "emailaddressid" -> Writes.IntWrites.writes(o.emailaddressid)
    ))
  )
}
