/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package bec

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.contacttype.ContacttypeId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** View: pe.bec */
case class BecViewRow(
  /** Points to [[person.businessentitycontact.BusinessentitycontactRow.businessentityid]] */
  id: BusinessentityId,
  /** Points to [[person.businessentitycontact.BusinessentitycontactRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[person.businessentitycontact.BusinessentitycontactRow.personid]] */
  personid: BusinessentityId,
  /** Points to [[person.businessentitycontact.BusinessentitycontactRow.contacttypeid]] */
  contacttypeid: ContacttypeId,
  /** Points to [[person.businessentitycontact.BusinessentitycontactRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[person.businessentitycontact.BusinessentitycontactRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object BecViewRow {
  implicit lazy val reads: Reads[BecViewRow] = Reads[BecViewRow](json => JsResult.fromTry(
      Try(
        BecViewRow(
          id = json.\("id").as(BusinessentityId.reads),
          businessentityid = json.\("businessentityid").as(BusinessentityId.reads),
          personid = json.\("personid").as(BusinessentityId.reads),
          contacttypeid = json.\("contacttypeid").as(ContacttypeId.reads),
          rowguid = json.\("rowguid").as(TypoUUID.reads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[BecViewRow] = RowParser[BecViewRow] { row =>
    Success(
      BecViewRow(
        id = row(idx + 0)(BusinessentityId.column),
        businessentityid = row(idx + 1)(BusinessentityId.column),
        personid = row(idx + 2)(BusinessentityId.column),
        contacttypeid = row(idx + 3)(ContacttypeId.column),
        rowguid = row(idx + 4)(TypoUUID.column),
        modifieddate = row(idx + 5)(TypoLocalDateTime.column)
      )
    )
  }
  implicit lazy val writes: OWrites[BecViewRow] = OWrites[BecViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> BusinessentityId.writes.writes(o.id),
      "businessentityid" -> BusinessentityId.writes.writes(o.businessentityid),
      "personid" -> BusinessentityId.writes.writes(o.personid),
      "contacttypeid" -> ContacttypeId.writes.writes(o.contacttypeid),
      "rowguid" -> TypoUUID.writes.writes(o.rowguid),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
