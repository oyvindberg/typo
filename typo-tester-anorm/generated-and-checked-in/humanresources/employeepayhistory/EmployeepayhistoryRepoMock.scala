/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeepayhistory

import java.sql.Connection

class EmployeepayhistoryRepoMock(toRow: Function1[EmployeepayhistoryRowUnsaved, EmployeepayhistoryRow],
                                 map: scala.collection.mutable.Map[EmployeepayhistoryId, EmployeepayhistoryRow] = scala.collection.mutable.Map.empty) extends EmployeepayhistoryRepo {
  override def delete(compositeId: EmployeepayhistoryId)(implicit c: Connection): Boolean = {
    map.remove(compositeId).isDefined
  }
  override def insert(unsaved: EmployeepayhistoryRow)(implicit c: Connection): EmployeepayhistoryRow = {
    if (map.contains(unsaved.compositeId))
      sys.error(s"id ${unsaved.compositeId} already exists")
    else
      map.put(unsaved.compositeId, unsaved)
    unsaved
  }
  override def insert(unsaved: EmployeepayhistoryRowUnsaved)(implicit c: Connection): EmployeepayhistoryRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[EmployeepayhistoryRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[EmployeepayhistoryFieldOrIdValue[_]])(implicit c: Connection): List[EmployeepayhistoryRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, EmployeepayhistoryFieldValue.businessentityid(value)) => acc.filter(_.businessentityid == value)
      case (acc, EmployeepayhistoryFieldValue.ratechangedate(value)) => acc.filter(_.ratechangedate == value)
      case (acc, EmployeepayhistoryFieldValue.rate(value)) => acc.filter(_.rate == value)
      case (acc, EmployeepayhistoryFieldValue.payfrequency(value)) => acc.filter(_.payfrequency == value)
      case (acc, EmployeepayhistoryFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(compositeId: EmployeepayhistoryId)(implicit c: Connection): Option[EmployeepayhistoryRow] = {
    map.get(compositeId)
  }
  override def update(row: EmployeepayhistoryRow)(implicit c: Connection): Boolean = {
    map.get(row.compositeId) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.compositeId, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(compositeId: EmployeepayhistoryId, fieldValues: List[EmployeepayhistoryFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(compositeId) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, EmployeepayhistoryFieldValue.rate(value)) => acc.copy(rate = value)
          case (acc, EmployeepayhistoryFieldValue.payfrequency(value)) => acc.copy(payfrequency = value)
          case (acc, EmployeepayhistoryFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(compositeId, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: EmployeepayhistoryRow)(implicit c: Connection): EmployeepayhistoryRow = {
    map.put(unsaved.compositeId, unsaved)
    unsaved
  }
}
