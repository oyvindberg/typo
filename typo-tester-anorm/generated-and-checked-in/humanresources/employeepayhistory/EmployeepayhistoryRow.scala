/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeepayhistory

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class EmployeepayhistoryRow(
  /** Employee identification number. Foreign key to Employee.BusinessEntityID.
      Points to [[employee.EmployeeRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Date the change in pay is effective */
  ratechangedate: TypoLocalDateTime,
  /** Salary hourly rate. */
  rate: BigDecimal,
  /** 1 = Salary received monthly, 2 = Salary received biweekly */
  payfrequency: Int,
  modifieddate: TypoLocalDateTime
){
   val compositeId: EmployeepayhistoryId = EmployeepayhistoryId(businessentityid, ratechangedate)
 }

object EmployeepayhistoryRow {
  implicit val reads: Reads[EmployeepayhistoryRow] = Reads[EmployeepayhistoryRow](json => JsResult.fromTry(
      Try(
        EmployeepayhistoryRow(
          businessentityid = json.\("businessentityid").as[BusinessentityId],
          ratechangedate = json.\("ratechangedate").as[TypoLocalDateTime],
          rate = json.\("rate").as[BigDecimal],
          payfrequency = json.\("payfrequency").as[Int],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[EmployeepayhistoryRow] = RowParser[EmployeepayhistoryRow] { row =>
    Success(
      EmployeepayhistoryRow(
        businessentityid = row[BusinessentityId](idx + 0),
        ratechangedate = row[TypoLocalDateTime](idx + 1),
        rate = row[BigDecimal](idx + 2),
        payfrequency = row[Int](idx + 3),
        modifieddate = row[TypoLocalDateTime](idx + 4)
      )
    )
  }
  implicit val writes: OWrites[EmployeepayhistoryRow] = OWrites[EmployeepayhistoryRow](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> Json.toJson(o.businessentityid),
      "ratechangedate" -> Json.toJson(o.ratechangedate),
      "rate" -> Json.toJson(o.rate),
      "payfrequency" -> Json.toJson(o.payfrequency),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
