/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeepayhistory

import adventureworks.person.businessentity.BusinessentityId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** Type for the composite primary key of table `humanresources.employeepayhistory` */
case class EmployeepayhistoryId(businessentityid: BusinessentityId, ratechangedate: LocalDateTime)
object EmployeepayhistoryId {
  implicit def ordering(implicit O0: Ordering[LocalDateTime]): Ordering[EmployeepayhistoryId] = Ordering.by(x => (x.businessentityid, x.ratechangedate))
  implicit val oFormat: OFormat[EmployeepayhistoryId] = new OFormat[EmployeepayhistoryId]{
    override def writes(o: EmployeepayhistoryId): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "ratechangedate" -> o.ratechangedate
      )
  
    override def reads(json: JsValue): JsResult[EmployeepayhistoryId] = {
      JsResult.fromTry(
        Try(
          EmployeepayhistoryId(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            ratechangedate = json.\("ratechangedate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
