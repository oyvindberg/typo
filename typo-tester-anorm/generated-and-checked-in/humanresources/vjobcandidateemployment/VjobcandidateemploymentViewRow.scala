/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidateemployment

import adventureworks.TypoLocalDate
import adventureworks.humanresources.jobcandidate.JobcandidateId
import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class VjobcandidateemploymentViewRow(
  /** Points to [[jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: Option[JobcandidateId],
  `Emp.StartDate`: Option[TypoLocalDate],
  `Emp.EndDate`: Option[TypoLocalDate],
  `Emp.OrgName`: Option[/* max 100 chars */ String],
  `Emp.JobTitle`: Option[/* max 100 chars */ String],
  `Emp.Responsibility`: Option[String],
  `Emp.FunctionCategory`: Option[String],
  `Emp.IndustryCategory`: Option[String],
  `Emp.Loc.CountryRegion`: Option[String],
  `Emp.Loc.State`: Option[String],
  `Emp.Loc.City`: Option[String]
)

object VjobcandidateemploymentViewRow {
  implicit val reads: Reads[VjobcandidateemploymentViewRow] = Reads[VjobcandidateemploymentViewRow](json => JsResult.fromTry(
      Try(
        VjobcandidateemploymentViewRow(
          jobcandidateid = json.\("jobcandidateid").toOption.map(_.as(JobcandidateId.reads)),
          `Emp.StartDate` = json.\("Emp.StartDate").toOption.map(_.as(TypoLocalDate.reads)),
          `Emp.EndDate` = json.\("Emp.EndDate").toOption.map(_.as(TypoLocalDate.reads)),
          `Emp.OrgName` = json.\("Emp.OrgName").toOption.map(_.as(Reads.StringReads)),
          `Emp.JobTitle` = json.\("Emp.JobTitle").toOption.map(_.as(Reads.StringReads)),
          `Emp.Responsibility` = json.\("Emp.Responsibility").toOption.map(_.as(Reads.StringReads)),
          `Emp.FunctionCategory` = json.\("Emp.FunctionCategory").toOption.map(_.as(Reads.StringReads)),
          `Emp.IndustryCategory` = json.\("Emp.IndustryCategory").toOption.map(_.as(Reads.StringReads)),
          `Emp.Loc.CountryRegion` = json.\("Emp.Loc.CountryRegion").toOption.map(_.as(Reads.StringReads)),
          `Emp.Loc.State` = json.\("Emp.Loc.State").toOption.map(_.as(Reads.StringReads)),
          `Emp.Loc.City` = json.\("Emp.Loc.City").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VjobcandidateemploymentViewRow] = RowParser[VjobcandidateemploymentViewRow] { row =>
    Success(
      VjobcandidateemploymentViewRow(
        jobcandidateid = row(idx + 0)(Column.columnToOption(JobcandidateId.column)),
        `Emp.StartDate` = row(idx + 1)(Column.columnToOption(TypoLocalDate.column)),
        `Emp.EndDate` = row(idx + 2)(Column.columnToOption(TypoLocalDate.column)),
        `Emp.OrgName` = row(idx + 3)(Column.columnToOption(Column.columnToString)),
        `Emp.JobTitle` = row(idx + 4)(Column.columnToOption(Column.columnToString)),
        `Emp.Responsibility` = row(idx + 5)(Column.columnToOption(Column.columnToString)),
        `Emp.FunctionCategory` = row(idx + 6)(Column.columnToOption(Column.columnToString)),
        `Emp.IndustryCategory` = row(idx + 7)(Column.columnToOption(Column.columnToString)),
        `Emp.Loc.CountryRegion` = row(idx + 8)(Column.columnToOption(Column.columnToString)),
        `Emp.Loc.State` = row(idx + 9)(Column.columnToOption(Column.columnToString)),
        `Emp.Loc.City` = row(idx + 10)(Column.columnToOption(Column.columnToString))
      )
    )
  }
  implicit val writes: OWrites[VjobcandidateemploymentViewRow] = OWrites[VjobcandidateemploymentViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "jobcandidateid" -> Writes.OptionWrites(JobcandidateId.writes).writes(o.jobcandidateid),
      "Emp.StartDate" -> Writes.OptionWrites(TypoLocalDate.writes).writes(o.`Emp.StartDate`),
      "Emp.EndDate" -> Writes.OptionWrites(TypoLocalDate.writes).writes(o.`Emp.EndDate`),
      "Emp.OrgName" -> Writes.OptionWrites(Writes.StringWrites).writes(o.`Emp.OrgName`),
      "Emp.JobTitle" -> Writes.OptionWrites(Writes.StringWrites).writes(o.`Emp.JobTitle`),
      "Emp.Responsibility" -> Writes.OptionWrites(Writes.StringWrites).writes(o.`Emp.Responsibility`),
      "Emp.FunctionCategory" -> Writes.OptionWrites(Writes.StringWrites).writes(o.`Emp.FunctionCategory`),
      "Emp.IndustryCategory" -> Writes.OptionWrites(Writes.StringWrites).writes(o.`Emp.IndustryCategory`),
      "Emp.Loc.CountryRegion" -> Writes.OptionWrites(Writes.StringWrites).writes(o.`Emp.Loc.CountryRegion`),
      "Emp.Loc.State" -> Writes.OptionWrites(Writes.StringWrites).writes(o.`Emp.Loc.State`),
      "Emp.Loc.City" -> Writes.OptionWrites(Writes.StringWrites).writes(o.`Emp.Loc.City`)
    ))
  )
}
