/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package jobcandidate

import java.sql.Connection

class JobcandidateRepoMock(toRow: Function1[JobcandidateRowUnsaved, JobcandidateRow],
                           map: scala.collection.mutable.Map[JobcandidateId, JobcandidateRow] = scala.collection.mutable.Map.empty) extends JobcandidateRepo {
  override def delete(jobcandidateid: JobcandidateId)(implicit c: Connection): Boolean = {
    map.remove(jobcandidateid).isDefined
  }
  override def insert(unsaved: JobcandidateRow)(implicit c: Connection): JobcandidateRow = {
    if (map.contains(unsaved.jobcandidateid))
      sys.error(s"id ${unsaved.jobcandidateid} already exists")
    else
      map.put(unsaved.jobcandidateid, unsaved)
    unsaved
  }
  override def insert(unsaved: JobcandidateRowUnsaved)(implicit c: Connection): JobcandidateRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[JobcandidateRow] = {
    map.values.toList
  }
  override def selectById(jobcandidateid: JobcandidateId)(implicit c: Connection): Option[JobcandidateRow] = {
    map.get(jobcandidateid)
  }
  override def selectByIds(jobcandidateids: Array[JobcandidateId])(implicit c: Connection): List[JobcandidateRow] = {
    jobcandidateids.flatMap(map.get).toList
  }
  override def update(row: JobcandidateRow)(implicit c: Connection): Boolean = {
    map.get(row.jobcandidateid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.jobcandidateid, row)
        true
      case None => false
    }
  }
  override def upsert(unsaved: JobcandidateRow)(implicit c: Connection): JobcandidateRow = {
    map.put(unsaved.jobcandidateid, unsaved)
    unsaved
  }
}
