/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package jobcandidate

import adventureworks.TypoLocalDateTime
import adventureworks.TypoXml
import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class JobcandidateRow(
  /** Primary key for JobCandidate records. */
  jobcandidateid: JobcandidateId,
  /** Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.
      Points to [[employee.EmployeeRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** RÃ©sumÃ© in XML format. */
  resume: Option[TypoXml],
  modifieddate: TypoLocalDateTime
)

object JobcandidateRow {
  implicit val reads: Reads[JobcandidateRow] = Reads[JobcandidateRow](json => JsResult.fromTry(
      Try(
        JobcandidateRow(
          jobcandidateid = json.\("jobcandidateid").as[JobcandidateId],
          businessentityid = json.\("businessentityid").toOption.map(_.as[BusinessentityId]),
          resume = json.\("resume").toOption.map(_.as[TypoXml]),
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[JobcandidateRow] = RowParser[JobcandidateRow] { row =>
    Success(
      JobcandidateRow(
        jobcandidateid = row[JobcandidateId](idx + 0),
        businessentityid = row[Option[BusinessentityId]](idx + 1),
        resume = row[Option[TypoXml]](idx + 2),
        modifieddate = row[TypoLocalDateTime](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[JobcandidateRow] = OWrites[JobcandidateRow](o =>
    new JsObject(ListMap[String, JsValue](
      "jobcandidateid" -> Json.toJson(o.jobcandidateid),
      "businessentityid" -> Json.toJson(o.businessentityid),
      "resume" -> Json.toJson(o.resume),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
