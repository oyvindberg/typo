/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package jobcandidate

import adventureworks.Defaulted
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import anorm.ToStatement
import java.sql.Connection
import java.sql.PreparedStatement
import java.time.LocalDateTime

object JobcandidateRepoImpl extends JobcandidateRepo {
  override def delete(jobcandidateid: JobcandidateId)(implicit c: Connection): Boolean = {
    SQL"delete from humanresources.jobcandidate where jobcandidateid = $jobcandidateid".executeUpdate() > 0
  }
  override def insert(unsaved: JobcandidateRow)(implicit c: Connection): JobcandidateRow = {
    SQL"""insert into humanresources.jobcandidate(jobcandidateid, businessentityid, resume, modifieddate)
          values (${unsaved.jobcandidateid}::int4, ${unsaved.businessentityid}::int4, ${unsaved.resume}::xml, ${unsaved.modifieddate}::timestamp)
          returning jobcandidateid, businessentityid, resume, modifieddate
       """
      .executeInsert(JobcandidateRow.rowParser(1).single)
  
  }
  override def insert(unsaved: JobcandidateRowUnsaved)(implicit c: Connection): JobcandidateRow = {
    val namedParameters = List(
      Some((NamedParameter("businessentityid", ParameterValue.from(unsaved.businessentityid)), "::int4")),
      Some((NamedParameter("resume", ParameterValue.from(unsaved.resume)), "::xml")),
      unsaved.jobcandidateid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("jobcandidateid", ParameterValue.from[JobcandidateId](value)), "::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into humanresources.jobcandidate default values
            returning jobcandidateid, businessentityid, resume, modifieddate
         """
        .executeInsert(JobcandidateRow.rowParser(1).single)
    } else {
      val q = s"""insert into humanresources.jobcandidate(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning jobcandidateid, businessentityid, resume, modifieddate
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(JobcandidateRow.rowParser(1).single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[JobcandidateRow] = {
    SQL"""select jobcandidateid, businessentityid, resume, modifieddate
          from humanresources.jobcandidate
       """.as(JobcandidateRow.rowParser(1).*)
  }
  override def selectById(jobcandidateid: JobcandidateId)(implicit c: Connection): Option[JobcandidateRow] = {
    SQL"""select jobcandidateid, businessentityid, resume, modifieddate
          from humanresources.jobcandidate
          where jobcandidateid = $jobcandidateid
       """.as(JobcandidateRow.rowParser(1).singleOpt)
  }
  override def selectByIds(jobcandidateids: Array[JobcandidateId])(implicit c: Connection): List[JobcandidateRow] = {
    implicit val toStatement: ToStatement[Array[JobcandidateId]] =
      (s: PreparedStatement, index: Int, v: Array[JobcandidateId]) =>
        s.setArray(index, s.getConnection.createArrayOf("int4", v.map(x => x.value: Integer)))
    
    SQL"""select jobcandidateid, businessentityid, resume, modifieddate
          from humanresources.jobcandidate
          where jobcandidateid = ANY($jobcandidateids)
       """.as(JobcandidateRow.rowParser(1).*)
  
  }
  override def update(row: JobcandidateRow)(implicit c: Connection): Boolean = {
    val jobcandidateid = row.jobcandidateid
    SQL"""update humanresources.jobcandidate
          set businessentityid = ${row.businessentityid}::int4,
              resume = ${row.resume}::xml,
              modifieddate = ${row.modifieddate}::timestamp
          where jobcandidateid = $jobcandidateid
       """.executeUpdate() > 0
  }
  override def upsert(unsaved: JobcandidateRow)(implicit c: Connection): JobcandidateRow = {
    SQL"""insert into humanresources.jobcandidate(jobcandidateid, businessentityid, resume, modifieddate)
          values (
            ${unsaved.jobcandidateid}::int4,
            ${unsaved.businessentityid}::int4,
            ${unsaved.resume}::xml,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (jobcandidateid)
          do update set
            businessentityid = EXCLUDED.businessentityid,
            resume = EXCLUDED.resume,
            modifieddate = EXCLUDED.modifieddate
          returning jobcandidateid, businessentityid, resume, modifieddate
       """
      .executeInsert(JobcandidateRow.rowParser(1).single)
  
  }
}
