/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vemployeedepartmenthistory

import adventureworks.TypoLocalDate
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class VemployeedepartmenthistoryViewRow(
  /** Points to [[person.person.PersonRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[person.person.PersonRow.title]] */
  title: Option[/* max 8 chars */ String],
  /** Points to [[person.person.PersonRow.firstname]] */
  firstname: Option[Name],
  /** Points to [[person.person.PersonRow.middlename]] */
  middlename: Option[Name],
  /** Points to [[person.person.PersonRow.lastname]] */
  lastname: Option[Name],
  /** Points to [[person.person.PersonRow.suffix]] */
  suffix: Option[/* max 10 chars */ String],
  shift: Option[Name],
  department: Option[Name],
  /** Points to [[department.DepartmentRow.groupname]] */
  groupname: Option[Name],
  /** Points to [[employeedepartmenthistory.EmployeedepartmenthistoryRow.startdate]] */
  startdate: Option[TypoLocalDate],
  /** Points to [[employeedepartmenthistory.EmployeedepartmenthistoryRow.enddate]] */
  enddate: Option[TypoLocalDate]
)

object VemployeedepartmenthistoryViewRow {
  implicit val reads: Reads[VemployeedepartmenthistoryViewRow] = Reads[VemployeedepartmenthistoryViewRow](json => JsResult.fromTry(
      Try(
        VemployeedepartmenthistoryViewRow(
          businessentityid = json.\("businessentityid").toOption.map(_.as[BusinessentityId]),
          title = json.\("title").toOption.map(_.as[/* max 8 chars */ String]),
          firstname = json.\("firstname").toOption.map(_.as[Name]),
          middlename = json.\("middlename").toOption.map(_.as[Name]),
          lastname = json.\("lastname").toOption.map(_.as[Name]),
          suffix = json.\("suffix").toOption.map(_.as[/* max 10 chars */ String]),
          shift = json.\("shift").toOption.map(_.as[Name]),
          department = json.\("department").toOption.map(_.as[Name]),
          groupname = json.\("groupname").toOption.map(_.as[Name]),
          startdate = json.\("startdate").toOption.map(_.as[TypoLocalDate]),
          enddate = json.\("enddate").toOption.map(_.as[TypoLocalDate])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VemployeedepartmenthistoryViewRow] = RowParser[VemployeedepartmenthistoryViewRow] { row =>
    Success(
      VemployeedepartmenthistoryViewRow(
        businessentityid = row[Option[BusinessentityId]](idx + 0),
        title = row[Option[/* max 8 chars */ String]](idx + 1),
        firstname = row[Option[Name]](idx + 2),
        middlename = row[Option[Name]](idx + 3),
        lastname = row[Option[Name]](idx + 4),
        suffix = row[Option[/* max 10 chars */ String]](idx + 5),
        shift = row[Option[Name]](idx + 6),
        department = row[Option[Name]](idx + 7),
        groupname = row[Option[Name]](idx + 8),
        startdate = row[Option[TypoLocalDate]](idx + 9),
        enddate = row[Option[TypoLocalDate]](idx + 10)
      )
    )
  }
  implicit val writes: OWrites[VemployeedepartmenthistoryViewRow] = OWrites[VemployeedepartmenthistoryViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> Json.toJson(o.businessentityid),
      "title" -> Json.toJson(o.title),
      "firstname" -> Json.toJson(o.firstname),
      "middlename" -> Json.toJson(o.middlename),
      "lastname" -> Json.toJson(o.lastname),
      "suffix" -> Json.toJson(o.suffix),
      "shift" -> Json.toJson(o.shift),
      "department" -> Json.toJson(o.department),
      "groupname" -> Json.toJson(o.groupname),
      "startdate" -> Json.toJson(o.startdate),
      "enddate" -> Json.toJson(o.enddate)
    ))
  )
}
