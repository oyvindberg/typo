/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package store

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.SqlStringInterpolation
import java.sql.Connection
import java.util.UUID
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object StoreRepoImpl extends StoreRepo {
  override def delete(businessentityid: BusinessentityId)(implicit c: Connection): Boolean = {
    SQL"delete from sales.store where businessentityid = $businessentityid".executeUpdate() > 0
  }
  override def delete: DeleteBuilder[StoreFields, StoreRow] = {
    DeleteBuilder("sales.store", StoreFields)
  }
  override def insert(unsaved: StoreRow)(implicit c: Connection): StoreRow = {
    SQL"""insert into sales.store(businessentityid, "name", salespersonid, demographics, rowguid, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.salespersonid}::int4, ${unsaved.demographics}::xml, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, "name", salespersonid, demographics, rowguid, modifieddate::text
       """
      .executeInsert(StoreRow.rowParser(1).single)
    
  }
  override def insert(unsaved: StoreRowUnsaved)(implicit c: Connection): StoreRow = {
    val namedParameters = List(
      Some((NamedParameter("businessentityid", ParameterValue.from(unsaved.businessentityid)), "::int4")),
      Some((NamedParameter("name", ParameterValue.from(unsaved.name)), """::"public"."Name"""")),
      Some((NamedParameter("salespersonid", ParameterValue.from(unsaved.salespersonid)), "::int4")),
      Some((NamedParameter("demographics", ParameterValue.from(unsaved.demographics)), "::xml")),
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("rowguid", ParameterValue.from[UUID](value)), "::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[TypoLocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into sales.store default values
            returning businessentityid, "name", salespersonid, demographics, rowguid, modifieddate::text
         """
        .executeInsert(StoreRow.rowParser(1).single)
    } else {
      val q = s"""insert into sales.store(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning businessentityid, "name", salespersonid, demographics, rowguid, modifieddate::text
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(StoreRow.rowParser(1).single)
    }
    
  }
  override def select: SelectBuilder[StoreFields, StoreRow] = {
    SelectBuilderSql("sales.store", StoreFields, StoreRow.rowParser)
  }
  override def selectAll(implicit c: Connection): List[StoreRow] = {
    SQL"""select businessentityid, "name", salespersonid, demographics, rowguid, modifieddate::text
          from sales.store
       """.as(StoreRow.rowParser(1).*)
  }
  override def selectById(businessentityid: BusinessentityId)(implicit c: Connection): Option[StoreRow] = {
    SQL"""select businessentityid, "name", salespersonid, demographics, rowguid, modifieddate::text
          from sales.store
          where businessentityid = $businessentityid
       """.as(StoreRow.rowParser(1).singleOpt)
  }
  override def selectByIds(businessentityids: Array[BusinessentityId])(implicit c: Connection): List[StoreRow] = {
    SQL"""select businessentityid, "name", salespersonid, demographics, rowguid, modifieddate::text
          from sales.store
          where businessentityid = ANY($businessentityids)
       """.as(StoreRow.rowParser(1).*)
    
  }
  override def update(row: StoreRow)(implicit c: Connection): Boolean = {
    val businessentityid = row.businessentityid
    SQL"""update sales.store
          set "name" = ${row.name}::"public"."Name",
              salespersonid = ${row.salespersonid}::int4,
              demographics = ${row.demographics}::xml,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = $businessentityid
       """.executeUpdate() > 0
  }
  override def update: UpdateBuilder[StoreFields, StoreRow] = {
    UpdateBuilder("sales.store", StoreFields, StoreRow.rowParser)
  }
  override def upsert(unsaved: StoreRow)(implicit c: Connection): StoreRow = {
    SQL"""insert into sales.store(businessentityid, "name", salespersonid, demographics, rowguid, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.salespersonid}::int4,
            ${unsaved.demographics}::xml,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid)
          do update set
            "name" = EXCLUDED."name",
            salespersonid = EXCLUDED.salespersonid,
            demographics = EXCLUDED.demographics,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, "name", salespersonid, demographics, rowguid, modifieddate::text
       """
      .executeInsert(StoreRow.rowParser(1).single)
    
  }
}
