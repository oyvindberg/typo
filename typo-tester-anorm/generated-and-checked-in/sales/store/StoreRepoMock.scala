/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package store

import adventureworks.person.businessentity.BusinessentityId
import java.sql.Connection

class StoreRepoMock(toRow: Function1[StoreRowUnsaved, StoreRow],
                    map: scala.collection.mutable.Map[BusinessentityId, StoreRow] = scala.collection.mutable.Map.empty) extends StoreRepo {
  override def delete(businessentityid: BusinessentityId)(implicit c: Connection): Boolean = {
    map.remove(businessentityid).isDefined
  }
  override def insert(unsaved: StoreRow)(implicit c: Connection): StoreRow = {
    if (map.contains(unsaved.businessentityid))
      sys.error(s"id ${unsaved.businessentityid} already exists")
    else
      map.put(unsaved.businessentityid, unsaved)
    unsaved
  }
  override def insert(unsaved: StoreRowUnsaved)(implicit c: Connection): StoreRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[StoreRow] = {
    map.values.toList
  }
  override def selectById(businessentityid: BusinessentityId)(implicit c: Connection): Option[StoreRow] = {
    map.get(businessentityid)
  }
  override def selectByIds(businessentityids: Array[BusinessentityId])(implicit c: Connection): List[StoreRow] = {
    businessentityids.flatMap(map.get).toList
  }
  override def update(row: StoreRow)(implicit c: Connection): Boolean = {
    map.get(row.businessentityid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.businessentityid, row)
        true
      case None => false
    }
  }
  override def upsert(unsaved: StoreRow)(implicit c: Connection): StoreRow = {
    map.put(unsaved.businessentityid, unsaved)
    unsaved
  }
}
