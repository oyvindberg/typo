/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialoffer

import java.sql.Connection

class SpecialofferRepoMock(toRow: Function1[SpecialofferRowUnsaved, SpecialofferRow],
                           map: scala.collection.mutable.Map[SpecialofferId, SpecialofferRow] = scala.collection.mutable.Map.empty) extends SpecialofferRepo {
  override def delete(specialofferid: SpecialofferId)(implicit c: Connection): Boolean = {
    map.remove(specialofferid).isDefined
  }
  override def insert(unsaved: SpecialofferRow)(implicit c: Connection): SpecialofferRow = {
    if (map.contains(unsaved.specialofferid))
      sys.error(s"id ${unsaved.specialofferid} already exists")
    else
      map.put(unsaved.specialofferid, unsaved)
    unsaved
  }
  override def insert(unsaved: SpecialofferRowUnsaved)(implicit c: Connection): SpecialofferRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[SpecialofferRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[SpecialofferFieldOrIdValue[_]])(implicit c: Connection): List[SpecialofferRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, SpecialofferFieldValue.specialofferid(value)) => acc.filter(_.specialofferid == value)
      case (acc, SpecialofferFieldValue.description(value)) => acc.filter(_.description == value)
      case (acc, SpecialofferFieldValue.discountpct(value)) => acc.filter(_.discountpct == value)
      case (acc, SpecialofferFieldValue.`type`(value)) => acc.filter(_.`type` == value)
      case (acc, SpecialofferFieldValue.category(value)) => acc.filter(_.category == value)
      case (acc, SpecialofferFieldValue.startdate(value)) => acc.filter(_.startdate == value)
      case (acc, SpecialofferFieldValue.enddate(value)) => acc.filter(_.enddate == value)
      case (acc, SpecialofferFieldValue.minqty(value)) => acc.filter(_.minqty == value)
      case (acc, SpecialofferFieldValue.maxqty(value)) => acc.filter(_.maxqty == value)
      case (acc, SpecialofferFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
      case (acc, SpecialofferFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(specialofferid: SpecialofferId)(implicit c: Connection): Option[SpecialofferRow] = {
    map.get(specialofferid)
  }
  override def selectByIds(specialofferids: Array[SpecialofferId])(implicit c: Connection): List[SpecialofferRow] = {
    specialofferids.flatMap(map.get).toList
  }
  override def update(row: SpecialofferRow)(implicit c: Connection): Boolean = {
    map.get(row.specialofferid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.specialofferid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(specialofferid: SpecialofferId, fieldValues: List[SpecialofferFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(specialofferid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, SpecialofferFieldValue.description(value)) => acc.copy(description = value)
          case (acc, SpecialofferFieldValue.discountpct(value)) => acc.copy(discountpct = value)
          case (acc, SpecialofferFieldValue.`type`(value)) => acc.copy(`type` = value)
          case (acc, SpecialofferFieldValue.category(value)) => acc.copy(category = value)
          case (acc, SpecialofferFieldValue.startdate(value)) => acc.copy(startdate = value)
          case (acc, SpecialofferFieldValue.enddate(value)) => acc.copy(enddate = value)
          case (acc, SpecialofferFieldValue.minqty(value)) => acc.copy(minqty = value)
          case (acc, SpecialofferFieldValue.maxqty(value)) => acc.copy(maxqty = value)
          case (acc, SpecialofferFieldValue.rowguid(value)) => acc.copy(rowguid = value)
          case (acc, SpecialofferFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(specialofferid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: SpecialofferRow)(implicit c: Connection): SpecialofferRow = {
    map.put(unsaved.specialofferid, unsaved)
    unsaved
  }
}
