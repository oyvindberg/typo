/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package shoppingcartitem

import java.sql.Connection

class ShoppingcartitemRepoMock(toRow: Function1[ShoppingcartitemRowUnsaved, ShoppingcartitemRow],
                               map: scala.collection.mutable.Map[ShoppingcartitemId, ShoppingcartitemRow] = scala.collection.mutable.Map.empty) extends ShoppingcartitemRepo {
  override def delete(shoppingcartitemid: ShoppingcartitemId)(implicit c: Connection): Boolean = {
    map.remove(shoppingcartitemid).isDefined
  }
  override def insert(unsaved: ShoppingcartitemRow)(implicit c: Connection): ShoppingcartitemRow = {
    if (map.contains(unsaved.shoppingcartitemid))
      sys.error(s"id ${unsaved.shoppingcartitemid} already exists")
    else
      map.put(unsaved.shoppingcartitemid, unsaved)
    unsaved
  }
  override def insert(unsaved: ShoppingcartitemRowUnsaved)(implicit c: Connection): ShoppingcartitemRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[ShoppingcartitemRow] = {
    map.values.toList
  }
  override def selectById(shoppingcartitemid: ShoppingcartitemId)(implicit c: Connection): Option[ShoppingcartitemRow] = {
    map.get(shoppingcartitemid)
  }
  override def selectByIds(shoppingcartitemids: Array[ShoppingcartitemId])(implicit c: Connection): List[ShoppingcartitemRow] = {
    shoppingcartitemids.flatMap(map.get).toList
  }
  override def update(row: ShoppingcartitemRow)(implicit c: Connection): Boolean = {
    map.get(row.shoppingcartitemid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.shoppingcartitemid, row)
        true
      case None => false
    }
  }
  override def upsert(unsaved: ShoppingcartitemRow)(implicit c: Connection): ShoppingcartitemRow = {
    map.put(unsaved.shoppingcartitemid, unsaved)
    unsaved
  }
}
