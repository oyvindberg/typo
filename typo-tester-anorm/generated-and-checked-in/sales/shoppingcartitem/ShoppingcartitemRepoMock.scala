/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package shoppingcartitem

import java.sql.Connection

class ShoppingcartitemRepoMock(toRow: Function1[ShoppingcartitemRowUnsaved, ShoppingcartitemRow],
                               map: scala.collection.mutable.Map[ShoppingcartitemId, ShoppingcartitemRow] = scala.collection.mutable.Map.empty) extends ShoppingcartitemRepo {
  override def delete(shoppingcartitemid: ShoppingcartitemId)(implicit c: Connection): Boolean = {
    map.remove(shoppingcartitemid).isDefined
  }
  override def insert(unsaved: ShoppingcartitemRow)(implicit c: Connection): ShoppingcartitemRow = {
    if (map.contains(unsaved.shoppingcartitemid))
      sys.error(s"id ${unsaved.shoppingcartitemid} already exists")
    else
      map.put(unsaved.shoppingcartitemid, unsaved)
    unsaved
  }
  override def insert(unsaved: ShoppingcartitemRowUnsaved)(implicit c: Connection): ShoppingcartitemRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[ShoppingcartitemRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[ShoppingcartitemFieldOrIdValue[_]])(implicit c: Connection): List[ShoppingcartitemRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, ShoppingcartitemFieldValue.shoppingcartitemid(value)) => acc.filter(_.shoppingcartitemid == value)
      case (acc, ShoppingcartitemFieldValue.shoppingcartid(value)) => acc.filter(_.shoppingcartid == value)
      case (acc, ShoppingcartitemFieldValue.quantity(value)) => acc.filter(_.quantity == value)
      case (acc, ShoppingcartitemFieldValue.productid(value)) => acc.filter(_.productid == value)
      case (acc, ShoppingcartitemFieldValue.datecreated(value)) => acc.filter(_.datecreated == value)
      case (acc, ShoppingcartitemFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(shoppingcartitemid: ShoppingcartitemId)(implicit c: Connection): Option[ShoppingcartitemRow] = {
    map.get(shoppingcartitemid)
  }
  override def selectByIds(shoppingcartitemids: Array[ShoppingcartitemId])(implicit c: Connection): List[ShoppingcartitemRow] = {
    shoppingcartitemids.flatMap(map.get).toList
  }
  override def update(row: ShoppingcartitemRow)(implicit c: Connection): Boolean = {
    map.get(row.shoppingcartitemid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.shoppingcartitemid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(shoppingcartitemid: ShoppingcartitemId, fieldValues: List[ShoppingcartitemFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(shoppingcartitemid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, ShoppingcartitemFieldValue.shoppingcartid(value)) => acc.copy(shoppingcartid = value)
          case (acc, ShoppingcartitemFieldValue.quantity(value)) => acc.copy(quantity = value)
          case (acc, ShoppingcartitemFieldValue.productid(value)) => acc.copy(productid = value)
          case (acc, ShoppingcartitemFieldValue.datecreated(value)) => acc.copy(datecreated = value)
          case (acc, ShoppingcartitemFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(shoppingcartitemid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: ShoppingcartitemRow)(implicit c: Connection): ShoppingcartitemRow = {
    map.put(unsaved.shoppingcartitemid, unsaved)
    unsaved
  }
}
