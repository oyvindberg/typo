/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheader

import adventureworks.TypoLocalDateTime
import adventureworks.person.address.AddressId
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.OrderNumber
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.sales.creditcard.CreditcardId
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.salesterritory.SalesterritoryId
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class SalesorderheaderRow(
  /** Primary key. */
  salesorderid: SalesorderheaderId,
  /** Incremental number to track changes to the sales order over time. */
  revisionnumber: Int,
  /** Dates the sales order was created. */
  orderdate: TypoLocalDateTime,
  /** Date the order is due to the customer. */
  duedate: TypoLocalDateTime,
  /** Date the order was shipped to the customer. */
  shipdate: Option[TypoLocalDateTime],
  /** Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled */
  status: Int,
  /** 0 = Order placed by sales person. 1 = Order placed online by customer. */
  onlineorderflag: Flag,
  /** Customer purchase order number reference. */
  purchaseordernumber: Option[OrderNumber],
  /** Financial accounting number reference. */
  accountnumber: Option[AccountNumber],
  /** Customer identification number. Foreign key to Customer.BusinessEntityID.
      Points to [[customer.CustomerRow.customerid]] */
  customerid: CustomerId,
  /** Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
      Points to [[salesperson.SalespersonRow.businessentityid]] */
  salespersonid: Option[BusinessentityId],
  /** Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Customer billing address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  billtoaddressid: AddressId,
  /** Customer shipping address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  shiptoaddressid: AddressId,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
      Points to [[purchasing.shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: ShipmethodId,
  /** Credit card identification number. Foreign key to CreditCard.CreditCardID.
      Points to [[creditcard.CreditcardRow.creditcardid]] */
  creditcardid: Option[CreditcardId],
  /** Approval code provided by the credit card company. */
  creditcardapprovalcode: Option[/* max 15 chars */ String],
  /** Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
      Points to [[currencyrate.CurrencyrateRow.currencyrateid]] */
  currencyrateid: Option[CurrencyrateId],
  /** Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID. */
  subtotal: BigDecimal,
  /** Tax amount. */
  taxamt: BigDecimal,
  /** Shipping cost. */
  freight: BigDecimal,
  /** Total due from customer. Computed as Subtotal + TaxAmt + Freight. */
  totaldue: Option[BigDecimal],
  /** Sales representative comments. */
  comment: Option[/* max 128 chars */ String],
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object SalesorderheaderRow {
  implicit val reads: Reads[SalesorderheaderRow] = Reads[SalesorderheaderRow](json => JsResult.fromTry(
      Try(
        SalesorderheaderRow(
          salesorderid = json.\("salesorderid").as[SalesorderheaderId],
          revisionnumber = json.\("revisionnumber").as[Int],
          orderdate = json.\("orderdate").as[TypoLocalDateTime],
          duedate = json.\("duedate").as[TypoLocalDateTime],
          shipdate = json.\("shipdate").toOption.map(_.as[TypoLocalDateTime]),
          status = json.\("status").as[Int],
          onlineorderflag = json.\("onlineorderflag").as[Flag],
          purchaseordernumber = json.\("purchaseordernumber").toOption.map(_.as[OrderNumber]),
          accountnumber = json.\("accountnumber").toOption.map(_.as[AccountNumber]),
          customerid = json.\("customerid").as[CustomerId],
          salespersonid = json.\("salespersonid").toOption.map(_.as[BusinessentityId]),
          territoryid = json.\("territoryid").toOption.map(_.as[SalesterritoryId]),
          billtoaddressid = json.\("billtoaddressid").as[AddressId],
          shiptoaddressid = json.\("shiptoaddressid").as[AddressId],
          shipmethodid = json.\("shipmethodid").as[ShipmethodId],
          creditcardid = json.\("creditcardid").toOption.map(_.as[CreditcardId]),
          creditcardapprovalcode = json.\("creditcardapprovalcode").toOption.map(_.as[/* max 15 chars */ String]),
          currencyrateid = json.\("currencyrateid").toOption.map(_.as[CurrencyrateId]),
          subtotal = json.\("subtotal").as[BigDecimal],
          taxamt = json.\("taxamt").as[BigDecimal],
          freight = json.\("freight").as[BigDecimal],
          totaldue = json.\("totaldue").toOption.map(_.as[BigDecimal]),
          comment = json.\("comment").toOption.map(_.as[/* max 128 chars */ String]),
          rowguid = json.\("rowguid").as[UUID],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SalesorderheaderRow] = RowParser[SalesorderheaderRow] { row =>
    Success(
      SalesorderheaderRow(
        salesorderid = row[SalesorderheaderId](idx + 0),
        revisionnumber = row[Int](idx + 1),
        orderdate = row[TypoLocalDateTime](idx + 2),
        duedate = row[TypoLocalDateTime](idx + 3),
        shipdate = row[Option[TypoLocalDateTime]](idx + 4),
        status = row[Int](idx + 5),
        onlineorderflag = row[Flag](idx + 6),
        purchaseordernumber = row[Option[OrderNumber]](idx + 7),
        accountnumber = row[Option[AccountNumber]](idx + 8),
        customerid = row[CustomerId](idx + 9),
        salespersonid = row[Option[BusinessentityId]](idx + 10),
        territoryid = row[Option[SalesterritoryId]](idx + 11),
        billtoaddressid = row[AddressId](idx + 12),
        shiptoaddressid = row[AddressId](idx + 13),
        shipmethodid = row[ShipmethodId](idx + 14),
        creditcardid = row[Option[CreditcardId]](idx + 15),
        creditcardapprovalcode = row[Option[/* max 15 chars */ String]](idx + 16),
        currencyrateid = row[Option[CurrencyrateId]](idx + 17),
        subtotal = row[BigDecimal](idx + 18),
        taxamt = row[BigDecimal](idx + 19),
        freight = row[BigDecimal](idx + 20),
        totaldue = row[Option[BigDecimal]](idx + 21),
        comment = row[Option[/* max 128 chars */ String]](idx + 22),
        rowguid = row[UUID](idx + 23),
        modifieddate = row[TypoLocalDateTime](idx + 24)
      )
    )
  }
  implicit val writes: OWrites[SalesorderheaderRow] = OWrites[SalesorderheaderRow](o =>
    new JsObject(ListMap[String, JsValue](
      "salesorderid" -> Json.toJson(o.salesorderid),
      "revisionnumber" -> Json.toJson(o.revisionnumber),
      "orderdate" -> Json.toJson(o.orderdate),
      "duedate" -> Json.toJson(o.duedate),
      "shipdate" -> Json.toJson(o.shipdate),
      "status" -> Json.toJson(o.status),
      "onlineorderflag" -> Json.toJson(o.onlineorderflag),
      "purchaseordernumber" -> Json.toJson(o.purchaseordernumber),
      "accountnumber" -> Json.toJson(o.accountnumber),
      "customerid" -> Json.toJson(o.customerid),
      "salespersonid" -> Json.toJson(o.salespersonid),
      "territoryid" -> Json.toJson(o.territoryid),
      "billtoaddressid" -> Json.toJson(o.billtoaddressid),
      "shiptoaddressid" -> Json.toJson(o.shiptoaddressid),
      "shipmethodid" -> Json.toJson(o.shipmethodid),
      "creditcardid" -> Json.toJson(o.creditcardid),
      "creditcardapprovalcode" -> Json.toJson(o.creditcardapprovalcode),
      "currencyrateid" -> Json.toJson(o.currencyrateid),
      "subtotal" -> Json.toJson(o.subtotal),
      "taxamt" -> Json.toJson(o.taxamt),
      "freight" -> Json.toJson(o.freight),
      "totaldue" -> Json.toJson(o.totaldue),
      "comment" -> Json.toJson(o.comment),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
