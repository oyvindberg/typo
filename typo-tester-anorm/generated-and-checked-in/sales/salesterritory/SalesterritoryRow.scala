/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesterritory

import adventureworks.TypoLocalDateTime
import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class SalesterritoryRow(
  /** Primary key for SalesTerritory records. */
  territoryid: SalesterritoryId,
  /** Sales territory description */
  name: Name,
  /** ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
      Points to [[person.countryregion.CountryregionRow.countryregioncode]] */
  countryregioncode: CountryregionId,
  /** Geographic area to which the sales territory belong. */
  group: /* max 50 chars */ String,
  /** Sales in the territory year to date. */
  salesytd: BigDecimal,
  /** Sales in the territory the previous year. */
  saleslastyear: BigDecimal,
  /** Business costs in the territory year to date. */
  costytd: BigDecimal,
  /** Business costs in the territory the previous year. */
  costlastyear: BigDecimal,
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object SalesterritoryRow {
  implicit val reads: Reads[SalesterritoryRow] = Reads[SalesterritoryRow](json => JsResult.fromTry(
      Try(
        SalesterritoryRow(
          territoryid = json.\("territoryid").as[SalesterritoryId],
          name = json.\("name").as[Name],
          countryregioncode = json.\("countryregioncode").as[CountryregionId],
          group = json.\("group").as[/* max 50 chars */ String],
          salesytd = json.\("salesytd").as[BigDecimal],
          saleslastyear = json.\("saleslastyear").as[BigDecimal],
          costytd = json.\("costytd").as[BigDecimal],
          costlastyear = json.\("costlastyear").as[BigDecimal],
          rowguid = json.\("rowguid").as[UUID],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SalesterritoryRow] = RowParser[SalesterritoryRow] { row =>
    Success(
      SalesterritoryRow(
        territoryid = row[SalesterritoryId](idx + 0),
        name = row[Name](idx + 1),
        countryregioncode = row[CountryregionId](idx + 2),
        group = row[/* max 50 chars */ String](idx + 3),
        salesytd = row[BigDecimal](idx + 4),
        saleslastyear = row[BigDecimal](idx + 5),
        costytd = row[BigDecimal](idx + 6),
        costlastyear = row[BigDecimal](idx + 7),
        rowguid = row[UUID](idx + 8),
        modifieddate = row[TypoLocalDateTime](idx + 9)
      )
    )
  }
  implicit val writes: OWrites[SalesterritoryRow] = OWrites[SalesterritoryRow](o =>
    new JsObject(ListMap[String, JsValue](
      "territoryid" -> Json.toJson(o.territoryid),
      "name" -> Json.toJson(o.name),
      "countryregioncode" -> Json.toJson(o.countryregioncode),
      "group" -> Json.toJson(o.group),
      "salesytd" -> Json.toJson(o.salesytd),
      "saleslastyear" -> Json.toJson(o.saleslastyear),
      "costytd" -> Json.toJson(o.costytd),
      "costlastyear" -> Json.toJson(o.costlastyear),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
