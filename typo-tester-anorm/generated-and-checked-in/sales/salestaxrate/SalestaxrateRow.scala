/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salestaxrate

import adventureworks.TypoLocalDateTime
import adventureworks.person.stateprovince.StateprovinceId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class SalestaxrateRow(
  /** Primary key for SalesTaxRate records. */
  salestaxrateid: SalestaxrateId,
  /** State, province, or country/region the sales tax applies to.
      Points to [[person.stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: StateprovinceId,
  /** 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions. */
  taxtype: Int,
  /** Tax rate amount. */
  taxrate: BigDecimal,
  /** Tax rate description. */
  name: Name,
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object SalestaxrateRow {
  implicit val reads: Reads[SalestaxrateRow] = Reads[SalestaxrateRow](json => JsResult.fromTry(
      Try(
        SalestaxrateRow(
          salestaxrateid = json.\("salestaxrateid").as[SalestaxrateId],
          stateprovinceid = json.\("stateprovinceid").as[StateprovinceId],
          taxtype = json.\("taxtype").as[Int],
          taxrate = json.\("taxrate").as[BigDecimal],
          name = json.\("name").as[Name],
          rowguid = json.\("rowguid").as[UUID],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SalestaxrateRow] = RowParser[SalestaxrateRow] { row =>
    Success(
      SalestaxrateRow(
        salestaxrateid = row[SalestaxrateId](idx + 0),
        stateprovinceid = row[StateprovinceId](idx + 1),
        taxtype = row[Int](idx + 2),
        taxrate = row[BigDecimal](idx + 3),
        name = row[Name](idx + 4),
        rowguid = row[UUID](idx + 5),
        modifieddate = row[TypoLocalDateTime](idx + 6)
      )
    )
  }
  implicit val writes: OWrites[SalestaxrateRow] = OWrites[SalestaxrateRow](o =>
    new JsObject(ListMap[String, JsValue](
      "salestaxrateid" -> Json.toJson(o.salestaxrateid),
      "stateprovinceid" -> Json.toJson(o.stateprovinceid),
      "taxtype" -> Json.toJson(o.taxtype),
      "taxrate" -> Json.toJson(o.taxrate),
      "name" -> Json.toJson(o.name),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
