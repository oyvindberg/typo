/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesperson

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import anorm.Column
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

case class SalespersonRow(
  /** Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID
      Points to [[humanresources.employee.EmployeeRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Projected yearly sales. */
  salesquota: Option[BigDecimal],
  /** Bonus due if quota is met. */
  bonus: BigDecimal,
  /** Commision percent received per sale. */
  commissionpct: BigDecimal,
  /** Sales total year to date. */
  salesytd: BigDecimal,
  /** Sales total of previous year. */
  saleslastyear: BigDecimal,
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object SalespersonRow {
  implicit val reads: Reads[SalespersonRow] = Reads[SalespersonRow](json => JsResult.fromTry(
      Try(
        SalespersonRow(
          businessentityid = json.\("businessentityid").as(BusinessentityId.reads),
          territoryid = json.\("territoryid").toOption.map(_.as(SalesterritoryId.reads)),
          salesquota = json.\("salesquota").toOption.map(_.as(Reads.bigDecReads)),
          bonus = json.\("bonus").as(Reads.bigDecReads),
          commissionpct = json.\("commissionpct").as(Reads.bigDecReads),
          salesytd = json.\("salesytd").as(Reads.bigDecReads),
          saleslastyear = json.\("saleslastyear").as(Reads.bigDecReads),
          rowguid = json.\("rowguid").as(Reads.uuidReads),
          modifieddate = json.\("modifieddate").as(TypoLocalDateTime.reads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SalespersonRow] = RowParser[SalespersonRow] { row =>
    Success(
      SalespersonRow(
        businessentityid = row(idx + 0)(BusinessentityId.column),
        territoryid = row(idx + 1)(Column.columnToOption(SalesterritoryId.column)),
        salesquota = row(idx + 2)(Column.columnToOption(Column.columnToScalaBigDecimal)),
        bonus = row(idx + 3)(Column.columnToScalaBigDecimal),
        commissionpct = row(idx + 4)(Column.columnToScalaBigDecimal),
        salesytd = row(idx + 5)(Column.columnToScalaBigDecimal),
        saleslastyear = row(idx + 6)(Column.columnToScalaBigDecimal),
        rowguid = row(idx + 7)(Column.columnToUUID),
        modifieddate = row(idx + 8)(TypoLocalDateTime.column)
      )
    )
  }
  implicit val writes: OWrites[SalespersonRow] = OWrites[SalespersonRow](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> BusinessentityId.writes.writes(o.businessentityid),
      "territoryid" -> Writes.OptionWrites(SalesterritoryId.writes).writes(o.territoryid),
      "salesquota" -> Writes.OptionWrites(Writes.BigDecimalWrites).writes(o.salesquota),
      "bonus" -> Writes.BigDecimalWrites.writes(o.bonus),
      "commissionpct" -> Writes.BigDecimalWrites.writes(o.commissionpct),
      "salesytd" -> Writes.BigDecimalWrites.writes(o.salesytd),
      "saleslastyear" -> Writes.BigDecimalWrites.writes(o.saleslastyear),
      "rowguid" -> Writes.UuidWrites.writes(o.rowguid),
      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)
    ))
  )
}
