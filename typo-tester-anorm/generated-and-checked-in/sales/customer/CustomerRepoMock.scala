/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package customer

import java.sql.Connection

class CustomerRepoMock(toRow: Function1[CustomerRowUnsaved, CustomerRow],
                       map: scala.collection.mutable.Map[CustomerId, CustomerRow] = scala.collection.mutable.Map.empty) extends CustomerRepo {
  override def delete(customerid: CustomerId)(implicit c: Connection): Boolean = {
    map.remove(customerid).isDefined
  }
  override def insert(unsaved: CustomerRow)(implicit c: Connection): CustomerRow = {
    if (map.contains(unsaved.customerid))
      sys.error(s"id ${unsaved.customerid} already exists")
    else
      map.put(unsaved.customerid, unsaved)
    unsaved
  }
  override def insert(unsaved: CustomerRowUnsaved)(implicit c: Connection): CustomerRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[CustomerRow] = {
    map.values.toList
  }
  override def selectById(customerid: CustomerId)(implicit c: Connection): Option[CustomerRow] = {
    map.get(customerid)
  }
  override def selectByIds(customerids: Array[CustomerId])(implicit c: Connection): List[CustomerRow] = {
    customerids.flatMap(map.get).toList
  }
  override def update(row: CustomerRow)(implicit c: Connection): Boolean = {
    map.get(row.customerid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.customerid, row)
        true
      case None => false
    }
  }
  override def upsert(unsaved: CustomerRow)(implicit c: Connection): CustomerRow = {
    map.put(unsaved.customerid, unsaved)
    unsaved
  }
}
