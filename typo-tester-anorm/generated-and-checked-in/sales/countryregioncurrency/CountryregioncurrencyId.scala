/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package countryregioncurrency

import adventureworks.person.countryregion.CountryregionId
import adventureworks.sales.currency.CurrencyId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** Type for the composite primary key of table `sales.countryregioncurrency` */
case class CountryregioncurrencyId(countryregioncode: CountryregionId, currencycode: CurrencyId)
object CountryregioncurrencyId {
  implicit def ordering: Ordering[CountryregioncurrencyId] = Ordering.by(x => (x.countryregioncode, x.currencycode))
  implicit val oFormat: OFormat[CountryregioncurrencyId] = new OFormat[CountryregioncurrencyId]{
    override def writes(o: CountryregioncurrencyId): JsObject =
      Json.obj(
        "countryregioncode" -> o.countryregioncode,
        "currencycode" -> o.currencycode
      )
  
    override def reads(json: JsValue): JsResult[CountryregioncurrencyId] = {
      JsResult.fromTry(
        Try(
          CountryregioncurrencyId(
            countryregioncode = json.\("countryregioncode").as[CountryregionId],
            currencycode = json.\("currencycode").as[CurrencyId]
          )
        )
      )
    }
  }
}
