/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package countryregioncurrency

import adventureworks.TypoLocalDateTime
import adventureworks.person.countryregion.CountryregionId
import adventureworks.sales.currency.CurrencyId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class CountryregioncurrencyRow(
  /** ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.
      Points to [[person.countryregion.CountryregionRow.countryregioncode]] */
  countryregioncode: CountryregionId,
  /** ISO standard currency code. Foreign key to Currency.CurrencyCode.
      Points to [[currency.CurrencyRow.currencycode]] */
  currencycode: CurrencyId,
  modifieddate: TypoLocalDateTime
){
   val compositeId: CountryregioncurrencyId = CountryregioncurrencyId(countryregioncode, currencycode)
 }

object CountryregioncurrencyRow {
  implicit val reads: Reads[CountryregioncurrencyRow] = Reads[CountryregioncurrencyRow](json => JsResult.fromTry(
      Try(
        CountryregioncurrencyRow(
          countryregioncode = json.\("countryregioncode").as[CountryregionId],
          currencycode = json.\("currencycode").as[CurrencyId],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[CountryregioncurrencyRow] = RowParser[CountryregioncurrencyRow] { row =>
    Success(
      CountryregioncurrencyRow(
        countryregioncode = row[CountryregionId](idx + 0),
        currencycode = row[CurrencyId](idx + 1),
        modifieddate = row[TypoLocalDateTime](idx + 2)
      )
    )
  }
  implicit val writes: OWrites[CountryregioncurrencyRow] = OWrites[CountryregioncurrencyRow](o =>
    new JsObject(ListMap[String, JsValue](
      "countryregioncode" -> Json.toJson(o.countryregioncode),
      "currencycode" -> Json.toJson(o.currencycode),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
