/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheadersalesreason

import adventureworks.TypoLocalDateTime
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.salesreason.SalesreasonId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class SalesorderheadersalesreasonRow(
  /** Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
      Points to [[salesorderheader.SalesorderheaderRow.salesorderid]] */
  salesorderid: SalesorderheaderId,
  /** Primary key. Foreign key to SalesReason.SalesReasonID.
      Points to [[salesreason.SalesreasonRow.salesreasonid]] */
  salesreasonid: SalesreasonId,
  modifieddate: TypoLocalDateTime
){
   val compositeId: SalesorderheadersalesreasonId = SalesorderheadersalesreasonId(salesorderid, salesreasonid)
 }

object SalesorderheadersalesreasonRow {
  implicit val reads: Reads[SalesorderheadersalesreasonRow] = Reads[SalesorderheadersalesreasonRow](json => JsResult.fromTry(
      Try(
        SalesorderheadersalesreasonRow(
          salesorderid = json.\("salesorderid").as[SalesorderheaderId],
          salesreasonid = json.\("salesreasonid").as[SalesreasonId],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SalesorderheadersalesreasonRow] = RowParser[SalesorderheadersalesreasonRow] { row =>
    Success(
      SalesorderheadersalesreasonRow(
        salesorderid = row[SalesorderheaderId](idx + 0),
        salesreasonid = row[SalesreasonId](idx + 1),
        modifieddate = row[TypoLocalDateTime](idx + 2)
      )
    )
  }
  implicit val writes: OWrites[SalesorderheadersalesreasonRow] = OWrites[SalesorderheadersalesreasonRow](o =>
    new JsObject(ListMap[String, JsValue](
      "salesorderid" -> Json.toJson(o.salesorderid),
      "salesreasonid" -> Json.toJson(o.salesreasonid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
