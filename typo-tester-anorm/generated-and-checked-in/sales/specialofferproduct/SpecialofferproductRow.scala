/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialofferproduct

import adventureworks.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.sales.specialoffer.SpecialofferId
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class SpecialofferproductRow(
  /** Primary key for SpecialOfferProduct records.
      Points to [[specialoffer.SpecialofferRow.specialofferid]] */
  specialofferid: SpecialofferId,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
){
   val compositeId: SpecialofferproductId = SpecialofferproductId(specialofferid, productid)
 }

object SpecialofferproductRow {
  implicit val reads: Reads[SpecialofferproductRow] = Reads[SpecialofferproductRow](json => JsResult.fromTry(
      Try(
        SpecialofferproductRow(
          specialofferid = json.\("specialofferid").as[SpecialofferId],
          productid = json.\("productid").as[ProductId],
          rowguid = json.\("rowguid").as[UUID],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SpecialofferproductRow] = RowParser[SpecialofferproductRow] { row =>
    Success(
      SpecialofferproductRow(
        specialofferid = row[SpecialofferId](idx + 0),
        productid = row[ProductId](idx + 1),
        rowguid = row[UUID](idx + 2),
        modifieddate = row[TypoLocalDateTime](idx + 3)
      )
    )
  }
  implicit val writes: OWrites[SpecialofferproductRow] = OWrites[SpecialofferproductRow](o =>
    new JsObject(ListMap[String, JsValue](
      "specialofferid" -> Json.toJson(o.specialofferid),
      "productid" -> Json.toJson(o.productid),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
