/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currencyrate

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.sales.currency.CurrencyId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** This class corresponds to a row in table `sales.currencyrate` which has not been persisted yet */
case class CurrencyrateRowUnsaved(
  /** Date and time the exchange rate was obtained. */
  currencyratedate: TypoLocalDateTime,
  /** Exchange rate was converted from this currency code.
      Points to [[currency.CurrencyRow.currencycode]] */
  fromcurrencycode: CurrencyId,
  /** Exchange rate was converted to this currency code.
      Points to [[currency.CurrencyRow.currencycode]] */
  tocurrencycode: CurrencyId,
  /** Average exchange rate for the day. */
  averagerate: BigDecimal,
  /** Final exchange rate for the day. */
  endofdayrate: BigDecimal,
  /** Default: nextval('sales.currencyrate_currencyrateid_seq'::regclass)
      Primary key for CurrencyRate records. */
  currencyrateid: Defaulted[CurrencyrateId] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(currencyrateidDefault: => CurrencyrateId, modifieddateDefault: => TypoLocalDateTime): CurrencyrateRow =
    CurrencyrateRow(
      currencyratedate = currencyratedate,
      fromcurrencycode = fromcurrencycode,
      tocurrencycode = tocurrencycode,
      averagerate = averagerate,
      endofdayrate = endofdayrate,
      currencyrateid = currencyrateid match {
                         case Defaulted.UseDefault => currencyrateidDefault
                         case Defaulted.Provided(value) => value
                       },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object CurrencyrateRowUnsaved {
  implicit val reads: Reads[CurrencyrateRowUnsaved] = Reads[CurrencyrateRowUnsaved](json => JsResult.fromTry(
      Try(
        CurrencyrateRowUnsaved(
          currencyratedate = json.\("currencyratedate").as[TypoLocalDateTime],
          fromcurrencycode = json.\("fromcurrencycode").as[CurrencyId],
          tocurrencycode = json.\("tocurrencycode").as[CurrencyId],
          averagerate = json.\("averagerate").as[BigDecimal],
          endofdayrate = json.\("endofdayrate").as[BigDecimal],
          currencyrateid = json.\("currencyrateid").as[Defaulted[CurrencyrateId]],
          modifieddate = json.\("modifieddate").as[Defaulted[TypoLocalDateTime]]
        )
      )
    ),
  )
  implicit val writes: OWrites[CurrencyrateRowUnsaved] = OWrites[CurrencyrateRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "currencyratedate" -> Json.toJson(o.currencyratedate),
      "fromcurrencycode" -> Json.toJson(o.fromcurrencycode),
      "tocurrencycode" -> Json.toJson(o.tocurrencycode),
      "averagerate" -> Json.toJson(o.averagerate),
      "endofdayrate" -> Json.toJson(o.endofdayrate),
      "currencyrateid" -> Json.toJson(o.currencyrateid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
