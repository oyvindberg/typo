/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currencyrate

import java.sql.Connection

class CurrencyrateRepoMock(toRow: Function1[CurrencyrateRowUnsaved, CurrencyrateRow],
                           map: scala.collection.mutable.Map[CurrencyrateId, CurrencyrateRow] = scala.collection.mutable.Map.empty) extends CurrencyrateRepo {
  override def delete(currencyrateid: CurrencyrateId)(implicit c: Connection): Boolean = {
    map.remove(currencyrateid).isDefined
  }
  override def insert(unsaved: CurrencyrateRow)(implicit c: Connection): CurrencyrateRow = {
    if (map.contains(unsaved.currencyrateid))
      sys.error(s"id ${unsaved.currencyrateid} already exists")
    else
      map.put(unsaved.currencyrateid, unsaved)
    unsaved
  }
  override def insert(unsaved: CurrencyrateRowUnsaved)(implicit c: Connection): CurrencyrateRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[CurrencyrateRow] = {
    map.values.toList
  }
  override def selectById(currencyrateid: CurrencyrateId)(implicit c: Connection): Option[CurrencyrateRow] = {
    map.get(currencyrateid)
  }
  override def selectByIds(currencyrateids: Array[CurrencyrateId])(implicit c: Connection): List[CurrencyrateRow] = {
    currencyrateids.flatMap(map.get).toList
  }
  override def update(row: CurrencyrateRow)(implicit c: Connection): Boolean = {
    map.get(row.currencyrateid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.currencyrateid, row)
        true
      case None => false
    }
  }
  override def upsert(unsaved: CurrencyrateRow)(implicit c: Connection): CurrencyrateRow = {
    map.put(unsaved.currencyrateid, unsaved)
    unsaved
  }
}
