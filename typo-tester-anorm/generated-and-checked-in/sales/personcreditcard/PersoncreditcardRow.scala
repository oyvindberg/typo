/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package personcreditcard

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.creditcard.CreditcardId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class PersoncreditcardRow(
  /** Business entity identification number. Foreign key to Person.BusinessEntityID.
      Points to [[person.person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Credit card identification number. Foreign key to CreditCard.CreditCardID.
      Points to [[creditcard.CreditcardRow.creditcardid]] */
  creditcardid: CreditcardId,
  modifieddate: TypoLocalDateTime
){
   val compositeId: PersoncreditcardId = PersoncreditcardId(businessentityid, creditcardid)
 }

object PersoncreditcardRow {
  implicit val reads: Reads[PersoncreditcardRow] = Reads[PersoncreditcardRow](json => JsResult.fromTry(
      Try(
        PersoncreditcardRow(
          businessentityid = json.\("businessentityid").as[BusinessentityId],
          creditcardid = json.\("creditcardid").as[CreditcardId],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PersoncreditcardRow] = RowParser[PersoncreditcardRow] { row =>
    Success(
      PersoncreditcardRow(
        businessentityid = row[BusinessentityId](idx + 0),
        creditcardid = row[CreditcardId](idx + 1),
        modifieddate = row[TypoLocalDateTime](idx + 2)
      )
    )
  }
  implicit val writes: OWrites[PersoncreditcardRow] = OWrites[PersoncreditcardRow](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> Json.toJson(o.businessentityid),
      "creditcardid" -> Json.toJson(o.creditcardid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
