/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package personcreditcard

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.creditcard.CreditcardId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PersoncreditcardRow(
  /** Business entity identification number. Foreign key to Person.BusinessEntityID.
      Points to [[person.person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Credit card identification number. Foreign key to CreditCard.CreditCardID.
      Points to [[creditcard.CreditcardRow.creditcardid]] */
  creditcardid: CreditcardId,
  modifieddate: LocalDateTime
){
   val compositeId: PersoncreditcardId = PersoncreditcardId(businessentityid, creditcardid)
 }

object PersoncreditcardRow {
  implicit val oFormat: OFormat[PersoncreditcardRow] = new OFormat[PersoncreditcardRow]{
    override def writes(o: PersoncreditcardRow): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "creditcardid" -> o.creditcardid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PersoncreditcardRow] = {
      JsResult.fromTry(
        Try(
          PersoncreditcardRow(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            creditcardid = json.\("creditcardid").as[CreditcardId],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
