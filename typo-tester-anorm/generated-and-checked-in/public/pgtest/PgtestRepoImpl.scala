/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtest

import adventureworks.TypoBox
import adventureworks.TypoCircle
import adventureworks.TypoHStore
import adventureworks.TypoInet
import adventureworks.TypoInterval
import adventureworks.TypoJson
import adventureworks.TypoJsonb
import adventureworks.TypoLine
import adventureworks.TypoLineSegment
import adventureworks.TypoMoney
import adventureworks.TypoPath
import adventureworks.TypoPoint
import adventureworks.TypoPolygon
import adventureworks.TypoXml
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection

object PgtestRepoImpl extends PgtestRepo {
  override def insert(unsaved: PgtestRow)(implicit c: Connection): PgtestRow = {
    SQL"""insert into "public".pgtest(box, circle, line, lseg, "path", point, polygon, "interval", money, "xml", json, jsonb, hstore, inet, boxes, circlees, linees, lseges, pathes, pointes, polygones, intervales, moneyes, xmles, jsones, jsonbes, hstores, inets)
          values (${unsaved.box}::box, ${unsaved.circle}::circle, ${unsaved.line}::line, ${unsaved.lseg}::lseg, ${unsaved.path}::path, ${unsaved.point}::point, ${unsaved.polygon}::polygon, ${unsaved.interval}::interval, ${unsaved.money}::numeric, ${unsaved.xml}::xml, ${unsaved.json}::json, ${unsaved.jsonb}::jsonb, ${unsaved.hstore}::hstore, ${unsaved.inet}::inet, ${unsaved.boxes}::_box, ${unsaved.circlees}::_circle, ${unsaved.linees}::_line, ${unsaved.lseges}::_lseg, ${unsaved.pathes}::_path, ${unsaved.pointes}::_point, ${unsaved.polygones}::_polygon, ${unsaved.intervales}::_interval, ${unsaved.moneyes}::numeric[], ${unsaved.xmles}::_xml, ${unsaved.jsones}::_json, ${unsaved.jsonbes}::_jsonb, ${unsaved.hstores}::_hstore, ${unsaved.inets}::_inet)
          returning box, circle, line, lseg, "path", point, polygon, "interval", money::numeric, "xml", json, jsonb, hstore, inet, boxes, circlees, linees, lseges, pathes, pointes, polygones, intervales, moneyes::numeric[], xmles, jsones, jsonbes, hstores, inets
       """
      .executeInsert(rowParser.single)
  
  }
  override def selectAll(implicit c: Connection): List[PgtestRow] = {
    SQL"""select box, circle, line, lseg, "path", point, polygon, "interval", money::numeric, "xml", json, jsonb, hstore, inet, boxes, circlees, linees, lseges, pathes, pointes, polygones, intervales, moneyes::numeric[], xmles, jsones, jsonbes, hstores, inets
          from "public".pgtest
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[PgtestFieldOrIdValue[_]])(implicit c: Connection): List[PgtestRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PgtestFieldValue.box(value) => NamedParameter("box", ParameterValue.from(value))
          case PgtestFieldValue.circle(value) => NamedParameter("circle", ParameterValue.from(value))
          case PgtestFieldValue.line(value) => NamedParameter("line", ParameterValue.from(value))
          case PgtestFieldValue.lseg(value) => NamedParameter("lseg", ParameterValue.from(value))
          case PgtestFieldValue.path(value) => NamedParameter("path", ParameterValue.from(value))
          case PgtestFieldValue.point(value) => NamedParameter("point", ParameterValue.from(value))
          case PgtestFieldValue.polygon(value) => NamedParameter("polygon", ParameterValue.from(value))
          case PgtestFieldValue.interval(value) => NamedParameter("interval", ParameterValue.from(value))
          case PgtestFieldValue.money(value) => NamedParameter("money", ParameterValue.from(value))
          case PgtestFieldValue.xml(value) => NamedParameter("xml", ParameterValue.from(value))
          case PgtestFieldValue.json(value) => NamedParameter("json", ParameterValue.from(value))
          case PgtestFieldValue.jsonb(value) => NamedParameter("jsonb", ParameterValue.from(value))
          case PgtestFieldValue.hstore(value) => NamedParameter("hstore", ParameterValue.from(value))
          case PgtestFieldValue.inet(value) => NamedParameter("inet", ParameterValue.from(value))
          case PgtestFieldValue.boxes(value) => NamedParameter("boxes", ParameterValue.from(value))
          case PgtestFieldValue.circlees(value) => NamedParameter("circlees", ParameterValue.from(value))
          case PgtestFieldValue.linees(value) => NamedParameter("linees", ParameterValue.from(value))
          case PgtestFieldValue.lseges(value) => NamedParameter("lseges", ParameterValue.from(value))
          case PgtestFieldValue.pathes(value) => NamedParameter("pathes", ParameterValue.from(value))
          case PgtestFieldValue.pointes(value) => NamedParameter("pointes", ParameterValue.from(value))
          case PgtestFieldValue.polygones(value) => NamedParameter("polygones", ParameterValue.from(value))
          case PgtestFieldValue.intervales(value) => NamedParameter("intervales", ParameterValue.from(value))
          case PgtestFieldValue.moneyes(value) => NamedParameter("moneyes", ParameterValue.from(value))
          case PgtestFieldValue.xmles(value) => NamedParameter("xmles", ParameterValue.from(value))
          case PgtestFieldValue.jsones(value) => NamedParameter("jsones", ParameterValue.from(value))
          case PgtestFieldValue.jsonbes(value) => NamedParameter("jsonbes", ParameterValue.from(value))
          case PgtestFieldValue.hstores(value) => NamedParameter("hstores", ParameterValue.from(value))
          case PgtestFieldValue.inets(value) => NamedParameter("inets", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select box, circle, line, lseg, "path", point, polygon, "interval", money::numeric, "xml", json, jsonb, hstore, inet, boxes, circlees, linees, lseges, pathes, pointes, polygones, intervales, moneyes::numeric[], xmles, jsones, jsonbes, hstores, inets
                    from "public".pgtest
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[PgtestRow] =
    RowParser[PgtestRow] { row =>
      Success(
        PgtestRow(
          box = row[TypoBox]("box"),
          circle = row[TypoCircle]("circle"),
          line = row[TypoLine]("line"),
          lseg = row[TypoLineSegment]("lseg"),
          path = row[TypoPath]("path"),
          point = row[TypoPoint]("point"),
          polygon = row[TypoPolygon]("polygon"),
          interval = row[TypoInterval]("interval"),
          money = row[TypoMoney]("money"),
          xml = row[TypoXml]("xml"),
          json = row[TypoJson]("json"),
          jsonb = row[TypoJsonb]("jsonb"),
          hstore = row[TypoHStore]("hstore"),
          inet = row[TypoInet]("inet"),
          boxes = row[Array[TypoBox]]("boxes"),
          circlees = row[Array[TypoCircle]]("circlees"),
          linees = row[Array[TypoLine]]("linees"),
          lseges = row[Array[TypoLineSegment]]("lseges"),
          pathes = row[Array[TypoPath]]("pathes"),
          pointes = row[Array[TypoPoint]]("pointes"),
          polygones = row[Array[TypoPolygon]]("polygones"),
          intervales = row[Array[TypoInterval]]("intervales"),
          moneyes = row[Array[TypoMoney]]("moneyes"),
          xmles = row[Array[TypoXml]]("xmles"),
          jsones = row[Array[TypoJson]]("jsones"),
          jsonbes = row[Array[TypoJsonb]]("jsonbes"),
          hstores = row[Array[TypoHStore]]("hstores"),
          inets = row[Array[TypoInet]]("inets")
        )
      )
    }
}
