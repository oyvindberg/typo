/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package sm

import adventureworks.TypoLocalDateTime
import adventureworks.public.Name
import adventureworks.purchasing.shipmethod.ShipmethodId
import anorm.RowParser
import anorm.Success
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class SmViewRow(
  id: Option[Int],
  /** Points to [[purchasing.shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: Option[ShipmethodId],
  /** Points to [[purchasing.shipmethod.ShipmethodRow.name]] */
  name: Option[Name],
  /** Points to [[purchasing.shipmethod.ShipmethodRow.shipbase]] */
  shipbase: Option[BigDecimal],
  /** Points to [[purchasing.shipmethod.ShipmethodRow.shiprate]] */
  shiprate: Option[BigDecimal],
  /** Points to [[purchasing.shipmethod.ShipmethodRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[purchasing.shipmethod.ShipmethodRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object SmViewRow {
  implicit val reads: Reads[SmViewRow] = Reads[SmViewRow](json => JsResult.fromTry(
      Try(
        SmViewRow(
          id = json.\("id").toOption.map(_.as[Int]),
          shipmethodid = json.\("shipmethodid").toOption.map(_.as[ShipmethodId]),
          name = json.\("name").toOption.map(_.as[Name]),
          shipbase = json.\("shipbase").toOption.map(_.as[BigDecimal]),
          shiprate = json.\("shiprate").toOption.map(_.as[BigDecimal]),
          rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
          modifieddate = json.\("modifieddate").toOption.map(_.as[TypoLocalDateTime])
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[SmViewRow] = RowParser[SmViewRow] { row =>
    Success(
      SmViewRow(
        id = row[Option[Int]](idx + 0),
        shipmethodid = row[Option[ShipmethodId]](idx + 1),
        name = row[Option[Name]](idx + 2),
        shipbase = row[Option[BigDecimal]](idx + 3),
        shiprate = row[Option[BigDecimal]](idx + 4),
        rowguid = row[Option[UUID]](idx + 5),
        modifieddate = row[Option[TypoLocalDateTime]](idx + 6)
      )
    )
  }
  implicit val writes: OWrites[SmViewRow] = OWrites[SmViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> Json.toJson(o.id),
      "shipmethodid" -> Json.toJson(o.shipmethodid),
      "name" -> Json.toJson(o.name),
      "shipbase" -> Json.toJson(o.shipbase),
      "shiprate" -> Json.toJson(o.shiprate),
      "rowguid" -> Json.toJson(o.rowguid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
