/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderdetail

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** This class corresponds to a row in table `purchasing.purchaseorderdetail` which has not been persisted yet */
case class PurchaseorderdetailRowUnsaved(
  /** Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
      Points to [[purchaseorderheader.PurchaseorderheaderRow.purchaseorderid]] */
  purchaseorderid: PurchaseorderheaderId,
  /** Date the product is expected to be received. */
  duedate: TypoLocalDateTime,
  /** Quantity ordered. */
  orderqty: Int,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  /** Vendor's selling price of a single product. */
  unitprice: BigDecimal,
  /** Quantity actually received from the vendor. */
  receivedqty: BigDecimal,
  /** Quantity rejected during inspection. */
  rejectedqty: BigDecimal,
  /** Default: nextval('purchasing.purchaseorderdetail_purchaseorderdetailid_seq'::regclass)
      Primary key. One line number per purchased product. */
  purchaseorderdetailid: Defaulted[Int] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(purchaseorderdetailidDefault: => Int, modifieddateDefault: => TypoLocalDateTime): PurchaseorderdetailRow =
    PurchaseorderdetailRow(
      purchaseorderid = purchaseorderid,
      duedate = duedate,
      orderqty = orderqty,
      productid = productid,
      unitprice = unitprice,
      receivedqty = receivedqty,
      rejectedqty = rejectedqty,
      purchaseorderdetailid = purchaseorderdetailid match {
                                case Defaulted.UseDefault => purchaseorderdetailidDefault
                                case Defaulted.Provided(value) => value
                              },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object PurchaseorderdetailRowUnsaved {
  implicit val reads: Reads[PurchaseorderdetailRowUnsaved] = Reads[PurchaseorderdetailRowUnsaved](json => JsResult.fromTry(
      Try(
        PurchaseorderdetailRowUnsaved(
          purchaseorderid = json.\("purchaseorderid").as[PurchaseorderheaderId],
          duedate = json.\("duedate").as[TypoLocalDateTime],
          orderqty = json.\("orderqty").as[Int],
          productid = json.\("productid").as[ProductId],
          unitprice = json.\("unitprice").as[BigDecimal],
          receivedqty = json.\("receivedqty").as[BigDecimal],
          rejectedqty = json.\("rejectedqty").as[BigDecimal],
          purchaseorderdetailid = json.\("purchaseorderdetailid").as[Defaulted[Int]],
          modifieddate = json.\("modifieddate").as[Defaulted[TypoLocalDateTime]]
        )
      )
    ),
  )
  implicit val writes: OWrites[PurchaseorderdetailRowUnsaved] = OWrites[PurchaseorderdetailRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "purchaseorderid" -> Json.toJson(o.purchaseorderid),
      "duedate" -> Json.toJson(o.duedate),
      "orderqty" -> Json.toJson(o.orderqty),
      "productid" -> Json.toJson(o.productid),
      "unitprice" -> Json.toJson(o.unitprice),
      "receivedqty" -> Json.toJson(o.receivedqty),
      "rejectedqty" -> Json.toJson(o.rejectedqty),
      "purchaseorderdetailid" -> Json.toJson(o.purchaseorderdetailid),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
