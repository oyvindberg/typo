/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderheader

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.purchasing.shipmethod.ShipmethodId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PurchaseorderheaderRow(
  /** Primary key. */
  purchaseorderid: PurchaseorderheaderId,
  /** Incremental number to track changes to the purchase order over time. */
  revisionnumber: Int,
  /** Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete */
  status: Int,
  /** Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
      Points to [[humanresources.employee.EmployeeRow.businessentityid]] */
  employeeid: BusinessentityId,
  /** Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
      Points to [[vendor.VendorRow.businessentityid]] */
  vendorid: BusinessentityId,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
      Points to [[shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: ShipmethodId,
  /** Purchase order creation date. */
  orderdate: LocalDateTime,
  /** Estimated shipment date from the vendor. */
  shipdate: Option[LocalDateTime],
  /** Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID. */
  subtotal: BigDecimal,
  /** Tax amount. */
  taxamt: BigDecimal,
  /** Shipping cost. */
  freight: BigDecimal,
  modifieddate: LocalDateTime
)

object PurchaseorderheaderRow {
  implicit val oFormat: OFormat[PurchaseorderheaderRow] = new OFormat[PurchaseorderheaderRow]{
    override def writes(o: PurchaseorderheaderRow): JsObject =
      Json.obj(
        "purchaseorderid" -> o.purchaseorderid,
        "revisionnumber" -> o.revisionnumber,
        "status" -> o.status,
        "employeeid" -> o.employeeid,
        "vendorid" -> o.vendorid,
        "shipmethodid" -> o.shipmethodid,
        "orderdate" -> o.orderdate,
        "shipdate" -> o.shipdate,
        "subtotal" -> o.subtotal,
        "taxamt" -> o.taxamt,
        "freight" -> o.freight,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PurchaseorderheaderRow] = {
      JsResult.fromTry(
        Try(
          PurchaseorderheaderRow(
            purchaseorderid = json.\("purchaseorderid").as[PurchaseorderheaderId],
            revisionnumber = json.\("revisionnumber").as[Int],
            status = json.\("status").as[Int],
            employeeid = json.\("employeeid").as[BusinessentityId],
            vendorid = json.\("vendorid").as[BusinessentityId],
            shipmethodid = json.\("shipmethodid").as[ShipmethodId],
            orderdate = json.\("orderdate").as[LocalDateTime],
            shipdate = json.\("shipdate").toOption.map(_.as[LocalDateTime]),
            subtotal = json.\("subtotal").as[BigDecimal],
            taxamt = json.\("taxamt").as[BigDecimal],
            freight = json.\("freight").as[BigDecimal],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
