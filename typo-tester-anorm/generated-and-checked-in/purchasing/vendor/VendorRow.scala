/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vendor

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class VendorRow(
  /** Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID
      Points to [[person.businessentity.BusinessentityRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Vendor account (identification) number. */
  accountnumber: AccountNumber,
  /** Company name. */
  name: Name,
  /** 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average */
  creditrating: Int,
  /** 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product. */
  preferredvendorstatus: Flag,
  /** 0 = Vendor no longer used. 1 = Vendor is actively used. */
  activeflag: Flag,
  /** Vendor URL. */
  purchasingwebserviceurl: Option[/* max 1024 chars */ String],
  modifieddate: TypoLocalDateTime
)

object VendorRow {
  implicit val reads: Reads[VendorRow] = Reads[VendorRow](json => JsResult.fromTry(
      Try(
        VendorRow(
          businessentityid = json.\("businessentityid").as[BusinessentityId],
          accountnumber = json.\("accountnumber").as[AccountNumber],
          name = json.\("name").as[Name],
          creditrating = json.\("creditrating").as[Int],
          preferredvendorstatus = json.\("preferredvendorstatus").as[Flag],
          activeflag = json.\("activeflag").as[Flag],
          purchasingwebserviceurl = json.\("purchasingwebserviceurl").toOption.map(_.as[/* max 1024 chars */ String]),
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[VendorRow] = RowParser[VendorRow] { row =>
    Success(
      VendorRow(
        businessentityid = row[BusinessentityId](idx + 0),
        accountnumber = row[AccountNumber](idx + 1),
        name = row[Name](idx + 2),
        creditrating = row[Int](idx + 3),
        preferredvendorstatus = row[Flag](idx + 4),
        activeflag = row[Flag](idx + 5),
        purchasingwebserviceurl = row[Option[/* max 1024 chars */ String]](idx + 6),
        modifieddate = row[TypoLocalDateTime](idx + 7)
      )
    )
  }
  implicit val writes: OWrites[VendorRow] = OWrites[VendorRow](o =>
    new JsObject(ListMap[String, JsValue](
      "businessentityid" -> Json.toJson(o.businessentityid),
      "accountnumber" -> Json.toJson(o.accountnumber),
      "name" -> Json.toJson(o.name),
      "creditrating" -> Json.toJson(o.creditrating),
      "preferredvendorstatus" -> Json.toJson(o.preferredvendorstatus),
      "activeflag" -> Json.toJson(o.activeflag),
      "purchasingwebserviceurl" -> Json.toJson(o.purchasingwebserviceurl),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
