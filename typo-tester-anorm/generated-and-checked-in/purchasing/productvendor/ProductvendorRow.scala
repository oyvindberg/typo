/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package productvendor

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

case class ProductvendorRow(
  /** Primary key. Foreign key to Product.ProductID.
      Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  /** Primary key. Foreign key to Vendor.BusinessEntityID.
      Points to [[vendor.VendorRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** The average span of time (in days) between placing an order with the vendor and receiving the purchased product. */
  averageleadtime: Int,
  /** The vendor's usual selling price. */
  standardprice: BigDecimal,
  /** The selling price when last purchased. */
  lastreceiptcost: Option[BigDecimal],
  /** Date the product was last received by the vendor. */
  lastreceiptdate: Option[TypoLocalDateTime],
  /** The maximum quantity that should be ordered. */
  minorderqty: Int,
  /** The minimum quantity that should be ordered. */
  maxorderqty: Int,
  /** The quantity currently on order. */
  onorderqty: Option[Int],
  /** The product's unit of measure.
      Points to [[production.unitmeasure.UnitmeasureRow.unitmeasurecode]] */
  unitmeasurecode: UnitmeasureId,
  modifieddate: TypoLocalDateTime
){
   val compositeId: ProductvendorId = ProductvendorId(productid, businessentityid)
 }

object ProductvendorRow {
  implicit val reads: Reads[ProductvendorRow] = Reads[ProductvendorRow](json => JsResult.fromTry(
      Try(
        ProductvendorRow(
          productid = json.\("productid").as[ProductId],
          businessentityid = json.\("businessentityid").as[BusinessentityId],
          averageleadtime = json.\("averageleadtime").as[Int],
          standardprice = json.\("standardprice").as[BigDecimal],
          lastreceiptcost = json.\("lastreceiptcost").toOption.map(_.as[BigDecimal]),
          lastreceiptdate = json.\("lastreceiptdate").toOption.map(_.as[TypoLocalDateTime]),
          minorderqty = json.\("minorderqty").as[Int],
          maxorderqty = json.\("maxorderqty").as[Int],
          onorderqty = json.\("onorderqty").toOption.map(_.as[Int]),
          unitmeasurecode = json.\("unitmeasurecode").as[UnitmeasureId],
          modifieddate = json.\("modifieddate").as[TypoLocalDateTime]
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[ProductvendorRow] = RowParser[ProductvendorRow] { row =>
    Success(
      ProductvendorRow(
        productid = row[ProductId](idx + 0),
        businessentityid = row[BusinessentityId](idx + 1),
        averageleadtime = row[Int](idx + 2),
        standardprice = row[BigDecimal](idx + 3),
        lastreceiptcost = row[Option[BigDecimal]](idx + 4),
        lastreceiptdate = row[Option[TypoLocalDateTime]](idx + 5),
        minorderqty = row[Int](idx + 6),
        maxorderqty = row[Int](idx + 7),
        onorderqty = row[Option[Int]](idx + 8),
        unitmeasurecode = row[UnitmeasureId](idx + 9),
        modifieddate = row[TypoLocalDateTime](idx + 10)
      )
    )
  }
  implicit val writes: OWrites[ProductvendorRow] = OWrites[ProductvendorRow](o =>
    new JsObject(ListMap[String, JsValue](
      "productid" -> Json.toJson(o.productid),
      "businessentityid" -> Json.toJson(o.businessentityid),
      "averageleadtime" -> Json.toJson(o.averageleadtime),
      "standardprice" -> Json.toJson(o.standardprice),
      "lastreceiptcost" -> Json.toJson(o.lastreceiptcost),
      "lastreceiptdate" -> Json.toJson(o.lastreceiptdate),
      "minorderqty" -> Json.toJson(o.minorderqty),
      "maxorderqty" -> Json.toJson(o.maxorderqty),
      "onorderqty" -> Json.toJson(o.onorderqty),
      "unitmeasurecode" -> Json.toJson(o.unitmeasurecode),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
