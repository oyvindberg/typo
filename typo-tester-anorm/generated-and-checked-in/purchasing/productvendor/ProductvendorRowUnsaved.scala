/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package productvendor

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try

/** This class corresponds to a row in table `purchasing.productvendor` which has not been persisted yet */
case class ProductvendorRowUnsaved(
  /** Primary key. Foreign key to Product.ProductID.
      Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  /** Primary key. Foreign key to Vendor.BusinessEntityID.
      Points to [[vendor.VendorRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** The average span of time (in days) between placing an order with the vendor and receiving the purchased product. */
  averageleadtime: Int,
  /** The vendor's usual selling price. */
  standardprice: BigDecimal,
  /** The selling price when last purchased. */
  lastreceiptcost: Option[BigDecimal],
  /** Date the product was last received by the vendor. */
  lastreceiptdate: Option[TypoLocalDateTime],
  /** The maximum quantity that should be ordered. */
  minorderqty: Int,
  /** The minimum quantity that should be ordered. */
  maxorderqty: Int,
  /** The quantity currently on order. */
  onorderqty: Option[Int],
  /** The product's unit of measure.
      Points to [[production.unitmeasure.UnitmeasureRow.unitmeasurecode]] */
  unitmeasurecode: UnitmeasureId,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(modifieddateDefault: => TypoLocalDateTime): ProductvendorRow =
    ProductvendorRow(
      productid = productid,
      businessentityid = businessentityid,
      averageleadtime = averageleadtime,
      standardprice = standardprice,
      lastreceiptcost = lastreceiptcost,
      lastreceiptdate = lastreceiptdate,
      minorderqty = minorderqty,
      maxorderqty = maxorderqty,
      onorderqty = onorderqty,
      unitmeasurecode = unitmeasurecode,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductvendorRowUnsaved {
  implicit val reads: Reads[ProductvendorRowUnsaved] = Reads[ProductvendorRowUnsaved](json => JsResult.fromTry(
      Try(
        ProductvendorRowUnsaved(
          productid = json.\("productid").as[ProductId],
          businessentityid = json.\("businessentityid").as[BusinessentityId],
          averageleadtime = json.\("averageleadtime").as[Int],
          standardprice = json.\("standardprice").as[BigDecimal],
          lastreceiptcost = json.\("lastreceiptcost").toOption.map(_.as[BigDecimal]),
          lastreceiptdate = json.\("lastreceiptdate").toOption.map(_.as[TypoLocalDateTime]),
          minorderqty = json.\("minorderqty").as[Int],
          maxorderqty = json.\("maxorderqty").as[Int],
          onorderqty = json.\("onorderqty").toOption.map(_.as[Int]),
          unitmeasurecode = json.\("unitmeasurecode").as[UnitmeasureId],
          modifieddate = json.\("modifieddate").as[Defaulted[TypoLocalDateTime]]
        )
      )
    ),
  )
  implicit val writes: OWrites[ProductvendorRowUnsaved] = OWrites[ProductvendorRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "productid" -> Json.toJson(o.productid),
      "businessentityid" -> Json.toJson(o.businessentityid),
      "averageleadtime" -> Json.toJson(o.averageleadtime),
      "standardprice" -> Json.toJson(o.standardprice),
      "lastreceiptcost" -> Json.toJson(o.lastreceiptcost),
      "lastreceiptdate" -> Json.toJson(o.lastreceiptdate),
      "minorderqty" -> Json.toJson(o.minorderqty),
      "maxorderqty" -> Json.toJson(o.maxorderqty),
      "onorderqty" -> Json.toJson(o.onorderqty),
      "unitmeasurecode" -> Json.toJson(o.unitmeasurecode),
      "modifieddate" -> Json.toJson(o.modifieddate)
    ))
  )
}
