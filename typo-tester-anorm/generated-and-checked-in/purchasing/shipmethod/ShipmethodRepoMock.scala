/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package shipmethod

import java.sql.Connection

class ShipmethodRepoMock(toRow: Function1[ShipmethodRowUnsaved, ShipmethodRow],
                         map: scala.collection.mutable.Map[ShipmethodId, ShipmethodRow] = scala.collection.mutable.Map.empty) extends ShipmethodRepo {
  override def delete(shipmethodid: ShipmethodId)(implicit c: Connection): Boolean = {
    map.remove(shipmethodid).isDefined
  }
  override def insert(unsaved: ShipmethodRow)(implicit c: Connection): ShipmethodRow = {
    if (map.contains(unsaved.shipmethodid))
      sys.error(s"id ${unsaved.shipmethodid} already exists")
    else
      map.put(unsaved.shipmethodid, unsaved)
    unsaved
  }
  override def insert(unsaved: ShipmethodRowUnsaved)(implicit c: Connection): ShipmethodRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[ShipmethodRow] = {
    map.values.toList
  }
  override def selectById(shipmethodid: ShipmethodId)(implicit c: Connection): Option[ShipmethodRow] = {
    map.get(shipmethodid)
  }
  override def selectByIds(shipmethodids: Array[ShipmethodId])(implicit c: Connection): List[ShipmethodRow] = {
    shipmethodids.flatMap(map.get).toList
  }
  override def update(row: ShipmethodRow)(implicit c: Connection): Boolean = {
    map.get(row.shipmethodid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.shipmethodid, row)
        true
      case None => false
    }
  }
  override def upsert(unsaved: ShipmethodRow)(implicit c: Connection): ShipmethodRow = {
    map.put(unsaved.shipmethodid, unsaved)
    unsaved
  }
}
