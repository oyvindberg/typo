/** File has been automatically generated by `typo`.
  *
  * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
  */
package adventureworks.userdefined

import adventureworks.Text
import typo.dsl.{Bijection, PGType}
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.{JdbcDecoder, JdbcEncoder}
import zio.json.*

/** Type for the primary key of table `sales.creditcard` */
case class CustomCreditcardId(value: Int) extends AnyVal
object CustomCreditcardId {
  implicit lazy val arraySetter: Setter[Array[CustomCreditcardId]] = adventureworks.IntArraySetter.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[CustomCreditcardId, Int] = Bijection[CustomCreditcardId, Int](_.value)(CustomCreditcardId.apply)
  implicit lazy val jsonDecoder: JsonDecoder[CustomCreditcardId] = JsonDecoder.int.map(CustomCreditcardId.apply)
  implicit lazy val jsonEncoder: JsonEncoder[CustomCreditcardId] = JsonEncoder.int.contramap(_.value)
  implicit lazy val jdbcDecoder: JdbcDecoder[CustomCreditcardId] = JdbcDecoder.intDecoder.map(CustomCreditcardId.apply)
  implicit lazy val jdbcEncoder: JdbcEncoder[CustomCreditcardId] = JdbcEncoder.intEncoder.contramap(_.value)
  implicit lazy val ordering: Ordering[CustomCreditcardId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: PGType[CustomCreditcardId] = PGType.PGTypeInt.as
  implicit lazy val setter: Setter[CustomCreditcardId] = Setter.intSetter.contramap(_.value)
  implicit lazy val text: Text[CustomCreditcardId] = Text.intInstance.contramap(_.value)
}
