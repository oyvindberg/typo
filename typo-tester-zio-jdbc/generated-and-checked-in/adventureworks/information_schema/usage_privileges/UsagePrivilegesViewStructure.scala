/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package usage_privileges

import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class UsagePrivilegesViewStructure[Row](val prefix: Option[String], val extract: Row => UsagePrivilegesViewRow, val merge: (Row, UsagePrivilegesViewRow) => Row)
  extends Relation[UsagePrivilegesViewFields, UsagePrivilegesViewRow, Row]
    with UsagePrivilegesViewFields[Row] { outer =>

  override val grantor = new OptField[String, Row](prefix, "grantor", None, None)(x => extract(x).grantor, (row, value) => merge(row, extract(row).copy(grantor = value)))
  override val grantee = new OptField[String, Row](prefix, "grantee", None, None)(x => extract(x).grantee, (row, value) => merge(row, extract(row).copy(grantee = value)))
  override val objectCatalog = new OptField[String, Row](prefix, "object_catalog", None, None)(x => extract(x).objectCatalog, (row, value) => merge(row, extract(row).copy(objectCatalog = value)))
  override val objectSchema = new OptField[String, Row](prefix, "object_schema", None, None)(x => extract(x).objectSchema, (row, value) => merge(row, extract(row).copy(objectSchema = value)))
  override val objectName = new OptField[String, Row](prefix, "object_name", None, None)(x => extract(x).objectName, (row, value) => merge(row, extract(row).copy(objectName = value)))
  override val objectType = new OptField[String, Row](prefix, "object_type", None, None)(x => extract(x).objectType, (row, value) => merge(row, extract(row).copy(objectType = value)))
  override val privilegeType = new OptField[String, Row](prefix, "privilege_type", None, None)(x => extract(x).privilegeType, (row, value) => merge(row, extract(row).copy(privilegeType = value)))
  override val isGrantable = new OptField[/* max 3 chars */ String, Row](prefix, "is_grantable", None, None)(x => extract(x).isGrantable, (row, value) => merge(row, extract(row).copy(isGrantable = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](grantor, grantee, objectCatalog, objectSchema, objectName, objectType, privilegeType, isGrantable)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => UsagePrivilegesViewRow, merge: (NewRow, UsagePrivilegesViewRow) => NewRow): UsagePrivilegesViewStructure[NewRow] =
    new UsagePrivilegesViewStructure(prefix, extract, merge)
}
