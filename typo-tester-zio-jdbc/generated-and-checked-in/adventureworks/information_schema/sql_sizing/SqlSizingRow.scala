/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sql_sizing

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class SqlSizingRow(
  sizingId: Option[CardinalNumber],
  sizingName: Option[CharacterData],
  supportedValue: Option[CardinalNumber],
  comments: Option[CharacterData]
)

object SqlSizingRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[SqlSizingRow] = new JdbcDecoder[SqlSizingRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, SqlSizingRow) =
      columIndex + 3 ->
        SqlSizingRow(
          sizingId = JdbcDecoder.optionDecoder(CardinalNumber.jdbcDecoder).unsafeDecode(columIndex + 0, rs)._2,
          sizingName = JdbcDecoder.optionDecoder(CharacterData.jdbcDecoder).unsafeDecode(columIndex + 1, rs)._2,
          supportedValue = JdbcDecoder.optionDecoder(CardinalNumber.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          comments = JdbcDecoder.optionDecoder(CharacterData.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[SqlSizingRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val sizingId = jsonObj.get("sizing_id").fold[Either[String, Option[CardinalNumber]]](Right(None))(_.as(JsonDecoder.option(CardinalNumber.jsonDecoder)))
    val sizingName = jsonObj.get("sizing_name").fold[Either[String, Option[CharacterData]]](Right(None))(_.as(JsonDecoder.option(CharacterData.jsonDecoder)))
    val supportedValue = jsonObj.get("supported_value").fold[Either[String, Option[CardinalNumber]]](Right(None))(_.as(JsonDecoder.option(CardinalNumber.jsonDecoder)))
    val comments = jsonObj.get("comments").fold[Either[String, Option[CharacterData]]](Right(None))(_.as(JsonDecoder.option(CharacterData.jsonDecoder)))
    if (sizingId.isRight && sizingName.isRight && supportedValue.isRight && comments.isRight)
      Right(SqlSizingRow(sizingId = sizingId.toOption.get, sizingName = sizingName.toOption.get, supportedValue = supportedValue.toOption.get, comments = comments.toOption.get))
    else Left(List[Either[String, Any]](sizingId, sizingName, supportedValue, comments).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[SqlSizingRow] = new JsonEncoder[SqlSizingRow] {
    override def unsafeEncode(a: SqlSizingRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""sizing_id":""")
      JsonEncoder.option(CardinalNumber.jsonEncoder).unsafeEncode(a.sizingId, indent, out)
      out.write(",")
      out.write(""""sizing_name":""")
      JsonEncoder.option(CharacterData.jsonEncoder).unsafeEncode(a.sizingName, indent, out)
      out.write(",")
      out.write(""""supported_value":""")
      JsonEncoder.option(CardinalNumber.jsonEncoder).unsafeEncode(a.supportedValue, indent, out)
      out.write(",")
      out.write(""""comments":""")
      JsonEncoder.option(CharacterData.jsonEncoder).unsafeEncode(a.comments, indent, out)
      out.write("}")
    }
  }
}
