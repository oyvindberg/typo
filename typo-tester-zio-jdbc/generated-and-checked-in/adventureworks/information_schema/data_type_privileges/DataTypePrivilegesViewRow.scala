/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package data_type_privileges

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class DataTypePrivilegesViewRow(
  objectCatalog: /* nullability unknown */ Option[String],
  objectSchema: /* nullability unknown */ Option[String],
  objectName: /* nullability unknown */ Option[String],
  objectType: /* nullability unknown */ Option[String],
  dtdIdentifier: /* nullability unknown */ Option[String]
)

object DataTypePrivilegesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[DataTypePrivilegesViewRow] = new JdbcDecoder[DataTypePrivilegesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, DataTypePrivilegesViewRow) =
      columIndex + 4 ->
        DataTypePrivilegesViewRow(
          objectCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          objectSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          objectName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          objectType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          dtdIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[DataTypePrivilegesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val objectCatalog = jsonObj.get("object_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val objectSchema = jsonObj.get("object_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val objectName = jsonObj.get("object_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val objectType = jsonObj.get("object_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val dtdIdentifier = jsonObj.get("dtd_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (objectCatalog.isRight && objectSchema.isRight && objectName.isRight && objectType.isRight && dtdIdentifier.isRight)
      Right(DataTypePrivilegesViewRow(objectCatalog = objectCatalog.toOption.get, objectSchema = objectSchema.toOption.get, objectName = objectName.toOption.get, objectType = objectType.toOption.get, dtdIdentifier = dtdIdentifier.toOption.get))
    else Left(List[Either[String, Any]](objectCatalog, objectSchema, objectName, objectType, dtdIdentifier).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[DataTypePrivilegesViewRow] = new JsonEncoder[DataTypePrivilegesViewRow] {
    override def unsafeEncode(a: DataTypePrivilegesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""object_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objectCatalog, indent, out)
      out.write(",")
      out.write(""""object_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objectSchema, indent, out)
      out.write(",")
      out.write(""""object_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objectName, indent, out)
      out.write(",")
      out.write(""""object_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objectType, indent, out)
      out.write(",")
      out.write(""""dtd_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.dtdIdentifier, indent, out)
      out.write("}")
    }
  }
}
