/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package character_sets

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class CharacterSetsViewRow(
  characterSetCatalog: /* nullability unknown */ Option[String],
  characterSetSchema: /* nullability unknown */ Option[String],
  characterSetName: /* nullability unknown */ Option[String],
  characterRepertoire: /* nullability unknown */ Option[String],
  formOfUse: /* nullability unknown */ Option[String],
  defaultCollateCatalog: /* nullability unknown */ Option[String],
  defaultCollateSchema: /* nullability unknown */ Option[String],
  defaultCollateName: /* nullability unknown */ Option[String]
)

object CharacterSetsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[CharacterSetsViewRow] = new JdbcDecoder[CharacterSetsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, CharacterSetsViewRow) =
      columIndex + 7 ->
        CharacterSetsViewRow(
          characterSetCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          characterSetSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          characterSetName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          characterRepertoire = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          formOfUse = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          defaultCollateCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          defaultCollateSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          defaultCollateName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[CharacterSetsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val characterSetCatalog = jsonObj.get("character_set_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val characterSetSchema = jsonObj.get("character_set_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val characterSetName = jsonObj.get("character_set_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val characterRepertoire = jsonObj.get("character_repertoire").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val formOfUse = jsonObj.get("form_of_use").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val defaultCollateCatalog = jsonObj.get("default_collate_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val defaultCollateSchema = jsonObj.get("default_collate_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val defaultCollateName = jsonObj.get("default_collate_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (characterSetCatalog.isRight && characterSetSchema.isRight && characterSetName.isRight && characterRepertoire.isRight && formOfUse.isRight && defaultCollateCatalog.isRight && defaultCollateSchema.isRight && defaultCollateName.isRight)
      Right(CharacterSetsViewRow(characterSetCatalog = characterSetCatalog.toOption.get, characterSetSchema = characterSetSchema.toOption.get, characterSetName = characterSetName.toOption.get, characterRepertoire = characterRepertoire.toOption.get, formOfUse = formOfUse.toOption.get, defaultCollateCatalog = defaultCollateCatalog.toOption.get, defaultCollateSchema = defaultCollateSchema.toOption.get, defaultCollateName = defaultCollateName.toOption.get))
    else Left(List[Either[String, Any]](characterSetCatalog, characterSetSchema, characterSetName, characterRepertoire, formOfUse, defaultCollateCatalog, defaultCollateSchema, defaultCollateName).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[CharacterSetsViewRow] = new JsonEncoder[CharacterSetsViewRow] {
    override def unsafeEncode(a: CharacterSetsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""character_set_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterSetCatalog, indent, out)
      out.write(",")
      out.write(""""character_set_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterSetSchema, indent, out)
      out.write(",")
      out.write(""""character_set_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterSetName, indent, out)
      out.write(",")
      out.write(""""character_repertoire":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterRepertoire, indent, out)
      out.write(",")
      out.write(""""form_of_use":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.formOfUse, indent, out)
      out.write(",")
      out.write(""""default_collate_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.defaultCollateCatalog, indent, out)
      out.write(",")
      out.write(""""default_collate_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.defaultCollateSchema, indent, out)
      out.write(",")
      out.write(""""default_collate_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.defaultCollateName, indent, out)
      out.write("}")
    }
  }
}
