/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package role_usage_grants

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class RoleUsageGrantsViewRow(
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.grantor]] */
  grantor: Option[/* nullability unknown */ String],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.grantee]] */
  grantee: Option[/* nullability unknown */ String],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.objectCatalog]] */
  objectCatalog: Option[/* nullability unknown */ String],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.objectSchema]] */
  objectSchema: Option[/* nullability unknown */ String],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.objectName]] */
  objectName: Option[/* nullability unknown */ String],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.objectType]] */
  objectType: Option[/* nullability unknown */ String],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.privilegeType]] */
  privilegeType: Option[/* nullability unknown */ String],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.isGrantable]] */
  isGrantable: Option[/* nullability unknown */ /* max 3 chars */ String]
)

object RoleUsageGrantsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[RoleUsageGrantsViewRow] = new JdbcDecoder[RoleUsageGrantsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, RoleUsageGrantsViewRow) =
      columIndex + 7 ->
        RoleUsageGrantsViewRow(
          grantor = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          grantee = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          objectCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          objectSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          objectName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          objectType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          privilegeType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          isGrantable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[RoleUsageGrantsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val grantor = jsonObj.get("grantor").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val grantee = jsonObj.get("grantee").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val objectCatalog = jsonObj.get("object_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val objectSchema = jsonObj.get("object_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val objectName = jsonObj.get("object_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val objectType = jsonObj.get("object_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val privilegeType = jsonObj.get("privilege_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isGrantable = jsonObj.get("is_grantable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (grantor.isRight && grantee.isRight && objectCatalog.isRight && objectSchema.isRight && objectName.isRight && objectType.isRight && privilegeType.isRight && isGrantable.isRight)
      Right(RoleUsageGrantsViewRow(grantor = grantor.toOption.get, grantee = grantee.toOption.get, objectCatalog = objectCatalog.toOption.get, objectSchema = objectSchema.toOption.get, objectName = objectName.toOption.get, objectType = objectType.toOption.get, privilegeType = privilegeType.toOption.get, isGrantable = isGrantable.toOption.get))
    else Left(List[Either[String, Any]](grantor, grantee, objectCatalog, objectSchema, objectName, objectType, privilegeType, isGrantable).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[RoleUsageGrantsViewRow] = new JsonEncoder[RoleUsageGrantsViewRow] {
    override def unsafeEncode(a: RoleUsageGrantsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""grantor":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.grantor, indent, out)
      out.write(",")
      out.write(""""grantee":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.grantee, indent, out)
      out.write(",")
      out.write(""""object_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objectCatalog, indent, out)
      out.write(",")
      out.write(""""object_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objectSchema, indent, out)
      out.write(",")
      out.write(""""object_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objectName, indent, out)
      out.write(",")
      out.write(""""object_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objectType, indent, out)
      out.write(",")
      out.write(""""privilege_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.privilegeType, indent, out)
      out.write(",")
      out.write(""""is_grantable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isGrantable, indent, out)
      out.write("}")
    }
  }
}
