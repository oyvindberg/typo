/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_data_wrappers

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class ForeignDataWrappersViewRow(
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperCatalog]] */
  foreignDataWrapperCatalog: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperName]] */
  foreignDataWrapperName: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.authorizationIdentifier]] */
  authorizationIdentifier: Option[/* nullability unknown */ String],
  libraryName: /* nullability unknown */ Option[String],
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperLanguage]] */
  foreignDataWrapperLanguage: Option[/* nullability unknown */ String]
)

object ForeignDataWrappersViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[ForeignDataWrappersViewRow] = new JdbcDecoder[ForeignDataWrappersViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ForeignDataWrappersViewRow) =
      columIndex + 4 ->
        ForeignDataWrappersViewRow(
          foreignDataWrapperCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          foreignDataWrapperName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          authorizationIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          libraryName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          foreignDataWrapperLanguage = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ForeignDataWrappersViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val foreignDataWrapperCatalog = jsonObj.get("foreign_data_wrapper_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignDataWrapperName = jsonObj.get("foreign_data_wrapper_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val authorizationIdentifier = jsonObj.get("authorization_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val libraryName = jsonObj.get("library_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignDataWrapperLanguage = jsonObj.get("foreign_data_wrapper_language").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (foreignDataWrapperCatalog.isRight && foreignDataWrapperName.isRight && authorizationIdentifier.isRight && libraryName.isRight && foreignDataWrapperLanguage.isRight)
      Right(ForeignDataWrappersViewRow(foreignDataWrapperCatalog = foreignDataWrapperCatalog.toOption.get, foreignDataWrapperName = foreignDataWrapperName.toOption.get, authorizationIdentifier = authorizationIdentifier.toOption.get, libraryName = libraryName.toOption.get, foreignDataWrapperLanguage = foreignDataWrapperLanguage.toOption.get))
    else Left(List[Either[String, Any]](foreignDataWrapperCatalog, foreignDataWrapperName, authorizationIdentifier, libraryName, foreignDataWrapperLanguage).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ForeignDataWrappersViewRow] = new JsonEncoder[ForeignDataWrappersViewRow] {
    override def unsafeEncode(a: ForeignDataWrappersViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""foreign_data_wrapper_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperCatalog, indent, out)
      out.write(",")
      out.write(""""foreign_data_wrapper_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperName, indent, out)
      out.write(",")
      out.write(""""authorization_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.authorizationIdentifier, indent, out)
      out.write(",")
      out.write(""""library_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.libraryName, indent, out)
      out.write(",")
      out.write(""""foreign_data_wrapper_language":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperLanguage, indent, out)
      out.write("}")
    }
  }
}
