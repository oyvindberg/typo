/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import typo.dsl.Bijection
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Domain `information_schema.yes_or_no`
  * Constraint: CHECK (((VALUE)::text = ANY ((ARRAY['YES'::character varying, 'NO'::character varying])::text[])))
  */
case class YesOrNo(value: String) extends AnyVal
object YesOrNo {
  implicit lazy val bijection: Bijection[YesOrNo, String] = Bijection[YesOrNo, String](_.value)(YesOrNo.apply)
  implicit lazy val decoder: JsonDecoder[YesOrNo] = JsonDecoder.string.map(YesOrNo.apply)
  implicit lazy val encoder: JsonEncoder[YesOrNo] = JsonEncoder.string.contramap(_.value)
  implicit lazy val ordering: Ordering[YesOrNo] = Ordering.by(_.value)
}