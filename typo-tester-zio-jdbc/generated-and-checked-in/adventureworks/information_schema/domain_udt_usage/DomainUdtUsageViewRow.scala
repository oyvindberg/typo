/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package domain_udt_usage

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class DomainUdtUsageViewRow(
  udtCatalog: /* nullability unknown */ Option[String],
  udtSchema: /* nullability unknown */ Option[String],
  udtName: /* nullability unknown */ Option[String],
  domainCatalog: /* nullability unknown */ Option[String],
  domainSchema: /* nullability unknown */ Option[String],
  domainName: /* nullability unknown */ Option[String]
)

object DomainUdtUsageViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[DomainUdtUsageViewRow] = new JdbcDecoder[DomainUdtUsageViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, DomainUdtUsageViewRow) =
      columIndex + 5 ->
        DomainUdtUsageViewRow(
          udtCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          udtSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          udtName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          domainCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          domainSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          domainName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[DomainUdtUsageViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val udtCatalog = jsonObj.get("udt_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val udtSchema = jsonObj.get("udt_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val udtName = jsonObj.get("udt_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val domainCatalog = jsonObj.get("domain_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val domainSchema = jsonObj.get("domain_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val domainName = jsonObj.get("domain_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (udtCatalog.isRight && udtSchema.isRight && udtName.isRight && domainCatalog.isRight && domainSchema.isRight && domainName.isRight)
      Right(DomainUdtUsageViewRow(udtCatalog = udtCatalog.toOption.get, udtSchema = udtSchema.toOption.get, udtName = udtName.toOption.get, domainCatalog = domainCatalog.toOption.get, domainSchema = domainSchema.toOption.get, domainName = domainName.toOption.get))
    else Left(List[Either[String, Any]](udtCatalog, udtSchema, udtName, domainCatalog, domainSchema, domainName).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[DomainUdtUsageViewRow] = new JsonEncoder[DomainUdtUsageViewRow] {
    override def unsafeEncode(a: DomainUdtUsageViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""udt_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.udtCatalog, indent, out)
      out.write(",")
      out.write(""""udt_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.udtSchema, indent, out)
      out.write(",")
      out.write(""""udt_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.udtName, indent, out)
      out.write(",")
      out.write(""""domain_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.domainCatalog, indent, out)
      out.write(",")
      out.write(""""domain_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.domainSchema, indent, out)
      out.write(",")
      out.write(""""domain_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.domainName, indent, out)
      out.write("}")
    }
  }
}
