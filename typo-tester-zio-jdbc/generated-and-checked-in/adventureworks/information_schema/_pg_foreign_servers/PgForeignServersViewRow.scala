/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_servers`

import adventureworks.pg_catalog.pg_foreign_server.PgForeignServerId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgForeignServersViewRow(
  /** Points to [[pg_catalog.pg_foreign_server.PgForeignServerRow.oid]] */
  oid: PgForeignServerId,
  /** Points to [[pg_catalog.pg_foreign_server.PgForeignServerRow.srvoptions]] */
  srvoptions: Option[Array[String]],
  foreignServerCatalog: /* nullability unknown */ Option[String],
  foreignServerName: /* nullability unknown */ Option[String],
  foreignDataWrapperCatalog: /* nullability unknown */ Option[String],
  foreignDataWrapperName: /* nullability unknown */ Option[String],
  foreignServerType: /* nullability unknown */ Option[String],
  foreignServerVersion: /* nullability unknown */ Option[String],
  authorizationIdentifier: /* nullability unknown */ Option[String]
)

object PgForeignServersViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgForeignServersViewRow] = new JdbcDecoder[PgForeignServersViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgForeignServersViewRow) =
      columIndex + 8 ->
        PgForeignServersViewRow(
          oid = PgForeignServerId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          srvoptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 1, rs)._2,
          foreignServerCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          foreignServerName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          foreignDataWrapperCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          foreignDataWrapperName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          foreignServerType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          foreignServerVersion = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          authorizationIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgForeignServersViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgForeignServerId.jsonDecoder))
    val srvoptions = jsonObj.get("srvoptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val foreignServerCatalog = jsonObj.get("foreign_server_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignServerName = jsonObj.get("foreign_server_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignDataWrapperCatalog = jsonObj.get("foreign_data_wrapper_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignDataWrapperName = jsonObj.get("foreign_data_wrapper_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignServerType = jsonObj.get("foreign_server_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignServerVersion = jsonObj.get("foreign_server_version").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val authorizationIdentifier = jsonObj.get("authorization_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (oid.isRight && srvoptions.isRight && foreignServerCatalog.isRight && foreignServerName.isRight && foreignDataWrapperCatalog.isRight && foreignDataWrapperName.isRight && foreignServerType.isRight && foreignServerVersion.isRight && authorizationIdentifier.isRight)
      Right(PgForeignServersViewRow(oid = oid.toOption.get, srvoptions = srvoptions.toOption.get, foreignServerCatalog = foreignServerCatalog.toOption.get, foreignServerName = foreignServerName.toOption.get, foreignDataWrapperCatalog = foreignDataWrapperCatalog.toOption.get, foreignDataWrapperName = foreignDataWrapperName.toOption.get, foreignServerType = foreignServerType.toOption.get, foreignServerVersion = foreignServerVersion.toOption.get, authorizationIdentifier = authorizationIdentifier.toOption.get))
    else Left(List[Either[String, Any]](oid, srvoptions, foreignServerCatalog, foreignServerName, foreignDataWrapperCatalog, foreignDataWrapperName, foreignServerType, foreignServerVersion, authorizationIdentifier).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgForeignServersViewRow] = new JsonEncoder[PgForeignServersViewRow] {
    override def unsafeEncode(a: PgForeignServersViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgForeignServerId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""srvoptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.srvoptions, indent, out)
      out.write(",")
      out.write(""""foreign_server_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerCatalog, indent, out)
      out.write(",")
      out.write(""""foreign_server_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerName, indent, out)
      out.write(",")
      out.write(""""foreign_data_wrapper_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperCatalog, indent, out)
      out.write(",")
      out.write(""""foreign_data_wrapper_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperName, indent, out)
      out.write(",")
      out.write(""""foreign_server_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerType, indent, out)
      out.write(",")
      out.write(""""foreign_server_version":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerVersion, indent, out)
      out.write(",")
      out.write(""""authorization_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.authorizationIdentifier, indent, out)
      out.write("}")
    }
  }
}
