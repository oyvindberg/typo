/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package role_column_grants

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class RoleColumnGrantsViewRow(
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.grantor]] */
  grantor: Option[/* nullability unknown */ String],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.grantee]] */
  grantee: Option[/* nullability unknown */ String],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.tableCatalog]] */
  tableCatalog: Option[/* nullability unknown */ String],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.tableSchema]] */
  tableSchema: Option[/* nullability unknown */ String],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.tableName]] */
  tableName: Option[/* nullability unknown */ String],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.columnName]] */
  columnName: Option[/* nullability unknown */ String],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.privilegeType]] */
  privilegeType: Option[/* nullability unknown */ String],
  /** Points to [[column_privileges.ColumnPrivilegesViewRow.isGrantable]] */
  isGrantable: Option[/* nullability unknown */ /* max 3 chars */ String]
)

object RoleColumnGrantsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[RoleColumnGrantsViewRow] = new JdbcDecoder[RoleColumnGrantsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, RoleColumnGrantsViewRow) =
      columIndex + 7 ->
        RoleColumnGrantsViewRow(
          grantor = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          grantee = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          tableCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          tableSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          tableName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          columnName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          privilegeType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          isGrantable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[RoleColumnGrantsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val grantor = jsonObj.get("grantor").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val grantee = jsonObj.get("grantee").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableCatalog = jsonObj.get("table_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableSchema = jsonObj.get("table_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableName = jsonObj.get("table_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val columnName = jsonObj.get("column_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val privilegeType = jsonObj.get("privilege_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isGrantable = jsonObj.get("is_grantable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (grantor.isRight && grantee.isRight && tableCatalog.isRight && tableSchema.isRight && tableName.isRight && columnName.isRight && privilegeType.isRight && isGrantable.isRight)
      Right(RoleColumnGrantsViewRow(grantor = grantor.toOption.get, grantee = grantee.toOption.get, tableCatalog = tableCatalog.toOption.get, tableSchema = tableSchema.toOption.get, tableName = tableName.toOption.get, columnName = columnName.toOption.get, privilegeType = privilegeType.toOption.get, isGrantable = isGrantable.toOption.get))
    else Left(List[Either[String, Any]](grantor, grantee, tableCatalog, tableSchema, tableName, columnName, privilegeType, isGrantable).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[RoleColumnGrantsViewRow] = new JsonEncoder[RoleColumnGrantsViewRow] {
    override def unsafeEncode(a: RoleColumnGrantsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""grantor":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.grantor, indent, out)
      out.write(",")
      out.write(""""grantee":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.grantee, indent, out)
      out.write(",")
      out.write(""""table_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableCatalog, indent, out)
      out.write(",")
      out.write(""""table_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableSchema, indent, out)
      out.write(",")
      out.write(""""table_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableName, indent, out)
      out.write(",")
      out.write(""""column_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.columnName, indent, out)
      out.write(",")
      out.write(""""privilege_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.privilegeType, indent, out)
      out.write(",")
      out.write(""""is_grantable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isGrantable, indent, out)
      out.write("}")
    }
  }
}
