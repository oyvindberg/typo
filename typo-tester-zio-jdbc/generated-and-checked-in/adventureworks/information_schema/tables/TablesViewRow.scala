/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package tables

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class TablesViewRow(
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  tableType: /* nullability unknown */ Option[String],
  selfReferencingColumnName: /* nullability unknown */ Option[String],
  referenceGeneration: /* nullability unknown */ Option[String],
  userDefinedTypeCatalog: /* nullability unknown */ Option[String],
  userDefinedTypeSchema: /* nullability unknown */ Option[String],
  userDefinedTypeName: /* nullability unknown */ Option[String],
  isInsertableInto: /* nullability unknown */ Option[/* max 3 chars */ String],
  isTyped: /* nullability unknown */ Option[/* max 3 chars */ String],
  commitAction: /* nullability unknown */ Option[String]
)

object TablesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[TablesViewRow] = new JdbcDecoder[TablesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, TablesViewRow) =
      columIndex + 11 ->
        TablesViewRow(
          tableCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          tableSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          tableName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          tableType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          selfReferencingColumnName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          referenceGeneration = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          userDefinedTypeCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          userDefinedTypeSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          userDefinedTypeName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          isInsertableInto = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2,
          isTyped = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 10, rs)._2,
          commitAction = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 11, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[TablesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val tableCatalog = jsonObj.get("table_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableSchema = jsonObj.get("table_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableName = jsonObj.get("table_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableType = jsonObj.get("table_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val selfReferencingColumnName = jsonObj.get("self_referencing_column_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val referenceGeneration = jsonObj.get("reference_generation").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val userDefinedTypeCatalog = jsonObj.get("user_defined_type_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val userDefinedTypeSchema = jsonObj.get("user_defined_type_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val userDefinedTypeName = jsonObj.get("user_defined_type_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isInsertableInto = jsonObj.get("is_insertable_into").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isTyped = jsonObj.get("is_typed").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val commitAction = jsonObj.get("commit_action").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (tableCatalog.isRight && tableSchema.isRight && tableName.isRight && tableType.isRight && selfReferencingColumnName.isRight && referenceGeneration.isRight && userDefinedTypeCatalog.isRight && userDefinedTypeSchema.isRight && userDefinedTypeName.isRight && isInsertableInto.isRight && isTyped.isRight && commitAction.isRight)
      Right(TablesViewRow(tableCatalog = tableCatalog.toOption.get, tableSchema = tableSchema.toOption.get, tableName = tableName.toOption.get, tableType = tableType.toOption.get, selfReferencingColumnName = selfReferencingColumnName.toOption.get, referenceGeneration = referenceGeneration.toOption.get, userDefinedTypeCatalog = userDefinedTypeCatalog.toOption.get, userDefinedTypeSchema = userDefinedTypeSchema.toOption.get, userDefinedTypeName = userDefinedTypeName.toOption.get, isInsertableInto = isInsertableInto.toOption.get, isTyped = isTyped.toOption.get, commitAction = commitAction.toOption.get))
    else Left(List[Either[String, Any]](tableCatalog, tableSchema, tableName, tableType, selfReferencingColumnName, referenceGeneration, userDefinedTypeCatalog, userDefinedTypeSchema, userDefinedTypeName, isInsertableInto, isTyped, commitAction).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TablesViewRow] = new JsonEncoder[TablesViewRow] {
    override def unsafeEncode(a: TablesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""table_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableCatalog, indent, out)
      out.write(",")
      out.write(""""table_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableSchema, indent, out)
      out.write(",")
      out.write(""""table_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableName, indent, out)
      out.write(",")
      out.write(""""table_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableType, indent, out)
      out.write(",")
      out.write(""""self_referencing_column_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.selfReferencingColumnName, indent, out)
      out.write(",")
      out.write(""""reference_generation":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.referenceGeneration, indent, out)
      out.write(",")
      out.write(""""user_defined_type_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.userDefinedTypeCatalog, indent, out)
      out.write(",")
      out.write(""""user_defined_type_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.userDefinedTypeSchema, indent, out)
      out.write(",")
      out.write(""""user_defined_type_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.userDefinedTypeName, indent, out)
      out.write(",")
      out.write(""""is_insertable_into":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isInsertableInto, indent, out)
      out.write(",")
      out.write(""""is_typed":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isTyped, indent, out)
      out.write(",")
      out.write(""""commit_action":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.commitAction, indent, out)
      out.write("}")
    }
  }
}
