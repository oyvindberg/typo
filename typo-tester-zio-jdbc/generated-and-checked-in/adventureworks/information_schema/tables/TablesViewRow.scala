/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package tables

import zio.json.DeriveJsonDecoder
import zio.json.DeriveJsonEncoder
import zio.json.JsonDecoder

case class TablesViewRow(
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  tableType: /* nullability unknown */ Option[String],
  selfReferencingColumnName: /* nullability unknown */ Option[String],
  referenceGeneration: /* nullability unknown */ Option[String],
  userDefinedTypeCatalog: /* nullability unknown */ Option[String],
  userDefinedTypeSchema: /* nullability unknown */ Option[String],
  userDefinedTypeName: /* nullability unknown */ Option[String],
  isInsertableInto: /* nullability unknown */ Option[/* max 3 chars */ String],
  isTyped: /* nullability unknown */ Option[/* max 3 chars */ String],
  commitAction: /* nullability unknown */ Option[String]
)

object TablesViewRow {
  implicit lazy val decoder: JsonDecoder[TablesViewRow] = DeriveJsonDecoder.gen[TablesViewRow]
  implicit lazy val decoder: JsonDecoder[TablesViewRow] = DeriveJsonEncoder.gen[TablesViewRow]
}
