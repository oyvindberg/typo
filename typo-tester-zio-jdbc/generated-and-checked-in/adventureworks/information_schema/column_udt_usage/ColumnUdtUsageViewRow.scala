/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package column_udt_usage

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class ColumnUdtUsageViewRow(
  udtCatalog: /* nullability unknown */ Option[String],
  udtSchema: /* nullability unknown */ Option[String],
  udtName: /* nullability unknown */ Option[String],
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  columnName: /* nullability unknown */ Option[String]
)

object ColumnUdtUsageViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[ColumnUdtUsageViewRow] = new JdbcDecoder[ColumnUdtUsageViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ColumnUdtUsageViewRow) =
      columIndex + 6 ->
        ColumnUdtUsageViewRow(
          udtCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          udtSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          udtName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          tableCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          tableSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          tableName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          columnName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ColumnUdtUsageViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val udtCatalog = jsonObj.get("udt_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val udtSchema = jsonObj.get("udt_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val udtName = jsonObj.get("udt_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableCatalog = jsonObj.get("table_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableSchema = jsonObj.get("table_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableName = jsonObj.get("table_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val columnName = jsonObj.get("column_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (udtCatalog.isRight && udtSchema.isRight && udtName.isRight && tableCatalog.isRight && tableSchema.isRight && tableName.isRight && columnName.isRight)
      Right(ColumnUdtUsageViewRow(udtCatalog = udtCatalog.toOption.get, udtSchema = udtSchema.toOption.get, udtName = udtName.toOption.get, tableCatalog = tableCatalog.toOption.get, tableSchema = tableSchema.toOption.get, tableName = tableName.toOption.get, columnName = columnName.toOption.get))
    else Left(List[Either[String, Any]](udtCatalog, udtSchema, udtName, tableCatalog, tableSchema, tableName, columnName).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ColumnUdtUsageViewRow] = new JsonEncoder[ColumnUdtUsageViewRow] {
    override def unsafeEncode(a: ColumnUdtUsageViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""udt_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.udtCatalog, indent, out)
      out.write(",")
      out.write(""""udt_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.udtSchema, indent, out)
      out.write(",")
      out.write(""""udt_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.udtName, indent, out)
      out.write(",")
      out.write(""""table_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableCatalog, indent, out)
      out.write(",")
      out.write(""""table_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableSchema, indent, out)
      out.write(",")
      out.write(""""table_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableName, indent, out)
      out.write(",")
      out.write(""""column_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.columnName, indent, out)
      out.write("}")
    }
  }
}
