/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package view_column_usage

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class ViewColumnUsageViewRow(
  viewCatalog: /* nullability unknown */ Option[String],
  viewSchema: /* nullability unknown */ Option[String],
  viewName: /* nullability unknown */ Option[String],
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  columnName: /* nullability unknown */ Option[String]
)

object ViewColumnUsageViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[ViewColumnUsageViewRow] = new JdbcDecoder[ViewColumnUsageViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ViewColumnUsageViewRow) =
      columIndex + 6 ->
        ViewColumnUsageViewRow(
          viewCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          viewSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          viewName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          tableCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          tableSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          tableName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          columnName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ViewColumnUsageViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val viewCatalog = jsonObj.get("view_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val viewSchema = jsonObj.get("view_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val viewName = jsonObj.get("view_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableCatalog = jsonObj.get("table_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableSchema = jsonObj.get("table_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableName = jsonObj.get("table_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val columnName = jsonObj.get("column_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (viewCatalog.isRight && viewSchema.isRight && viewName.isRight && tableCatalog.isRight && tableSchema.isRight && tableName.isRight && columnName.isRight)
      Right(ViewColumnUsageViewRow(viewCatalog = viewCatalog.toOption.get, viewSchema = viewSchema.toOption.get, viewName = viewName.toOption.get, tableCatalog = tableCatalog.toOption.get, tableSchema = tableSchema.toOption.get, tableName = tableName.toOption.get, columnName = columnName.toOption.get))
    else Left(List[Either[String, Any]](viewCatalog, viewSchema, viewName, tableCatalog, tableSchema, tableName, columnName).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ViewColumnUsageViewRow] = new JsonEncoder[ViewColumnUsageViewRow] {
    override def unsafeEncode(a: ViewColumnUsageViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""view_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.viewCatalog, indent, out)
      out.write(",")
      out.write(""""view_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.viewSchema, indent, out)
      out.write(",")
      out.write(""""view_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.viewName, indent, out)
      out.write(",")
      out.write(""""table_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableCatalog, indent, out)
      out.write(",")
      out.write(""""table_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableSchema, indent, out)
      out.write(",")
      out.write(""""table_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableName, indent, out)
      out.write(",")
      out.write(""""column_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.columnName, indent, out)
      out.write("}")
    }
  }
}
