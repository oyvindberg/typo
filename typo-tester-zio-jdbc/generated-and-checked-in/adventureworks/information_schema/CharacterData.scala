/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import typo.dsl.Bijection
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Domain `information_schema.character_data`
  * No constraint
  */
case class CharacterData(value: String) extends AnyVal
object CharacterData {
  implicit lazy val bijection: Bijection[CharacterData, String] = Bijection[CharacterData, String](_.value)(CharacterData.apply)
  implicit lazy val decoder: JsonDecoder[CharacterData] = JsonDecoder.string.map(CharacterData.apply)
  implicit lazy val encoder: JsonEncoder[CharacterData] = JsonEncoder.string.contramap(_.value)
  implicit lazy val ordering: Ordering[CharacterData] = Ordering.by(_.value)
}