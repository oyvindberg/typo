/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package administrable_role_authorizations

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class AdministrableRoleAuthorizationsViewRow(
  /** Points to [[applicable_roles.ApplicableRolesViewRow.grantee]] */
  grantee: Option[/* nullability unknown */ String],
  /** Points to [[applicable_roles.ApplicableRolesViewRow.roleName]] */
  roleName: Option[/* nullability unknown */ String],
  /** Points to [[applicable_roles.ApplicableRolesViewRow.isGrantable]] */
  isGrantable: Option[/* nullability unknown */ /* max 3 chars */ String]
)

object AdministrableRoleAuthorizationsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[AdministrableRoleAuthorizationsViewRow] = new JdbcDecoder[AdministrableRoleAuthorizationsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, AdministrableRoleAuthorizationsViewRow) =
      columIndex + 2 ->
        AdministrableRoleAuthorizationsViewRow(
          grantee = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          roleName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          isGrantable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[AdministrableRoleAuthorizationsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val grantee = jsonObj.get("grantee").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val roleName = jsonObj.get("role_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isGrantable = jsonObj.get("is_grantable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (grantee.isRight && roleName.isRight && isGrantable.isRight)
      Right(AdministrableRoleAuthorizationsViewRow(grantee = grantee.toOption.get, roleName = roleName.toOption.get, isGrantable = isGrantable.toOption.get))
    else Left(List[Either[String, Any]](grantee, roleName, isGrantable).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[AdministrableRoleAuthorizationsViewRow] = new JsonEncoder[AdministrableRoleAuthorizationsViewRow] {
    override def unsafeEncode(a: AdministrableRoleAuthorizationsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""grantee":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.grantee, indent, out)
      out.write(",")
      out.write(""""role_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.roleName, indent, out)
      out.write(",")
      out.write(""""is_grantable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isGrantable, indent, out)
      out.write("}")
    }
  }
}
