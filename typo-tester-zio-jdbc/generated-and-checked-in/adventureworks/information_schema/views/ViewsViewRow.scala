/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package views

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class ViewsViewRow(
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  viewDefinition: /* nullability unknown */ Option[String],
  checkOption: /* nullability unknown */ Option[String],
  isUpdatable: /* nullability unknown */ Option[/* max 3 chars */ String],
  isInsertableInto: /* nullability unknown */ Option[/* max 3 chars */ String],
  isTriggerUpdatable: /* nullability unknown */ Option[/* max 3 chars */ String],
  isTriggerDeletable: /* nullability unknown */ Option[/* max 3 chars */ String],
  isTriggerInsertableInto: /* nullability unknown */ Option[/* max 3 chars */ String]
)

object ViewsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[ViewsViewRow] = new JdbcDecoder[ViewsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ViewsViewRow) =
      columIndex + 9 ->
        ViewsViewRow(
          tableCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          tableSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          tableName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          viewDefinition = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          checkOption = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          isUpdatable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          isInsertableInto = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          isTriggerUpdatable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          isTriggerDeletable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          isTriggerInsertableInto = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ViewsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val tableCatalog = jsonObj.get("table_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableSchema = jsonObj.get("table_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableName = jsonObj.get("table_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val viewDefinition = jsonObj.get("view_definition").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val checkOption = jsonObj.get("check_option").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isUpdatable = jsonObj.get("is_updatable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isInsertableInto = jsonObj.get("is_insertable_into").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isTriggerUpdatable = jsonObj.get("is_trigger_updatable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isTriggerDeletable = jsonObj.get("is_trigger_deletable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isTriggerInsertableInto = jsonObj.get("is_trigger_insertable_into").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (tableCatalog.isRight && tableSchema.isRight && tableName.isRight && viewDefinition.isRight && checkOption.isRight && isUpdatable.isRight && isInsertableInto.isRight && isTriggerUpdatable.isRight && isTriggerDeletable.isRight && isTriggerInsertableInto.isRight)
      Right(ViewsViewRow(tableCatalog = tableCatalog.toOption.get, tableSchema = tableSchema.toOption.get, tableName = tableName.toOption.get, viewDefinition = viewDefinition.toOption.get, checkOption = checkOption.toOption.get, isUpdatable = isUpdatable.toOption.get, isInsertableInto = isInsertableInto.toOption.get, isTriggerUpdatable = isTriggerUpdatable.toOption.get, isTriggerDeletable = isTriggerDeletable.toOption.get, isTriggerInsertableInto = isTriggerInsertableInto.toOption.get))
    else Left(List[Either[String, Any]](tableCatalog, tableSchema, tableName, viewDefinition, checkOption, isUpdatable, isInsertableInto, isTriggerUpdatable, isTriggerDeletable, isTriggerInsertableInto).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ViewsViewRow] = new JsonEncoder[ViewsViewRow] {
    override def unsafeEncode(a: ViewsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""table_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableCatalog, indent, out)
      out.write(",")
      out.write(""""table_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableSchema, indent, out)
      out.write(",")
      out.write(""""table_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableName, indent, out)
      out.write(",")
      out.write(""""view_definition":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.viewDefinition, indent, out)
      out.write(",")
      out.write(""""check_option":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.checkOption, indent, out)
      out.write(",")
      out.write(""""is_updatable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isUpdatable, indent, out)
      out.write(",")
      out.write(""""is_insertable_into":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isInsertableInto, indent, out)
      out.write(",")
      out.write(""""is_trigger_updatable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isTriggerUpdatable, indent, out)
      out.write(",")
      out.write(""""is_trigger_deletable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isTriggerDeletable, indent, out)
      out.write(",")
      out.write(""""is_trigger_insertable_into":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isTriggerInsertableInto, indent, out)
      out.write("}")
    }
  }
}
