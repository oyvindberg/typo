/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package triggered_update_columns

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class TriggeredUpdateColumnsViewRow(
  triggerCatalog: /* nullability unknown */ Option[String],
  triggerSchema: /* nullability unknown */ Option[String],
  triggerName: /* nullability unknown */ Option[String],
  eventObjectCatalog: /* nullability unknown */ Option[String],
  eventObjectSchema: /* nullability unknown */ Option[String],
  eventObjectTable: /* nullability unknown */ Option[String],
  eventObjectColumn: /* nullability unknown */ Option[String]
)

object TriggeredUpdateColumnsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[TriggeredUpdateColumnsViewRow] = new JdbcDecoder[TriggeredUpdateColumnsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, TriggeredUpdateColumnsViewRow) =
      columIndex + 6 ->
        TriggeredUpdateColumnsViewRow(
          triggerCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          triggerSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          triggerName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          eventObjectCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          eventObjectSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          eventObjectTable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          eventObjectColumn = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[TriggeredUpdateColumnsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val triggerCatalog = jsonObj.get("trigger_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val triggerSchema = jsonObj.get("trigger_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val triggerName = jsonObj.get("trigger_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val eventObjectCatalog = jsonObj.get("event_object_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val eventObjectSchema = jsonObj.get("event_object_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val eventObjectTable = jsonObj.get("event_object_table").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val eventObjectColumn = jsonObj.get("event_object_column").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (triggerCatalog.isRight && triggerSchema.isRight && triggerName.isRight && eventObjectCatalog.isRight && eventObjectSchema.isRight && eventObjectTable.isRight && eventObjectColumn.isRight)
      Right(TriggeredUpdateColumnsViewRow(triggerCatalog = triggerCatalog.toOption.get, triggerSchema = triggerSchema.toOption.get, triggerName = triggerName.toOption.get, eventObjectCatalog = eventObjectCatalog.toOption.get, eventObjectSchema = eventObjectSchema.toOption.get, eventObjectTable = eventObjectTable.toOption.get, eventObjectColumn = eventObjectColumn.toOption.get))
    else Left(List[Either[String, Any]](triggerCatalog, triggerSchema, triggerName, eventObjectCatalog, eventObjectSchema, eventObjectTable, eventObjectColumn).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TriggeredUpdateColumnsViewRow] = new JsonEncoder[TriggeredUpdateColumnsViewRow] {
    override def unsafeEncode(a: TriggeredUpdateColumnsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""trigger_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.triggerCatalog, indent, out)
      out.write(",")
      out.write(""""trigger_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.triggerSchema, indent, out)
      out.write(",")
      out.write(""""trigger_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.triggerName, indent, out)
      out.write(",")
      out.write(""""event_object_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.eventObjectCatalog, indent, out)
      out.write(",")
      out.write(""""event_object_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.eventObjectSchema, indent, out)
      out.write(",")
      out.write(""""event_object_table":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.eventObjectTable, indent, out)
      out.write(",")
      out.write(""""event_object_column":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.eventObjectColumn, indent, out)
      out.write("}")
    }
  }
}
