/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class UserDefinedTypesViewRow(
  userDefinedTypeCatalog: /* nullability unknown */ Option[String],
  userDefinedTypeSchema: /* nullability unknown */ Option[String],
  userDefinedTypeName: /* nullability unknown */ Option[String],
  userDefinedTypeCategory: /* nullability unknown */ Option[String],
  isInstantiable: /* nullability unknown */ Option[/* max 3 chars */ String],
  isFinal: /* nullability unknown */ Option[/* max 3 chars */ String],
  orderingForm: /* nullability unknown */ Option[String],
  orderingCategory: /* nullability unknown */ Option[String],
  orderingRoutineCatalog: /* nullability unknown */ Option[String],
  orderingRoutineSchema: /* nullability unknown */ Option[String],
  orderingRoutineName: /* nullability unknown */ Option[String],
  referenceType: /* nullability unknown */ Option[String],
  dataType: /* nullability unknown */ Option[String],
  characterMaximumLength: /* nullability unknown */ Option[Int],
  characterOctetLength: /* nullability unknown */ Option[Int],
  characterSetCatalog: /* nullability unknown */ Option[String],
  characterSetSchema: /* nullability unknown */ Option[String],
  characterSetName: /* nullability unknown */ Option[String],
  collationCatalog: /* nullability unknown */ Option[String],
  collationSchema: /* nullability unknown */ Option[String],
  collationName: /* nullability unknown */ Option[String],
  numericPrecision: /* nullability unknown */ Option[Int],
  numericPrecisionRadix: /* nullability unknown */ Option[Int],
  numericScale: /* nullability unknown */ Option[Int],
  datetimePrecision: /* nullability unknown */ Option[Int],
  intervalType: /* nullability unknown */ Option[String],
  intervalPrecision: /* nullability unknown */ Option[Int],
  sourceDtdIdentifier: /* nullability unknown */ Option[String],
  refDtdIdentifier: /* nullability unknown */ Option[String]
)

object UserDefinedTypesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[UserDefinedTypesViewRow] = new JdbcDecoder[UserDefinedTypesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, UserDefinedTypesViewRow) =
      columIndex + 28 ->
        UserDefinedTypesViewRow(
          userDefinedTypeCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          userDefinedTypeSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          userDefinedTypeName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          userDefinedTypeCategory = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          isInstantiable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          isFinal = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          orderingForm = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          orderingCategory = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          orderingRoutineCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          orderingRoutineSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2,
          orderingRoutineName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 10, rs)._2,
          referenceType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 11, rs)._2,
          dataType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 12, rs)._2,
          characterMaximumLength = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 13, rs)._2,
          characterOctetLength = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 14, rs)._2,
          characterSetCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 15, rs)._2,
          characterSetSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 16, rs)._2,
          characterSetName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 17, rs)._2,
          collationCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 18, rs)._2,
          collationSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 19, rs)._2,
          collationName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 20, rs)._2,
          numericPrecision = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 21, rs)._2,
          numericPrecisionRadix = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 22, rs)._2,
          numericScale = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 23, rs)._2,
          datetimePrecision = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 24, rs)._2,
          intervalType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 25, rs)._2,
          intervalPrecision = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 26, rs)._2,
          sourceDtdIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 27, rs)._2,
          refDtdIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 28, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[UserDefinedTypesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val userDefinedTypeCatalog = jsonObj.get("user_defined_type_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val userDefinedTypeSchema = jsonObj.get("user_defined_type_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val userDefinedTypeName = jsonObj.get("user_defined_type_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val userDefinedTypeCategory = jsonObj.get("user_defined_type_category").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isInstantiable = jsonObj.get("is_instantiable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isFinal = jsonObj.get("is_final").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val orderingForm = jsonObj.get("ordering_form").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val orderingCategory = jsonObj.get("ordering_category").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val orderingRoutineCatalog = jsonObj.get("ordering_routine_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val orderingRoutineSchema = jsonObj.get("ordering_routine_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val orderingRoutineName = jsonObj.get("ordering_routine_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val referenceType = jsonObj.get("reference_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val dataType = jsonObj.get("data_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val characterMaximumLength = jsonObj.get("character_maximum_length").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val characterOctetLength = jsonObj.get("character_octet_length").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val characterSetCatalog = jsonObj.get("character_set_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val characterSetSchema = jsonObj.get("character_set_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val characterSetName = jsonObj.get("character_set_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val collationCatalog = jsonObj.get("collation_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val collationSchema = jsonObj.get("collation_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val collationName = jsonObj.get("collation_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val numericPrecision = jsonObj.get("numeric_precision").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val numericPrecisionRadix = jsonObj.get("numeric_precision_radix").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val numericScale = jsonObj.get("numeric_scale").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val datetimePrecision = jsonObj.get("datetime_precision").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val intervalType = jsonObj.get("interval_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val intervalPrecision = jsonObj.get("interval_precision").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val sourceDtdIdentifier = jsonObj.get("source_dtd_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val refDtdIdentifier = jsonObj.get("ref_dtd_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (userDefinedTypeCatalog.isRight && userDefinedTypeSchema.isRight && userDefinedTypeName.isRight && userDefinedTypeCategory.isRight && isInstantiable.isRight && isFinal.isRight && orderingForm.isRight && orderingCategory.isRight && orderingRoutineCatalog.isRight && orderingRoutineSchema.isRight && orderingRoutineName.isRight && referenceType.isRight && dataType.isRight && characterMaximumLength.isRight && characterOctetLength.isRight && characterSetCatalog.isRight && characterSetSchema.isRight && characterSetName.isRight && collationCatalog.isRight && collationSchema.isRight && collationName.isRight && numericPrecision.isRight && numericPrecisionRadix.isRight && numericScale.isRight && datetimePrecision.isRight && intervalType.isRight && intervalPrecision.isRight && sourceDtdIdentifier.isRight && refDtdIdentifier.isRight)
      Right(UserDefinedTypesViewRow(userDefinedTypeCatalog = userDefinedTypeCatalog.toOption.get, userDefinedTypeSchema = userDefinedTypeSchema.toOption.get, userDefinedTypeName = userDefinedTypeName.toOption.get, userDefinedTypeCategory = userDefinedTypeCategory.toOption.get, isInstantiable = isInstantiable.toOption.get, isFinal = isFinal.toOption.get, orderingForm = orderingForm.toOption.get, orderingCategory = orderingCategory.toOption.get, orderingRoutineCatalog = orderingRoutineCatalog.toOption.get, orderingRoutineSchema = orderingRoutineSchema.toOption.get, orderingRoutineName = orderingRoutineName.toOption.get, referenceType = referenceType.toOption.get, dataType = dataType.toOption.get, characterMaximumLength = characterMaximumLength.toOption.get, characterOctetLength = characterOctetLength.toOption.get, characterSetCatalog = characterSetCatalog.toOption.get, characterSetSchema = characterSetSchema.toOption.get, characterSetName = characterSetName.toOption.get, collationCatalog = collationCatalog.toOption.get, collationSchema = collationSchema.toOption.get, collationName = collationName.toOption.get, numericPrecision = numericPrecision.toOption.get, numericPrecisionRadix = numericPrecisionRadix.toOption.get, numericScale = numericScale.toOption.get, datetimePrecision = datetimePrecision.toOption.get, intervalType = intervalType.toOption.get, intervalPrecision = intervalPrecision.toOption.get, sourceDtdIdentifier = sourceDtdIdentifier.toOption.get, refDtdIdentifier = refDtdIdentifier.toOption.get))
    else Left(List[Either[String, Any]](userDefinedTypeCatalog, userDefinedTypeSchema, userDefinedTypeName, userDefinedTypeCategory, isInstantiable, isFinal, orderingForm, orderingCategory, orderingRoutineCatalog, orderingRoutineSchema, orderingRoutineName, referenceType, dataType, characterMaximumLength, characterOctetLength, characterSetCatalog, characterSetSchema, characterSetName, collationCatalog, collationSchema, collationName, numericPrecision, numericPrecisionRadix, numericScale, datetimePrecision, intervalType, intervalPrecision, sourceDtdIdentifier, refDtdIdentifier).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[UserDefinedTypesViewRow] = new JsonEncoder[UserDefinedTypesViewRow] {
    override def unsafeEncode(a: UserDefinedTypesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""user_defined_type_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.userDefinedTypeCatalog, indent, out)
      out.write(",")
      out.write(""""user_defined_type_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.userDefinedTypeSchema, indent, out)
      out.write(",")
      out.write(""""user_defined_type_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.userDefinedTypeName, indent, out)
      out.write(",")
      out.write(""""user_defined_type_category":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.userDefinedTypeCategory, indent, out)
      out.write(",")
      out.write(""""is_instantiable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isInstantiable, indent, out)
      out.write(",")
      out.write(""""is_final":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isFinal, indent, out)
      out.write(",")
      out.write(""""ordering_form":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.orderingForm, indent, out)
      out.write(",")
      out.write(""""ordering_category":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.orderingCategory, indent, out)
      out.write(",")
      out.write(""""ordering_routine_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.orderingRoutineCatalog, indent, out)
      out.write(",")
      out.write(""""ordering_routine_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.orderingRoutineSchema, indent, out)
      out.write(",")
      out.write(""""ordering_routine_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.orderingRoutineName, indent, out)
      out.write(",")
      out.write(""""reference_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.referenceType, indent, out)
      out.write(",")
      out.write(""""data_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.dataType, indent, out)
      out.write(",")
      out.write(""""character_maximum_length":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.characterMaximumLength, indent, out)
      out.write(",")
      out.write(""""character_octet_length":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.characterOctetLength, indent, out)
      out.write(",")
      out.write(""""character_set_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterSetCatalog, indent, out)
      out.write(",")
      out.write(""""character_set_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterSetSchema, indent, out)
      out.write(",")
      out.write(""""character_set_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterSetName, indent, out)
      out.write(",")
      out.write(""""collation_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.collationCatalog, indent, out)
      out.write(",")
      out.write(""""collation_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.collationSchema, indent, out)
      out.write(",")
      out.write(""""collation_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.collationName, indent, out)
      out.write(",")
      out.write(""""numeric_precision":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.numericPrecision, indent, out)
      out.write(",")
      out.write(""""numeric_precision_radix":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.numericPrecisionRadix, indent, out)
      out.write(",")
      out.write(""""numeric_scale":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.numericScale, indent, out)
      out.write(",")
      out.write(""""datetime_precision":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.datetimePrecision, indent, out)
      out.write(",")
      out.write(""""interval_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.intervalType, indent, out)
      out.write(",")
      out.write(""""interval_precision":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.intervalPrecision, indent, out)
      out.write(",")
      out.write(""""source_dtd_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.sourceDtdIdentifier, indent, out)
      out.write(",")
      out.write(""""ref_dtd_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.refDtdIdentifier, indent, out)
      out.write("}")
    }
  }
}
