/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package column_domain_usage

import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class ColumnDomainUsageViewStructure[Row](val prefix: Option[String], val extract: Row => ColumnDomainUsageViewRow, val merge: (Row, ColumnDomainUsageViewRow) => Row)
  extends Relation[ColumnDomainUsageViewFields, ColumnDomainUsageViewRow, Row]
    with ColumnDomainUsageViewFields[Row] { outer =>

  override val domainCatalog = new OptField[String, Row](prefix, "domain_catalog", None, None)(x => extract(x).domainCatalog, (row, value) => merge(row, extract(row).copy(domainCatalog = value)))
  override val domainSchema = new OptField[String, Row](prefix, "domain_schema", None, None)(x => extract(x).domainSchema, (row, value) => merge(row, extract(row).copy(domainSchema = value)))
  override val domainName = new OptField[String, Row](prefix, "domain_name", None, None)(x => extract(x).domainName, (row, value) => merge(row, extract(row).copy(domainName = value)))
  override val tableCatalog = new OptField[String, Row](prefix, "table_catalog", None, None)(x => extract(x).tableCatalog, (row, value) => merge(row, extract(row).copy(tableCatalog = value)))
  override val tableSchema = new OptField[String, Row](prefix, "table_schema", None, None)(x => extract(x).tableSchema, (row, value) => merge(row, extract(row).copy(tableSchema = value)))
  override val tableName = new OptField[String, Row](prefix, "table_name", None, None)(x => extract(x).tableName, (row, value) => merge(row, extract(row).copy(tableName = value)))
  override val columnName = new OptField[String, Row](prefix, "column_name", None, None)(x => extract(x).columnName, (row, value) => merge(row, extract(row).copy(columnName = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](domainCatalog, domainSchema, domainName, tableCatalog, tableSchema, tableName, columnName)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => ColumnDomainUsageViewRow, merge: (NewRow, ColumnDomainUsageViewRow) => NewRow): ColumnDomainUsageViewStructure[NewRow] =
    new ColumnDomainUsageViewStructure(prefix, extract, merge)
}
