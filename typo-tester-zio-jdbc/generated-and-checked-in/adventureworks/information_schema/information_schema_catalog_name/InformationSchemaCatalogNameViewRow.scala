/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package information_schema_catalog_name

import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class InformationSchemaCatalogNameViewRow(
  catalogName: /* nullability unknown */ Option[String]
)

object InformationSchemaCatalogNameViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[InformationSchemaCatalogNameViewRow] = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).map(v => InformationSchemaCatalogNameViewRow(catalogName = v))
  implicit lazy val jsonDecoder: JsonDecoder[InformationSchemaCatalogNameViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val catalogName = jsonObj.get("catalog_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (catalogName.isRight)
      Right(InformationSchemaCatalogNameViewRow(catalogName = catalogName.toOption.get))
    else Left(List[Either[String, Any]](catalogName).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[InformationSchemaCatalogNameViewRow] = new JsonEncoder[InformationSchemaCatalogNameViewRow] {
    override def unsafeEncode(a: InformationSchemaCatalogNameViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""catalog_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.catalogName, indent, out)
      out.write("}")
    }
  }
}
