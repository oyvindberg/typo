/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package key_column_usage

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class KeyColumnUsageViewRow(
  constraintCatalog: /* nullability unknown */ Option[String],
  constraintSchema: /* nullability unknown */ Option[String],
  constraintName: /* nullability unknown */ Option[String],
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  columnName: /* nullability unknown */ Option[String],
  ordinalPosition: /* nullability unknown */ Option[Int],
  positionInUniqueConstraint: /* nullability unknown */ Option[Int]
)

object KeyColumnUsageViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[KeyColumnUsageViewRow] = new JdbcDecoder[KeyColumnUsageViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, KeyColumnUsageViewRow) =
      columIndex + 8 ->
        KeyColumnUsageViewRow(
          constraintCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          constraintSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          constraintName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          tableCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          tableSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          tableName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          columnName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          ordinalPosition = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 7, rs)._2,
          positionInUniqueConstraint = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[KeyColumnUsageViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val constraintCatalog = jsonObj.get("constraint_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val constraintSchema = jsonObj.get("constraint_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val constraintName = jsonObj.get("constraint_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableCatalog = jsonObj.get("table_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableSchema = jsonObj.get("table_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableName = jsonObj.get("table_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val columnName = jsonObj.get("column_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val ordinalPosition = jsonObj.get("ordinal_position").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val positionInUniqueConstraint = jsonObj.get("position_in_unique_constraint").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    if (constraintCatalog.isRight && constraintSchema.isRight && constraintName.isRight && tableCatalog.isRight && tableSchema.isRight && tableName.isRight && columnName.isRight && ordinalPosition.isRight && positionInUniqueConstraint.isRight)
      Right(KeyColumnUsageViewRow(constraintCatalog = constraintCatalog.toOption.get, constraintSchema = constraintSchema.toOption.get, constraintName = constraintName.toOption.get, tableCatalog = tableCatalog.toOption.get, tableSchema = tableSchema.toOption.get, tableName = tableName.toOption.get, columnName = columnName.toOption.get, ordinalPosition = ordinalPosition.toOption.get, positionInUniqueConstraint = positionInUniqueConstraint.toOption.get))
    else Left(List[Either[String, Any]](constraintCatalog, constraintSchema, constraintName, tableCatalog, tableSchema, tableName, columnName, ordinalPosition, positionInUniqueConstraint).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[KeyColumnUsageViewRow] = new JsonEncoder[KeyColumnUsageViewRow] {
    override def unsafeEncode(a: KeyColumnUsageViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""constraint_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintCatalog, indent, out)
      out.write(",")
      out.write(""""constraint_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintSchema, indent, out)
      out.write(",")
      out.write(""""constraint_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintName, indent, out)
      out.write(",")
      out.write(""""table_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableCatalog, indent, out)
      out.write(",")
      out.write(""""table_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableSchema, indent, out)
      out.write(",")
      out.write(""""table_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableName, indent, out)
      out.write(",")
      out.write(""""column_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.columnName, indent, out)
      out.write(",")
      out.write(""""ordinal_position":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.ordinalPosition, indent, out)
      out.write(",")
      out.write(""""position_in_unique_constraint":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.positionInUniqueConstraint, indent, out)
      out.write("}")
    }
  }
}
