/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package enabled_roles

import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class EnabledRolesViewRow(
  roleName: /* nullability unknown */ Option[String]
)

object EnabledRolesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[EnabledRolesViewRow] = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).map(v => EnabledRolesViewRow(roleName = v))
  implicit lazy val jsonDecoder: JsonDecoder[EnabledRolesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val roleName = jsonObj.get("role_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (roleName.isRight)
      Right(EnabledRolesViewRow(roleName = roleName.toOption.get))
    else Left(List[Either[String, Any]](roleName).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[EnabledRolesViewRow] = new JsonEncoder[EnabledRolesViewRow] {
    override def unsafeEncode(a: EnabledRolesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""role_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.roleName, indent, out)
      out.write("}")
    }
  }
}
