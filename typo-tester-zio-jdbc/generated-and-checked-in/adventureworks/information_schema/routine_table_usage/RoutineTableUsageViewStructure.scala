/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package routine_table_usage

import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class RoutineTableUsageViewStructure[Row](val prefix: Option[String], val extract: Row => RoutineTableUsageViewRow, val merge: (Row, RoutineTableUsageViewRow) => Row)
  extends Relation[RoutineTableUsageViewFields, RoutineTableUsageViewRow, Row]
    with RoutineTableUsageViewFields[Row] { outer =>

  override val specificCatalog = new OptField[String, Row](prefix, "specific_catalog", None, None)(x => extract(x).specificCatalog, (row, value) => merge(row, extract(row).copy(specificCatalog = value)))
  override val specificSchema = new OptField[String, Row](prefix, "specific_schema", None, None)(x => extract(x).specificSchema, (row, value) => merge(row, extract(row).copy(specificSchema = value)))
  override val specificName = new OptField[String, Row](prefix, "specific_name", None, None)(x => extract(x).specificName, (row, value) => merge(row, extract(row).copy(specificName = value)))
  override val routineCatalog = new OptField[String, Row](prefix, "routine_catalog", None, None)(x => extract(x).routineCatalog, (row, value) => merge(row, extract(row).copy(routineCatalog = value)))
  override val routineSchema = new OptField[String, Row](prefix, "routine_schema", None, None)(x => extract(x).routineSchema, (row, value) => merge(row, extract(row).copy(routineSchema = value)))
  override val routineName = new OptField[String, Row](prefix, "routine_name", None, None)(x => extract(x).routineName, (row, value) => merge(row, extract(row).copy(routineName = value)))
  override val tableCatalog = new OptField[String, Row](prefix, "table_catalog", None, None)(x => extract(x).tableCatalog, (row, value) => merge(row, extract(row).copy(tableCatalog = value)))
  override val tableSchema = new OptField[String, Row](prefix, "table_schema", None, None)(x => extract(x).tableSchema, (row, value) => merge(row, extract(row).copy(tableSchema = value)))
  override val tableName = new OptField[String, Row](prefix, "table_name", None, None)(x => extract(x).tableName, (row, value) => merge(row, extract(row).copy(tableName = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](specificCatalog, specificSchema, specificName, routineCatalog, routineSchema, routineName, tableCatalog, tableSchema, tableName)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => RoutineTableUsageViewRow, merge: (NewRow, RoutineTableUsageViewRow) => NewRow): RoutineTableUsageViewStructure[NewRow] =
    new RoutineTableUsageViewStructure(prefix, extract, merge)
}
