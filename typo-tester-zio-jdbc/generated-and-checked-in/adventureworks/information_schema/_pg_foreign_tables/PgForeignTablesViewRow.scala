/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_tables`

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgForeignTablesViewRow(
  foreignTableCatalog: /* nullability unknown */ Option[String],
  foreignTableSchema: /* nullability unknown */ Option[String],
  foreignTableName: /* nullability unknown */ Option[String],
  /** Points to [[pg_catalog.pg_foreign_table.PgForeignTableRow.ftoptions]] */
  ftoptions: Option[Array[String]],
  foreignServerCatalog: /* nullability unknown */ Option[String],
  foreignServerName: /* nullability unknown */ Option[String],
  authorizationIdentifier: /* nullability unknown */ Option[String]
)

object PgForeignTablesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgForeignTablesViewRow] = new JdbcDecoder[PgForeignTablesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgForeignTablesViewRow) =
      columIndex + 6 ->
        PgForeignTablesViewRow(
          foreignTableCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          foreignTableSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          foreignTableName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          ftoptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 3, rs)._2,
          foreignServerCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          foreignServerName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          authorizationIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgForeignTablesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val foreignTableCatalog = jsonObj.get("foreign_table_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignTableSchema = jsonObj.get("foreign_table_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignTableName = jsonObj.get("foreign_table_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val ftoptions = jsonObj.get("ftoptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val foreignServerCatalog = jsonObj.get("foreign_server_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignServerName = jsonObj.get("foreign_server_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val authorizationIdentifier = jsonObj.get("authorization_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (foreignTableCatalog.isRight && foreignTableSchema.isRight && foreignTableName.isRight && ftoptions.isRight && foreignServerCatalog.isRight && foreignServerName.isRight && authorizationIdentifier.isRight)
      Right(PgForeignTablesViewRow(foreignTableCatalog = foreignTableCatalog.toOption.get, foreignTableSchema = foreignTableSchema.toOption.get, foreignTableName = foreignTableName.toOption.get, ftoptions = ftoptions.toOption.get, foreignServerCatalog = foreignServerCatalog.toOption.get, foreignServerName = foreignServerName.toOption.get, authorizationIdentifier = authorizationIdentifier.toOption.get))
    else Left(List[Either[String, Any]](foreignTableCatalog, foreignTableSchema, foreignTableName, ftoptions, foreignServerCatalog, foreignServerName, authorizationIdentifier).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgForeignTablesViewRow] = new JsonEncoder[PgForeignTablesViewRow] {
    override def unsafeEncode(a: PgForeignTablesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""foreign_table_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignTableCatalog, indent, out)
      out.write(",")
      out.write(""""foreign_table_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignTableSchema, indent, out)
      out.write(",")
      out.write(""""foreign_table_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignTableName, indent, out)
      out.write(",")
      out.write(""""ftoptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.ftoptions, indent, out)
      out.write(",")
      out.write(""""foreign_server_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerCatalog, indent, out)
      out.write(",")
      out.write(""""foreign_server_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerName, indent, out)
      out.write(",")
      out.write(""""authorization_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.authorizationIdentifier, indent, out)
      out.write("}")
    }
  }
}
