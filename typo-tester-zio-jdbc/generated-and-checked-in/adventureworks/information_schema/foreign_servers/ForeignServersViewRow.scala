/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_servers

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class ForeignServersViewRow(
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerCatalog]] */
  foreignServerCatalog: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerName]] */
  foreignServerName: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignDataWrapperCatalog]] */
  foreignDataWrapperCatalog: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignDataWrapperName]] */
  foreignDataWrapperName: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerType]] */
  foreignServerType: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.foreignServerVersion]] */
  foreignServerVersion: Option[/* nullability unknown */ String],
  /** Points to [[`_pg_foreign_servers`.PgForeignServersViewRow.authorizationIdentifier]] */
  authorizationIdentifier: Option[/* nullability unknown */ String]
)

object ForeignServersViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[ForeignServersViewRow] = new JdbcDecoder[ForeignServersViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ForeignServersViewRow) =
      columIndex + 6 ->
        ForeignServersViewRow(
          foreignServerCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          foreignServerName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          foreignDataWrapperCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          foreignDataWrapperName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          foreignServerType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          foreignServerVersion = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          authorizationIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ForeignServersViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val foreignServerCatalog = jsonObj.get("foreign_server_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignServerName = jsonObj.get("foreign_server_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignDataWrapperCatalog = jsonObj.get("foreign_data_wrapper_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignDataWrapperName = jsonObj.get("foreign_data_wrapper_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignServerType = jsonObj.get("foreign_server_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignServerVersion = jsonObj.get("foreign_server_version").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val authorizationIdentifier = jsonObj.get("authorization_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (foreignServerCatalog.isRight && foreignServerName.isRight && foreignDataWrapperCatalog.isRight && foreignDataWrapperName.isRight && foreignServerType.isRight && foreignServerVersion.isRight && authorizationIdentifier.isRight)
      Right(ForeignServersViewRow(foreignServerCatalog = foreignServerCatalog.toOption.get, foreignServerName = foreignServerName.toOption.get, foreignDataWrapperCatalog = foreignDataWrapperCatalog.toOption.get, foreignDataWrapperName = foreignDataWrapperName.toOption.get, foreignServerType = foreignServerType.toOption.get, foreignServerVersion = foreignServerVersion.toOption.get, authorizationIdentifier = authorizationIdentifier.toOption.get))
    else Left(List[Either[String, Any]](foreignServerCatalog, foreignServerName, foreignDataWrapperCatalog, foreignDataWrapperName, foreignServerType, foreignServerVersion, authorizationIdentifier).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ForeignServersViewRow] = new JsonEncoder[ForeignServersViewRow] {
    override def unsafeEncode(a: ForeignServersViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""foreign_server_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerCatalog, indent, out)
      out.write(",")
      out.write(""""foreign_server_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerName, indent, out)
      out.write(",")
      out.write(""""foreign_data_wrapper_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperCatalog, indent, out)
      out.write(",")
      out.write(""""foreign_data_wrapper_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperName, indent, out)
      out.write(",")
      out.write(""""foreign_server_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerType, indent, out)
      out.write(",")
      out.write(""""foreign_server_version":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignServerVersion, indent, out)
      out.write(",")
      out.write(""""authorization_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.authorizationIdentifier, indent, out)
      out.write("}")
    }
  }
}
