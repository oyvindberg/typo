/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package schemata

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class SchemataViewRow(
  catalogName: /* nullability unknown */ Option[String],
  schemaName: /* nullability unknown */ Option[String],
  schemaOwner: /* nullability unknown */ Option[String],
  defaultCharacterSetCatalog: /* nullability unknown */ Option[String],
  defaultCharacterSetSchema: /* nullability unknown */ Option[String],
  defaultCharacterSetName: /* nullability unknown */ Option[String],
  sqlPath: /* nullability unknown */ Option[String]
)

object SchemataViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[SchemataViewRow] = new JdbcDecoder[SchemataViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, SchemataViewRow) =
      columIndex + 6 ->
        SchemataViewRow(
          catalogName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          schemaName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          schemaOwner = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          defaultCharacterSetCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          defaultCharacterSetSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          defaultCharacterSetName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          sqlPath = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[SchemataViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val catalogName = jsonObj.get("catalog_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val schemaName = jsonObj.get("schema_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val schemaOwner = jsonObj.get("schema_owner").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val defaultCharacterSetCatalog = jsonObj.get("default_character_set_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val defaultCharacterSetSchema = jsonObj.get("default_character_set_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val defaultCharacterSetName = jsonObj.get("default_character_set_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val sqlPath = jsonObj.get("sql_path").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (catalogName.isRight && schemaName.isRight && schemaOwner.isRight && defaultCharacterSetCatalog.isRight && defaultCharacterSetSchema.isRight && defaultCharacterSetName.isRight && sqlPath.isRight)
      Right(SchemataViewRow(catalogName = catalogName.toOption.get, schemaName = schemaName.toOption.get, schemaOwner = schemaOwner.toOption.get, defaultCharacterSetCatalog = defaultCharacterSetCatalog.toOption.get, defaultCharacterSetSchema = defaultCharacterSetSchema.toOption.get, defaultCharacterSetName = defaultCharacterSetName.toOption.get, sqlPath = sqlPath.toOption.get))
    else Left(List[Either[String, Any]](catalogName, schemaName, schemaOwner, defaultCharacterSetCatalog, defaultCharacterSetSchema, defaultCharacterSetName, sqlPath).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[SchemataViewRow] = new JsonEncoder[SchemataViewRow] {
    override def unsafeEncode(a: SchemataViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""catalog_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.catalogName, indent, out)
      out.write(",")
      out.write(""""schema_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaName, indent, out)
      out.write(",")
      out.write(""""schema_owner":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaOwner, indent, out)
      out.write(",")
      out.write(""""default_character_set_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.defaultCharacterSetCatalog, indent, out)
      out.write(",")
      out.write(""""default_character_set_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.defaultCharacterSetSchema, indent, out)
      out.write(",")
      out.write(""""default_character_set_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.defaultCharacterSetName, indent, out)
      out.write(",")
      out.write(""""sql_path":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.sqlPath, indent, out)
      out.write("}")
    }
  }
}
