/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package table_constraints

import zio.json.DeriveJsonDecoder
import zio.json.DeriveJsonEncoder
import zio.json.JsonDecoder

case class TableConstraintsViewRow(
  constraintCatalog: /* nullability unknown */ Option[String],
  constraintSchema: /* nullability unknown */ Option[String],
  constraintName: /* nullability unknown */ Option[String],
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  constraintType: /* nullability unknown */ Option[String],
  isDeferrable: /* nullability unknown */ Option[/* max 3 chars */ String],
  initiallyDeferred: /* nullability unknown */ Option[/* max 3 chars */ String],
  enforced: /* nullability unknown */ Option[/* max 3 chars */ String]
)

object TableConstraintsViewRow {
  implicit lazy val decoder: JsonDecoder[TableConstraintsViewRow] = DeriveJsonDecoder.gen[TableConstraintsViewRow]
  implicit lazy val decoder: JsonDecoder[TableConstraintsViewRow] = DeriveJsonEncoder.gen[TableConstraintsViewRow]
}
