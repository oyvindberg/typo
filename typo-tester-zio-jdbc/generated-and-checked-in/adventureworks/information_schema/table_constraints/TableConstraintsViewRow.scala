/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package table_constraints

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class TableConstraintsViewRow(
  constraintCatalog: /* nullability unknown */ Option[String],
  constraintSchema: /* nullability unknown */ Option[String],
  constraintName: /* nullability unknown */ Option[String],
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  constraintType: /* nullability unknown */ Option[String],
  isDeferrable: /* nullability unknown */ Option[/* max 3 chars */ String],
  initiallyDeferred: /* nullability unknown */ Option[/* max 3 chars */ String],
  enforced: /* nullability unknown */ Option[/* max 3 chars */ String]
)

object TableConstraintsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[TableConstraintsViewRow] = new JdbcDecoder[TableConstraintsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, TableConstraintsViewRow) =
      columIndex + 9 ->
        TableConstraintsViewRow(
          constraintCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          constraintSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          constraintName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          tableCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          tableSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          tableName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          constraintType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          isDeferrable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          initiallyDeferred = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          enforced = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[TableConstraintsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val constraintCatalog = jsonObj.get("constraint_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val constraintSchema = jsonObj.get("constraint_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val constraintName = jsonObj.get("constraint_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableCatalog = jsonObj.get("table_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableSchema = jsonObj.get("table_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableName = jsonObj.get("table_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val constraintType = jsonObj.get("constraint_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isDeferrable = jsonObj.get("is_deferrable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val initiallyDeferred = jsonObj.get("initially_deferred").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val enforced = jsonObj.get("enforced").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (constraintCatalog.isRight && constraintSchema.isRight && constraintName.isRight && tableCatalog.isRight && tableSchema.isRight && tableName.isRight && constraintType.isRight && isDeferrable.isRight && initiallyDeferred.isRight && enforced.isRight)
      Right(TableConstraintsViewRow(constraintCatalog = constraintCatalog.toOption.get, constraintSchema = constraintSchema.toOption.get, constraintName = constraintName.toOption.get, tableCatalog = tableCatalog.toOption.get, tableSchema = tableSchema.toOption.get, tableName = tableName.toOption.get, constraintType = constraintType.toOption.get, isDeferrable = isDeferrable.toOption.get, initiallyDeferred = initiallyDeferred.toOption.get, enforced = enforced.toOption.get))
    else Left(List[Either[String, Any]](constraintCatalog, constraintSchema, constraintName, tableCatalog, tableSchema, tableName, constraintType, isDeferrable, initiallyDeferred, enforced).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TableConstraintsViewRow] = new JsonEncoder[TableConstraintsViewRow] {
    override def unsafeEncode(a: TableConstraintsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""constraint_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintCatalog, indent, out)
      out.write(",")
      out.write(""""constraint_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintSchema, indent, out)
      out.write(",")
      out.write(""""constraint_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintName, indent, out)
      out.write(",")
      out.write(""""table_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableCatalog, indent, out)
      out.write(",")
      out.write(""""table_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableSchema, indent, out)
      out.write(",")
      out.write(""""table_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableName, indent, out)
      out.write(",")
      out.write(""""constraint_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintType, indent, out)
      out.write(",")
      out.write(""""is_deferrable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isDeferrable, indent, out)
      out.write(",")
      out.write(""""initially_deferred":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.initiallyDeferred, indent, out)
      out.write(",")
      out.write(""""enforced":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.enforced, indent, out)
      out.write("}")
    }
  }
}
