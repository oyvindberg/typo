/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_table_columns`

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgForeignTableColumnsViewRow(
  /** Points to [[pg_catalog.pg_namespace.PgNamespaceRow.nspname]] */
  nspname: String,
  /** Points to [[pg_catalog.pg_class.PgClassRow.relname]] */
  relname: String,
  /** Points to [[pg_catalog.pg_attribute.PgAttributeRow.attname]] */
  attname: String,
  /** Points to [[pg_catalog.pg_attribute.PgAttributeRow.attfdwoptions]] */
  attfdwoptions: Option[Array[String]]
)

object PgForeignTableColumnsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgForeignTableColumnsViewRow] = new JdbcDecoder[PgForeignTableColumnsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgForeignTableColumnsViewRow) =
      columIndex + 3 ->
        PgForeignTableColumnsViewRow(
          nspname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 0, rs)._2,
          relname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          attname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          attfdwoptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgForeignTableColumnsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val nspname = jsonObj.get("nspname").toRight("Missing field 'nspname'").flatMap(_.as(JsonDecoder.string))
    val relname = jsonObj.get("relname").toRight("Missing field 'relname'").flatMap(_.as(JsonDecoder.string))
    val attname = jsonObj.get("attname").toRight("Missing field 'attname'").flatMap(_.as(JsonDecoder.string))
    val attfdwoptions = jsonObj.get("attfdwoptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    if (nspname.isRight && relname.isRight && attname.isRight && attfdwoptions.isRight)
      Right(PgForeignTableColumnsViewRow(nspname = nspname.toOption.get, relname = relname.toOption.get, attname = attname.toOption.get, attfdwoptions = attfdwoptions.toOption.get))
    else Left(List[Either[String, Any]](nspname, relname, attname, attfdwoptions).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgForeignTableColumnsViewRow] = new JsonEncoder[PgForeignTableColumnsViewRow] {
    override def unsafeEncode(a: PgForeignTableColumnsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""nspname":""")
      JsonEncoder.string.unsafeEncode(a.nspname, indent, out)
      out.write(",")
      out.write(""""relname":""")
      JsonEncoder.string.unsafeEncode(a.relname, indent, out)
      out.write(",")
      out.write(""""attname":""")
      JsonEncoder.string.unsafeEncode(a.attname, indent, out)
      out.write(",")
      out.write(""""attfdwoptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.attfdwoptions, indent, out)
      out.write("}")
    }
  }
}
