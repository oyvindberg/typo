/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package triggers

import adventureworks.customtypes.TypoInstant
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class TriggersViewRow(
  triggerCatalog: /* nullability unknown */ Option[String],
  triggerSchema: /* nullability unknown */ Option[String],
  triggerName: /* nullability unknown */ Option[String],
  eventManipulation: /* nullability unknown */ Option[String],
  eventObjectCatalog: /* nullability unknown */ Option[String],
  eventObjectSchema: /* nullability unknown */ Option[String],
  eventObjectTable: /* nullability unknown */ Option[String],
  actionOrder: /* nullability unknown */ Option[Int],
  actionCondition: /* nullability unknown */ Option[String],
  actionStatement: /* nullability unknown */ Option[String],
  actionOrientation: /* nullability unknown */ Option[String],
  actionTiming: /* nullability unknown */ Option[String],
  actionReferenceOldTable: /* nullability unknown */ Option[String],
  actionReferenceNewTable: /* nullability unknown */ Option[String],
  actionReferenceOldRow: /* nullability unknown */ Option[String],
  actionReferenceNewRow: /* nullability unknown */ Option[String],
  created: /* nullability unknown */ Option[TypoInstant]
)

object TriggersViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[TriggersViewRow] = new JdbcDecoder[TriggersViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, TriggersViewRow) =
      columIndex + 16 ->
        TriggersViewRow(
          triggerCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          triggerSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          triggerName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          eventManipulation = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          eventObjectCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          eventObjectSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          eventObjectTable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          actionOrder = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 7, rs)._2,
          actionCondition = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          actionStatement = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2,
          actionOrientation = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 10, rs)._2,
          actionTiming = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 11, rs)._2,
          actionReferenceOldTable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 12, rs)._2,
          actionReferenceNewTable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 13, rs)._2,
          actionReferenceOldRow = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 14, rs)._2,
          actionReferenceNewRow = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 15, rs)._2,
          created = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 16, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[TriggersViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val triggerCatalog = jsonObj.get("trigger_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val triggerSchema = jsonObj.get("trigger_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val triggerName = jsonObj.get("trigger_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val eventManipulation = jsonObj.get("event_manipulation").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val eventObjectCatalog = jsonObj.get("event_object_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val eventObjectSchema = jsonObj.get("event_object_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val eventObjectTable = jsonObj.get("event_object_table").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val actionOrder = jsonObj.get("action_order").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val actionCondition = jsonObj.get("action_condition").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val actionStatement = jsonObj.get("action_statement").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val actionOrientation = jsonObj.get("action_orientation").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val actionTiming = jsonObj.get("action_timing").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val actionReferenceOldTable = jsonObj.get("action_reference_old_table").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val actionReferenceNewTable = jsonObj.get("action_reference_new_table").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val actionReferenceOldRow = jsonObj.get("action_reference_old_row").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val actionReferenceNewRow = jsonObj.get("action_reference_new_row").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val created = jsonObj.get("created").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    if (triggerCatalog.isRight && triggerSchema.isRight && triggerName.isRight && eventManipulation.isRight && eventObjectCatalog.isRight && eventObjectSchema.isRight && eventObjectTable.isRight && actionOrder.isRight && actionCondition.isRight && actionStatement.isRight && actionOrientation.isRight && actionTiming.isRight && actionReferenceOldTable.isRight && actionReferenceNewTable.isRight && actionReferenceOldRow.isRight && actionReferenceNewRow.isRight && created.isRight)
      Right(TriggersViewRow(triggerCatalog = triggerCatalog.toOption.get, triggerSchema = triggerSchema.toOption.get, triggerName = triggerName.toOption.get, eventManipulation = eventManipulation.toOption.get, eventObjectCatalog = eventObjectCatalog.toOption.get, eventObjectSchema = eventObjectSchema.toOption.get, eventObjectTable = eventObjectTable.toOption.get, actionOrder = actionOrder.toOption.get, actionCondition = actionCondition.toOption.get, actionStatement = actionStatement.toOption.get, actionOrientation = actionOrientation.toOption.get, actionTiming = actionTiming.toOption.get, actionReferenceOldTable = actionReferenceOldTable.toOption.get, actionReferenceNewTable = actionReferenceNewTable.toOption.get, actionReferenceOldRow = actionReferenceOldRow.toOption.get, actionReferenceNewRow = actionReferenceNewRow.toOption.get, created = created.toOption.get))
    else Left(List[Either[String, Any]](triggerCatalog, triggerSchema, triggerName, eventManipulation, eventObjectCatalog, eventObjectSchema, eventObjectTable, actionOrder, actionCondition, actionStatement, actionOrientation, actionTiming, actionReferenceOldTable, actionReferenceNewTable, actionReferenceOldRow, actionReferenceNewRow, created).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TriggersViewRow] = new JsonEncoder[TriggersViewRow] {
    override def unsafeEncode(a: TriggersViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""trigger_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.triggerCatalog, indent, out)
      out.write(",")
      out.write(""""trigger_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.triggerSchema, indent, out)
      out.write(",")
      out.write(""""trigger_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.triggerName, indent, out)
      out.write(",")
      out.write(""""event_manipulation":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.eventManipulation, indent, out)
      out.write(",")
      out.write(""""event_object_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.eventObjectCatalog, indent, out)
      out.write(",")
      out.write(""""event_object_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.eventObjectSchema, indent, out)
      out.write(",")
      out.write(""""event_object_table":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.eventObjectTable, indent, out)
      out.write(",")
      out.write(""""action_order":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.actionOrder, indent, out)
      out.write(",")
      out.write(""""action_condition":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.actionCondition, indent, out)
      out.write(",")
      out.write(""""action_statement":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.actionStatement, indent, out)
      out.write(",")
      out.write(""""action_orientation":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.actionOrientation, indent, out)
      out.write(",")
      out.write(""""action_timing":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.actionTiming, indent, out)
      out.write(",")
      out.write(""""action_reference_old_table":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.actionReferenceOldTable, indent, out)
      out.write(",")
      out.write(""""action_reference_new_table":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.actionReferenceNewTable, indent, out)
      out.write(",")
      out.write(""""action_reference_old_row":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.actionReferenceOldRow, indent, out)
      out.write(",")
      out.write(""""action_reference_new_row":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.actionReferenceNewRow, indent, out)
      out.write(",")
      out.write(""""created":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.created, indent, out)
      out.write("}")
    }
  }
}
