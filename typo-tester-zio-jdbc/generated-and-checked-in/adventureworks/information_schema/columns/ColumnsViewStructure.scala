/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package columns

import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class ColumnsViewStructure[Row](val prefix: Option[String], val extract: Row => ColumnsViewRow, val merge: (Row, ColumnsViewRow) => Row)
  extends Relation[ColumnsViewFields, ColumnsViewRow, Row]
    with ColumnsViewFields[Row] { outer =>

  override val tableCatalog = new OptField[String, Row](prefix, "table_catalog", None, None)(x => extract(x).tableCatalog, (row, value) => merge(row, extract(row).copy(tableCatalog = value)))
  override val tableSchema = new OptField[String, Row](prefix, "table_schema", None, None)(x => extract(x).tableSchema, (row, value) => merge(row, extract(row).copy(tableSchema = value)))
  override val tableName = new OptField[String, Row](prefix, "table_name", None, None)(x => extract(x).tableName, (row, value) => merge(row, extract(row).copy(tableName = value)))
  override val columnName = new OptField[String, Row](prefix, "column_name", None, None)(x => extract(x).columnName, (row, value) => merge(row, extract(row).copy(columnName = value)))
  override val ordinalPosition = new OptField[Int, Row](prefix, "ordinal_position", None, None)(x => extract(x).ordinalPosition, (row, value) => merge(row, extract(row).copy(ordinalPosition = value)))
  override val columnDefault = new OptField[String, Row](prefix, "column_default", None, None)(x => extract(x).columnDefault, (row, value) => merge(row, extract(row).copy(columnDefault = value)))
  override val isNullable = new OptField[/* max 3 chars */ String, Row](prefix, "is_nullable", None, None)(x => extract(x).isNullable, (row, value) => merge(row, extract(row).copy(isNullable = value)))
  override val dataType = new OptField[String, Row](prefix, "data_type", None, None)(x => extract(x).dataType, (row, value) => merge(row, extract(row).copy(dataType = value)))
  override val characterMaximumLength = new OptField[Int, Row](prefix, "character_maximum_length", None, None)(x => extract(x).characterMaximumLength, (row, value) => merge(row, extract(row).copy(characterMaximumLength = value)))
  override val characterOctetLength = new OptField[Int, Row](prefix, "character_octet_length", None, None)(x => extract(x).characterOctetLength, (row, value) => merge(row, extract(row).copy(characterOctetLength = value)))
  override val numericPrecision = new OptField[Int, Row](prefix, "numeric_precision", None, None)(x => extract(x).numericPrecision, (row, value) => merge(row, extract(row).copy(numericPrecision = value)))
  override val numericPrecisionRadix = new OptField[Int, Row](prefix, "numeric_precision_radix", None, None)(x => extract(x).numericPrecisionRadix, (row, value) => merge(row, extract(row).copy(numericPrecisionRadix = value)))
  override val numericScale = new OptField[Int, Row](prefix, "numeric_scale", None, None)(x => extract(x).numericScale, (row, value) => merge(row, extract(row).copy(numericScale = value)))
  override val datetimePrecision = new OptField[Int, Row](prefix, "datetime_precision", None, None)(x => extract(x).datetimePrecision, (row, value) => merge(row, extract(row).copy(datetimePrecision = value)))
  override val intervalType = new OptField[String, Row](prefix, "interval_type", None, None)(x => extract(x).intervalType, (row, value) => merge(row, extract(row).copy(intervalType = value)))
  override val intervalPrecision = new OptField[Int, Row](prefix, "interval_precision", None, None)(x => extract(x).intervalPrecision, (row, value) => merge(row, extract(row).copy(intervalPrecision = value)))
  override val characterSetCatalog = new OptField[String, Row](prefix, "character_set_catalog", None, None)(x => extract(x).characterSetCatalog, (row, value) => merge(row, extract(row).copy(characterSetCatalog = value)))
  override val characterSetSchema = new OptField[String, Row](prefix, "character_set_schema", None, None)(x => extract(x).characterSetSchema, (row, value) => merge(row, extract(row).copy(characterSetSchema = value)))
  override val characterSetName = new OptField[String, Row](prefix, "character_set_name", None, None)(x => extract(x).characterSetName, (row, value) => merge(row, extract(row).copy(characterSetName = value)))
  override val collationCatalog = new OptField[String, Row](prefix, "collation_catalog", None, None)(x => extract(x).collationCatalog, (row, value) => merge(row, extract(row).copy(collationCatalog = value)))
  override val collationSchema = new OptField[String, Row](prefix, "collation_schema", None, None)(x => extract(x).collationSchema, (row, value) => merge(row, extract(row).copy(collationSchema = value)))
  override val collationName = new OptField[String, Row](prefix, "collation_name", None, None)(x => extract(x).collationName, (row, value) => merge(row, extract(row).copy(collationName = value)))
  override val domainCatalog = new OptField[String, Row](prefix, "domain_catalog", None, None)(x => extract(x).domainCatalog, (row, value) => merge(row, extract(row).copy(domainCatalog = value)))
  override val domainSchema = new OptField[String, Row](prefix, "domain_schema", None, None)(x => extract(x).domainSchema, (row, value) => merge(row, extract(row).copy(domainSchema = value)))
  override val domainName = new OptField[String, Row](prefix, "domain_name", None, None)(x => extract(x).domainName, (row, value) => merge(row, extract(row).copy(domainName = value)))
  override val udtCatalog = new OptField[String, Row](prefix, "udt_catalog", None, None)(x => extract(x).udtCatalog, (row, value) => merge(row, extract(row).copy(udtCatalog = value)))
  override val udtSchema = new OptField[String, Row](prefix, "udt_schema", None, None)(x => extract(x).udtSchema, (row, value) => merge(row, extract(row).copy(udtSchema = value)))
  override val udtName = new OptField[String, Row](prefix, "udt_name", None, None)(x => extract(x).udtName, (row, value) => merge(row, extract(row).copy(udtName = value)))
  override val scopeCatalog = new OptField[String, Row](prefix, "scope_catalog", None, None)(x => extract(x).scopeCatalog, (row, value) => merge(row, extract(row).copy(scopeCatalog = value)))
  override val scopeSchema = new OptField[String, Row](prefix, "scope_schema", None, None)(x => extract(x).scopeSchema, (row, value) => merge(row, extract(row).copy(scopeSchema = value)))
  override val scopeName = new OptField[String, Row](prefix, "scope_name", None, None)(x => extract(x).scopeName, (row, value) => merge(row, extract(row).copy(scopeName = value)))
  override val maximumCardinality = new OptField[Int, Row](prefix, "maximum_cardinality", None, None)(x => extract(x).maximumCardinality, (row, value) => merge(row, extract(row).copy(maximumCardinality = value)))
  override val dtdIdentifier = new OptField[String, Row](prefix, "dtd_identifier", None, None)(x => extract(x).dtdIdentifier, (row, value) => merge(row, extract(row).copy(dtdIdentifier = value)))
  override val isSelfReferencing = new OptField[/* max 3 chars */ String, Row](prefix, "is_self_referencing", None, None)(x => extract(x).isSelfReferencing, (row, value) => merge(row, extract(row).copy(isSelfReferencing = value)))
  override val isIdentity = new OptField[/* max 3 chars */ String, Row](prefix, "is_identity", None, None)(x => extract(x).isIdentity, (row, value) => merge(row, extract(row).copy(isIdentity = value)))
  override val identityGeneration = new OptField[String, Row](prefix, "identity_generation", None, None)(x => extract(x).identityGeneration, (row, value) => merge(row, extract(row).copy(identityGeneration = value)))
  override val identityStart = new OptField[String, Row](prefix, "identity_start", None, None)(x => extract(x).identityStart, (row, value) => merge(row, extract(row).copy(identityStart = value)))
  override val identityIncrement = new OptField[String, Row](prefix, "identity_increment", None, None)(x => extract(x).identityIncrement, (row, value) => merge(row, extract(row).copy(identityIncrement = value)))
  override val identityMaximum = new OptField[String, Row](prefix, "identity_maximum", None, None)(x => extract(x).identityMaximum, (row, value) => merge(row, extract(row).copy(identityMaximum = value)))
  override val identityMinimum = new OptField[String, Row](prefix, "identity_minimum", None, None)(x => extract(x).identityMinimum, (row, value) => merge(row, extract(row).copy(identityMinimum = value)))
  override val identityCycle = new OptField[/* max 3 chars */ String, Row](prefix, "identity_cycle", None, None)(x => extract(x).identityCycle, (row, value) => merge(row, extract(row).copy(identityCycle = value)))
  override val isGenerated = new OptField[String, Row](prefix, "is_generated", None, None)(x => extract(x).isGenerated, (row, value) => merge(row, extract(row).copy(isGenerated = value)))
  override val generationExpression = new OptField[String, Row](prefix, "generation_expression", None, None)(x => extract(x).generationExpression, (row, value) => merge(row, extract(row).copy(generationExpression = value)))
  override val isUpdatable = new OptField[/* max 3 chars */ String, Row](prefix, "is_updatable", None, None)(x => extract(x).isUpdatable, (row, value) => merge(row, extract(row).copy(isUpdatable = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](tableCatalog, tableSchema, tableName, columnName, ordinalPosition, columnDefault, isNullable, dataType, characterMaximumLength, characterOctetLength, numericPrecision, numericPrecisionRadix, numericScale, datetimePrecision, intervalType, intervalPrecision, characterSetCatalog, characterSetSchema, characterSetName, collationCatalog, collationSchema, collationName, domainCatalog, domainSchema, domainName, udtCatalog, udtSchema, udtName, scopeCatalog, scopeSchema, scopeName, maximumCardinality, dtdIdentifier, isSelfReferencing, isIdentity, identityGeneration, identityStart, identityIncrement, identityMaximum, identityMinimum, identityCycle, isGenerated, generationExpression, isUpdatable)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => ColumnsViewRow, merge: (NewRow, ColumnsViewRow) => NewRow): ColumnsViewStructure[NewRow] =
    new ColumnsViewStructure(prefix, extract, merge)
}
