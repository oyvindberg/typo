/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_data_wrappers`

import adventureworks.pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgForeignDataWrappersViewRow(
  /** Points to [[pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperRow.oid]] */
  oid: PgForeignDataWrapperId,
  /** Points to [[pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperRow.fdwowner]] */
  fdwowner: /* oid */ Long,
  /** Points to [[pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperRow.fdwoptions]] */
  fdwoptions: Option[Array[String]],
  foreignDataWrapperCatalog: /* nullability unknown */ Option[String],
  foreignDataWrapperName: /* nullability unknown */ Option[String],
  authorizationIdentifier: /* nullability unknown */ Option[String],
  foreignDataWrapperLanguage: /* nullability unknown */ Option[String]
)

object PgForeignDataWrappersViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgForeignDataWrappersViewRow] = new JdbcDecoder[PgForeignDataWrappersViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgForeignDataWrappersViewRow) =
      columIndex + 6 ->
        PgForeignDataWrappersViewRow(
          oid = PgForeignDataWrapperId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          fdwowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          fdwoptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 2, rs)._2,
          foreignDataWrapperCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          foreignDataWrapperName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          authorizationIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          foreignDataWrapperLanguage = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgForeignDataWrappersViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgForeignDataWrapperId.jsonDecoder))
    val fdwowner = jsonObj.get("fdwowner").toRight("Missing field 'fdwowner'").flatMap(_.as(JsonDecoder.long))
    val fdwoptions = jsonObj.get("fdwoptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val foreignDataWrapperCatalog = jsonObj.get("foreign_data_wrapper_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignDataWrapperName = jsonObj.get("foreign_data_wrapper_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val authorizationIdentifier = jsonObj.get("authorization_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val foreignDataWrapperLanguage = jsonObj.get("foreign_data_wrapper_language").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (oid.isRight && fdwowner.isRight && fdwoptions.isRight && foreignDataWrapperCatalog.isRight && foreignDataWrapperName.isRight && authorizationIdentifier.isRight && foreignDataWrapperLanguage.isRight)
      Right(PgForeignDataWrappersViewRow(oid = oid.toOption.get, fdwowner = fdwowner.toOption.get, fdwoptions = fdwoptions.toOption.get, foreignDataWrapperCatalog = foreignDataWrapperCatalog.toOption.get, foreignDataWrapperName = foreignDataWrapperName.toOption.get, authorizationIdentifier = authorizationIdentifier.toOption.get, foreignDataWrapperLanguage = foreignDataWrapperLanguage.toOption.get))
    else Left(List[Either[String, Any]](oid, fdwowner, fdwoptions, foreignDataWrapperCatalog, foreignDataWrapperName, authorizationIdentifier, foreignDataWrapperLanguage).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgForeignDataWrappersViewRow] = new JsonEncoder[PgForeignDataWrappersViewRow] {
    override def unsafeEncode(a: PgForeignDataWrappersViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgForeignDataWrapperId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""fdwowner":""")
      JsonEncoder.long.unsafeEncode(a.fdwowner, indent, out)
      out.write(",")
      out.write(""""fdwoptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.fdwoptions, indent, out)
      out.write(",")
      out.write(""""foreign_data_wrapper_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperCatalog, indent, out)
      out.write(",")
      out.write(""""foreign_data_wrapper_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperName, indent, out)
      out.write(",")
      out.write(""""authorization_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.authorizationIdentifier, indent, out)
      out.write(",")
      out.write(""""foreign_data_wrapper_language":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.foreignDataWrapperLanguage, indent, out)
      out.write("}")
    }
  }
}
