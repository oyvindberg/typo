/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package column_options

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class ColumnOptionsViewRow(
  tableCatalog: /* nullability unknown */ Option[String],
  tableSchema: /* nullability unknown */ Option[String],
  tableName: /* nullability unknown */ Option[String],
  columnName: /* nullability unknown */ Option[String],
  optionName: /* nullability unknown */ Option[String],
  optionValue: /* nullability unknown */ Option[String]
)

object ColumnOptionsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[ColumnOptionsViewRow] = new JdbcDecoder[ColumnOptionsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ColumnOptionsViewRow) =
      columIndex + 5 ->
        ColumnOptionsViewRow(
          tableCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          tableSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          tableName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          columnName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          optionName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          optionValue = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ColumnOptionsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val tableCatalog = jsonObj.get("table_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableSchema = jsonObj.get("table_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tableName = jsonObj.get("table_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val columnName = jsonObj.get("column_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val optionName = jsonObj.get("option_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val optionValue = jsonObj.get("option_value").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (tableCatalog.isRight && tableSchema.isRight && tableName.isRight && columnName.isRight && optionName.isRight && optionValue.isRight)
      Right(ColumnOptionsViewRow(tableCatalog = tableCatalog.toOption.get, tableSchema = tableSchema.toOption.get, tableName = tableName.toOption.get, columnName = columnName.toOption.get, optionName = optionName.toOption.get, optionValue = optionValue.toOption.get))
    else Left(List[Either[String, Any]](tableCatalog, tableSchema, tableName, columnName, optionName, optionValue).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ColumnOptionsViewRow] = new JsonEncoder[ColumnOptionsViewRow] {
    override def unsafeEncode(a: ColumnOptionsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""table_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableCatalog, indent, out)
      out.write(",")
      out.write(""""table_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableSchema, indent, out)
      out.write(",")
      out.write(""""table_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableName, indent, out)
      out.write(",")
      out.write(""""column_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.columnName, indent, out)
      out.write(",")
      out.write(""""option_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.optionName, indent, out)
      out.write(",")
      out.write(""""option_value":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.optionValue, indent, out)
      out.write("}")
    }
  }
}
