/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package domain_constraints

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class DomainConstraintsViewRow(
  constraintCatalog: /* nullability unknown */ Option[String],
  constraintSchema: /* nullability unknown */ Option[String],
  constraintName: /* nullability unknown */ Option[String],
  domainCatalog: /* nullability unknown */ Option[String],
  domainSchema: /* nullability unknown */ Option[String],
  domainName: /* nullability unknown */ Option[String],
  isDeferrable: /* nullability unknown */ Option[/* max 3 chars */ String],
  initiallyDeferred: /* nullability unknown */ Option[/* max 3 chars */ String]
)

object DomainConstraintsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[DomainConstraintsViewRow] = new JdbcDecoder[DomainConstraintsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, DomainConstraintsViewRow) =
      columIndex + 7 ->
        DomainConstraintsViewRow(
          constraintCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          constraintSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          constraintName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          domainCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          domainSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          domainName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          isDeferrable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          initiallyDeferred = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[DomainConstraintsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val constraintCatalog = jsonObj.get("constraint_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val constraintSchema = jsonObj.get("constraint_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val constraintName = jsonObj.get("constraint_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val domainCatalog = jsonObj.get("domain_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val domainSchema = jsonObj.get("domain_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val domainName = jsonObj.get("domain_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isDeferrable = jsonObj.get("is_deferrable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val initiallyDeferred = jsonObj.get("initially_deferred").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (constraintCatalog.isRight && constraintSchema.isRight && constraintName.isRight && domainCatalog.isRight && domainSchema.isRight && domainName.isRight && isDeferrable.isRight && initiallyDeferred.isRight)
      Right(DomainConstraintsViewRow(constraintCatalog = constraintCatalog.toOption.get, constraintSchema = constraintSchema.toOption.get, constraintName = constraintName.toOption.get, domainCatalog = domainCatalog.toOption.get, domainSchema = domainSchema.toOption.get, domainName = domainName.toOption.get, isDeferrable = isDeferrable.toOption.get, initiallyDeferred = initiallyDeferred.toOption.get))
    else Left(List[Either[String, Any]](constraintCatalog, constraintSchema, constraintName, domainCatalog, domainSchema, domainName, isDeferrable, initiallyDeferred).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[DomainConstraintsViewRow] = new JsonEncoder[DomainConstraintsViewRow] {
    override def unsafeEncode(a: DomainConstraintsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""constraint_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintCatalog, indent, out)
      out.write(",")
      out.write(""""constraint_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintSchema, indent, out)
      out.write(",")
      out.write(""""constraint_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.constraintName, indent, out)
      out.write(",")
      out.write(""""domain_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.domainCatalog, indent, out)
      out.write(",")
      out.write(""""domain_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.domainSchema, indent, out)
      out.write(",")
      out.write(""""domain_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.domainName, indent, out)
      out.write(",")
      out.write(""""is_deferrable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isDeferrable, indent, out)
      out.write(",")
      out.write(""""initially_deferred":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.initiallyDeferred, indent, out)
      out.write("}")
    }
  }
}
