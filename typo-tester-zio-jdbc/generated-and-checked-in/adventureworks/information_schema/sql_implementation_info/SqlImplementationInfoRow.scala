/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sql_implementation_info

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class SqlImplementationInfoRow(
  implementationInfoId: Option[CharacterData],
  implementationInfoName: Option[CharacterData],
  integerValue: Option[CardinalNumber],
  characterValue: Option[CharacterData],
  comments: Option[CharacterData]
)

object SqlImplementationInfoRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[SqlImplementationInfoRow] = new JdbcDecoder[SqlImplementationInfoRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, SqlImplementationInfoRow) =
      columIndex + 4 ->
        SqlImplementationInfoRow(
          implementationInfoId = JdbcDecoder.optionDecoder(CharacterData.jdbcDecoder).unsafeDecode(columIndex + 0, rs)._2,
          implementationInfoName = JdbcDecoder.optionDecoder(CharacterData.jdbcDecoder).unsafeDecode(columIndex + 1, rs)._2,
          integerValue = JdbcDecoder.optionDecoder(CardinalNumber.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          characterValue = JdbcDecoder.optionDecoder(CharacterData.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2,
          comments = JdbcDecoder.optionDecoder(CharacterData.jdbcDecoder).unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[SqlImplementationInfoRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val implementationInfoId = jsonObj.get("implementation_info_id").fold[Either[String, Option[CharacterData]]](Right(None))(_.as(JsonDecoder.option(CharacterData.jsonDecoder)))
    val implementationInfoName = jsonObj.get("implementation_info_name").fold[Either[String, Option[CharacterData]]](Right(None))(_.as(JsonDecoder.option(CharacterData.jsonDecoder)))
    val integerValue = jsonObj.get("integer_value").fold[Either[String, Option[CardinalNumber]]](Right(None))(_.as(JsonDecoder.option(CardinalNumber.jsonDecoder)))
    val characterValue = jsonObj.get("character_value").fold[Either[String, Option[CharacterData]]](Right(None))(_.as(JsonDecoder.option(CharacterData.jsonDecoder)))
    val comments = jsonObj.get("comments").fold[Either[String, Option[CharacterData]]](Right(None))(_.as(JsonDecoder.option(CharacterData.jsonDecoder)))
    if (implementationInfoId.isRight && implementationInfoName.isRight && integerValue.isRight && characterValue.isRight && comments.isRight)
      Right(SqlImplementationInfoRow(implementationInfoId = implementationInfoId.toOption.get, implementationInfoName = implementationInfoName.toOption.get, integerValue = integerValue.toOption.get, characterValue = characterValue.toOption.get, comments = comments.toOption.get))
    else Left(List[Either[String, Any]](implementationInfoId, implementationInfoName, integerValue, characterValue, comments).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[SqlImplementationInfoRow] = new JsonEncoder[SqlImplementationInfoRow] {
    override def unsafeEncode(a: SqlImplementationInfoRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""implementation_info_id":""")
      JsonEncoder.option(CharacterData.jsonEncoder).unsafeEncode(a.implementationInfoId, indent, out)
      out.write(",")
      out.write(""""implementation_info_name":""")
      JsonEncoder.option(CharacterData.jsonEncoder).unsafeEncode(a.implementationInfoName, indent, out)
      out.write(",")
      out.write(""""integer_value":""")
      JsonEncoder.option(CardinalNumber.jsonEncoder).unsafeEncode(a.integerValue, indent, out)
      out.write(",")
      out.write(""""character_value":""")
      JsonEncoder.option(CharacterData.jsonEncoder).unsafeEncode(a.characterValue, indent, out)
      out.write(",")
      out.write(""""comments":""")
      JsonEncoder.option(CharacterData.jsonEncoder).unsafeEncode(a.comments, indent, out)
      out.write("}")
    }
  }
}
