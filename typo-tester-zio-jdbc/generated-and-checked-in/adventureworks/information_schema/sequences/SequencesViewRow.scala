/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sequences

import zio.json.DeriveJsonDecoder
import zio.json.DeriveJsonEncoder
import zio.json.JsonDecoder

case class SequencesViewRow(
  sequenceCatalog: /* nullability unknown */ Option[String],
  sequenceSchema: /* nullability unknown */ Option[String],
  sequenceName: /* nullability unknown */ Option[String],
  dataType: /* nullability unknown */ Option[String],
  numericPrecision: /* nullability unknown */ Option[Int],
  numericPrecisionRadix: /* nullability unknown */ Option[Int],
  numericScale: /* nullability unknown */ Option[Int],
  startValue: /* nullability unknown */ Option[String],
  minimumValue: /* nullability unknown */ Option[String],
  maximumValue: /* nullability unknown */ Option[String],
  increment: /* nullability unknown */ Option[String],
  cycleOption: /* nullability unknown */ Option[/* max 3 chars */ String]
)

object SequencesViewRow {
  implicit lazy val decoder: JsonDecoder[SequencesViewRow] = DeriveJsonDecoder.gen[SequencesViewRow]
  implicit lazy val decoder: JsonDecoder[SequencesViewRow] = DeriveJsonEncoder.gen[SequencesViewRow]
}
