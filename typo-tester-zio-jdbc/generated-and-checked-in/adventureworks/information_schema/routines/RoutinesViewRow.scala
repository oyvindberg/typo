/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package routines

import adventureworks.customtypes.TypoInstant
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class RoutinesViewRow(
  specificCatalog: /* nullability unknown */ Option[String],
  specificSchema: /* nullability unknown */ Option[String],
  specificName: /* nullability unknown */ Option[String],
  routineCatalog: /* nullability unknown */ Option[String],
  routineSchema: /* nullability unknown */ Option[String],
  routineName: /* nullability unknown */ Option[String],
  routineType: /* nullability unknown */ Option[String],
  moduleCatalog: /* nullability unknown */ Option[String],
  moduleSchema: /* nullability unknown */ Option[String],
  moduleName: /* nullability unknown */ Option[String],
  udtCatalog: /* nullability unknown */ Option[String],
  udtSchema: /* nullability unknown */ Option[String],
  udtName: /* nullability unknown */ Option[String],
  dataType: /* nullability unknown */ Option[String],
  characterMaximumLength: /* nullability unknown */ Option[Int],
  characterOctetLength: /* nullability unknown */ Option[Int],
  characterSetCatalog: /* nullability unknown */ Option[String],
  characterSetSchema: /* nullability unknown */ Option[String],
  characterSetName: /* nullability unknown */ Option[String],
  collationCatalog: /* nullability unknown */ Option[String],
  collationSchema: /* nullability unknown */ Option[String],
  collationName: /* nullability unknown */ Option[String],
  numericPrecision: /* nullability unknown */ Option[Int],
  numericPrecisionRadix: /* nullability unknown */ Option[Int],
  numericScale: /* nullability unknown */ Option[Int],
  datetimePrecision: /* nullability unknown */ Option[Int],
  intervalType: /* nullability unknown */ Option[String],
  intervalPrecision: /* nullability unknown */ Option[Int],
  typeUdtCatalog: /* nullability unknown */ Option[String],
  typeUdtSchema: /* nullability unknown */ Option[String],
  typeUdtName: /* nullability unknown */ Option[String],
  scopeCatalog: /* nullability unknown */ Option[String],
  scopeSchema: /* nullability unknown */ Option[String],
  scopeName: /* nullability unknown */ Option[String],
  maximumCardinality: /* nullability unknown */ Option[Int],
  dtdIdentifier: /* nullability unknown */ Option[String],
  routineBody: /* nullability unknown */ Option[String],
  routineDefinition: /* nullability unknown */ Option[String],
  externalName: /* nullability unknown */ Option[String],
  externalLanguage: /* nullability unknown */ Option[String],
  parameterStyle: /* nullability unknown */ Option[String],
  isDeterministic: /* nullability unknown */ Option[/* max 3 chars */ String],
  sqlDataAccess: /* nullability unknown */ Option[String],
  isNullCall: /* nullability unknown */ Option[/* max 3 chars */ String],
  sqlPath: /* nullability unknown */ Option[String],
  schemaLevelRoutine: /* nullability unknown */ Option[/* max 3 chars */ String],
  maxDynamicResultSets: /* nullability unknown */ Option[Int],
  isUserDefinedCast: /* nullability unknown */ Option[/* max 3 chars */ String],
  isImplicitlyInvocable: /* nullability unknown */ Option[/* max 3 chars */ String],
  securityType: /* nullability unknown */ Option[String],
  toSqlSpecificCatalog: /* nullability unknown */ Option[String],
  toSqlSpecificSchema: /* nullability unknown */ Option[String],
  toSqlSpecificName: /* nullability unknown */ Option[String],
  asLocator: /* nullability unknown */ Option[/* max 3 chars */ String],
  created: /* nullability unknown */ Option[TypoInstant],
  lastAltered: /* nullability unknown */ Option[TypoInstant],
  newSavepointLevel: /* nullability unknown */ Option[/* max 3 chars */ String],
  isUdtDependent: /* nullability unknown */ Option[/* max 3 chars */ String],
  resultCastFromDataType: /* nullability unknown */ Option[String],
  resultCastAsLocator: /* nullability unknown */ Option[/* max 3 chars */ String],
  resultCastCharMaxLength: /* nullability unknown */ Option[Int],
  resultCastCharOctetLength: /* nullability unknown */ Option[Int],
  resultCastCharSetCatalog: /* nullability unknown */ Option[String],
  resultCastCharSetSchema: /* nullability unknown */ Option[String],
  resultCastCharSetName: /* nullability unknown */ Option[String],
  resultCastCollationCatalog: /* nullability unknown */ Option[String],
  resultCastCollationSchema: /* nullability unknown */ Option[String],
  resultCastCollationName: /* nullability unknown */ Option[String],
  resultCastNumericPrecision: /* nullability unknown */ Option[Int],
  resultCastNumericPrecisionRadix: /* nullability unknown */ Option[Int],
  resultCastNumericScale: /* nullability unknown */ Option[Int],
  resultCastDatetimePrecision: /* nullability unknown */ Option[Int],
  resultCastIntervalType: /* nullability unknown */ Option[String],
  resultCastIntervalPrecision: /* nullability unknown */ Option[Int],
  resultCastTypeUdtCatalog: /* nullability unknown */ Option[String],
  resultCastTypeUdtSchema: /* nullability unknown */ Option[String],
  resultCastTypeUdtName: /* nullability unknown */ Option[String],
  resultCastScopeCatalog: /* nullability unknown */ Option[String],
  resultCastScopeSchema: /* nullability unknown */ Option[String],
  resultCastScopeName: /* nullability unknown */ Option[String],
  resultCastMaximumCardinality: /* nullability unknown */ Option[Int],
  resultCastDtdIdentifier: /* nullability unknown */ Option[String]
)

object RoutinesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[RoutinesViewRow] = new JdbcDecoder[RoutinesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, RoutinesViewRow) =
      columIndex + 81 ->
        RoutinesViewRow(
          specificCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          specificSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          specificName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          routineCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          routineSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          routineName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          routineType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          moduleCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          moduleSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          moduleName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2,
          udtCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 10, rs)._2,
          udtSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 11, rs)._2,
          udtName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 12, rs)._2,
          dataType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 13, rs)._2,
          characterMaximumLength = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 14, rs)._2,
          characterOctetLength = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 15, rs)._2,
          characterSetCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 16, rs)._2,
          characterSetSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 17, rs)._2,
          characterSetName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 18, rs)._2,
          collationCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 19, rs)._2,
          collationSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 20, rs)._2,
          collationName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 21, rs)._2,
          numericPrecision = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 22, rs)._2,
          numericPrecisionRadix = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 23, rs)._2,
          numericScale = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 24, rs)._2,
          datetimePrecision = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 25, rs)._2,
          intervalType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 26, rs)._2,
          intervalPrecision = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 27, rs)._2,
          typeUdtCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 28, rs)._2,
          typeUdtSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 29, rs)._2,
          typeUdtName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 30, rs)._2,
          scopeCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 31, rs)._2,
          scopeSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 32, rs)._2,
          scopeName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 33, rs)._2,
          maximumCardinality = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 34, rs)._2,
          dtdIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 35, rs)._2,
          routineBody = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 36, rs)._2,
          routineDefinition = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 37, rs)._2,
          externalName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 38, rs)._2,
          externalLanguage = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 39, rs)._2,
          parameterStyle = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 40, rs)._2,
          isDeterministic = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 41, rs)._2,
          sqlDataAccess = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 42, rs)._2,
          isNullCall = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 43, rs)._2,
          sqlPath = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 44, rs)._2,
          schemaLevelRoutine = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 45, rs)._2,
          maxDynamicResultSets = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 46, rs)._2,
          isUserDefinedCast = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 47, rs)._2,
          isImplicitlyInvocable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 48, rs)._2,
          securityType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 49, rs)._2,
          toSqlSpecificCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 50, rs)._2,
          toSqlSpecificSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 51, rs)._2,
          toSqlSpecificName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 52, rs)._2,
          asLocator = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 53, rs)._2,
          created = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 54, rs)._2,
          lastAltered = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 55, rs)._2,
          newSavepointLevel = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 56, rs)._2,
          isUdtDependent = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 57, rs)._2,
          resultCastFromDataType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 58, rs)._2,
          resultCastAsLocator = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 59, rs)._2,
          resultCastCharMaxLength = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 60, rs)._2,
          resultCastCharOctetLength = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 61, rs)._2,
          resultCastCharSetCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 62, rs)._2,
          resultCastCharSetSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 63, rs)._2,
          resultCastCharSetName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 64, rs)._2,
          resultCastCollationCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 65, rs)._2,
          resultCastCollationSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 66, rs)._2,
          resultCastCollationName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 67, rs)._2,
          resultCastNumericPrecision = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 68, rs)._2,
          resultCastNumericPrecisionRadix = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 69, rs)._2,
          resultCastNumericScale = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 70, rs)._2,
          resultCastDatetimePrecision = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 71, rs)._2,
          resultCastIntervalType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 72, rs)._2,
          resultCastIntervalPrecision = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 73, rs)._2,
          resultCastTypeUdtCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 74, rs)._2,
          resultCastTypeUdtSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 75, rs)._2,
          resultCastTypeUdtName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 76, rs)._2,
          resultCastScopeCatalog = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 77, rs)._2,
          resultCastScopeSchema = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 78, rs)._2,
          resultCastScopeName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 79, rs)._2,
          resultCastMaximumCardinality = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 80, rs)._2,
          resultCastDtdIdentifier = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 81, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[RoutinesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val specificCatalog = jsonObj.get("specific_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val specificSchema = jsonObj.get("specific_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val specificName = jsonObj.get("specific_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val routineCatalog = jsonObj.get("routine_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val routineSchema = jsonObj.get("routine_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val routineName = jsonObj.get("routine_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val routineType = jsonObj.get("routine_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val moduleCatalog = jsonObj.get("module_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val moduleSchema = jsonObj.get("module_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val moduleName = jsonObj.get("module_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val udtCatalog = jsonObj.get("udt_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val udtSchema = jsonObj.get("udt_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val udtName = jsonObj.get("udt_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val dataType = jsonObj.get("data_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val characterMaximumLength = jsonObj.get("character_maximum_length").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val characterOctetLength = jsonObj.get("character_octet_length").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val characterSetCatalog = jsonObj.get("character_set_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val characterSetSchema = jsonObj.get("character_set_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val characterSetName = jsonObj.get("character_set_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val collationCatalog = jsonObj.get("collation_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val collationSchema = jsonObj.get("collation_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val collationName = jsonObj.get("collation_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val numericPrecision = jsonObj.get("numeric_precision").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val numericPrecisionRadix = jsonObj.get("numeric_precision_radix").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val numericScale = jsonObj.get("numeric_scale").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val datetimePrecision = jsonObj.get("datetime_precision").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val intervalType = jsonObj.get("interval_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val intervalPrecision = jsonObj.get("interval_precision").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val typeUdtCatalog = jsonObj.get("type_udt_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val typeUdtSchema = jsonObj.get("type_udt_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val typeUdtName = jsonObj.get("type_udt_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val scopeCatalog = jsonObj.get("scope_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val scopeSchema = jsonObj.get("scope_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val scopeName = jsonObj.get("scope_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val maximumCardinality = jsonObj.get("maximum_cardinality").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val dtdIdentifier = jsonObj.get("dtd_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val routineBody = jsonObj.get("routine_body").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val routineDefinition = jsonObj.get("routine_definition").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val externalName = jsonObj.get("external_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val externalLanguage = jsonObj.get("external_language").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val parameterStyle = jsonObj.get("parameter_style").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isDeterministic = jsonObj.get("is_deterministic").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val sqlDataAccess = jsonObj.get("sql_data_access").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isNullCall = jsonObj.get("is_null_call").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val sqlPath = jsonObj.get("sql_path").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val schemaLevelRoutine = jsonObj.get("schema_level_routine").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val maxDynamicResultSets = jsonObj.get("max_dynamic_result_sets").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val isUserDefinedCast = jsonObj.get("is_user_defined_cast").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isImplicitlyInvocable = jsonObj.get("is_implicitly_invocable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val securityType = jsonObj.get("security_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val toSqlSpecificCatalog = jsonObj.get("to_sql_specific_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val toSqlSpecificSchema = jsonObj.get("to_sql_specific_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val toSqlSpecificName = jsonObj.get("to_sql_specific_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val asLocator = jsonObj.get("as_locator").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val created = jsonObj.get("created").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val lastAltered = jsonObj.get("last_altered").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val newSavepointLevel = jsonObj.get("new_savepoint_level").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isUdtDependent = jsonObj.get("is_udt_dependent").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastFromDataType = jsonObj.get("result_cast_from_data_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastAsLocator = jsonObj.get("result_cast_as_locator").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastCharMaxLength = jsonObj.get("result_cast_char_max_length").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val resultCastCharOctetLength = jsonObj.get("result_cast_char_octet_length").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val resultCastCharSetCatalog = jsonObj.get("result_cast_char_set_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastCharSetSchema = jsonObj.get("result_cast_char_set_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastCharSetName = jsonObj.get("result_cast_char_set_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastCollationCatalog = jsonObj.get("result_cast_collation_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastCollationSchema = jsonObj.get("result_cast_collation_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastCollationName = jsonObj.get("result_cast_collation_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastNumericPrecision = jsonObj.get("result_cast_numeric_precision").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val resultCastNumericPrecisionRadix = jsonObj.get("result_cast_numeric_precision_radix").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val resultCastNumericScale = jsonObj.get("result_cast_numeric_scale").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val resultCastDatetimePrecision = jsonObj.get("result_cast_datetime_precision").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val resultCastIntervalType = jsonObj.get("result_cast_interval_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastIntervalPrecision = jsonObj.get("result_cast_interval_precision").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val resultCastTypeUdtCatalog = jsonObj.get("result_cast_type_udt_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastTypeUdtSchema = jsonObj.get("result_cast_type_udt_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastTypeUdtName = jsonObj.get("result_cast_type_udt_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastScopeCatalog = jsonObj.get("result_cast_scope_catalog").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastScopeSchema = jsonObj.get("result_cast_scope_schema").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastScopeName = jsonObj.get("result_cast_scope_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resultCastMaximumCardinality = jsonObj.get("result_cast_maximum_cardinality").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val resultCastDtdIdentifier = jsonObj.get("result_cast_dtd_identifier").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (specificCatalog.isRight && specificSchema.isRight && specificName.isRight && routineCatalog.isRight && routineSchema.isRight && routineName.isRight && routineType.isRight && moduleCatalog.isRight && moduleSchema.isRight && moduleName.isRight && udtCatalog.isRight && udtSchema.isRight && udtName.isRight && dataType.isRight && characterMaximumLength.isRight && characterOctetLength.isRight && characterSetCatalog.isRight && characterSetSchema.isRight && characterSetName.isRight && collationCatalog.isRight && collationSchema.isRight && collationName.isRight && numericPrecision.isRight && numericPrecisionRadix.isRight && numericScale.isRight && datetimePrecision.isRight && intervalType.isRight && intervalPrecision.isRight && typeUdtCatalog.isRight && typeUdtSchema.isRight && typeUdtName.isRight && scopeCatalog.isRight && scopeSchema.isRight && scopeName.isRight && maximumCardinality.isRight && dtdIdentifier.isRight && routineBody.isRight && routineDefinition.isRight && externalName.isRight && externalLanguage.isRight && parameterStyle.isRight && isDeterministic.isRight && sqlDataAccess.isRight && isNullCall.isRight && sqlPath.isRight && schemaLevelRoutine.isRight && maxDynamicResultSets.isRight && isUserDefinedCast.isRight && isImplicitlyInvocable.isRight && securityType.isRight && toSqlSpecificCatalog.isRight && toSqlSpecificSchema.isRight && toSqlSpecificName.isRight && asLocator.isRight && created.isRight && lastAltered.isRight && newSavepointLevel.isRight && isUdtDependent.isRight && resultCastFromDataType.isRight && resultCastAsLocator.isRight && resultCastCharMaxLength.isRight && resultCastCharOctetLength.isRight && resultCastCharSetCatalog.isRight && resultCastCharSetSchema.isRight && resultCastCharSetName.isRight && resultCastCollationCatalog.isRight && resultCastCollationSchema.isRight && resultCastCollationName.isRight && resultCastNumericPrecision.isRight && resultCastNumericPrecisionRadix.isRight && resultCastNumericScale.isRight && resultCastDatetimePrecision.isRight && resultCastIntervalType.isRight && resultCastIntervalPrecision.isRight && resultCastTypeUdtCatalog.isRight && resultCastTypeUdtSchema.isRight && resultCastTypeUdtName.isRight && resultCastScopeCatalog.isRight && resultCastScopeSchema.isRight && resultCastScopeName.isRight && resultCastMaximumCardinality.isRight && resultCastDtdIdentifier.isRight)
      Right(RoutinesViewRow(specificCatalog = specificCatalog.toOption.get, specificSchema = specificSchema.toOption.get, specificName = specificName.toOption.get, routineCatalog = routineCatalog.toOption.get, routineSchema = routineSchema.toOption.get, routineName = routineName.toOption.get, routineType = routineType.toOption.get, moduleCatalog = moduleCatalog.toOption.get, moduleSchema = moduleSchema.toOption.get, moduleName = moduleName.toOption.get, udtCatalog = udtCatalog.toOption.get, udtSchema = udtSchema.toOption.get, udtName = udtName.toOption.get, dataType = dataType.toOption.get, characterMaximumLength = characterMaximumLength.toOption.get, characterOctetLength = characterOctetLength.toOption.get, characterSetCatalog = characterSetCatalog.toOption.get, characterSetSchema = characterSetSchema.toOption.get, characterSetName = characterSetName.toOption.get, collationCatalog = collationCatalog.toOption.get, collationSchema = collationSchema.toOption.get, collationName = collationName.toOption.get, numericPrecision = numericPrecision.toOption.get, numericPrecisionRadix = numericPrecisionRadix.toOption.get, numericScale = numericScale.toOption.get, datetimePrecision = datetimePrecision.toOption.get, intervalType = intervalType.toOption.get, intervalPrecision = intervalPrecision.toOption.get, typeUdtCatalog = typeUdtCatalog.toOption.get, typeUdtSchema = typeUdtSchema.toOption.get, typeUdtName = typeUdtName.toOption.get, scopeCatalog = scopeCatalog.toOption.get, scopeSchema = scopeSchema.toOption.get, scopeName = scopeName.toOption.get, maximumCardinality = maximumCardinality.toOption.get, dtdIdentifier = dtdIdentifier.toOption.get, routineBody = routineBody.toOption.get, routineDefinition = routineDefinition.toOption.get, externalName = externalName.toOption.get, externalLanguage = externalLanguage.toOption.get, parameterStyle = parameterStyle.toOption.get, isDeterministic = isDeterministic.toOption.get, sqlDataAccess = sqlDataAccess.toOption.get, isNullCall = isNullCall.toOption.get, sqlPath = sqlPath.toOption.get, schemaLevelRoutine = schemaLevelRoutine.toOption.get, maxDynamicResultSets = maxDynamicResultSets.toOption.get, isUserDefinedCast = isUserDefinedCast.toOption.get, isImplicitlyInvocable = isImplicitlyInvocable.toOption.get, securityType = securityType.toOption.get, toSqlSpecificCatalog = toSqlSpecificCatalog.toOption.get, toSqlSpecificSchema = toSqlSpecificSchema.toOption.get, toSqlSpecificName = toSqlSpecificName.toOption.get, asLocator = asLocator.toOption.get, created = created.toOption.get, lastAltered = lastAltered.toOption.get, newSavepointLevel = newSavepointLevel.toOption.get, isUdtDependent = isUdtDependent.toOption.get, resultCastFromDataType = resultCastFromDataType.toOption.get, resultCastAsLocator = resultCastAsLocator.toOption.get, resultCastCharMaxLength = resultCastCharMaxLength.toOption.get, resultCastCharOctetLength = resultCastCharOctetLength.toOption.get, resultCastCharSetCatalog = resultCastCharSetCatalog.toOption.get, resultCastCharSetSchema = resultCastCharSetSchema.toOption.get, resultCastCharSetName = resultCastCharSetName.toOption.get, resultCastCollationCatalog = resultCastCollationCatalog.toOption.get, resultCastCollationSchema = resultCastCollationSchema.toOption.get, resultCastCollationName = resultCastCollationName.toOption.get, resultCastNumericPrecision = resultCastNumericPrecision.toOption.get, resultCastNumericPrecisionRadix = resultCastNumericPrecisionRadix.toOption.get, resultCastNumericScale = resultCastNumericScale.toOption.get, resultCastDatetimePrecision = resultCastDatetimePrecision.toOption.get, resultCastIntervalType = resultCastIntervalType.toOption.get, resultCastIntervalPrecision = resultCastIntervalPrecision.toOption.get, resultCastTypeUdtCatalog = resultCastTypeUdtCatalog.toOption.get, resultCastTypeUdtSchema = resultCastTypeUdtSchema.toOption.get, resultCastTypeUdtName = resultCastTypeUdtName.toOption.get, resultCastScopeCatalog = resultCastScopeCatalog.toOption.get, resultCastScopeSchema = resultCastScopeSchema.toOption.get, resultCastScopeName = resultCastScopeName.toOption.get, resultCastMaximumCardinality = resultCastMaximumCardinality.toOption.get, resultCastDtdIdentifier = resultCastDtdIdentifier.toOption.get))
    else Left(List[Either[String, Any]](specificCatalog, specificSchema, specificName, routineCatalog, routineSchema, routineName, routineType, moduleCatalog, moduleSchema, moduleName, udtCatalog, udtSchema, udtName, dataType, characterMaximumLength, characterOctetLength, characterSetCatalog, characterSetSchema, characterSetName, collationCatalog, collationSchema, collationName, numericPrecision, numericPrecisionRadix, numericScale, datetimePrecision, intervalType, intervalPrecision, typeUdtCatalog, typeUdtSchema, typeUdtName, scopeCatalog, scopeSchema, scopeName, maximumCardinality, dtdIdentifier, routineBody, routineDefinition, externalName, externalLanguage, parameterStyle, isDeterministic, sqlDataAccess, isNullCall, sqlPath, schemaLevelRoutine, maxDynamicResultSets, isUserDefinedCast, isImplicitlyInvocable, securityType, toSqlSpecificCatalog, toSqlSpecificSchema, toSqlSpecificName, asLocator, created, lastAltered, newSavepointLevel, isUdtDependent, resultCastFromDataType, resultCastAsLocator, resultCastCharMaxLength, resultCastCharOctetLength, resultCastCharSetCatalog, resultCastCharSetSchema, resultCastCharSetName, resultCastCollationCatalog, resultCastCollationSchema, resultCastCollationName, resultCastNumericPrecision, resultCastNumericPrecisionRadix, resultCastNumericScale, resultCastDatetimePrecision, resultCastIntervalType, resultCastIntervalPrecision, resultCastTypeUdtCatalog, resultCastTypeUdtSchema, resultCastTypeUdtName, resultCastScopeCatalog, resultCastScopeSchema, resultCastScopeName, resultCastMaximumCardinality, resultCastDtdIdentifier).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[RoutinesViewRow] = new JsonEncoder[RoutinesViewRow] {
    override def unsafeEncode(a: RoutinesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""specific_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.specificCatalog, indent, out)
      out.write(",")
      out.write(""""specific_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.specificSchema, indent, out)
      out.write(",")
      out.write(""""specific_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.specificName, indent, out)
      out.write(",")
      out.write(""""routine_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.routineCatalog, indent, out)
      out.write(",")
      out.write(""""routine_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.routineSchema, indent, out)
      out.write(",")
      out.write(""""routine_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.routineName, indent, out)
      out.write(",")
      out.write(""""routine_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.routineType, indent, out)
      out.write(",")
      out.write(""""module_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.moduleCatalog, indent, out)
      out.write(",")
      out.write(""""module_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.moduleSchema, indent, out)
      out.write(",")
      out.write(""""module_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.moduleName, indent, out)
      out.write(",")
      out.write(""""udt_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.udtCatalog, indent, out)
      out.write(",")
      out.write(""""udt_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.udtSchema, indent, out)
      out.write(",")
      out.write(""""udt_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.udtName, indent, out)
      out.write(",")
      out.write(""""data_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.dataType, indent, out)
      out.write(",")
      out.write(""""character_maximum_length":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.characterMaximumLength, indent, out)
      out.write(",")
      out.write(""""character_octet_length":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.characterOctetLength, indent, out)
      out.write(",")
      out.write(""""character_set_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterSetCatalog, indent, out)
      out.write(",")
      out.write(""""character_set_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterSetSchema, indent, out)
      out.write(",")
      out.write(""""character_set_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.characterSetName, indent, out)
      out.write(",")
      out.write(""""collation_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.collationCatalog, indent, out)
      out.write(",")
      out.write(""""collation_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.collationSchema, indent, out)
      out.write(",")
      out.write(""""collation_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.collationName, indent, out)
      out.write(",")
      out.write(""""numeric_precision":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.numericPrecision, indent, out)
      out.write(",")
      out.write(""""numeric_precision_radix":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.numericPrecisionRadix, indent, out)
      out.write(",")
      out.write(""""numeric_scale":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.numericScale, indent, out)
      out.write(",")
      out.write(""""datetime_precision":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.datetimePrecision, indent, out)
      out.write(",")
      out.write(""""interval_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.intervalType, indent, out)
      out.write(",")
      out.write(""""interval_precision":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.intervalPrecision, indent, out)
      out.write(",")
      out.write(""""type_udt_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.typeUdtCatalog, indent, out)
      out.write(",")
      out.write(""""type_udt_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.typeUdtSchema, indent, out)
      out.write(",")
      out.write(""""type_udt_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.typeUdtName, indent, out)
      out.write(",")
      out.write(""""scope_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.scopeCatalog, indent, out)
      out.write(",")
      out.write(""""scope_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.scopeSchema, indent, out)
      out.write(",")
      out.write(""""scope_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.scopeName, indent, out)
      out.write(",")
      out.write(""""maximum_cardinality":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.maximumCardinality, indent, out)
      out.write(",")
      out.write(""""dtd_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.dtdIdentifier, indent, out)
      out.write(",")
      out.write(""""routine_body":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.routineBody, indent, out)
      out.write(",")
      out.write(""""routine_definition":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.routineDefinition, indent, out)
      out.write(",")
      out.write(""""external_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.externalName, indent, out)
      out.write(",")
      out.write(""""external_language":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.externalLanguage, indent, out)
      out.write(",")
      out.write(""""parameter_style":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.parameterStyle, indent, out)
      out.write(",")
      out.write(""""is_deterministic":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isDeterministic, indent, out)
      out.write(",")
      out.write(""""sql_data_access":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.sqlDataAccess, indent, out)
      out.write(",")
      out.write(""""is_null_call":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isNullCall, indent, out)
      out.write(",")
      out.write(""""sql_path":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.sqlPath, indent, out)
      out.write(",")
      out.write(""""schema_level_routine":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaLevelRoutine, indent, out)
      out.write(",")
      out.write(""""max_dynamic_result_sets":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.maxDynamicResultSets, indent, out)
      out.write(",")
      out.write(""""is_user_defined_cast":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isUserDefinedCast, indent, out)
      out.write(",")
      out.write(""""is_implicitly_invocable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isImplicitlyInvocable, indent, out)
      out.write(",")
      out.write(""""security_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.securityType, indent, out)
      out.write(",")
      out.write(""""to_sql_specific_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.toSqlSpecificCatalog, indent, out)
      out.write(",")
      out.write(""""to_sql_specific_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.toSqlSpecificSchema, indent, out)
      out.write(",")
      out.write(""""to_sql_specific_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.toSqlSpecificName, indent, out)
      out.write(",")
      out.write(""""as_locator":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.asLocator, indent, out)
      out.write(",")
      out.write(""""created":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.created, indent, out)
      out.write(",")
      out.write(""""last_altered":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.lastAltered, indent, out)
      out.write(",")
      out.write(""""new_savepoint_level":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.newSavepointLevel, indent, out)
      out.write(",")
      out.write(""""is_udt_dependent":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.isUdtDependent, indent, out)
      out.write(",")
      out.write(""""result_cast_from_data_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastFromDataType, indent, out)
      out.write(",")
      out.write(""""result_cast_as_locator":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastAsLocator, indent, out)
      out.write(",")
      out.write(""""result_cast_char_max_length":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.resultCastCharMaxLength, indent, out)
      out.write(",")
      out.write(""""result_cast_char_octet_length":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.resultCastCharOctetLength, indent, out)
      out.write(",")
      out.write(""""result_cast_char_set_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastCharSetCatalog, indent, out)
      out.write(",")
      out.write(""""result_cast_char_set_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastCharSetSchema, indent, out)
      out.write(",")
      out.write(""""result_cast_char_set_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastCharSetName, indent, out)
      out.write(",")
      out.write(""""result_cast_collation_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastCollationCatalog, indent, out)
      out.write(",")
      out.write(""""result_cast_collation_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastCollationSchema, indent, out)
      out.write(",")
      out.write(""""result_cast_collation_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastCollationName, indent, out)
      out.write(",")
      out.write(""""result_cast_numeric_precision":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.resultCastNumericPrecision, indent, out)
      out.write(",")
      out.write(""""result_cast_numeric_precision_radix":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.resultCastNumericPrecisionRadix, indent, out)
      out.write(",")
      out.write(""""result_cast_numeric_scale":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.resultCastNumericScale, indent, out)
      out.write(",")
      out.write(""""result_cast_datetime_precision":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.resultCastDatetimePrecision, indent, out)
      out.write(",")
      out.write(""""result_cast_interval_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastIntervalType, indent, out)
      out.write(",")
      out.write(""""result_cast_interval_precision":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.resultCastIntervalPrecision, indent, out)
      out.write(",")
      out.write(""""result_cast_type_udt_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastTypeUdtCatalog, indent, out)
      out.write(",")
      out.write(""""result_cast_type_udt_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastTypeUdtSchema, indent, out)
      out.write(",")
      out.write(""""result_cast_type_udt_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastTypeUdtName, indent, out)
      out.write(",")
      out.write(""""result_cast_scope_catalog":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastScopeCatalog, indent, out)
      out.write(",")
      out.write(""""result_cast_scope_schema":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastScopeSchema, indent, out)
      out.write(",")
      out.write(""""result_cast_scope_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastScopeName, indent, out)
      out.write(",")
      out.write(""""result_cast_maximum_cardinality":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.resultCastMaximumCardinality, indent, out)
      out.write(",")
      out.write(""""result_cast_dtd_identifier":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resultCastDtdIdentifier, indent, out)
      out.write("}")
    }
  }
}
