/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person_detail

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import adventureworks.userdefined.FirstName
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PersonDetailSqlRow(
  /** Points to [[sales.salesperson.SalespersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[person.person.PersonRow.title]] */
  title: Option[/* max 8 chars */ String],
  /** Points to [[person.person.PersonRow.firstname]] */
  firstname: /* user-picked */ FirstName,
  /** Points to [[person.person.PersonRow.middlename]] */
  middlename: Option[Name],
  /** Points to [[person.person.PersonRow.lastname]] */
  lastname: Name,
  /** Points to [[humanresources.employee.EmployeeRow.jobtitle]] */
  jobtitle: /* max 50 chars */ String,
  /** Points to [[person.address.AddressRow.addressline1]] */
  addressline1: Option[/* max 60 chars */ String],
  /** Points to [[person.address.AddressRow.city]] */
  city: Option[/* max 30 chars */ String],
  /** Points to [[person.address.AddressRow.postalcode]] */
  postalcode: Option[/* max 15 chars */ String],
  /** Points to [[person.address.AddressRow.rowguid]] */
  rowguid: /* user-picked */ String
)

object PersonDetailSqlRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PersonDetailSqlRow] = new JdbcDecoder[PersonDetailSqlRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PersonDetailSqlRow) =
      columIndex + 9 ->
        PersonDetailSqlRow(
          businessentityid = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          title = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          firstname = FirstName.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          middlename = JdbcDecoder.optionDecoder(Name.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2,
          lastname = Name.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          jobtitle = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 5, rs)._2,
          addressline1 = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          city = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          postalcode = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          rowguid = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 9, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PersonDetailSqlRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val businessentityid = jsonObj.get("businessentityid").toRight("Missing field 'businessentityid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val title = jsonObj.get("title").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val firstname = jsonObj.get("firstname").toRight("Missing field 'firstname'").flatMap(_.as(FirstName.jsonDecoder))
    val middlename = jsonObj.get("middlename").fold[Either[String, Option[Name]]](Right(None))(_.as(JsonDecoder.option(Name.jsonDecoder)))
    val lastname = jsonObj.get("lastname").toRight("Missing field 'lastname'").flatMap(_.as(Name.jsonDecoder))
    val jobtitle = jsonObj.get("jobtitle").toRight("Missing field 'jobtitle'").flatMap(_.as(JsonDecoder.string))
    val addressline1 = jsonObj.get("addressline1").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val city = jsonObj.get("city").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val postalcode = jsonObj.get("postalcode").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val rowguid = jsonObj.get("rowguid").toRight("Missing field 'rowguid'").flatMap(_.as(JsonDecoder.string))
    if (businessentityid.isRight && title.isRight && firstname.isRight && middlename.isRight && lastname.isRight && jobtitle.isRight && addressline1.isRight && city.isRight && postalcode.isRight && rowguid.isRight)
      Right(PersonDetailSqlRow(businessentityid = businessentityid.toOption.get, title = title.toOption.get, firstname = firstname.toOption.get, middlename = middlename.toOption.get, lastname = lastname.toOption.get, jobtitle = jobtitle.toOption.get, addressline1 = addressline1.toOption.get, city = city.toOption.get, postalcode = postalcode.toOption.get, rowguid = rowguid.toOption.get))
    else Left(List[Either[String, Any]](businessentityid, title, firstname, middlename, lastname, jobtitle, addressline1, city, postalcode, rowguid).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PersonDetailSqlRow] = new JsonEncoder[PersonDetailSqlRow] {
    override def unsafeEncode(a: PersonDetailSqlRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""businessentityid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.businessentityid, indent, out)
      out.write(",")
      out.write(""""title":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.title, indent, out)
      out.write(",")
      out.write(""""firstname":""")
      FirstName.jsonEncoder.unsafeEncode(a.firstname, indent, out)
      out.write(",")
      out.write(""""middlename":""")
      JsonEncoder.option(Name.jsonEncoder).unsafeEncode(a.middlename, indent, out)
      out.write(",")
      out.write(""""lastname":""")
      Name.jsonEncoder.unsafeEncode(a.lastname, indent, out)
      out.write(",")
      out.write(""""jobtitle":""")
      JsonEncoder.string.unsafeEncode(a.jobtitle, indent, out)
      out.write(",")
      out.write(""""addressline1":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.addressline1, indent, out)
      out.write(",")
      out.write(""""city":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.city, indent, out)
      out.write(",")
      out.write(""""postalcode":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.postalcode, indent, out)
      out.write(",")
      out.write(""""rowguid":""")
      JsonEncoder.string.unsafeEncode(a.rowguid, indent, out)
      out.write("}")
    }
  }
}
