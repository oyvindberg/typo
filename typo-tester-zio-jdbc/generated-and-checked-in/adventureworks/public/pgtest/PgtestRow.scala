/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtest

import adventureworks.Text
import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXml
import adventureworks.public.Mydomain
import adventureworks.public.Myenum
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: public.pgtest */
case class PgtestRow(
  bool: Boolean,
  box: TypoBox,
  bpchar: /* bpchar, max 3 chars */ String,
  bytea: TypoBytea,
  char: /* bpchar, max 1 chars */ String,
  circle: TypoCircle,
  date: TypoLocalDate,
  float4: Float,
  float8: Double,
  hstore: TypoHStore,
  inet: TypoInet,
  int2: TypoShort,
  int2vector: TypoInt2Vector,
  int4: Int,
  int8: Long,
  interval: TypoInterval,
  json: TypoJson,
  jsonb: TypoJsonb,
  line: TypoLine,
  lseg: TypoLineSegment,
  money: TypoMoney,
  mydomain: Mydomain,
  myenum: Myenum,
  name: String,
  numeric: BigDecimal,
  path: TypoPath,
  point: TypoPoint,
  polygon: TypoPolygon,
  text: String,
  time: TypoLocalTime,
  timestamp: TypoLocalDateTime,
  timestampz: TypoInstant,
  timez: TypoOffsetTime,
  uuid: TypoUUID,
  varchar: String,
  vector: TypoVector,
  xml: TypoXml,
  boxes: Array[TypoBox],
  bpchares: Array[/* bpchar */ String],
  chares: Array[/* bpchar */ String],
  circlees: Array[TypoCircle],
  datees: Array[TypoLocalDate],
  float4es: Array[Float],
  float8es: Array[Double],
  inetes: Array[TypoInet],
  int2es: Array[TypoShort],
  int2vectores: Array[TypoInt2Vector],
  int4es: Array[Int],
  int8es: Array[Long],
  intervales: Array[TypoInterval],
  jsones: Array[TypoJson],
  jsonbes: Array[TypoJsonb],
  linees: Array[TypoLine],
  lseges: Array[TypoLineSegment],
  moneyes: Array[TypoMoney],
  myenumes: Array[Myenum],
  namees: Array[String],
  numerices: Array[BigDecimal],
  pathes: Array[TypoPath],
  pointes: Array[TypoPoint],
  polygones: Array[TypoPolygon],
  textes: Array[String],
  timees: Array[TypoLocalTime],
  timestampes: Array[TypoLocalDateTime],
  timestampzes: Array[TypoInstant],
  timezes: Array[TypoOffsetTime],
  uuides: Array[TypoUUID],
  varchares: Array[String],
  xmles: Array[TypoXml]
)

object PgtestRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgtestRow] = new JdbcDecoder[PgtestRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgtestRow) =
      columIndex + 68 ->
        PgtestRow(
          bool = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 0, rs)._2,
          box = TypoBox.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          bpchar = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          bytea = TypoBytea.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          char = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 4, rs)._2,
          circle = TypoCircle.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          date = TypoLocalDate.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          float4 = JdbcDecoder.floatDecoder.unsafeDecode(columIndex + 7, rs)._2,
          float8 = JdbcDecoder.doubleDecoder.unsafeDecode(columIndex + 8, rs)._2,
          hstore = TypoHStore.jdbcDecoder.unsafeDecode(columIndex + 9, rs)._2,
          inet = TypoInet.jdbcDecoder.unsafeDecode(columIndex + 10, rs)._2,
          int2 = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 11, rs)._2,
          int2vector = TypoInt2Vector.jdbcDecoder.unsafeDecode(columIndex + 12, rs)._2,
          int4 = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 13, rs)._2,
          int8 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 14, rs)._2,
          interval = TypoInterval.jdbcDecoder.unsafeDecode(columIndex + 15, rs)._2,
          json = TypoJson.jdbcDecoder.unsafeDecode(columIndex + 16, rs)._2,
          jsonb = TypoJsonb.jdbcDecoder.unsafeDecode(columIndex + 17, rs)._2,
          line = TypoLine.jdbcDecoder.unsafeDecode(columIndex + 18, rs)._2,
          lseg = TypoLineSegment.jdbcDecoder.unsafeDecode(columIndex + 19, rs)._2,
          money = TypoMoney.jdbcDecoder.unsafeDecode(columIndex + 20, rs)._2,
          mydomain = Mydomain.jdbcDecoder.unsafeDecode(columIndex + 21, rs)._2,
          myenum = Myenum.jdbcDecoder.unsafeDecode(columIndex + 22, rs)._2,
          name = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 23, rs)._2,
          numeric = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 24, rs)._2,
          path = TypoPath.jdbcDecoder.unsafeDecode(columIndex + 25, rs)._2,
          point = TypoPoint.jdbcDecoder.unsafeDecode(columIndex + 26, rs)._2,
          polygon = TypoPolygon.jdbcDecoder.unsafeDecode(columIndex + 27, rs)._2,
          text = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 28, rs)._2,
          time = TypoLocalTime.jdbcDecoder.unsafeDecode(columIndex + 29, rs)._2,
          timestamp = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 30, rs)._2,
          timestampz = TypoInstant.jdbcDecoder.unsafeDecode(columIndex + 31, rs)._2,
          timez = TypoOffsetTime.jdbcDecoder.unsafeDecode(columIndex + 32, rs)._2,
          uuid = TypoUUID.jdbcDecoder.unsafeDecode(columIndex + 33, rs)._2,
          varchar = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 34, rs)._2,
          vector = TypoVector.jdbcDecoder.unsafeDecode(columIndex + 35, rs)._2,
          xml = TypoXml.jdbcDecoder.unsafeDecode(columIndex + 36, rs)._2,
          boxes = JdbcDecoder[Array[TypoBox]].unsafeDecode(columIndex + 37, rs)._2,
          bpchares = adventureworks.StringArrayDecoder.unsafeDecode(columIndex + 38, rs)._2,
          chares = adventureworks.StringArrayDecoder.unsafeDecode(columIndex + 39, rs)._2,
          circlees = JdbcDecoder[Array[TypoCircle]].unsafeDecode(columIndex + 40, rs)._2,
          datees = JdbcDecoder[Array[TypoLocalDate]].unsafeDecode(columIndex + 41, rs)._2,
          float4es = adventureworks.FloatArrayDecoder.unsafeDecode(columIndex + 42, rs)._2,
          float8es = adventureworks.DoubleArrayDecoder.unsafeDecode(columIndex + 43, rs)._2,
          inetes = JdbcDecoder[Array[TypoInet]].unsafeDecode(columIndex + 44, rs)._2,
          int2es = JdbcDecoder[Array[TypoShort]].unsafeDecode(columIndex + 45, rs)._2,
          int2vectores = JdbcDecoder[Array[TypoInt2Vector]].unsafeDecode(columIndex + 46, rs)._2,
          int4es = adventureworks.IntArrayDecoder.unsafeDecode(columIndex + 47, rs)._2,
          int8es = adventureworks.LongArrayDecoder.unsafeDecode(columIndex + 48, rs)._2,
          intervales = JdbcDecoder[Array[TypoInterval]].unsafeDecode(columIndex + 49, rs)._2,
          jsones = JdbcDecoder[Array[TypoJson]].unsafeDecode(columIndex + 50, rs)._2,
          jsonbes = JdbcDecoder[Array[TypoJsonb]].unsafeDecode(columIndex + 51, rs)._2,
          linees = JdbcDecoder[Array[TypoLine]].unsafeDecode(columIndex + 52, rs)._2,
          lseges = JdbcDecoder[Array[TypoLineSegment]].unsafeDecode(columIndex + 53, rs)._2,
          moneyes = JdbcDecoder[Array[TypoMoney]].unsafeDecode(columIndex + 54, rs)._2,
          myenumes = JdbcDecoder[Array[Myenum]].unsafeDecode(columIndex + 55, rs)._2,
          namees = adventureworks.StringArrayDecoder.unsafeDecode(columIndex + 56, rs)._2,
          numerices = adventureworks.ScalaBigDecimalArrayDecoder.unsafeDecode(columIndex + 57, rs)._2,
          pathes = JdbcDecoder[Array[TypoPath]].unsafeDecode(columIndex + 58, rs)._2,
          pointes = JdbcDecoder[Array[TypoPoint]].unsafeDecode(columIndex + 59, rs)._2,
          polygones = JdbcDecoder[Array[TypoPolygon]].unsafeDecode(columIndex + 60, rs)._2,
          textes = adventureworks.StringArrayDecoder.unsafeDecode(columIndex + 61, rs)._2,
          timees = JdbcDecoder[Array[TypoLocalTime]].unsafeDecode(columIndex + 62, rs)._2,
          timestampes = JdbcDecoder[Array[TypoLocalDateTime]].unsafeDecode(columIndex + 63, rs)._2,
          timestampzes = JdbcDecoder[Array[TypoInstant]].unsafeDecode(columIndex + 64, rs)._2,
          timezes = JdbcDecoder[Array[TypoOffsetTime]].unsafeDecode(columIndex + 65, rs)._2,
          uuides = JdbcDecoder[Array[TypoUUID]].unsafeDecode(columIndex + 66, rs)._2,
          varchares = adventureworks.StringArrayDecoder.unsafeDecode(columIndex + 67, rs)._2,
          xmles = JdbcDecoder[Array[TypoXml]].unsafeDecode(columIndex + 68, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgtestRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val bool = jsonObj.get("bool").toRight("Missing field 'bool'").flatMap(_.as(JsonDecoder.boolean))
    val box = jsonObj.get("box").toRight("Missing field 'box'").flatMap(_.as(TypoBox.jsonDecoder))
    val bpchar = jsonObj.get("bpchar").toRight("Missing field 'bpchar'").flatMap(_.as(JsonDecoder.string))
    val bytea = jsonObj.get("bytea").toRight("Missing field 'bytea'").flatMap(_.as(TypoBytea.jsonDecoder))
    val char = jsonObj.get("char").toRight("Missing field 'char'").flatMap(_.as(JsonDecoder.string))
    val circle = jsonObj.get("circle").toRight("Missing field 'circle'").flatMap(_.as(TypoCircle.jsonDecoder))
    val date = jsonObj.get("date").toRight("Missing field 'date'").flatMap(_.as(TypoLocalDate.jsonDecoder))
    val float4 = jsonObj.get("float4").toRight("Missing field 'float4'").flatMap(_.as(JsonDecoder.float))
    val float8 = jsonObj.get("float8").toRight("Missing field 'float8'").flatMap(_.as(JsonDecoder.double))
    val hstore = jsonObj.get("hstore").toRight("Missing field 'hstore'").flatMap(_.as(TypoHStore.jsonDecoder))
    val inet = jsonObj.get("inet").toRight("Missing field 'inet'").flatMap(_.as(TypoInet.jsonDecoder))
    val int2 = jsonObj.get("int2").toRight("Missing field 'int2'").flatMap(_.as(TypoShort.jsonDecoder))
    val int2vector = jsonObj.get("int2vector").toRight("Missing field 'int2vector'").flatMap(_.as(TypoInt2Vector.jsonDecoder))
    val int4 = jsonObj.get("int4").toRight("Missing field 'int4'").flatMap(_.as(JsonDecoder.int))
    val int8 = jsonObj.get("int8").toRight("Missing field 'int8'").flatMap(_.as(JsonDecoder.long))
    val interval = jsonObj.get("interval").toRight("Missing field 'interval'").flatMap(_.as(TypoInterval.jsonDecoder))
    val json = jsonObj.get("json").toRight("Missing field 'json'").flatMap(_.as(TypoJson.jsonDecoder))
    val jsonb = jsonObj.get("jsonb").toRight("Missing field 'jsonb'").flatMap(_.as(TypoJsonb.jsonDecoder))
    val line = jsonObj.get("line").toRight("Missing field 'line'").flatMap(_.as(TypoLine.jsonDecoder))
    val lseg = jsonObj.get("lseg").toRight("Missing field 'lseg'").flatMap(_.as(TypoLineSegment.jsonDecoder))
    val money = jsonObj.get("money").toRight("Missing field 'money'").flatMap(_.as(TypoMoney.jsonDecoder))
    val mydomain = jsonObj.get("mydomain").toRight("Missing field 'mydomain'").flatMap(_.as(Mydomain.jsonDecoder))
    val myenum = jsonObj.get("myenum").toRight("Missing field 'myenum'").flatMap(_.as(Myenum.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(JsonDecoder.string))
    val numeric = jsonObj.get("numeric").toRight("Missing field 'numeric'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val path = jsonObj.get("path").toRight("Missing field 'path'").flatMap(_.as(TypoPath.jsonDecoder))
    val point = jsonObj.get("point").toRight("Missing field 'point'").flatMap(_.as(TypoPoint.jsonDecoder))
    val polygon = jsonObj.get("polygon").toRight("Missing field 'polygon'").flatMap(_.as(TypoPolygon.jsonDecoder))
    val text = jsonObj.get("text").toRight("Missing field 'text'").flatMap(_.as(JsonDecoder.string))
    val time = jsonObj.get("time").toRight("Missing field 'time'").flatMap(_.as(TypoLocalTime.jsonDecoder))
    val timestamp = jsonObj.get("timestamp").toRight("Missing field 'timestamp'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    val timestampz = jsonObj.get("timestampz").toRight("Missing field 'timestampz'").flatMap(_.as(TypoInstant.jsonDecoder))
    val timez = jsonObj.get("timez").toRight("Missing field 'timez'").flatMap(_.as(TypoOffsetTime.jsonDecoder))
    val uuid = jsonObj.get("uuid").toRight("Missing field 'uuid'").flatMap(_.as(TypoUUID.jsonDecoder))
    val varchar = jsonObj.get("varchar").toRight("Missing field 'varchar'").flatMap(_.as(JsonDecoder.string))
    val vector = jsonObj.get("vector").toRight("Missing field 'vector'").flatMap(_.as(TypoVector.jsonDecoder))
    val xml = jsonObj.get("xml").toRight("Missing field 'xml'").flatMap(_.as(TypoXml.jsonDecoder))
    val boxes = jsonObj.get("boxes").toRight("Missing field 'boxes'").flatMap(_.as(JsonDecoder.array[TypoBox](using TypoBox.jsonDecoder, implicitly)))
    val bpchares = jsonObj.get("bpchares").toRight("Missing field 'bpchares'").flatMap(_.as(JsonDecoder.array[String](using JsonDecoder.string, implicitly)))
    val chares = jsonObj.get("chares").toRight("Missing field 'chares'").flatMap(_.as(JsonDecoder.array[String](using JsonDecoder.string, implicitly)))
    val circlees = jsonObj.get("circlees").toRight("Missing field 'circlees'").flatMap(_.as(JsonDecoder.array[TypoCircle](using TypoCircle.jsonDecoder, implicitly)))
    val datees = jsonObj.get("datees").toRight("Missing field 'datees'").flatMap(_.as(JsonDecoder.array[TypoLocalDate](using TypoLocalDate.jsonDecoder, implicitly)))
    val float4es = jsonObj.get("float4es").toRight("Missing field 'float4es'").flatMap(_.as(JsonDecoder.array[Float](using JsonDecoder.float, implicitly)))
    val float8es = jsonObj.get("float8es").toRight("Missing field 'float8es'").flatMap(_.as(JsonDecoder.array[Double](using JsonDecoder.double, implicitly)))
    val inetes = jsonObj.get("inetes").toRight("Missing field 'inetes'").flatMap(_.as(JsonDecoder.array[TypoInet](using TypoInet.jsonDecoder, implicitly)))
    val int2es = jsonObj.get("int2es").toRight("Missing field 'int2es'").flatMap(_.as(JsonDecoder.array[TypoShort](using TypoShort.jsonDecoder, implicitly)))
    val int2vectores = jsonObj.get("int2vectores").toRight("Missing field 'int2vectores'").flatMap(_.as(JsonDecoder.array[TypoInt2Vector](using TypoInt2Vector.jsonDecoder, implicitly)))
    val int4es = jsonObj.get("int4es").toRight("Missing field 'int4es'").flatMap(_.as(JsonDecoder.array[Int](using JsonDecoder.int, implicitly)))
    val int8es = jsonObj.get("int8es").toRight("Missing field 'int8es'").flatMap(_.as(JsonDecoder.array[Long](using JsonDecoder.long, implicitly)))
    val intervales = jsonObj.get("intervales").toRight("Missing field 'intervales'").flatMap(_.as(JsonDecoder.array[TypoInterval](using TypoInterval.jsonDecoder, implicitly)))
    val jsones = jsonObj.get("jsones").toRight("Missing field 'jsones'").flatMap(_.as(JsonDecoder.array[TypoJson](using TypoJson.jsonDecoder, implicitly)))
    val jsonbes = jsonObj.get("jsonbes").toRight("Missing field 'jsonbes'").flatMap(_.as(JsonDecoder.array[TypoJsonb](using TypoJsonb.jsonDecoder, implicitly)))
    val linees = jsonObj.get("linees").toRight("Missing field 'linees'").flatMap(_.as(JsonDecoder.array[TypoLine](using TypoLine.jsonDecoder, implicitly)))
    val lseges = jsonObj.get("lseges").toRight("Missing field 'lseges'").flatMap(_.as(JsonDecoder.array[TypoLineSegment](using TypoLineSegment.jsonDecoder, implicitly)))
    val moneyes = jsonObj.get("moneyes").toRight("Missing field 'moneyes'").flatMap(_.as(JsonDecoder.array[TypoMoney](using TypoMoney.jsonDecoder, implicitly)))
    val myenumes = jsonObj.get("myenumes").toRight("Missing field 'myenumes'").flatMap(_.as(JsonDecoder.array[Myenum](using Myenum.jsonDecoder, implicitly)))
    val namees = jsonObj.get("namees").toRight("Missing field 'namees'").flatMap(_.as(JsonDecoder.array[String](using JsonDecoder.string, implicitly)))
    val numerices = jsonObj.get("numerices").toRight("Missing field 'numerices'").flatMap(_.as(JsonDecoder.array[BigDecimal](using JsonDecoder.scalaBigDecimal, implicitly)))
    val pathes = jsonObj.get("pathes").toRight("Missing field 'pathes'").flatMap(_.as(JsonDecoder.array[TypoPath](using TypoPath.jsonDecoder, implicitly)))
    val pointes = jsonObj.get("pointes").toRight("Missing field 'pointes'").flatMap(_.as(JsonDecoder.array[TypoPoint](using TypoPoint.jsonDecoder, implicitly)))
    val polygones = jsonObj.get("polygones").toRight("Missing field 'polygones'").flatMap(_.as(JsonDecoder.array[TypoPolygon](using TypoPolygon.jsonDecoder, implicitly)))
    val textes = jsonObj.get("textes").toRight("Missing field 'textes'").flatMap(_.as(JsonDecoder.array[String](using JsonDecoder.string, implicitly)))
    val timees = jsonObj.get("timees").toRight("Missing field 'timees'").flatMap(_.as(JsonDecoder.array[TypoLocalTime](using TypoLocalTime.jsonDecoder, implicitly)))
    val timestampes = jsonObj.get("timestampes").toRight("Missing field 'timestampes'").flatMap(_.as(JsonDecoder.array[TypoLocalDateTime](using TypoLocalDateTime.jsonDecoder, implicitly)))
    val timestampzes = jsonObj.get("timestampzes").toRight("Missing field 'timestampzes'").flatMap(_.as(JsonDecoder.array[TypoInstant](using TypoInstant.jsonDecoder, implicitly)))
    val timezes = jsonObj.get("timezes").toRight("Missing field 'timezes'").flatMap(_.as(JsonDecoder.array[TypoOffsetTime](using TypoOffsetTime.jsonDecoder, implicitly)))
    val uuides = jsonObj.get("uuides").toRight("Missing field 'uuides'").flatMap(_.as(JsonDecoder.array[TypoUUID](using TypoUUID.jsonDecoder, implicitly)))
    val varchares = jsonObj.get("varchares").toRight("Missing field 'varchares'").flatMap(_.as(JsonDecoder.array[String](using JsonDecoder.string, implicitly)))
    val xmles = jsonObj.get("xmles").toRight("Missing field 'xmles'").flatMap(_.as(JsonDecoder.array[TypoXml](using TypoXml.jsonDecoder, implicitly)))
    if (bool.isRight && box.isRight && bpchar.isRight && bytea.isRight && char.isRight && circle.isRight && date.isRight && float4.isRight && float8.isRight && hstore.isRight && inet.isRight && int2.isRight && int2vector.isRight && int4.isRight && int8.isRight && interval.isRight && json.isRight && jsonb.isRight && line.isRight && lseg.isRight && money.isRight && mydomain.isRight && myenum.isRight && name.isRight && numeric.isRight && path.isRight && point.isRight && polygon.isRight && text.isRight && time.isRight && timestamp.isRight && timestampz.isRight && timez.isRight && uuid.isRight && varchar.isRight && vector.isRight && xml.isRight && boxes.isRight && bpchares.isRight && chares.isRight && circlees.isRight && datees.isRight && float4es.isRight && float8es.isRight && inetes.isRight && int2es.isRight && int2vectores.isRight && int4es.isRight && int8es.isRight && intervales.isRight && jsones.isRight && jsonbes.isRight && linees.isRight && lseges.isRight && moneyes.isRight && myenumes.isRight && namees.isRight && numerices.isRight && pathes.isRight && pointes.isRight && polygones.isRight && textes.isRight && timees.isRight && timestampes.isRight && timestampzes.isRight && timezes.isRight && uuides.isRight && varchares.isRight && xmles.isRight)
      Right(PgtestRow(bool = bool.toOption.get, box = box.toOption.get, bpchar = bpchar.toOption.get, bytea = bytea.toOption.get, char = char.toOption.get, circle = circle.toOption.get, date = date.toOption.get, float4 = float4.toOption.get, float8 = float8.toOption.get, hstore = hstore.toOption.get, inet = inet.toOption.get, int2 = int2.toOption.get, int2vector = int2vector.toOption.get, int4 = int4.toOption.get, int8 = int8.toOption.get, interval = interval.toOption.get, json = json.toOption.get, jsonb = jsonb.toOption.get, line = line.toOption.get, lseg = lseg.toOption.get, money = money.toOption.get, mydomain = mydomain.toOption.get, myenum = myenum.toOption.get, name = name.toOption.get, numeric = numeric.toOption.get, path = path.toOption.get, point = point.toOption.get, polygon = polygon.toOption.get, text = text.toOption.get, time = time.toOption.get, timestamp = timestamp.toOption.get, timestampz = timestampz.toOption.get, timez = timez.toOption.get, uuid = uuid.toOption.get, varchar = varchar.toOption.get, vector = vector.toOption.get, xml = xml.toOption.get, boxes = boxes.toOption.get, bpchares = bpchares.toOption.get, chares = chares.toOption.get, circlees = circlees.toOption.get, datees = datees.toOption.get, float4es = float4es.toOption.get, float8es = float8es.toOption.get, inetes = inetes.toOption.get, int2es = int2es.toOption.get, int2vectores = int2vectores.toOption.get, int4es = int4es.toOption.get, int8es = int8es.toOption.get, intervales = intervales.toOption.get, jsones = jsones.toOption.get, jsonbes = jsonbes.toOption.get, linees = linees.toOption.get, lseges = lseges.toOption.get, moneyes = moneyes.toOption.get, myenumes = myenumes.toOption.get, namees = namees.toOption.get, numerices = numerices.toOption.get, pathes = pathes.toOption.get, pointes = pointes.toOption.get, polygones = polygones.toOption.get, textes = textes.toOption.get, timees = timees.toOption.get, timestampes = timestampes.toOption.get, timestampzes = timestampzes.toOption.get, timezes = timezes.toOption.get, uuides = uuides.toOption.get, varchares = varchares.toOption.get, xmles = xmles.toOption.get))
    else Left(List[Either[String, Any]](bool, box, bpchar, bytea, char, circle, date, float4, float8, hstore, inet, int2, int2vector, int4, int8, interval, json, jsonb, line, lseg, money, mydomain, myenum, name, numeric, path, point, polygon, text, time, timestamp, timestampz, timez, uuid, varchar, vector, xml, boxes, bpchares, chares, circlees, datees, float4es, float8es, inetes, int2es, int2vectores, int4es, int8es, intervales, jsones, jsonbes, linees, lseges, moneyes, myenumes, namees, numerices, pathes, pointes, polygones, textes, timees, timestampes, timestampzes, timezes, uuides, varchares, xmles).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgtestRow] = new JsonEncoder[PgtestRow] {
    override def unsafeEncode(a: PgtestRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""bool":""")
      JsonEncoder.boolean.unsafeEncode(a.bool, indent, out)
      out.write(",")
      out.write(""""box":""")
      TypoBox.jsonEncoder.unsafeEncode(a.box, indent, out)
      out.write(",")
      out.write(""""bpchar":""")
      JsonEncoder.string.unsafeEncode(a.bpchar, indent, out)
      out.write(",")
      out.write(""""bytea":""")
      TypoBytea.jsonEncoder.unsafeEncode(a.bytea, indent, out)
      out.write(",")
      out.write(""""char":""")
      JsonEncoder.string.unsafeEncode(a.char, indent, out)
      out.write(",")
      out.write(""""circle":""")
      TypoCircle.jsonEncoder.unsafeEncode(a.circle, indent, out)
      out.write(",")
      out.write(""""date":""")
      TypoLocalDate.jsonEncoder.unsafeEncode(a.date, indent, out)
      out.write(",")
      out.write(""""float4":""")
      JsonEncoder.float.unsafeEncode(a.float4, indent, out)
      out.write(",")
      out.write(""""float8":""")
      JsonEncoder.double.unsafeEncode(a.float8, indent, out)
      out.write(",")
      out.write(""""hstore":""")
      TypoHStore.jsonEncoder.unsafeEncode(a.hstore, indent, out)
      out.write(",")
      out.write(""""inet":""")
      TypoInet.jsonEncoder.unsafeEncode(a.inet, indent, out)
      out.write(",")
      out.write(""""int2":""")
      TypoShort.jsonEncoder.unsafeEncode(a.int2, indent, out)
      out.write(",")
      out.write(""""int2vector":""")
      TypoInt2Vector.jsonEncoder.unsafeEncode(a.int2vector, indent, out)
      out.write(",")
      out.write(""""int4":""")
      JsonEncoder.int.unsafeEncode(a.int4, indent, out)
      out.write(",")
      out.write(""""int8":""")
      JsonEncoder.long.unsafeEncode(a.int8, indent, out)
      out.write(",")
      out.write(""""interval":""")
      TypoInterval.jsonEncoder.unsafeEncode(a.interval, indent, out)
      out.write(",")
      out.write(""""json":""")
      TypoJson.jsonEncoder.unsafeEncode(a.json, indent, out)
      out.write(",")
      out.write(""""jsonb":""")
      TypoJsonb.jsonEncoder.unsafeEncode(a.jsonb, indent, out)
      out.write(",")
      out.write(""""line":""")
      TypoLine.jsonEncoder.unsafeEncode(a.line, indent, out)
      out.write(",")
      out.write(""""lseg":""")
      TypoLineSegment.jsonEncoder.unsafeEncode(a.lseg, indent, out)
      out.write(",")
      out.write(""""money":""")
      TypoMoney.jsonEncoder.unsafeEncode(a.money, indent, out)
      out.write(",")
      out.write(""""mydomain":""")
      Mydomain.jsonEncoder.unsafeEncode(a.mydomain, indent, out)
      out.write(",")
      out.write(""""myenum":""")
      Myenum.jsonEncoder.unsafeEncode(a.myenum, indent, out)
      out.write(",")
      out.write(""""name":""")
      JsonEncoder.string.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""numeric":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.numeric, indent, out)
      out.write(",")
      out.write(""""path":""")
      TypoPath.jsonEncoder.unsafeEncode(a.path, indent, out)
      out.write(",")
      out.write(""""point":""")
      TypoPoint.jsonEncoder.unsafeEncode(a.point, indent, out)
      out.write(",")
      out.write(""""polygon":""")
      TypoPolygon.jsonEncoder.unsafeEncode(a.polygon, indent, out)
      out.write(",")
      out.write(""""text":""")
      JsonEncoder.string.unsafeEncode(a.text, indent, out)
      out.write(",")
      out.write(""""time":""")
      TypoLocalTime.jsonEncoder.unsafeEncode(a.time, indent, out)
      out.write(",")
      out.write(""""timestamp":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.timestamp, indent, out)
      out.write(",")
      out.write(""""timestampz":""")
      TypoInstant.jsonEncoder.unsafeEncode(a.timestampz, indent, out)
      out.write(",")
      out.write(""""timez":""")
      TypoOffsetTime.jsonEncoder.unsafeEncode(a.timez, indent, out)
      out.write(",")
      out.write(""""uuid":""")
      TypoUUID.jsonEncoder.unsafeEncode(a.uuid, indent, out)
      out.write(",")
      out.write(""""varchar":""")
      JsonEncoder.string.unsafeEncode(a.varchar, indent, out)
      out.write(",")
      out.write(""""vector":""")
      TypoVector.jsonEncoder.unsafeEncode(a.vector, indent, out)
      out.write(",")
      out.write(""""xml":""")
      TypoXml.jsonEncoder.unsafeEncode(a.xml, indent, out)
      out.write(",")
      out.write(""""boxes":""")
      JsonEncoder.array[TypoBox](using TypoBox.jsonEncoder, implicitly).unsafeEncode(a.boxes, indent, out)
      out.write(",")
      out.write(""""bpchares":""")
      JsonEncoder.array[String](using JsonEncoder.string, implicitly).unsafeEncode(a.bpchares, indent, out)
      out.write(",")
      out.write(""""chares":""")
      JsonEncoder.array[String](using JsonEncoder.string, implicitly).unsafeEncode(a.chares, indent, out)
      out.write(",")
      out.write(""""circlees":""")
      JsonEncoder.array[TypoCircle](using TypoCircle.jsonEncoder, implicitly).unsafeEncode(a.circlees, indent, out)
      out.write(",")
      out.write(""""datees":""")
      JsonEncoder.array[TypoLocalDate](using TypoLocalDate.jsonEncoder, implicitly).unsafeEncode(a.datees, indent, out)
      out.write(",")
      out.write(""""float4es":""")
      JsonEncoder.array[Float](using JsonEncoder.float, implicitly).unsafeEncode(a.float4es, indent, out)
      out.write(",")
      out.write(""""float8es":""")
      JsonEncoder.array[Double](using JsonEncoder.double, implicitly).unsafeEncode(a.float8es, indent, out)
      out.write(",")
      out.write(""""inetes":""")
      JsonEncoder.array[TypoInet](using TypoInet.jsonEncoder, implicitly).unsafeEncode(a.inetes, indent, out)
      out.write(",")
      out.write(""""int2es":""")
      JsonEncoder.array[TypoShort](using TypoShort.jsonEncoder, implicitly).unsafeEncode(a.int2es, indent, out)
      out.write(",")
      out.write(""""int2vectores":""")
      JsonEncoder.array[TypoInt2Vector](using TypoInt2Vector.jsonEncoder, implicitly).unsafeEncode(a.int2vectores, indent, out)
      out.write(",")
      out.write(""""int4es":""")
      JsonEncoder.array[Int](using JsonEncoder.int, implicitly).unsafeEncode(a.int4es, indent, out)
      out.write(",")
      out.write(""""int8es":""")
      JsonEncoder.array[Long](using JsonEncoder.long, implicitly).unsafeEncode(a.int8es, indent, out)
      out.write(",")
      out.write(""""intervales":""")
      JsonEncoder.array[TypoInterval](using TypoInterval.jsonEncoder, implicitly).unsafeEncode(a.intervales, indent, out)
      out.write(",")
      out.write(""""jsones":""")
      JsonEncoder.array[TypoJson](using TypoJson.jsonEncoder, implicitly).unsafeEncode(a.jsones, indent, out)
      out.write(",")
      out.write(""""jsonbes":""")
      JsonEncoder.array[TypoJsonb](using TypoJsonb.jsonEncoder, implicitly).unsafeEncode(a.jsonbes, indent, out)
      out.write(",")
      out.write(""""linees":""")
      JsonEncoder.array[TypoLine](using TypoLine.jsonEncoder, implicitly).unsafeEncode(a.linees, indent, out)
      out.write(",")
      out.write(""""lseges":""")
      JsonEncoder.array[TypoLineSegment](using TypoLineSegment.jsonEncoder, implicitly).unsafeEncode(a.lseges, indent, out)
      out.write(",")
      out.write(""""moneyes":""")
      JsonEncoder.array[TypoMoney](using TypoMoney.jsonEncoder, implicitly).unsafeEncode(a.moneyes, indent, out)
      out.write(",")
      out.write(""""myenumes":""")
      JsonEncoder.array[Myenum](using Myenum.jsonEncoder, implicitly).unsafeEncode(a.myenumes, indent, out)
      out.write(",")
      out.write(""""namees":""")
      JsonEncoder.array[String](using JsonEncoder.string, implicitly).unsafeEncode(a.namees, indent, out)
      out.write(",")
      out.write(""""numerices":""")
      JsonEncoder.array[BigDecimal](using JsonEncoder.scalaBigDecimal, implicitly).unsafeEncode(a.numerices, indent, out)
      out.write(",")
      out.write(""""pathes":""")
      JsonEncoder.array[TypoPath](using TypoPath.jsonEncoder, implicitly).unsafeEncode(a.pathes, indent, out)
      out.write(",")
      out.write(""""pointes":""")
      JsonEncoder.array[TypoPoint](using TypoPoint.jsonEncoder, implicitly).unsafeEncode(a.pointes, indent, out)
      out.write(",")
      out.write(""""polygones":""")
      JsonEncoder.array[TypoPolygon](using TypoPolygon.jsonEncoder, implicitly).unsafeEncode(a.polygones, indent, out)
      out.write(",")
      out.write(""""textes":""")
      JsonEncoder.array[String](using JsonEncoder.string, implicitly).unsafeEncode(a.textes, indent, out)
      out.write(",")
      out.write(""""timees":""")
      JsonEncoder.array[TypoLocalTime](using TypoLocalTime.jsonEncoder, implicitly).unsafeEncode(a.timees, indent, out)
      out.write(",")
      out.write(""""timestampes":""")
      JsonEncoder.array[TypoLocalDateTime](using TypoLocalDateTime.jsonEncoder, implicitly).unsafeEncode(a.timestampes, indent, out)
      out.write(",")
      out.write(""""timestampzes":""")
      JsonEncoder.array[TypoInstant](using TypoInstant.jsonEncoder, implicitly).unsafeEncode(a.timestampzes, indent, out)
      out.write(",")
      out.write(""""timezes":""")
      JsonEncoder.array[TypoOffsetTime](using TypoOffsetTime.jsonEncoder, implicitly).unsafeEncode(a.timezes, indent, out)
      out.write(",")
      out.write(""""uuides":""")
      JsonEncoder.array[TypoUUID](using TypoUUID.jsonEncoder, implicitly).unsafeEncode(a.uuides, indent, out)
      out.write(",")
      out.write(""""varchares":""")
      JsonEncoder.array[String](using JsonEncoder.string, implicitly).unsafeEncode(a.varchares, indent, out)
      out.write(",")
      out.write(""""xmles":""")
      JsonEncoder.array[TypoXml](using TypoXml.jsonEncoder, implicitly).unsafeEncode(a.xmles, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[PgtestRow] = Text.instance[PgtestRow]{ (row, sb) =>
    Text.booleanInstance.unsafeEncode(row.bool, sb)
    sb.append(Text.DELIMETER)
    TypoBox.text.unsafeEncode(row.box, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.bpchar, sb)
    sb.append(Text.DELIMETER)
    TypoBytea.text.unsafeEncode(row.bytea, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.char, sb)
    sb.append(Text.DELIMETER)
    TypoCircle.text.unsafeEncode(row.circle, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDate.text.unsafeEncode(row.date, sb)
    sb.append(Text.DELIMETER)
    Text.floatInstance.unsafeEncode(row.float4, sb)
    sb.append(Text.DELIMETER)
    Text.doubleInstance.unsafeEncode(row.float8, sb)
    sb.append(Text.DELIMETER)
    TypoHStore.text.unsafeEncode(row.hstore, sb)
    sb.append(Text.DELIMETER)
    TypoInet.text.unsafeEncode(row.inet, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.int2, sb)
    sb.append(Text.DELIMETER)
    TypoInt2Vector.text.unsafeEncode(row.int2vector, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.int4, sb)
    sb.append(Text.DELIMETER)
    Text.longInstance.unsafeEncode(row.int8, sb)
    sb.append(Text.DELIMETER)
    TypoInterval.text.unsafeEncode(row.interval, sb)
    sb.append(Text.DELIMETER)
    TypoJson.text.unsafeEncode(row.json, sb)
    sb.append(Text.DELIMETER)
    TypoJsonb.text.unsafeEncode(row.jsonb, sb)
    sb.append(Text.DELIMETER)
    TypoLine.text.unsafeEncode(row.line, sb)
    sb.append(Text.DELIMETER)
    TypoLineSegment.text.unsafeEncode(row.lseg, sb)
    sb.append(Text.DELIMETER)
    TypoMoney.text.unsafeEncode(row.money, sb)
    sb.append(Text.DELIMETER)
    Mydomain.text.unsafeEncode(row.mydomain, sb)
    sb.append(Text.DELIMETER)
    Myenum.text.unsafeEncode(row.myenum, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.numeric, sb)
    sb.append(Text.DELIMETER)
    TypoPath.text.unsafeEncode(row.path, sb)
    sb.append(Text.DELIMETER)
    TypoPoint.text.unsafeEncode(row.point, sb)
    sb.append(Text.DELIMETER)
    TypoPolygon.text.unsafeEncode(row.polygon, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.text, sb)
    sb.append(Text.DELIMETER)
    TypoLocalTime.text.unsafeEncode(row.time, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.timestamp, sb)
    sb.append(Text.DELIMETER)
    TypoInstant.text.unsafeEncode(row.timestampz, sb)
    sb.append(Text.DELIMETER)
    TypoOffsetTime.text.unsafeEncode(row.timez, sb)
    sb.append(Text.DELIMETER)
    TypoUUID.text.unsafeEncode(row.uuid, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.varchar, sb)
    sb.append(Text.DELIMETER)
    TypoVector.text.unsafeEncode(row.vector, sb)
    sb.append(Text.DELIMETER)
    TypoXml.text.unsafeEncode(row.xml, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoBox](TypoBox.text, implicitly).unsafeEncode(row.boxes, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.bpchares, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.chares, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoCircle](TypoCircle.text, implicitly).unsafeEncode(row.circlees, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLocalDate](TypoLocalDate.text, implicitly).unsafeEncode(row.datees, sb)
    sb.append(Text.DELIMETER)
    Text[Array[Float]].unsafeEncode(row.float4es, sb)
    sb.append(Text.DELIMETER)
    Text[Array[Double]].unsafeEncode(row.float8es, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoInet](TypoInet.text, implicitly).unsafeEncode(row.inetes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoShort](TypoShort.text, implicitly).unsafeEncode(row.int2es, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoInt2Vector](TypoInt2Vector.text, implicitly).unsafeEncode(row.int2vectores, sb)
    sb.append(Text.DELIMETER)
    Text[Array[Int]].unsafeEncode(row.int4es, sb)
    sb.append(Text.DELIMETER)
    Text[Array[Long]].unsafeEncode(row.int8es, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoInterval](TypoInterval.text, implicitly).unsafeEncode(row.intervales, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoJson](TypoJson.text, implicitly).unsafeEncode(row.jsones, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoJsonb](TypoJsonb.text, implicitly).unsafeEncode(row.jsonbes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLine](TypoLine.text, implicitly).unsafeEncode(row.linees, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLineSegment](TypoLineSegment.text, implicitly).unsafeEncode(row.lseges, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoMoney](TypoMoney.text, implicitly).unsafeEncode(row.moneyes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, Myenum](Myenum.text, implicitly).unsafeEncode(row.myenumes, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.namees, sb)
    sb.append(Text.DELIMETER)
    Text[Array[BigDecimal]].unsafeEncode(row.numerices, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoPath](TypoPath.text, implicitly).unsafeEncode(row.pathes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoPoint](TypoPoint.text, implicitly).unsafeEncode(row.pointes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoPolygon](TypoPolygon.text, implicitly).unsafeEncode(row.polygones, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.textes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLocalTime](TypoLocalTime.text, implicitly).unsafeEncode(row.timees, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLocalDateTime](TypoLocalDateTime.text, implicitly).unsafeEncode(row.timestampes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoInstant](TypoInstant.text, implicitly).unsafeEncode(row.timestampzes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoOffsetTime](TypoOffsetTime.text, implicitly).unsafeEncode(row.timezes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoUUID](TypoUUID.text, implicitly).unsafeEncode(row.uuides, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.varchares, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoXml](TypoXml.text, implicitly).unsafeEncode(row.xmles, sb)
  }
}
