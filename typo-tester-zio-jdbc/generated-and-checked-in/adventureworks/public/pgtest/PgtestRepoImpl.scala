/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtest

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgtestRepoImpl extends PgtestRepo {
  override def delete: DeleteBuilder[PgtestFields, PgtestRow] = {
    DeleteBuilder("public.pgtest", PgtestFields)
  }
  override def insert(unsaved: PgtestRow): ZIO[ZConnection, Throwable, PgtestRow] = {
    sql"""insert into public.pgtest("box", "circle", "line", "lseg", "path", "point", "polygon", "interval", "money", "xml", "json", "jsonb", "hstore", "inet", "timestamp", "timestampz", "time", "timez", "date", "uuid", "numeric", "boxes", "circlees", "linees", "lseges", "pathes", "pointes", "polygones", "intervales", "moneyes", "xmles", "jsones", "jsonbes", "hstores", "inets", "timestamps", "timestampzs", "times", "timezs", "dates", "uuids", "numerics")
          values (???::box, ???::circle, ???::line, ???::lseg, ???::path, ???::point, ???::polygon, ???::interval, ???::money, ???::xml, ???::json, ???::jsonb, ???::hstore, ???::inet, ???::timestamp, ???::timestamptz, ???::time, ???::timetz, ???::date, ???::uuid, ???::numeric, ???::_box, ???::_circle, ???::_line, ???::_lseg, ???::_path, ???::_point, ???::_polygon, ???::_interval, ???::_money, ???::_xml, ???::_json, ???::_jsonb, ???::_hstore, ???::_inet, ???::_timestamp, ???::_timestamptz, ???::_time, ???::_timetz, ???::_date, ???::_uuid, ???::_numeric)
          returning "box", "circle", "line", "lseg", "path", "point", "polygon", "interval", "money"::numeric, "xml", "json", "jsonb", "hstore", "inet", "timestamp"::text, "timestampz"::text, "time"::text, "timez"::text, "date"::text, "uuid", "numeric", "boxes", "circlees", "linees", "lseges", "pathes", "pointes", "polygones", "intervales", "moneyes"::numeric[], "xmles", "jsones", "jsonbes", "hstores", "inets", "timestamps"::text[], "timestampzs"::text[], "times"::text[], "timezs"::text[], "dates"::text[], "uuids", "numerics"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgtestFields, PgtestRow] = {
    SelectBuilderSql("public.pgtest", PgtestFields, PgtestRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgtestRow] = {
    sql"""select "box", "circle", "line", "lseg", "path", "point", "polygon", "interval", "money"::numeric, "xml", "json", "jsonb", "hstore", "inet", "timestamp"::text, "timestampz"::text, "time"::text, "timez"::text, "date"::text, "uuid", "numeric", "boxes", "circlees", "linees", "lseges", "pathes", "pointes", "polygones", "intervales", "moneyes"::numeric[], "xmles", "jsones", "jsonbes", "hstores", "inets", "timestamps"::text[], "timestampzs"::text[], "times"::text[], "timezs"::text[], "dates"::text[], "uuids", "numerics" from public.pgtest""".query[PgtestRow].selectStream
  }
  override def update: UpdateBuilder[PgtestFields, PgtestRow] = {
    UpdateBuilder("public.pgtest", PgtestFields, PgtestRow.read)
  }
}
