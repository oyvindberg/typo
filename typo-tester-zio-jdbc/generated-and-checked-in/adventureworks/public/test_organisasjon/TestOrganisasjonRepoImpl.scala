/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_organisasjon

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class TestOrganisasjonRepoImpl extends TestOrganisasjonRepo {
  override def delete: DeleteBuilder[TestOrganisasjonFields, TestOrganisasjonRow] = {
    DeleteBuilder(""""public"."test_organisasjon"""", TestOrganisasjonFields.structure)
  }
  override def deleteById(organisasjonskode: TestOrganisasjonId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "public"."test_organisasjon" where "organisasjonskode" = ${Segment.paramSegment(organisasjonskode)(TestOrganisasjonId.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(organisasjonskodes: Array[TestOrganisasjonId]): ZIO[ZConnection, Throwable, Long] = {
    sql"""delete from "public"."test_organisasjon" where "organisasjonskode" = ANY(${organisasjonskodes})""".delete
  }
  override def insert(unsaved: TestOrganisasjonRow): ZIO[ZConnection, Throwable, TestOrganisasjonRow] = {
    sql"""insert into "public"."test_organisasjon"("organisasjonskode")
          values (${Segment.paramSegment(unsaved.organisasjonskode)(TestOrganisasjonId.setter)})
          returning "organisasjonskode"
       """.insertReturning(using TestOrganisasjonRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, TestOrganisasjonRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "public"."test_organisasjon"("organisasjonskode") FROM STDIN""", batchSize, unsaved)(TestOrganisasjonRow.text)
  }
  override def select: SelectBuilder[TestOrganisasjonFields, TestOrganisasjonRow] = {
    SelectBuilderSql(""""public"."test_organisasjon"""", TestOrganisasjonFields.structure, TestOrganisasjonRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, TestOrganisasjonRow] = {
    sql"""select "organisasjonskode" from "public"."test_organisasjon"""".query(using TestOrganisasjonRow.jdbcDecoder).selectStream()
  }
  override def selectById(organisasjonskode: TestOrganisasjonId): ZIO[ZConnection, Throwable, Option[TestOrganisasjonRow]] = {
    sql"""select "organisasjonskode" from "public"."test_organisasjon" where "organisasjonskode" = ${Segment.paramSegment(organisasjonskode)(TestOrganisasjonId.setter)}""".query(using TestOrganisasjonRow.jdbcDecoder).selectOne
  }
  override def selectByIds(organisasjonskodes: Array[TestOrganisasjonId]): ZStream[ZConnection, Throwable, TestOrganisasjonRow] = {
    sql"""select "organisasjonskode" from "public"."test_organisasjon" where "organisasjonskode" = ANY(${Segment.paramSegment(organisasjonskodes)(TestOrganisasjonId.arraySetter)})""".query(using TestOrganisasjonRow.jdbcDecoder).selectStream()
  }
  override def selectByIdsTracked(organisasjonskodes: Array[TestOrganisasjonId]): ZIO[ZConnection, Throwable, Map[TestOrganisasjonId, TestOrganisasjonRow]] = {
    selectByIds(organisasjonskodes).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.organisasjonskode, x)).toMap
      organisasjonskodes.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[TestOrganisasjonFields, TestOrganisasjonRow] = {
    UpdateBuilder(""""public"."test_organisasjon"""", TestOrganisasjonFields.structure, TestOrganisasjonRow.jdbcDecoder)
  }
  override def upsert(unsaved: TestOrganisasjonRow): ZIO[ZConnection, Throwable, UpdateResult[TestOrganisasjonRow]] = {
    sql"""insert into "public"."test_organisasjon"("organisasjonskode")
          values (
            ${Segment.paramSegment(unsaved.organisasjonskode)(TestOrganisasjonId.setter)}
          )
          on conflict ("organisasjonskode")
          do update set "organisasjonskode" = EXCLUDED."organisasjonskode"
          returning "organisasjonskode"""".insertReturning(using TestOrganisasjonRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, TestOrganisasjonRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table test_organisasjon_TEMP (like "public"."test_organisasjon") on commit drop""".execute
    val copied = streamingInsert(s"""copy test_organisasjon_TEMP("organisasjonskode") from stdin""", batchSize, unsaved)(TestOrganisasjonRow.text)
    val merged = sql"""insert into "public"."test_organisasjon"("organisasjonskode")
                       select * from test_organisasjon_TEMP
                       on conflict ("organisasjonskode")
                       do nothing
                       ;
                       drop table test_organisasjon_TEMP;""".update
    created *> copied *> merged
  }
}
