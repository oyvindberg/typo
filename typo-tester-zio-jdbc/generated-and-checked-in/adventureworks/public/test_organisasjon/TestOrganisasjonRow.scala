/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_organisasjon

import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: public.test_organisasjon
    Primary key: organisasjonskode */
case class TestOrganisasjonRow(
  organisasjonskode: TestOrganisasjonId
){
   val id = organisasjonskode
 }

object TestOrganisasjonRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[TestOrganisasjonRow] = TestOrganisasjonId.jdbcDecoder.map(v => TestOrganisasjonRow(organisasjonskode = v))
  implicit lazy val jsonDecoder: JsonDecoder[TestOrganisasjonRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val organisasjonskode = jsonObj.get("organisasjonskode").toRight("Missing field 'organisasjonskode'").flatMap(_.as(TestOrganisasjonId.jsonDecoder))
    if (organisasjonskode.isRight)
      Right(TestOrganisasjonRow(organisasjonskode = organisasjonskode.toOption.get))
    else Left(List[Either[String, Any]](organisasjonskode).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TestOrganisasjonRow] = new JsonEncoder[TestOrganisasjonRow] {
    override def unsafeEncode(a: TestOrganisasjonRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""organisasjonskode":""")
      TestOrganisasjonId.jsonEncoder.unsafeEncode(a.organisasjonskode, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[TestOrganisasjonRow] = Text.instance[TestOrganisasjonRow]{ (row, sb) =>
    TestOrganisasjonId.text.unsafeEncode(row.organisasjonskode, sb)
  }
}
