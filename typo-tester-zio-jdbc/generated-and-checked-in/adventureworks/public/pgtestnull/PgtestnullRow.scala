/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtestnull

import adventureworks.Text
import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXml
import adventureworks.public.Mydomain
import adventureworks.public.Myenum
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: public.pgtestnull */
case class PgtestnullRow(
  bool: Option[Boolean],
  box: Option[TypoBox],
  bpchar: Option[/* bpchar, max 3 chars */ String],
  bytea: Option[TypoBytea],
  char: Option[/* bpchar, max 1 chars */ String],
  circle: Option[TypoCircle],
  date: Option[TypoLocalDate],
  float4: Option[Float],
  float8: Option[Double],
  hstore: Option[TypoHStore],
  inet: Option[TypoInet],
  int2: Option[TypoShort],
  int2vector: Option[TypoInt2Vector],
  int4: Option[Int],
  int8: Option[Long],
  interval: Option[TypoInterval],
  json: Option[TypoJson],
  jsonb: Option[TypoJsonb],
  line: Option[TypoLine],
  lseg: Option[TypoLineSegment],
  money: Option[TypoMoney],
  mydomain: Option[Mydomain],
  myenum: Option[Myenum],
  name: Option[String],
  numeric: Option[BigDecimal],
  path: Option[TypoPath],
  point: Option[TypoPoint],
  polygon: Option[TypoPolygon],
  text: Option[String],
  time: Option[TypoLocalTime],
  timestamp: Option[TypoLocalDateTime],
  timestampz: Option[TypoInstant],
  timez: Option[TypoOffsetTime],
  uuid: Option[TypoUUID],
  varchar: Option[String],
  vector: Option[TypoVector],
  xml: Option[TypoXml],
  boxes: Option[Array[TypoBox]],
  bpchares: Option[Array[/* bpchar */ String]],
  chares: Option[Array[/* bpchar */ String]],
  circlees: Option[Array[TypoCircle]],
  datees: Option[Array[TypoLocalDate]],
  float4es: Option[Array[Float]],
  float8es: Option[Array[Double]],
  inetes: Option[Array[TypoInet]],
  int2es: Option[Array[TypoShort]],
  int2vectores: Option[Array[TypoInt2Vector]],
  int4es: Option[Array[Int]],
  int8es: Option[Array[Long]],
  intervales: Option[Array[TypoInterval]],
  jsones: Option[Array[TypoJson]],
  jsonbes: Option[Array[TypoJsonb]],
  linees: Option[Array[TypoLine]],
  lseges: Option[Array[TypoLineSegment]],
  moneyes: Option[Array[TypoMoney]],
  mydomaines: Option[Array[Mydomain]],
  myenumes: Option[Array[Myenum]],
  namees: Option[Array[String]],
  numerices: Option[Array[BigDecimal]],
  pathes: Option[Array[TypoPath]],
  pointes: Option[Array[TypoPoint]],
  polygones: Option[Array[TypoPolygon]],
  textes: Option[Array[String]],
  timees: Option[Array[TypoLocalTime]],
  timestampes: Option[Array[TypoLocalDateTime]],
  timestampzes: Option[Array[TypoInstant]],
  timezes: Option[Array[TypoOffsetTime]],
  uuides: Option[Array[TypoUUID]],
  varchares: Option[Array[String]],
  xmles: Option[Array[TypoXml]]
)

object PgtestnullRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgtestnullRow] = new JdbcDecoder[PgtestnullRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgtestnullRow) =
      columIndex + 69 ->
        PgtestnullRow(
          bool = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 0, rs)._2,
          box = JdbcDecoder.optionDecoder(TypoBox.jdbcDecoder).unsafeDecode(columIndex + 1, rs)._2,
          bpchar = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          bytea = JdbcDecoder.optionDecoder(TypoBytea.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2,
          char = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          circle = JdbcDecoder.optionDecoder(TypoCircle.jdbcDecoder).unsafeDecode(columIndex + 5, rs)._2,
          date = JdbcDecoder.optionDecoder(TypoLocalDate.jdbcDecoder).unsafeDecode(columIndex + 6, rs)._2,
          float4 = JdbcDecoder.optionDecoder(JdbcDecoder.floatDecoder).unsafeDecode(columIndex + 7, rs)._2,
          float8 = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 8, rs)._2,
          hstore = JdbcDecoder.optionDecoder(TypoHStore.jdbcDecoder).unsafeDecode(columIndex + 9, rs)._2,
          inet = JdbcDecoder.optionDecoder(TypoInet.jdbcDecoder).unsafeDecode(columIndex + 10, rs)._2,
          int2 = JdbcDecoder.optionDecoder(TypoShort.jdbcDecoder).unsafeDecode(columIndex + 11, rs)._2,
          int2vector = JdbcDecoder.optionDecoder(TypoInt2Vector.jdbcDecoder).unsafeDecode(columIndex + 12, rs)._2,
          int4 = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 13, rs)._2,
          int8 = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 14, rs)._2,
          interval = JdbcDecoder.optionDecoder(TypoInterval.jdbcDecoder).unsafeDecode(columIndex + 15, rs)._2,
          json = JdbcDecoder.optionDecoder(TypoJson.jdbcDecoder).unsafeDecode(columIndex + 16, rs)._2,
          jsonb = JdbcDecoder.optionDecoder(TypoJsonb.jdbcDecoder).unsafeDecode(columIndex + 17, rs)._2,
          line = JdbcDecoder.optionDecoder(TypoLine.jdbcDecoder).unsafeDecode(columIndex + 18, rs)._2,
          lseg = JdbcDecoder.optionDecoder(TypoLineSegment.jdbcDecoder).unsafeDecode(columIndex + 19, rs)._2,
          money = JdbcDecoder.optionDecoder(TypoMoney.jdbcDecoder).unsafeDecode(columIndex + 20, rs)._2,
          mydomain = JdbcDecoder.optionDecoder(Mydomain.jdbcDecoder).unsafeDecode(columIndex + 21, rs)._2,
          myenum = JdbcDecoder.optionDecoder(Myenum.jdbcDecoder).unsafeDecode(columIndex + 22, rs)._2,
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 23, rs)._2,
          numeric = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 24, rs)._2,
          path = JdbcDecoder.optionDecoder(TypoPath.jdbcDecoder).unsafeDecode(columIndex + 25, rs)._2,
          point = JdbcDecoder.optionDecoder(TypoPoint.jdbcDecoder).unsafeDecode(columIndex + 26, rs)._2,
          polygon = JdbcDecoder.optionDecoder(TypoPolygon.jdbcDecoder).unsafeDecode(columIndex + 27, rs)._2,
          text = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 28, rs)._2,
          time = JdbcDecoder.optionDecoder(TypoLocalTime.jdbcDecoder).unsafeDecode(columIndex + 29, rs)._2,
          timestamp = JdbcDecoder.optionDecoder(TypoLocalDateTime.jdbcDecoder).unsafeDecode(columIndex + 30, rs)._2,
          timestampz = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 31, rs)._2,
          timez = JdbcDecoder.optionDecoder(TypoOffsetTime.jdbcDecoder).unsafeDecode(columIndex + 32, rs)._2,
          uuid = JdbcDecoder.optionDecoder(TypoUUID.jdbcDecoder).unsafeDecode(columIndex + 33, rs)._2,
          varchar = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 34, rs)._2,
          vector = JdbcDecoder.optionDecoder(TypoVector.jdbcDecoder).unsafeDecode(columIndex + 35, rs)._2,
          xml = JdbcDecoder.optionDecoder(TypoXml.jdbcDecoder).unsafeDecode(columIndex + 36, rs)._2,
          boxes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoBox]]).unsafeDecode(columIndex + 37, rs)._2,
          bpchares = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 38, rs)._2,
          chares = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 39, rs)._2,
          circlees = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoCircle]]).unsafeDecode(columIndex + 40, rs)._2,
          datees = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLocalDate]]).unsafeDecode(columIndex + 41, rs)._2,
          float4es = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 42, rs)._2,
          float8es = JdbcDecoder.optionDecoder(adventureworks.DoubleArrayDecoder).unsafeDecode(columIndex + 43, rs)._2,
          inetes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoInet]]).unsafeDecode(columIndex + 44, rs)._2,
          int2es = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoShort]]).unsafeDecode(columIndex + 45, rs)._2,
          int2vectores = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoInt2Vector]]).unsafeDecode(columIndex + 46, rs)._2,
          int4es = JdbcDecoder.optionDecoder(adventureworks.IntArrayDecoder).unsafeDecode(columIndex + 47, rs)._2,
          int8es = JdbcDecoder.optionDecoder(adventureworks.LongArrayDecoder).unsafeDecode(columIndex + 48, rs)._2,
          intervales = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoInterval]]).unsafeDecode(columIndex + 49, rs)._2,
          jsones = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoJson]]).unsafeDecode(columIndex + 50, rs)._2,
          jsonbes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoJsonb]]).unsafeDecode(columIndex + 51, rs)._2,
          linees = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLine]]).unsafeDecode(columIndex + 52, rs)._2,
          lseges = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLineSegment]]).unsafeDecode(columIndex + 53, rs)._2,
          moneyes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoMoney]]).unsafeDecode(columIndex + 54, rs)._2,
          mydomaines = JdbcDecoder.optionDecoder(JdbcDecoder[Array[Mydomain]]).unsafeDecode(columIndex + 55, rs)._2,
          myenumes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[Myenum]]).unsafeDecode(columIndex + 56, rs)._2,
          namees = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 57, rs)._2,
          numerices = JdbcDecoder.optionDecoder(adventureworks.ScalaBigDecimalArrayDecoder).unsafeDecode(columIndex + 58, rs)._2,
          pathes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoPath]]).unsafeDecode(columIndex + 59, rs)._2,
          pointes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoPoint]]).unsafeDecode(columIndex + 60, rs)._2,
          polygones = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoPolygon]]).unsafeDecode(columIndex + 61, rs)._2,
          textes = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 62, rs)._2,
          timees = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLocalTime]]).unsafeDecode(columIndex + 63, rs)._2,
          timestampes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLocalDateTime]]).unsafeDecode(columIndex + 64, rs)._2,
          timestampzes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoInstant]]).unsafeDecode(columIndex + 65, rs)._2,
          timezes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoOffsetTime]]).unsafeDecode(columIndex + 66, rs)._2,
          uuides = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoUUID]]).unsafeDecode(columIndex + 67, rs)._2,
          varchares = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 68, rs)._2,
          xmles = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoXml]]).unsafeDecode(columIndex + 69, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgtestnullRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val bool = jsonObj.get("bool").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.boolean)))
    val box = jsonObj.get("box").fold[Either[String, Option[TypoBox]]](Right(None))(_.as(JsonDecoder.option(using TypoBox.jsonDecoder)))
    val bpchar = jsonObj.get("bpchar").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val bytea = jsonObj.get("bytea").fold[Either[String, Option[TypoBytea]]](Right(None))(_.as(JsonDecoder.option(using TypoBytea.jsonDecoder)))
    val char = jsonObj.get("char").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val circle = jsonObj.get("circle").fold[Either[String, Option[TypoCircle]]](Right(None))(_.as(JsonDecoder.option(using TypoCircle.jsonDecoder)))
    val date = jsonObj.get("date").fold[Either[String, Option[TypoLocalDate]]](Right(None))(_.as(JsonDecoder.option(using TypoLocalDate.jsonDecoder)))
    val float4 = jsonObj.get("float4").fold[Either[String, Option[Float]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.float)))
    val float8 = jsonObj.get("float8").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.double)))
    val hstore = jsonObj.get("hstore").fold[Either[String, Option[TypoHStore]]](Right(None))(_.as(JsonDecoder.option(using TypoHStore.jsonDecoder)))
    val inet = jsonObj.get("inet").fold[Either[String, Option[TypoInet]]](Right(None))(_.as(JsonDecoder.option(using TypoInet.jsonDecoder)))
    val int2 = jsonObj.get("int2").fold[Either[String, Option[TypoShort]]](Right(None))(_.as(JsonDecoder.option(using TypoShort.jsonDecoder)))
    val int2vector = jsonObj.get("int2vector").fold[Either[String, Option[TypoInt2Vector]]](Right(None))(_.as(JsonDecoder.option(using TypoInt2Vector.jsonDecoder)))
    val int4 = jsonObj.get("int4").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.int)))
    val int8 = jsonObj.get("int8").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.long)))
    val interval = jsonObj.get("interval").fold[Either[String, Option[TypoInterval]]](Right(None))(_.as(JsonDecoder.option(using TypoInterval.jsonDecoder)))
    val json = jsonObj.get("json").fold[Either[String, Option[TypoJson]]](Right(None))(_.as(JsonDecoder.option(using TypoJson.jsonDecoder)))
    val jsonb = jsonObj.get("jsonb").fold[Either[String, Option[TypoJsonb]]](Right(None))(_.as(JsonDecoder.option(using TypoJsonb.jsonDecoder)))
    val line = jsonObj.get("line").fold[Either[String, Option[TypoLine]]](Right(None))(_.as(JsonDecoder.option(using TypoLine.jsonDecoder)))
    val lseg = jsonObj.get("lseg").fold[Either[String, Option[TypoLineSegment]]](Right(None))(_.as(JsonDecoder.option(using TypoLineSegment.jsonDecoder)))
    val money = jsonObj.get("money").fold[Either[String, Option[TypoMoney]]](Right(None))(_.as(JsonDecoder.option(using TypoMoney.jsonDecoder)))
    val mydomain = jsonObj.get("mydomain").fold[Either[String, Option[Mydomain]]](Right(None))(_.as(JsonDecoder.option(using Mydomain.jsonDecoder)))
    val myenum = jsonObj.get("myenum").fold[Either[String, Option[Myenum]]](Right(None))(_.as(JsonDecoder.option(using Myenum.jsonDecoder)))
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val numeric = jsonObj.get("numeric").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.scalaBigDecimal)))
    val path = jsonObj.get("path").fold[Either[String, Option[TypoPath]]](Right(None))(_.as(JsonDecoder.option(using TypoPath.jsonDecoder)))
    val point = jsonObj.get("point").fold[Either[String, Option[TypoPoint]]](Right(None))(_.as(JsonDecoder.option(using TypoPoint.jsonDecoder)))
    val polygon = jsonObj.get("polygon").fold[Either[String, Option[TypoPolygon]]](Right(None))(_.as(JsonDecoder.option(using TypoPolygon.jsonDecoder)))
    val text = jsonObj.get("text").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val time = jsonObj.get("time").fold[Either[String, Option[TypoLocalTime]]](Right(None))(_.as(JsonDecoder.option(using TypoLocalTime.jsonDecoder)))
    val timestamp = jsonObj.get("timestamp").fold[Either[String, Option[TypoLocalDateTime]]](Right(None))(_.as(JsonDecoder.option(using TypoLocalDateTime.jsonDecoder)))
    val timestampz = jsonObj.get("timestampz").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(using TypoInstant.jsonDecoder)))
    val timez = jsonObj.get("timez").fold[Either[String, Option[TypoOffsetTime]]](Right(None))(_.as(JsonDecoder.option(using TypoOffsetTime.jsonDecoder)))
    val uuid = jsonObj.get("uuid").fold[Either[String, Option[TypoUUID]]](Right(None))(_.as(JsonDecoder.option(using TypoUUID.jsonDecoder)))
    val varchar = jsonObj.get("varchar").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val vector = jsonObj.get("vector").fold[Either[String, Option[TypoVector]]](Right(None))(_.as(JsonDecoder.option(using TypoVector.jsonDecoder)))
    val xml = jsonObj.get("xml").fold[Either[String, Option[TypoXml]]](Right(None))(_.as(JsonDecoder.option(using TypoXml.jsonDecoder)))
    val boxes = jsonObj.get("boxes").fold[Either[String, Option[Array[TypoBox]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoBox](using TypoBox.jsonDecoder, implicitly))))
    val bpchares = jsonObj.get("bpchares").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[String](using JsonDecoder.string, implicitly))))
    val chares = jsonObj.get("chares").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[String](using JsonDecoder.string, implicitly))))
    val circlees = jsonObj.get("circlees").fold[Either[String, Option[Array[TypoCircle]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoCircle](using TypoCircle.jsonDecoder, implicitly))))
    val datees = jsonObj.get("datees").fold[Either[String, Option[Array[TypoLocalDate]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoLocalDate](using TypoLocalDate.jsonDecoder, implicitly))))
    val float4es = jsonObj.get("float4es").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[Float](using JsonDecoder.float, implicitly))))
    val float8es = jsonObj.get("float8es").fold[Either[String, Option[Array[Double]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[Double](using JsonDecoder.double, implicitly))))
    val inetes = jsonObj.get("inetes").fold[Either[String, Option[Array[TypoInet]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoInet](using TypoInet.jsonDecoder, implicitly))))
    val int2es = jsonObj.get("int2es").fold[Either[String, Option[Array[TypoShort]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoShort](using TypoShort.jsonDecoder, implicitly))))
    val int2vectores = jsonObj.get("int2vectores").fold[Either[String, Option[Array[TypoInt2Vector]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoInt2Vector](using TypoInt2Vector.jsonDecoder, implicitly))))
    val int4es = jsonObj.get("int4es").fold[Either[String, Option[Array[Int]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[Int](using JsonDecoder.int, implicitly))))
    val int8es = jsonObj.get("int8es").fold[Either[String, Option[Array[Long]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[Long](using JsonDecoder.long, implicitly))))
    val intervales = jsonObj.get("intervales").fold[Either[String, Option[Array[TypoInterval]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoInterval](using TypoInterval.jsonDecoder, implicitly))))
    val jsones = jsonObj.get("jsones").fold[Either[String, Option[Array[TypoJson]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoJson](using TypoJson.jsonDecoder, implicitly))))
    val jsonbes = jsonObj.get("jsonbes").fold[Either[String, Option[Array[TypoJsonb]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoJsonb](using TypoJsonb.jsonDecoder, implicitly))))
    val linees = jsonObj.get("linees").fold[Either[String, Option[Array[TypoLine]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoLine](using TypoLine.jsonDecoder, implicitly))))
    val lseges = jsonObj.get("lseges").fold[Either[String, Option[Array[TypoLineSegment]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoLineSegment](using TypoLineSegment.jsonDecoder, implicitly))))
    val moneyes = jsonObj.get("moneyes").fold[Either[String, Option[Array[TypoMoney]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoMoney](using TypoMoney.jsonDecoder, implicitly))))
    val mydomaines = jsonObj.get("mydomaines").fold[Either[String, Option[Array[Mydomain]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[Mydomain](using Mydomain.jsonDecoder, implicitly))))
    val myenumes = jsonObj.get("myenumes").fold[Either[String, Option[Array[Myenum]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[Myenum](using Myenum.jsonDecoder, implicitly))))
    val namees = jsonObj.get("namees").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[String](using JsonDecoder.string, implicitly))))
    val numerices = jsonObj.get("numerices").fold[Either[String, Option[Array[BigDecimal]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[BigDecimal](using JsonDecoder.scalaBigDecimal, implicitly))))
    val pathes = jsonObj.get("pathes").fold[Either[String, Option[Array[TypoPath]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoPath](using TypoPath.jsonDecoder, implicitly))))
    val pointes = jsonObj.get("pointes").fold[Either[String, Option[Array[TypoPoint]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoPoint](using TypoPoint.jsonDecoder, implicitly))))
    val polygones = jsonObj.get("polygones").fold[Either[String, Option[Array[TypoPolygon]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoPolygon](using TypoPolygon.jsonDecoder, implicitly))))
    val textes = jsonObj.get("textes").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[String](using JsonDecoder.string, implicitly))))
    val timees = jsonObj.get("timees").fold[Either[String, Option[Array[TypoLocalTime]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoLocalTime](using TypoLocalTime.jsonDecoder, implicitly))))
    val timestampes = jsonObj.get("timestampes").fold[Either[String, Option[Array[TypoLocalDateTime]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoLocalDateTime](using TypoLocalDateTime.jsonDecoder, implicitly))))
    val timestampzes = jsonObj.get("timestampzes").fold[Either[String, Option[Array[TypoInstant]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoInstant](using TypoInstant.jsonDecoder, implicitly))))
    val timezes = jsonObj.get("timezes").fold[Either[String, Option[Array[TypoOffsetTime]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoOffsetTime](using TypoOffsetTime.jsonDecoder, implicitly))))
    val uuides = jsonObj.get("uuides").fold[Either[String, Option[Array[TypoUUID]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoUUID](using TypoUUID.jsonDecoder, implicitly))))
    val varchares = jsonObj.get("varchares").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[String](using JsonDecoder.string, implicitly))))
    val xmles = jsonObj.get("xmles").fold[Either[String, Option[Array[TypoXml]]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.array[TypoXml](using TypoXml.jsonDecoder, implicitly))))
    if (bool.isRight && box.isRight && bpchar.isRight && bytea.isRight && char.isRight && circle.isRight && date.isRight && float4.isRight && float8.isRight && hstore.isRight && inet.isRight && int2.isRight && int2vector.isRight && int4.isRight && int8.isRight && interval.isRight && json.isRight && jsonb.isRight && line.isRight && lseg.isRight && money.isRight && mydomain.isRight && myenum.isRight && name.isRight && numeric.isRight && path.isRight && point.isRight && polygon.isRight && text.isRight && time.isRight && timestamp.isRight && timestampz.isRight && timez.isRight && uuid.isRight && varchar.isRight && vector.isRight && xml.isRight && boxes.isRight && bpchares.isRight && chares.isRight && circlees.isRight && datees.isRight && float4es.isRight && float8es.isRight && inetes.isRight && int2es.isRight && int2vectores.isRight && int4es.isRight && int8es.isRight && intervales.isRight && jsones.isRight && jsonbes.isRight && linees.isRight && lseges.isRight && moneyes.isRight && mydomaines.isRight && myenumes.isRight && namees.isRight && numerices.isRight && pathes.isRight && pointes.isRight && polygones.isRight && textes.isRight && timees.isRight && timestampes.isRight && timestampzes.isRight && timezes.isRight && uuides.isRight && varchares.isRight && xmles.isRight)
      Right(PgtestnullRow(bool = bool.toOption.get, box = box.toOption.get, bpchar = bpchar.toOption.get, bytea = bytea.toOption.get, char = char.toOption.get, circle = circle.toOption.get, date = date.toOption.get, float4 = float4.toOption.get, float8 = float8.toOption.get, hstore = hstore.toOption.get, inet = inet.toOption.get, int2 = int2.toOption.get, int2vector = int2vector.toOption.get, int4 = int4.toOption.get, int8 = int8.toOption.get, interval = interval.toOption.get, json = json.toOption.get, jsonb = jsonb.toOption.get, line = line.toOption.get, lseg = lseg.toOption.get, money = money.toOption.get, mydomain = mydomain.toOption.get, myenum = myenum.toOption.get, name = name.toOption.get, numeric = numeric.toOption.get, path = path.toOption.get, point = point.toOption.get, polygon = polygon.toOption.get, text = text.toOption.get, time = time.toOption.get, timestamp = timestamp.toOption.get, timestampz = timestampz.toOption.get, timez = timez.toOption.get, uuid = uuid.toOption.get, varchar = varchar.toOption.get, vector = vector.toOption.get, xml = xml.toOption.get, boxes = boxes.toOption.get, bpchares = bpchares.toOption.get, chares = chares.toOption.get, circlees = circlees.toOption.get, datees = datees.toOption.get, float4es = float4es.toOption.get, float8es = float8es.toOption.get, inetes = inetes.toOption.get, int2es = int2es.toOption.get, int2vectores = int2vectores.toOption.get, int4es = int4es.toOption.get, int8es = int8es.toOption.get, intervales = intervales.toOption.get, jsones = jsones.toOption.get, jsonbes = jsonbes.toOption.get, linees = linees.toOption.get, lseges = lseges.toOption.get, moneyes = moneyes.toOption.get, mydomaines = mydomaines.toOption.get, myenumes = myenumes.toOption.get, namees = namees.toOption.get, numerices = numerices.toOption.get, pathes = pathes.toOption.get, pointes = pointes.toOption.get, polygones = polygones.toOption.get, textes = textes.toOption.get, timees = timees.toOption.get, timestampes = timestampes.toOption.get, timestampzes = timestampzes.toOption.get, timezes = timezes.toOption.get, uuides = uuides.toOption.get, varchares = varchares.toOption.get, xmles = xmles.toOption.get))
    else Left(List[Either[String, Any]](bool, box, bpchar, bytea, char, circle, date, float4, float8, hstore, inet, int2, int2vector, int4, int8, interval, json, jsonb, line, lseg, money, mydomain, myenum, name, numeric, path, point, polygon, text, time, timestamp, timestampz, timez, uuid, varchar, vector, xml, boxes, bpchares, chares, circlees, datees, float4es, float8es, inetes, int2es, int2vectores, int4es, int8es, intervales, jsones, jsonbes, linees, lseges, moneyes, mydomaines, myenumes, namees, numerices, pathes, pointes, polygones, textes, timees, timestampes, timestampzes, timezes, uuides, varchares, xmles).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgtestnullRow] = new JsonEncoder[PgtestnullRow] {
    override def unsafeEncode(a: PgtestnullRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""bool":""")
      JsonEncoder.option(using JsonEncoder.boolean).unsafeEncode(a.bool, indent, out)
      out.write(",")
      out.write(""""box":""")
      JsonEncoder.option(using TypoBox.jsonEncoder).unsafeEncode(a.box, indent, out)
      out.write(",")
      out.write(""""bpchar":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.bpchar, indent, out)
      out.write(",")
      out.write(""""bytea":""")
      JsonEncoder.option(using TypoBytea.jsonEncoder).unsafeEncode(a.bytea, indent, out)
      out.write(",")
      out.write(""""char":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.char, indent, out)
      out.write(",")
      out.write(""""circle":""")
      JsonEncoder.option(using TypoCircle.jsonEncoder).unsafeEncode(a.circle, indent, out)
      out.write(",")
      out.write(""""date":""")
      JsonEncoder.option(using TypoLocalDate.jsonEncoder).unsafeEncode(a.date, indent, out)
      out.write(",")
      out.write(""""float4":""")
      JsonEncoder.option(using JsonEncoder.float).unsafeEncode(a.float4, indent, out)
      out.write(",")
      out.write(""""float8":""")
      JsonEncoder.option(using JsonEncoder.double).unsafeEncode(a.float8, indent, out)
      out.write(",")
      out.write(""""hstore":""")
      JsonEncoder.option(using TypoHStore.jsonEncoder).unsafeEncode(a.hstore, indent, out)
      out.write(",")
      out.write(""""inet":""")
      JsonEncoder.option(using TypoInet.jsonEncoder).unsafeEncode(a.inet, indent, out)
      out.write(",")
      out.write(""""int2":""")
      JsonEncoder.option(using TypoShort.jsonEncoder).unsafeEncode(a.int2, indent, out)
      out.write(",")
      out.write(""""int2vector":""")
      JsonEncoder.option(using TypoInt2Vector.jsonEncoder).unsafeEncode(a.int2vector, indent, out)
      out.write(",")
      out.write(""""int4":""")
      JsonEncoder.option(using JsonEncoder.int).unsafeEncode(a.int4, indent, out)
      out.write(",")
      out.write(""""int8":""")
      JsonEncoder.option(using JsonEncoder.long).unsafeEncode(a.int8, indent, out)
      out.write(",")
      out.write(""""interval":""")
      JsonEncoder.option(using TypoInterval.jsonEncoder).unsafeEncode(a.interval, indent, out)
      out.write(",")
      out.write(""""json":""")
      JsonEncoder.option(using TypoJson.jsonEncoder).unsafeEncode(a.json, indent, out)
      out.write(",")
      out.write(""""jsonb":""")
      JsonEncoder.option(using TypoJsonb.jsonEncoder).unsafeEncode(a.jsonb, indent, out)
      out.write(",")
      out.write(""""line":""")
      JsonEncoder.option(using TypoLine.jsonEncoder).unsafeEncode(a.line, indent, out)
      out.write(",")
      out.write(""""lseg":""")
      JsonEncoder.option(using TypoLineSegment.jsonEncoder).unsafeEncode(a.lseg, indent, out)
      out.write(",")
      out.write(""""money":""")
      JsonEncoder.option(using TypoMoney.jsonEncoder).unsafeEncode(a.money, indent, out)
      out.write(",")
      out.write(""""mydomain":""")
      JsonEncoder.option(using Mydomain.jsonEncoder).unsafeEncode(a.mydomain, indent, out)
      out.write(",")
      out.write(""""myenum":""")
      JsonEncoder.option(using Myenum.jsonEncoder).unsafeEncode(a.myenum, indent, out)
      out.write(",")
      out.write(""""name":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""numeric":""")
      JsonEncoder.option(using JsonEncoder.scalaBigDecimal).unsafeEncode(a.numeric, indent, out)
      out.write(",")
      out.write(""""path":""")
      JsonEncoder.option(using TypoPath.jsonEncoder).unsafeEncode(a.path, indent, out)
      out.write(",")
      out.write(""""point":""")
      JsonEncoder.option(using TypoPoint.jsonEncoder).unsafeEncode(a.point, indent, out)
      out.write(",")
      out.write(""""polygon":""")
      JsonEncoder.option(using TypoPolygon.jsonEncoder).unsafeEncode(a.polygon, indent, out)
      out.write(",")
      out.write(""""text":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.text, indent, out)
      out.write(",")
      out.write(""""time":""")
      JsonEncoder.option(using TypoLocalTime.jsonEncoder).unsafeEncode(a.time, indent, out)
      out.write(",")
      out.write(""""timestamp":""")
      JsonEncoder.option(using TypoLocalDateTime.jsonEncoder).unsafeEncode(a.timestamp, indent, out)
      out.write(",")
      out.write(""""timestampz":""")
      JsonEncoder.option(using TypoInstant.jsonEncoder).unsafeEncode(a.timestampz, indent, out)
      out.write(",")
      out.write(""""timez":""")
      JsonEncoder.option(using TypoOffsetTime.jsonEncoder).unsafeEncode(a.timez, indent, out)
      out.write(",")
      out.write(""""uuid":""")
      JsonEncoder.option(using TypoUUID.jsonEncoder).unsafeEncode(a.uuid, indent, out)
      out.write(",")
      out.write(""""varchar":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.varchar, indent, out)
      out.write(",")
      out.write(""""vector":""")
      JsonEncoder.option(using TypoVector.jsonEncoder).unsafeEncode(a.vector, indent, out)
      out.write(",")
      out.write(""""xml":""")
      JsonEncoder.option(using TypoXml.jsonEncoder).unsafeEncode(a.xml, indent, out)
      out.write(",")
      out.write(""""boxes":""")
      JsonEncoder.option(using JsonEncoder.array[TypoBox](using TypoBox.jsonEncoder, implicitly)).unsafeEncode(a.boxes, indent, out)
      out.write(",")
      out.write(""""bpchares":""")
      JsonEncoder.option(using JsonEncoder.array[String](using JsonEncoder.string, implicitly)).unsafeEncode(a.bpchares, indent, out)
      out.write(",")
      out.write(""""chares":""")
      JsonEncoder.option(using JsonEncoder.array[String](using JsonEncoder.string, implicitly)).unsafeEncode(a.chares, indent, out)
      out.write(",")
      out.write(""""circlees":""")
      JsonEncoder.option(using JsonEncoder.array[TypoCircle](using TypoCircle.jsonEncoder, implicitly)).unsafeEncode(a.circlees, indent, out)
      out.write(",")
      out.write(""""datees":""")
      JsonEncoder.option(using JsonEncoder.array[TypoLocalDate](using TypoLocalDate.jsonEncoder, implicitly)).unsafeEncode(a.datees, indent, out)
      out.write(",")
      out.write(""""float4es":""")
      JsonEncoder.option(using JsonEncoder.array[Float](using JsonEncoder.float, implicitly)).unsafeEncode(a.float4es, indent, out)
      out.write(",")
      out.write(""""float8es":""")
      JsonEncoder.option(using JsonEncoder.array[Double](using JsonEncoder.double, implicitly)).unsafeEncode(a.float8es, indent, out)
      out.write(",")
      out.write(""""inetes":""")
      JsonEncoder.option(using JsonEncoder.array[TypoInet](using TypoInet.jsonEncoder, implicitly)).unsafeEncode(a.inetes, indent, out)
      out.write(",")
      out.write(""""int2es":""")
      JsonEncoder.option(using JsonEncoder.array[TypoShort](using TypoShort.jsonEncoder, implicitly)).unsafeEncode(a.int2es, indent, out)
      out.write(",")
      out.write(""""int2vectores":""")
      JsonEncoder.option(using JsonEncoder.array[TypoInt2Vector](using TypoInt2Vector.jsonEncoder, implicitly)).unsafeEncode(a.int2vectores, indent, out)
      out.write(",")
      out.write(""""int4es":""")
      JsonEncoder.option(using JsonEncoder.array[Int](using JsonEncoder.int, implicitly)).unsafeEncode(a.int4es, indent, out)
      out.write(",")
      out.write(""""int8es":""")
      JsonEncoder.option(using JsonEncoder.array[Long](using JsonEncoder.long, implicitly)).unsafeEncode(a.int8es, indent, out)
      out.write(",")
      out.write(""""intervales":""")
      JsonEncoder.option(using JsonEncoder.array[TypoInterval](using TypoInterval.jsonEncoder, implicitly)).unsafeEncode(a.intervales, indent, out)
      out.write(",")
      out.write(""""jsones":""")
      JsonEncoder.option(using JsonEncoder.array[TypoJson](using TypoJson.jsonEncoder, implicitly)).unsafeEncode(a.jsones, indent, out)
      out.write(",")
      out.write(""""jsonbes":""")
      JsonEncoder.option(using JsonEncoder.array[TypoJsonb](using TypoJsonb.jsonEncoder, implicitly)).unsafeEncode(a.jsonbes, indent, out)
      out.write(",")
      out.write(""""linees":""")
      JsonEncoder.option(using JsonEncoder.array[TypoLine](using TypoLine.jsonEncoder, implicitly)).unsafeEncode(a.linees, indent, out)
      out.write(",")
      out.write(""""lseges":""")
      JsonEncoder.option(using JsonEncoder.array[TypoLineSegment](using TypoLineSegment.jsonEncoder, implicitly)).unsafeEncode(a.lseges, indent, out)
      out.write(",")
      out.write(""""moneyes":""")
      JsonEncoder.option(using JsonEncoder.array[TypoMoney](using TypoMoney.jsonEncoder, implicitly)).unsafeEncode(a.moneyes, indent, out)
      out.write(",")
      out.write(""""mydomaines":""")
      JsonEncoder.option(using JsonEncoder.array[Mydomain](using Mydomain.jsonEncoder, implicitly)).unsafeEncode(a.mydomaines, indent, out)
      out.write(",")
      out.write(""""myenumes":""")
      JsonEncoder.option(using JsonEncoder.array[Myenum](using Myenum.jsonEncoder, implicitly)).unsafeEncode(a.myenumes, indent, out)
      out.write(",")
      out.write(""""namees":""")
      JsonEncoder.option(using JsonEncoder.array[String](using JsonEncoder.string, implicitly)).unsafeEncode(a.namees, indent, out)
      out.write(",")
      out.write(""""numerices":""")
      JsonEncoder.option(using JsonEncoder.array[BigDecimal](using JsonEncoder.scalaBigDecimal, implicitly)).unsafeEncode(a.numerices, indent, out)
      out.write(",")
      out.write(""""pathes":""")
      JsonEncoder.option(using JsonEncoder.array[TypoPath](using TypoPath.jsonEncoder, implicitly)).unsafeEncode(a.pathes, indent, out)
      out.write(",")
      out.write(""""pointes":""")
      JsonEncoder.option(using JsonEncoder.array[TypoPoint](using TypoPoint.jsonEncoder, implicitly)).unsafeEncode(a.pointes, indent, out)
      out.write(",")
      out.write(""""polygones":""")
      JsonEncoder.option(using JsonEncoder.array[TypoPolygon](using TypoPolygon.jsonEncoder, implicitly)).unsafeEncode(a.polygones, indent, out)
      out.write(",")
      out.write(""""textes":""")
      JsonEncoder.option(using JsonEncoder.array[String](using JsonEncoder.string, implicitly)).unsafeEncode(a.textes, indent, out)
      out.write(",")
      out.write(""""timees":""")
      JsonEncoder.option(using JsonEncoder.array[TypoLocalTime](using TypoLocalTime.jsonEncoder, implicitly)).unsafeEncode(a.timees, indent, out)
      out.write(",")
      out.write(""""timestampes":""")
      JsonEncoder.option(using JsonEncoder.array[TypoLocalDateTime](using TypoLocalDateTime.jsonEncoder, implicitly)).unsafeEncode(a.timestampes, indent, out)
      out.write(",")
      out.write(""""timestampzes":""")
      JsonEncoder.option(using JsonEncoder.array[TypoInstant](using TypoInstant.jsonEncoder, implicitly)).unsafeEncode(a.timestampzes, indent, out)
      out.write(",")
      out.write(""""timezes":""")
      JsonEncoder.option(using JsonEncoder.array[TypoOffsetTime](using TypoOffsetTime.jsonEncoder, implicitly)).unsafeEncode(a.timezes, indent, out)
      out.write(",")
      out.write(""""uuides":""")
      JsonEncoder.option(using JsonEncoder.array[TypoUUID](using TypoUUID.jsonEncoder, implicitly)).unsafeEncode(a.uuides, indent, out)
      out.write(",")
      out.write(""""varchares":""")
      JsonEncoder.option(using JsonEncoder.array[String](using JsonEncoder.string, implicitly)).unsafeEncode(a.varchares, indent, out)
      out.write(",")
      out.write(""""xmles":""")
      JsonEncoder.option(using JsonEncoder.array[TypoXml](using TypoXml.jsonEncoder, implicitly)).unsafeEncode(a.xmles, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[PgtestnullRow] = Text.instance[PgtestnullRow]{ (row, sb) =>
    Text.option(Text.booleanInstance).unsafeEncode(row.bool, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoBox.text).unsafeEncode(row.box, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.bpchar, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoBytea.text).unsafeEncode(row.bytea, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.char, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoCircle.text).unsafeEncode(row.circle, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDate.text).unsafeEncode(row.date, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.floatInstance).unsafeEncode(row.float4, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.doubleInstance).unsafeEncode(row.float8, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoHStore.text).unsafeEncode(row.hstore, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInet.text).unsafeEncode(row.inet, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoShort.text).unsafeEncode(row.int2, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInt2Vector.text).unsafeEncode(row.int2vector, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.intInstance).unsafeEncode(row.int4, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.longInstance).unsafeEncode(row.int8, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInterval.text).unsafeEncode(row.interval, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoJson.text).unsafeEncode(row.json, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoJsonb.text).unsafeEncode(row.jsonb, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLine.text).unsafeEncode(row.line, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLineSegment.text).unsafeEncode(row.lseg, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoMoney.text).unsafeEncode(row.money, sb)
    sb.append(Text.DELIMETER)
    Text.option(Mydomain.text).unsafeEncode(row.mydomain, sb)
    sb.append(Text.DELIMETER)
    Text.option(Myenum.text).unsafeEncode(row.myenum, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.numeric, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPath.text).unsafeEncode(row.path, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPoint.text).unsafeEncode(row.point, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPolygon.text).unsafeEncode(row.polygon, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.text, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalTime.text).unsafeEncode(row.time, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.timestamp, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInstant.text).unsafeEncode(row.timestampz, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoOffsetTime.text).unsafeEncode(row.timez, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoUUID.text).unsafeEncode(row.uuid, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.varchar, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoVector.text).unsafeEncode(row.vector, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoXml.text).unsafeEncode(row.xml, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoBox](TypoBox.text, implicitly)).unsafeEncode(row.boxes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.bpchares, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.chares, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoCircle](TypoCircle.text, implicitly)).unsafeEncode(row.circlees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLocalDate](TypoLocalDate.text, implicitly)).unsafeEncode(row.datees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Float]]).unsafeEncode(row.float4es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Double]]).unsafeEncode(row.float8es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInet](TypoInet.text, implicitly)).unsafeEncode(row.inetes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoShort](TypoShort.text, implicitly)).unsafeEncode(row.int2es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInt2Vector](TypoInt2Vector.text, implicitly)).unsafeEncode(row.int2vectores, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Int]]).unsafeEncode(row.int4es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Long]]).unsafeEncode(row.int8es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInterval](TypoInterval.text, implicitly)).unsafeEncode(row.intervales, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoJson](TypoJson.text, implicitly)).unsafeEncode(row.jsones, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoJsonb](TypoJsonb.text, implicitly)).unsafeEncode(row.jsonbes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLine](TypoLine.text, implicitly)).unsafeEncode(row.linees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLineSegment](TypoLineSegment.text, implicitly)).unsafeEncode(row.lseges, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoMoney](TypoMoney.text, implicitly)).unsafeEncode(row.moneyes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, Mydomain](Mydomain.text, implicitly)).unsafeEncode(row.mydomaines, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, Myenum](Myenum.text, implicitly)).unsafeEncode(row.myenumes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.namees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[BigDecimal]]).unsafeEncode(row.numerices, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoPath](TypoPath.text, implicitly)).unsafeEncode(row.pathes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoPoint](TypoPoint.text, implicitly)).unsafeEncode(row.pointes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoPolygon](TypoPolygon.text, implicitly)).unsafeEncode(row.polygones, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.textes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLocalTime](TypoLocalTime.text, implicitly)).unsafeEncode(row.timees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLocalDateTime](TypoLocalDateTime.text, implicitly)).unsafeEncode(row.timestampes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInstant](TypoInstant.text, implicitly)).unsafeEncode(row.timestampzes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoOffsetTime](TypoOffsetTime.text, implicitly)).unsafeEncode(row.timezes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoUUID](TypoUUID.text, implicitly)).unsafeEncode(row.uuides, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.varchares, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoXml](TypoXml.text, implicitly)).unsafeEncode(row.xmles, sb)
  }
}
