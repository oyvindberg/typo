/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtestnull

import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXml
import adventureworks.public.Mydomain
import adventureworks.public.Myenum
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgtestnullRow(
  bool: Option[Boolean],
  box: Option[TypoBox],
  bpchar: Option[/* bpchar, max 3 chars */ String],
  bytea: Option[TypoBytea],
  char: Option[/* bpchar, max 1 chars */ String],
  circle: Option[TypoCircle],
  date: Option[TypoLocalDate],
  float4: Option[Float],
  float8: Option[Double],
  hstore: Option[TypoHStore],
  inet: Option[TypoInet],
  int2: Option[TypoShort],
  int2vector: Option[TypoInt2Vector],
  int4: Option[Int],
  int8: Option[Long],
  interval: Option[TypoInterval],
  json: Option[TypoJson],
  jsonb: Option[TypoJsonb],
  line: Option[TypoLine],
  lseg: Option[TypoLineSegment],
  money: Option[TypoMoney],
  mydomain: Option[Mydomain],
  myenum: Option[Myenum],
  name: Option[String],
  numeric: Option[BigDecimal],
  path: Option[TypoPath],
  point: Option[TypoPoint],
  polygon: Option[TypoPolygon],
  text: Option[String],
  time: Option[TypoLocalTime],
  timestamp: Option[TypoLocalDateTime],
  timestampz: Option[TypoInstant],
  timez: Option[TypoOffsetTime],
  uuid: Option[TypoUUID],
  varchar: Option[String],
  vector: Option[TypoVector],
  xml: Option[TypoXml],
  boxes: Option[Array[TypoBox]],
  bpchares: Option[Array[/* bpchar */ String]],
  chares: Option[Array[/* bpchar */ String]],
  circlees: Option[Array[TypoCircle]],
  datees: Option[Array[TypoLocalDate]],
  float4es: Option[Array[Float]],
  float8es: Option[Array[Double]],
  inetes: Option[Array[TypoInet]],
  int2es: Option[Array[TypoShort]],
  int2vectores: Option[Array[TypoInt2Vector]],
  int4es: Option[Array[Int]],
  int8es: Option[Array[Long]],
  intervales: Option[Array[TypoInterval]],
  jsones: Option[Array[TypoJson]],
  jsonbes: Option[Array[TypoJsonb]],
  linees: Option[Array[TypoLine]],
  lseges: Option[Array[TypoLineSegment]],
  moneyes: Option[Array[TypoMoney]],
  myenumes: Option[Array[Myenum]],
  namees: Option[Array[String]],
  numerices: Option[Array[BigDecimal]],
  pathes: Option[Array[TypoPath]],
  pointes: Option[Array[TypoPoint]],
  polygones: Option[Array[TypoPolygon]],
  textes: Option[Array[String]],
  timees: Option[Array[TypoLocalTime]],
  timestampes: Option[Array[TypoLocalDateTime]],
  timestampzes: Option[Array[TypoInstant]],
  timezes: Option[Array[TypoOffsetTime]],
  uuides: Option[Array[TypoUUID]],
  varchares: Option[Array[String]],
  xmles: Option[Array[TypoXml]]
)

object PgtestnullRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgtestnullRow] = new JdbcDecoder[PgtestnullRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgtestnullRow) =
      columIndex + 68 ->
        PgtestnullRow(
          bool = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 0, rs)._2,
          box = JdbcDecoder.optionDecoder(TypoBox.jdbcDecoder).unsafeDecode(columIndex + 1, rs)._2,
          bpchar = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          bytea = JdbcDecoder.optionDecoder(TypoBytea.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2,
          char = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          circle = JdbcDecoder.optionDecoder(TypoCircle.jdbcDecoder).unsafeDecode(columIndex + 5, rs)._2,
          date = JdbcDecoder.optionDecoder(TypoLocalDate.jdbcDecoder).unsafeDecode(columIndex + 6, rs)._2,
          float4 = JdbcDecoder.optionDecoder(JdbcDecoder.floatDecoder).unsafeDecode(columIndex + 7, rs)._2,
          float8 = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 8, rs)._2,
          hstore = JdbcDecoder.optionDecoder(TypoHStore.jdbcDecoder).unsafeDecode(columIndex + 9, rs)._2,
          inet = JdbcDecoder.optionDecoder(TypoInet.jdbcDecoder).unsafeDecode(columIndex + 10, rs)._2,
          int2 = JdbcDecoder.optionDecoder(TypoShort.jdbcDecoder).unsafeDecode(columIndex + 11, rs)._2,
          int2vector = JdbcDecoder.optionDecoder(TypoInt2Vector.jdbcDecoder).unsafeDecode(columIndex + 12, rs)._2,
          int4 = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 13, rs)._2,
          int8 = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 14, rs)._2,
          interval = JdbcDecoder.optionDecoder(TypoInterval.jdbcDecoder).unsafeDecode(columIndex + 15, rs)._2,
          json = JdbcDecoder.optionDecoder(TypoJson.jdbcDecoder).unsafeDecode(columIndex + 16, rs)._2,
          jsonb = JdbcDecoder.optionDecoder(TypoJsonb.jdbcDecoder).unsafeDecode(columIndex + 17, rs)._2,
          line = JdbcDecoder.optionDecoder(TypoLine.jdbcDecoder).unsafeDecode(columIndex + 18, rs)._2,
          lseg = JdbcDecoder.optionDecoder(TypoLineSegment.jdbcDecoder).unsafeDecode(columIndex + 19, rs)._2,
          money = JdbcDecoder.optionDecoder(TypoMoney.jdbcDecoder).unsafeDecode(columIndex + 20, rs)._2,
          mydomain = JdbcDecoder.optionDecoder(Mydomain.jdbcDecoder).unsafeDecode(columIndex + 21, rs)._2,
          myenum = JdbcDecoder.optionDecoder(Myenum.jdbcDecoder).unsafeDecode(columIndex + 22, rs)._2,
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 23, rs)._2,
          numeric = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 24, rs)._2,
          path = JdbcDecoder.optionDecoder(TypoPath.jdbcDecoder).unsafeDecode(columIndex + 25, rs)._2,
          point = JdbcDecoder.optionDecoder(TypoPoint.jdbcDecoder).unsafeDecode(columIndex + 26, rs)._2,
          polygon = JdbcDecoder.optionDecoder(TypoPolygon.jdbcDecoder).unsafeDecode(columIndex + 27, rs)._2,
          text = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 28, rs)._2,
          time = JdbcDecoder.optionDecoder(TypoLocalTime.jdbcDecoder).unsafeDecode(columIndex + 29, rs)._2,
          timestamp = JdbcDecoder.optionDecoder(TypoLocalDateTime.jdbcDecoder).unsafeDecode(columIndex + 30, rs)._2,
          timestampz = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 31, rs)._2,
          timez = JdbcDecoder.optionDecoder(TypoOffsetTime.jdbcDecoder).unsafeDecode(columIndex + 32, rs)._2,
          uuid = JdbcDecoder.optionDecoder(TypoUUID.jdbcDecoder).unsafeDecode(columIndex + 33, rs)._2,
          varchar = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 34, rs)._2,
          vector = JdbcDecoder.optionDecoder(TypoVector.jdbcDecoder).unsafeDecode(columIndex + 35, rs)._2,
          xml = JdbcDecoder.optionDecoder(TypoXml.jdbcDecoder).unsafeDecode(columIndex + 36, rs)._2,
          boxes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoBox]]).unsafeDecode(columIndex + 37, rs)._2,
          bpchares = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 38, rs)._2,
          chares = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 39, rs)._2,
          circlees = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoCircle]]).unsafeDecode(columIndex + 40, rs)._2,
          datees = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLocalDate]]).unsafeDecode(columIndex + 41, rs)._2,
          float4es = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 42, rs)._2,
          float8es = JdbcDecoder.optionDecoder(adventureworks.DoubleArrayDecoder).unsafeDecode(columIndex + 43, rs)._2,
          inetes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoInet]]).unsafeDecode(columIndex + 44, rs)._2,
          int2es = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoShort]]).unsafeDecode(columIndex + 45, rs)._2,
          int2vectores = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoInt2Vector]]).unsafeDecode(columIndex + 46, rs)._2,
          int4es = JdbcDecoder.optionDecoder(adventureworks.IntArrayDecoder).unsafeDecode(columIndex + 47, rs)._2,
          int8es = JdbcDecoder.optionDecoder(adventureworks.LongArrayDecoder).unsafeDecode(columIndex + 48, rs)._2,
          intervales = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoInterval]]).unsafeDecode(columIndex + 49, rs)._2,
          jsones = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoJson]]).unsafeDecode(columIndex + 50, rs)._2,
          jsonbes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoJsonb]]).unsafeDecode(columIndex + 51, rs)._2,
          linees = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLine]]).unsafeDecode(columIndex + 52, rs)._2,
          lseges = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLineSegment]]).unsafeDecode(columIndex + 53, rs)._2,
          moneyes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoMoney]]).unsafeDecode(columIndex + 54, rs)._2,
          myenumes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[Myenum]]).unsafeDecode(columIndex + 55, rs)._2,
          namees = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 56, rs)._2,
          numerices = JdbcDecoder.optionDecoder(adventureworks.ScalaBigDecimalArrayDecoder).unsafeDecode(columIndex + 57, rs)._2,
          pathes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoPath]]).unsafeDecode(columIndex + 58, rs)._2,
          pointes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoPoint]]).unsafeDecode(columIndex + 59, rs)._2,
          polygones = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoPolygon]]).unsafeDecode(columIndex + 60, rs)._2,
          textes = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 61, rs)._2,
          timees = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLocalTime]]).unsafeDecode(columIndex + 62, rs)._2,
          timestampes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoLocalDateTime]]).unsafeDecode(columIndex + 63, rs)._2,
          timestampzes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoInstant]]).unsafeDecode(columIndex + 64, rs)._2,
          timezes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoOffsetTime]]).unsafeDecode(columIndex + 65, rs)._2,
          uuides = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoUUID]]).unsafeDecode(columIndex + 66, rs)._2,
          varchares = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 67, rs)._2,
          xmles = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoXml]]).unsafeDecode(columIndex + 68, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgtestnullRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val bool = jsonObj.get("bool").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val box = jsonObj.get("box").fold[Either[String, Option[TypoBox]]](Right(None))(_.as(JsonDecoder.option(TypoBox.jsonDecoder)))
    val bpchar = jsonObj.get("bpchar").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val bytea = jsonObj.get("bytea").fold[Either[String, Option[TypoBytea]]](Right(None))(_.as(JsonDecoder.option(TypoBytea.jsonDecoder)))
    val char = jsonObj.get("char").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val circle = jsonObj.get("circle").fold[Either[String, Option[TypoCircle]]](Right(None))(_.as(JsonDecoder.option(TypoCircle.jsonDecoder)))
    val date = jsonObj.get("date").fold[Either[String, Option[TypoLocalDate]]](Right(None))(_.as(JsonDecoder.option(TypoLocalDate.jsonDecoder)))
    val float4 = jsonObj.get("float4").fold[Either[String, Option[Float]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.float)))
    val float8 = jsonObj.get("float8").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val hstore = jsonObj.get("hstore").fold[Either[String, Option[TypoHStore]]](Right(None))(_.as(JsonDecoder.option(TypoHStore.jsonDecoder)))
    val inet = jsonObj.get("inet").fold[Either[String, Option[TypoInet]]](Right(None))(_.as(JsonDecoder.option(TypoInet.jsonDecoder)))
    val int2 = jsonObj.get("int2").fold[Either[String, Option[TypoShort]]](Right(None))(_.as(JsonDecoder.option(TypoShort.jsonDecoder)))
    val int2vector = jsonObj.get("int2vector").fold[Either[String, Option[TypoInt2Vector]]](Right(None))(_.as(JsonDecoder.option(TypoInt2Vector.jsonDecoder)))
    val int4 = jsonObj.get("int4").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val int8 = jsonObj.get("int8").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val interval = jsonObj.get("interval").fold[Either[String, Option[TypoInterval]]](Right(None))(_.as(JsonDecoder.option(TypoInterval.jsonDecoder)))
    val json = jsonObj.get("json").fold[Either[String, Option[TypoJson]]](Right(None))(_.as(JsonDecoder.option(TypoJson.jsonDecoder)))
    val jsonb = jsonObj.get("jsonb").fold[Either[String, Option[TypoJsonb]]](Right(None))(_.as(JsonDecoder.option(TypoJsonb.jsonDecoder)))
    val line = jsonObj.get("line").fold[Either[String, Option[TypoLine]]](Right(None))(_.as(JsonDecoder.option(TypoLine.jsonDecoder)))
    val lseg = jsonObj.get("lseg").fold[Either[String, Option[TypoLineSegment]]](Right(None))(_.as(JsonDecoder.option(TypoLineSegment.jsonDecoder)))
    val money = jsonObj.get("money").fold[Either[String, Option[TypoMoney]]](Right(None))(_.as(JsonDecoder.option(TypoMoney.jsonDecoder)))
    val mydomain = jsonObj.get("mydomain").fold[Either[String, Option[Mydomain]]](Right(None))(_.as(JsonDecoder.option(Mydomain.jsonDecoder)))
    val myenum = jsonObj.get("myenum").fold[Either[String, Option[Myenum]]](Right(None))(_.as(JsonDecoder.option(Myenum.jsonDecoder)))
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val numeric = jsonObj.get("numeric").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.scalaBigDecimal)))
    val path = jsonObj.get("path").fold[Either[String, Option[TypoPath]]](Right(None))(_.as(JsonDecoder.option(TypoPath.jsonDecoder)))
    val point = jsonObj.get("point").fold[Either[String, Option[TypoPoint]]](Right(None))(_.as(JsonDecoder.option(TypoPoint.jsonDecoder)))
    val polygon = jsonObj.get("polygon").fold[Either[String, Option[TypoPolygon]]](Right(None))(_.as(JsonDecoder.option(TypoPolygon.jsonDecoder)))
    val text = jsonObj.get("text").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val time = jsonObj.get("time").fold[Either[String, Option[TypoLocalTime]]](Right(None))(_.as(JsonDecoder.option(TypoLocalTime.jsonDecoder)))
    val timestamp = jsonObj.get("timestamp").fold[Either[String, Option[TypoLocalDateTime]]](Right(None))(_.as(JsonDecoder.option(TypoLocalDateTime.jsonDecoder)))
    val timestampz = jsonObj.get("timestampz").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val timez = jsonObj.get("timez").fold[Either[String, Option[TypoOffsetTime]]](Right(None))(_.as(JsonDecoder.option(TypoOffsetTime.jsonDecoder)))
    val uuid = jsonObj.get("uuid").fold[Either[String, Option[TypoUUID]]](Right(None))(_.as(JsonDecoder.option(TypoUUID.jsonDecoder)))
    val varchar = jsonObj.get("varchar").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val vector = jsonObj.get("vector").fold[Either[String, Option[TypoVector]]](Right(None))(_.as(JsonDecoder.option(TypoVector.jsonDecoder)))
    val xml = jsonObj.get("xml").fold[Either[String, Option[TypoXml]]](Right(None))(_.as(JsonDecoder.option(TypoXml.jsonDecoder)))
    val boxes = jsonObj.get("boxes").fold[Either[String, Option[Array[TypoBox]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoBox](TypoBox.jsonDecoder, implicitly))))
    val bpchares = jsonObj.get("bpchares").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val chares = jsonObj.get("chares").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val circlees = jsonObj.get("circlees").fold[Either[String, Option[Array[TypoCircle]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoCircle](TypoCircle.jsonDecoder, implicitly))))
    val datees = jsonObj.get("datees").fold[Either[String, Option[Array[TypoLocalDate]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoLocalDate](TypoLocalDate.jsonDecoder, implicitly))))
    val float4es = jsonObj.get("float4es").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Float](JsonDecoder.float, implicitly))))
    val float8es = jsonObj.get("float8es").fold[Either[String, Option[Array[Double]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Double](JsonDecoder.double, implicitly))))
    val inetes = jsonObj.get("inetes").fold[Either[String, Option[Array[TypoInet]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoInet](TypoInet.jsonDecoder, implicitly))))
    val int2es = jsonObj.get("int2es").fold[Either[String, Option[Array[TypoShort]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoShort](TypoShort.jsonDecoder, implicitly))))
    val int2vectores = jsonObj.get("int2vectores").fold[Either[String, Option[Array[TypoInt2Vector]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoInt2Vector](TypoInt2Vector.jsonDecoder, implicitly))))
    val int4es = jsonObj.get("int4es").fold[Either[String, Option[Array[Int]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Int](JsonDecoder.int, implicitly))))
    val int8es = jsonObj.get("int8es").fold[Either[String, Option[Array[Long]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Long](JsonDecoder.long, implicitly))))
    val intervales = jsonObj.get("intervales").fold[Either[String, Option[Array[TypoInterval]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoInterval](TypoInterval.jsonDecoder, implicitly))))
    val jsones = jsonObj.get("jsones").fold[Either[String, Option[Array[TypoJson]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoJson](TypoJson.jsonDecoder, implicitly))))
    val jsonbes = jsonObj.get("jsonbes").fold[Either[String, Option[Array[TypoJsonb]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoJsonb](TypoJsonb.jsonDecoder, implicitly))))
    val linees = jsonObj.get("linees").fold[Either[String, Option[Array[TypoLine]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoLine](TypoLine.jsonDecoder, implicitly))))
    val lseges = jsonObj.get("lseges").fold[Either[String, Option[Array[TypoLineSegment]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoLineSegment](TypoLineSegment.jsonDecoder, implicitly))))
    val moneyes = jsonObj.get("moneyes").fold[Either[String, Option[Array[TypoMoney]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoMoney](TypoMoney.jsonDecoder, implicitly))))
    val myenumes = jsonObj.get("myenumes").fold[Either[String, Option[Array[Myenum]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Myenum](Myenum.jsonDecoder, implicitly))))
    val namees = jsonObj.get("namees").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val numerices = jsonObj.get("numerices").fold[Either[String, Option[Array[BigDecimal]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[BigDecimal](JsonDecoder.scalaBigDecimal, implicitly))))
    val pathes = jsonObj.get("pathes").fold[Either[String, Option[Array[TypoPath]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoPath](TypoPath.jsonDecoder, implicitly))))
    val pointes = jsonObj.get("pointes").fold[Either[String, Option[Array[TypoPoint]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoPoint](TypoPoint.jsonDecoder, implicitly))))
    val polygones = jsonObj.get("polygones").fold[Either[String, Option[Array[TypoPolygon]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoPolygon](TypoPolygon.jsonDecoder, implicitly))))
    val textes = jsonObj.get("textes").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val timees = jsonObj.get("timees").fold[Either[String, Option[Array[TypoLocalTime]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoLocalTime](TypoLocalTime.jsonDecoder, implicitly))))
    val timestampes = jsonObj.get("timestampes").fold[Either[String, Option[Array[TypoLocalDateTime]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoLocalDateTime](TypoLocalDateTime.jsonDecoder, implicitly))))
    val timestampzes = jsonObj.get("timestampzes").fold[Either[String, Option[Array[TypoInstant]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoInstant](TypoInstant.jsonDecoder, implicitly))))
    val timezes = jsonObj.get("timezes").fold[Either[String, Option[Array[TypoOffsetTime]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoOffsetTime](TypoOffsetTime.jsonDecoder, implicitly))))
    val uuides = jsonObj.get("uuides").fold[Either[String, Option[Array[TypoUUID]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoUUID](TypoUUID.jsonDecoder, implicitly))))
    val varchares = jsonObj.get("varchares").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val xmles = jsonObj.get("xmles").fold[Either[String, Option[Array[TypoXml]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoXml](TypoXml.jsonDecoder, implicitly))))
    if (bool.isRight && box.isRight && bpchar.isRight && bytea.isRight && char.isRight && circle.isRight && date.isRight && float4.isRight && float8.isRight && hstore.isRight && inet.isRight && int2.isRight && int2vector.isRight && int4.isRight && int8.isRight && interval.isRight && json.isRight && jsonb.isRight && line.isRight && lseg.isRight && money.isRight && mydomain.isRight && myenum.isRight && name.isRight && numeric.isRight && path.isRight && point.isRight && polygon.isRight && text.isRight && time.isRight && timestamp.isRight && timestampz.isRight && timez.isRight && uuid.isRight && varchar.isRight && vector.isRight && xml.isRight && boxes.isRight && bpchares.isRight && chares.isRight && circlees.isRight && datees.isRight && float4es.isRight && float8es.isRight && inetes.isRight && int2es.isRight && int2vectores.isRight && int4es.isRight && int8es.isRight && intervales.isRight && jsones.isRight && jsonbes.isRight && linees.isRight && lseges.isRight && moneyes.isRight && myenumes.isRight && namees.isRight && numerices.isRight && pathes.isRight && pointes.isRight && polygones.isRight && textes.isRight && timees.isRight && timestampes.isRight && timestampzes.isRight && timezes.isRight && uuides.isRight && varchares.isRight && xmles.isRight)
      Right(PgtestnullRow(bool = bool.toOption.get, box = box.toOption.get, bpchar = bpchar.toOption.get, bytea = bytea.toOption.get, char = char.toOption.get, circle = circle.toOption.get, date = date.toOption.get, float4 = float4.toOption.get, float8 = float8.toOption.get, hstore = hstore.toOption.get, inet = inet.toOption.get, int2 = int2.toOption.get, int2vector = int2vector.toOption.get, int4 = int4.toOption.get, int8 = int8.toOption.get, interval = interval.toOption.get, json = json.toOption.get, jsonb = jsonb.toOption.get, line = line.toOption.get, lseg = lseg.toOption.get, money = money.toOption.get, mydomain = mydomain.toOption.get, myenum = myenum.toOption.get, name = name.toOption.get, numeric = numeric.toOption.get, path = path.toOption.get, point = point.toOption.get, polygon = polygon.toOption.get, text = text.toOption.get, time = time.toOption.get, timestamp = timestamp.toOption.get, timestampz = timestampz.toOption.get, timez = timez.toOption.get, uuid = uuid.toOption.get, varchar = varchar.toOption.get, vector = vector.toOption.get, xml = xml.toOption.get, boxes = boxes.toOption.get, bpchares = bpchares.toOption.get, chares = chares.toOption.get, circlees = circlees.toOption.get, datees = datees.toOption.get, float4es = float4es.toOption.get, float8es = float8es.toOption.get, inetes = inetes.toOption.get, int2es = int2es.toOption.get, int2vectores = int2vectores.toOption.get, int4es = int4es.toOption.get, int8es = int8es.toOption.get, intervales = intervales.toOption.get, jsones = jsones.toOption.get, jsonbes = jsonbes.toOption.get, linees = linees.toOption.get, lseges = lseges.toOption.get, moneyes = moneyes.toOption.get, myenumes = myenumes.toOption.get, namees = namees.toOption.get, numerices = numerices.toOption.get, pathes = pathes.toOption.get, pointes = pointes.toOption.get, polygones = polygones.toOption.get, textes = textes.toOption.get, timees = timees.toOption.get, timestampes = timestampes.toOption.get, timestampzes = timestampzes.toOption.get, timezes = timezes.toOption.get, uuides = uuides.toOption.get, varchares = varchares.toOption.get, xmles = xmles.toOption.get))
    else Left(List[Either[String, Any]](bool, box, bpchar, bytea, char, circle, date, float4, float8, hstore, inet, int2, int2vector, int4, int8, interval, json, jsonb, line, lseg, money, mydomain, myenum, name, numeric, path, point, polygon, text, time, timestamp, timestampz, timez, uuid, varchar, vector, xml, boxes, bpchares, chares, circlees, datees, float4es, float8es, inetes, int2es, int2vectores, int4es, int8es, intervales, jsones, jsonbes, linees, lseges, moneyes, myenumes, namees, numerices, pathes, pointes, polygones, textes, timees, timestampes, timestampzes, timezes, uuides, varchares, xmles).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgtestnullRow] = new JsonEncoder[PgtestnullRow] {
    override def unsafeEncode(a: PgtestnullRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""bool":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.bool, indent, out)
      out.write(",")
      out.write(""""box":""")
      JsonEncoder.option(TypoBox.jsonEncoder).unsafeEncode(a.box, indent, out)
      out.write(",")
      out.write(""""bpchar":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.bpchar, indent, out)
      out.write(",")
      out.write(""""bytea":""")
      JsonEncoder.option(TypoBytea.jsonEncoder).unsafeEncode(a.bytea, indent, out)
      out.write(",")
      out.write(""""char":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.char, indent, out)
      out.write(",")
      out.write(""""circle":""")
      JsonEncoder.option(TypoCircle.jsonEncoder).unsafeEncode(a.circle, indent, out)
      out.write(",")
      out.write(""""date":""")
      JsonEncoder.option(TypoLocalDate.jsonEncoder).unsafeEncode(a.date, indent, out)
      out.write(",")
      out.write(""""float4":""")
      JsonEncoder.option(JsonEncoder.float).unsafeEncode(a.float4, indent, out)
      out.write(",")
      out.write(""""float8":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.float8, indent, out)
      out.write(",")
      out.write(""""hstore":""")
      JsonEncoder.option(TypoHStore.jsonEncoder).unsafeEncode(a.hstore, indent, out)
      out.write(",")
      out.write(""""inet":""")
      JsonEncoder.option(TypoInet.jsonEncoder).unsafeEncode(a.inet, indent, out)
      out.write(",")
      out.write(""""int2":""")
      JsonEncoder.option(TypoShort.jsonEncoder).unsafeEncode(a.int2, indent, out)
      out.write(",")
      out.write(""""int2vector":""")
      JsonEncoder.option(TypoInt2Vector.jsonEncoder).unsafeEncode(a.int2vector, indent, out)
      out.write(",")
      out.write(""""int4":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.int4, indent, out)
      out.write(",")
      out.write(""""int8":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.int8, indent, out)
      out.write(",")
      out.write(""""interval":""")
      JsonEncoder.option(TypoInterval.jsonEncoder).unsafeEncode(a.interval, indent, out)
      out.write(",")
      out.write(""""json":""")
      JsonEncoder.option(TypoJson.jsonEncoder).unsafeEncode(a.json, indent, out)
      out.write(",")
      out.write(""""jsonb":""")
      JsonEncoder.option(TypoJsonb.jsonEncoder).unsafeEncode(a.jsonb, indent, out)
      out.write(",")
      out.write(""""line":""")
      JsonEncoder.option(TypoLine.jsonEncoder).unsafeEncode(a.line, indent, out)
      out.write(",")
      out.write(""""lseg":""")
      JsonEncoder.option(TypoLineSegment.jsonEncoder).unsafeEncode(a.lseg, indent, out)
      out.write(",")
      out.write(""""money":""")
      JsonEncoder.option(TypoMoney.jsonEncoder).unsafeEncode(a.money, indent, out)
      out.write(",")
      out.write(""""mydomain":""")
      JsonEncoder.option(Mydomain.jsonEncoder).unsafeEncode(a.mydomain, indent, out)
      out.write(",")
      out.write(""""myenum":""")
      JsonEncoder.option(Myenum.jsonEncoder).unsafeEncode(a.myenum, indent, out)
      out.write(",")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""numeric":""")
      JsonEncoder.option(JsonEncoder.scalaBigDecimal).unsafeEncode(a.numeric, indent, out)
      out.write(",")
      out.write(""""path":""")
      JsonEncoder.option(TypoPath.jsonEncoder).unsafeEncode(a.path, indent, out)
      out.write(",")
      out.write(""""point":""")
      JsonEncoder.option(TypoPoint.jsonEncoder).unsafeEncode(a.point, indent, out)
      out.write(",")
      out.write(""""polygon":""")
      JsonEncoder.option(TypoPolygon.jsonEncoder).unsafeEncode(a.polygon, indent, out)
      out.write(",")
      out.write(""""text":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.text, indent, out)
      out.write(",")
      out.write(""""time":""")
      JsonEncoder.option(TypoLocalTime.jsonEncoder).unsafeEncode(a.time, indent, out)
      out.write(",")
      out.write(""""timestamp":""")
      JsonEncoder.option(TypoLocalDateTime.jsonEncoder).unsafeEncode(a.timestamp, indent, out)
      out.write(",")
      out.write(""""timestampz":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.timestampz, indent, out)
      out.write(",")
      out.write(""""timez":""")
      JsonEncoder.option(TypoOffsetTime.jsonEncoder).unsafeEncode(a.timez, indent, out)
      out.write(",")
      out.write(""""uuid":""")
      JsonEncoder.option(TypoUUID.jsonEncoder).unsafeEncode(a.uuid, indent, out)
      out.write(",")
      out.write(""""varchar":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.varchar, indent, out)
      out.write(",")
      out.write(""""vector":""")
      JsonEncoder.option(TypoVector.jsonEncoder).unsafeEncode(a.vector, indent, out)
      out.write(",")
      out.write(""""xml":""")
      JsonEncoder.option(TypoXml.jsonEncoder).unsafeEncode(a.xml, indent, out)
      out.write(",")
      out.write(""""boxes":""")
      JsonEncoder.option(JsonEncoder.array[TypoBox](TypoBox.jsonEncoder, implicitly)).unsafeEncode(a.boxes, indent, out)
      out.write(",")
      out.write(""""bpchares":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.bpchares, indent, out)
      out.write(",")
      out.write(""""chares":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.chares, indent, out)
      out.write(",")
      out.write(""""circlees":""")
      JsonEncoder.option(JsonEncoder.array[TypoCircle](TypoCircle.jsonEncoder, implicitly)).unsafeEncode(a.circlees, indent, out)
      out.write(",")
      out.write(""""datees":""")
      JsonEncoder.option(JsonEncoder.array[TypoLocalDate](TypoLocalDate.jsonEncoder, implicitly)).unsafeEncode(a.datees, indent, out)
      out.write(",")
      out.write(""""float4es":""")
      JsonEncoder.option(JsonEncoder.array[Float](JsonEncoder.float, implicitly)).unsafeEncode(a.float4es, indent, out)
      out.write(",")
      out.write(""""float8es":""")
      JsonEncoder.option(JsonEncoder.array[Double](JsonEncoder.double, implicitly)).unsafeEncode(a.float8es, indent, out)
      out.write(",")
      out.write(""""inetes":""")
      JsonEncoder.option(JsonEncoder.array[TypoInet](TypoInet.jsonEncoder, implicitly)).unsafeEncode(a.inetes, indent, out)
      out.write(",")
      out.write(""""int2es":""")
      JsonEncoder.option(JsonEncoder.array[TypoShort](TypoShort.jsonEncoder, implicitly)).unsafeEncode(a.int2es, indent, out)
      out.write(",")
      out.write(""""int2vectores":""")
      JsonEncoder.option(JsonEncoder.array[TypoInt2Vector](TypoInt2Vector.jsonEncoder, implicitly)).unsafeEncode(a.int2vectores, indent, out)
      out.write(",")
      out.write(""""int4es":""")
      JsonEncoder.option(JsonEncoder.array[Int](JsonEncoder.int, implicitly)).unsafeEncode(a.int4es, indent, out)
      out.write(",")
      out.write(""""int8es":""")
      JsonEncoder.option(JsonEncoder.array[Long](JsonEncoder.long, implicitly)).unsafeEncode(a.int8es, indent, out)
      out.write(",")
      out.write(""""intervales":""")
      JsonEncoder.option(JsonEncoder.array[TypoInterval](TypoInterval.jsonEncoder, implicitly)).unsafeEncode(a.intervales, indent, out)
      out.write(",")
      out.write(""""jsones":""")
      JsonEncoder.option(JsonEncoder.array[TypoJson](TypoJson.jsonEncoder, implicitly)).unsafeEncode(a.jsones, indent, out)
      out.write(",")
      out.write(""""jsonbes":""")
      JsonEncoder.option(JsonEncoder.array[TypoJsonb](TypoJsonb.jsonEncoder, implicitly)).unsafeEncode(a.jsonbes, indent, out)
      out.write(",")
      out.write(""""linees":""")
      JsonEncoder.option(JsonEncoder.array[TypoLine](TypoLine.jsonEncoder, implicitly)).unsafeEncode(a.linees, indent, out)
      out.write(",")
      out.write(""""lseges":""")
      JsonEncoder.option(JsonEncoder.array[TypoLineSegment](TypoLineSegment.jsonEncoder, implicitly)).unsafeEncode(a.lseges, indent, out)
      out.write(",")
      out.write(""""moneyes":""")
      JsonEncoder.option(JsonEncoder.array[TypoMoney](TypoMoney.jsonEncoder, implicitly)).unsafeEncode(a.moneyes, indent, out)
      out.write(",")
      out.write(""""myenumes":""")
      JsonEncoder.option(JsonEncoder.array[Myenum](Myenum.jsonEncoder, implicitly)).unsafeEncode(a.myenumes, indent, out)
      out.write(",")
      out.write(""""namees":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.namees, indent, out)
      out.write(",")
      out.write(""""numerices":""")
      JsonEncoder.option(JsonEncoder.array[BigDecimal](JsonEncoder.scalaBigDecimal, implicitly)).unsafeEncode(a.numerices, indent, out)
      out.write(",")
      out.write(""""pathes":""")
      JsonEncoder.option(JsonEncoder.array[TypoPath](TypoPath.jsonEncoder, implicitly)).unsafeEncode(a.pathes, indent, out)
      out.write(",")
      out.write(""""pointes":""")
      JsonEncoder.option(JsonEncoder.array[TypoPoint](TypoPoint.jsonEncoder, implicitly)).unsafeEncode(a.pointes, indent, out)
      out.write(",")
      out.write(""""polygones":""")
      JsonEncoder.option(JsonEncoder.array[TypoPolygon](TypoPolygon.jsonEncoder, implicitly)).unsafeEncode(a.polygones, indent, out)
      out.write(",")
      out.write(""""textes":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.textes, indent, out)
      out.write(",")
      out.write(""""timees":""")
      JsonEncoder.option(JsonEncoder.array[TypoLocalTime](TypoLocalTime.jsonEncoder, implicitly)).unsafeEncode(a.timees, indent, out)
      out.write(",")
      out.write(""""timestampes":""")
      JsonEncoder.option(JsonEncoder.array[TypoLocalDateTime](TypoLocalDateTime.jsonEncoder, implicitly)).unsafeEncode(a.timestampes, indent, out)
      out.write(",")
      out.write(""""timestampzes":""")
      JsonEncoder.option(JsonEncoder.array[TypoInstant](TypoInstant.jsonEncoder, implicitly)).unsafeEncode(a.timestampzes, indent, out)
      out.write(",")
      out.write(""""timezes":""")
      JsonEncoder.option(JsonEncoder.array[TypoOffsetTime](TypoOffsetTime.jsonEncoder, implicitly)).unsafeEncode(a.timezes, indent, out)
      out.write(",")
      out.write(""""uuides":""")
      JsonEncoder.option(JsonEncoder.array[TypoUUID](TypoUUID.jsonEncoder, implicitly)).unsafeEncode(a.uuides, indent, out)
      out.write(",")
      out.write(""""varchares":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.varchares, indent, out)
      out.write(",")
      out.write(""""xmles":""")
      JsonEncoder.option(JsonEncoder.array[TypoXml](TypoXml.jsonEncoder, implicitly)).unsafeEncode(a.xmles, indent, out)
      out.write("}")
    }
  }
}
