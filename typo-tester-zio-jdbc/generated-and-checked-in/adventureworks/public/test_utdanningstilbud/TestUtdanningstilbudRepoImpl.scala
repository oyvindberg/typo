/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_utdanningstilbud

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class TestUtdanningstilbudRepoImpl extends TestUtdanningstilbudRepo {
  override def delete: DeleteBuilder[TestUtdanningstilbudFields, TestUtdanningstilbudRow] = {
    DeleteBuilder(""""public"."test_utdanningstilbud"""", TestUtdanningstilbudFields.structure)
  }
  override def deleteById(compositeId: TestUtdanningstilbudId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "public"."test_utdanningstilbud" where "organisasjonskode" = ${Segment.paramSegment(compositeId.organisasjonskode)(TestOrganisasjonId.setter)} AND "utdanningsmulighet_kode" = ${Segment.paramSegment(compositeId.utdanningsmulighetKode)(Setter.stringSetter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(compositeIds: Array[TestUtdanningstilbudId]): ZIO[ZConnection, Throwable, Long] = {
    val organisasjonskode = compositeIds.map(_.organisasjonskode)
    val utdanningsmulighetKode = compositeIds.map(_.utdanningsmulighetKode)
    sql"""delete
          from "public"."test_utdanningstilbud"
          where ("organisasjonskode", "utdanningsmulighet_kode")
          in (select unnest(${organisasjonskode}), unnest(${utdanningsmulighetKode}))
       """.delete
    
  }
  override def insert(unsaved: TestUtdanningstilbudRow): ZIO[ZConnection, Throwable, TestUtdanningstilbudRow] = {
    sql"""insert into "public"."test_utdanningstilbud"("organisasjonskode", "utdanningsmulighet_kode")
          values (${Segment.paramSegment(unsaved.organisasjonskode)(TestOrganisasjonId.setter)}, ${Segment.paramSegment(unsaved.utdanningsmulighetKode)(Setter.stringSetter)})
          returning "organisasjonskode", "utdanningsmulighet_kode"
       """.insertReturning(using TestUtdanningstilbudRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, TestUtdanningstilbudRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "public"."test_utdanningstilbud"("organisasjonskode", "utdanningsmulighet_kode") FROM STDIN""", batchSize, unsaved)(TestUtdanningstilbudRow.text)
  }
  override def select: SelectBuilder[TestUtdanningstilbudFields, TestUtdanningstilbudRow] = {
    SelectBuilderSql(""""public"."test_utdanningstilbud"""", TestUtdanningstilbudFields.structure, TestUtdanningstilbudRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, TestUtdanningstilbudRow] = {
    sql"""select "organisasjonskode", "utdanningsmulighet_kode" from "public"."test_utdanningstilbud"""".query(using TestUtdanningstilbudRow.jdbcDecoder).selectStream()
  }
  override def selectById(compositeId: TestUtdanningstilbudId): ZIO[ZConnection, Throwable, Option[TestUtdanningstilbudRow]] = {
    sql"""select "organisasjonskode", "utdanningsmulighet_kode" from "public"."test_utdanningstilbud" where "organisasjonskode" = ${Segment.paramSegment(compositeId.organisasjonskode)(TestOrganisasjonId.setter)} AND "utdanningsmulighet_kode" = ${Segment.paramSegment(compositeId.utdanningsmulighetKode)(Setter.stringSetter)}""".query(using TestUtdanningstilbudRow.jdbcDecoder).selectOne
  }
  override def selectByIds(compositeIds: Array[TestUtdanningstilbudId]): ZStream[ZConnection, Throwable, TestUtdanningstilbudRow] = {
    val organisasjonskode = compositeIds.map(_.organisasjonskode)
    val utdanningsmulighetKode = compositeIds.map(_.utdanningsmulighetKode)
    sql"""select "organisasjonskode", "utdanningsmulighet_kode"
          from "public"."test_utdanningstilbud"
          where ("organisasjonskode", "utdanningsmulighet_kode")
          in (select unnest(${organisasjonskode}), unnest(${utdanningsmulighetKode}))
       """.query(using TestUtdanningstilbudRow.jdbcDecoder).selectStream()
    
  }
  override def selectByIdsTracked(compositeIds: Array[TestUtdanningstilbudId]): ZIO[ZConnection, Throwable, Map[TestUtdanningstilbudId, TestUtdanningstilbudRow]] = {
    selectByIds(compositeIds).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.compositeId, x)).toMap
      compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[TestUtdanningstilbudFields, TestUtdanningstilbudRow] = {
    UpdateBuilder(""""public"."test_utdanningstilbud"""", TestUtdanningstilbudFields.structure, TestUtdanningstilbudRow.jdbcDecoder)
  }
  override def upsert(unsaved: TestUtdanningstilbudRow): ZIO[ZConnection, Throwable, UpdateResult[TestUtdanningstilbudRow]] = {
    sql"""insert into "public"."test_utdanningstilbud"("organisasjonskode", "utdanningsmulighet_kode")
          values (
            ${Segment.paramSegment(unsaved.organisasjonskode)(TestOrganisasjonId.setter)},
            ${Segment.paramSegment(unsaved.utdanningsmulighetKode)(Setter.stringSetter)}
          )
          on conflict ("organisasjonskode", "utdanningsmulighet_kode")
          do update set "organisasjonskode" = EXCLUDED."organisasjonskode"
          returning "organisasjonskode", "utdanningsmulighet_kode"""".insertReturning(using TestUtdanningstilbudRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, TestUtdanningstilbudRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table test_utdanningstilbud_TEMP (like "public"."test_utdanningstilbud") on commit drop""".execute
    val copied = streamingInsert(s"""copy test_utdanningstilbud_TEMP("organisasjonskode", "utdanningsmulighet_kode") from stdin""", batchSize, unsaved)(TestUtdanningstilbudRow.text)
    val merged = sql"""insert into "public"."test_utdanningstilbud"("organisasjonskode", "utdanningsmulighet_kode")
                       select * from test_utdanningstilbud_TEMP
                       on conflict ("organisasjonskode", "utdanningsmulighet_kode")
                       do nothing
                       ;
                       drop table test_utdanningstilbud_TEMP;""".update
    created *> copied *> merged
  }
}
