/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_utdanningstilbud

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `public.test_utdanningstilbud` */
case class TestUtdanningstilbudId(
  organisasjonskode: TestOrganisasjonId,
  utdanningsmulighetKode: String
)
object TestUtdanningstilbudId {
  implicit lazy val jsonDecoder: JsonDecoder[TestUtdanningstilbudId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val organisasjonskode = jsonObj.get("organisasjonskode").toRight("Missing field 'organisasjonskode'").flatMap(_.as(TestOrganisasjonId.jsonDecoder))
    val utdanningsmulighetKode = jsonObj.get("utdanningsmulighet_kode").toRight("Missing field 'utdanningsmulighet_kode'").flatMap(_.as(JsonDecoder.string))
    if (organisasjonskode.isRight && utdanningsmulighetKode.isRight)
      Right(TestUtdanningstilbudId(organisasjonskode = organisasjonskode.toOption.get, utdanningsmulighetKode = utdanningsmulighetKode.toOption.get))
    else Left(List[Either[String, Any]](organisasjonskode, utdanningsmulighetKode).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TestUtdanningstilbudId] = new JsonEncoder[TestUtdanningstilbudId] {
    override def unsafeEncode(a: TestUtdanningstilbudId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""organisasjonskode":""")
      TestOrganisasjonId.jsonEncoder.unsafeEncode(a.organisasjonskode, indent, out)
      out.write(",")
      out.write(""""utdanningsmulighet_kode":""")
      JsonEncoder.string.unsafeEncode(a.utdanningsmulighetKode, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[TestUtdanningstilbudId] = Ordering.by(x => (x.organisasjonskode, x.utdanningsmulighetKode))
}
