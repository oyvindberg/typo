/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_utdanningstilbud

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: public.test_utdanningstilbud
    Composite primary key: organisasjonskode, utdanningsmulighet_kode */
case class TestUtdanningstilbudRow(
  /** Points to [[test_organisasjon.TestOrganisasjonRow.organisasjonskode]] */
  organisasjonskode: TestOrganisasjonId,
  utdanningsmulighetKode: String
){
   val compositeId: TestUtdanningstilbudId = TestUtdanningstilbudId(organisasjonskode, utdanningsmulighetKode)
   val id = compositeId
 }

object TestUtdanningstilbudRow {
  def apply(compositeId: TestUtdanningstilbudId) =
    new TestUtdanningstilbudRow(compositeId.organisasjonskode, compositeId.utdanningsmulighetKode)
  implicit lazy val jdbcDecoder: JdbcDecoder[TestUtdanningstilbudRow] = new JdbcDecoder[TestUtdanningstilbudRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, TestUtdanningstilbudRow) =
      columIndex + 1 ->
        TestUtdanningstilbudRow(
          organisasjonskode = TestOrganisasjonId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          utdanningsmulighetKode = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[TestUtdanningstilbudRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val organisasjonskode = jsonObj.get("organisasjonskode").toRight("Missing field 'organisasjonskode'").flatMap(_.as(TestOrganisasjonId.jsonDecoder))
    val utdanningsmulighetKode = jsonObj.get("utdanningsmulighet_kode").toRight("Missing field 'utdanningsmulighet_kode'").flatMap(_.as(JsonDecoder.string))
    if (organisasjonskode.isRight && utdanningsmulighetKode.isRight)
      Right(TestUtdanningstilbudRow(organisasjonskode = organisasjonskode.toOption.get, utdanningsmulighetKode = utdanningsmulighetKode.toOption.get))
    else Left(List[Either[String, Any]](organisasjonskode, utdanningsmulighetKode).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TestUtdanningstilbudRow] = new JsonEncoder[TestUtdanningstilbudRow] {
    override def unsafeEncode(a: TestUtdanningstilbudRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""organisasjonskode":""")
      TestOrganisasjonId.jsonEncoder.unsafeEncode(a.organisasjonskode, indent, out)
      out.write(",")
      out.write(""""utdanningsmulighet_kode":""")
      JsonEncoder.string.unsafeEncode(a.utdanningsmulighetKode, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[TestUtdanningstilbudRow] = Text.instance[TestUtdanningstilbudRow]{ (row, sb) =>
    TestOrganisasjonId.text.unsafeEncode(row.organisasjonskode, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.utdanningsmulighetKode, sb)
  }
}
