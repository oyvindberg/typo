/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package title

import java.sql.Types
import typo.dsl.PGType
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Type for the primary key of table `public.title`. It has some known values: 
  *  - dr
  *  - mr
  *  - ms
  *  - phd
  */
sealed abstract class TitleId(val value: String)

object TitleId {
  def apply(underlying: String): TitleId =
    ByName.getOrElse(underlying, Unknown(underlying))
  case object dr extends TitleId("dr")
  case object mr extends TitleId("mr")
  case object ms extends TitleId("ms")
  case object phd extends TitleId("phd")
  case class Unknown(override val value: String) extends TitleId(value)
  val All: List[TitleId] = List(dr, mr, ms, phd)
  val ByName: Map[String, TitleId] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayJdbcDecoder: JdbcDecoder[Array[TitleId]] = adventureworks.StringArrayDecoder.map(a => if (a == null) null else a.map(apply))
  implicit lazy val arrayJdbcEncoder: JdbcEncoder[Array[TitleId]] = JdbcEncoder.singleParamEncoder(using arraySetter)
  implicit lazy val arraySetter: Setter[Array[TitleId]] = adventureworks.StringArraySetter.contramap(_.map(_.value))
  implicit lazy val jdbcDecoder: JdbcDecoder[TitleId] = JdbcDecoder.stringDecoder.map(TitleId.apply)
  implicit lazy val jdbcEncoder: JdbcEncoder[TitleId] = JdbcEncoder.stringEncoder.contramap(_.value)
  implicit lazy val jsonDecoder: JsonDecoder[TitleId] = JsonDecoder.string.map(TitleId.apply)
  implicit lazy val jsonEncoder: JsonEncoder[TitleId] = JsonEncoder.string.contramap(_.value)
  implicit lazy val ordering: Ordering[TitleId] = Ordering.by(_.value)
  implicit lazy val pgType: PGType[TitleId] = PGType.instance[TitleId]("text", Types.OTHER)
  implicit lazy val setter: Setter[TitleId] = Setter.stringSetter.contramap(_.value)
  implicit lazy val text: Text[TitleId] = new Text[TitleId] {
    override def unsafeEncode(v: TitleId, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: TitleId, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}
