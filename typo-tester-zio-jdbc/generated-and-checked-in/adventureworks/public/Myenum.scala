/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public

import java.sql.ResultSet
import typo.dsl.ParameterMetaData
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcDecoderError
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Enum `public.myenum`
  *  - a
  *  - b
  *  - c
  */
sealed abstract class Myenum(val value: String)

object Myenum {
  def apply(str: String): Either[String, Myenum] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): Myenum =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object a extends Myenum("a")
  case object b extends Myenum("b")
  case object c extends Myenum("c")
  val All: List[Myenum] = List(a, b, c)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, Myenum] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayJdbcDecoder: JdbcDecoder[Array[Myenum]] = adventureworks.StringArrayDecoder.map(a => if (a == null) null else a.map(force))
  implicit lazy val arrayJdbcEncoder: JdbcEncoder[Array[Myenum]] = JdbcEncoder.singleParamEncoder(arraySetter)
  implicit lazy val arraySetter: Setter[Array[Myenum]] = adventureworks.StringArraySetter.contramap(_.map(_.value))
  implicit lazy val jdbcDecoder: JdbcDecoder[Myenum] = JdbcDecoder.stringDecoder.flatMap { s =>
    new JdbcDecoder[Myenum] {
      override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, Myenum) = {
        def error(msg: String): JdbcDecoderError =
          JdbcDecoderError(
            message = s"Error decoding Myenum from ResultSet",
            cause = new RuntimeException(msg),
            metadata = rs.getMetaData,
            row = rs.getRow
          )
  
        Myenum.apply(s).fold(e => throw error(e), (columIndex, _))
      }
    }
  }
  implicit lazy val jdbcEncoder: JdbcEncoder[Myenum] = JdbcEncoder.stringEncoder.contramap(_.value)
  implicit lazy val jsonDecoder: JsonDecoder[Myenum] = JsonDecoder.string.mapOrFail(Myenum.apply)
  implicit lazy val jsonEncoder: JsonEncoder[Myenum] = JsonEncoder.string.contramap(_.value)
  implicit lazy val ordering: Ordering[Myenum] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[Myenum] = ParameterMetaData.instance[Myenum](ParameterMetaData.StringParameterMetaData.sqlType, ParameterMetaData.StringParameterMetaData.jdbcType)
  implicit lazy val setter: Setter[Myenum] = Setter.stringSetter.contramap(_.value)
}
