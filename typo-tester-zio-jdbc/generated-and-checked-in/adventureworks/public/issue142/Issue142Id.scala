/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package issue142

import java.sql.Types
import typo.dsl.PGType
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Type for the primary key of table `public.issue142`. It has some known values: 
  *  - aa
  *  - bb
  */
sealed abstract class Issue142Id(val value: String)

object Issue142Id {
  def apply(underlying: String): Issue142Id =
    ByName.getOrElse(underlying, Unknown(underlying))
  case object aa extends Issue142Id("aa")
  case object bb extends Issue142Id("bb")
  case class Unknown(override val value: String) extends Issue142Id(value)
  val All: List[Issue142Id] = List(aa, bb)
  val ByName: Map[String, Issue142Id] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayJdbcDecoder: JdbcDecoder[Array[Issue142Id]] = adventureworks.StringArrayDecoder.map(a => if (a == null) null else a.map(apply))
  implicit lazy val arrayJdbcEncoder: JdbcEncoder[Array[Issue142Id]] = JdbcEncoder.singleParamEncoder(using arraySetter)
  implicit lazy val arraySetter: Setter[Array[Issue142Id]] = adventureworks.StringArraySetter.contramap(_.map(_.value))
  implicit lazy val jdbcDecoder: JdbcDecoder[Issue142Id] = JdbcDecoder.stringDecoder.map(Issue142Id.apply)
  implicit lazy val jdbcEncoder: JdbcEncoder[Issue142Id] = JdbcEncoder.stringEncoder.contramap(_.value)
  implicit lazy val jsonDecoder: JsonDecoder[Issue142Id] = JsonDecoder.string.map(Issue142Id.apply)
  implicit lazy val jsonEncoder: JsonEncoder[Issue142Id] = JsonEncoder.string.contramap(_.value)
  implicit lazy val ordering: Ordering[Issue142Id] = Ordering.by(_.value)
  implicit lazy val pgType: PGType[Issue142Id] = PGType.instance[Issue142Id]("text", Types.OTHER)
  implicit lazy val setter: Setter[Issue142Id] = Setter.stringSetter.contramap(_.value)
  implicit lazy val text: Text[Issue142Id] = new Text[Issue142Id] {
    override def unsafeEncode(v: Issue142Id, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: Issue142Id, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}
