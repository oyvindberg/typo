/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package issue142_2

import adventureworks.public.issue142.Issue142Id
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class Issue1422RepoImpl extends Issue1422Repo {
  override def delete: DeleteBuilder[Issue1422Fields, Issue1422Row] = {
    DeleteBuilder(""""public"."issue142_2"""", Issue1422Fields.structure)
  }
  override def deleteById(tabellkode: Issue142Id): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "public"."issue142_2" where "tabellkode" = ${Segment.paramSegment(tabellkode)(Issue142Id.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(tabellkodes: Array[Issue142Id]): ZIO[ZConnection, Throwable, Long] = {
    sql"""delete from "public"."issue142_2" where "tabellkode" = ANY(${tabellkodes})""".delete
  }
  override def insert(unsaved: Issue1422Row): ZIO[ZConnection, Throwable, Issue1422Row] = {
    sql"""insert into "public"."issue142_2"("tabellkode")
          values (${Segment.paramSegment(unsaved.tabellkode)(Issue142Id.setter)})
          returning "tabellkode"
       """.insertReturning(using Issue1422Row.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, Issue1422Row], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "public"."issue142_2"("tabellkode") FROM STDIN""", batchSize, unsaved)(Issue1422Row.text)
  }
  override def select: SelectBuilder[Issue1422Fields, Issue1422Row] = {
    SelectBuilderSql(""""public"."issue142_2"""", Issue1422Fields.structure, Issue1422Row.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, Issue1422Row] = {
    sql"""select "tabellkode" from "public"."issue142_2"""".query(using Issue1422Row.jdbcDecoder).selectStream()
  }
  override def selectById(tabellkode: Issue142Id): ZIO[ZConnection, Throwable, Option[Issue1422Row]] = {
    sql"""select "tabellkode" from "public"."issue142_2" where "tabellkode" = ${Segment.paramSegment(tabellkode)(Issue142Id.setter)}""".query(using Issue1422Row.jdbcDecoder).selectOne
  }
  override def selectByIds(tabellkodes: Array[Issue142Id]): ZStream[ZConnection, Throwable, Issue1422Row] = {
    sql"""select "tabellkode" from "public"."issue142_2" where "tabellkode" = ANY(${Segment.paramSegment(tabellkodes)(Issue142Id.arraySetter)})""".query(using Issue1422Row.jdbcDecoder).selectStream()
  }
  override def selectByIdsTracked(tabellkodes: Array[Issue142Id]): ZIO[ZConnection, Throwable, Map[Issue142Id, Issue1422Row]] = {
    selectByIds(tabellkodes).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.tabellkode, x)).toMap
      tabellkodes.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[Issue1422Fields, Issue1422Row] = {
    UpdateBuilder(""""public"."issue142_2"""", Issue1422Fields.structure, Issue1422Row.jdbcDecoder)
  }
  override def upsert(unsaved: Issue1422Row): ZIO[ZConnection, Throwable, UpdateResult[Issue1422Row]] = {
    sql"""insert into "public"."issue142_2"("tabellkode")
          values (
            ${Segment.paramSegment(unsaved.tabellkode)(Issue142Id.setter)}
          )
          on conflict ("tabellkode")
          do update set "tabellkode" = EXCLUDED."tabellkode"
          returning "tabellkode"""".insertReturning(using Issue1422Row.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, Issue1422Row], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table issue142_2_TEMP (like "public"."issue142_2") on commit drop""".execute
    val copied = streamingInsert(s"""copy issue142_2_TEMP("tabellkode") from stdin""", batchSize, unsaved)(Issue1422Row.text)
    val merged = sql"""insert into "public"."issue142_2"("tabellkode")
                       select * from issue142_2_TEMP
                       on conflict ("tabellkode")
                       do nothing
                       ;
                       drop table issue142_2_TEMP;""".update
    created *> copied *> merged
  }
}
