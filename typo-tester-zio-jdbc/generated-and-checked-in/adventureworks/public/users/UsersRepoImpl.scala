/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package users

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoUnknownCitext
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object UsersRepoImpl extends UsersRepo {
  override def delete(userId: UsersId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from public.users where "user_id" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[UsersFields, UsersRow] = {
    DeleteBuilder("public.users", UsersFields)
  }
  override def insert(unsaved: UsersRow): ZIO[ZConnection, Throwable, UsersRow] = {
    sql"""insert into public.users("user_id", "name", "last_name", "email", "password", "created_at", "verified_on")
          values (???::uuid, ???, ???, ???::citext, ???, ???::timestamptz, ???::timestamptz)
          returning "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: UsersRowUnsaved): ZIO[ZConnection, Throwable, UsersRow] = {
    val fs = List(
      Some((SqlFragment(s""""user_id""""), sql"???::uuid")),
      Some((SqlFragment(s""""name""""), sql"???")),
      Some((SqlFragment(s""""last_name""""), sql"???")),
      Some((SqlFragment(s""""email""""), sql"???::citext")),
      Some((SqlFragment(s""""password""""), sql"???")),
      Some((SqlFragment(s""""verified_on""""), sql"???::timestamptz")),
      unsaved.createdAt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""created_at""""), sql"???::timestamptz"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into public.users default values
            returning "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into public.users(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[UsersFields, UsersRow] = {
    SelectBuilderSql("public.users", UsersFields, UsersRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, UsersRow] = {
    sql"""select "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text from public.users""".query[UsersRow].selectStream
  }
  override def selectById(userId: UsersId): ZIO[ZConnection, Throwable, Option[UsersRow]] = {
    sql"""select "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text from public.users where "user_id" = ???""".query[UsersRow].selectOne
  }
  override def selectByIds(userIds: Array[UsersId]): ZStream[ZConnection, Throwable, UsersRow] = {
    sql"""select "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text from public.users where "user_id" = ANY(${userIds})""".query[UsersRow].selectStream
  }
  override def selectByUnique(email: TypoUnknownCitext): ZIO[ZConnection, Throwable, Option[UsersRow]] = {
    sql"""select "email"::text
          from public.users
          where "email" = ???
       """.query[UsersRow].selectOne
  }
  override def update(row: UsersRow): ZIO[ZConnection, Throwable, Boolean] = {
    val userId = row.userId
    sql"""update public.users
          set "name" = ???,
              "last_name" = ???,
              "email" = ???::citext,
              "password" = ???,
              "created_at" = ???::timestamptz,
              "verified_on" = ???::timestamptz
          where "user_id" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[UsersFields, UsersRow] = {
    UpdateBuilder("public.users", UsersFields, UsersRow.read)
  }
  override def upsert(unsaved: UsersRow): ZIO[ZConnection, Throwable, UsersRow] = {
    sql"""insert into public.users("user_id", "name", "last_name", "email", "password", "created_at", "verified_on")
          values (
            ???::uuid,
            ???,
            ???,
            ???::citext,
            ???,
            ???::timestamptz,
            ???::timestamptz
          )
          on conflict ("user_id")
          do update set
            "name" = EXCLUDED."name",
            "last_name" = EXCLUDED."last_name",
            "email" = EXCLUDED."email",
            "password" = EXCLUDED."password",
            "created_at" = EXCLUDED."created_at",
            "verified_on" = EXCLUDED."verified_on"
          returning "user_id", "name", "last_name", "email"::text, "password", "created_at"::text, "verified_on"::text
       """.query(???).unique
  }
}
