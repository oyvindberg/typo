/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package users

import adventureworks.customtypes.TypoUUID
import typo.dsl.Bijection
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Type for the primary key of table `public.users` */
case class UsersId(value: TypoUUID) extends AnyVal
object UsersId {
  implicit lazy val bijection: Bijection[UsersId, TypoUUID] = Bijection[UsersId, TypoUUID](_.value)(UsersId.apply)
  implicit lazy val decoder: JsonDecoder[UsersId] = TypoUUID.decoder.map(UsersId.apply)
  implicit lazy val encoder: JsonEncoder[UsersId] = TypoUUID.encoder.contramap(_.value)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[UsersId] = Ordering.by(_.value)
}
