/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package only_pk_columns

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: public.only_pk_columns
    Composite primary key: key_column_1, key_column_2 */
case class OnlyPkColumnsRow(
  keyColumn1: String,
  keyColumn2: Int
){
   val compositeId: OnlyPkColumnsId = OnlyPkColumnsId(keyColumn1, keyColumn2)
   val id = compositeId
 }

object OnlyPkColumnsRow {
  def apply(compositeId: OnlyPkColumnsId) =
    new OnlyPkColumnsRow(compositeId.keyColumn1, compositeId.keyColumn2)
  implicit lazy val jdbcDecoder: JdbcDecoder[OnlyPkColumnsRow] = new JdbcDecoder[OnlyPkColumnsRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, OnlyPkColumnsRow) =
      columIndex + 1 ->
        OnlyPkColumnsRow(
          keyColumn1 = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 0, rs)._2,
          keyColumn2 = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 1, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[OnlyPkColumnsRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val keyColumn1 = jsonObj.get("key_column_1").toRight("Missing field 'key_column_1'").flatMap(_.as(JsonDecoder.string))
    val keyColumn2 = jsonObj.get("key_column_2").toRight("Missing field 'key_column_2'").flatMap(_.as(JsonDecoder.int))
    if (keyColumn1.isRight && keyColumn2.isRight)
      Right(OnlyPkColumnsRow(keyColumn1 = keyColumn1.toOption.get, keyColumn2 = keyColumn2.toOption.get))
    else Left(List[Either[String, Any]](keyColumn1, keyColumn2).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[OnlyPkColumnsRow] = new JsonEncoder[OnlyPkColumnsRow] {
    override def unsafeEncode(a: OnlyPkColumnsRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""key_column_1":""")
      JsonEncoder.string.unsafeEncode(a.keyColumn1, indent, out)
      out.write(",")
      out.write(""""key_column_2":""")
      JsonEncoder.int.unsafeEncode(a.keyColumn2, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[OnlyPkColumnsRow] = Text.instance[OnlyPkColumnsRow]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.keyColumn1, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.keyColumn2, sb)
  }
}
