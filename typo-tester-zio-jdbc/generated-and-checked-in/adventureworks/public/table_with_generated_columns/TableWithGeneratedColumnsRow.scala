/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package table_with_generated_columns

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: public.table-with-generated-columns
    Primary key: name */
case class TableWithGeneratedColumnsRow(
  name: TableWithGeneratedColumnsId,
  /** Generated ALWAYS, expression: 
      CASE
          WHEN (name IS NOT NULL) THEN 'no-name'::text
          WHEN (name = 'a'::text) THEN 'a-name'::text
          ELSE 'some-name'::text
      END */
  nameTypeAlways: String
){
   val id = name
   def toUnsavedRow(): TableWithGeneratedColumnsRowUnsaved =
     TableWithGeneratedColumnsRowUnsaved(name)
 }

object TableWithGeneratedColumnsRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[TableWithGeneratedColumnsRow] = new JdbcDecoder[TableWithGeneratedColumnsRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, TableWithGeneratedColumnsRow) =
      columIndex + 1 ->
        TableWithGeneratedColumnsRow(
          name = TableWithGeneratedColumnsId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          nameTypeAlways = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[TableWithGeneratedColumnsRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(TableWithGeneratedColumnsId.jsonDecoder))
    val nameTypeAlways = jsonObj.get("name-type-always").toRight("Missing field 'name-type-always'").flatMap(_.as(JsonDecoder.string))
    if (name.isRight && nameTypeAlways.isRight)
      Right(TableWithGeneratedColumnsRow(name = name.toOption.get, nameTypeAlways = nameTypeAlways.toOption.get))
    else Left(List[Either[String, Any]](name, nameTypeAlways).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TableWithGeneratedColumnsRow] = new JsonEncoder[TableWithGeneratedColumnsRow] {
    override def unsafeEncode(a: TableWithGeneratedColumnsRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      TableWithGeneratedColumnsId.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""name-type-always":""")
      JsonEncoder.string.unsafeEncode(a.nameTypeAlways, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[TableWithGeneratedColumnsRow] = Text.instance[TableWithGeneratedColumnsRow]{ (row, sb) =>
    TableWithGeneratedColumnsId.text.unsafeEncode(row.name, sb)
  }
}
