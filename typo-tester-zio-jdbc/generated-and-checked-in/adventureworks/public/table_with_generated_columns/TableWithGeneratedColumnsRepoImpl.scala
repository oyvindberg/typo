/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package table_with_generated_columns

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class TableWithGeneratedColumnsRepoImpl extends TableWithGeneratedColumnsRepo {
  override def delete: DeleteBuilder[TableWithGeneratedColumnsFields, TableWithGeneratedColumnsRow] = {
    DeleteBuilder(""""public"."table-with-generated-columns"""", TableWithGeneratedColumnsFields.structure)
  }
  override def deleteById(name: TableWithGeneratedColumnsId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "public"."table-with-generated-columns" where "name" = ${Segment.paramSegment(name)(TableWithGeneratedColumnsId.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(names: Array[TableWithGeneratedColumnsId]): ZIO[ZConnection, Throwable, Long] = {
    sql"""delete from "public"."table-with-generated-columns" where "name" = ANY(${names})""".delete
  }
  override def insert(unsaved: TableWithGeneratedColumnsRow): ZIO[ZConnection, Throwable, TableWithGeneratedColumnsRow] = {
    sql"""insert into "public"."table-with-generated-columns"("name")
          values (${Segment.paramSegment(unsaved.name)(TableWithGeneratedColumnsId.setter)})
          returning "name", "name-type-always"
       """.insertReturning(using TableWithGeneratedColumnsRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insert(unsaved: TableWithGeneratedColumnsRowUnsaved): ZIO[ZConnection, Throwable, TableWithGeneratedColumnsRow] = {
    val fs = List(
      Some((sql""""name"""", sql"${Segment.paramSegment(unsaved.name)(TableWithGeneratedColumnsId.setter)}"))
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "public"."table-with-generated-columns" default values
            returning "name", "name-type-always"
         """
    } else {
      val names  = fs.map { case (n, _) => n }.mkFragment(SqlFragment(", "))
      val values = fs.map { case (_, f) => f }.mkFragment(SqlFragment(", "))
      sql"""insert into "public"."table-with-generated-columns"($names) values ($values) returning "name", "name-type-always""""
    }
    q.insertReturning(using TableWithGeneratedColumnsRow.jdbcDecoder).map(_.updatedKeys.head)
    
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, TableWithGeneratedColumnsRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "public"."table-with-generated-columns"("name") FROM STDIN""", batchSize, unsaved)(TableWithGeneratedColumnsRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: ZStream[ZConnection, Throwable, TableWithGeneratedColumnsRowUnsaved], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "public"."table-with-generated-columns"("name") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""", batchSize, unsaved)(TableWithGeneratedColumnsRowUnsaved.text)
  }
  override def select: SelectBuilder[TableWithGeneratedColumnsFields, TableWithGeneratedColumnsRow] = {
    SelectBuilderSql(""""public"."table-with-generated-columns"""", TableWithGeneratedColumnsFields.structure, TableWithGeneratedColumnsRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, TableWithGeneratedColumnsRow] = {
    sql"""select "name", "name-type-always" from "public"."table-with-generated-columns"""".query(using TableWithGeneratedColumnsRow.jdbcDecoder).selectStream()
  }
  override def selectById(name: TableWithGeneratedColumnsId): ZIO[ZConnection, Throwable, Option[TableWithGeneratedColumnsRow]] = {
    sql"""select "name", "name-type-always" from "public"."table-with-generated-columns" where "name" = ${Segment.paramSegment(name)(TableWithGeneratedColumnsId.setter)}""".query(using TableWithGeneratedColumnsRow.jdbcDecoder).selectOne
  }
  override def selectByIds(names: Array[TableWithGeneratedColumnsId]): ZStream[ZConnection, Throwable, TableWithGeneratedColumnsRow] = {
    sql"""select "name", "name-type-always" from "public"."table-with-generated-columns" where "name" = ANY(${Segment.paramSegment(names)(TableWithGeneratedColumnsId.arraySetter)})""".query(using TableWithGeneratedColumnsRow.jdbcDecoder).selectStream()
  }
  override def selectByIdsTracked(names: Array[TableWithGeneratedColumnsId]): ZIO[ZConnection, Throwable, Map[TableWithGeneratedColumnsId, TableWithGeneratedColumnsRow]] = {
    selectByIds(names).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.name, x)).toMap
      names.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[TableWithGeneratedColumnsFields, TableWithGeneratedColumnsRow] = {
    UpdateBuilder(""""public"."table-with-generated-columns"""", TableWithGeneratedColumnsFields.structure, TableWithGeneratedColumnsRow.jdbcDecoder)
  }
  override def upsert(unsaved: TableWithGeneratedColumnsRow): ZIO[ZConnection, Throwable, UpdateResult[TableWithGeneratedColumnsRow]] = {
    sql"""insert into "public"."table-with-generated-columns"("name")
          values (
            ${Segment.paramSegment(unsaved.name)(TableWithGeneratedColumnsId.setter)}
          )
          on conflict ("name")
          do nothing
          returning "name", "name-type-always"""".insertReturning(using TableWithGeneratedColumnsRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, TableWithGeneratedColumnsRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table table-with-generated-columns_TEMP (like "public"."table-with-generated-columns") on commit drop""".execute
    val copied = streamingInsert(s"""copy table-with-generated-columns_TEMP("name") from stdin""", batchSize, unsaved)(TableWithGeneratedColumnsRow.text)
    val merged = sql"""insert into "public"."table-with-generated-columns"("name")
                       select * from table-with-generated-columns_TEMP
                       on conflict ("name")
                       do nothing
                       ;
                       drop table table-with-generated-columns_TEMP;""".update
    created *> copied *> merged
  }
}
