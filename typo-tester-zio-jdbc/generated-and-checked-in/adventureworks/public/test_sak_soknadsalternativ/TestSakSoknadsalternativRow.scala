/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_sak_soknadsalternativ

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import adventureworks.public.test_utdanningstilbud.TestUtdanningstilbudId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: public.test_sak_soknadsalternativ
    Composite primary key: organisasjonskode_saksbehandler, utdanningsmulighet_kode */
case class TestSakSoknadsalternativRow(
  organisasjonskodeSaksbehandler: String,
  /** Points to [[test_utdanningstilbud.TestUtdanningstilbudRow.utdanningsmulighetKode]] */
  utdanningsmulighetKode: String,
  /** Points to [[test_utdanningstilbud.TestUtdanningstilbudRow.organisasjonskode]] */
  organisasjonskodeTilbyder: TestOrganisasjonId
){
   val compositeId: TestSakSoknadsalternativId = TestSakSoknadsalternativId(organisasjonskodeSaksbehandler, utdanningsmulighetKode)
   val id = compositeId
   val extractTestUtdanningstilbudId: TestUtdanningstilbudId = TestUtdanningstilbudId(
     organisasjonskode = organisasjonskodeTilbyder,
     utdanningsmulighetKode = utdanningsmulighetKode
   )
 }

object TestSakSoknadsalternativRow {
  def apply(compositeId: TestSakSoknadsalternativId, organisasjonskodeTilbyder: TestOrganisasjonId) =
    new TestSakSoknadsalternativRow(compositeId.organisasjonskodeSaksbehandler, compositeId.utdanningsmulighetKode, organisasjonskodeTilbyder)
  implicit lazy val jdbcDecoder: JdbcDecoder[TestSakSoknadsalternativRow] = new JdbcDecoder[TestSakSoknadsalternativRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, TestSakSoknadsalternativRow) =
      columIndex + 2 ->
        TestSakSoknadsalternativRow(
          organisasjonskodeSaksbehandler = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 0, rs)._2,
          utdanningsmulighetKode = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          organisasjonskodeTilbyder = TestOrganisasjonId.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[TestSakSoknadsalternativRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val organisasjonskodeSaksbehandler = jsonObj.get("organisasjonskode_saksbehandler").toRight("Missing field 'organisasjonskode_saksbehandler'").flatMap(_.as(JsonDecoder.string))
    val utdanningsmulighetKode = jsonObj.get("utdanningsmulighet_kode").toRight("Missing field 'utdanningsmulighet_kode'").flatMap(_.as(JsonDecoder.string))
    val organisasjonskodeTilbyder = jsonObj.get("organisasjonskode_tilbyder").toRight("Missing field 'organisasjonskode_tilbyder'").flatMap(_.as(TestOrganisasjonId.jsonDecoder))
    if (organisasjonskodeSaksbehandler.isRight && utdanningsmulighetKode.isRight && organisasjonskodeTilbyder.isRight)
      Right(TestSakSoknadsalternativRow(organisasjonskodeSaksbehandler = organisasjonskodeSaksbehandler.toOption.get, utdanningsmulighetKode = utdanningsmulighetKode.toOption.get, organisasjonskodeTilbyder = organisasjonskodeTilbyder.toOption.get))
    else Left(List[Either[String, Any]](organisasjonskodeSaksbehandler, utdanningsmulighetKode, organisasjonskodeTilbyder).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TestSakSoknadsalternativRow] = new JsonEncoder[TestSakSoknadsalternativRow] {
    override def unsafeEncode(a: TestSakSoknadsalternativRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""organisasjonskode_saksbehandler":""")
      JsonEncoder.string.unsafeEncode(a.organisasjonskodeSaksbehandler, indent, out)
      out.write(",")
      out.write(""""utdanningsmulighet_kode":""")
      JsonEncoder.string.unsafeEncode(a.utdanningsmulighetKode, indent, out)
      out.write(",")
      out.write(""""organisasjonskode_tilbyder":""")
      TestOrganisasjonId.jsonEncoder.unsafeEncode(a.organisasjonskodeTilbyder, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[TestSakSoknadsalternativRow] = Text.instance[TestSakSoknadsalternativRow]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.organisasjonskodeSaksbehandler, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.utdanningsmulighetKode, sb)
    sb.append(Text.DELIMETER)
    TestOrganisasjonId.text.unsafeEncode(row.organisasjonskodeTilbyder, sb)
  }
}
