/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_sak_soknadsalternativ

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import adventureworks.public.test_utdanningstilbud.TestUtdanningstilbudFields
import adventureworks.public.test_utdanningstilbud.TestUtdanningstilbudId
import adventureworks.public.test_utdanningstilbud.TestUtdanningstilbudRow
import typo.dsl.ForeignKey
import typo.dsl.Path
import typo.dsl.Required
import typo.dsl.SqlExpr
import typo.dsl.SqlExpr.CompositeIn
import typo.dsl.SqlExpr.CompositeIn.TuplePart
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

trait TestSakSoknadsalternativFields {
  def organisasjonskodeSaksbehandler: IdField[String, TestSakSoknadsalternativRow]
  def utdanningsmulighetKode: IdField[String, TestSakSoknadsalternativRow]
  def organisasjonskodeTilbyder: Field[TestOrganisasjonId, TestSakSoknadsalternativRow]
  def fkTestUtdanningstilbud: ForeignKey[TestUtdanningstilbudFields, TestUtdanningstilbudRow] =
    ForeignKey[TestUtdanningstilbudFields, TestUtdanningstilbudRow]("public.test_sak_soknadsalternativ_organisasjonskode_tilbyder_utda_fkey", Nil)
      .withColumnPair(organisasjonskodeTilbyder, _.organisasjonskode)
      .withColumnPair(utdanningsmulighetKode, _.utdanningsmulighetKode)
  def compositeIdIs(compositeId: TestSakSoknadsalternativId): SqlExpr[Boolean, Required] =
    organisasjonskodeSaksbehandler.isEqual(compositeId.organisasjonskodeSaksbehandler).and(utdanningsmulighetKode.isEqual(compositeId.utdanningsmulighetKode))
  def compositeIdIn(compositeIds: Array[TestSakSoknadsalternativId]): SqlExpr[Boolean, Required] =
    new CompositeIn(compositeIds)(TuplePart(organisasjonskodeSaksbehandler)(_.organisasjonskodeSaksbehandler), TuplePart(utdanningsmulighetKode)(_.utdanningsmulighetKode))
  
  def extractTestUtdanningstilbudIdIs(id: TestUtdanningstilbudId): SqlExpr[Boolean, Required] =
    organisasjonskodeTilbyder.isEqual(id.organisasjonskode).and(utdanningsmulighetKode.isEqual(id.utdanningsmulighetKode))
  def extractTestUtdanningstilbudIdIn(ids: Array[TestUtdanningstilbudId]): SqlExpr[Boolean, Required] =
    new CompositeIn(ids)(TuplePart(organisasjonskodeTilbyder)(_.organisasjonskode), TuplePart(utdanningsmulighetKode)(_.utdanningsmulighetKode))
  
}

object TestSakSoknadsalternativFields {
  lazy val structure: Relation[TestSakSoknadsalternativFields, TestSakSoknadsalternativRow] =
    new Impl(Nil)
    
  private final class Impl(val _path: List[Path])
    extends Relation[TestSakSoknadsalternativFields, TestSakSoknadsalternativRow] {
  
    override lazy val fields: TestSakSoknadsalternativFields = new TestSakSoknadsalternativFields {
      override def organisasjonskodeSaksbehandler = IdField[String, TestSakSoknadsalternativRow](_path, "organisasjonskode_saksbehandler", None, None, x => x.organisasjonskodeSaksbehandler, (row, value) => row.copy(organisasjonskodeSaksbehandler = value))
      override def utdanningsmulighetKode = IdField[String, TestSakSoknadsalternativRow](_path, "utdanningsmulighet_kode", None, None, x => x.utdanningsmulighetKode, (row, value) => row.copy(utdanningsmulighetKode = value))
      override def organisasjonskodeTilbyder = Field[TestOrganisasjonId, TestSakSoknadsalternativRow](_path, "organisasjonskode_tilbyder", None, None, x => x.organisasjonskodeTilbyder, (row, value) => row.copy(organisasjonskodeTilbyder = value))
    }
  
    override lazy val columns: List[FieldLikeNoHkt[?, TestSakSoknadsalternativRow]] =
      List[FieldLikeNoHkt[?, TestSakSoknadsalternativRow]](fields.organisasjonskodeSaksbehandler, fields.utdanningsmulighetKode, fields.organisasjonskodeTilbyder)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
