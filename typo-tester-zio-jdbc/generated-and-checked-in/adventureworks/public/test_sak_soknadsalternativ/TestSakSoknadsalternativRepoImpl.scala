/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_sak_soknadsalternativ

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class TestSakSoknadsalternativRepoImpl extends TestSakSoknadsalternativRepo {
  override def delete: DeleteBuilder[TestSakSoknadsalternativFields, TestSakSoknadsalternativRow] = {
    DeleteBuilder(""""public"."test_sak_soknadsalternativ"""", TestSakSoknadsalternativFields.structure)
  }
  override def deleteById(compositeId: TestSakSoknadsalternativId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "public"."test_sak_soknadsalternativ" where "organisasjonskode_saksbehandler" = ${Segment.paramSegment(compositeId.organisasjonskodeSaksbehandler)(Setter.stringSetter)} AND "utdanningsmulighet_kode" = ${Segment.paramSegment(compositeId.utdanningsmulighetKode)(Setter.stringSetter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(compositeIds: Array[TestSakSoknadsalternativId]): ZIO[ZConnection, Throwable, Long] = {
    val organisasjonskodeSaksbehandler = compositeIds.map(_.organisasjonskodeSaksbehandler)
    val utdanningsmulighetKode = compositeIds.map(_.utdanningsmulighetKode)
    sql"""delete
          from "public"."test_sak_soknadsalternativ"
          where ("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")
          in (select unnest(${organisasjonskodeSaksbehandler}), unnest(${utdanningsmulighetKode}))
       """.delete
    
  }
  override def insert(unsaved: TestSakSoknadsalternativRow): ZIO[ZConnection, Throwable, TestSakSoknadsalternativRow] = {
    sql"""insert into "public"."test_sak_soknadsalternativ"("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")
          values (${Segment.paramSegment(unsaved.organisasjonskodeSaksbehandler)(Setter.stringSetter)}, ${Segment.paramSegment(unsaved.utdanningsmulighetKode)(Setter.stringSetter)}, ${Segment.paramSegment(unsaved.organisasjonskodeTilbyder)(TestOrganisasjonId.setter)})
          returning "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder"
       """.insertReturning(using TestSakSoknadsalternativRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, TestSakSoknadsalternativRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "public"."test_sak_soknadsalternativ"("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder") FROM STDIN""", batchSize, unsaved)(TestSakSoknadsalternativRow.text)
  }
  override def select: SelectBuilder[TestSakSoknadsalternativFields, TestSakSoknadsalternativRow] = {
    SelectBuilderSql(""""public"."test_sak_soknadsalternativ"""", TestSakSoknadsalternativFields.structure, TestSakSoknadsalternativRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, TestSakSoknadsalternativRow] = {
    sql"""select "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder" from "public"."test_sak_soknadsalternativ"""".query(using TestSakSoknadsalternativRow.jdbcDecoder).selectStream()
  }
  override def selectById(compositeId: TestSakSoknadsalternativId): ZIO[ZConnection, Throwable, Option[TestSakSoknadsalternativRow]] = {
    sql"""select "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder" from "public"."test_sak_soknadsalternativ" where "organisasjonskode_saksbehandler" = ${Segment.paramSegment(compositeId.organisasjonskodeSaksbehandler)(Setter.stringSetter)} AND "utdanningsmulighet_kode" = ${Segment.paramSegment(compositeId.utdanningsmulighetKode)(Setter.stringSetter)}""".query(using TestSakSoknadsalternativRow.jdbcDecoder).selectOne
  }
  override def selectByIds(compositeIds: Array[TestSakSoknadsalternativId]): ZStream[ZConnection, Throwable, TestSakSoknadsalternativRow] = {
    val organisasjonskodeSaksbehandler = compositeIds.map(_.organisasjonskodeSaksbehandler)
    val utdanningsmulighetKode = compositeIds.map(_.utdanningsmulighetKode)
    sql"""select "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder"
          from "public"."test_sak_soknadsalternativ"
          where ("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")
          in (select unnest(${organisasjonskodeSaksbehandler}), unnest(${utdanningsmulighetKode}))
       """.query(using TestSakSoknadsalternativRow.jdbcDecoder).selectStream()
    
  }
  override def selectByIdsTracked(compositeIds: Array[TestSakSoknadsalternativId]): ZIO[ZConnection, Throwable, Map[TestSakSoknadsalternativId, TestSakSoknadsalternativRow]] = {
    selectByIds(compositeIds).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.compositeId, x)).toMap
      compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[TestSakSoknadsalternativFields, TestSakSoknadsalternativRow] = {
    UpdateBuilder(""""public"."test_sak_soknadsalternativ"""", TestSakSoknadsalternativFields.structure, TestSakSoknadsalternativRow.jdbcDecoder)
  }
  override def update(row: TestSakSoknadsalternativRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update "public"."test_sak_soknadsalternativ"
          set "organisasjonskode_tilbyder" = ${Segment.paramSegment(row.organisasjonskodeTilbyder)(TestOrganisasjonId.setter)}
          where "organisasjonskode_saksbehandler" = ${Segment.paramSegment(compositeId.organisasjonskodeSaksbehandler)(Setter.stringSetter)} AND "utdanningsmulighet_kode" = ${Segment.paramSegment(compositeId.utdanningsmulighetKode)(Setter.stringSetter)}""".update.map(_ > 0)
  }
  override def upsert(unsaved: TestSakSoknadsalternativRow): ZIO[ZConnection, Throwable, UpdateResult[TestSakSoknadsalternativRow]] = {
    sql"""insert into "public"."test_sak_soknadsalternativ"("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")
          values (
            ${Segment.paramSegment(unsaved.organisasjonskodeSaksbehandler)(Setter.stringSetter)},
            ${Segment.paramSegment(unsaved.utdanningsmulighetKode)(Setter.stringSetter)},
            ${Segment.paramSegment(unsaved.organisasjonskodeTilbyder)(TestOrganisasjonId.setter)}
          )
          on conflict ("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")
          do update set
            "organisasjonskode_tilbyder" = EXCLUDED."organisasjonskode_tilbyder"
          returning "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder"""".insertReturning(using TestSakSoknadsalternativRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, TestSakSoknadsalternativRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table test_sak_soknadsalternativ_TEMP (like "public"."test_sak_soknadsalternativ") on commit drop""".execute
    val copied = streamingInsert(s"""copy test_sak_soknadsalternativ_TEMP("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder") from stdin""", batchSize, unsaved)(TestSakSoknadsalternativRow.text)
    val merged = sql"""insert into "public"."test_sak_soknadsalternativ"("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")
                       select * from test_sak_soknadsalternativ_TEMP
                       on conflict ("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")
                       do update set
                         "organisasjonskode_tilbyder" = EXCLUDED."organisasjonskode_tilbyder"
                       ;
                       drop table test_sak_soknadsalternativ_TEMP;""".update
    created *> copied *> merged
  }
}
