/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package title_domain

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class TitleDomainRepoImpl extends TitleDomainRepo {
  override def delete: DeleteBuilder[TitleDomainFields, TitleDomainRow] = {
    DeleteBuilder(""""public"."title_domain"""", TitleDomainFields.structure)
  }
  override def deleteById(code: TitleDomainId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "public"."title_domain" where "code" = ${Segment.paramSegment(code)(TitleDomainId.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(codes: Array[TitleDomainId]): ZIO[ZConnection, Throwable, Long] = {
    sql"""delete from "public"."title_domain" where "code" = ANY(${codes})""".delete
  }
  override def insert(unsaved: TitleDomainRow): ZIO[ZConnection, Throwable, TitleDomainRow] = {
    sql"""insert into "public"."title_domain"("code")
          values (${Segment.paramSegment(unsaved.code)(TitleDomainId.setter)}::text)
          returning "code"
       """.insertReturning(using TitleDomainRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, TitleDomainRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "public"."title_domain"("code") FROM STDIN""", batchSize, unsaved)(TitleDomainRow.text)
  }
  override def select: SelectBuilder[TitleDomainFields, TitleDomainRow] = {
    SelectBuilderSql(""""public"."title_domain"""", TitleDomainFields.structure, TitleDomainRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, TitleDomainRow] = {
    sql"""select "code" from "public"."title_domain"""".query(using TitleDomainRow.jdbcDecoder).selectStream()
  }
  override def selectById(code: TitleDomainId): ZIO[ZConnection, Throwable, Option[TitleDomainRow]] = {
    sql"""select "code" from "public"."title_domain" where "code" = ${Segment.paramSegment(code)(TitleDomainId.setter)}""".query(using TitleDomainRow.jdbcDecoder).selectOne
  }
  override def selectByIds(codes: Array[TitleDomainId]): ZStream[ZConnection, Throwable, TitleDomainRow] = {
    sql"""select "code" from "public"."title_domain" where "code" = ANY(${Segment.paramSegment(codes)(TitleDomainId.arraySetter)})""".query(using TitleDomainRow.jdbcDecoder).selectStream()
  }
  override def selectByIdsTracked(codes: Array[TitleDomainId]): ZIO[ZConnection, Throwable, Map[TitleDomainId, TitleDomainRow]] = {
    selectByIds(codes).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.code, x)).toMap
      codes.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[TitleDomainFields, TitleDomainRow] = {
    UpdateBuilder(""""public"."title_domain"""", TitleDomainFields.structure, TitleDomainRow.jdbcDecoder)
  }
  override def upsert(unsaved: TitleDomainRow): ZIO[ZConnection, Throwable, UpdateResult[TitleDomainRow]] = {
    sql"""insert into "public"."title_domain"("code")
          values (
            ${Segment.paramSegment(unsaved.code)(TitleDomainId.setter)}::text
          )
          on conflict ("code")
          do nothing
          returning "code"""".insertReturning(using TitleDomainRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, TitleDomainRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table title_domain_TEMP (like "public"."title_domain") on commit drop""".execute
    val copied = streamingInsert(s"""copy title_domain_TEMP("code") from stdin""", batchSize, unsaved)(TitleDomainRow.text)
    val merged = sql"""insert into "public"."title_domain"("code")
                       select * from title_domain_TEMP
                       on conflict ("code")
                       do nothing
                       ;
                       drop table title_domain_TEMP;""".update
    created *> copied *> merged
  }
}
