/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employee

import adventureworks.customtypes.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object EmployeeRepoImpl extends EmployeeRepo {
  override def delete(businessentityid: BusinessentityId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from humanresources.employee where "businessentityid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[EmployeeFields, EmployeeRow] = {
    DeleteBuilder("humanresources.employee", EmployeeFields)
  }
  override def insert(unsaved: EmployeeRow): ZIO[ZConnection, Throwable, EmployeeRow] = {
    sql"""insert into humanresources.employee("businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate", "maritalstatus", "gender", "hiredate", "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate", "organizationnode")
          values (???::int4, ???, ???, ???, ???::date, ???::bpchar, ???::bpchar, ???::date, ???::bool, ???::int2, ???::int2, ???::bool, ???::uuid, ???::timestamp, ???)
          returning "businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate"::text, "maritalstatus", "gender", "hiredate"::text, "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate"::text, "organizationnode"
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: EmployeeRowUnsaved): ZIO[ZConnection, Throwable, EmployeeRow] = {
    val fs = List(
      Some((SqlFragment(s""""businessentityid""""), sql"???::int4")),
      Some((SqlFragment(s""""nationalidnumber""""), sql"???")),
      Some((SqlFragment(s""""loginid""""), sql"???")),
      Some((SqlFragment(s""""jobtitle""""), sql"???")),
      Some((SqlFragment(s""""birthdate""""), sql"???::date")),
      Some((SqlFragment(s""""maritalstatus""""), sql"???::bpchar")),
      Some((SqlFragment(s""""gender""""), sql"???::bpchar")),
      Some((SqlFragment(s""""hiredate""""), sql"???::date")),
      unsaved.salariedflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""salariedflag""""), sql"???::bool"))
      },
      unsaved.vacationhours match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""vacationhours""""), sql"???::int2"))
      },
      unsaved.sickleavehours match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""sickleavehours""""), sql"???::int2"))
      },
      unsaved.currentflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""currentflag""""), sql"???::bool"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""rowguid""""), sql"???::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      },
      unsaved.organizationnode match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""organizationnode""""), sql"???"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into humanresources.employee default values
            returning "businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate"::text, "maritalstatus", "gender", "hiredate"::text, "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate"::text, "organizationnode"
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into humanresources.employee(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate"::text, "maritalstatus", "gender", "hiredate"::text, "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate"::text, "organizationnode"
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[EmployeeFields, EmployeeRow] = {
    SelectBuilderSql("humanresources.employee", EmployeeFields, EmployeeRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, EmployeeRow] = {
    sql"""select "businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate"::text, "maritalstatus", "gender", "hiredate"::text, "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate"::text, "organizationnode" from humanresources.employee""".query[EmployeeRow].selectStream
  }
  override def selectById(businessentityid: BusinessentityId): ZIO[ZConnection, Throwable, Option[EmployeeRow]] = {
    sql"""select "businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate"::text, "maritalstatus", "gender", "hiredate"::text, "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate"::text, "organizationnode" from humanresources.employee where "businessentityid" = ???""".query[EmployeeRow].selectOne
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): ZStream[ZConnection, Throwable, EmployeeRow] = {
    sql"""select "businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate"::text, "maritalstatus", "gender", "hiredate"::text, "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate"::text, "organizationnode" from humanresources.employee where "businessentityid" = ANY(${businessentityids})""".query[EmployeeRow].selectStream
  }
  override def update(row: EmployeeRow): ZIO[ZConnection, Throwable, Boolean] = {
    val businessentityid = row.businessentityid
    sql"""update humanresources.employee
          set "nationalidnumber" = ???,
              "loginid" = ???,
              "jobtitle" = ???,
              "birthdate" = ???::date,
              "maritalstatus" = ???::bpchar,
              "gender" = ???::bpchar,
              "hiredate" = ???::date,
              "salariedflag" = ???::bool,
              "vacationhours" = ???::int2,
              "sickleavehours" = ???::int2,
              "currentflag" = ???::bool,
              "rowguid" = ???::uuid,
              "modifieddate" = ???::timestamp,
              "organizationnode" = ???
          where "businessentityid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[EmployeeFields, EmployeeRow] = {
    UpdateBuilder("humanresources.employee", EmployeeFields, EmployeeRow.read)
  }
  override def upsert(unsaved: EmployeeRow): ZIO[ZConnection, Throwable, EmployeeRow] = {
    sql"""insert into humanresources.employee("businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate", "maritalstatus", "gender", "hiredate", "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate", "organizationnode")
          values (
            ???::int4,
            ???,
            ???,
            ???,
            ???::date,
            ???::bpchar,
            ???::bpchar,
            ???::date,
            ???::bool,
            ???::int2,
            ???::int2,
            ???::bool,
            ???::uuid,
            ???::timestamp,
            ???
          )
          on conflict ("businessentityid")
          do update set
            "nationalidnumber" = EXCLUDED."nationalidnumber",
            "loginid" = EXCLUDED."loginid",
            "jobtitle" = EXCLUDED."jobtitle",
            "birthdate" = EXCLUDED."birthdate",
            "maritalstatus" = EXCLUDED."maritalstatus",
            "gender" = EXCLUDED."gender",
            "hiredate" = EXCLUDED."hiredate",
            "salariedflag" = EXCLUDED."salariedflag",
            "vacationhours" = EXCLUDED."vacationhours",
            "sickleavehours" = EXCLUDED."sickleavehours",
            "currentflag" = EXCLUDED."currentflag",
            "rowguid" = EXCLUDED."rowguid",
            "modifieddate" = EXCLUDED."modifieddate",
            "organizationnode" = EXCLUDED."organizationnode"
          returning "businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate"::text, "maritalstatus", "gender", "hiredate"::text, "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate"::text, "organizationnode"
       """.query(???).unique
  }
}
