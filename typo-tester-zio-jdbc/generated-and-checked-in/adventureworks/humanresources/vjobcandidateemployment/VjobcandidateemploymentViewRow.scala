/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidateemployment

import adventureworks.customtypes.TypoLocalDate
import adventureworks.humanresources.jobcandidate.JobcandidateId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class VjobcandidateemploymentViewRow(
  /** Points to [[jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: JobcandidateId,
  EmpStartDate: /* nullability unknown */ Option[TypoLocalDate],
  EmpEndDate: /* nullability unknown */ Option[TypoLocalDate],
  EmpOrgName: /* nullability unknown */ Option[/* max 100 chars */ String],
  EmpJobTitle: /* nullability unknown */ Option[/* max 100 chars */ String],
  EmpResponsibility: /* nullability unknown */ Option[String],
  EmpFunctionCategory: /* nullability unknown */ Option[String],
  EmpIndustryCategory: /* nullability unknown */ Option[String],
  EmpLocCountryRegion: /* nullability unknown */ Option[String],
  EmpLocState: /* nullability unknown */ Option[String],
  EmpLocCity: /* nullability unknown */ Option[String]
)

object VjobcandidateemploymentViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[VjobcandidateemploymentViewRow] = new JdbcDecoder[VjobcandidateemploymentViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, VjobcandidateemploymentViewRow) =
      columIndex + 10 ->
        VjobcandidateemploymentViewRow(
          jobcandidateid = JobcandidateId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          EmpStartDate = JdbcDecoder.optionDecoder(TypoLocalDate.jdbcDecoder).unsafeDecode(columIndex + 1, rs)._2,
          EmpEndDate = JdbcDecoder.optionDecoder(TypoLocalDate.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          EmpOrgName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          EmpJobTitle = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          EmpResponsibility = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          EmpFunctionCategory = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          EmpIndustryCategory = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          EmpLocCountryRegion = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          EmpLocState = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2,
          EmpLocCity = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 10, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[VjobcandidateemploymentViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val jobcandidateid = jsonObj.get("jobcandidateid").toRight("Missing field 'jobcandidateid'").flatMap(_.as(JobcandidateId.jsonDecoder))
    val EmpStartDate = jsonObj.get("Emp.StartDate").fold[Either[String, Option[TypoLocalDate]]](Right(None))(_.as(JsonDecoder.option(TypoLocalDate.jsonDecoder)))
    val EmpEndDate = jsonObj.get("Emp.EndDate").fold[Either[String, Option[TypoLocalDate]]](Right(None))(_.as(JsonDecoder.option(TypoLocalDate.jsonDecoder)))
    val EmpOrgName = jsonObj.get("Emp.OrgName").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val EmpJobTitle = jsonObj.get("Emp.JobTitle").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val EmpResponsibility = jsonObj.get("Emp.Responsibility").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val EmpFunctionCategory = jsonObj.get("Emp.FunctionCategory").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val EmpIndustryCategory = jsonObj.get("Emp.IndustryCategory").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val EmpLocCountryRegion = jsonObj.get("Emp.Loc.CountryRegion").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val EmpLocState = jsonObj.get("Emp.Loc.State").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val EmpLocCity = jsonObj.get("Emp.Loc.City").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (jobcandidateid.isRight && EmpStartDate.isRight && EmpEndDate.isRight && EmpOrgName.isRight && EmpJobTitle.isRight && EmpResponsibility.isRight && EmpFunctionCategory.isRight && EmpIndustryCategory.isRight && EmpLocCountryRegion.isRight && EmpLocState.isRight && EmpLocCity.isRight)
      Right(VjobcandidateemploymentViewRow(jobcandidateid = jobcandidateid.toOption.get, EmpStartDate = EmpStartDate.toOption.get, EmpEndDate = EmpEndDate.toOption.get, EmpOrgName = EmpOrgName.toOption.get, EmpJobTitle = EmpJobTitle.toOption.get, EmpResponsibility = EmpResponsibility.toOption.get, EmpFunctionCategory = EmpFunctionCategory.toOption.get, EmpIndustryCategory = EmpIndustryCategory.toOption.get, EmpLocCountryRegion = EmpLocCountryRegion.toOption.get, EmpLocState = EmpLocState.toOption.get, EmpLocCity = EmpLocCity.toOption.get))
    else Left(List[Either[String, Any]](jobcandidateid, EmpStartDate, EmpEndDate, EmpOrgName, EmpJobTitle, EmpResponsibility, EmpFunctionCategory, EmpIndustryCategory, EmpLocCountryRegion, EmpLocState, EmpLocCity).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[VjobcandidateemploymentViewRow] = new JsonEncoder[VjobcandidateemploymentViewRow] {
    override def unsafeEncode(a: VjobcandidateemploymentViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""jobcandidateid":""")
      JobcandidateId.jsonEncoder.unsafeEncode(a.jobcandidateid, indent, out)
      out.write(",")
      out.write(""""Emp.StartDate":""")
      JsonEncoder.option(TypoLocalDate.jsonEncoder).unsafeEncode(a.EmpStartDate, indent, out)
      out.write(",")
      out.write(""""Emp.EndDate":""")
      JsonEncoder.option(TypoLocalDate.jsonEncoder).unsafeEncode(a.EmpEndDate, indent, out)
      out.write(",")
      out.write(""""Emp.OrgName":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.EmpOrgName, indent, out)
      out.write(",")
      out.write(""""Emp.JobTitle":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.EmpJobTitle, indent, out)
      out.write(",")
      out.write(""""Emp.Responsibility":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.EmpResponsibility, indent, out)
      out.write(",")
      out.write(""""Emp.FunctionCategory":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.EmpFunctionCategory, indent, out)
      out.write(",")
      out.write(""""Emp.IndustryCategory":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.EmpIndustryCategory, indent, out)
      out.write(",")
      out.write(""""Emp.Loc.CountryRegion":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.EmpLocCountryRegion, indent, out)
      out.write(",")
      out.write(""""Emp.Loc.State":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.EmpLocState, indent, out)
      out.write(",")
      out.write(""""Emp.Loc.City":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.EmpLocCity, indent, out)
      out.write("}")
    }
  }
}
