/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeepayhistory

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `humanresources.employeepayhistory` */
case class EmployeepayhistoryId(
  businessentityid: BusinessentityId,
  ratechangedate: TypoLocalDateTime
)
object EmployeepayhistoryId {
  implicit lazy val jsonDecoder: JsonDecoder[EmployeepayhistoryId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val businessentityid = jsonObj.get("businessentityid").toRight("Missing field 'businessentityid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val ratechangedate = jsonObj.get("ratechangedate").toRight("Missing field 'ratechangedate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (businessentityid.isRight && ratechangedate.isRight)
      Right(EmployeepayhistoryId(businessentityid = businessentityid.toOption.get, ratechangedate = ratechangedate.toOption.get))
    else Left(List[Either[String, Any]](businessentityid, ratechangedate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[EmployeepayhistoryId] = new JsonEncoder[EmployeepayhistoryId] {
    override def unsafeEncode(a: EmployeepayhistoryId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""businessentityid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.businessentityid, indent, out)
      out.write(",")
      out.write(""""ratechangedate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.ratechangedate, indent, out)
      out.write("}")
    }
  }
  implicit def ordering(implicit O0: Ordering[TypoLocalDateTime]): Ordering[EmployeepayhistoryId] = Ordering.by(x => (x.businessentityid, x.ratechangedate))
}
