/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidateeducation

import adventureworks.customtypes.TypoLocalDate
import adventureworks.humanresources.jobcandidate.JobcandidateId
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class VjobcandidateeducationViewStructure[Row](val prefix: Option[String], val extract: Row => VjobcandidateeducationViewRow, val merge: (Row, VjobcandidateeducationViewRow) => Row)
  extends Relation[VjobcandidateeducationViewFields, VjobcandidateeducationViewRow, Row]
    with VjobcandidateeducationViewFields[Row] { outer =>

  override val jobcandidateid = new Field[JobcandidateId, Row](prefix, "jobcandidateid", None, None)(x => extract(x).jobcandidateid, (row, value) => merge(row, extract(row).copy(jobcandidateid = value)))
  override val `Edu.Level` = new OptField[/* max 50 chars */ String, Row](prefix, "Edu.Level", None, None)(x => extract(x).`Edu.Level`, (row, value) => merge(row, extract(row).copy(`Edu.Level` = value)))
  override val `Edu.StartDate` = new OptField[TypoLocalDate, Row](prefix, "Edu.StartDate", Some("text"), None)(x => extract(x).`Edu.StartDate`, (row, value) => merge(row, extract(row).copy(`Edu.StartDate` = value)))
  override val `Edu.EndDate` = new OptField[TypoLocalDate, Row](prefix, "Edu.EndDate", Some("text"), None)(x => extract(x).`Edu.EndDate`, (row, value) => merge(row, extract(row).copy(`Edu.EndDate` = value)))
  override val `Edu.Degree` = new OptField[/* max 50 chars */ String, Row](prefix, "Edu.Degree", None, None)(x => extract(x).`Edu.Degree`, (row, value) => merge(row, extract(row).copy(`Edu.Degree` = value)))
  override val `Edu.Major` = new OptField[/* max 50 chars */ String, Row](prefix, "Edu.Major", None, None)(x => extract(x).`Edu.Major`, (row, value) => merge(row, extract(row).copy(`Edu.Major` = value)))
  override val `Edu.Minor` = new OptField[/* max 50 chars */ String, Row](prefix, "Edu.Minor", None, None)(x => extract(x).`Edu.Minor`, (row, value) => merge(row, extract(row).copy(`Edu.Minor` = value)))
  override val `Edu.GPA` = new OptField[/* max 5 chars */ String, Row](prefix, "Edu.GPA", None, None)(x => extract(x).`Edu.GPA`, (row, value) => merge(row, extract(row).copy(`Edu.GPA` = value)))
  override val `Edu.GPAScale` = new OptField[/* max 5 chars */ String, Row](prefix, "Edu.GPAScale", None, None)(x => extract(x).`Edu.GPAScale`, (row, value) => merge(row, extract(row).copy(`Edu.GPAScale` = value)))
  override val `Edu.School` = new OptField[/* max 100 chars */ String, Row](prefix, "Edu.School", None, None)(x => extract(x).`Edu.School`, (row, value) => merge(row, extract(row).copy(`Edu.School` = value)))
  override val `Edu.Loc.CountryRegion` = new OptField[/* max 100 chars */ String, Row](prefix, "Edu.Loc.CountryRegion", None, None)(x => extract(x).`Edu.Loc.CountryRegion`, (row, value) => merge(row, extract(row).copy(`Edu.Loc.CountryRegion` = value)))
  override val `Edu.Loc.State` = new OptField[/* max 100 chars */ String, Row](prefix, "Edu.Loc.State", None, None)(x => extract(x).`Edu.Loc.State`, (row, value) => merge(row, extract(row).copy(`Edu.Loc.State` = value)))
  override val `Edu.Loc.City` = new OptField[/* max 100 chars */ String, Row](prefix, "Edu.Loc.City", None, None)(x => extract(x).`Edu.Loc.City`, (row, value) => merge(row, extract(row).copy(`Edu.Loc.City` = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](jobcandidateid, `Edu.Level`, `Edu.StartDate`, `Edu.EndDate`, `Edu.Degree`, `Edu.Major`, `Edu.Minor`, `Edu.GPA`, `Edu.GPAScale`, `Edu.School`, `Edu.Loc.CountryRegion`, `Edu.Loc.State`, `Edu.Loc.City`)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => VjobcandidateeducationViewRow, merge: (NewRow, VjobcandidateeducationViewRow) => NewRow): VjobcandidateeducationViewStructure[NewRow] =
    new VjobcandidateeducationViewStructure(prefix, extract, merge)
}
