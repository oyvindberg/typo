/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package at

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.person.addresstype.AddresstypeId
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class AtViewRow(
  /** Points to [[person.addresstype.AddresstypeRow.addresstypeid]] */
  id: AddresstypeId,
  /** Points to [[person.addresstype.AddresstypeRow.addresstypeid]] */
  addresstypeid: AddresstypeId,
  /** Points to [[person.addresstype.AddresstypeRow.name]] */
  name: Name,
  /** Points to [[person.addresstype.AddresstypeRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[person.addresstype.AddresstypeRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object AtViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[AtViewRow] = new JdbcDecoder[AtViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, AtViewRow) =
      columIndex + 4 ->
        AtViewRow(
          id = AddresstypeId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          addresstypeid = AddresstypeId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          name = Name.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          rowguid = TypoUUID.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[AtViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(AddresstypeId.jsonDecoder))
    val addresstypeid = jsonObj.get("addresstypeid").toRight("Missing field 'addresstypeid'").flatMap(_.as(AddresstypeId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val rowguid = jsonObj.get("rowguid").toRight("Missing field 'rowguid'").flatMap(_.as(TypoUUID.jsonDecoder))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (id.isRight && addresstypeid.isRight && name.isRight && rowguid.isRight && modifieddate.isRight)
      Right(AtViewRow(id = id.toOption.get, addresstypeid = addresstypeid.toOption.get, name = name.toOption.get, rowguid = rowguid.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](id, addresstypeid, name, rowguid, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[AtViewRow] = new JsonEncoder[AtViewRow] {
    override def unsafeEncode(a: AtViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      AddresstypeId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""addresstypeid":""")
      AddresstypeId.jsonEncoder.unsafeEncode(a.addresstypeid, indent, out)
      out.write(",")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""rowguid":""")
      TypoUUID.jsonEncoder.unsafeEncode(a.rowguid, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
}
