/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package shoppingcartitem

import adventureworks.customtypes.Defaulted
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object ShoppingcartitemRepoImpl extends ShoppingcartitemRepo {
  override def delete(shoppingcartitemid: ShoppingcartitemId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from sales.shoppingcartitem where "shoppingcartitemid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[ShoppingcartitemFields, ShoppingcartitemRow] = {
    DeleteBuilder("sales.shoppingcartitem", ShoppingcartitemFields)
  }
  override def insert(unsaved: ShoppingcartitemRow): ZIO[ZConnection, Throwable, ShoppingcartitemRow] = {
    sql"""insert into sales.shoppingcartitem("shoppingcartitemid", "shoppingcartid", "quantity", "productid", "datecreated", "modifieddate")
          values (???::int4, ???, ???::int4, ???::int4, ???::timestamp, ???::timestamp)
          returning "shoppingcartitemid", "shoppingcartid", "quantity", "productid", "datecreated"::text, "modifieddate"::text
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: ShoppingcartitemRowUnsaved): ZIO[ZConnection, Throwable, ShoppingcartitemRow] = {
    val fs = List(
      Some((SqlFragment(s""""shoppingcartid""""), sql"???")),
      Some((SqlFragment(s""""productid""""), sql"???::int4")),
      unsaved.shoppingcartitemid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""shoppingcartitemid""""), sql"???::int4"))
      },
      unsaved.quantity match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""quantity""""), sql"???::int4"))
      },
      unsaved.datecreated match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""datecreated""""), sql"???::timestamp"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.shoppingcartitem default values
            returning "shoppingcartitemid", "shoppingcartid", "quantity", "productid", "datecreated"::text, "modifieddate"::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.shoppingcartitem(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "shoppingcartitemid", "shoppingcartid", "quantity", "productid", "datecreated"::text, "modifieddate"::text
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[ShoppingcartitemFields, ShoppingcartitemRow] = {
    SelectBuilderSql("sales.shoppingcartitem", ShoppingcartitemFields, ShoppingcartitemRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, ShoppingcartitemRow] = {
    sql"""select "shoppingcartitemid", "shoppingcartid", "quantity", "productid", "datecreated"::text, "modifieddate"::text from sales.shoppingcartitem""".query[ShoppingcartitemRow].selectStream
  }
  override def selectById(shoppingcartitemid: ShoppingcartitemId): ZIO[ZConnection, Throwable, Option[ShoppingcartitemRow]] = {
    sql"""select "shoppingcartitemid", "shoppingcartid", "quantity", "productid", "datecreated"::text, "modifieddate"::text from sales.shoppingcartitem where "shoppingcartitemid" = ???""".query[ShoppingcartitemRow].selectOne
  }
  override def selectByIds(shoppingcartitemids: Array[ShoppingcartitemId]): ZStream[ZConnection, Throwable, ShoppingcartitemRow] = {
    sql"""select "shoppingcartitemid", "shoppingcartid", "quantity", "productid", "datecreated"::text, "modifieddate"::text from sales.shoppingcartitem where "shoppingcartitemid" = ANY(${shoppingcartitemids})""".query[ShoppingcartitemRow].selectStream
  }
  override def update(row: ShoppingcartitemRow): ZIO[ZConnection, Throwable, Boolean] = {
    val shoppingcartitemid = row.shoppingcartitemid
    sql"""update sales.shoppingcartitem
          set "shoppingcartid" = ???,
              "quantity" = ???::int4,
              "productid" = ???::int4,
              "datecreated" = ???::timestamp,
              "modifieddate" = ???::timestamp
          where "shoppingcartitemid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[ShoppingcartitemFields, ShoppingcartitemRow] = {
    UpdateBuilder("sales.shoppingcartitem", ShoppingcartitemFields, ShoppingcartitemRow.read)
  }
  override def upsert(unsaved: ShoppingcartitemRow): ZIO[ZConnection, Throwable, ShoppingcartitemRow] = {
    sql"""insert into sales.shoppingcartitem("shoppingcartitemid", "shoppingcartid", "quantity", "productid", "datecreated", "modifieddate")
          values (
            ???::int4,
            ???,
            ???::int4,
            ???::int4,
            ???::timestamp,
            ???::timestamp
          )
          on conflict ("shoppingcartitemid")
          do update set
            "shoppingcartid" = EXCLUDED."shoppingcartid",
            "quantity" = EXCLUDED."quantity",
            "productid" = EXCLUDED."productid",
            "datecreated" = EXCLUDED."datecreated",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "shoppingcartitemid", "shoppingcartid", "quantity", "productid", "datecreated"::text, "modifieddate"::text
       """.query(???).unique
  }
}
