/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialoffer

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `sales.specialoffer` which has not been persisted yet */
case class SpecialofferRowUnsaved(
  /** Discount description. */
  description: /* max 255 chars */ String,
  /** Discount type category. */
  `type`: /* max 50 chars */ String,
  /** Group the discount applies to such as Reseller or Customer. */
  category: /* max 50 chars */ String,
  /** Discount start date.
      Constraint CK_SpecialOffer_EndDate affecting columns enddate, startdate:  ((enddate >= startdate)) */
  startdate: TypoLocalDateTime,
  /** Discount end date.
      Constraint CK_SpecialOffer_EndDate affecting columns enddate, startdate:  ((enddate >= startdate)) */
  enddate: TypoLocalDateTime,
  /** Maximum discount percent allowed.
      Constraint CK_SpecialOffer_MaxQty affecting columns maxqty:  ((maxqty >= 0)) */
  maxqty: Option[Int],
  /** Default: nextval('sales.specialoffer_specialofferid_seq'::regclass)
      Primary key for SpecialOffer records. */
  specialofferid: Defaulted[SpecialofferId] = Defaulted.UseDefault,
  /** Default: 0.00
      Discount precentage.
      Constraint CK_SpecialOffer_DiscountPct affecting columns discountpct:  ((discountpct >= 0.00)) */
  discountpct: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: 0
      Minimum discount percent allowed.
      Constraint CK_SpecialOffer_MinQty affecting columns minqty:  ((minqty >= 0)) */
  minqty: Defaulted[Int] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(specialofferidDefault: => SpecialofferId, discountpctDefault: => BigDecimal, minqtyDefault: => Int, rowguidDefault: => TypoUUID, modifieddateDefault: => TypoLocalDateTime): SpecialofferRow =
    SpecialofferRow(
      description = description,
      `type` = `type`,
      category = category,
      startdate = startdate,
      enddate = enddate,
      maxqty = maxqty,
      specialofferid = specialofferid match {
                         case Defaulted.UseDefault => specialofferidDefault
                         case Defaulted.Provided(value) => value
                       },
      discountpct = discountpct match {
                      case Defaulted.UseDefault => discountpctDefault
                      case Defaulted.Provided(value) => value
                    },
      minqty = minqty match {
                 case Defaulted.UseDefault => minqtyDefault
                 case Defaulted.Provided(value) => value
               },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object SpecialofferRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[SpecialofferRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val description = jsonObj.get("description").toRight("Missing field 'description'").flatMap(_.as(JsonDecoder.string))
    val `type` = jsonObj.get("type").toRight("Missing field 'type'").flatMap(_.as(JsonDecoder.string))
    val category = jsonObj.get("category").toRight("Missing field 'category'").flatMap(_.as(JsonDecoder.string))
    val startdate = jsonObj.get("startdate").toRight("Missing field 'startdate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    val enddate = jsonObj.get("enddate").toRight("Missing field 'enddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    val maxqty = jsonObj.get("maxqty").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.int)))
    val specialofferid = jsonObj.get("specialofferid").toRight("Missing field 'specialofferid'").flatMap(_.as(Defaulted.jsonDecoder(SpecialofferId.jsonDecoder)))
    val discountpct = jsonObj.get("discountpct").toRight("Missing field 'discountpct'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.scalaBigDecimal)))
    val minqty = jsonObj.get("minqty").toRight("Missing field 'minqty'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.int)))
    val rowguid = jsonObj.get("rowguid").toRight("Missing field 'rowguid'").flatMap(_.as(Defaulted.jsonDecoder(TypoUUID.jsonDecoder)))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(Defaulted.jsonDecoder(TypoLocalDateTime.jsonDecoder)))
    if (description.isRight && `type`.isRight && category.isRight && startdate.isRight && enddate.isRight && maxqty.isRight && specialofferid.isRight && discountpct.isRight && minqty.isRight && rowguid.isRight && modifieddate.isRight)
      Right(SpecialofferRowUnsaved(description = description.toOption.get, `type` = `type`.toOption.get, category = category.toOption.get, startdate = startdate.toOption.get, enddate = enddate.toOption.get, maxqty = maxqty.toOption.get, specialofferid = specialofferid.toOption.get, discountpct = discountpct.toOption.get, minqty = minqty.toOption.get, rowguid = rowguid.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](description, `type`, category, startdate, enddate, maxqty, specialofferid, discountpct, minqty, rowguid, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[SpecialofferRowUnsaved] = new JsonEncoder[SpecialofferRowUnsaved] {
    override def unsafeEncode(a: SpecialofferRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""description":""")
      JsonEncoder.string.unsafeEncode(a.description, indent, out)
      out.write(",")
      out.write(""""type":""")
      JsonEncoder.string.unsafeEncode(a.`type`, indent, out)
      out.write(",")
      out.write(""""category":""")
      JsonEncoder.string.unsafeEncode(a.category, indent, out)
      out.write(",")
      out.write(""""startdate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.startdate, indent, out)
      out.write(",")
      out.write(""""enddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.enddate, indent, out)
      out.write(",")
      out.write(""""maxqty":""")
      JsonEncoder.option(using JsonEncoder.int).unsafeEncode(a.maxqty, indent, out)
      out.write(",")
      out.write(""""specialofferid":""")
      Defaulted.jsonEncoder(SpecialofferId.jsonEncoder).unsafeEncode(a.specialofferid, indent, out)
      out.write(",")
      out.write(""""discountpct":""")
      Defaulted.jsonEncoder(JsonEncoder.scalaBigDecimal).unsafeEncode(a.discountpct, indent, out)
      out.write(",")
      out.write(""""minqty":""")
      Defaulted.jsonEncoder(JsonEncoder.int).unsafeEncode(a.minqty, indent, out)
      out.write(",")
      out.write(""""rowguid":""")
      Defaulted.jsonEncoder(TypoUUID.jsonEncoder).unsafeEncode(a.rowguid, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      Defaulted.jsonEncoder(TypoLocalDateTime.jsonEncoder).unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[SpecialofferRowUnsaved] = Text.instance[SpecialofferRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.description, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.`type`, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.category, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.startdate, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.enddate, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.intInstance).unsafeEncode(row.maxqty, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(SpecialofferId.text).unsafeEncode(row.specialofferid, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.bigDecimalInstance).unsafeEncode(row.discountpct, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.intInstance).unsafeEncode(row.minqty, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(TypoUUID.text).unsafeEncode(row.rowguid, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(TypoLocalDateTime.text).unsafeEncode(row.modifieddate, sb)
  }
}
