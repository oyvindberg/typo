/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vsalesperson

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import adventureworks.public.Phone
import adventureworks.userdefined.FirstName
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class VsalespersonViewRow(
  /** Points to [[salesperson.SalespersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[person.person.PersonRow.title]] */
  title: Option[/* max 8 chars */ String],
  /** Points to [[person.person.PersonRow.firstname]] */
  firstname: /* user-picked */ FirstName,
  /** Points to [[person.person.PersonRow.middlename]] */
  middlename: Option[Name],
  /** Points to [[person.person.PersonRow.lastname]] */
  lastname: Name,
  /** Points to [[person.person.PersonRow.suffix]] */
  suffix: Option[/* max 10 chars */ String],
  /** Points to [[humanresources.employee.EmployeeRow.jobtitle]] */
  jobtitle: /* max 50 chars */ String,
  /** Points to [[person.personphone.PersonphoneRow.phonenumber]] */
  phonenumber: Option[Phone],
  /** Points to [[person.phonenumbertype.PhonenumbertypeRow.name]] */
  phonenumbertype: Option[Name],
  /** Points to [[person.emailaddress.EmailaddressRow.emailaddress]] */
  emailaddress: Option[/* max 50 chars */ String],
  /** Points to [[person.person.PersonRow.emailpromotion]] */
  emailpromotion: Int,
  /** Points to [[person.address.AddressRow.addressline1]] */
  addressline1: /* max 60 chars */ String,
  /** Points to [[person.address.AddressRow.addressline2]] */
  addressline2: Option[/* max 60 chars */ String],
  /** Points to [[person.address.AddressRow.city]] */
  city: /* max 30 chars */ String,
  /** Points to [[person.stateprovince.StateprovinceRow.name]] */
  stateprovincename: Name,
  /** Points to [[person.address.AddressRow.postalcode]] */
  postalcode: /* max 15 chars */ String,
  /** Points to [[person.countryregion.CountryregionRow.name]] */
  countryregionname: Name,
  /** Points to [[salesterritory.SalesterritoryRow.name]] */
  territoryname: Option[Name],
  /** Points to [[salesterritory.SalesterritoryRow.group]] */
  territorygroup: Option[/* max 50 chars */ String],
  /** Points to [[salesperson.SalespersonRow.salesquota]] */
  salesquota: Option[BigDecimal],
  /** Points to [[salesperson.SalespersonRow.salesytd]] */
  salesytd: BigDecimal,
  /** Points to [[salesperson.SalespersonRow.saleslastyear]] */
  saleslastyear: BigDecimal
)

object VsalespersonViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[VsalespersonViewRow] = new JdbcDecoder[VsalespersonViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, VsalespersonViewRow) =
      columIndex + 21 ->
        VsalespersonViewRow(
          businessentityid = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          title = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          firstname = FirstName.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          middlename = JdbcDecoder.optionDecoder(Name.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2,
          lastname = Name.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          suffix = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          jobtitle = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 6, rs)._2,
          phonenumber = JdbcDecoder.optionDecoder(Phone.jdbcDecoder).unsafeDecode(columIndex + 7, rs)._2,
          phonenumbertype = JdbcDecoder.optionDecoder(Name.jdbcDecoder).unsafeDecode(columIndex + 8, rs)._2,
          emailaddress = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2,
          emailpromotion = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 10, rs)._2,
          addressline1 = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 11, rs)._2,
          addressline2 = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 12, rs)._2,
          city = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 13, rs)._2,
          stateprovincename = Name.jdbcDecoder.unsafeDecode(columIndex + 14, rs)._2,
          postalcode = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 15, rs)._2,
          countryregionname = Name.jdbcDecoder.unsafeDecode(columIndex + 16, rs)._2,
          territoryname = JdbcDecoder.optionDecoder(Name.jdbcDecoder).unsafeDecode(columIndex + 17, rs)._2,
          territorygroup = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 18, rs)._2,
          salesquota = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 19, rs)._2,
          salesytd = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 20, rs)._2,
          saleslastyear = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 21, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[VsalespersonViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val businessentityid = jsonObj.get("businessentityid").toRight("Missing field 'businessentityid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val title = jsonObj.get("title").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val firstname = jsonObj.get("firstname").toRight("Missing field 'firstname'").flatMap(_.as(FirstName.jsonDecoder))
    val middlename = jsonObj.get("middlename").fold[Either[String, Option[Name]]](Right(None))(_.as(JsonDecoder.option(Name.jsonDecoder)))
    val lastname = jsonObj.get("lastname").toRight("Missing field 'lastname'").flatMap(_.as(Name.jsonDecoder))
    val suffix = jsonObj.get("suffix").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val jobtitle = jsonObj.get("jobtitle").toRight("Missing field 'jobtitle'").flatMap(_.as(JsonDecoder.string))
    val phonenumber = jsonObj.get("phonenumber").fold[Either[String, Option[Phone]]](Right(None))(_.as(JsonDecoder.option(Phone.jsonDecoder)))
    val phonenumbertype = jsonObj.get("phonenumbertype").fold[Either[String, Option[Name]]](Right(None))(_.as(JsonDecoder.option(Name.jsonDecoder)))
    val emailaddress = jsonObj.get("emailaddress").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val emailpromotion = jsonObj.get("emailpromotion").toRight("Missing field 'emailpromotion'").flatMap(_.as(JsonDecoder.int))
    val addressline1 = jsonObj.get("addressline1").toRight("Missing field 'addressline1'").flatMap(_.as(JsonDecoder.string))
    val addressline2 = jsonObj.get("addressline2").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val city = jsonObj.get("city").toRight("Missing field 'city'").flatMap(_.as(JsonDecoder.string))
    val stateprovincename = jsonObj.get("stateprovincename").toRight("Missing field 'stateprovincename'").flatMap(_.as(Name.jsonDecoder))
    val postalcode = jsonObj.get("postalcode").toRight("Missing field 'postalcode'").flatMap(_.as(JsonDecoder.string))
    val countryregionname = jsonObj.get("countryregionname").toRight("Missing field 'countryregionname'").flatMap(_.as(Name.jsonDecoder))
    val territoryname = jsonObj.get("territoryname").fold[Either[String, Option[Name]]](Right(None))(_.as(JsonDecoder.option(Name.jsonDecoder)))
    val territorygroup = jsonObj.get("territorygroup").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val salesquota = jsonObj.get("salesquota").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.scalaBigDecimal)))
    val salesytd = jsonObj.get("salesytd").toRight("Missing field 'salesytd'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val saleslastyear = jsonObj.get("saleslastyear").toRight("Missing field 'saleslastyear'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    if (businessentityid.isRight && title.isRight && firstname.isRight && middlename.isRight && lastname.isRight && suffix.isRight && jobtitle.isRight && phonenumber.isRight && phonenumbertype.isRight && emailaddress.isRight && emailpromotion.isRight && addressline1.isRight && addressline2.isRight && city.isRight && stateprovincename.isRight && postalcode.isRight && countryregionname.isRight && territoryname.isRight && territorygroup.isRight && salesquota.isRight && salesytd.isRight && saleslastyear.isRight)
      Right(VsalespersonViewRow(businessentityid = businessentityid.toOption.get, title = title.toOption.get, firstname = firstname.toOption.get, middlename = middlename.toOption.get, lastname = lastname.toOption.get, suffix = suffix.toOption.get, jobtitle = jobtitle.toOption.get, phonenumber = phonenumber.toOption.get, phonenumbertype = phonenumbertype.toOption.get, emailaddress = emailaddress.toOption.get, emailpromotion = emailpromotion.toOption.get, addressline1 = addressline1.toOption.get, addressline2 = addressline2.toOption.get, city = city.toOption.get, stateprovincename = stateprovincename.toOption.get, postalcode = postalcode.toOption.get, countryregionname = countryregionname.toOption.get, territoryname = territoryname.toOption.get, territorygroup = territorygroup.toOption.get, salesquota = salesquota.toOption.get, salesytd = salesytd.toOption.get, saleslastyear = saleslastyear.toOption.get))
    else Left(List[Either[String, Any]](businessentityid, title, firstname, middlename, lastname, suffix, jobtitle, phonenumber, phonenumbertype, emailaddress, emailpromotion, addressline1, addressline2, city, stateprovincename, postalcode, countryregionname, territoryname, territorygroup, salesquota, salesytd, saleslastyear).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[VsalespersonViewRow] = new JsonEncoder[VsalespersonViewRow] {
    override def unsafeEncode(a: VsalespersonViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""businessentityid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.businessentityid, indent, out)
      out.write(",")
      out.write(""""title":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.title, indent, out)
      out.write(",")
      out.write(""""firstname":""")
      FirstName.jsonEncoder.unsafeEncode(a.firstname, indent, out)
      out.write(",")
      out.write(""""middlename":""")
      JsonEncoder.option(Name.jsonEncoder).unsafeEncode(a.middlename, indent, out)
      out.write(",")
      out.write(""""lastname":""")
      Name.jsonEncoder.unsafeEncode(a.lastname, indent, out)
      out.write(",")
      out.write(""""suffix":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.suffix, indent, out)
      out.write(",")
      out.write(""""jobtitle":""")
      JsonEncoder.string.unsafeEncode(a.jobtitle, indent, out)
      out.write(",")
      out.write(""""phonenumber":""")
      JsonEncoder.option(Phone.jsonEncoder).unsafeEncode(a.phonenumber, indent, out)
      out.write(",")
      out.write(""""phonenumbertype":""")
      JsonEncoder.option(Name.jsonEncoder).unsafeEncode(a.phonenumbertype, indent, out)
      out.write(",")
      out.write(""""emailaddress":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.emailaddress, indent, out)
      out.write(",")
      out.write(""""emailpromotion":""")
      JsonEncoder.int.unsafeEncode(a.emailpromotion, indent, out)
      out.write(",")
      out.write(""""addressline1":""")
      JsonEncoder.string.unsafeEncode(a.addressline1, indent, out)
      out.write(",")
      out.write(""""addressline2":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.addressline2, indent, out)
      out.write(",")
      out.write(""""city":""")
      JsonEncoder.string.unsafeEncode(a.city, indent, out)
      out.write(",")
      out.write(""""stateprovincename":""")
      Name.jsonEncoder.unsafeEncode(a.stateprovincename, indent, out)
      out.write(",")
      out.write(""""postalcode":""")
      JsonEncoder.string.unsafeEncode(a.postalcode, indent, out)
      out.write(",")
      out.write(""""countryregionname":""")
      Name.jsonEncoder.unsafeEncode(a.countryregionname, indent, out)
      out.write(",")
      out.write(""""territoryname":""")
      JsonEncoder.option(Name.jsonEncoder).unsafeEncode(a.territoryname, indent, out)
      out.write(",")
      out.write(""""territorygroup":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.territorygroup, indent, out)
      out.write(",")
      out.write(""""salesquota":""")
      JsonEncoder.option(JsonEncoder.scalaBigDecimal).unsafeEncode(a.salesquota, indent, out)
      out.write(",")
      out.write(""""salesytd":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.salesytd, indent, out)
      out.write(",")
      out.write(""""saleslastyear":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.saleslastyear, indent, out)
      out.write("}")
    }
  }
}
