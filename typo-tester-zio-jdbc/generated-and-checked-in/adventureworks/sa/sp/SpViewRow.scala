/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sp

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** View: sa.sp */
case class SpViewRow(
  /** Points to [[sales.salesperson.SalespersonRow.businessentityid]] */
  id: BusinessentityId,
  /** Points to [[sales.salesperson.SalespersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[sales.salesperson.SalespersonRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Points to [[sales.salesperson.SalespersonRow.salesquota]] */
  salesquota: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.bonus]] */
  bonus: BigDecimal,
  /** Points to [[sales.salesperson.SalespersonRow.commissionpct]] */
  commissionpct: BigDecimal,
  /** Points to [[sales.salesperson.SalespersonRow.salesytd]] */
  salesytd: BigDecimal,
  /** Points to [[sales.salesperson.SalespersonRow.saleslastyear]] */
  saleslastyear: BigDecimal,
  /** Points to [[sales.salesperson.SalespersonRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[sales.salesperson.SalespersonRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object SpViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[SpViewRow] = new JdbcDecoder[SpViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, SpViewRow) =
      columIndex + 9 ->
        SpViewRow(
          id = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          businessentityid = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          territoryid = JdbcDecoder.optionDecoder(SalesterritoryId.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          salesquota = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 3, rs)._2,
          bonus = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 4, rs)._2,
          commissionpct = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 5, rs)._2,
          salesytd = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 6, rs)._2,
          saleslastyear = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 7, rs)._2,
          rowguid = TypoUUID.jdbcDecoder.unsafeDecode(columIndex + 8, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 9, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[SpViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val businessentityid = jsonObj.get("businessentityid").toRight("Missing field 'businessentityid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val territoryid = jsonObj.get("territoryid").fold[Either[String, Option[SalesterritoryId]]](Right(None))(_.as(JsonDecoder.option(using SalesterritoryId.jsonDecoder)))
    val salesquota = jsonObj.get("salesquota").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.scalaBigDecimal)))
    val bonus = jsonObj.get("bonus").toRight("Missing field 'bonus'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val commissionpct = jsonObj.get("commissionpct").toRight("Missing field 'commissionpct'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val salesytd = jsonObj.get("salesytd").toRight("Missing field 'salesytd'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val saleslastyear = jsonObj.get("saleslastyear").toRight("Missing field 'saleslastyear'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val rowguid = jsonObj.get("rowguid").toRight("Missing field 'rowguid'").flatMap(_.as(TypoUUID.jsonDecoder))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (id.isRight && businessentityid.isRight && territoryid.isRight && salesquota.isRight && bonus.isRight && commissionpct.isRight && salesytd.isRight && saleslastyear.isRight && rowguid.isRight && modifieddate.isRight)
      Right(SpViewRow(id = id.toOption.get, businessentityid = businessentityid.toOption.get, territoryid = territoryid.toOption.get, salesquota = salesquota.toOption.get, bonus = bonus.toOption.get, commissionpct = commissionpct.toOption.get, salesytd = salesytd.toOption.get, saleslastyear = saleslastyear.toOption.get, rowguid = rowguid.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](id, businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[SpViewRow] = new JsonEncoder[SpViewRow] {
    override def unsafeEncode(a: SpViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""businessentityid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.businessentityid, indent, out)
      out.write(",")
      out.write(""""territoryid":""")
      JsonEncoder.option(using SalesterritoryId.jsonEncoder).unsafeEncode(a.territoryid, indent, out)
      out.write(",")
      out.write(""""salesquota":""")
      JsonEncoder.option(using JsonEncoder.scalaBigDecimal).unsafeEncode(a.salesquota, indent, out)
      out.write(",")
      out.write(""""bonus":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.bonus, indent, out)
      out.write(",")
      out.write(""""commissionpct":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.commissionpct, indent, out)
      out.write(",")
      out.write(""""salesytd":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.salesytd, indent, out)
      out.write(",")
      out.write(""""saleslastyear":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.saleslastyear, indent, out)
      out.write(",")
      out.write(""""rowguid":""")
      TypoUUID.jsonEncoder.unsafeEncode(a.rowguid, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
}
