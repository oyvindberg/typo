/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package unitmeasure

import typo.dsl.Bijection
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Type for the primary key of table `production.unitmeasure` */
case class UnitmeasureId(value: /* bpchar, max 3 chars */ String) extends AnyVal
object UnitmeasureId {
  implicit lazy val bijection: Bijection[UnitmeasureId, /* bpchar, max 3 chars */ String] = Bijection[UnitmeasureId, /* bpchar, max 3 chars */ String](_.value)(UnitmeasureId.apply)
  implicit lazy val decoder: JsonDecoder[UnitmeasureId] = JsonDecoder.string.map(UnitmeasureId.apply)
  implicit lazy val encoder: JsonEncoder[UnitmeasureId] = JsonEncoder.string.contramap(_.value)
  implicit lazy val ordering: Ordering[UnitmeasureId] = Ordering.by(_.value)
}
