/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productreview

import adventureworks.Text
import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.public.Name
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `production.productreview` which has not been persisted yet */
case class ProductreviewRowUnsaved(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Name of the reviewer. */
  reviewername: Name,
  /** Reviewer's e-mail address. */
  emailaddress: /* max 50 chars */ String,
  /** Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.
      Constraint CK_ProductReview_Rating affecting columns "rating":  (((rating >= 1) AND (rating <= 5))) */
  rating: Int,
  /** Reviewer's comments */
  comments: Option[/* max 3850 chars */ String],
  /** Default: nextval('production.productreview_productreviewid_seq'::regclass)
      Primary key for ProductReview records. */
  productreviewid: Defaulted[ProductreviewId] = Defaulted.UseDefault,
  /** Default: now()
      Date review was submitted. */
  reviewdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(productreviewidDefault: => ProductreviewId, reviewdateDefault: => TypoLocalDateTime, modifieddateDefault: => TypoLocalDateTime): ProductreviewRow =
    ProductreviewRow(
      productid = productid,
      reviewername = reviewername,
      emailaddress = emailaddress,
      rating = rating,
      comments = comments,
      productreviewid = productreviewid match {
                          case Defaulted.UseDefault => productreviewidDefault
                          case Defaulted.Provided(value) => value
                        },
      reviewdate = reviewdate match {
                     case Defaulted.UseDefault => reviewdateDefault
                     case Defaulted.Provided(value) => value
                   },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductreviewRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[ProductreviewRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val productid = jsonObj.get("productid").toRight("Missing field 'productid'").flatMap(_.as(ProductId.jsonDecoder))
    val reviewername = jsonObj.get("reviewername").toRight("Missing field 'reviewername'").flatMap(_.as(Name.jsonDecoder))
    val emailaddress = jsonObj.get("emailaddress").toRight("Missing field 'emailaddress'").flatMap(_.as(JsonDecoder.string))
    val rating = jsonObj.get("rating").toRight("Missing field 'rating'").flatMap(_.as(JsonDecoder.int))
    val comments = jsonObj.get("comments").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val productreviewid = jsonObj.get("productreviewid").toRight("Missing field 'productreviewid'").flatMap(_.as(Defaulted.jsonDecoder(ProductreviewId.jsonDecoder)))
    val reviewdate = jsonObj.get("reviewdate").toRight("Missing field 'reviewdate'").flatMap(_.as(Defaulted.jsonDecoder(TypoLocalDateTime.jsonDecoder)))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(Defaulted.jsonDecoder(TypoLocalDateTime.jsonDecoder)))
    if (productid.isRight && reviewername.isRight && emailaddress.isRight && rating.isRight && comments.isRight && productreviewid.isRight && reviewdate.isRight && modifieddate.isRight)
      Right(ProductreviewRowUnsaved(productid = productid.toOption.get, reviewername = reviewername.toOption.get, emailaddress = emailaddress.toOption.get, rating = rating.toOption.get, comments = comments.toOption.get, productreviewid = productreviewid.toOption.get, reviewdate = reviewdate.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](productid, reviewername, emailaddress, rating, comments, productreviewid, reviewdate, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ProductreviewRowUnsaved] = new JsonEncoder[ProductreviewRowUnsaved] {
    override def unsafeEncode(a: ProductreviewRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""productid":""")
      ProductId.jsonEncoder.unsafeEncode(a.productid, indent, out)
      out.write(",")
      out.write(""""reviewername":""")
      Name.jsonEncoder.unsafeEncode(a.reviewername, indent, out)
      out.write(",")
      out.write(""""emailaddress":""")
      JsonEncoder.string.unsafeEncode(a.emailaddress, indent, out)
      out.write(",")
      out.write(""""rating":""")
      JsonEncoder.int.unsafeEncode(a.rating, indent, out)
      out.write(",")
      out.write(""""comments":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.comments, indent, out)
      out.write(",")
      out.write(""""productreviewid":""")
      Defaulted.jsonEncoder(ProductreviewId.jsonEncoder).unsafeEncode(a.productreviewid, indent, out)
      out.write(",")
      out.write(""""reviewdate":""")
      Defaulted.jsonEncoder(TypoLocalDateTime.jsonEncoder).unsafeEncode(a.reviewdate, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      Defaulted.jsonEncoder(TypoLocalDateTime.jsonEncoder).unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[ProductreviewRowUnsaved] = Text.instance[ProductreviewRowUnsaved]{ (row, sb) =>
    ProductId.text.unsafeEncode(row.productid, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.reviewername, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.emailaddress, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.rating, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.comments, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(ProductreviewId.text).unsafeEncode(row.productreviewid, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(TypoLocalDateTime.text).unsafeEncode(row.reviewdate, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(TypoLocalDateTime.text).unsafeEncode(row.modifieddate, sb)
  }
}
