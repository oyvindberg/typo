/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productreview

import adventureworks.Text
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class ProductreviewRow(
  /** Primary key for ProductReview records.
      Default: nextval('production.productreview_productreviewid_seq'::regclass) */
  productreviewid: ProductreviewId,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Name of the reviewer. */
  reviewername: Name,
  /** Date review was submitted.
      Default: now() */
  reviewdate: TypoLocalDateTime,
  /** Reviewer's e-mail address. */
  emailaddress: /* max 50 chars */ String,
  /** Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.
      Constraint CK_ProductReview_Rating affecting columns rating: (((rating >= 1) AND (rating <= 5))) */
  rating: Int,
  /** Reviewer's comments */
  comments: Option[/* max 3850 chars */ String],
  /** Default: now() */
  modifieddate: TypoLocalDateTime
)

object ProductreviewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[ProductreviewRow] = new JdbcDecoder[ProductreviewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ProductreviewRow) =
      columIndex + 7 ->
        ProductreviewRow(
          productreviewid = ProductreviewId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          productid = ProductId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          reviewername = Name.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          reviewdate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          emailaddress = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 4, rs)._2,
          rating = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 5, rs)._2,
          comments = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ProductreviewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val productreviewid = jsonObj.get("productreviewid").toRight("Missing field 'productreviewid'").flatMap(_.as(ProductreviewId.jsonDecoder))
    val productid = jsonObj.get("productid").toRight("Missing field 'productid'").flatMap(_.as(ProductId.jsonDecoder))
    val reviewername = jsonObj.get("reviewername").toRight("Missing field 'reviewername'").flatMap(_.as(Name.jsonDecoder))
    val reviewdate = jsonObj.get("reviewdate").toRight("Missing field 'reviewdate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    val emailaddress = jsonObj.get("emailaddress").toRight("Missing field 'emailaddress'").flatMap(_.as(JsonDecoder.string))
    val rating = jsonObj.get("rating").toRight("Missing field 'rating'").flatMap(_.as(JsonDecoder.int))
    val comments = jsonObj.get("comments").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (productreviewid.isRight && productid.isRight && reviewername.isRight && reviewdate.isRight && emailaddress.isRight && rating.isRight && comments.isRight && modifieddate.isRight)
      Right(ProductreviewRow(productreviewid = productreviewid.toOption.get, productid = productid.toOption.get, reviewername = reviewername.toOption.get, reviewdate = reviewdate.toOption.get, emailaddress = emailaddress.toOption.get, rating = rating.toOption.get, comments = comments.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](productreviewid, productid, reviewername, reviewdate, emailaddress, rating, comments, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ProductreviewRow] = new JsonEncoder[ProductreviewRow] {
    override def unsafeEncode(a: ProductreviewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""productreviewid":""")
      ProductreviewId.jsonEncoder.unsafeEncode(a.productreviewid, indent, out)
      out.write(",")
      out.write(""""productid":""")
      ProductId.jsonEncoder.unsafeEncode(a.productid, indent, out)
      out.write(",")
      out.write(""""reviewername":""")
      Name.jsonEncoder.unsafeEncode(a.reviewername, indent, out)
      out.write(",")
      out.write(""""reviewdate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.reviewdate, indent, out)
      out.write(",")
      out.write(""""emailaddress":""")
      JsonEncoder.string.unsafeEncode(a.emailaddress, indent, out)
      out.write(",")
      out.write(""""rating":""")
      JsonEncoder.int.unsafeEncode(a.rating, indent, out)
      out.write(",")
      out.write(""""comments":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.comments, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[ProductreviewRow] = Text.instance[ProductreviewRow]{ (row, sb) =>
    ProductreviewId.text.unsafeEncode(row.productreviewid, sb)
    sb.append(Text.DELIMETER)
    ProductId.text.unsafeEncode(row.productid, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.reviewername, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.reviewdate, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.emailaddress, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.rating, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.comments, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
}
