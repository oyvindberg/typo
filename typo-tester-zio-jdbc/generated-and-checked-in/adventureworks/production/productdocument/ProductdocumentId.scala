/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productdocument

import adventureworks.production.document.DocumentId
import adventureworks.production.product.ProductId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `production.productdocument` */
case class ProductdocumentId(productid: ProductId, documentnode: DocumentId)
object ProductdocumentId {
  implicit lazy val jsonDecoder: JsonDecoder[ProductdocumentId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val productid = jsonObj.get("productid").toRight("Missing field 'productid'").flatMap(_.as(ProductId.jsonDecoder))
    val documentnode = jsonObj.get("documentnode").toRight("Missing field 'documentnode'").flatMap(_.as(DocumentId.jsonDecoder))
    if (productid.isRight && documentnode.isRight)
      Right(ProductdocumentId(productid = productid.toOption.get, documentnode = documentnode.toOption.get))
    else Left(List[Either[String, Any]](productid, documentnode).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ProductdocumentId] = new JsonEncoder[ProductdocumentId] {
    override def unsafeEncode(a: ProductdocumentId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""productid":""")
      ProductId.jsonEncoder.unsafeEncode(a.productid, indent, out)
      out.write(",")
      out.write(""""documentnode":""")
      DocumentId.jsonEncoder.unsafeEncode(a.documentnode, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[ProductdocumentId] = Ordering.by(x => (x.productid, x.documentnode))
}
