/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productsubcategory

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.production.productcategory.ProductcategoryId
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class ProductsubcategoryRow(
  /** Primary key for ProductSubcategory records. */
  productsubcategoryid: ProductsubcategoryId,
  /** Product category identification number. Foreign key to ProductCategory.ProductCategoryID.
      Points to [[productcategory.ProductcategoryRow.productcategoryid]] */
  productcategoryid: ProductcategoryId,
  /** Subcategory description. */
  name: Name,
  rowguid: TypoUUID,
  modifieddate: TypoLocalDateTime
)

object ProductsubcategoryRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[ProductsubcategoryRow] = new JdbcDecoder[ProductsubcategoryRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ProductsubcategoryRow) =
      columIndex + 4 ->
        ProductsubcategoryRow(
          productsubcategoryid = ProductsubcategoryId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          productcategoryid = ProductcategoryId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          name = Name.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          rowguid = TypoUUID.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ProductsubcategoryRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val productsubcategoryid = jsonObj.get("productsubcategoryid").toRight("Missing field 'productsubcategoryid'").flatMap(_.as(ProductsubcategoryId.jsonDecoder))
    val productcategoryid = jsonObj.get("productcategoryid").toRight("Missing field 'productcategoryid'").flatMap(_.as(ProductcategoryId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val rowguid = jsonObj.get("rowguid").toRight("Missing field 'rowguid'").flatMap(_.as(TypoUUID.jsonDecoder))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (productsubcategoryid.isRight && productcategoryid.isRight && name.isRight && rowguid.isRight && modifieddate.isRight)
      Right(ProductsubcategoryRow(productsubcategoryid = productsubcategoryid.toOption.get, productcategoryid = productcategoryid.toOption.get, name = name.toOption.get, rowguid = rowguid.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](productsubcategoryid, productcategoryid, name, rowguid, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ProductsubcategoryRow] = new JsonEncoder[ProductsubcategoryRow] {
    override def unsafeEncode(a: ProductsubcategoryRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""productsubcategoryid":""")
      ProductsubcategoryId.jsonEncoder.unsafeEncode(a.productsubcategoryid, indent, out)
      out.write(",")
      out.write(""""productcategoryid":""")
      ProductcategoryId.jsonEncoder.unsafeEncode(a.productcategoryid, indent, out)
      out.write(",")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""rowguid":""")
      TypoUUID.jsonEncoder.unsafeEncode(a.rowguid, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
}
