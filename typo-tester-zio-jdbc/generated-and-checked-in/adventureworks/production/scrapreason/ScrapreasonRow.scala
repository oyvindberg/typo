/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package scrapreason

import adventureworks.Text
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: production.scrapreason
    Manufacturing failure reasons lookup table.
    Primary key: scrapreasonid */
case class ScrapreasonRow(
  /** Primary key for ScrapReason records.
      Default: nextval('production.scrapreason_scrapreasonid_seq'::regclass) */
  scrapreasonid: ScrapreasonId,
  /** Failure description. */
  name: Name,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
)

object ScrapreasonRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[ScrapreasonRow] = new JdbcDecoder[ScrapreasonRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ScrapreasonRow) =
      columIndex + 2 ->
        ScrapreasonRow(
          scrapreasonid = ScrapreasonId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          name = Name.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ScrapreasonRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val scrapreasonid = jsonObj.get("scrapreasonid").toRight("Missing field 'scrapreasonid'").flatMap(_.as(ScrapreasonId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (scrapreasonid.isRight && name.isRight && modifieddate.isRight)
      Right(ScrapreasonRow(scrapreasonid = scrapreasonid.toOption.get, name = name.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](scrapreasonid, name, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ScrapreasonRow] = new JsonEncoder[ScrapreasonRow] {
    override def unsafeEncode(a: ScrapreasonRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""scrapreasonid":""")
      ScrapreasonId.jsonEncoder.unsafeEncode(a.scrapreasonid, indent, out)
      out.write(",")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[ScrapreasonRow] = Text.instance[ScrapreasonRow]{ (row, sb) =>
    ScrapreasonId.text.unsafeEncode(row.scrapreasonid, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
}
