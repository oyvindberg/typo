/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package vproductmodelinstructions

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class VproductmodelinstructionsViewRow(
  /** Points to [[productmodel.ProductmodelRow.productmodelid]] */
  productmodelid: ProductmodelId,
  /** Points to [[productmodel.ProductmodelRow.name]] */
  name: Name,
  instructions: /* nullability unknown */ Option[String],
  LocationID: /* nullability unknown */ Option[Int],
  SetupHours: /* nullability unknown */ Option[BigDecimal],
  MachineHours: /* nullability unknown */ Option[BigDecimal],
  LaborHours: /* nullability unknown */ Option[BigDecimal],
  LotSize: /* nullability unknown */ Option[Int],
  Step: /* nullability unknown */ Option[/* max 1024 chars */ String],
  /** Points to [[productmodel.ProductmodelRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[productmodel.ProductmodelRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object VproductmodelinstructionsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[VproductmodelinstructionsViewRow] = new JdbcDecoder[VproductmodelinstructionsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, VproductmodelinstructionsViewRow) =
      columIndex + 10 ->
        VproductmodelinstructionsViewRow(
          productmodelid = ProductmodelId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          name = Name.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          instructions = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          LocationID = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 3, rs)._2,
          SetupHours = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 4, rs)._2,
          MachineHours = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 5, rs)._2,
          LaborHours = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 6, rs)._2,
          LotSize = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 7, rs)._2,
          Step = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          rowguid = TypoUUID.jdbcDecoder.unsafeDecode(columIndex + 9, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 10, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[VproductmodelinstructionsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val productmodelid = jsonObj.get("productmodelid").toRight("Missing field 'productmodelid'").flatMap(_.as(ProductmodelId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val instructions = jsonObj.get("instructions").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val LocationID = jsonObj.get("LocationID").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val SetupHours = jsonObj.get("SetupHours").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.scalaBigDecimal)))
    val MachineHours = jsonObj.get("MachineHours").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.scalaBigDecimal)))
    val LaborHours = jsonObj.get("LaborHours").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.scalaBigDecimal)))
    val LotSize = jsonObj.get("LotSize").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val Step = jsonObj.get("Step").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val rowguid = jsonObj.get("rowguid").toRight("Missing field 'rowguid'").flatMap(_.as(TypoUUID.jsonDecoder))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (productmodelid.isRight && name.isRight && instructions.isRight && LocationID.isRight && SetupHours.isRight && MachineHours.isRight && LaborHours.isRight && LotSize.isRight && Step.isRight && rowguid.isRight && modifieddate.isRight)
      Right(VproductmodelinstructionsViewRow(productmodelid = productmodelid.toOption.get, name = name.toOption.get, instructions = instructions.toOption.get, LocationID = LocationID.toOption.get, SetupHours = SetupHours.toOption.get, MachineHours = MachineHours.toOption.get, LaborHours = LaborHours.toOption.get, LotSize = LotSize.toOption.get, Step = Step.toOption.get, rowguid = rowguid.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](productmodelid, name, instructions, LocationID, SetupHours, MachineHours, LaborHours, LotSize, Step, rowguid, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[VproductmodelinstructionsViewRow] = new JsonEncoder[VproductmodelinstructionsViewRow] {
    override def unsafeEncode(a: VproductmodelinstructionsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""productmodelid":""")
      ProductmodelId.jsonEncoder.unsafeEncode(a.productmodelid, indent, out)
      out.write(",")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""instructions":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.instructions, indent, out)
      out.write(",")
      out.write(""""LocationID":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.LocationID, indent, out)
      out.write(",")
      out.write(""""SetupHours":""")
      JsonEncoder.option(JsonEncoder.scalaBigDecimal).unsafeEncode(a.SetupHours, indent, out)
      out.write(",")
      out.write(""""MachineHours":""")
      JsonEncoder.option(JsonEncoder.scalaBigDecimal).unsafeEncode(a.MachineHours, indent, out)
      out.write(",")
      out.write(""""LaborHours":""")
      JsonEncoder.option(JsonEncoder.scalaBigDecimal).unsafeEncode(a.LaborHours, indent, out)
      out.write(",")
      out.write(""""LotSize":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.LotSize, indent, out)
      out.write(",")
      out.write(""""Step":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.Step, indent, out)
      out.write(",")
      out.write(""""rowguid":""")
      TypoUUID.jsonEncoder.unsafeEncode(a.rowguid, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
}
