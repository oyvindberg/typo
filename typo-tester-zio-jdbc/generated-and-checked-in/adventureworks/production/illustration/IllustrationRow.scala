/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package illustration

import adventureworks.Text
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoXml
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class IllustrationRow(
  /** Primary key for Illustration records.
      Default: nextval('production.illustration_illustrationid_seq'::regclass) */
  illustrationid: IllustrationId,
  /** Illustrations used in manufacturing instructions. Stored as XML. */
  diagram: Option[TypoXml],
  /** Default: now() */
  modifieddate: TypoLocalDateTime
)

object IllustrationRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[IllustrationRow] = new JdbcDecoder[IllustrationRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, IllustrationRow) =
      columIndex + 2 ->
        IllustrationRow(
          illustrationid = IllustrationId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          diagram = JdbcDecoder.optionDecoder(TypoXml.jdbcDecoder).unsafeDecode(columIndex + 1, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[IllustrationRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val illustrationid = jsonObj.get("illustrationid").toRight("Missing field 'illustrationid'").flatMap(_.as(IllustrationId.jsonDecoder))
    val diagram = jsonObj.get("diagram").fold[Either[String, Option[TypoXml]]](Right(None))(_.as(JsonDecoder.option(TypoXml.jsonDecoder)))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (illustrationid.isRight && diagram.isRight && modifieddate.isRight)
      Right(IllustrationRow(illustrationid = illustrationid.toOption.get, diagram = diagram.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](illustrationid, diagram, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[IllustrationRow] = new JsonEncoder[IllustrationRow] {
    override def unsafeEncode(a: IllustrationRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""illustrationid":""")
      IllustrationId.jsonEncoder.unsafeEncode(a.illustrationid, indent, out)
      out.write(",")
      out.write(""""diagram":""")
      JsonEncoder.option(TypoXml.jsonEncoder).unsafeEncode(a.diagram, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[IllustrationRow] = Text.instance[IllustrationRow]{ (row, sb) =>
    IllustrationId.text.unsafeEncode(row.illustrationid, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoXml.text).unsafeEncode(row.diagram, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
}
