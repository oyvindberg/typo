/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package vproductanddescription

import adventureworks.production.culture.CultureId
import adventureworks.production.product.ProductId
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Materialized View: production.vproductanddescription */
case class VproductanddescriptionMVRow(
  /** Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Points to [[product.ProductRow.name]] */
  name: Name,
  /** Points to [[productmodel.ProductmodelRow.name]] */
  productmodel: Name,
  /** Points to [[productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRow.cultureid]] */
  cultureid: CultureId,
  /** Points to [[productdescription.ProductdescriptionRow.description]] */
  description: /* max 400 chars */ String
)

object VproductanddescriptionMVRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[VproductanddescriptionMVRow] = new JdbcDecoder[VproductanddescriptionMVRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, VproductanddescriptionMVRow) =
      columIndex + 4 ->
        VproductanddescriptionMVRow(
          productid = ProductId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          name = Name.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          productmodel = Name.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          cultureid = CultureId.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          description = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[VproductanddescriptionMVRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val productid = jsonObj.get("productid").toRight("Missing field 'productid'").flatMap(_.as(ProductId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val productmodel = jsonObj.get("productmodel").toRight("Missing field 'productmodel'").flatMap(_.as(Name.jsonDecoder))
    val cultureid = jsonObj.get("cultureid").toRight("Missing field 'cultureid'").flatMap(_.as(CultureId.jsonDecoder))
    val description = jsonObj.get("description").toRight("Missing field 'description'").flatMap(_.as(JsonDecoder.string))
    if (productid.isRight && name.isRight && productmodel.isRight && cultureid.isRight && description.isRight)
      Right(VproductanddescriptionMVRow(productid = productid.toOption.get, name = name.toOption.get, productmodel = productmodel.toOption.get, cultureid = cultureid.toOption.get, description = description.toOption.get))
    else Left(List[Either[String, Any]](productid, name, productmodel, cultureid, description).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[VproductanddescriptionMVRow] = new JsonEncoder[VproductanddescriptionMVRow] {
    override def unsafeEncode(a: VproductanddescriptionMVRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""productid":""")
      ProductId.jsonEncoder.unsafeEncode(a.productid, indent, out)
      out.write(",")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""productmodel":""")
      Name.jsonEncoder.unsafeEncode(a.productmodel, indent, out)
      out.write(",")
      out.write(""""cultureid":""")
      CultureId.jsonEncoder.unsafeEncode(a.cultureid, indent, out)
      out.write(",")
      out.write(""""description":""")
      JsonEncoder.string.unsafeEncode(a.description, indent, out)
      out.write("}")
    }
  }
}
