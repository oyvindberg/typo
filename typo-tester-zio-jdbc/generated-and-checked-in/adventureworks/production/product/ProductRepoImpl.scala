/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package product

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Flag
import adventureworks.public.Name
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object ProductRepoImpl extends ProductRepo {
  override def delete(productid: ProductId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from production.product where "productid" = ${Segment.paramSegment(productid)(Setter[ProductId])}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[ProductFields, ProductRow] = {
    DeleteBuilder("production.product", ProductFields)
  }
  override def insert(unsaved: ProductRow): ZIO[ZConnection, Throwable, ProductRow] = {
    sql"""insert into production.product("productid", "name", "productnumber", "makeflag", "finishedgoodsflag", "color", "safetystocklevel", "reorderpoint", "standardcost", "listprice", "size", "sizeunitmeasurecode", "weightunitmeasurecode", "weight", "daystomanufacture", "productline", "class", "style", "productsubcategoryid", "productmodelid", "sellstartdate", "sellenddate", "discontinueddate", "rowguid", "modifieddate")
          values (${Segment.paramSegment(unsaved.productid)(Setter[ProductId])}::int4, ${Segment.paramSegment(unsaved.name)(Setter[Name])}::varchar, ${Segment.paramSegment(unsaved.productnumber)(Setter.stringSetter)}, ${Segment.paramSegment(unsaved.makeflag)(Setter[Flag])}::bool, ${Segment.paramSegment(unsaved.finishedgoodsflag)(Setter[Flag])}::bool, ${Segment.paramSegment(unsaved.color)(Setter.optionParamSetter(Setter.stringSetter))}, ${Segment.paramSegment(unsaved.safetystocklevel)(Setter[TypoShort])}::int2, ${Segment.paramSegment(unsaved.reorderpoint)(Setter[TypoShort])}::int2, ${Segment.paramSegment(unsaved.standardcost)(Setter.bigDecimalScalaSetter)}::numeric, ${Segment.paramSegment(unsaved.listprice)(Setter.bigDecimalScalaSetter)}::numeric, ${Segment.paramSegment(unsaved.size)(Setter.optionParamSetter(Setter.stringSetter))}, ${Segment.paramSegment(unsaved.sizeunitmeasurecode)(Setter.optionParamSetter(Setter[UnitmeasureId]))}::bpchar, ${Segment.paramSegment(unsaved.weightunitmeasurecode)(Setter.optionParamSetter(Setter[UnitmeasureId]))}::bpchar, ${Segment.paramSegment(unsaved.weight)(Setter.optionParamSetter(Setter.bigDecimalScalaSetter))}::numeric, ${Segment.paramSegment(unsaved.daystomanufacture)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.productline)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar, ${Segment.paramSegment(unsaved.`class`)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar, ${Segment.paramSegment(unsaved.style)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar, ${Segment.paramSegment(unsaved.productsubcategoryid)(Setter.optionParamSetter(Setter[ProductsubcategoryId]))}::int4, ${Segment.paramSegment(unsaved.productmodelid)(Setter.optionParamSetter(Setter[ProductmodelId]))}::int4, ${Segment.paramSegment(unsaved.sellstartdate)(Setter[TypoLocalDateTime])}::timestamp, ${Segment.paramSegment(unsaved.sellenddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp, ${Segment.paramSegment(unsaved.discontinueddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp, ${Segment.paramSegment(unsaved.rowguid)(Setter[TypoUUID])}::uuid, ${Segment.paramSegment(unsaved.modifieddate)(Setter[TypoLocalDateTime])}::timestamp)
          returning "productid", "name", "productnumber", "makeflag", "finishedgoodsflag", "color", "safetystocklevel", "reorderpoint", "standardcost", "listprice", "size", "sizeunitmeasurecode", "weightunitmeasurecode", "weight", "daystomanufacture", "productline", "class", "style", "productsubcategoryid", "productmodelid", "sellstartdate"::text, "sellenddate"::text, "discontinueddate"::text, "rowguid", "modifieddate"::text
       """.insertReturning(ProductRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insert(unsaved: ProductRowUnsaved): ZIO[ZConnection, Throwable, ProductRow] = {
    val fs = List(
      Some((sql""""name"""", sql"${Segment.paramSegment(unsaved.name)(Setter[Name])}::varchar")),
      Some((sql""""productnumber"""", sql"${Segment.paramSegment(unsaved.productnumber)(Setter.stringSetter)}")),
      Some((sql""""color"""", sql"${Segment.paramSegment(unsaved.color)(Setter.optionParamSetter(Setter.stringSetter))}")),
      Some((sql""""safetystocklevel"""", sql"${Segment.paramSegment(unsaved.safetystocklevel)(Setter[TypoShort])}::int2")),
      Some((sql""""reorderpoint"""", sql"${Segment.paramSegment(unsaved.reorderpoint)(Setter[TypoShort])}::int2")),
      Some((sql""""standardcost"""", sql"${Segment.paramSegment(unsaved.standardcost)(Setter.bigDecimalScalaSetter)}::numeric")),
      Some((sql""""listprice"""", sql"${Segment.paramSegment(unsaved.listprice)(Setter.bigDecimalScalaSetter)}::numeric")),
      Some((sql""""size"""", sql"${Segment.paramSegment(unsaved.size)(Setter.optionParamSetter(Setter.stringSetter))}")),
      Some((sql""""sizeunitmeasurecode"""", sql"${Segment.paramSegment(unsaved.sizeunitmeasurecode)(Setter.optionParamSetter(Setter[UnitmeasureId]))}::bpchar")),
      Some((sql""""weightunitmeasurecode"""", sql"${Segment.paramSegment(unsaved.weightunitmeasurecode)(Setter.optionParamSetter(Setter[UnitmeasureId]))}::bpchar")),
      Some((sql""""weight"""", sql"${Segment.paramSegment(unsaved.weight)(Setter.optionParamSetter(Setter.bigDecimalScalaSetter))}::numeric")),
      Some((sql""""daystomanufacture"""", sql"${Segment.paramSegment(unsaved.daystomanufacture)(Setter.intSetter)}::int4")),
      Some((sql""""productline"""", sql"${Segment.paramSegment(unsaved.productline)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar")),
      Some((sql""""class"""", sql"${Segment.paramSegment(unsaved.`class`)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar")),
      Some((sql""""style"""", sql"${Segment.paramSegment(unsaved.style)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar")),
      Some((sql""""productsubcategoryid"""", sql"${Segment.paramSegment(unsaved.productsubcategoryid)(Setter.optionParamSetter(Setter[ProductsubcategoryId]))}::int4")),
      Some((sql""""productmodelid"""", sql"${Segment.paramSegment(unsaved.productmodelid)(Setter.optionParamSetter(Setter[ProductmodelId]))}::int4")),
      Some((sql""""sellstartdate"""", sql"${Segment.paramSegment(unsaved.sellstartdate)(Setter[TypoLocalDateTime])}::timestamp")),
      Some((sql""""sellenddate"""", sql"${Segment.paramSegment(unsaved.sellenddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp")),
      Some((sql""""discontinueddate"""", sql"${Segment.paramSegment(unsaved.discontinueddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp")),
      unsaved.productid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""productid"""", sql"${Segment.paramSegment(value: ProductId)(Setter[ProductId])}::int4"))
      },
      unsaved.makeflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""makeflag"""", sql"${Segment.paramSegment(value: Flag)(Setter[Flag])}::bool"))
      },
      unsaved.finishedgoodsflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""finishedgoodsflag"""", sql"${Segment.paramSegment(value: Flag)(Setter[Flag])}::bool"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""rowguid"""", sql"${Segment.paramSegment(value: TypoUUID)(Setter[TypoUUID])}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""modifieddate"""", sql"${Segment.paramSegment(value: TypoLocalDateTime)(Setter[TypoLocalDateTime])}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.product default values
            returning "productid", "name", "productnumber", "makeflag", "finishedgoodsflag", "color", "safetystocklevel", "reorderpoint", "standardcost", "listprice", "size", "sizeunitmeasurecode", "weightunitmeasurecode", "weight", "daystomanufacture", "productline", "class", "style", "productsubcategoryid", "productmodelid", "sellstartdate"::text, "sellenddate"::text, "discontinueddate"::text, "rowguid", "modifieddate"::text
         """
    } else {
      val names  = fs.map { case (n, _) => n }.mkFragment(SqlFragment(", "))
      val values = fs.map { case (_, f) => f }.mkFragment(SqlFragment(", "))
      sql"""insert into production.product($names) values ($values) returning "productid", "name", "productnumber", "makeflag", "finishedgoodsflag", "color", "safetystocklevel", "reorderpoint", "standardcost", "listprice", "size", "sizeunitmeasurecode", "weightunitmeasurecode", "weight", "daystomanufacture", "productline", "class", "style", "productsubcategoryid", "productmodelid", "sellstartdate"::text, "sellenddate"::text, "discontinueddate"::text, "rowguid", "modifieddate"::text"""
    }
    q.insertReturning(ProductRow.jdbcDecoder).map(_.updatedKeys.head)
    
  }
  override def select: SelectBuilder[ProductFields, ProductRow] = {
    SelectBuilderSql("production.product", ProductFields, ProductRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, ProductRow] = {
    sql"""select "productid", "name", "productnumber", "makeflag", "finishedgoodsflag", "color", "safetystocklevel", "reorderpoint", "standardcost", "listprice", "size", "sizeunitmeasurecode", "weightunitmeasurecode", "weight", "daystomanufacture", "productline", "class", "style", "productsubcategoryid", "productmodelid", "sellstartdate"::text, "sellenddate"::text, "discontinueddate"::text, "rowguid", "modifieddate"::text from production.product""".query(ProductRow.jdbcDecoder).selectStream
  }
  override def selectById(productid: ProductId): ZIO[ZConnection, Throwable, Option[ProductRow]] = {
    sql"""select "productid", "name", "productnumber", "makeflag", "finishedgoodsflag", "color", "safetystocklevel", "reorderpoint", "standardcost", "listprice", "size", "sizeunitmeasurecode", "weightunitmeasurecode", "weight", "daystomanufacture", "productline", "class", "style", "productsubcategoryid", "productmodelid", "sellstartdate"::text, "sellenddate"::text, "discontinueddate"::text, "rowguid", "modifieddate"::text from production.product where "productid" = ${Segment.paramSegment(productid)(Setter[ProductId])}""".query(ProductRow.jdbcDecoder).selectOne
  }
  override def selectByIds(productids: Array[ProductId]): ZStream[ZConnection, Throwable, ProductRow] = {
    sql"""select "productid", "name", "productnumber", "makeflag", "finishedgoodsflag", "color", "safetystocklevel", "reorderpoint", "standardcost", "listprice", "size", "sizeunitmeasurecode", "weightunitmeasurecode", "weight", "daystomanufacture", "productline", "class", "style", "productsubcategoryid", "productmodelid", "sellstartdate"::text, "sellenddate"::text, "discontinueddate"::text, "rowguid", "modifieddate"::text from production.product where "productid" = ANY(${Segment.paramSegment(productids)(ProductId.arraySetter)})""".query(ProductRow.jdbcDecoder).selectStream
  }
  override def update(row: ProductRow): ZIO[ZConnection, Throwable, Boolean] = {
    val productid = row.productid
    sql"""update production.product
          set "name" = ${Segment.paramSegment(row.name)(Setter[Name])}::varchar,
              "productnumber" = ${Segment.paramSegment(row.productnumber)(Setter.stringSetter)},
              "makeflag" = ${Segment.paramSegment(row.makeflag)(Setter[Flag])}::bool,
              "finishedgoodsflag" = ${Segment.paramSegment(row.finishedgoodsflag)(Setter[Flag])}::bool,
              "color" = ${Segment.paramSegment(row.color)(Setter.optionParamSetter(Setter.stringSetter))},
              "safetystocklevel" = ${Segment.paramSegment(row.safetystocklevel)(Setter[TypoShort])}::int2,
              "reorderpoint" = ${Segment.paramSegment(row.reorderpoint)(Setter[TypoShort])}::int2,
              "standardcost" = ${Segment.paramSegment(row.standardcost)(Setter.bigDecimalScalaSetter)}::numeric,
              "listprice" = ${Segment.paramSegment(row.listprice)(Setter.bigDecimalScalaSetter)}::numeric,
              "size" = ${Segment.paramSegment(row.size)(Setter.optionParamSetter(Setter.stringSetter))},
              "sizeunitmeasurecode" = ${Segment.paramSegment(row.sizeunitmeasurecode)(Setter.optionParamSetter(Setter[UnitmeasureId]))}::bpchar,
              "weightunitmeasurecode" = ${Segment.paramSegment(row.weightunitmeasurecode)(Setter.optionParamSetter(Setter[UnitmeasureId]))}::bpchar,
              "weight" = ${Segment.paramSegment(row.weight)(Setter.optionParamSetter(Setter.bigDecimalScalaSetter))}::numeric,
              "daystomanufacture" = ${Segment.paramSegment(row.daystomanufacture)(Setter.intSetter)}::int4,
              "productline" = ${Segment.paramSegment(row.productline)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar,
              "class" = ${Segment.paramSegment(row.`class`)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar,
              "style" = ${Segment.paramSegment(row.style)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar,
              "productsubcategoryid" = ${Segment.paramSegment(row.productsubcategoryid)(Setter.optionParamSetter(Setter[ProductsubcategoryId]))}::int4,
              "productmodelid" = ${Segment.paramSegment(row.productmodelid)(Setter.optionParamSetter(Setter[ProductmodelId]))}::int4,
              "sellstartdate" = ${Segment.paramSegment(row.sellstartdate)(Setter[TypoLocalDateTime])}::timestamp,
              "sellenddate" = ${Segment.paramSegment(row.sellenddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp,
              "discontinueddate" = ${Segment.paramSegment(row.discontinueddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp,
              "rowguid" = ${Segment.paramSegment(row.rowguid)(Setter[TypoUUID])}::uuid,
              "modifieddate" = ${Segment.paramSegment(row.modifieddate)(Setter[TypoLocalDateTime])}::timestamp
          where "productid" = ${Segment.paramSegment(productid)(Setter[ProductId])}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[ProductFields, ProductRow] = {
    UpdateBuilder("production.product", ProductFields, ProductRow.jdbcDecoder)
  }
  override def upsert(unsaved: ProductRow): ZIO[ZConnection, Throwable, UpdateResult[ProductRow]] = {
    sql"""insert into production.product("productid", "name", "productnumber", "makeflag", "finishedgoodsflag", "color", "safetystocklevel", "reorderpoint", "standardcost", "listprice", "size", "sizeunitmeasurecode", "weightunitmeasurecode", "weight", "daystomanufacture", "productline", "class", "style", "productsubcategoryid", "productmodelid", "sellstartdate", "sellenddate", "discontinueddate", "rowguid", "modifieddate")
          values (
            ${Segment.paramSegment(unsaved.productid)(Setter[ProductId])}::int4,
            ${Segment.paramSegment(unsaved.name)(Setter[Name])}::varchar,
            ${Segment.paramSegment(unsaved.productnumber)(Setter.stringSetter)},
            ${Segment.paramSegment(unsaved.makeflag)(Setter[Flag])}::bool,
            ${Segment.paramSegment(unsaved.finishedgoodsflag)(Setter[Flag])}::bool,
            ${Segment.paramSegment(unsaved.color)(Setter.optionParamSetter(Setter.stringSetter))},
            ${Segment.paramSegment(unsaved.safetystocklevel)(Setter[TypoShort])}::int2,
            ${Segment.paramSegment(unsaved.reorderpoint)(Setter[TypoShort])}::int2,
            ${Segment.paramSegment(unsaved.standardcost)(Setter.bigDecimalScalaSetter)}::numeric,
            ${Segment.paramSegment(unsaved.listprice)(Setter.bigDecimalScalaSetter)}::numeric,
            ${Segment.paramSegment(unsaved.size)(Setter.optionParamSetter(Setter.stringSetter))},
            ${Segment.paramSegment(unsaved.sizeunitmeasurecode)(Setter.optionParamSetter(Setter[UnitmeasureId]))}::bpchar,
            ${Segment.paramSegment(unsaved.weightunitmeasurecode)(Setter.optionParamSetter(Setter[UnitmeasureId]))}::bpchar,
            ${Segment.paramSegment(unsaved.weight)(Setter.optionParamSetter(Setter.bigDecimalScalaSetter))}::numeric,
            ${Segment.paramSegment(unsaved.daystomanufacture)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.productline)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar,
            ${Segment.paramSegment(unsaved.`class`)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar,
            ${Segment.paramSegment(unsaved.style)(Setter.optionParamSetter(Setter.stringSetter))}::bpchar,
            ${Segment.paramSegment(unsaved.productsubcategoryid)(Setter.optionParamSetter(Setter[ProductsubcategoryId]))}::int4,
            ${Segment.paramSegment(unsaved.productmodelid)(Setter.optionParamSetter(Setter[ProductmodelId]))}::int4,
            ${Segment.paramSegment(unsaved.sellstartdate)(Setter[TypoLocalDateTime])}::timestamp,
            ${Segment.paramSegment(unsaved.sellenddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp,
            ${Segment.paramSegment(unsaved.discontinueddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp,
            ${Segment.paramSegment(unsaved.rowguid)(Setter[TypoUUID])}::uuid,
            ${Segment.paramSegment(unsaved.modifieddate)(Setter[TypoLocalDateTime])}::timestamp
          )
          on conflict ("productid")
          do update set
            "name" = EXCLUDED."name",
            "productnumber" = EXCLUDED."productnumber",
            "makeflag" = EXCLUDED."makeflag",
            "finishedgoodsflag" = EXCLUDED."finishedgoodsflag",
            "color" = EXCLUDED."color",
            "safetystocklevel" = EXCLUDED."safetystocklevel",
            "reorderpoint" = EXCLUDED."reorderpoint",
            "standardcost" = EXCLUDED."standardcost",
            "listprice" = EXCLUDED."listprice",
            "size" = EXCLUDED."size",
            "sizeunitmeasurecode" = EXCLUDED."sizeunitmeasurecode",
            "weightunitmeasurecode" = EXCLUDED."weightunitmeasurecode",
            "weight" = EXCLUDED."weight",
            "daystomanufacture" = EXCLUDED."daystomanufacture",
            "productline" = EXCLUDED."productline",
            "class" = EXCLUDED."class",
            "style" = EXCLUDED."style",
            "productsubcategoryid" = EXCLUDED."productsubcategoryid",
            "productmodelid" = EXCLUDED."productmodelid",
            "sellstartdate" = EXCLUDED."sellstartdate",
            "sellenddate" = EXCLUDED."sellenddate",
            "discontinueddate" = EXCLUDED."discontinueddate",
            "rowguid" = EXCLUDED."rowguid",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "productid", "name", "productnumber", "makeflag", "finishedgoodsflag", "color", "safetystocklevel", "reorderpoint", "standardcost", "listprice", "size", "sizeunitmeasurecode", "weightunitmeasurecode", "weight", "daystomanufacture", "productline", "class", "style", "productsubcategoryid", "productmodelid", "sellstartdate"::text, "sellenddate"::text, "discontinueddate"::text, "rowguid", "modifieddate"::text""".insertReturning(ProductRow.jdbcDecoder)
  }
}
