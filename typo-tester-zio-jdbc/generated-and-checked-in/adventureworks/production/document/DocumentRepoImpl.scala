/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package document

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoUUID
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object DocumentRepoImpl extends DocumentRepo {
  override def delete(documentnode: DocumentId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from production.document where "documentnode" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[DocumentFields, DocumentRow] = {
    DeleteBuilder("production.document", DocumentFields)
  }
  override def insert(unsaved: DocumentRow): ZIO[ZConnection, Throwable, DocumentRow] = {
    sql"""insert into production.document("title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate", "documentnode")
          values (???, ???::int4, ???::bool, ???, ???, ???::bpchar, ???::int4, ???::int2, ???, ???::bytea, ???::uuid, ???::timestamp, ???)
          returning "title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate"::text, "documentnode"
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: DocumentRowUnsaved): ZIO[ZConnection, Throwable, DocumentRow] = {
    val fs = List(
      Some((SqlFragment(s""""title""""), sql"???")),
      Some((SqlFragment(s""""owner""""), sql"???::int4")),
      Some((SqlFragment(s""""filename""""), sql"???")),
      Some((SqlFragment(s""""fileextension""""), sql"???")),
      Some((SqlFragment(s""""revision""""), sql"???::bpchar")),
      Some((SqlFragment(s""""status""""), sql"???::int2")),
      Some((SqlFragment(s""""documentsummary""""), sql"???")),
      Some((SqlFragment(s""""document""""), sql"???::bytea")),
      unsaved.folderflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""folderflag""""), sql"???::bool"))
      },
      unsaved.changenumber match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""changenumber""""), sql"???::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""rowguid""""), sql"???::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      },
      unsaved.documentnode match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""documentnode""""), sql"???"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.document default values
            returning "title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate"::text, "documentnode"
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.document(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate"::text, "documentnode"
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[DocumentFields, DocumentRow] = {
    SelectBuilderSql("production.document", DocumentFields, DocumentRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, DocumentRow] = {
    sql"""select "title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate"::text, "documentnode" from production.document""".query[DocumentRow].selectStream
  }
  override def selectById(documentnode: DocumentId): ZIO[ZConnection, Throwable, Option[DocumentRow]] = {
    sql"""select "title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate"::text, "documentnode" from production.document where "documentnode" = ???""".query[DocumentRow].selectOne
  }
  override def selectByIds(documentnodes: Array[DocumentId]): ZStream[ZConnection, Throwable, DocumentRow] = {
    sql"""select "title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate"::text, "documentnode" from production.document where "documentnode" = ANY(${documentnodes})""".query[DocumentRow].selectStream
  }
  override def selectByUnique(rowguid: TypoUUID): ZIO[ZConnection, Throwable, Option[DocumentRow]] = {
    sql"""select "rowguid"
          from production.document
          where "rowguid" = ???
       """.query[DocumentRow].selectOne
  }
  override def update(row: DocumentRow): ZIO[ZConnection, Throwable, Boolean] = {
    val documentnode = row.documentnode
    sql"""update production.document
          set "title" = ???,
              "owner" = ???::int4,
              "folderflag" = ???::bool,
              "filename" = ???,
              "fileextension" = ???,
              "revision" = ???::bpchar,
              "changenumber" = ???::int4,
              "status" = ???::int2,
              "documentsummary" = ???,
              "document" = ???::bytea,
              "rowguid" = ???::uuid,
              "modifieddate" = ???::timestamp
          where "documentnode" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[DocumentFields, DocumentRow] = {
    UpdateBuilder("production.document", DocumentFields, DocumentRow.read)
  }
  override def upsert(unsaved: DocumentRow): ZIO[ZConnection, Throwable, DocumentRow] = {
    sql"""insert into production.document("title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate", "documentnode")
          values (
            ???,
            ???::int4,
            ???::bool,
            ???,
            ???,
            ???::bpchar,
            ???::int4,
            ???::int2,
            ???,
            ???::bytea,
            ???::uuid,
            ???::timestamp,
            ???
          )
          on conflict ("documentnode")
          do update set
            "title" = EXCLUDED."title",
            "owner" = EXCLUDED."owner",
            "folderflag" = EXCLUDED."folderflag",
            "filename" = EXCLUDED."filename",
            "fileextension" = EXCLUDED."fileextension",
            "revision" = EXCLUDED."revision",
            "changenumber" = EXCLUDED."changenumber",
            "status" = EXCLUDED."status",
            "documentsummary" = EXCLUDED."documentsummary",
            "document" = EXCLUDED."document",
            "rowguid" = EXCLUDED."rowguid",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate"::text, "documentnode"
       """.query(???).unique
  }
}
