/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import adventureworks.customtypes.Defaulted
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object CultureRepoImpl extends CultureRepo {
  override def delete(cultureid: CultureId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from production.culture where "cultureid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[CultureFields, CultureRow] = {
    DeleteBuilder("production.culture", CultureFields)
  }
  override def insert(unsaved: CultureRow): ZIO[ZConnection, Throwable, CultureRow] = {
    sql"""insert into production.culture("cultureid", "name", "modifieddate")
          values (???::bpchar, ???::varchar, ???::timestamp)
          returning "cultureid", "name", "modifieddate"::text
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: CultureRowUnsaved): ZIO[ZConnection, Throwable, CultureRow] = {
    val fs = List(
      Some((SqlFragment(s""""cultureid""""), sql"???::bpchar")),
      Some((SqlFragment(s""""name""""), sql"???::varchar")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.culture default values
            returning "cultureid", "name", "modifieddate"::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.culture(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "cultureid", "name", "modifieddate"::text
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[CultureFields, CultureRow] = {
    SelectBuilderSql("production.culture", CultureFields, CultureRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, CultureRow] = {
    sql"""select "cultureid", "name", "modifieddate"::text from production.culture""".query[CultureRow].selectStream
  }
  override def selectById(cultureid: CultureId): ZIO[ZConnection, Throwable, Option[CultureRow]] = {
    sql"""select "cultureid", "name", "modifieddate"::text from production.culture where "cultureid" = ???""".query[CultureRow].selectOne
  }
  override def selectByIds(cultureids: Array[CultureId]): ZStream[ZConnection, Throwable, CultureRow] = {
    sql"""select "cultureid", "name", "modifieddate"::text from production.culture where "cultureid" = ANY(${cultureids})""".query[CultureRow].selectStream
  }
  override def update(row: CultureRow): ZIO[ZConnection, Throwable, Boolean] = {
    val cultureid = row.cultureid
    sql"""update production.culture
          set "name" = ???::varchar,
              "modifieddate" = ???::timestamp
          where "cultureid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[CultureFields, CultureRow] = {
    UpdateBuilder("production.culture", CultureFields, CultureRow.read)
  }
  override def upsert(unsaved: CultureRow): ZIO[ZConnection, Throwable, CultureRow] = {
    sql"""insert into production.culture("cultureid", "name", "modifieddate")
          values (
            ???::bpchar,
            ???::varchar,
            ???::timestamp
          )
          on conflict ("cultureid")
          do update set
            "name" = EXCLUDED."name",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "cultureid", "name", "modifieddate"::text
       """.query(???).unique
  }
}
