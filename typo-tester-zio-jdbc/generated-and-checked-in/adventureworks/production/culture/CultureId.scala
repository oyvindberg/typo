/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import typo.dsl.Bijection
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Type for the primary key of table `production.culture` */
case class CultureId(value: /* bpchar, max 6 chars */ String) extends AnyVal
object CultureId {
  implicit lazy val bijection: Bijection[CultureId, /* bpchar, max 6 chars */ String] = Bijection[CultureId, /* bpchar, max 6 chars */ String](_.value)(CultureId.apply)
  implicit lazy val decoder: JsonDecoder[CultureId] = JsonDecoder.string.map(CultureId.apply)
  implicit lazy val encoder: JsonEncoder[CultureId] = JsonEncoder.string.contramap(_.value)
  implicit lazy val ordering: Ordering[CultureId] = Ordering.by(_.value)
}
