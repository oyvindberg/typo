/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productinventory

import adventureworks.production.location.LocationId
import adventureworks.production.product.ProductId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `production.productinventory` */
case class ProductinventoryId(
  productid: ProductId,
  locationid: LocationId
)
object ProductinventoryId {
  implicit lazy val jsonDecoder: JsonDecoder[ProductinventoryId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val productid = jsonObj.get("productid").toRight("Missing field 'productid'").flatMap(_.as(ProductId.jsonDecoder))
    val locationid = jsonObj.get("locationid").toRight("Missing field 'locationid'").flatMap(_.as(LocationId.jsonDecoder))
    if (productid.isRight && locationid.isRight)
      Right(ProductinventoryId(productid = productid.toOption.get, locationid = locationid.toOption.get))
    else Left(List[Either[String, Any]](productid, locationid).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ProductinventoryId] = new JsonEncoder[ProductinventoryId] {
    override def unsafeEncode(a: ProductinventoryId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""productid":""")
      ProductId.jsonEncoder.unsafeEncode(a.productid, indent, out)
      out.write(",")
      out.write(""""locationid":""")
      LocationId.jsonEncoder.unsafeEncode(a.locationid, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[ProductinventoryId] = Ordering.by(x => (x.productid, x.locationid))
}
