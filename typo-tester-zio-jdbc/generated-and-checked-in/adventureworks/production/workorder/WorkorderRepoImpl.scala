/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.production.product.ProductId
import adventureworks.production.scrapreason.ScrapreasonId
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object WorkorderRepoImpl extends WorkorderRepo {
  override def delete(workorderid: WorkorderId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from production.workorder where "workorderid" = ${Segment.paramSegment(workorderid)(Setter[WorkorderId])}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[WorkorderFields, WorkorderRow] = {
    DeleteBuilder("production.workorder", WorkorderFields)
  }
  override def insert(unsaved: WorkorderRow): ZIO[ZConnection, Throwable, WorkorderRow] = {
    sql"""insert into production.workorder("workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate")
          values (${Segment.paramSegment(unsaved.workorderid)(Setter[WorkorderId])}::int4, ${Segment.paramSegment(unsaved.productid)(Setter[ProductId])}::int4, ${Segment.paramSegment(unsaved.orderqty)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.scrappedqty)(Setter[TypoShort])}::int2, ${Segment.paramSegment(unsaved.startdate)(Setter[TypoLocalDateTime])}::timestamp, ${Segment.paramSegment(unsaved.enddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp, ${Segment.paramSegment(unsaved.duedate)(Setter[TypoLocalDateTime])}::timestamp, ${Segment.paramSegment(unsaved.scrapreasonid)(Setter.optionParamSetter(Setter[ScrapreasonId]))}::int2, ${Segment.paramSegment(unsaved.modifieddate)(Setter[TypoLocalDateTime])}::timestamp)
          returning "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
       """.insertReturning(WorkorderRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insert(unsaved: WorkorderRowUnsaved): ZIO[ZConnection, Throwable, WorkorderRow] = {
    val fs = List(
      Some((sql""""productid"""", sql"${Segment.paramSegment(unsaved.productid)(Setter[ProductId])}::int4")),
      Some((sql""""orderqty"""", sql"${Segment.paramSegment(unsaved.orderqty)(Setter.intSetter)}::int4")),
      Some((sql""""scrappedqty"""", sql"${Segment.paramSegment(unsaved.scrappedqty)(Setter[TypoShort])}::int2")),
      Some((sql""""startdate"""", sql"${Segment.paramSegment(unsaved.startdate)(Setter[TypoLocalDateTime])}::timestamp")),
      Some((sql""""enddate"""", sql"${Segment.paramSegment(unsaved.enddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp")),
      Some((sql""""duedate"""", sql"${Segment.paramSegment(unsaved.duedate)(Setter[TypoLocalDateTime])}::timestamp")),
      Some((sql""""scrapreasonid"""", sql"${Segment.paramSegment(unsaved.scrapreasonid)(Setter.optionParamSetter(Setter[ScrapreasonId]))}::int2")),
      unsaved.workorderid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""workorderid"""", sql"${Segment.paramSegment(value: WorkorderId)(Setter[WorkorderId])}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""modifieddate"""", sql"${Segment.paramSegment(value: TypoLocalDateTime)(Setter[TypoLocalDateTime])}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.workorder default values
            returning "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text
         """
    } else {
      val names  = fs.map { case (n, _) => n }.mkFragment(SqlFragment(", "))
      val values = fs.map { case (_, f) => f }.mkFragment(SqlFragment(", "))
      sql"""insert into production.workorder($names) values ($values) returning "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text"""
    }
    q.insertReturning(WorkorderRow.jdbcDecoder).map(_.updatedKeys.head)
    
  }
  override def select: SelectBuilder[WorkorderFields, WorkorderRow] = {
    SelectBuilderSql("production.workorder", WorkorderFields, WorkorderRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, WorkorderRow] = {
    sql"""select "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text from production.workorder""".query(WorkorderRow.jdbcDecoder).selectStream
  }
  override def selectById(workorderid: WorkorderId): ZIO[ZConnection, Throwable, Option[WorkorderRow]] = {
    sql"""select "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text from production.workorder where "workorderid" = ${Segment.paramSegment(workorderid)(Setter[WorkorderId])}""".query(WorkorderRow.jdbcDecoder).selectOne
  }
  override def selectByIds(workorderids: Array[WorkorderId]): ZStream[ZConnection, Throwable, WorkorderRow] = {
    sql"""select "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text from production.workorder where "workorderid" = ANY(${Segment.paramSegment(workorderids)(WorkorderId.arraySetter)})""".query(WorkorderRow.jdbcDecoder).selectStream
  }
  override def update(row: WorkorderRow): ZIO[ZConnection, Throwable, Boolean] = {
    val workorderid = row.workorderid
    sql"""update production.workorder
          set "productid" = ${Segment.paramSegment(row.productid)(Setter[ProductId])}::int4,
              "orderqty" = ${Segment.paramSegment(row.orderqty)(Setter.intSetter)}::int4,
              "scrappedqty" = ${Segment.paramSegment(row.scrappedqty)(Setter[TypoShort])}::int2,
              "startdate" = ${Segment.paramSegment(row.startdate)(Setter[TypoLocalDateTime])}::timestamp,
              "enddate" = ${Segment.paramSegment(row.enddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp,
              "duedate" = ${Segment.paramSegment(row.duedate)(Setter[TypoLocalDateTime])}::timestamp,
              "scrapreasonid" = ${Segment.paramSegment(row.scrapreasonid)(Setter.optionParamSetter(Setter[ScrapreasonId]))}::int2,
              "modifieddate" = ${Segment.paramSegment(row.modifieddate)(Setter[TypoLocalDateTime])}::timestamp
          where "workorderid" = ${Segment.paramSegment(workorderid)(Setter[WorkorderId])}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[WorkorderFields, WorkorderRow] = {
    UpdateBuilder("production.workorder", WorkorderFields, WorkorderRow.jdbcDecoder)
  }
  override def upsert(unsaved: WorkorderRow): ZIO[ZConnection, Throwable, UpdateResult[WorkorderRow]] = {
    sql"""insert into production.workorder("workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate")
          values (
            ${Segment.paramSegment(unsaved.workorderid)(Setter[WorkorderId])}::int4,
            ${Segment.paramSegment(unsaved.productid)(Setter[ProductId])}::int4,
            ${Segment.paramSegment(unsaved.orderqty)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.scrappedqty)(Setter[TypoShort])}::int2,
            ${Segment.paramSegment(unsaved.startdate)(Setter[TypoLocalDateTime])}::timestamp,
            ${Segment.paramSegment(unsaved.enddate)(Setter.optionParamSetter(Setter[TypoLocalDateTime]))}::timestamp,
            ${Segment.paramSegment(unsaved.duedate)(Setter[TypoLocalDateTime])}::timestamp,
            ${Segment.paramSegment(unsaved.scrapreasonid)(Setter.optionParamSetter(Setter[ScrapreasonId]))}::int2,
            ${Segment.paramSegment(unsaved.modifieddate)(Setter[TypoLocalDateTime])}::timestamp
          )
          on conflict ("workorderid")
          do update set
            "productid" = EXCLUDED."productid",
            "orderqty" = EXCLUDED."orderqty",
            "scrappedqty" = EXCLUDED."scrappedqty",
            "startdate" = EXCLUDED."startdate",
            "enddate" = EXCLUDED."enddate",
            "duedate" = EXCLUDED."duedate",
            "scrapreasonid" = EXCLUDED."scrapreasonid",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "workorderid", "productid", "orderqty", "scrappedqty", "startdate"::text, "enddate"::text, "duedate"::text, "scrapreasonid", "modifieddate"::text""".insertReturning(WorkorderRow.jdbcDecoder)
  }
}
