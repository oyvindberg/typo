/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodel

import adventureworks.customtypes.Defaulted
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object ProductmodelRepoImpl extends ProductmodelRepo {
  override def delete(productmodelid: ProductmodelId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from production.productmodel where "productmodelid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[ProductmodelFields, ProductmodelRow] = {
    DeleteBuilder("production.productmodel", ProductmodelFields)
  }
  override def insert(unsaved: ProductmodelRow): ZIO[ZConnection, Throwable, ProductmodelRow] = {
    sql"""insert into production.productmodel("productmodelid", "name", "catalogdescription", "instructions", "rowguid", "modifieddate")
          values (???::int4, ???::varchar, ???::xml, ???::xml, ???::uuid, ???::timestamp)
          returning "productmodelid", "name", "catalogdescription", "instructions", "rowguid", "modifieddate"::text
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: ProductmodelRowUnsaved): ZIO[ZConnection, Throwable, ProductmodelRow] = {
    val fs = List(
      Some((SqlFragment(s""""name""""), sql"???::varchar")),
      Some((SqlFragment(s""""catalogdescription""""), sql"???::xml")),
      Some((SqlFragment(s""""instructions""""), sql"???::xml")),
      unsaved.productmodelid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""productmodelid""""), sql"???::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""rowguid""""), sql"???::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.productmodel default values
            returning "productmodelid", "name", "catalogdescription", "instructions", "rowguid", "modifieddate"::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.productmodel(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "productmodelid", "name", "catalogdescription", "instructions", "rowguid", "modifieddate"::text
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[ProductmodelFields, ProductmodelRow] = {
    SelectBuilderSql("production.productmodel", ProductmodelFields, ProductmodelRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, ProductmodelRow] = {
    sql"""select "productmodelid", "name", "catalogdescription", "instructions", "rowguid", "modifieddate"::text from production.productmodel""".query[ProductmodelRow].selectStream
  }
  override def selectById(productmodelid: ProductmodelId): ZIO[ZConnection, Throwable, Option[ProductmodelRow]] = {
    sql"""select "productmodelid", "name", "catalogdescription", "instructions", "rowguid", "modifieddate"::text from production.productmodel where "productmodelid" = ???""".query[ProductmodelRow].selectOne
  }
  override def selectByIds(productmodelids: Array[ProductmodelId]): ZStream[ZConnection, Throwable, ProductmodelRow] = {
    sql"""select "productmodelid", "name", "catalogdescription", "instructions", "rowguid", "modifieddate"::text from production.productmodel where "productmodelid" = ANY(${productmodelids})""".query[ProductmodelRow].selectStream
  }
  override def update(row: ProductmodelRow): ZIO[ZConnection, Throwable, Boolean] = {
    val productmodelid = row.productmodelid
    sql"""update production.productmodel
          set "name" = ???::varchar,
              "catalogdescription" = ???::xml,
              "instructions" = ???::xml,
              "rowguid" = ???::uuid,
              "modifieddate" = ???::timestamp
          where "productmodelid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[ProductmodelFields, ProductmodelRow] = {
    UpdateBuilder("production.productmodel", ProductmodelFields, ProductmodelRow.read)
  }
  override def upsert(unsaved: ProductmodelRow): ZIO[ZConnection, Throwable, ProductmodelRow] = {
    sql"""insert into production.productmodel("productmodelid", "name", "catalogdescription", "instructions", "rowguid", "modifieddate")
          values (
            ???::int4,
            ???::varchar,
            ???::xml,
            ???::xml,
            ???::uuid,
            ???::timestamp
          )
          on conflict ("productmodelid")
          do update set
            "name" = EXCLUDED."name",
            "catalogdescription" = EXCLUDED."catalogdescription",
            "instructions" = EXCLUDED."instructions",
            "rowguid" = EXCLUDED."rowguid",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "productmodelid", "name", "catalogdescription", "instructions", "rowguid", "modifieddate"::text
       """.query(???).unique
  }
}
