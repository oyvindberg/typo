/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoUnknownCitext
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXml
import adventureworks.humanresources.department.DepartmentId
import adventureworks.humanresources.department.DepartmentRepoImpl
import adventureworks.humanresources.department.DepartmentRow
import adventureworks.humanresources.department.DepartmentRowUnsaved
import adventureworks.humanresources.employee.EmployeeRepoImpl
import adventureworks.humanresources.employee.EmployeeRow
import adventureworks.humanresources.employee.EmployeeRowUnsaved
import adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRepoImpl
import adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow
import adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRowUnsaved
import adventureworks.humanresources.employeepayhistory.EmployeepayhistoryRepoImpl
import adventureworks.humanresources.employeepayhistory.EmployeepayhistoryRow
import adventureworks.humanresources.employeepayhistory.EmployeepayhistoryRowUnsaved
import adventureworks.humanresources.jobcandidate.JobcandidateId
import adventureworks.humanresources.jobcandidate.JobcandidateRepoImpl
import adventureworks.humanresources.jobcandidate.JobcandidateRow
import adventureworks.humanresources.jobcandidate.JobcandidateRowUnsaved
import adventureworks.humanresources.shift.ShiftId
import adventureworks.humanresources.shift.ShiftRepoImpl
import adventureworks.humanresources.shift.ShiftRow
import adventureworks.humanresources.shift.ShiftRowUnsaved
import adventureworks.person.address.AddressId
import adventureworks.person.address.AddressRepoImpl
import adventureworks.person.address.AddressRow
import adventureworks.person.address.AddressRowUnsaved
import adventureworks.person.addresstype.AddresstypeId
import adventureworks.person.addresstype.AddresstypeRepoImpl
import adventureworks.person.addresstype.AddresstypeRow
import adventureworks.person.addresstype.AddresstypeRowUnsaved
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.businessentity.BusinessentityRepoImpl
import adventureworks.person.businessentity.BusinessentityRow
import adventureworks.person.businessentity.BusinessentityRowUnsaved
import adventureworks.person.businessentityaddress.BusinessentityaddressRepoImpl
import adventureworks.person.businessentityaddress.BusinessentityaddressRow
import adventureworks.person.businessentityaddress.BusinessentityaddressRowUnsaved
import adventureworks.person.businessentitycontact.BusinessentitycontactRepoImpl
import adventureworks.person.businessentitycontact.BusinessentitycontactRow
import adventureworks.person.businessentitycontact.BusinessentitycontactRowUnsaved
import adventureworks.person.contacttype.ContacttypeId
import adventureworks.person.contacttype.ContacttypeRepoImpl
import adventureworks.person.contacttype.ContacttypeRow
import adventureworks.person.contacttype.ContacttypeRowUnsaved
import adventureworks.person.countryregion.CountryregionId
import adventureworks.person.countryregion.CountryregionRepoImpl
import adventureworks.person.countryregion.CountryregionRow
import adventureworks.person.countryregion.CountryregionRowUnsaved
import adventureworks.person.emailaddress.EmailaddressRepoImpl
import adventureworks.person.emailaddress.EmailaddressRow
import adventureworks.person.emailaddress.EmailaddressRowUnsaved
import adventureworks.person.password.PasswordRepoImpl
import adventureworks.person.password.PasswordRow
import adventureworks.person.password.PasswordRowUnsaved
import adventureworks.person.person.PersonRepoImpl
import adventureworks.person.person.PersonRow
import adventureworks.person.person.PersonRowUnsaved
import adventureworks.person.personphone.PersonphoneRepoImpl
import adventureworks.person.personphone.PersonphoneRow
import adventureworks.person.personphone.PersonphoneRowUnsaved
import adventureworks.person.phonenumbertype.PhonenumbertypeId
import adventureworks.person.phonenumbertype.PhonenumbertypeRepoImpl
import adventureworks.person.phonenumbertype.PhonenumbertypeRow
import adventureworks.person.phonenumbertype.PhonenumbertypeRowUnsaved
import adventureworks.person.stateprovince.StateprovinceId
import adventureworks.person.stateprovince.StateprovinceRepoImpl
import adventureworks.person.stateprovince.StateprovinceRow
import adventureworks.person.stateprovince.StateprovinceRowUnsaved
import adventureworks.production.billofmaterials.BillofmaterialsRepoImpl
import adventureworks.production.billofmaterials.BillofmaterialsRow
import adventureworks.production.billofmaterials.BillofmaterialsRowUnsaved
import adventureworks.production.culture.CultureId
import adventureworks.production.culture.CultureRepoImpl
import adventureworks.production.culture.CultureRow
import adventureworks.production.culture.CultureRowUnsaved
import adventureworks.production.document.DocumentId
import adventureworks.production.document.DocumentRepoImpl
import adventureworks.production.document.DocumentRow
import adventureworks.production.document.DocumentRowUnsaved
import adventureworks.production.illustration.IllustrationId
import adventureworks.production.illustration.IllustrationRepoImpl
import adventureworks.production.illustration.IllustrationRow
import adventureworks.production.illustration.IllustrationRowUnsaved
import adventureworks.production.location.LocationId
import adventureworks.production.location.LocationRepoImpl
import adventureworks.production.location.LocationRow
import adventureworks.production.location.LocationRowUnsaved
import adventureworks.production.product.ProductId
import adventureworks.production.product.ProductRepoImpl
import adventureworks.production.product.ProductRow
import adventureworks.production.product.ProductRowUnsaved
import adventureworks.production.productcategory.ProductcategoryId
import adventureworks.production.productcategory.ProductcategoryRepoImpl
import adventureworks.production.productcategory.ProductcategoryRow
import adventureworks.production.productcategory.ProductcategoryRowUnsaved
import adventureworks.production.productcosthistory.ProductcosthistoryRepoImpl
import adventureworks.production.productcosthistory.ProductcosthistoryRow
import adventureworks.production.productcosthistory.ProductcosthistoryRowUnsaved
import adventureworks.production.productdescription.ProductdescriptionId
import adventureworks.production.productdescription.ProductdescriptionRepoImpl
import adventureworks.production.productdescription.ProductdescriptionRow
import adventureworks.production.productdescription.ProductdescriptionRowUnsaved
import adventureworks.production.productdocument.ProductdocumentRepoImpl
import adventureworks.production.productdocument.ProductdocumentRow
import adventureworks.production.productdocument.ProductdocumentRowUnsaved
import adventureworks.production.productinventory.ProductinventoryRepoImpl
import adventureworks.production.productinventory.ProductinventoryRow
import adventureworks.production.productinventory.ProductinventoryRowUnsaved
import adventureworks.production.productlistpricehistory.ProductlistpricehistoryRepoImpl
import adventureworks.production.productlistpricehistory.ProductlistpricehistoryRow
import adventureworks.production.productlistpricehistory.ProductlistpricehistoryRowUnsaved
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productmodel.ProductmodelRepoImpl
import adventureworks.production.productmodel.ProductmodelRow
import adventureworks.production.productmodel.ProductmodelRowUnsaved
import adventureworks.production.productmodelillustration.ProductmodelillustrationRepoImpl
import adventureworks.production.productmodelillustration.ProductmodelillustrationRow
import adventureworks.production.productmodelillustration.ProductmodelillustrationRowUnsaved
import adventureworks.production.productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRepoImpl
import adventureworks.production.productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRow
import adventureworks.production.productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRowUnsaved
import adventureworks.production.productphoto.ProductphotoId
import adventureworks.production.productphoto.ProductphotoRepoImpl
import adventureworks.production.productphoto.ProductphotoRow
import adventureworks.production.productphoto.ProductphotoRowUnsaved
import adventureworks.production.productproductphoto.ProductproductphotoRepoImpl
import adventureworks.production.productproductphoto.ProductproductphotoRow
import adventureworks.production.productproductphoto.ProductproductphotoRowUnsaved
import adventureworks.production.productreview.ProductreviewId
import adventureworks.production.productreview.ProductreviewRepoImpl
import adventureworks.production.productreview.ProductreviewRow
import adventureworks.production.productreview.ProductreviewRowUnsaved
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.productsubcategory.ProductsubcategoryRepoImpl
import adventureworks.production.productsubcategory.ProductsubcategoryRow
import adventureworks.production.productsubcategory.ProductsubcategoryRowUnsaved
import adventureworks.production.scrapreason.ScrapreasonId
import adventureworks.production.scrapreason.ScrapreasonRepoImpl
import adventureworks.production.scrapreason.ScrapreasonRow
import adventureworks.production.scrapreason.ScrapreasonRowUnsaved
import adventureworks.production.transactionhistory.TransactionhistoryId
import adventureworks.production.transactionhistory.TransactionhistoryRepoImpl
import adventureworks.production.transactionhistory.TransactionhistoryRow
import adventureworks.production.transactionhistory.TransactionhistoryRowUnsaved
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveId
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveRepoImpl
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveRow
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveRowUnsaved
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.production.unitmeasure.UnitmeasureRepoImpl
import adventureworks.production.unitmeasure.UnitmeasureRow
import adventureworks.production.unitmeasure.UnitmeasureRowUnsaved
import adventureworks.production.workorder.WorkorderId
import adventureworks.production.workorder.WorkorderRepoImpl
import adventureworks.production.workorder.WorkorderRow
import adventureworks.production.workorder.WorkorderRowUnsaved
import adventureworks.production.workorderrouting.WorkorderroutingRepoImpl
import adventureworks.production.workorderrouting.WorkorderroutingRow
import adventureworks.production.workorderrouting.WorkorderroutingRowUnsaved
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Mydomain
import adventureworks.public.Myenum
import adventureworks.public.Name
import adventureworks.public.NameStyle
import adventureworks.public.OrderNumber
import adventureworks.public.Phone
import adventureworks.public.ShortText
import adventureworks.public.flaff.FlaffRepoImpl
import adventureworks.public.flaff.FlaffRow
import adventureworks.public.identity_test.IdentityTestId
import adventureworks.public.identity_test.IdentityTestRepoImpl
import adventureworks.public.identity_test.IdentityTestRow
import adventureworks.public.identity_test.IdentityTestRowUnsaved
import adventureworks.public.pgtest.PgtestRepoImpl
import adventureworks.public.pgtest.PgtestRow
import adventureworks.public.pgtestnull.PgtestnullRepoImpl
import adventureworks.public.pgtestnull.PgtestnullRow
import adventureworks.public.users.UsersId
import adventureworks.public.users.UsersRepoImpl
import adventureworks.public.users.UsersRow
import adventureworks.public.users.UsersRowUnsaved
import adventureworks.purchasing.productvendor.ProductvendorRepoImpl
import adventureworks.purchasing.productvendor.ProductvendorRow
import adventureworks.purchasing.productvendor.ProductvendorRowUnsaved
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderRepoImpl
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderRow
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderRowUnsaved
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.purchasing.shipmethod.ShipmethodRepoImpl
import adventureworks.purchasing.shipmethod.ShipmethodRow
import adventureworks.purchasing.shipmethod.ShipmethodRowUnsaved
import adventureworks.purchasing.vendor.VendorRepoImpl
import adventureworks.purchasing.vendor.VendorRow
import adventureworks.purchasing.vendor.VendorRowUnsaved
import adventureworks.sales.countryregioncurrency.CountryregioncurrencyRepoImpl
import adventureworks.sales.countryregioncurrency.CountryregioncurrencyRow
import adventureworks.sales.countryregioncurrency.CountryregioncurrencyRowUnsaved
import adventureworks.sales.creditcard.CreditcardRepoImpl
import adventureworks.sales.creditcard.CreditcardRow
import adventureworks.sales.creditcard.CreditcardRowUnsaved
import adventureworks.sales.currency.CurrencyId
import adventureworks.sales.currency.CurrencyRepoImpl
import adventureworks.sales.currency.CurrencyRow
import adventureworks.sales.currency.CurrencyRowUnsaved
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.currencyrate.CurrencyrateRepoImpl
import adventureworks.sales.currencyrate.CurrencyrateRow
import adventureworks.sales.currencyrate.CurrencyrateRowUnsaved
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.customer.CustomerRepoImpl
import adventureworks.sales.customer.CustomerRow
import adventureworks.sales.customer.CustomerRowUnsaved
import adventureworks.sales.personcreditcard.PersoncreditcardRepoImpl
import adventureworks.sales.personcreditcard.PersoncreditcardRow
import adventureworks.sales.personcreditcard.PersoncreditcardRowUnsaved
import adventureworks.sales.salesorderdetail.SalesorderdetailRepoImpl
import adventureworks.sales.salesorderdetail.SalesorderdetailRow
import adventureworks.sales.salesorderdetail.SalesorderdetailRowUnsaved
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.salesorderheader.SalesorderheaderRepoImpl
import adventureworks.sales.salesorderheader.SalesorderheaderRow
import adventureworks.sales.salesorderheader.SalesorderheaderRowUnsaved
import adventureworks.sales.salesorderheadersalesreason.SalesorderheadersalesreasonRepoImpl
import adventureworks.sales.salesorderheadersalesreason.SalesorderheadersalesreasonRow
import adventureworks.sales.salesorderheadersalesreason.SalesorderheadersalesreasonRowUnsaved
import adventureworks.sales.salesperson.SalespersonRepoImpl
import adventureworks.sales.salesperson.SalespersonRow
import adventureworks.sales.salesperson.SalespersonRowUnsaved
import adventureworks.sales.salespersonquotahistory.SalespersonquotahistoryRepoImpl
import adventureworks.sales.salespersonquotahistory.SalespersonquotahistoryRow
import adventureworks.sales.salespersonquotahistory.SalespersonquotahistoryRowUnsaved
import adventureworks.sales.salesreason.SalesreasonId
import adventureworks.sales.salesreason.SalesreasonRepoImpl
import adventureworks.sales.salesreason.SalesreasonRow
import adventureworks.sales.salesreason.SalesreasonRowUnsaved
import adventureworks.sales.salestaxrate.SalestaxrateId
import adventureworks.sales.salestaxrate.SalestaxrateRepoImpl
import adventureworks.sales.salestaxrate.SalestaxrateRow
import adventureworks.sales.salestaxrate.SalestaxrateRowUnsaved
import adventureworks.sales.salesterritory.SalesterritoryId
import adventureworks.sales.salesterritory.SalesterritoryRepoImpl
import adventureworks.sales.salesterritory.SalesterritoryRow
import adventureworks.sales.salesterritory.SalesterritoryRowUnsaved
import adventureworks.sales.salesterritoryhistory.SalesterritoryhistoryRepoImpl
import adventureworks.sales.salesterritoryhistory.SalesterritoryhistoryRow
import adventureworks.sales.salesterritoryhistory.SalesterritoryhistoryRowUnsaved
import adventureworks.sales.shoppingcartitem.ShoppingcartitemId
import adventureworks.sales.shoppingcartitem.ShoppingcartitemRepoImpl
import adventureworks.sales.shoppingcartitem.ShoppingcartitemRow
import adventureworks.sales.shoppingcartitem.ShoppingcartitemRowUnsaved
import adventureworks.sales.specialoffer.SpecialofferId
import adventureworks.sales.specialoffer.SpecialofferRepoImpl
import adventureworks.sales.specialoffer.SpecialofferRow
import adventureworks.sales.specialoffer.SpecialofferRowUnsaved
import adventureworks.sales.specialofferproduct.SpecialofferproductId
import adventureworks.sales.specialofferproduct.SpecialofferproductRepoImpl
import adventureworks.sales.specialofferproduct.SpecialofferproductRow
import adventureworks.sales.specialofferproduct.SpecialofferproductRowUnsaved
import adventureworks.sales.store.StoreRepoImpl
import adventureworks.sales.store.StoreRow
import adventureworks.sales.store.StoreRowUnsaved
import adventureworks.userdefined.CustomCreditcardId
import adventureworks.userdefined.FirstName
import java.time.Instant
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.ZoneOffset
import scala.util.Random
import zio.ZIO
import zio.jdbc.ZConnection

class TestInsert(random: Random) {
  def humanresourcesDepartment(name: Name = Name(random.alphanumeric.take(20).mkString),
                               groupname: Name = Name(random.alphanumeric.take(20).mkString),
                               departmentid: Defaulted[DepartmentId] = Defaulted.UseDefault,
                               modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                              ): ZIO[ZConnection, Throwable, DepartmentRow] = (new DepartmentRepoImpl).insert(new DepartmentRowUnsaved(name = name, groupname = groupname, departmentid = departmentid, modifieddate = modifieddate))
  def humanresourcesEmployee(businessentityid: BusinessentityId,
                             nationalidnumber: /* max 15 chars */ String = random.alphanumeric.take(15).mkString,
                             loginid: /* max 256 chars */ String = random.alphanumeric.take(20).mkString,
                             jobtitle: /* max 50 chars */ String = random.alphanumeric.take(20).mkString,
                             birthdate: TypoLocalDate = TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)),
                             maritalstatus: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString,
                             gender: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString,
                             hiredate: TypoLocalDate = TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)),
                             salariedflag: Defaulted[Flag] = Defaulted.UseDefault,
                             vacationhours: Defaulted[TypoShort] = Defaulted.UseDefault,
                             sickleavehours: Defaulted[TypoShort] = Defaulted.UseDefault,
                             currentflag: Defaulted[Flag] = Defaulted.UseDefault,
                             rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                             modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                             organizationnode: Defaulted[Option[String]] = Defaulted.UseDefault
                            ): ZIO[ZConnection, Throwable, EmployeeRow] = (new EmployeeRepoImpl).insert(new EmployeeRowUnsaved(businessentityid = businessentityid, nationalidnumber = nationalidnumber, loginid = loginid, jobtitle = jobtitle, birthdate = birthdate, maritalstatus = maritalstatus, gender = gender, hiredate = hiredate, salariedflag = salariedflag, vacationhours = vacationhours, sickleavehours = sickleavehours, currentflag = currentflag, rowguid = rowguid, modifieddate = modifieddate, organizationnode = organizationnode))
  def humanresourcesEmployeedepartmenthistory(businessentityid: BusinessentityId,
                                              departmentid: DepartmentId,
                                              shiftid: ShiftId,
                                              startdate: TypoLocalDate = TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)),
                                              enddate: Option[TypoLocalDate] = if (random.nextBoolean()) None else Some(TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong))),
                                              modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                             ): ZIO[ZConnection, Throwable, EmployeedepartmenthistoryRow] = (new EmployeedepartmenthistoryRepoImpl).insert(new EmployeedepartmenthistoryRowUnsaved(businessentityid = businessentityid, departmentid = departmentid, shiftid = shiftid, startdate = startdate, enddate = enddate, modifieddate = modifieddate))
  def humanresourcesEmployeepayhistory(businessentityid: BusinessentityId,
                                       ratechangedate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                                       rate: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                                       payfrequency: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                                       modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                      ): ZIO[ZConnection, Throwable, EmployeepayhistoryRow] = (new EmployeepayhistoryRepoImpl).insert(new EmployeepayhistoryRowUnsaved(businessentityid = businessentityid, ratechangedate = ratechangedate, rate = rate, payfrequency = payfrequency, modifieddate = modifieddate))
  def humanresourcesJobcandidate(businessentityid: Option[BusinessentityId] = None,
                                 resume: Option[TypoXml] = None,
                                 jobcandidateid: Defaulted[JobcandidateId] = Defaulted.UseDefault,
                                 modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                ): ZIO[ZConnection, Throwable, JobcandidateRow] = (new JobcandidateRepoImpl).insert(new JobcandidateRowUnsaved(businessentityid = businessentityid, resume = resume, jobcandidateid = jobcandidateid, modifieddate = modifieddate))
  def humanresourcesShift(name: Name = Name(random.alphanumeric.take(20).mkString),
                          starttime: TypoLocalTime = TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)),
                          endtime: TypoLocalTime = TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)),
                          shiftid: Defaulted[ShiftId] = Defaulted.UseDefault,
                          modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                         ): ZIO[ZConnection, Throwable, ShiftRow] = (new ShiftRepoImpl).insert(new ShiftRowUnsaved(name = name, starttime = starttime, endtime = endtime, shiftid = shiftid, modifieddate = modifieddate))
  def personAddress(stateprovinceid: StateprovinceId,
                    addressline1: /* max 60 chars */ String = random.alphanumeric.take(20).mkString,
                    addressline2: Option[/* max 60 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                    city: /* max 30 chars */ String = random.alphanumeric.take(20).mkString,
                    postalcode: /* max 15 chars */ String = random.alphanumeric.take(15).mkString,
                    spatiallocation: Option[TypoBytea] = None,
                    addressid: Defaulted[AddressId] = Defaulted.UseDefault,
                    rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                    modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                   ): ZIO[ZConnection, Throwable, AddressRow] = (new AddressRepoImpl).insert(new AddressRowUnsaved(stateprovinceid = stateprovinceid, addressline1 = addressline1, addressline2 = addressline2, city = city, postalcode = postalcode, spatiallocation = spatiallocation, addressid = addressid, rowguid = rowguid, modifieddate = modifieddate))
  def personAddresstype(name: Name = Name(random.alphanumeric.take(20).mkString),
                        addresstypeid: Defaulted[AddresstypeId] = Defaulted.UseDefault,
                        rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                        modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                       ): ZIO[ZConnection, Throwable, AddresstypeRow] = (new AddresstypeRepoImpl).insert(new AddresstypeRowUnsaved(name = name, addresstypeid = addresstypeid, rowguid = rowguid, modifieddate = modifieddate))
  def personBusinessentity(businessentityid: Defaulted[BusinessentityId] = Defaulted.UseDefault,
                           rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                           modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                          ): ZIO[ZConnection, Throwable, BusinessentityRow] = (new BusinessentityRepoImpl).insert(new BusinessentityRowUnsaved(businessentityid = businessentityid, rowguid = rowguid, modifieddate = modifieddate))
  def personBusinessentityaddress(businessentityid: BusinessentityId,
                                  addressid: AddressId,
                                  addresstypeid: AddresstypeId,
                                  rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                                  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                 ): ZIO[ZConnection, Throwable, BusinessentityaddressRow] = (new BusinessentityaddressRepoImpl).insert(new BusinessentityaddressRowUnsaved(businessentityid = businessentityid, addressid = addressid, addresstypeid = addresstypeid, rowguid = rowguid, modifieddate = modifieddate))
  def personBusinessentitycontact(businessentityid: BusinessentityId,
                                  personid: BusinessentityId,
                                  contacttypeid: ContacttypeId,
                                  rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                                  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                 ): ZIO[ZConnection, Throwable, BusinessentitycontactRow] = (new BusinessentitycontactRepoImpl).insert(new BusinessentitycontactRowUnsaved(businessentityid = businessentityid, personid = personid, contacttypeid = contacttypeid, rowguid = rowguid, modifieddate = modifieddate))
  def personContacttype(name: Name = Name(random.alphanumeric.take(20).mkString),
                        contacttypeid: Defaulted[ContacttypeId] = Defaulted.UseDefault,
                        modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                       ): ZIO[ZConnection, Throwable, ContacttypeRow] = (new ContacttypeRepoImpl).insert(new ContacttypeRowUnsaved(name = name, contacttypeid = contacttypeid, modifieddate = modifieddate))
  def personCountryregion(countryregioncode: CountryregionId,
                          name: Name = Name(random.alphanumeric.take(20).mkString),
                          modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                         ): ZIO[ZConnection, Throwable, CountryregionRow] = (new CountryregionRepoImpl).insert(new CountryregionRowUnsaved(countryregioncode = countryregioncode, name = name, modifieddate = modifieddate))
  def personEmailaddress(businessentityid: BusinessentityId,
                         emailaddress: Option[/* max 50 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                         emailaddressid: Defaulted[Int] = Defaulted.UseDefault,
                         rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                         modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                        ): ZIO[ZConnection, Throwable, EmailaddressRow] = (new EmailaddressRepoImpl).insert(new EmailaddressRowUnsaved(businessentityid = businessentityid, emailaddress = emailaddress, emailaddressid = emailaddressid, rowguid = rowguid, modifieddate = modifieddate))
  def personPassword(businessentityid: BusinessentityId,
                     passwordhash: /* max 128 chars */ String = random.alphanumeric.take(20).mkString,
                     passwordsalt: /* max 10 chars */ String = random.alphanumeric.take(10).mkString,
                     rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                     modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                    ): ZIO[ZConnection, Throwable, PasswordRow] = (new PasswordRepoImpl).insert(new PasswordRowUnsaved(businessentityid = businessentityid, passwordhash = passwordhash, passwordsalt = passwordsalt, rowguid = rowguid, modifieddate = modifieddate))
  def personPerson(businessentityid: BusinessentityId,
                   firstname: /* user-picked */ FirstName,
                   persontype: /* bpchar, max 2 chars */ String = random.alphanumeric.take(2).mkString,
                   title: Option[/* max 8 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(8).mkString),
                   middlename: Option[Name] = if (random.nextBoolean()) None else Some(Name(random.alphanumeric.take(20).mkString)),
                   lastname: Name = Name(random.alphanumeric.take(20).mkString),
                   suffix: Option[/* max 10 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(10).mkString),
                   additionalcontactinfo: Option[TypoXml] = None,
                   demographics: Option[TypoXml] = None,
                   namestyle: Defaulted[NameStyle] = Defaulted.UseDefault,
                   emailpromotion: Defaulted[Int] = Defaulted.UseDefault,
                   rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                   modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                  ): ZIO[ZConnection, Throwable, PersonRow] = (new PersonRepoImpl).insert(new PersonRowUnsaved(businessentityid = businessentityid, firstname = firstname, persontype = persontype, title = title, middlename = middlename, lastname = lastname, suffix = suffix, additionalcontactinfo = additionalcontactinfo, demographics = demographics, namestyle = namestyle, emailpromotion = emailpromotion, rowguid = rowguid, modifieddate = modifieddate))
  def personPersonphone(businessentityid: BusinessentityId,
                        phonenumbertypeid: PhonenumbertypeId,
                        phonenumber: Phone = Phone(random.alphanumeric.take(20).mkString),
                        modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                       ): ZIO[ZConnection, Throwable, PersonphoneRow] = (new PersonphoneRepoImpl).insert(new PersonphoneRowUnsaved(businessentityid = businessentityid, phonenumbertypeid = phonenumbertypeid, phonenumber = phonenumber, modifieddate = modifieddate))
  def personPhonenumbertype(name: Name = Name(random.alphanumeric.take(20).mkString),
                            phonenumbertypeid: Defaulted[PhonenumbertypeId] = Defaulted.UseDefault,
                            modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                           ): ZIO[ZConnection, Throwable, PhonenumbertypeRow] = (new PhonenumbertypeRepoImpl).insert(new PhonenumbertypeRowUnsaved(name = name, phonenumbertypeid = phonenumbertypeid, modifieddate = modifieddate))
  def personStateprovince(countryregioncode: CountryregionId,
                          territoryid: SalesterritoryId,
                          stateprovincecode: /* bpchar, max 3 chars */ String = random.alphanumeric.take(3).mkString,
                          name: Name = Name(random.alphanumeric.take(20).mkString),
                          stateprovinceid: Defaulted[StateprovinceId] = Defaulted.UseDefault,
                          isonlystateprovinceflag: Defaulted[Flag] = Defaulted.UseDefault,
                          rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                          modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                         ): ZIO[ZConnection, Throwable, StateprovinceRow] = (new StateprovinceRepoImpl).insert(new StateprovinceRowUnsaved(countryregioncode = countryregioncode, territoryid = territoryid, stateprovincecode = stateprovincecode, name = name, stateprovinceid = stateprovinceid, isonlystateprovinceflag = isonlystateprovinceflag, rowguid = rowguid, modifieddate = modifieddate))
  def productionBillofmaterials(componentid: ProductId,
                                unitmeasurecode: UnitmeasureId,
                                productassemblyid: Option[ProductId] = None,
                                enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                                bomlevel: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                                billofmaterialsid: Defaulted[Int] = Defaulted.UseDefault,
                                startdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                                perassemblyqty: Defaulted[BigDecimal] = Defaulted.UseDefault,
                                modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                               ): ZIO[ZConnection, Throwable, BillofmaterialsRow] = (new BillofmaterialsRepoImpl).insert(new BillofmaterialsRowUnsaved(componentid = componentid, unitmeasurecode = unitmeasurecode, productassemblyid = productassemblyid, enddate = enddate, bomlevel = bomlevel, billofmaterialsid = billofmaterialsid, startdate = startdate, perassemblyqty = perassemblyqty, modifieddate = modifieddate))
  def productionCulture(cultureid: CultureId,
                        name: Name = Name(random.alphanumeric.take(20).mkString),
                        modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                       ): ZIO[ZConnection, Throwable, CultureRow] = (new CultureRepoImpl).insert(new CultureRowUnsaved(cultureid = cultureid, name = name, modifieddate = modifieddate))
  def productionDocument(owner: BusinessentityId,
                         title: /* max 50 chars */ String = random.alphanumeric.take(20).mkString,
                         filename: /* max 400 chars */ String = random.alphanumeric.take(20).mkString,
                         fileextension: Option[/* max 8 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(8).mkString),
                         revision: /* bpchar, max 5 chars */ String = random.alphanumeric.take(5).mkString,
                         status: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                         documentsummary: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                         document: Option[TypoBytea] = None,
                         folderflag: Defaulted[Flag] = Defaulted.UseDefault,
                         changenumber: Defaulted[Int] = Defaulted.UseDefault,
                         rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                         modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                         documentnode: Defaulted[DocumentId] = Defaulted.UseDefault
                        ): ZIO[ZConnection, Throwable, DocumentRow] = (new DocumentRepoImpl).insert(new DocumentRowUnsaved(owner = owner, title = title, filename = filename, fileextension = fileextension, revision = revision, status = status, documentsummary = documentsummary, document = document, folderflag = folderflag, changenumber = changenumber, rowguid = rowguid, modifieddate = modifieddate, documentnode = documentnode))
  def productionIllustration(diagram: Option[TypoXml] = None,
                             illustrationid: Defaulted[IllustrationId] = Defaulted.UseDefault,
                             modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                            ): ZIO[ZConnection, Throwable, IllustrationRow] = (new IllustrationRepoImpl).insert(new IllustrationRowUnsaved(diagram = diagram, illustrationid = illustrationid, modifieddate = modifieddate))
  def productionLocation(name: Name = Name(random.alphanumeric.take(20).mkString),
                         locationid: Defaulted[LocationId] = Defaulted.UseDefault,
                         costrate: Defaulted[BigDecimal] = Defaulted.UseDefault,
                         availability: Defaulted[BigDecimal] = Defaulted.UseDefault,
                         modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                        ): ZIO[ZConnection, Throwable, LocationRow] = (new LocationRepoImpl).insert(new LocationRowUnsaved(name = name, locationid = locationid, costrate = costrate, availability = availability, modifieddate = modifieddate))
  def productionProduct(name: Name = Name(random.alphanumeric.take(20).mkString),
                        productnumber: /* max 25 chars */ String = random.alphanumeric.take(20).mkString,
                        color: Option[/* max 15 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(15).mkString),
                        safetystocklevel: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                        reorderpoint: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                        standardcost: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                        listprice: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                        size: Option[/* max 5 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(5).mkString),
                        sizeunitmeasurecode: Option[UnitmeasureId] = None,
                        weightunitmeasurecode: Option[UnitmeasureId] = None,
                        weight: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())),
                        daystomanufacture: Int = random.nextInt(),
                        productline: Option[/* bpchar, max 2 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(2).mkString),
                        `class`: Option[/* bpchar, max 2 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(2).mkString),
                        style: Option[/* bpchar, max 2 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(2).mkString),
                        productsubcategoryid: Option[ProductsubcategoryId] = None,
                        productmodelid: Option[ProductmodelId] = None,
                        sellstartdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                        sellenddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                        discontinueddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                        productid: Defaulted[ProductId] = Defaulted.UseDefault,
                        makeflag: Defaulted[Flag] = Defaulted.UseDefault,
                        finishedgoodsflag: Defaulted[Flag] = Defaulted.UseDefault,
                        rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                        modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                       ): ZIO[ZConnection, Throwable, ProductRow] = (new ProductRepoImpl).insert(new ProductRowUnsaved(name = name, productnumber = productnumber, color = color, safetystocklevel = safetystocklevel, reorderpoint = reorderpoint, standardcost = standardcost, listprice = listprice, size = size, sizeunitmeasurecode = sizeunitmeasurecode, weightunitmeasurecode = weightunitmeasurecode, weight = weight, daystomanufacture = daystomanufacture, productline = productline, `class` = `class`, style = style, productsubcategoryid = productsubcategoryid, productmodelid = productmodelid, sellstartdate = sellstartdate, sellenddate = sellenddate, discontinueddate = discontinueddate, productid = productid, makeflag = makeflag, finishedgoodsflag = finishedgoodsflag, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductcategory(name: Name = Name(random.alphanumeric.take(20).mkString),
                                productcategoryid: Defaulted[ProductcategoryId] = Defaulted.UseDefault,
                                rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                                modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                               ): ZIO[ZConnection, Throwable, ProductcategoryRow] = (new ProductcategoryRepoImpl).insert(new ProductcategoryRowUnsaved(name = name, productcategoryid = productcategoryid, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductcosthistory(productid: ProductId,
                                   startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                                   enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                                   standardcost: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                                   modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                  ): ZIO[ZConnection, Throwable, ProductcosthistoryRow] = (new ProductcosthistoryRepoImpl).insert(new ProductcosthistoryRowUnsaved(productid = productid, startdate = startdate, enddate = enddate, standardcost = standardcost, modifieddate = modifieddate))
  def productionProductdescription(description: /* max 400 chars */ String = random.alphanumeric.take(20).mkString,
                                   productdescriptionid: Defaulted[ProductdescriptionId] = Defaulted.UseDefault,
                                   rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                                   modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                  ): ZIO[ZConnection, Throwable, ProductdescriptionRow] = (new ProductdescriptionRepoImpl).insert(new ProductdescriptionRowUnsaved(description = description, productdescriptionid = productdescriptionid, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductdocument(productid: ProductId,
                                modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                                documentnode: Defaulted[DocumentId] = Defaulted.UseDefault
                               ): ZIO[ZConnection, Throwable, ProductdocumentRow] = (new ProductdocumentRepoImpl).insert(new ProductdocumentRowUnsaved(productid = productid, modifieddate = modifieddate, documentnode = documentnode))
  def productionProductinventory(productid: ProductId,
                                 locationid: LocationId,
                                 shelf: /* max 10 chars */ String = random.alphanumeric.take(10).mkString,
                                 bin: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                                 quantity: Defaulted[TypoShort] = Defaulted.UseDefault,
                                 rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                                 modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                ): ZIO[ZConnection, Throwable, ProductinventoryRow] = (new ProductinventoryRepoImpl).insert(new ProductinventoryRowUnsaved(productid = productid, locationid = locationid, shelf = shelf, bin = bin, quantity = quantity, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductlistpricehistory(productid: ProductId,
                                        startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                                        enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                                        listprice: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                                        modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                       ): ZIO[ZConnection, Throwable, ProductlistpricehistoryRow] = (new ProductlistpricehistoryRepoImpl).insert(new ProductlistpricehistoryRowUnsaved(productid = productid, startdate = startdate, enddate = enddate, listprice = listprice, modifieddate = modifieddate))
  def productionProductmodel(name: Name = Name(random.alphanumeric.take(20).mkString),
                             catalogdescription: Option[TypoXml] = None,
                             instructions: Option[TypoXml] = None,
                             productmodelid: Defaulted[ProductmodelId] = Defaulted.UseDefault,
                             rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                             modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                            ): ZIO[ZConnection, Throwable, ProductmodelRow] = (new ProductmodelRepoImpl).insert(new ProductmodelRowUnsaved(name = name, catalogdescription = catalogdescription, instructions = instructions, productmodelid = productmodelid, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductmodelillustration(productmodelid: ProductmodelId,
                                         illustrationid: IllustrationId,
                                         modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                        ): ZIO[ZConnection, Throwable, ProductmodelillustrationRow] = (new ProductmodelillustrationRepoImpl).insert(new ProductmodelillustrationRowUnsaved(productmodelid = productmodelid, illustrationid = illustrationid, modifieddate = modifieddate))
  def productionProductmodelproductdescriptionculture(productmodelid: ProductmodelId,
                                                      productdescriptionid: ProductdescriptionId,
                                                      cultureid: CultureId,
                                                      modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                                     ): ZIO[ZConnection, Throwable, ProductmodelproductdescriptioncultureRow] = (new ProductmodelproductdescriptioncultureRepoImpl).insert(new ProductmodelproductdescriptioncultureRowUnsaved(productmodelid = productmodelid, productdescriptionid = productdescriptionid, cultureid = cultureid, modifieddate = modifieddate))
  def productionProductphoto(thumbnailphoto: Option[TypoBytea] = None,
                             thumbnailphotofilename: Option[/* max 50 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                             largephoto: Option[TypoBytea] = None,
                             largephotofilename: Option[/* max 50 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                             productphotoid: Defaulted[ProductphotoId] = Defaulted.UseDefault,
                             modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                            ): ZIO[ZConnection, Throwable, ProductphotoRow] = (new ProductphotoRepoImpl).insert(new ProductphotoRowUnsaved(thumbnailphoto = thumbnailphoto, thumbnailphotofilename = thumbnailphotofilename, largephoto = largephoto, largephotofilename = largephotofilename, productphotoid = productphotoid, modifieddate = modifieddate))
  def productionProductproductphoto(productid: ProductId,
                                    productphotoid: ProductphotoId,
                                    primary: Defaulted[Flag] = Defaulted.UseDefault,
                                    modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                   ): ZIO[ZConnection, Throwable, ProductproductphotoRow] = (new ProductproductphotoRepoImpl).insert(new ProductproductphotoRowUnsaved(productid = productid, productphotoid = productphotoid, primary = primary, modifieddate = modifieddate))
  def productionProductreview(productid: ProductId,
                              reviewername: Name = Name(random.alphanumeric.take(20).mkString),
                              emailaddress: /* max 50 chars */ String = random.alphanumeric.take(20).mkString,
                              rating: Int = random.nextInt(),
                              comments: Option[/* max 3850 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                              productreviewid: Defaulted[ProductreviewId] = Defaulted.UseDefault,
                              reviewdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                              modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                             ): ZIO[ZConnection, Throwable, ProductreviewRow] = (new ProductreviewRepoImpl).insert(new ProductreviewRowUnsaved(productid = productid, reviewername = reviewername, emailaddress = emailaddress, rating = rating, comments = comments, productreviewid = productreviewid, reviewdate = reviewdate, modifieddate = modifieddate))
  def productionProductsubcategory(productcategoryid: ProductcategoryId,
                                   name: Name = Name(random.alphanumeric.take(20).mkString),
                                   productsubcategoryid: Defaulted[ProductsubcategoryId] = Defaulted.UseDefault,
                                   rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                                   modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                  ): ZIO[ZConnection, Throwable, ProductsubcategoryRow] = (new ProductsubcategoryRepoImpl).insert(new ProductsubcategoryRowUnsaved(productcategoryid = productcategoryid, name = name, productsubcategoryid = productsubcategoryid, rowguid = rowguid, modifieddate = modifieddate))
  def productionScrapreason(name: Name = Name(random.alphanumeric.take(20).mkString),
                            scrapreasonid: Defaulted[ScrapreasonId] = Defaulted.UseDefault,
                            modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                           ): ZIO[ZConnection, Throwable, ScrapreasonRow] = (new ScrapreasonRepoImpl).insert(new ScrapreasonRowUnsaved(name = name, scrapreasonid = scrapreasonid, modifieddate = modifieddate))
  def productionTransactionhistory(productid: ProductId,
                                   referenceorderid: Int = random.nextInt(),
                                   transactiontype: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString,
                                   quantity: Int = random.nextInt(),
                                   actualcost: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                                   transactionid: Defaulted[TransactionhistoryId] = Defaulted.UseDefault,
                                   referenceorderlineid: Defaulted[Int] = Defaulted.UseDefault,
                                   transactiondate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                                   modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                  ): ZIO[ZConnection, Throwable, TransactionhistoryRow] = (new TransactionhistoryRepoImpl).insert(new TransactionhistoryRowUnsaved(productid = productid, referenceorderid = referenceorderid, transactiontype = transactiontype, quantity = quantity, actualcost = actualcost, transactionid = transactionid, referenceorderlineid = referenceorderlineid, transactiondate = transactiondate, modifieddate = modifieddate))
  def productionTransactionhistoryarchive(transactionid: TransactionhistoryarchiveId = TransactionhistoryarchiveId(random.nextInt()),
                                          productid: Int = random.nextInt(),
                                          referenceorderid: Int = random.nextInt(),
                                          transactiontype: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString,
                                          quantity: Int = random.nextInt(),
                                          actualcost: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                                          referenceorderlineid: Defaulted[Int] = Defaulted.UseDefault,
                                          transactiondate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                                          modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                         ): ZIO[ZConnection, Throwable, TransactionhistoryarchiveRow] = (new TransactionhistoryarchiveRepoImpl).insert(new TransactionhistoryarchiveRowUnsaved(transactionid = transactionid, productid = productid, referenceorderid = referenceorderid, transactiontype = transactiontype, quantity = quantity, actualcost = actualcost, referenceorderlineid = referenceorderlineid, transactiondate = transactiondate, modifieddate = modifieddate))
  def productionUnitmeasure(unitmeasurecode: UnitmeasureId,
                            name: Name = Name(random.alphanumeric.take(20).mkString),
                            modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                           ): ZIO[ZConnection, Throwable, UnitmeasureRow] = (new UnitmeasureRepoImpl).insert(new UnitmeasureRowUnsaved(unitmeasurecode = unitmeasurecode, name = name, modifieddate = modifieddate))
  def productionWorkorder(productid: ProductId,
                          orderqty: Int = random.nextInt(),
                          scrappedqty: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                          startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                          enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                          duedate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                          scrapreasonid: Option[ScrapreasonId] = None,
                          workorderid: Defaulted[WorkorderId] = Defaulted.UseDefault,
                          modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                         ): ZIO[ZConnection, Throwable, WorkorderRow] = (new WorkorderRepoImpl).insert(new WorkorderRowUnsaved(productid = productid, orderqty = orderqty, scrappedqty = scrappedqty, startdate = startdate, enddate = enddate, duedate = duedate, scrapreasonid = scrapreasonid, workorderid = workorderid, modifieddate = modifieddate))
  def productionWorkorderrouting(workorderid: WorkorderId,
                                 locationid: LocationId,
                                 productid: Int = random.nextInt(),
                                 operationsequence: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                                 scheduledstartdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                                 scheduledenddate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                                 actualstartdate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                                 actualenddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                                 actualresourcehrs: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())),
                                 plannedcost: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                                 actualcost: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())),
                                 modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                ): ZIO[ZConnection, Throwable, WorkorderroutingRow] = (new WorkorderroutingRepoImpl).insert(new WorkorderroutingRowUnsaved(workorderid = workorderid, locationid = locationid, productid = productid, operationsequence = operationsequence, scheduledstartdate = scheduledstartdate, scheduledenddate = scheduledenddate, actualstartdate = actualstartdate, actualenddate = actualenddate, actualresourcehrs = actualresourcehrs, plannedcost = plannedcost, actualcost = actualcost, modifieddate = modifieddate))
  def publicFlaff(code: ShortText = ShortText(random.alphanumeric.take(20).mkString),
                  anotherCode: /* max 20 chars */ String = random.alphanumeric.take(20).mkString,
                  someNumber: Int = random.nextInt(),
                  specifier: ShortText = ShortText(random.alphanumeric.take(20).mkString),
                  parentspecifier: Option[ShortText] = if (random.nextBoolean()) None else Some(ShortText(random.alphanumeric.take(20).mkString))
                 ): ZIO[ZConnection, Throwable, FlaffRow] = (new FlaffRepoImpl).insert(new FlaffRow(code = code, anotherCode = anotherCode, someNumber = someNumber, specifier = specifier, parentspecifier = parentspecifier))
  def publicIdentityTest(name: IdentityTestId, defaultGenerated: Defaulted[Int] = Defaulted.UseDefault): ZIO[ZConnection, Throwable, IdentityTestRow] = (new IdentityTestRepoImpl).insert(new IdentityTestRowUnsaved(name = name, defaultGenerated = defaultGenerated))
  def publicPgtest(box: TypoBox,
                   bytea: TypoBytea,
                   circle: TypoCircle,
                   hstore: TypoHStore,
                   inet: TypoInet,
                   int2vector: TypoInt2Vector,
                   interval: TypoInterval,
                   json: TypoJson,
                   jsonb: TypoJsonb,
                   line: TypoLine,
                   lseg: TypoLineSegment,
                   money: TypoMoney,
                   path: TypoPath,
                   point: TypoPoint,
                   polygon: TypoPolygon,
                   uuid: TypoUUID,
                   vector: TypoVector,
                   xml: TypoXml,
                   boxes: Array[TypoBox],
                   circlees: Array[TypoCircle],
                   inetes: Array[TypoInet],
                   int2vectores: Array[TypoInt2Vector],
                   intervales: Array[TypoInterval],
                   jsones: Array[TypoJson],
                   jsonbes: Array[TypoJsonb],
                   linees: Array[TypoLine],
                   lseges: Array[TypoLineSegment],
                   moneyes: Array[TypoMoney],
                   pathes: Array[TypoPath],
                   pointes: Array[TypoPoint],
                   polygones: Array[TypoPolygon],
                   uuides: Array[TypoUUID],
                   xmles: Array[TypoXml],
                   bool: Boolean = random.nextBoolean(),
                   bpchar: /* bpchar, max 3 chars */ String = random.alphanumeric.take(3).mkString,
                   char: /* bpchar, max 1 chars */ String = random.alphanumeric.take(1).mkString,
                   date: TypoLocalDate = TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)),
                   float4: Float = random.nextFloat(),
                   float8: Double = random.nextDouble(),
                   int2: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                   int4: Int = random.nextInt(),
                   int8: Long = random.nextLong(),
                   mydomain: Mydomain = Mydomain(random.alphanumeric.take(20).mkString),
                   myenum: Myenum = Myenum.All(random.nextInt(Myenum.All.length)),
                   name: String = random.alphanumeric.take(20).mkString,
                   numeric: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                   text: String = random.alphanumeric.take(20).mkString,
                   time: TypoLocalTime = TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)),
                   timestamp: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                   timestampz: TypoInstant = TypoInstant(Instant.ofEpochMilli(1000000000000L + random.nextLong(1000000000000L))),
                   timez: TypoOffsetTime = TypoOffsetTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong).atOffset(ZoneOffset.ofHours(random.nextInt(24) - 12))),
                   varchar: String = random.alphanumeric.take(20).mkString,
                   bpchares: Array[/* bpchar */ String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString),
                   chares: Array[/* bpchar */ String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString),
                   datees: Array[TypoLocalDate] = Array.fill(random.nextInt(3))(TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong))),
                   float4es: Array[Float] = Array.fill(random.nextInt(3))(random.nextFloat()),
                   float8es: Array[Double] = Array.fill(random.nextInt(3))(random.nextDouble()),
                   int2es: Array[TypoShort] = Array.fill(random.nextInt(3))(TypoShort(random.nextInt(Short.MaxValue).toShort)),
                   int4es: Array[Int] = Array.fill(random.nextInt(3))(random.nextInt()),
                   int8es: Array[Long] = Array.fill(random.nextInt(3))(random.nextLong()),
                   mydomaines: Array[Mydomain] = Array.fill(random.nextInt(3))(Mydomain(random.alphanumeric.take(20).mkString)),
                   myenumes: Array[Myenum] = Array.fill(random.nextInt(3))(Myenum.All(random.nextInt(Myenum.All.length))),
                   namees: Array[String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString),
                   numerices: Array[BigDecimal] = Array.fill(random.nextInt(3))(BigDecimal.decimal(random.nextDouble())),
                   textes: Array[String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString),
                   timees: Array[TypoLocalTime] = Array.fill(random.nextInt(3))(TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                   timestampes: Array[TypoLocalDateTime] = Array.fill(random.nextInt(3))(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                   timestampzes: Array[TypoInstant] = Array.fill(random.nextInt(3))(TypoInstant(Instant.ofEpochMilli(1000000000000L + random.nextLong(1000000000000L)))),
                   timezes: Array[TypoOffsetTime] = Array.fill(random.nextInt(3))(TypoOffsetTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong).atOffset(ZoneOffset.ofHours(random.nextInt(24) - 12)))),
                   varchares: Array[String] = Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)
                  ): ZIO[ZConnection, Throwable, PgtestRow] = (new PgtestRepoImpl).insert(new PgtestRow(box = box, bytea = bytea, circle = circle, hstore = hstore, inet = inet, int2vector = int2vector, interval = interval, json = json, jsonb = jsonb, line = line, lseg = lseg, money = money, path = path, point = point, polygon = polygon, uuid = uuid, vector = vector, xml = xml, boxes = boxes, circlees = circlees, inetes = inetes, int2vectores = int2vectores, intervales = intervales, jsones = jsones, jsonbes = jsonbes, linees = linees, lseges = lseges, moneyes = moneyes, pathes = pathes, pointes = pointes, polygones = polygones, uuides = uuides, xmles = xmles, bool = bool, bpchar = bpchar, char = char, date = date, float4 = float4, float8 = float8, int2 = int2, int4 = int4, int8 = int8, mydomain = mydomain, myenum = myenum, name = name, numeric = numeric, text = text, time = time, timestamp = timestamp, timestampz = timestampz, timez = timez, varchar = varchar, bpchares = bpchares, chares = chares, datees = datees, float4es = float4es, float8es = float8es, int2es = int2es, int4es = int4es, int8es = int8es, mydomaines = mydomaines, myenumes = myenumes, namees = namees, numerices = numerices, textes = textes, timees = timees, timestampes = timestampes, timestampzes = timestampzes, timezes = timezes, varchares = varchares))
  def publicPgtestnull(bool: Option[Boolean] = if (random.nextBoolean()) None else Some(random.nextBoolean()),
                       box: Option[TypoBox] = None,
                       bpchar: Option[/* bpchar, max 3 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(3).mkString),
                       bytea: Option[TypoBytea] = None,
                       char: Option[/* bpchar, max 1 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(1).mkString),
                       circle: Option[TypoCircle] = None,
                       date: Option[TypoLocalDate] = if (random.nextBoolean()) None else Some(TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong))),
                       float4: Option[Float] = if (random.nextBoolean()) None else Some(random.nextFloat()),
                       float8: Option[Double] = if (random.nextBoolean()) None else Some(random.nextDouble()),
                       hstore: Option[TypoHStore] = None,
                       inet: Option[TypoInet] = None,
                       int2: Option[TypoShort] = if (random.nextBoolean()) None else Some(TypoShort(random.nextInt(Short.MaxValue).toShort)),
                       int2vector: Option[TypoInt2Vector] = None,
                       int4: Option[Int] = if (random.nextBoolean()) None else Some(random.nextInt()),
                       int8: Option[Long] = if (random.nextBoolean()) None else Some(random.nextLong()),
                       interval: Option[TypoInterval] = None,
                       json: Option[TypoJson] = None,
                       jsonb: Option[TypoJsonb] = None,
                       line: Option[TypoLine] = None,
                       lseg: Option[TypoLineSegment] = None,
                       money: Option[TypoMoney] = None,
                       mydomain: Option[Mydomain] = if (random.nextBoolean()) None else Some(Mydomain(random.alphanumeric.take(20).mkString)),
                       myenum: Option[Myenum] = if (random.nextBoolean()) None else Some(Myenum.All(random.nextInt(Myenum.All.length))),
                       name: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                       numeric: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())),
                       path: Option[TypoPath] = None,
                       point: Option[TypoPoint] = None,
                       polygon: Option[TypoPolygon] = None,
                       text: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                       time: Option[TypoLocalTime] = if (random.nextBoolean()) None else Some(TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                       timestamp: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                       timestampz: Option[TypoInstant] = if (random.nextBoolean()) None else Some(TypoInstant(Instant.ofEpochMilli(1000000000000L + random.nextLong(1000000000000L)))),
                       timez: Option[TypoOffsetTime] = if (random.nextBoolean()) None else Some(TypoOffsetTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong).atOffset(ZoneOffset.ofHours(random.nextInt(24) - 12)))),
                       uuid: Option[TypoUUID] = None,
                       varchar: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                       vector: Option[TypoVector] = None,
                       xml: Option[TypoXml] = None,
                       boxes: Option[Array[TypoBox]] = None,
                       bpchares: Option[Array[/* bpchar */ String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)),
                       chares: Option[Array[/* bpchar */ String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)),
                       circlees: Option[Array[TypoCircle]] = None,
                       datees: Option[Array[TypoLocalDate]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoLocalDate(LocalDate.ofEpochDay(random.nextInt(30000).toLong)))),
                       float4es: Option[Array[Float]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextFloat())),
                       float8es: Option[Array[Double]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextDouble())),
                       inetes: Option[Array[TypoInet]] = None,
                       int2es: Option[Array[TypoShort]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoShort(random.nextInt(Short.MaxValue).toShort))),
                       int2vectores: Option[Array[TypoInt2Vector]] = None,
                       int4es: Option[Array[Int]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextInt())),
                       int8es: Option[Array[Long]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.nextLong())),
                       intervales: Option[Array[TypoInterval]] = None,
                       jsones: Option[Array[TypoJson]] = None,
                       jsonbes: Option[Array[TypoJsonb]] = None,
                       linees: Option[Array[TypoLine]] = None,
                       lseges: Option[Array[TypoLineSegment]] = None,
                       moneyes: Option[Array[TypoMoney]] = None,
                       mydomaines: Option[Array[Mydomain]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(Mydomain(random.alphanumeric.take(20).mkString))),
                       myenumes: Option[Array[Myenum]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(Myenum.All(random.nextInt(Myenum.All.length)))),
                       namees: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)),
                       numerices: Option[Array[BigDecimal]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(BigDecimal.decimal(random.nextDouble()))),
                       pathes: Option[Array[TypoPath]] = None,
                       pointes: Option[Array[TypoPoint]] = None,
                       polygones: Option[Array[TypoPolygon]] = None,
                       textes: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)),
                       timees: Option[Array[TypoLocalTime]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoLocalTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                       timestampes: Option[Array[TypoLocalDateTime]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))))),
                       timestampzes: Option[Array[TypoInstant]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoInstant(Instant.ofEpochMilli(1000000000000L + random.nextLong(1000000000000L))))),
                       timezes: Option[Array[TypoOffsetTime]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(TypoOffsetTime(LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong).atOffset(ZoneOffset.ofHours(random.nextInt(24) - 12))))),
                       uuides: Option[Array[TypoUUID]] = None,
                       varchares: Option[Array[String]] = if (random.nextBoolean()) None else Some(Array.fill(random.nextInt(3))(random.alphanumeric.take(20).mkString)),
                       xmles: Option[Array[TypoXml]] = None
                      ): ZIO[ZConnection, Throwable, PgtestnullRow] = (new PgtestnullRepoImpl).insert(new PgtestnullRow(bool = bool, box = box, bpchar = bpchar, bytea = bytea, char = char, circle = circle, date = date, float4 = float4, float8 = float8, hstore = hstore, inet = inet, int2 = int2, int2vector = int2vector, int4 = int4, int8 = int8, interval = interval, json = json, jsonb = jsonb, line = line, lseg = lseg, money = money, mydomain = mydomain, myenum = myenum, name = name, numeric = numeric, path = path, point = point, polygon = polygon, text = text, time = time, timestamp = timestamp, timestampz = timestampz, timez = timez, uuid = uuid, varchar = varchar, vector = vector, xml = xml, boxes = boxes, bpchares = bpchares, chares = chares, circlees = circlees, datees = datees, float4es = float4es, float8es = float8es, inetes = inetes, int2es = int2es, int2vectores = int2vectores, int4es = int4es, int8es = int8es, intervales = intervales, jsones = jsones, jsonbes = jsonbes, linees = linees, lseges = lseges, moneyes = moneyes, mydomaines = mydomaines, myenumes = myenumes, namees = namees, numerices = numerices, pathes = pathes, pointes = pointes, polygones = polygones, textes = textes, timees = timees, timestampes = timestampes, timestampzes = timestampzes, timezes = timezes, uuides = uuides, varchares = varchares, xmles = xmles))
  def publicUsers(userId: UsersId,
                  email: TypoUnknownCitext,
                  name: String = random.alphanumeric.take(20).mkString,
                  lastName: Option[String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                  password: String = random.alphanumeric.take(20).mkString,
                  verifiedOn: Option[TypoInstant] = if (random.nextBoolean()) None else Some(TypoInstant(Instant.ofEpochMilli(1000000000000L + random.nextLong(1000000000000L)))),
                  createdAt: Defaulted[TypoInstant] = Defaulted.UseDefault
                 ): ZIO[ZConnection, Throwable, UsersRow] = (new UsersRepoImpl).insert(new UsersRowUnsaved(userId = userId, email = email, name = name, lastName = lastName, password = password, verifiedOn = verifiedOn, createdAt = createdAt))
  def purchasingProductvendor(productid: ProductId,
                              businessentityid: BusinessentityId,
                              unitmeasurecode: UnitmeasureId,
                              averageleadtime: Int = random.nextInt(),
                              standardprice: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                              lastreceiptcost: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())),
                              lastreceiptdate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                              minorderqty: Int = random.nextInt(),
                              maxorderqty: Int = random.nextInt(),
                              onorderqty: Option[Int] = if (random.nextBoolean()) None else Some(random.nextInt()),
                              modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                             ): ZIO[ZConnection, Throwable, ProductvendorRow] = (new ProductvendorRepoImpl).insert(new ProductvendorRowUnsaved(productid = productid, businessentityid = businessentityid, unitmeasurecode = unitmeasurecode, averageleadtime = averageleadtime, standardprice = standardprice, lastreceiptcost = lastreceiptcost, lastreceiptdate = lastreceiptdate, minorderqty = minorderqty, maxorderqty = maxorderqty, onorderqty = onorderqty, modifieddate = modifieddate))
  def purchasingPurchaseorderheader(employeeid: BusinessentityId,
                                    vendorid: BusinessentityId,
                                    shipmethodid: ShipmethodId,
                                    shipdate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                                    purchaseorderid: Defaulted[PurchaseorderheaderId] = Defaulted.UseDefault,
                                    revisionnumber: Defaulted[TypoShort] = Defaulted.UseDefault,
                                    status: Defaulted[TypoShort] = Defaulted.UseDefault,
                                    orderdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                                    subtotal: Defaulted[BigDecimal] = Defaulted.UseDefault,
                                    taxamt: Defaulted[BigDecimal] = Defaulted.UseDefault,
                                    freight: Defaulted[BigDecimal] = Defaulted.UseDefault,
                                    modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                   ): ZIO[ZConnection, Throwable, PurchaseorderheaderRow] = (new PurchaseorderheaderRepoImpl).insert(new PurchaseorderheaderRowUnsaved(employeeid = employeeid, vendorid = vendorid, shipmethodid = shipmethodid, shipdate = shipdate, purchaseorderid = purchaseorderid, revisionnumber = revisionnumber, status = status, orderdate = orderdate, subtotal = subtotal, taxamt = taxamt, freight = freight, modifieddate = modifieddate))
  def purchasingShipmethod(name: Name = Name(random.alphanumeric.take(20).mkString),
                           shipmethodid: Defaulted[ShipmethodId] = Defaulted.UseDefault,
                           shipbase: Defaulted[BigDecimal] = Defaulted.UseDefault,
                           shiprate: Defaulted[BigDecimal] = Defaulted.UseDefault,
                           rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                           modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                          ): ZIO[ZConnection, Throwable, ShipmethodRow] = (new ShipmethodRepoImpl).insert(new ShipmethodRowUnsaved(name = name, shipmethodid = shipmethodid, shipbase = shipbase, shiprate = shiprate, rowguid = rowguid, modifieddate = modifieddate))
  def purchasingVendor(businessentityid: BusinessentityId,
                       accountnumber: AccountNumber = AccountNumber(random.alphanumeric.take(20).mkString),
                       name: Name = Name(random.alphanumeric.take(20).mkString),
                       creditrating: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                       purchasingwebserviceurl: Option[/* max 1024 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                       preferredvendorstatus: Defaulted[Flag] = Defaulted.UseDefault,
                       activeflag: Defaulted[Flag] = Defaulted.UseDefault,
                       modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                      ): ZIO[ZConnection, Throwable, VendorRow] = (new VendorRepoImpl).insert(new VendorRowUnsaved(businessentityid = businessentityid, accountnumber = accountnumber, name = name, creditrating = creditrating, purchasingwebserviceurl = purchasingwebserviceurl, preferredvendorstatus = preferredvendorstatus, activeflag = activeflag, modifieddate = modifieddate))
  def salesCountryregioncurrency(countryregioncode: CountryregionId,
                                 currencycode: CurrencyId,
                                 modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                ): ZIO[ZConnection, Throwable, CountryregioncurrencyRow] = (new CountryregioncurrencyRepoImpl).insert(new CountryregioncurrencyRowUnsaved(countryregioncode = countryregioncode, currencycode = currencycode, modifieddate = modifieddate))
  def salesCreditcard(cardtype: /* max 50 chars */ String = random.alphanumeric.take(20).mkString,
                      cardnumber: /* max 25 chars */ String = random.alphanumeric.take(20).mkString,
                      expmonth: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                      expyear: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                      creditcardid: Defaulted[/* user-picked */ CustomCreditcardId] = Defaulted.UseDefault,
                      modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                     ): ZIO[ZConnection, Throwable, CreditcardRow] = (new CreditcardRepoImpl).insert(new CreditcardRowUnsaved(cardtype = cardtype, cardnumber = cardnumber, expmonth = expmonth, expyear = expyear, creditcardid = creditcardid, modifieddate = modifieddate))
  def salesCurrency(currencycode: CurrencyId,
                    name: Name = Name(random.alphanumeric.take(20).mkString),
                    modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                   ): ZIO[ZConnection, Throwable, CurrencyRow] = (new CurrencyRepoImpl).insert(new CurrencyRowUnsaved(currencycode = currencycode, name = name, modifieddate = modifieddate))
  def salesCurrencyrate(fromcurrencycode: CurrencyId,
                        tocurrencycode: CurrencyId,
                        currencyratedate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                        averagerate: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                        endofdayrate: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                        currencyrateid: Defaulted[CurrencyrateId] = Defaulted.UseDefault,
                        modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                       ): ZIO[ZConnection, Throwable, CurrencyrateRow] = (new CurrencyrateRepoImpl).insert(new CurrencyrateRowUnsaved(fromcurrencycode = fromcurrencycode, tocurrencycode = tocurrencycode, currencyratedate = currencyratedate, averagerate = averagerate, endofdayrate = endofdayrate, currencyrateid = currencyrateid, modifieddate = modifieddate))
  def salesCustomer(personid: Option[BusinessentityId] = None,
                    storeid: Option[BusinessentityId] = None,
                    territoryid: Option[SalesterritoryId] = None,
                    customerid: Defaulted[CustomerId] = Defaulted.UseDefault,
                    rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                    modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                   ): ZIO[ZConnection, Throwable, CustomerRow] = (new CustomerRepoImpl).insert(new CustomerRowUnsaved(personid = personid, storeid = storeid, territoryid = territoryid, customerid = customerid, rowguid = rowguid, modifieddate = modifieddate))
  def salesPersoncreditcard(businessentityid: BusinessentityId,
                            creditcardid: /* user-picked */ CustomCreditcardId,
                            modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                           ): ZIO[ZConnection, Throwable, PersoncreditcardRow] = (new PersoncreditcardRepoImpl).insert(new PersoncreditcardRowUnsaved(businessentityid = businessentityid, creditcardid = creditcardid, modifieddate = modifieddate))
  def salesSalesorderdetail(SpecialofferproductId: SpecialofferproductId,
                            salesorderid: SalesorderheaderId,
                            carriertrackingnumber: Option[/* max 25 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                            orderqty: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                            unitprice: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                            salesorderdetailid: Defaulted[Int] = Defaulted.UseDefault,
                            unitpricediscount: Defaulted[BigDecimal] = Defaulted.UseDefault,
                            rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                            modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                           ): ZIO[ZConnection, Throwable, SalesorderdetailRow] = (new SalesorderdetailRepoImpl).insert(new SalesorderdetailRowUnsaved(salesorderid = salesorderid, carriertrackingnumber = carriertrackingnumber, orderqty = orderqty, productid = SpecialofferproductId.productid, specialofferid = SpecialofferproductId.specialofferid, unitprice = unitprice, salesorderdetailid = salesorderdetailid, unitpricediscount = unitpricediscount, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesorderheader(customerid: CustomerId,
                            billtoaddressid: AddressId,
                            shiptoaddressid: AddressId,
                            shipmethodid: ShipmethodId,
                            duedate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                            shipdate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                            purchaseordernumber: Option[OrderNumber] = if (random.nextBoolean()) None else Some(OrderNumber(random.alphanumeric.take(20).mkString)),
                            accountnumber: Option[AccountNumber] = if (random.nextBoolean()) None else Some(AccountNumber(random.alphanumeric.take(20).mkString)),
                            salespersonid: Option[BusinessentityId] = None,
                            territoryid: Option[SalesterritoryId] = None,
                            creditcardid: Option[/* user-picked */ CustomCreditcardId] = None,
                            creditcardapprovalcode: Option[/* max 15 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(15).mkString),
                            currencyrateid: Option[CurrencyrateId] = None,
                            totaldue: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())),
                            comment: Option[/* max 128 chars */ String] = if (random.nextBoolean()) None else Some(random.alphanumeric.take(20).mkString),
                            salesorderid: Defaulted[SalesorderheaderId] = Defaulted.UseDefault,
                            revisionnumber: Defaulted[TypoShort] = Defaulted.UseDefault,
                            orderdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                            status: Defaulted[TypoShort] = Defaulted.UseDefault,
                            onlineorderflag: Defaulted[Flag] = Defaulted.UseDefault,
                            subtotal: Defaulted[BigDecimal] = Defaulted.UseDefault,
                            taxamt: Defaulted[BigDecimal] = Defaulted.UseDefault,
                            freight: Defaulted[BigDecimal] = Defaulted.UseDefault,
                            rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                            modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                           ): ZIO[ZConnection, Throwable, SalesorderheaderRow] = (new SalesorderheaderRepoImpl).insert(new SalesorderheaderRowUnsaved(customerid = customerid, billtoaddressid = billtoaddressid, shiptoaddressid = shiptoaddressid, shipmethodid = shipmethodid, duedate = duedate, shipdate = shipdate, purchaseordernumber = purchaseordernumber, accountnumber = accountnumber, salespersonid = salespersonid, territoryid = territoryid, creditcardid = creditcardid, creditcardapprovalcode = creditcardapprovalcode, currencyrateid = currencyrateid, totaldue = totaldue, comment = comment, salesorderid = salesorderid, revisionnumber = revisionnumber, orderdate = orderdate, status = status, onlineorderflag = onlineorderflag, subtotal = subtotal, taxamt = taxamt, freight = freight, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesorderheadersalesreason(salesorderid: SalesorderheaderId,
                                       salesreasonid: SalesreasonId,
                                       modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                      ): ZIO[ZConnection, Throwable, SalesorderheadersalesreasonRow] = (new SalesorderheadersalesreasonRepoImpl).insert(new SalesorderheadersalesreasonRowUnsaved(salesorderid = salesorderid, salesreasonid = salesreasonid, modifieddate = modifieddate))
  def salesSalesperson(businessentityid: BusinessentityId,
                       territoryid: Option[SalesterritoryId] = None,
                       salesquota: Option[BigDecimal] = if (random.nextBoolean()) None else Some(BigDecimal.decimal(random.nextDouble())),
                       bonus: Defaulted[BigDecimal] = Defaulted.UseDefault,
                       commissionpct: Defaulted[BigDecimal] = Defaulted.UseDefault,
                       salesytd: Defaulted[BigDecimal] = Defaulted.UseDefault,
                       saleslastyear: Defaulted[BigDecimal] = Defaulted.UseDefault,
                       rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                       modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                      ): ZIO[ZConnection, Throwable, SalespersonRow] = (new SalespersonRepoImpl).insert(new SalespersonRowUnsaved(businessentityid = businessentityid, territoryid = territoryid, salesquota = salesquota, bonus = bonus, commissionpct = commissionpct, salesytd = salesytd, saleslastyear = saleslastyear, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalespersonquotahistory(businessentityid: BusinessentityId,
                                   quotadate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                                   salesquota: BigDecimal = BigDecimal.decimal(random.nextDouble()),
                                   rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                                   modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                  ): ZIO[ZConnection, Throwable, SalespersonquotahistoryRow] = (new SalespersonquotahistoryRepoImpl).insert(new SalespersonquotahistoryRowUnsaved(businessentityid = businessentityid, quotadate = quotadate, salesquota = salesquota, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesreason(name: Name = Name(random.alphanumeric.take(20).mkString),
                       reasontype: Name = Name(random.alphanumeric.take(20).mkString),
                       salesreasonid: Defaulted[SalesreasonId] = Defaulted.UseDefault,
                       modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                      ): ZIO[ZConnection, Throwable, SalesreasonRow] = (new SalesreasonRepoImpl).insert(new SalesreasonRowUnsaved(name = name, reasontype = reasontype, salesreasonid = salesreasonid, modifieddate = modifieddate))
  def salesSalestaxrate(stateprovinceid: StateprovinceId,
                        taxtype: TypoShort = TypoShort(random.nextInt(Short.MaxValue).toShort),
                        name: Name = Name(random.alphanumeric.take(20).mkString),
                        salestaxrateid: Defaulted[SalestaxrateId] = Defaulted.UseDefault,
                        taxrate: Defaulted[BigDecimal] = Defaulted.UseDefault,
                        rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                        modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                       ): ZIO[ZConnection, Throwable, SalestaxrateRow] = (new SalestaxrateRepoImpl).insert(new SalestaxrateRowUnsaved(stateprovinceid = stateprovinceid, taxtype = taxtype, name = name, salestaxrateid = salestaxrateid, taxrate = taxrate, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesterritory(countryregioncode: CountryregionId,
                          name: Name = Name(random.alphanumeric.take(20).mkString),
                          group: /* max 50 chars */ String = random.alphanumeric.take(20).mkString,
                          territoryid: Defaulted[SalesterritoryId] = Defaulted.UseDefault,
                          salesytd: Defaulted[BigDecimal] = Defaulted.UseDefault,
                          saleslastyear: Defaulted[BigDecimal] = Defaulted.UseDefault,
                          costytd: Defaulted[BigDecimal] = Defaulted.UseDefault,
                          costlastyear: Defaulted[BigDecimal] = Defaulted.UseDefault,
                          rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                          modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                         ): ZIO[ZConnection, Throwable, SalesterritoryRow] = (new SalesterritoryRepoImpl).insert(new SalesterritoryRowUnsaved(countryregioncode = countryregioncode, name = name, group = group, territoryid = territoryid, salesytd = salesytd, saleslastyear = saleslastyear, costytd = costytd, costlastyear = costlastyear, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesterritoryhistory(businessentityid: BusinessentityId,
                                 territoryid: SalesterritoryId,
                                 startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                                 enddate: Option[TypoLocalDateTime] = if (random.nextBoolean()) None else Some(TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong)))),
                                 rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                                 modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                                ): ZIO[ZConnection, Throwable, SalesterritoryhistoryRow] = (new SalesterritoryhistoryRepoImpl).insert(new SalesterritoryhistoryRowUnsaved(businessentityid = businessentityid, territoryid = territoryid, startdate = startdate, enddate = enddate, rowguid = rowguid, modifieddate = modifieddate))
  def salesShoppingcartitem(productid: ProductId,
                            shoppingcartid: /* max 50 chars */ String = random.alphanumeric.take(20).mkString,
                            shoppingcartitemid: Defaulted[ShoppingcartitemId] = Defaulted.UseDefault,
                            quantity: Defaulted[Int] = Defaulted.UseDefault,
                            datecreated: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
                            modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                           ): ZIO[ZConnection, Throwable, ShoppingcartitemRow] = (new ShoppingcartitemRepoImpl).insert(new ShoppingcartitemRowUnsaved(productid = productid, shoppingcartid = shoppingcartid, shoppingcartitemid = shoppingcartitemid, quantity = quantity, datecreated = datecreated, modifieddate = modifieddate))
  def salesSpecialoffer(description: /* max 255 chars */ String = random.alphanumeric.take(20).mkString,
                        `type`: /* max 50 chars */ String = random.alphanumeric.take(20).mkString,
                        category: /* max 50 chars */ String = random.alphanumeric.take(20).mkString,
                        startdate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                        enddate: TypoLocalDateTime = TypoLocalDateTime(LocalDateTime.of(LocalDate.ofEpochDay(random.nextInt(30000).toLong), LocalTime.ofSecondOfDay(random.nextInt(24 * 60 * 60).toLong))),
                        maxqty: Option[Int] = if (random.nextBoolean()) None else Some(random.nextInt()),
                        specialofferid: Defaulted[SpecialofferId] = Defaulted.UseDefault,
                        discountpct: Defaulted[BigDecimal] = Defaulted.UseDefault,
                        minqty: Defaulted[Int] = Defaulted.UseDefault,
                        rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                        modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                       ): ZIO[ZConnection, Throwable, SpecialofferRow] = (new SpecialofferRepoImpl).insert(new SpecialofferRowUnsaved(description = description, `type` = `type`, category = category, startdate = startdate, enddate = enddate, maxqty = maxqty, specialofferid = specialofferid, discountpct = discountpct, minqty = minqty, rowguid = rowguid, modifieddate = modifieddate))
  def salesSpecialofferproduct(specialofferid: SpecialofferId,
                               productid: ProductId,
                               rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                               modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                              ): ZIO[ZConnection, Throwable, SpecialofferproductRow] = (new SpecialofferproductRepoImpl).insert(new SpecialofferproductRowUnsaved(specialofferid = specialofferid, productid = productid, rowguid = rowguid, modifieddate = modifieddate))
  def salesStore(businessentityid: BusinessentityId,
                 name: Name = Name(random.alphanumeric.take(20).mkString),
                 salespersonid: Option[BusinessentityId] = None,
                 demographics: Option[TypoXml] = None,
                 rowguid: Defaulted[TypoUUID] = Defaulted.UseDefault,
                 modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
                ): ZIO[ZConnection, Throwable, StoreRow] = (new StoreRepoImpl).insert(new StoreRowUnsaved(businessentityid = businessentityid, name = name, salespersonid = salespersonid, demographics = demographics, rowguid = rowguid, modifieddate = modifieddate))
}