/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package businessentitycontact

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.contacttype.ContacttypeId
import zio.json.DeriveJsonDecoder
import zio.json.DeriveJsonEncoder
import zio.json.JsonDecoder

/** Type for the composite primary key of table `person.businessentitycontact` */
case class BusinessentitycontactId(businessentityid: BusinessentityId, personid: BusinessentityId, contacttypeid: ContacttypeId)
object BusinessentitycontactId {
  implicit lazy val decoder: JsonDecoder[BusinessentitycontactId] = DeriveJsonDecoder.gen[BusinessentitycontactId]
  implicit lazy val decoder: JsonDecoder[BusinessentitycontactId] = DeriveJsonEncoder.gen[BusinessentitycontactId]
  implicit lazy val ordering: Ordering[BusinessentitycontactId] = Ordering.by(x => (x.businessentityid, x.personid, x.contacttypeid))
}
