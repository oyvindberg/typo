/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package personphone

import adventureworks.customtypes.Defaulted
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PersonphoneRepoImpl extends PersonphoneRepo {
  override def delete(compositeId: PersonphoneId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from person.personphone where "businessentityid" = ??? AND "phonenumber" = ??? AND "phonenumbertypeid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PersonphoneFields, PersonphoneRow] = {
    DeleteBuilder("person.personphone", PersonphoneFields)
  }
  override def insert(unsaved: PersonphoneRow): ZIO[ZConnection, Throwable, PersonphoneRow] = {
    sql"""insert into person.personphone("businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate")
          values (???::int4, ???::varchar, ???::int4, ???::timestamp)
          returning "businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate"::text
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: PersonphoneRowUnsaved): ZIO[ZConnection, Throwable, PersonphoneRow] = {
    val fs = List(
      Some((SqlFragment(s""""businessentityid""""), sql"???::int4")),
      Some((SqlFragment(s""""phonenumber""""), sql"???::varchar")),
      Some((SqlFragment(s""""phonenumbertypeid""""), sql"???::int4")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into person.personphone default values
            returning "businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate"::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into person.personphone(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate"::text
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[PersonphoneFields, PersonphoneRow] = {
    SelectBuilderSql("person.personphone", PersonphoneFields, PersonphoneRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PersonphoneRow] = {
    sql"""select "businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate"::text from person.personphone""".query[PersonphoneRow].selectStream
  }
  override def selectById(compositeId: PersonphoneId): ZIO[ZConnection, Throwable, Option[PersonphoneRow]] = {
    sql"""select "businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate"::text from person.personphone where "businessentityid" = ??? AND "phonenumber" = ??? AND "phonenumbertypeid" = ???""".query[PersonphoneRow].selectOne
  }
  override def update(row: PersonphoneRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update person.personphone
          set "modifieddate" = ???::timestamp
          where "businessentityid" = ??? AND "phonenumber" = ??? AND "phonenumbertypeid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PersonphoneFields, PersonphoneRow] = {
    UpdateBuilder("person.personphone", PersonphoneFields, PersonphoneRow.read)
  }
  override def upsert(unsaved: PersonphoneRow): ZIO[ZConnection, Throwable, PersonphoneRow] = {
    sql"""insert into person.personphone("businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate")
          values (
            ???::int4,
            ???::varchar,
            ???::int4,
            ???::timestamp
          )
          on conflict ("businessentityid", "phonenumber", "phonenumbertypeid")
          do update set
            "modifieddate" = EXCLUDED."modifieddate"
          returning "businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate"::text
       """.query(???).unique
  }
}
