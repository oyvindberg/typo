/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package password

import adventureworks.customtypes.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PasswordRepoImpl extends PasswordRepo {
  override def delete(businessentityid: BusinessentityId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from person.password where "businessentityid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PasswordFields, PasswordRow] = {
    DeleteBuilder("person.password", PasswordFields)
  }
  override def insert(unsaved: PasswordRow): ZIO[ZConnection, Throwable, PasswordRow] = {
    sql"""insert into person.password("businessentityid", "passwordhash", "passwordsalt", "rowguid", "modifieddate")
          values (???::int4, ???, ???, ???::uuid, ???::timestamp)
          returning "businessentityid", "passwordhash", "passwordsalt", "rowguid", "modifieddate"::text
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: PasswordRowUnsaved): ZIO[ZConnection, Throwable, PasswordRow] = {
    val fs = List(
      Some((SqlFragment(s""""businessentityid""""), sql"???::int4")),
      Some((SqlFragment(s""""passwordhash""""), sql"???")),
      Some((SqlFragment(s""""passwordsalt""""), sql"???")),
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""rowguid""""), sql"???::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into person.password default values
            returning "businessentityid", "passwordhash", "passwordsalt", "rowguid", "modifieddate"::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into person.password(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "businessentityid", "passwordhash", "passwordsalt", "rowguid", "modifieddate"::text
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[PasswordFields, PasswordRow] = {
    SelectBuilderSql("person.password", PasswordFields, PasswordRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PasswordRow] = {
    sql"""select "businessentityid", "passwordhash", "passwordsalt", "rowguid", "modifieddate"::text from person.password""".query[PasswordRow].selectStream
  }
  override def selectById(businessentityid: BusinessentityId): ZIO[ZConnection, Throwable, Option[PasswordRow]] = {
    sql"""select "businessentityid", "passwordhash", "passwordsalt", "rowguid", "modifieddate"::text from person.password where "businessentityid" = ???""".query[PasswordRow].selectOne
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): ZStream[ZConnection, Throwable, PasswordRow] = {
    sql"""select "businessentityid", "passwordhash", "passwordsalt", "rowguid", "modifieddate"::text from person.password where "businessentityid" = ANY(${businessentityids})""".query[PasswordRow].selectStream
  }
  override def update(row: PasswordRow): ZIO[ZConnection, Throwable, Boolean] = {
    val businessentityid = row.businessentityid
    sql"""update person.password
          set "passwordhash" = ???,
              "passwordsalt" = ???,
              "rowguid" = ???::uuid,
              "modifieddate" = ???::timestamp
          where "businessentityid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PasswordFields, PasswordRow] = {
    UpdateBuilder("person.password", PasswordFields, PasswordRow.read)
  }
  override def upsert(unsaved: PasswordRow): ZIO[ZConnection, Throwable, PasswordRow] = {
    sql"""insert into person.password("businessentityid", "passwordhash", "passwordsalt", "rowguid", "modifieddate")
          values (
            ???::int4,
            ???,
            ???,
            ???::uuid,
            ???::timestamp
          )
          on conflict ("businessentityid")
          do update set
            "passwordhash" = EXCLUDED."passwordhash",
            "passwordsalt" = EXCLUDED."passwordsalt",
            "rowguid" = EXCLUDED."rowguid",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "businessentityid", "passwordhash", "passwordsalt", "rowguid", "modifieddate"::text
       """.query(???).unique
  }
}
