/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package stateprovince

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Flag
import adventureworks.public.Name
import adventureworks.sales.salesterritory.SalesterritoryId
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object StateprovinceRepoImpl extends StateprovinceRepo {
  override def delete(stateprovinceid: StateprovinceId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from person.stateprovince where "stateprovinceid" = ${Segment.paramSegment(stateprovinceid)(Setter[StateprovinceId])}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[StateprovinceFields, StateprovinceRow] = {
    DeleteBuilder("person.stateprovince", StateprovinceFields)
  }
  override def insert(unsaved: StateprovinceRow): ZIO[ZConnection, Throwable, StateprovinceRow] = {
    sql"""insert into person.stateprovince("stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate")
          values (${Segment.paramSegment(unsaved.stateprovinceid)(Setter[StateprovinceId])}::int4, ${Segment.paramSegment(unsaved.stateprovincecode)(Setter.stringSetter)}::bpchar, ${Segment.paramSegment(unsaved.countryregioncode)(Setter[CountryregionId])}, ${Segment.paramSegment(unsaved.isonlystateprovinceflag)(Setter[Flag])}::bool, ${Segment.paramSegment(unsaved.name)(Setter[Name])}::varchar, ${Segment.paramSegment(unsaved.territoryid)(Setter[SalesterritoryId])}::int4, ${Segment.paramSegment(unsaved.rowguid)(Setter[TypoUUID])}::uuid, ${Segment.paramSegment(unsaved.modifieddate)(Setter[TypoLocalDateTime])}::timestamp)
          returning "stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate"::text
       """.insertReturning(StateprovinceRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insert(unsaved: StateprovinceRowUnsaved): ZIO[ZConnection, Throwable, StateprovinceRow] = {
    val fs = List(
      Some((sql""""stateprovincecode"""", sql"${Segment.paramSegment(unsaved.stateprovincecode)(Setter.stringSetter)}::bpchar")),
      Some((sql""""countryregioncode"""", sql"${Segment.paramSegment(unsaved.countryregioncode)(Setter[CountryregionId])}")),
      Some((sql""""name"""", sql"${Segment.paramSegment(unsaved.name)(Setter[Name])}::varchar")),
      Some((sql""""territoryid"""", sql"${Segment.paramSegment(unsaved.territoryid)(Setter[SalesterritoryId])}::int4")),
      unsaved.stateprovinceid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""stateprovinceid"""", sql"${Segment.paramSegment(value: StateprovinceId)(Setter[StateprovinceId])}::int4"))
      },
      unsaved.isonlystateprovinceflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""isonlystateprovinceflag"""", sql"${Segment.paramSegment(value: Flag)(Setter[Flag])}::bool"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""rowguid"""", sql"${Segment.paramSegment(value: TypoUUID)(Setter[TypoUUID])}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""modifieddate"""", sql"${Segment.paramSegment(value: TypoLocalDateTime)(Setter[TypoLocalDateTime])}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into person.stateprovince default values
            returning "stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate"::text
         """
    } else {
      val names  = fs.map { case (n, _) => n }.mkFragment(SqlFragment(", "))
      val values = fs.map { case (_, f) => f }.mkFragment(SqlFragment(", "))
      sql"""insert into person.stateprovince($names) values ($values) returning "stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate"::text"""
    }
    q.insertReturning(StateprovinceRow.jdbcDecoder).map(_.updatedKeys.head)
    
  }
  override def select: SelectBuilder[StateprovinceFields, StateprovinceRow] = {
    SelectBuilderSql("person.stateprovince", StateprovinceFields, StateprovinceRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, StateprovinceRow] = {
    sql"""select "stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate"::text from person.stateprovince""".query(StateprovinceRow.jdbcDecoder).selectStream
  }
  override def selectById(stateprovinceid: StateprovinceId): ZIO[ZConnection, Throwable, Option[StateprovinceRow]] = {
    sql"""select "stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate"::text from person.stateprovince where "stateprovinceid" = ${Segment.paramSegment(stateprovinceid)(Setter[StateprovinceId])}""".query(StateprovinceRow.jdbcDecoder).selectOne
  }
  override def selectByIds(stateprovinceids: Array[StateprovinceId]): ZStream[ZConnection, Throwable, StateprovinceRow] = {
    sql"""select "stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate"::text from person.stateprovince where "stateprovinceid" = ANY(${Segment.paramSegment(stateprovinceids)(StateprovinceId.arraySetter)})""".query(StateprovinceRow.jdbcDecoder).selectStream
  }
  override def update(row: StateprovinceRow): ZIO[ZConnection, Throwable, Boolean] = {
    val stateprovinceid = row.stateprovinceid
    sql"""update person.stateprovince
          set "stateprovincecode" = ${Segment.paramSegment(row.stateprovincecode)(Setter.stringSetter)}::bpchar,
              "countryregioncode" = ${Segment.paramSegment(row.countryregioncode)(Setter[CountryregionId])},
              "isonlystateprovinceflag" = ${Segment.paramSegment(row.isonlystateprovinceflag)(Setter[Flag])}::bool,
              "name" = ${Segment.paramSegment(row.name)(Setter[Name])}::varchar,
              "territoryid" = ${Segment.paramSegment(row.territoryid)(Setter[SalesterritoryId])}::int4,
              "rowguid" = ${Segment.paramSegment(row.rowguid)(Setter[TypoUUID])}::uuid,
              "modifieddate" = ${Segment.paramSegment(row.modifieddate)(Setter[TypoLocalDateTime])}::timestamp
          where "stateprovinceid" = ${Segment.paramSegment(stateprovinceid)(Setter[StateprovinceId])}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[StateprovinceFields, StateprovinceRow] = {
    UpdateBuilder("person.stateprovince", StateprovinceFields, StateprovinceRow.jdbcDecoder)
  }
  override def upsert(unsaved: StateprovinceRow): ZIO[ZConnection, Throwable, UpdateResult[StateprovinceRow]] = {
    sql"""insert into person.stateprovince("stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate")
          values (
            ${Segment.paramSegment(unsaved.stateprovinceid)(Setter[StateprovinceId])}::int4,
            ${Segment.paramSegment(unsaved.stateprovincecode)(Setter.stringSetter)}::bpchar,
            ${Segment.paramSegment(unsaved.countryregioncode)(Setter[CountryregionId])},
            ${Segment.paramSegment(unsaved.isonlystateprovinceflag)(Setter[Flag])}::bool,
            ${Segment.paramSegment(unsaved.name)(Setter[Name])}::varchar,
            ${Segment.paramSegment(unsaved.territoryid)(Setter[SalesterritoryId])}::int4,
            ${Segment.paramSegment(unsaved.rowguid)(Setter[TypoUUID])}::uuid,
            ${Segment.paramSegment(unsaved.modifieddate)(Setter[TypoLocalDateTime])}::timestamp
          )
          on conflict ("stateprovinceid")
          do update set
            "stateprovincecode" = EXCLUDED."stateprovincecode",
            "countryregioncode" = EXCLUDED."countryregioncode",
            "isonlystateprovinceflag" = EXCLUDED."isonlystateprovinceflag",
            "name" = EXCLUDED."name",
            "territoryid" = EXCLUDED."territoryid",
            "rowguid" = EXCLUDED."rowguid",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate"::text""".insertReturning(StateprovinceRow.jdbcDecoder)
  }
}
