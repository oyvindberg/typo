/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package addresstype

import typo.dsl.Bijection
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Type for the primary key of table `person.addresstype` */
case class AddresstypeId(value: Int) extends AnyVal
object AddresstypeId {
  implicit lazy val bijection: Bijection[AddresstypeId, Int] = Bijection[AddresstypeId, Int](_.value)(AddresstypeId.apply)
  implicit lazy val decoder: JsonDecoder[AddresstypeId] = JsonDecoder.int.map(AddresstypeId.apply)
  implicit lazy val encoder: JsonEncoder[AddresstypeId] = JsonEncoder.int.contramap(_.value)
  implicit lazy val ordering: Ordering[AddresstypeId] = Ordering.by(_.value)
}
