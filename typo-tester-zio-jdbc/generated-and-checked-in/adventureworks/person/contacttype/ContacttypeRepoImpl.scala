/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package contacttype

import adventureworks.customtypes.Defaulted
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object ContacttypeRepoImpl extends ContacttypeRepo {
  override def delete(contacttypeid: ContacttypeId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from person.contacttype where "contacttypeid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[ContacttypeFields, ContacttypeRow] = {
    DeleteBuilder("person.contacttype", ContacttypeFields)
  }
  override def insert(unsaved: ContacttypeRow): ZIO[ZConnection, Throwable, ContacttypeRow] = {
    sql"""insert into person.contacttype("contacttypeid", "name", "modifieddate")
          values (???::int4, ???::varchar, ???::timestamp)
          returning "contacttypeid", "name", "modifieddate"::text
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: ContacttypeRowUnsaved): ZIO[ZConnection, Throwable, ContacttypeRow] = {
    val fs = List(
      Some((SqlFragment(s""""name""""), sql"???::varchar")),
      unsaved.contacttypeid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""contacttypeid""""), sql"???::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into person.contacttype default values
            returning "contacttypeid", "name", "modifieddate"::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into person.contacttype(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "contacttypeid", "name", "modifieddate"::text
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[ContacttypeFields, ContacttypeRow] = {
    SelectBuilderSql("person.contacttype", ContacttypeFields, ContacttypeRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, ContacttypeRow] = {
    sql"""select "contacttypeid", "name", "modifieddate"::text from person.contacttype""".query[ContacttypeRow].selectStream
  }
  override def selectById(contacttypeid: ContacttypeId): ZIO[ZConnection, Throwable, Option[ContacttypeRow]] = {
    sql"""select "contacttypeid", "name", "modifieddate"::text from person.contacttype where "contacttypeid" = ???""".query[ContacttypeRow].selectOne
  }
  override def selectByIds(contacttypeids: Array[ContacttypeId]): ZStream[ZConnection, Throwable, ContacttypeRow] = {
    sql"""select "contacttypeid", "name", "modifieddate"::text from person.contacttype where "contacttypeid" = ANY(${contacttypeids})""".query[ContacttypeRow].selectStream
  }
  override def update(row: ContacttypeRow): ZIO[ZConnection, Throwable, Boolean] = {
    val contacttypeid = row.contacttypeid
    sql"""update person.contacttype
          set "name" = ???::varchar,
              "modifieddate" = ???::timestamp
          where "contacttypeid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[ContacttypeFields, ContacttypeRow] = {
    UpdateBuilder("person.contacttype", ContacttypeFields, ContacttypeRow.read)
  }
  override def upsert(unsaved: ContacttypeRow): ZIO[ZConnection, Throwable, ContacttypeRow] = {
    sql"""insert into person.contacttype("contacttypeid", "name", "modifieddate")
          values (
            ???::int4,
            ???::varchar,
            ???::timestamp
          )
          on conflict ("contacttypeid")
          do update set
            "name" = EXCLUDED."name",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "contacttypeid", "name", "modifieddate"::text
       """.query(???).unique
  }
}
