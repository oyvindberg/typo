/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package phonenumbertype

import adventureworks.Text
import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.public.Name
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `person.phonenumbertype` which has not been persisted yet */
case class PhonenumbertypeRowUnsaved(
  /** Name of the telephone number type */
  name: Name,
  /** Default: nextval('person.phonenumbertype_phonenumbertypeid_seq'::regclass)
      Primary key for telephone number type records. */
  phonenumbertypeid: Defaulted[PhonenumbertypeId] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(phonenumbertypeidDefault: => PhonenumbertypeId, modifieddateDefault: => TypoLocalDateTime): PhonenumbertypeRow =
    PhonenumbertypeRow(
      name = name,
      phonenumbertypeid = phonenumbertypeid match {
                            case Defaulted.UseDefault => phonenumbertypeidDefault
                            case Defaulted.Provided(value) => value
                          },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object PhonenumbertypeRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[PhonenumbertypeRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val phonenumbertypeid = jsonObj.get("phonenumbertypeid").toRight("Missing field 'phonenumbertypeid'").flatMap(_.as(Defaulted.jsonDecoder(PhonenumbertypeId.jsonDecoder)))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(Defaulted.jsonDecoder(TypoLocalDateTime.jsonDecoder)))
    if (name.isRight && phonenumbertypeid.isRight && modifieddate.isRight)
      Right(PhonenumbertypeRowUnsaved(name = name.toOption.get, phonenumbertypeid = phonenumbertypeid.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](name, phonenumbertypeid, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PhonenumbertypeRowUnsaved] = new JsonEncoder[PhonenumbertypeRowUnsaved] {
    override def unsafeEncode(a: PhonenumbertypeRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""phonenumbertypeid":""")
      Defaulted.jsonEncoder(PhonenumbertypeId.jsonEncoder).unsafeEncode(a.phonenumbertypeid, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      Defaulted.jsonEncoder(TypoLocalDateTime.jsonEncoder).unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[PhonenumbertypeRowUnsaved] = Text.instance[PhonenumbertypeRowUnsaved]{ (row, sb) =>
    Name.text.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(PhonenumbertypeId.text).unsafeEncode(row.phonenumbertypeid, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(TypoLocalDateTime.text).unsafeEncode(row.modifieddate, sb)
  }
}
