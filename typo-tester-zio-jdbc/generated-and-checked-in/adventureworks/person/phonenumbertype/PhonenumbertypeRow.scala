/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package phonenumbertype

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: person.phonenumbertype
    Type of phone number of a person.
    Primary key: phonenumbertypeid */
case class PhonenumbertypeRow(
  /** Primary key for telephone number type records.
      Default: nextval('person.phonenumbertype_phonenumbertypeid_seq'::regclass) */
  phonenumbertypeid: PhonenumbertypeId,
  /** Name of the telephone number type */
  name: Name,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   def toUnsavedRow(phonenumbertypeid: Defaulted[PhonenumbertypeId], modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): PhonenumbertypeRowUnsaved =
     PhonenumbertypeRowUnsaved(name, phonenumbertypeid, modifieddate)
 }

object PhonenumbertypeRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PhonenumbertypeRow] = new JdbcDecoder[PhonenumbertypeRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PhonenumbertypeRow) =
      columIndex + 2 ->
        PhonenumbertypeRow(
          phonenumbertypeid = PhonenumbertypeId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          name = Name.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PhonenumbertypeRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val phonenumbertypeid = jsonObj.get("phonenumbertypeid").toRight("Missing field 'phonenumbertypeid'").flatMap(_.as(PhonenumbertypeId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (phonenumbertypeid.isRight && name.isRight && modifieddate.isRight)
      Right(PhonenumbertypeRow(phonenumbertypeid = phonenumbertypeid.toOption.get, name = name.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](phonenumbertypeid, name, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PhonenumbertypeRow] = new JsonEncoder[PhonenumbertypeRow] {
    override def unsafeEncode(a: PhonenumbertypeRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""phonenumbertypeid":""")
      PhonenumbertypeId.jsonEncoder.unsafeEncode(a.phonenumbertypeid, indent, out)
      out.write(",")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[PhonenumbertypeRow] = Text.instance[PhonenumbertypeRow]{ (row, sb) =>
    PhonenumbertypeId.text.unsafeEncode(row.phonenumbertypeid, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
}
