/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package address

import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.person.stateprovince.StateprovinceFields
import adventureworks.person.stateprovince.StateprovinceId
import adventureworks.person.stateprovince.StateprovinceRow
import typo.dsl.ForeignKey
import typo.dsl.Path
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

trait AddressFields {
  def addressid: IdField[AddressId, AddressRow]
  def addressline1: Field[/* max 60 chars */ String, AddressRow]
  def addressline2: OptField[/* max 60 chars */ String, AddressRow]
  def city: Field[/* max 30 chars */ String, AddressRow]
  def stateprovinceid: Field[StateprovinceId, AddressRow]
  def postalcode: Field[/* max 15 chars */ String, AddressRow]
  def spatiallocation: OptField[TypoBytea, AddressRow]
  def rowguid: Field[TypoUUID, AddressRow]
  def modifieddate: Field[TypoLocalDateTime, AddressRow]
  def fkStateprovince: ForeignKey[StateprovinceFields, StateprovinceRow] =
    ForeignKey[StateprovinceFields, StateprovinceRow]("person.FK_Address_StateProvince_StateProvinceID", Nil)
      .withColumnPair(stateprovinceid, _.stateprovinceid)
}

object AddressFields {
  lazy val structure: Relation[AddressFields, AddressRow] =
    new Impl(Nil)
    
  private final class Impl(val _path: List[Path])
    extends Relation[AddressFields, AddressRow] {
  
    override lazy val fields: AddressFields = new AddressFields {
      override def addressid = IdField[AddressId, AddressRow](_path, "addressid", None, Some("int4"), x => x.addressid, (row, value) => row.copy(addressid = value))
      override def addressline1 = Field[/* max 60 chars */ String, AddressRow](_path, "addressline1", None, None, x => x.addressline1, (row, value) => row.copy(addressline1 = value))
      override def addressline2 = OptField[/* max 60 chars */ String, AddressRow](_path, "addressline2", None, None, x => x.addressline2, (row, value) => row.copy(addressline2 = value))
      override def city = Field[/* max 30 chars */ String, AddressRow](_path, "city", None, None, x => x.city, (row, value) => row.copy(city = value))
      override def stateprovinceid = Field[StateprovinceId, AddressRow](_path, "stateprovinceid", None, Some("int4"), x => x.stateprovinceid, (row, value) => row.copy(stateprovinceid = value))
      override def postalcode = Field[/* max 15 chars */ String, AddressRow](_path, "postalcode", None, None, x => x.postalcode, (row, value) => row.copy(postalcode = value))
      override def spatiallocation = OptField[TypoBytea, AddressRow](_path, "spatiallocation", None, Some("bytea"), x => x.spatiallocation, (row, value) => row.copy(spatiallocation = value))
      override def rowguid = Field[TypoUUID, AddressRow](_path, "rowguid", None, Some("uuid"), x => x.rowguid, (row, value) => row.copy(rowguid = value))
      override def modifieddate = Field[TypoLocalDateTime, AddressRow](_path, "modifieddate", Some("text"), Some("timestamp"), x => x.modifieddate, (row, value) => row.copy(modifieddate = value))
    }
  
    override lazy val columns: List[FieldLikeNoHkt[?, AddressRow]] =
      List[FieldLikeNoHkt[?, AddressRow]](fields.addressid, fields.addressline1, fields.addressline2, fields.city, fields.stateprovinceid, fields.postalcode, fields.spatiallocation, fields.rowguid, fields.modifieddate)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
