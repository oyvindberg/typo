/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package address

import typo.dsl.Bijection
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Type for the primary key of table `person.address` */
case class AddressId(value: Int) extends AnyVal
object AddressId {
  implicit lazy val bijection: Bijection[AddressId, Int] = Bijection[AddressId, Int](_.value)(AddressId.apply)
  implicit lazy val decoder: JsonDecoder[AddressId] = JsonDecoder.int.map(AddressId.apply)
  implicit lazy val encoder: JsonEncoder[AddressId] = JsonEncoder.int.contramap(_.value)
  implicit lazy val ordering: Ordering[AddressId] = Ordering.by(_.value)
}
