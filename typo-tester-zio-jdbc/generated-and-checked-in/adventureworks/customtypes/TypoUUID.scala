/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import java.util.UUID
import typo.dsl.Bijection
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** UUID */
case class TypoUUID(value: UUID)

object TypoUUID {
  def apply(str: String): TypoUUID = TypoUUID(UUID.fromString(str))
  def randomUUID: TypoUUID = TypoUUID(UUID.randomUUID())
  implicit lazy val bijection: Bijection[TypoUUID, UUID] = Bijection[TypoUUID, UUID](_.value)(TypoUUID.apply)
  implicit lazy val decoder: JsonDecoder[TypoUUID] = JsonDecoder.uuid.map(TypoUUID.apply)
  implicit lazy val encoder: JsonEncoder[TypoUUID] = JsonEncoder.uuid.contramap(_.value)
  implicit def ordering(implicit O0: Ordering[UUID]): Ordering[TypoUUID] = Ordering.by(_.value)
}
