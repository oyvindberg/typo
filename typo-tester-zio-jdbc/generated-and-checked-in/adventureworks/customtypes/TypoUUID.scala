/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import java.sql.ResultSet
import java.sql.Types
import java.util.UUID
import scala.reflect.ClassTag
import typo.dsl.Bijection
import typo.dsl.ParameterMetaData
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** UUID */
case class TypoUUID(value: UUID)

object TypoUUID {
  def apply(str: String): TypoUUID = TypoUUID(UUID.fromString(str))
  def randomUUID: TypoUUID = TypoUUID(UUID.randomUUID())
  implicit def arrayJdbcDecoder(implicit classTag: ClassTag[TypoUUID]): JdbcDecoder[Array[TypoUUID]] = JdbcDecoder[Array[TypoUUID]](
    (rs: ResultSet) => (i: Int) => {
      val arr = rs.getArray(i)
      if (arr eq null) null
      else
        arr
          .getArray
          .asInstanceOf[Array[AnyRef]]
          .foldLeft(Array.newBuilder(classTag)) {
            case (b, x) => b += TypoUUID(x.asInstanceOf[UUID])
          }
          .result()
    },
    "java.util.UUID"
  )
  implicit lazy val arrayJdbcEncoder: JdbcEncoder[Array[TypoUUID]] = JdbcEncoder.singleParamEncoder(arraySetter)
  implicit lazy val arraySetter: Setter[Array[TypoUUID]] = Setter.forSqlType((ps, i, v) =>
    ps.setArray(
      i,
      ps.getConnection.createArrayOf(
        "uuid",
        v.map { vv =>
          vv.value
        }
      )
    ),
    Types.ARRAY
  )
  implicit lazy val bijection: Bijection[TypoUUID, UUID] = Bijection[TypoUUID, UUID](_.value)(TypoUUID.apply)
  implicit lazy val jdbcDecoder: JdbcDecoder[TypoUUID] = JdbcDecoder[TypoUUID](
    (rs: ResultSet) => (i: Int) => {
      val v = rs.getObject(i)
      if (v eq null) null else TypoUUID(v.asInstanceOf[UUID])
    },
    "java.util.UUID"
  )
  implicit lazy val jdbcEncoder: JdbcEncoder[TypoUUID] = JdbcEncoder.singleParamEncoder(setter)
  implicit lazy val jsonDecoder: JsonDecoder[TypoUUID] = JsonDecoder.uuid.map(TypoUUID.apply)
  implicit lazy val jsonEncoder: JsonEncoder[TypoUUID] = JsonEncoder.uuid.contramap(_.value)
  implicit def ordering(implicit O0: Ordering[UUID]): Ordering[TypoUUID] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[TypoUUID] = new ParameterMetaData[TypoUUID] {
    override def sqlType: String = "uuid"
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val setter: Setter[TypoUUID] = Setter.other(
    (ps, i, v) => {
      ps.setObject(
        i,
        v.value
      )
    },
    "uuid"
  )
}
