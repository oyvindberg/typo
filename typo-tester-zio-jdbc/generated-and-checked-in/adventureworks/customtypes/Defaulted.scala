/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json


/**
 * This signals a value where if you don't provide it, postgres will generate it for you
 */
sealed trait Defaulted[+T]

object Defaulted {
  case class Provided[T](value: T) extends Defaulted[T]
  case object UseDefault extends Defaulted[Nothing]
  implicit def decoder[T](implicit T: JsonDecoder[T]): JsonDecoder[Defaulted[T]] = c => c.as[String].flatMap {
      case "defaulted" => Right(UseDefault)
      case _           => c.downField("provided").as[T].map(Provided.apply)
    }
  implicit def encoder[T](implicit T: JsonEncoder[T]): JsonEncoder[Defaulted[T]] = JsonEncoder.instance {
    case Provided(value) => Json.Obj.apply("provided" -> JsonEncoder[T].apply(value))
    case UseDefault      => Json.fromString("defaulted")
  }
}
