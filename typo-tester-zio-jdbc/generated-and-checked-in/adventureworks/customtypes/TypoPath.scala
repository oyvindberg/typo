/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import adventureworks.Text
import java.sql.ResultSet
import java.sql.Types
import org.postgresql.geometric.PGpath
import org.postgresql.geometric.PGpoint
import typo.dsl.PGType
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This implements a path (a multiple segmented line, which may be closed) */
case class TypoPath(open: Boolean, points: List[TypoPoint])

object TypoPath {
  implicit lazy val arrayJdbcDecoder: JdbcDecoder[Array[TypoPath]] = JdbcDecoder[Array[TypoPath]]((rs: ResultSet) => (i: Int) =>
    rs.getArray(i) match {
      case null => null
      case arr => arr.getArray.asInstanceOf[Array[AnyRef]].map(x => TypoPath(x.asInstanceOf[PGpath].isOpen, x.asInstanceOf[PGpath].points.map(p => TypoPoint(p.x, p.y)).toList))
    },
    "Array[org.postgresql.geometric.PGpath]"
  )
  implicit lazy val arrayJdbcEncoder: JdbcEncoder[Array[TypoPath]] = JdbcEncoder.singleParamEncoder(using arraySetter)
  implicit lazy val arraySetter: Setter[Array[TypoPath]] = Setter.forSqlType((ps, i, v) =>
    ps.setArray(
      i,
      ps.getConnection.createArrayOf(
        "path",
        v.map { vv =>
          new PGpath(vv.points.map(p => new PGpoint(p.x, p.y)).toArray, vv.open)
        }
      )
    ),
    Types.ARRAY
  )
  implicit lazy val jdbcDecoder: JdbcDecoder[TypoPath] = JdbcDecoder[TypoPath](
    (rs: ResultSet) => (i: Int) => {
      val v = rs.getObject(i)
      if (v eq null) null else TypoPath(v.asInstanceOf[PGpath].isOpen, v.asInstanceOf[PGpath].points.map(p => TypoPoint(p.x, p.y)).toList)
    },
    "org.postgresql.geometric.PGpath"
  )
  implicit lazy val jdbcEncoder: JdbcEncoder[TypoPath] = JdbcEncoder.singleParamEncoder(using setter)
  implicit lazy val jsonDecoder: JsonDecoder[TypoPath] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val open = jsonObj.get("open").toRight("Missing field 'open'").flatMap(_.as(JsonDecoder.boolean))
    val points = jsonObj.get("points").toRight("Missing field 'points'").flatMap(_.as(JsonDecoder[List[TypoPoint]]))
    if (open.isRight && points.isRight)
      Right(TypoPath(open = open.toOption.get, points = points.toOption.get))
    else Left(List[Either[String, Any]](open, points).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TypoPath] = new JsonEncoder[TypoPath] {
    override def unsafeEncode(a: TypoPath, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""open":""")
      JsonEncoder.boolean.unsafeEncode(a.open, indent, out)
      out.write(",")
      out.write(""""points":""")
      JsonEncoder[List[TypoPoint]].unsafeEncode(a.points, indent, out)
      out.write("}")
    }
  }
  implicit def ordering(implicit O0: Ordering[List[TypoPoint]]): Ordering[TypoPath] = Ordering.by(x => (x.open, x.points))
  implicit lazy val pgType: PGType[TypoPath] = PGType.instance[TypoPath]("path", Types.OTHER)
  implicit lazy val setter: Setter[TypoPath] = Setter.other(
    (ps, i, v) => {
      ps.setObject(
        i,
        new PGpath(v.points.map(p => new PGpoint(p.x, p.y)).toArray, v.open)
      )
    },
    "path"
  )
  implicit lazy val text: Text[TypoPath] = new Text[TypoPath] {
    override def unsafeEncode(v: TypoPath, sb: StringBuilder) = Text.stringInstance.unsafeEncode(s"""${if (v.open) "[" else "("}${v.points.map(p => s"${p.x}, ${p.y}").mkString(",")}${if (v.open) "]" else ")"}""", sb)
    override def unsafeArrayEncode(v: TypoPath, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(s"""${if (v.open) "[" else "("}${v.points.map(p => s"${p.x}, ${p.y}").mkString(",")}${if (v.open) "]" else ")"}""", sb)
  }
}
