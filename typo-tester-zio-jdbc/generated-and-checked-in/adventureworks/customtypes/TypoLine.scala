/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import java.sql.ResultSet
import java.sql.Types
import org.postgresql.geometric.PGline
import typo.dsl.PGType
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This implements a line represented by the linear equation Ax + By + C = 0 */
case class TypoLine(a: Double, b: Double, c: Double)

object TypoLine {
  implicit lazy val arrayJdbcDecoder: JdbcDecoder[Array[TypoLine]] = JdbcDecoder[Array[TypoLine]]((rs: ResultSet) => (i: Int) =>
    rs.getArray(i) match {
      case null => null
      case arr => arr.getArray.asInstanceOf[Array[AnyRef]].map(x => TypoLine(x.asInstanceOf[PGline].a, x.asInstanceOf[PGline].b, x.asInstanceOf[PGline].c))
    },
    "Array[org.postgresql.geometric.PGline]"
  )
  implicit lazy val arrayJdbcEncoder: JdbcEncoder[Array[TypoLine]] = JdbcEncoder.singleParamEncoder(using arraySetter)
  implicit lazy val arraySetter: Setter[Array[TypoLine]] = Setter.forSqlType((ps, i, v) =>
    ps.setArray(
      i,
      ps.getConnection.createArrayOf(
        "line",
        v.map { vv =>
          new PGline(vv.a, vv.b, vv.c)
        }
      )
    ),
    Types.ARRAY
  )
  implicit lazy val jdbcDecoder: JdbcDecoder[TypoLine] = JdbcDecoder[TypoLine](
    (rs: ResultSet) => (i: Int) => {
      val v = rs.getObject(i)
      if (v eq null) null else TypoLine(v.asInstanceOf[PGline].a, v.asInstanceOf[PGline].b, v.asInstanceOf[PGline].c)
    },
    "org.postgresql.geometric.PGline"
  )
  implicit lazy val jdbcEncoder: JdbcEncoder[TypoLine] = JdbcEncoder.singleParamEncoder(using setter)
  implicit lazy val jsonDecoder: JsonDecoder[TypoLine] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val a = jsonObj.get("a").toRight("Missing field 'a'").flatMap(_.as(JsonDecoder.double))
    val b = jsonObj.get("b").toRight("Missing field 'b'").flatMap(_.as(JsonDecoder.double))
    val c = jsonObj.get("c").toRight("Missing field 'c'").flatMap(_.as(JsonDecoder.double))
    if (a.isRight && b.isRight && c.isRight)
      Right(TypoLine(a = a.toOption.get, b = b.toOption.get, c = c.toOption.get))
    else Left(List[Either[String, Any]](a, b, c).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[TypoLine] = new JsonEncoder[TypoLine] {
    override def unsafeEncode(a: TypoLine, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""a":""")
      JsonEncoder.double.unsafeEncode(a.a, indent, out)
      out.write(",")
      out.write(""""b":""")
      JsonEncoder.double.unsafeEncode(a.b, indent, out)
      out.write(",")
      out.write(""""c":""")
      JsonEncoder.double.unsafeEncode(a.c, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[TypoLine] = Ordering.by(x => (x.a, x.b, x.c))
  implicit lazy val pgType: PGType[TypoLine] = PGType.instance[TypoLine]("line", Types.OTHER)
  implicit lazy val setter: Setter[TypoLine] = Setter.other(
    (ps, i, v) => {
      ps.setObject(
        i,
        new PGline(v.a, v.b, v.c)
      )
    },
    "line"
  )
  implicit lazy val text: Text[TypoLine] = new Text[TypoLine] {
    override def unsafeEncode(v: TypoLine, sb: StringBuilder) = Text.stringInstance.unsafeEncode(s"{${v.a},${v.b},${v.c}}", sb)
    override def unsafeArrayEncode(v: TypoLine, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(s"{${v.a},${v.b},${v.c}}", sb)
  }
}
