/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package productvendor

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import zio.json.DeriveJsonDecoder
import zio.json.DeriveJsonEncoder
import zio.json.JsonDecoder

/** Type for the composite primary key of table `purchasing.productvendor` */
case class ProductvendorId(productid: ProductId, businessentityid: BusinessentityId)
object ProductvendorId {
  implicit lazy val decoder: JsonDecoder[ProductvendorId] = DeriveJsonDecoder.gen[ProductvendorId]
  implicit lazy val decoder: JsonDecoder[ProductvendorId] = DeriveJsonEncoder.gen[ProductvendorId]
  implicit lazy val ordering: Ordering[ProductvendorId] = Ordering.by(x => (x.productid, x.businessentityid))
}
