/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vvendorwithaddresses

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** View: purchasing.vvendorwithaddresses */
case class VvendorwithaddressesViewRow(
  /** Points to [[vendor.VendorRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[vendor.VendorRow.name]] */
  name: Name,
  /** Points to [[person.addresstype.AddresstypeRow.name]] */
  addresstype: Name,
  /** Points to [[person.address.AddressRow.addressline1]] */
  addressline1: /* max 60 chars */ String,
  /** Points to [[person.address.AddressRow.addressline2]] */
  addressline2: Option[/* max 60 chars */ String],
  /** Points to [[person.address.AddressRow.city]] */
  city: /* max 30 chars */ String,
  /** Points to [[person.stateprovince.StateprovinceRow.name]] */
  stateprovincename: Name,
  /** Points to [[person.address.AddressRow.postalcode]] */
  postalcode: /* max 15 chars */ String,
  /** Points to [[person.countryregion.CountryregionRow.name]] */
  countryregionname: Name
)

object VvendorwithaddressesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[VvendorwithaddressesViewRow] = new JdbcDecoder[VvendorwithaddressesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, VvendorwithaddressesViewRow) =
      columIndex + 8 ->
        VvendorwithaddressesViewRow(
          businessentityid = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          name = Name.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          addresstype = Name.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          addressline1 = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          addressline2 = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          city = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 5, rs)._2,
          stateprovincename = Name.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          postalcode = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 7, rs)._2,
          countryregionname = Name.jdbcDecoder.unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[VvendorwithaddressesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val businessentityid = jsonObj.get("businessentityid").toRight("Missing field 'businessentityid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val addresstype = jsonObj.get("addresstype").toRight("Missing field 'addresstype'").flatMap(_.as(Name.jsonDecoder))
    val addressline1 = jsonObj.get("addressline1").toRight("Missing field 'addressline1'").flatMap(_.as(JsonDecoder.string))
    val addressline2 = jsonObj.get("addressline2").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val city = jsonObj.get("city").toRight("Missing field 'city'").flatMap(_.as(JsonDecoder.string))
    val stateprovincename = jsonObj.get("stateprovincename").toRight("Missing field 'stateprovincename'").flatMap(_.as(Name.jsonDecoder))
    val postalcode = jsonObj.get("postalcode").toRight("Missing field 'postalcode'").flatMap(_.as(JsonDecoder.string))
    val countryregionname = jsonObj.get("countryregionname").toRight("Missing field 'countryregionname'").flatMap(_.as(Name.jsonDecoder))
    if (businessentityid.isRight && name.isRight && addresstype.isRight && addressline1.isRight && addressline2.isRight && city.isRight && stateprovincename.isRight && postalcode.isRight && countryregionname.isRight)
      Right(VvendorwithaddressesViewRow(businessentityid = businessentityid.toOption.get, name = name.toOption.get, addresstype = addresstype.toOption.get, addressline1 = addressline1.toOption.get, addressline2 = addressline2.toOption.get, city = city.toOption.get, stateprovincename = stateprovincename.toOption.get, postalcode = postalcode.toOption.get, countryregionname = countryregionname.toOption.get))
    else Left(List[Either[String, Any]](businessentityid, name, addresstype, addressline1, addressline2, city, stateprovincename, postalcode, countryregionname).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[VvendorwithaddressesViewRow] = new JsonEncoder[VvendorwithaddressesViewRow] {
    override def unsafeEncode(a: VvendorwithaddressesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""businessentityid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.businessentityid, indent, out)
      out.write(",")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""addresstype":""")
      Name.jsonEncoder.unsafeEncode(a.addresstype, indent, out)
      out.write(",")
      out.write(""""addressline1":""")
      JsonEncoder.string.unsafeEncode(a.addressline1, indent, out)
      out.write(",")
      out.write(""""addressline2":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.addressline2, indent, out)
      out.write(",")
      out.write(""""city":""")
      JsonEncoder.string.unsafeEncode(a.city, indent, out)
      out.write(",")
      out.write(""""stateprovincename":""")
      Name.jsonEncoder.unsafeEncode(a.stateprovincename, indent, out)
      out.write(",")
      out.write(""""postalcode":""")
      JsonEncoder.string.unsafeEncode(a.postalcode, indent, out)
      out.write(",")
      out.write(""""countryregionname":""")
      Name.jsonEncoder.unsafeEncode(a.countryregionname, indent, out)
      out.write("}")
    }
  }
}
