/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderheader

import adventureworks.customtypes.Defaulted
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PurchaseorderheaderRepoImpl extends PurchaseorderheaderRepo {
  override def delete(purchaseorderid: PurchaseorderheaderId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from purchasing.purchaseorderheader where "purchaseorderid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PurchaseorderheaderFields, PurchaseorderheaderRow] = {
    DeleteBuilder("purchasing.purchaseorderheader", PurchaseorderheaderFields)
  }
  override def insert(unsaved: PurchaseorderheaderRow): ZIO[ZConnection, Throwable, PurchaseorderheaderRow] = {
    sql"""insert into purchasing.purchaseorderheader("purchaseorderid", "revisionnumber", "status", "employeeid", "vendorid", "shipmethodid", "orderdate", "shipdate", "subtotal", "taxamt", "freight", "modifieddate")
          values (???::int4, ???::int2, ???::int2, ???::int4, ???::int4, ???::int4, ???::timestamp, ???::timestamp, ???::numeric, ???::numeric, ???::numeric, ???::timestamp)
          returning "purchaseorderid", "revisionnumber", "status", "employeeid", "vendorid", "shipmethodid", "orderdate"::text, "shipdate"::text, "subtotal", "taxamt", "freight", "modifieddate"::text
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: PurchaseorderheaderRowUnsaved): ZIO[ZConnection, Throwable, PurchaseorderheaderRow] = {
    val fs = List(
      Some((SqlFragment(s""""employeeid""""), sql"???::int4")),
      Some((SqlFragment(s""""vendorid""""), sql"???::int4")),
      Some((SqlFragment(s""""shipmethodid""""), sql"???::int4")),
      Some((SqlFragment(s""""shipdate""""), sql"???::timestamp")),
      unsaved.purchaseorderid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""purchaseorderid""""), sql"???::int4"))
      },
      unsaved.revisionnumber match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""revisionnumber""""), sql"???::int2"))
      },
      unsaved.status match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""status""""), sql"???::int2"))
      },
      unsaved.orderdate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""orderdate""""), sql"???::timestamp"))
      },
      unsaved.subtotal match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""subtotal""""), sql"???::numeric"))
      },
      unsaved.taxamt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""taxamt""""), sql"???::numeric"))
      },
      unsaved.freight match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""freight""""), sql"???::numeric"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into purchasing.purchaseorderheader default values
            returning "purchaseorderid", "revisionnumber", "status", "employeeid", "vendorid", "shipmethodid", "orderdate"::text, "shipdate"::text, "subtotal", "taxamt", "freight", "modifieddate"::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into purchasing.purchaseorderheader(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "purchaseorderid", "revisionnumber", "status", "employeeid", "vendorid", "shipmethodid", "orderdate"::text, "shipdate"::text, "subtotal", "taxamt", "freight", "modifieddate"::text
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[PurchaseorderheaderFields, PurchaseorderheaderRow] = {
    SelectBuilderSql("purchasing.purchaseorderheader", PurchaseorderheaderFields, PurchaseorderheaderRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PurchaseorderheaderRow] = {
    sql"""select "purchaseorderid", "revisionnumber", "status", "employeeid", "vendorid", "shipmethodid", "orderdate"::text, "shipdate"::text, "subtotal", "taxamt", "freight", "modifieddate"::text from purchasing.purchaseorderheader""".query[PurchaseorderheaderRow].selectStream
  }
  override def selectById(purchaseorderid: PurchaseorderheaderId): ZIO[ZConnection, Throwable, Option[PurchaseorderheaderRow]] = {
    sql"""select "purchaseorderid", "revisionnumber", "status", "employeeid", "vendorid", "shipmethodid", "orderdate"::text, "shipdate"::text, "subtotal", "taxamt", "freight", "modifieddate"::text from purchasing.purchaseorderheader where "purchaseorderid" = ???""".query[PurchaseorderheaderRow].selectOne
  }
  override def selectByIds(purchaseorderids: Array[PurchaseorderheaderId]): ZStream[ZConnection, Throwable, PurchaseorderheaderRow] = {
    sql"""select "purchaseorderid", "revisionnumber", "status", "employeeid", "vendorid", "shipmethodid", "orderdate"::text, "shipdate"::text, "subtotal", "taxamt", "freight", "modifieddate"::text from purchasing.purchaseorderheader where "purchaseorderid" = ANY(${purchaseorderids})""".query[PurchaseorderheaderRow].selectStream
  }
  override def update(row: PurchaseorderheaderRow): ZIO[ZConnection, Throwable, Boolean] = {
    val purchaseorderid = row.purchaseorderid
    sql"""update purchasing.purchaseorderheader
          set "revisionnumber" = ???::int2,
              "status" = ???::int2,
              "employeeid" = ???::int4,
              "vendorid" = ???::int4,
              "shipmethodid" = ???::int4,
              "orderdate" = ???::timestamp,
              "shipdate" = ???::timestamp,
              "subtotal" = ???::numeric,
              "taxamt" = ???::numeric,
              "freight" = ???::numeric,
              "modifieddate" = ???::timestamp
          where "purchaseorderid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PurchaseorderheaderFields, PurchaseorderheaderRow] = {
    UpdateBuilder("purchasing.purchaseorderheader", PurchaseorderheaderFields, PurchaseorderheaderRow.read)
  }
  override def upsert(unsaved: PurchaseorderheaderRow): ZIO[ZConnection, Throwable, PurchaseorderheaderRow] = {
    sql"""insert into purchasing.purchaseorderheader("purchaseorderid", "revisionnumber", "status", "employeeid", "vendorid", "shipmethodid", "orderdate", "shipdate", "subtotal", "taxamt", "freight", "modifieddate")
          values (
            ???::int4,
            ???::int2,
            ???::int2,
            ???::int4,
            ???::int4,
            ???::int4,
            ???::timestamp,
            ???::timestamp,
            ???::numeric,
            ???::numeric,
            ???::numeric,
            ???::timestamp
          )
          on conflict ("purchaseorderid")
          do update set
            "revisionnumber" = EXCLUDED."revisionnumber",
            "status" = EXCLUDED."status",
            "employeeid" = EXCLUDED."employeeid",
            "vendorid" = EXCLUDED."vendorid",
            "shipmethodid" = EXCLUDED."shipmethodid",
            "orderdate" = EXCLUDED."orderdate",
            "shipdate" = EXCLUDED."shipdate",
            "subtotal" = EXCLUDED."subtotal",
            "taxamt" = EXCLUDED."taxamt",
            "freight" = EXCLUDED."freight",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "purchaseorderid", "revisionnumber", "status", "employeeid", "vendorid", "shipmethodid", "orderdate"::text, "shipdate"::text, "subtotal", "taxamt", "freight", "modifieddate"::text
       """.query(???).unique
  }
}
