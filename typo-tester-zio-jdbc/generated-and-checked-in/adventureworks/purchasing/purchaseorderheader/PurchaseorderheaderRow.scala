/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderheader

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.purchasing.shipmethod.ShipmethodId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: purchasing.purchaseorderheader
    General purchase order information. See PurchaseOrderDetail.
    Primary key: purchaseorderid */
case class PurchaseorderheaderRow(
  /** Primary key.
      Default: nextval('purchasing.purchaseorderheader_purchaseorderid_seq'::regclass) */
  purchaseorderid: PurchaseorderheaderId,
  /** Incremental number to track changes to the purchase order over time.
      Default: 0 */
  revisionnumber: TypoShort,
  /** Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
      Default: 1
      Constraint CK_PurchaseOrderHeader_Status affecting columns status: (((status >= 1) AND (status <= 4))) */
  status: TypoShort,
  /** Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
      Points to [[humanresources.employee.EmployeeRow.businessentityid]] */
  employeeid: BusinessentityId,
  /** Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
      Points to [[vendor.VendorRow.businessentityid]] */
  vendorid: BusinessentityId,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
      Points to [[shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: ShipmethodId,
  /** Purchase order creation date.
      Default: now()
      Constraint CK_PurchaseOrderHeader_ShipDate affecting columns orderdate, shipdate: (((shipdate >= orderdate) OR (shipdate IS NULL))) */
  orderdate: TypoLocalDateTime,
  /** Estimated shipment date from the vendor.
      Constraint CK_PurchaseOrderHeader_ShipDate affecting columns orderdate, shipdate: (((shipdate >= orderdate) OR (shipdate IS NULL))) */
  shipdate: Option[TypoLocalDateTime],
  /** Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
      Default: 0.00
      Constraint CK_PurchaseOrderHeader_SubTotal affecting columns subtotal: ((subtotal >= 0.00)) */
  subtotal: BigDecimal,
  /** Tax amount.
      Default: 0.00
      Constraint CK_PurchaseOrderHeader_TaxAmt affecting columns taxamt: ((taxamt >= 0.00)) */
  taxamt: BigDecimal,
  /** Shipping cost.
      Default: 0.00
      Constraint CK_PurchaseOrderHeader_Freight affecting columns freight: ((freight >= 0.00)) */
  freight: BigDecimal,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   def toUnsavedRow(purchaseorderid: Defaulted[PurchaseorderheaderId], revisionnumber: Defaulted[TypoShort] = Defaulted.Provided(this.revisionnumber), status: Defaulted[TypoShort] = Defaulted.Provided(this.status), orderdate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.orderdate), subtotal: Defaulted[BigDecimal] = Defaulted.Provided(this.subtotal), taxamt: Defaulted[BigDecimal] = Defaulted.Provided(this.taxamt), freight: Defaulted[BigDecimal] = Defaulted.Provided(this.freight), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): PurchaseorderheaderRowUnsaved =
     PurchaseorderheaderRowUnsaved(employeeid, vendorid, shipmethodid, shipdate, purchaseorderid, revisionnumber, status, orderdate, subtotal, taxamt, freight, modifieddate)
 }

object PurchaseorderheaderRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PurchaseorderheaderRow] = new JdbcDecoder[PurchaseorderheaderRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PurchaseorderheaderRow) =
      columIndex + 11 ->
        PurchaseorderheaderRow(
          purchaseorderid = PurchaseorderheaderId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          revisionnumber = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          status = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          employeeid = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          vendorid = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          shipmethodid = ShipmethodId.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          orderdate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          shipdate = JdbcDecoder.optionDecoder(TypoLocalDateTime.jdbcDecoder).unsafeDecode(columIndex + 7, rs)._2,
          subtotal = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 8, rs)._2,
          taxamt = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 9, rs)._2,
          freight = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 10, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 11, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PurchaseorderheaderRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val purchaseorderid = jsonObj.get("purchaseorderid").toRight("Missing field 'purchaseorderid'").flatMap(_.as(PurchaseorderheaderId.jsonDecoder))
    val revisionnumber = jsonObj.get("revisionnumber").toRight("Missing field 'revisionnumber'").flatMap(_.as(TypoShort.jsonDecoder))
    val status = jsonObj.get("status").toRight("Missing field 'status'").flatMap(_.as(TypoShort.jsonDecoder))
    val employeeid = jsonObj.get("employeeid").toRight("Missing field 'employeeid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val vendorid = jsonObj.get("vendorid").toRight("Missing field 'vendorid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val shipmethodid = jsonObj.get("shipmethodid").toRight("Missing field 'shipmethodid'").flatMap(_.as(ShipmethodId.jsonDecoder))
    val orderdate = jsonObj.get("orderdate").toRight("Missing field 'orderdate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    val shipdate = jsonObj.get("shipdate").fold[Either[String, Option[TypoLocalDateTime]]](Right(None))(_.as(JsonDecoder.option(using TypoLocalDateTime.jsonDecoder)))
    val subtotal = jsonObj.get("subtotal").toRight("Missing field 'subtotal'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val taxamt = jsonObj.get("taxamt").toRight("Missing field 'taxamt'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val freight = jsonObj.get("freight").toRight("Missing field 'freight'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (purchaseorderid.isRight && revisionnumber.isRight && status.isRight && employeeid.isRight && vendorid.isRight && shipmethodid.isRight && orderdate.isRight && shipdate.isRight && subtotal.isRight && taxamt.isRight && freight.isRight && modifieddate.isRight)
      Right(PurchaseorderheaderRow(purchaseorderid = purchaseorderid.toOption.get, revisionnumber = revisionnumber.toOption.get, status = status.toOption.get, employeeid = employeeid.toOption.get, vendorid = vendorid.toOption.get, shipmethodid = shipmethodid.toOption.get, orderdate = orderdate.toOption.get, shipdate = shipdate.toOption.get, subtotal = subtotal.toOption.get, taxamt = taxamt.toOption.get, freight = freight.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PurchaseorderheaderRow] = new JsonEncoder[PurchaseorderheaderRow] {
    override def unsafeEncode(a: PurchaseorderheaderRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""purchaseorderid":""")
      PurchaseorderheaderId.jsonEncoder.unsafeEncode(a.purchaseorderid, indent, out)
      out.write(",")
      out.write(""""revisionnumber":""")
      TypoShort.jsonEncoder.unsafeEncode(a.revisionnumber, indent, out)
      out.write(",")
      out.write(""""status":""")
      TypoShort.jsonEncoder.unsafeEncode(a.status, indent, out)
      out.write(",")
      out.write(""""employeeid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.employeeid, indent, out)
      out.write(",")
      out.write(""""vendorid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.vendorid, indent, out)
      out.write(",")
      out.write(""""shipmethodid":""")
      ShipmethodId.jsonEncoder.unsafeEncode(a.shipmethodid, indent, out)
      out.write(",")
      out.write(""""orderdate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.orderdate, indent, out)
      out.write(",")
      out.write(""""shipdate":""")
      JsonEncoder.option(using TypoLocalDateTime.jsonEncoder).unsafeEncode(a.shipdate, indent, out)
      out.write(",")
      out.write(""""subtotal":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.subtotal, indent, out)
      out.write(",")
      out.write(""""taxamt":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.taxamt, indent, out)
      out.write(",")
      out.write(""""freight":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.freight, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[PurchaseorderheaderRow] = Text.instance[PurchaseorderheaderRow]{ (row, sb) =>
    PurchaseorderheaderId.text.unsafeEncode(row.purchaseorderid, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.revisionnumber, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.status, sb)
    sb.append(Text.DELIMETER)
    BusinessentityId.text.unsafeEncode(row.employeeid, sb)
    sb.append(Text.DELIMETER)
    BusinessentityId.text.unsafeEncode(row.vendorid, sb)
    sb.append(Text.DELIMETER)
    ShipmethodId.text.unsafeEncode(row.shipmethodid, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.orderdate, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.shipdate, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.subtotal, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.taxamt, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.freight, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
}
