/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderdetail

import adventureworks.customtypes.Defaulted
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PurchaseorderdetailRepoImpl extends PurchaseorderdetailRepo {
  override def delete(compositeId: PurchaseorderdetailId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from purchasing.purchaseorderdetail where "purchaseorderid" = ??? AND "purchaseorderdetailid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PurchaseorderdetailFields, PurchaseorderdetailRow] = {
    DeleteBuilder("purchasing.purchaseorderdetail", PurchaseorderdetailFields)
  }
  override def insert(unsaved: PurchaseorderdetailRow): ZIO[ZConnection, Throwable, PurchaseorderdetailRow] = {
    sql"""insert into purchasing.purchaseorderdetail("purchaseorderid", "purchaseorderdetailid", "duedate", "orderqty", "productid", "unitprice", "receivedqty", "rejectedqty", "modifieddate")
          values (???::int4, ???::int4, ???::timestamp, ???::int2, ???::int4, ???::numeric, ???::numeric, ???::numeric, ???::timestamp)
          returning "purchaseorderid", "purchaseorderdetailid", "duedate"::text, "orderqty", "productid", "unitprice", "receivedqty", "rejectedqty", "modifieddate"::text
       """.query(???).update.map(_ > 0)
  }
  override def insert(unsaved: PurchaseorderdetailRowUnsaved): ZIO[ZConnection, Throwable, PurchaseorderdetailRow] = {
    val fs = List(
      Some((SqlFragment(s""""purchaseorderid""""), sql"???::int4")),
      Some((SqlFragment(s""""duedate""""), sql"???::timestamp")),
      Some((SqlFragment(s""""orderqty""""), sql"???::int2")),
      Some((SqlFragment(s""""productid""""), sql"???::int4")),
      Some((SqlFragment(s""""unitprice""""), sql"???::numeric")),
      Some((SqlFragment(s""""receivedqty""""), sql"???::numeric")),
      Some((SqlFragment(s""""rejectedqty""""), sql"???::numeric")),
      unsaved.purchaseorderdetailid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""purchaseorderdetailid""""), sql"???::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((SqlFragment(s""""modifieddate""""), sql"???::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into purchasing.purchaseorderdetail default values
            returning "purchaseorderid", "purchaseorderdetailid", "duedate"::text, "orderqty", "productid", "unitprice", "receivedqty", "rejectedqty", "modifieddate"::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into purchasing.purchaseorderdetail(${fs.map { case (n, _) => n }.intercalate(sql", ")})
            values (${fs.map { case (_, f) => f }.intercalate(sql", ")})
            returning "purchaseorderid", "purchaseorderdetailid", "duedate"::text, "orderqty", "productid", "unitprice", "receivedqty", "rejectedqty", "modifieddate"::text
         """
    }
    q.query(???).unique
    
  }
  override def select: SelectBuilder[PurchaseorderdetailFields, PurchaseorderdetailRow] = {
    SelectBuilderSql("purchasing.purchaseorderdetail", PurchaseorderdetailFields, PurchaseorderdetailRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PurchaseorderdetailRow] = {
    sql"""select "purchaseorderid", "purchaseorderdetailid", "duedate"::text, "orderqty", "productid", "unitprice", "receivedqty", "rejectedqty", "modifieddate"::text from purchasing.purchaseorderdetail""".query[PurchaseorderdetailRow].selectStream
  }
  override def selectById(compositeId: PurchaseorderdetailId): ZIO[ZConnection, Throwable, Option[PurchaseorderdetailRow]] = {
    sql"""select "purchaseorderid", "purchaseorderdetailid", "duedate"::text, "orderqty", "productid", "unitprice", "receivedqty", "rejectedqty", "modifieddate"::text from purchasing.purchaseorderdetail where "purchaseorderid" = ??? AND "purchaseorderdetailid" = ???""".query[PurchaseorderdetailRow].selectOne
  }
  override def update(row: PurchaseorderdetailRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update purchasing.purchaseorderdetail
          set "duedate" = ???::timestamp,
              "orderqty" = ???::int2,
              "productid" = ???::int4,
              "unitprice" = ???::numeric,
              "receivedqty" = ???::numeric,
              "rejectedqty" = ???::numeric,
              "modifieddate" = ???::timestamp
          where "purchaseorderid" = ??? AND "purchaseorderdetailid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PurchaseorderdetailFields, PurchaseorderdetailRow] = {
    UpdateBuilder("purchasing.purchaseorderdetail", PurchaseorderdetailFields, PurchaseorderdetailRow.read)
  }
  override def upsert(unsaved: PurchaseorderdetailRow): ZIO[ZConnection, Throwable, PurchaseorderdetailRow] = {
    sql"""insert into purchasing.purchaseorderdetail("purchaseorderid", "purchaseorderdetailid", "duedate", "orderqty", "productid", "unitprice", "receivedqty", "rejectedqty", "modifieddate")
          values (
            ???::int4,
            ???::int4,
            ???::timestamp,
            ???::int2,
            ???::int4,
            ???::numeric,
            ???::numeric,
            ???::numeric,
            ???::timestamp
          )
          on conflict ("purchaseorderid", "purchaseorderdetailid")
          do update set
            "duedate" = EXCLUDED."duedate",
            "orderqty" = EXCLUDED."orderqty",
            "productid" = EXCLUDED."productid",
            "unitprice" = EXCLUDED."unitprice",
            "receivedqty" = EXCLUDED."receivedqty",
            "rejectedqty" = EXCLUDED."rejectedqty",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "purchaseorderid", "purchaseorderdetailid", "duedate"::text, "orderqty", "productid", "unitprice", "receivedqty", "rejectedqty", "modifieddate"::text
       """.query(???).unique
  }
}
