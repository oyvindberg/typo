/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderdetail

import adventureworks.Text
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.production.product.ProductId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: purchasing.purchaseorderdetail
    Individual products associated with a specific purchase order. See PurchaseOrderHeader.
    Composite primary key: purchaseorderid, purchaseorderdetailid */
case class PurchaseorderdetailRow(
  /** Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
      Points to [[purchaseorderheader.PurchaseorderheaderRow.purchaseorderid]] */
  purchaseorderid: PurchaseorderheaderId,
  /** Primary key. One line number per purchased product.
      Default: nextval('purchasing.purchaseorderdetail_purchaseorderdetailid_seq'::regclass) */
  purchaseorderdetailid: Int,
  /** Date the product is expected to be received. */
  duedate: TypoLocalDateTime,
  /** Quantity ordered.
      Constraint CK_PurchaseOrderDetail_OrderQty affecting columns orderqty: ((orderqty > 0)) */
  orderqty: TypoShort,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  /** Vendor's selling price of a single product.
      Constraint CK_PurchaseOrderDetail_UnitPrice affecting columns unitprice: ((unitprice >= 0.00)) */
  unitprice: BigDecimal,
  /** Quantity actually received from the vendor.
      Constraint CK_PurchaseOrderDetail_ReceivedQty affecting columns receivedqty: ((receivedqty >= 0.00)) */
  receivedqty: BigDecimal,
  /** Quantity rejected during inspection.
      Constraint CK_PurchaseOrderDetail_RejectedQty affecting columns rejectedqty: ((rejectedqty >= 0.00)) */
  rejectedqty: BigDecimal,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val compositeId: PurchaseorderdetailId = PurchaseorderdetailId(purchaseorderid, purchaseorderdetailid)
 }

object PurchaseorderdetailRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PurchaseorderdetailRow] = new JdbcDecoder[PurchaseorderdetailRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PurchaseorderdetailRow) =
      columIndex + 8 ->
        PurchaseorderdetailRow(
          purchaseorderid = PurchaseorderheaderId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          purchaseorderdetailid = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 1, rs)._2,
          duedate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          orderqty = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          productid = ProductId.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          unitprice = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 5, rs)._2,
          receivedqty = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 6, rs)._2,
          rejectedqty = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 7, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PurchaseorderdetailRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val purchaseorderid = jsonObj.get("purchaseorderid").toRight("Missing field 'purchaseorderid'").flatMap(_.as(PurchaseorderheaderId.jsonDecoder))
    val purchaseorderdetailid = jsonObj.get("purchaseorderdetailid").toRight("Missing field 'purchaseorderdetailid'").flatMap(_.as(JsonDecoder.int))
    val duedate = jsonObj.get("duedate").toRight("Missing field 'duedate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    val orderqty = jsonObj.get("orderqty").toRight("Missing field 'orderqty'").flatMap(_.as(TypoShort.jsonDecoder))
    val productid = jsonObj.get("productid").toRight("Missing field 'productid'").flatMap(_.as(ProductId.jsonDecoder))
    val unitprice = jsonObj.get("unitprice").toRight("Missing field 'unitprice'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val receivedqty = jsonObj.get("receivedqty").toRight("Missing field 'receivedqty'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val rejectedqty = jsonObj.get("rejectedqty").toRight("Missing field 'rejectedqty'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (purchaseorderid.isRight && purchaseorderdetailid.isRight && duedate.isRight && orderqty.isRight && productid.isRight && unitprice.isRight && receivedqty.isRight && rejectedqty.isRight && modifieddate.isRight)
      Right(PurchaseorderdetailRow(purchaseorderid = purchaseorderid.toOption.get, purchaseorderdetailid = purchaseorderdetailid.toOption.get, duedate = duedate.toOption.get, orderqty = orderqty.toOption.get, productid = productid.toOption.get, unitprice = unitprice.toOption.get, receivedqty = receivedqty.toOption.get, rejectedqty = rejectedqty.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](purchaseorderid, purchaseorderdetailid, duedate, orderqty, productid, unitprice, receivedqty, rejectedqty, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PurchaseorderdetailRow] = new JsonEncoder[PurchaseorderdetailRow] {
    override def unsafeEncode(a: PurchaseorderdetailRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""purchaseorderid":""")
      PurchaseorderheaderId.jsonEncoder.unsafeEncode(a.purchaseorderid, indent, out)
      out.write(",")
      out.write(""""purchaseorderdetailid":""")
      JsonEncoder.int.unsafeEncode(a.purchaseorderdetailid, indent, out)
      out.write(",")
      out.write(""""duedate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.duedate, indent, out)
      out.write(",")
      out.write(""""orderqty":""")
      TypoShort.jsonEncoder.unsafeEncode(a.orderqty, indent, out)
      out.write(",")
      out.write(""""productid":""")
      ProductId.jsonEncoder.unsafeEncode(a.productid, indent, out)
      out.write(",")
      out.write(""""unitprice":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.unitprice, indent, out)
      out.write(",")
      out.write(""""receivedqty":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.receivedqty, indent, out)
      out.write(",")
      out.write(""""rejectedqty":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.rejectedqty, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[PurchaseorderdetailRow] = Text.instance[PurchaseorderdetailRow]{ (row, sb) =>
    PurchaseorderheaderId.text.unsafeEncode(row.purchaseorderid, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.purchaseorderdetailid, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.duedate, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.orderqty, sb)
    sb.append(Text.DELIMETER)
    ProductId.text.unsafeEncode(row.productid, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.unitprice, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.receivedqty, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.rejectedqty, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
}
