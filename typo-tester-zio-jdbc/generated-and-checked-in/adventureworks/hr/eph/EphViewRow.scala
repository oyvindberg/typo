/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package eph

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.person.businessentity.BusinessentityId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** View: hr.eph */
case class EphViewRow(
  /** Points to [[humanresources.employeepayhistory.EmployeepayhistoryRow.businessentityid]] */
  id: BusinessentityId,
  /** Points to [[humanresources.employeepayhistory.EmployeepayhistoryRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[humanresources.employeepayhistory.EmployeepayhistoryRow.ratechangedate]] */
  ratechangedate: TypoLocalDateTime,
  /** Points to [[humanresources.employeepayhistory.EmployeepayhistoryRow.rate]] */
  rate: BigDecimal,
  /** Points to [[humanresources.employeepayhistory.EmployeepayhistoryRow.payfrequency]] */
  payfrequency: TypoShort,
  /** Points to [[humanresources.employeepayhistory.EmployeepayhistoryRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object EphViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[EphViewRow] = new JdbcDecoder[EphViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, EphViewRow) =
      columIndex + 5 ->
        EphViewRow(
          id = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          businessentityid = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          ratechangedate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          rate = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 3, rs)._2,
          payfrequency = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[EphViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val businessentityid = jsonObj.get("businessentityid").toRight("Missing field 'businessentityid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val ratechangedate = jsonObj.get("ratechangedate").toRight("Missing field 'ratechangedate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    val rate = jsonObj.get("rate").toRight("Missing field 'rate'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val payfrequency = jsonObj.get("payfrequency").toRight("Missing field 'payfrequency'").flatMap(_.as(TypoShort.jsonDecoder))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (id.isRight && businessentityid.isRight && ratechangedate.isRight && rate.isRight && payfrequency.isRight && modifieddate.isRight)
      Right(EphViewRow(id = id.toOption.get, businessentityid = businessentityid.toOption.get, ratechangedate = ratechangedate.toOption.get, rate = rate.toOption.get, payfrequency = payfrequency.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](id, businessentityid, ratechangedate, rate, payfrequency, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[EphViewRow] = new JsonEncoder[EphViewRow] {
    override def unsafeEncode(a: EphViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""businessentityid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.businessentityid, indent, out)
      out.write(",")
      out.write(""""ratechangedate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.ratechangedate, indent, out)
      out.write(",")
      out.write(""""rate":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.rate, indent, out)
      out.write(",")
      out.write(""""payfrequency":""")
      TypoShort.jsonEncoder.unsafeEncode(a.payfrequency, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
}
