/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_conversion

import adventureworks.customtypes.TypoRegproc
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

class PgConversionStructure[Row](val prefix: Option[String], val extract: Row => PgConversionRow, val merge: (Row, PgConversionRow) => Row)
  extends Relation[PgConversionFields, PgConversionRow, Row]
    with PgConversionFields[Row] { outer =>

  override val oid = new IdField[PgConversionId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val conname = new Field[String, Row](prefix, "conname", None, Some("name"))(x => extract(x).conname, (row, value) => merge(row, extract(row).copy(conname = value)))
  override val connamespace = new Field[/* oid */ Long, Row](prefix, "connamespace", None, Some("oid"))(x => extract(x).connamespace, (row, value) => merge(row, extract(row).copy(connamespace = value)))
  override val conowner = new Field[/* oid */ Long, Row](prefix, "conowner", None, Some("oid"))(x => extract(x).conowner, (row, value) => merge(row, extract(row).copy(conowner = value)))
  override val conforencoding = new Field[Int, Row](prefix, "conforencoding", None, Some("int4"))(x => extract(x).conforencoding, (row, value) => merge(row, extract(row).copy(conforencoding = value)))
  override val contoencoding = new Field[Int, Row](prefix, "contoencoding", None, Some("int4"))(x => extract(x).contoencoding, (row, value) => merge(row, extract(row).copy(contoencoding = value)))
  override val conproc = new Field[TypoRegproc, Row](prefix, "conproc", None, Some("regproc"))(x => extract(x).conproc, (row, value) => merge(row, extract(row).copy(conproc = value)))
  override val condefault = new Field[Boolean, Row](prefix, "condefault", None, None)(x => extract(x).condefault, (row, value) => merge(row, extract(row).copy(condefault = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgConversionRow, merge: (NewRow, PgConversionRow) => NewRow): PgConversionStructure[NewRow] =
    new PgConversionStructure(prefix, extract, merge)
}
