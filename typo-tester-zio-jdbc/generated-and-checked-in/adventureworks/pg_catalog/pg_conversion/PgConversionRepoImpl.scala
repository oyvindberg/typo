/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_conversion

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgConversionRepoImpl extends PgConversionRepo {
  override def delete(oid: PgConversionId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_conversion where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgConversionFields, PgConversionRow] = {
    DeleteBuilder("pg_catalog.pg_conversion", PgConversionFields)
  }
  override def insert(unsaved: PgConversionRow): ZIO[ZConnection, Throwable, PgConversionRow] = {
    sql"""insert into pg_catalog.pg_conversion("oid", "conname", "connamespace", "conowner", "conforencoding", "contoencoding", "conproc", "condefault")
          values (???::oid, ???::name, ???::oid, ???::oid, ???::int4, ???::int4, ???::regproc, ???)
          returning "oid", "conname", "connamespace", "conowner", "conforencoding", "contoencoding", "conproc", "condefault"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgConversionFields, PgConversionRow] = {
    SelectBuilderSql("pg_catalog.pg_conversion", PgConversionFields, PgConversionRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgConversionRow] = {
    sql"""select "oid", "conname", "connamespace", "conowner", "conforencoding", "contoencoding", "conproc", "condefault" from pg_catalog.pg_conversion""".query[PgConversionRow].selectStream
  }
  override def selectById(oid: PgConversionId): ZIO[ZConnection, Throwable, Option[PgConversionRow]] = {
    sql"""select "oid", "conname", "connamespace", "conowner", "conforencoding", "contoencoding", "conproc", "condefault" from pg_catalog.pg_conversion where "oid" = ???""".query[PgConversionRow].selectOne
  }
  override def selectByIds(oids: Array[PgConversionId]): ZStream[ZConnection, Throwable, PgConversionRow] = {
    sql"""select "oid", "conname", "connamespace", "conowner", "conforencoding", "contoencoding", "conproc", "condefault" from pg_catalog.pg_conversion where "oid" = ANY(${oids})""".query[PgConversionRow].selectStream
  }
  override def selectByUnique(conname: String, connamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgConversionRow]] = {
    sql"""select "conname", "connamespace"
          from pg_catalog.pg_conversion
          where "conname" = ??? AND "connamespace" = ???
       """.query[PgConversionRow].selectOne
  }
  override def selectByUnique(connamespace: /* oid */ Long, conforencoding: Int, contoencoding: Int, oid: PgConversionId): ZIO[ZConnection, Throwable, Option[PgConversionRow]] = {
    sql"""select "connamespace", "conforencoding", "contoencoding", "oid"
          from pg_catalog.pg_conversion
          where "connamespace" = ??? AND "conforencoding" = ??? AND "contoencoding" = ??? AND "oid" = ???
       """.query[PgConversionRow].selectOne
  }
  override def update(row: PgConversionRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_conversion
          set "conname" = ???::name,
              "connamespace" = ???::oid,
              "conowner" = ???::oid,
              "conforencoding" = ???::int4,
              "contoencoding" = ???::int4,
              "conproc" = ???::regproc,
              "condefault" = ???
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgConversionFields, PgConversionRow] = {
    UpdateBuilder("pg_catalog.pg_conversion", PgConversionFields, PgConversionRow.read)
  }
  override def upsert(unsaved: PgConversionRow): ZIO[ZConnection, Throwable, PgConversionRow] = {
    sql"""insert into pg_catalog.pg_conversion("oid", "conname", "connamespace", "conowner", "conforencoding", "contoencoding", "conproc", "condefault")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::oid,
            ???::int4,
            ???::int4,
            ???::regproc,
            ???
          )
          on conflict ("oid")
          do update set
            "conname" = EXCLUDED."conname",
            "connamespace" = EXCLUDED."connamespace",
            "conowner" = EXCLUDED."conowner",
            "conforencoding" = EXCLUDED."conforencoding",
            "contoencoding" = EXCLUDED."contoencoding",
            "conproc" = EXCLUDED."conproc",
            "condefault" = EXCLUDED."condefault"
          returning "oid", "conname", "connamespace", "conowner", "conforencoding", "contoencoding", "conproc", "condefault"
       """.query(???).unique
  }
}
