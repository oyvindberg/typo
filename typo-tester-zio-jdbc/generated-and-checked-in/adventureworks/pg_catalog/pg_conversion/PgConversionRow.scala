/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_conversion

import adventureworks.customtypes.TypoRegproc
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgConversionRow(
  oid: PgConversionId,
  conname: String,
  connamespace: /* oid */ Long,
  conowner: /* oid */ Long,
  conforencoding: Int,
  contoencoding: Int,
  conproc: TypoRegproc,
  condefault: Boolean
)

object PgConversionRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgConversionRow] = new JdbcDecoder[PgConversionRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgConversionRow) =
      columIndex + 7 ->
        PgConversionRow(
          oid = PgConversionId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          conname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          connamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          conowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          conforencoding = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 4, rs)._2,
          contoencoding = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 5, rs)._2,
          conproc = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          condefault = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgConversionRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgConversionId.jsonDecoder))
    val conname = jsonObj.get("conname").toRight("Missing field 'conname'").flatMap(_.as(JsonDecoder.string))
    val connamespace = jsonObj.get("connamespace").toRight("Missing field 'connamespace'").flatMap(_.as(JsonDecoder.long))
    val conowner = jsonObj.get("conowner").toRight("Missing field 'conowner'").flatMap(_.as(JsonDecoder.long))
    val conforencoding = jsonObj.get("conforencoding").toRight("Missing field 'conforencoding'").flatMap(_.as(JsonDecoder.int))
    val contoencoding = jsonObj.get("contoencoding").toRight("Missing field 'contoencoding'").flatMap(_.as(JsonDecoder.int))
    val conproc = jsonObj.get("conproc").toRight("Missing field 'conproc'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val condefault = jsonObj.get("condefault").toRight("Missing field 'condefault'").flatMap(_.as(JsonDecoder.boolean))
    if (oid.isRight && conname.isRight && connamespace.isRight && conowner.isRight && conforencoding.isRight && contoencoding.isRight && conproc.isRight && condefault.isRight)
      Right(PgConversionRow(oid = oid.toOption.get, conname = conname.toOption.get, connamespace = connamespace.toOption.get, conowner = conowner.toOption.get, conforencoding = conforencoding.toOption.get, contoencoding = contoencoding.toOption.get, conproc = conproc.toOption.get, condefault = condefault.toOption.get))
    else Left(List[Either[String, Any]](oid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgConversionRow] = new JsonEncoder[PgConversionRow] {
    override def unsafeEncode(a: PgConversionRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgConversionId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""conname":""")
      JsonEncoder.string.unsafeEncode(a.conname, indent, out)
      out.write(",")
      out.write(""""connamespace":""")
      JsonEncoder.long.unsafeEncode(a.connamespace, indent, out)
      out.write(",")
      out.write(""""conowner":""")
      JsonEncoder.long.unsafeEncode(a.conowner, indent, out)
      out.write(",")
      out.write(""""conforencoding":""")
      JsonEncoder.int.unsafeEncode(a.conforencoding, indent, out)
      out.write(",")
      out.write(""""contoencoding":""")
      JsonEncoder.int.unsafeEncode(a.contoencoding, indent, out)
      out.write(",")
      out.write(""""conproc":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.conproc, indent, out)
      out.write(",")
      out.write(""""condefault":""")
      JsonEncoder.boolean.unsafeEncode(a.condefault, indent, out)
      out.write("}")
    }
  }
}
