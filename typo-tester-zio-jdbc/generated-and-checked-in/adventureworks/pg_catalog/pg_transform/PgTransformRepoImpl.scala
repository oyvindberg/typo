/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_transform

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgTransformRepoImpl extends PgTransformRepo {
  override def delete(oid: PgTransformId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_transform where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTransformFields, PgTransformRow] = {
    DeleteBuilder("pg_catalog.pg_transform", PgTransformFields)
  }
  override def insert(unsaved: PgTransformRow): ZIO[ZConnection, Throwable, PgTransformRow] = {
    sql"""insert into pg_catalog.pg_transform("oid", "trftype", "trflang", "trffromsql", "trftosql")
          values (???::oid, ???::oid, ???::oid, ???::regproc, ???::regproc)
          returning "oid", "trftype", "trflang", "trffromsql", "trftosql"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgTransformFields, PgTransformRow] = {
    SelectBuilderSql("pg_catalog.pg_transform", PgTransformFields, PgTransformRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTransformRow] = {
    sql"""select "oid", "trftype", "trflang", "trffromsql", "trftosql" from pg_catalog.pg_transform""".query[PgTransformRow].selectStream
  }
  override def selectById(oid: PgTransformId): ZIO[ZConnection, Throwable, Option[PgTransformRow]] = {
    sql"""select "oid", "trftype", "trflang", "trffromsql", "trftosql" from pg_catalog.pg_transform where "oid" = ???""".query[PgTransformRow].selectOne
  }
  override def selectByIds(oids: Array[PgTransformId]): ZStream[ZConnection, Throwable, PgTransformRow] = {
    sql"""select "oid", "trftype", "trflang", "trffromsql", "trftosql" from pg_catalog.pg_transform where "oid" = ANY(${oids})""".query[PgTransformRow].selectStream
  }
  override def selectByUnique(trftype: /* oid */ Long, trflang: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgTransformRow]] = {
    sql"""select "trftype", "trflang"
          from pg_catalog.pg_transform
          where "trftype" = ??? AND "trflang" = ???
       """.query[PgTransformRow].selectOne
  }
  override def update(row: PgTransformRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_transform
          set "trftype" = ???::oid,
              "trflang" = ???::oid,
              "trffromsql" = ???::regproc,
              "trftosql" = ???::regproc
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTransformFields, PgTransformRow] = {
    UpdateBuilder("pg_catalog.pg_transform", PgTransformFields, PgTransformRow.read)
  }
  override def upsert(unsaved: PgTransformRow): ZIO[ZConnection, Throwable, PgTransformRow] = {
    sql"""insert into pg_catalog.pg_transform("oid", "trftype", "trflang", "trffromsql", "trftosql")
          values (
            ???::oid,
            ???::oid,
            ???::oid,
            ???::regproc,
            ???::regproc
          )
          on conflict ("oid")
          do update set
            "trftype" = EXCLUDED."trftype",
            "trflang" = EXCLUDED."trflang",
            "trffromsql" = EXCLUDED."trffromsql",
            "trftosql" = EXCLUDED."trftosql"
          returning "oid", "trftype", "trflang", "trffromsql", "trftosql"
       """.query(???).unique
  }
}
