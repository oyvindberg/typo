/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_transform

import adventureworks.customtypes.TypoRegproc
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgTransformRepoImpl extends PgTransformRepo {
  override def delete(oid: PgTransformId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_transform where "oid" = ${Segment.paramSegment(oid)(PgTransformId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTransformFields, PgTransformRow] = {
    DeleteBuilder("pg_catalog.pg_transform", PgTransformFields)
  }
  override def insert(unsaved: PgTransformRow): ZIO[ZConnection, Throwable, PgTransformRow] = {
    sql"""insert into pg_catalog.pg_transform("oid", "trftype", "trflang", "trffromsql", "trftosql")
          values (${Segment.paramSegment(unsaved.oid)(PgTransformId.setter)}::oid, ${Segment.paramSegment(unsaved.trftype)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.trflang)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.trffromsql)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.trftosql)(TypoRegproc.setter)}::regproc)
          returning "oid", "trftype", "trflang", "trffromsql", "trftosql"
       """.insertReturning(PgTransformRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgTransformFields, PgTransformRow] = {
    SelectBuilderSql("pg_catalog.pg_transform", PgTransformFields, PgTransformRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTransformRow] = {
    sql"""select "oid", "trftype", "trflang", "trffromsql", "trftosql" from pg_catalog.pg_transform""".query(PgTransformRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgTransformId): ZIO[ZConnection, Throwable, Option[PgTransformRow]] = {
    sql"""select "oid", "trftype", "trflang", "trffromsql", "trftosql" from pg_catalog.pg_transform where "oid" = ${Segment.paramSegment(oid)(PgTransformId.setter)}""".query(PgTransformRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgTransformId]): ZStream[ZConnection, Throwable, PgTransformRow] = {
    sql"""select "oid", "trftype", "trflang", "trffromsql", "trftosql" from pg_catalog.pg_transform where "oid" = ANY(${Segment.paramSegment(oids)(PgTransformId.arraySetter)})""".query(PgTransformRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(trftype: /* oid */ Long, trflang: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgTransformRow]] = {
    sql"""select "trftype", "trflang"
          from pg_catalog.pg_transform
          where "trftype" = ${Segment.paramSegment(trftype)(Setter.longSetter)} AND "trflang" = ${Segment.paramSegment(trflang)(Setter.longSetter)}
       """.query(PgTransformRow.jdbcDecoder).selectOne
  }
  override def update(row: PgTransformRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_transform
          set "trftype" = ${Segment.paramSegment(row.trftype)(Setter.longSetter)}::oid,
              "trflang" = ${Segment.paramSegment(row.trflang)(Setter.longSetter)}::oid,
              "trffromsql" = ${Segment.paramSegment(row.trffromsql)(TypoRegproc.setter)}::regproc,
              "trftosql" = ${Segment.paramSegment(row.trftosql)(TypoRegproc.setter)}::regproc
          where "oid" = ${Segment.paramSegment(oid)(PgTransformId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTransformFields, PgTransformRow] = {
    UpdateBuilder("pg_catalog.pg_transform", PgTransformFields, PgTransformRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgTransformRow): ZIO[ZConnection, Throwable, UpdateResult[PgTransformRow]] = {
    sql"""insert into pg_catalog.pg_transform("oid", "trftype", "trflang", "trffromsql", "trftosql")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgTransformId.setter)}::oid,
            ${Segment.paramSegment(unsaved.trftype)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.trflang)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.trffromsql)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.trftosql)(TypoRegproc.setter)}::regproc
          )
          on conflict ("oid")
          do update set
            "trftype" = EXCLUDED."trftype",
            "trflang" = EXCLUDED."trflang",
            "trffromsql" = EXCLUDED."trffromsql",
            "trftosql" = EXCLUDED."trftosql"
          returning "oid", "trftype", "trflang", "trffromsql", "trftosql"""".insertReturning(PgTransformRow.jdbcDecoder)
  }
}
