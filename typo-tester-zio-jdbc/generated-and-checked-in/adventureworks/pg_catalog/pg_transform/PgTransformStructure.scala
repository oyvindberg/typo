/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_transform

import adventureworks.customtypes.TypoRegproc
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

class PgTransformStructure[Row](val prefix: Option[String], val extract: Row => PgTransformRow, val merge: (Row, PgTransformRow) => Row)
  extends Relation[PgTransformFields, PgTransformRow, Row]
    with PgTransformFields[Row] { outer =>

  override val oid = new IdField[PgTransformId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val trftype = new Field[/* oid */ Long, Row](prefix, "trftype", None, Some("oid"))(x => extract(x).trftype, (row, value) => merge(row, extract(row).copy(trftype = value)))
  override val trflang = new Field[/* oid */ Long, Row](prefix, "trflang", None, Some("oid"))(x => extract(x).trflang, (row, value) => merge(row, extract(row).copy(trflang = value)))
  override val trffromsql = new Field[TypoRegproc, Row](prefix, "trffromsql", None, Some("regproc"))(x => extract(x).trffromsql, (row, value) => merge(row, extract(row).copy(trffromsql = value)))
  override val trftosql = new Field[TypoRegproc, Row](prefix, "trftosql", None, Some("regproc"))(x => extract(x).trftosql, (row, value) => merge(row, extract(row).copy(trftosql = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, trftype, trflang, trffromsql, trftosql)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgTransformRow, merge: (NewRow, PgTransformRow) => NewRow): PgTransformStructure[NewRow] =
    new PgTransformStructure(prefix, extract, merge)
}
