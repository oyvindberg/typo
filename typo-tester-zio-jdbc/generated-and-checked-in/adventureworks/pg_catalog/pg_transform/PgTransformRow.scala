/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_transform

import adventureworks.customtypes.TypoRegproc
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgTransformRow(
  oid: PgTransformId,
  trftype: /* oid */ Long,
  trflang: /* oid */ Long,
  trffromsql: TypoRegproc,
  trftosql: TypoRegproc
)

object PgTransformRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgTransformRow] = new JdbcDecoder[PgTransformRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgTransformRow) =
      columIndex + 4 ->
        PgTransformRow(
          oid = PgTransformId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          trftype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          trflang = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          trffromsql = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          trftosql = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgTransformRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgTransformId.jsonDecoder))
    val trftype = jsonObj.get("trftype").toRight("Missing field 'trftype'").flatMap(_.as(JsonDecoder.long))
    val trflang = jsonObj.get("trflang").toRight("Missing field 'trflang'").flatMap(_.as(JsonDecoder.long))
    val trffromsql = jsonObj.get("trffromsql").toRight("Missing field 'trffromsql'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val trftosql = jsonObj.get("trftosql").toRight("Missing field 'trftosql'").flatMap(_.as(TypoRegproc.jsonDecoder))
    if (oid.isRight && trftype.isRight && trflang.isRight && trffromsql.isRight && trftosql.isRight)
      Right(PgTransformRow(oid = oid.toOption.get, trftype = trftype.toOption.get, trflang = trflang.toOption.get, trffromsql = trffromsql.toOption.get, trftosql = trftosql.toOption.get))
    else Left(List[Either[String, Any]](oid, trftype, trflang, trffromsql, trftosql).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTransformRow] = new JsonEncoder[PgTransformRow] {
    override def unsafeEncode(a: PgTransformRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgTransformId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""trftype":""")
      JsonEncoder.long.unsafeEncode(a.trftype, indent, out)
      out.write(",")
      out.write(""""trflang":""")
      JsonEncoder.long.unsafeEncode(a.trflang, indent, out)
      out.write(",")
      out.write(""""trffromsql":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.trffromsql, indent, out)
      out.write(",")
      out.write(""""trftosql":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.trftosql, indent, out)
      out.write("}")
    }
  }
}
