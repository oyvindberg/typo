/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic_ext_data

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgStatisticExtDataRepoImpl extends PgStatisticExtDataRepo {
  override def delete(stxoid: PgStatisticExtDataId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_statistic_ext_data where "stxoid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgStatisticExtDataFields, PgStatisticExtDataRow] = {
    DeleteBuilder("pg_catalog.pg_statistic_ext_data", PgStatisticExtDataFields)
  }
  override def insert(unsaved: PgStatisticExtDataRow): ZIO[ZConnection, Throwable, PgStatisticExtDataRow] = {
    sql"""insert into pg_catalog.pg_statistic_ext_data("stxoid", "stxdndistinct", "stxddependencies", "stxdmcv", "stxdexpr")
          values (???::oid, ???::pg_ndistinct, ???::pg_dependencies, ???::pg_mcv_list, ???::_pg_statistic)
          returning "stxoid", "stxdndistinct"::text, "stxddependencies"::text, "stxdmcv"::text, "stxdexpr"::text[]
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgStatisticExtDataFields, PgStatisticExtDataRow] = {
    SelectBuilderSql("pg_catalog.pg_statistic_ext_data", PgStatisticExtDataFields, PgStatisticExtDataRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgStatisticExtDataRow] = {
    sql"""select "stxoid", "stxdndistinct"::text, "stxddependencies"::text, "stxdmcv"::text, "stxdexpr"::text[] from pg_catalog.pg_statistic_ext_data""".query[PgStatisticExtDataRow].selectStream
  }
  override def selectById(stxoid: PgStatisticExtDataId): ZIO[ZConnection, Throwable, Option[PgStatisticExtDataRow]] = {
    sql"""select "stxoid", "stxdndistinct"::text, "stxddependencies"::text, "stxdmcv"::text, "stxdexpr"::text[] from pg_catalog.pg_statistic_ext_data where "stxoid" = ???""".query[PgStatisticExtDataRow].selectOne
  }
  override def selectByIds(stxoids: Array[PgStatisticExtDataId]): ZStream[ZConnection, Throwable, PgStatisticExtDataRow] = {
    sql"""select "stxoid", "stxdndistinct"::text, "stxddependencies"::text, "stxdmcv"::text, "stxdexpr"::text[] from pg_catalog.pg_statistic_ext_data where "stxoid" = ANY(${stxoids})""".query[PgStatisticExtDataRow].selectStream
  }
  override def update(row: PgStatisticExtDataRow): ZIO[ZConnection, Throwable, Boolean] = {
    val stxoid = row.stxoid
    sql"""update pg_catalog.pg_statistic_ext_data
          set "stxdndistinct" = ???::pg_ndistinct,
              "stxddependencies" = ???::pg_dependencies,
              "stxdmcv" = ???::pg_mcv_list,
              "stxdexpr" = ???::_pg_statistic
          where "stxoid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgStatisticExtDataFields, PgStatisticExtDataRow] = {
    UpdateBuilder("pg_catalog.pg_statistic_ext_data", PgStatisticExtDataFields, PgStatisticExtDataRow.read)
  }
  override def upsert(unsaved: PgStatisticExtDataRow): ZIO[ZConnection, Throwable, PgStatisticExtDataRow] = {
    sql"""insert into pg_catalog.pg_statistic_ext_data("stxoid", "stxdndistinct", "stxddependencies", "stxdmcv", "stxdexpr")
          values (
            ???::oid,
            ???::pg_ndistinct,
            ???::pg_dependencies,
            ???::pg_mcv_list,
            ???::_pg_statistic
          )
          on conflict ("stxoid")
          do update set
            "stxdndistinct" = EXCLUDED."stxdndistinct",
            "stxddependencies" = EXCLUDED."stxddependencies",
            "stxdmcv" = EXCLUDED."stxdmcv",
            "stxdexpr" = EXCLUDED."stxdexpr"
          returning "stxoid", "stxdndistinct"::text, "stxddependencies"::text, "stxdmcv"::text, "stxdexpr"::text[]
       """.query(???).unique
  }
}
