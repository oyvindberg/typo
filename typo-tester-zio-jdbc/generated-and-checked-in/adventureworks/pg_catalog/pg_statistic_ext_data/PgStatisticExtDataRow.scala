/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic_ext_data

import adventureworks.customtypes.TypoUnknownPgDependencies
import adventureworks.customtypes.TypoUnknownPgMcvList
import adventureworks.customtypes.TypoUnknownPgNdistinct
import adventureworks.customtypes.TypoUnknownPgStatistic
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatisticExtDataRow(
  stxoid: PgStatisticExtDataId,
  stxdndistinct: Option[TypoUnknownPgNdistinct],
  stxddependencies: Option[TypoUnknownPgDependencies],
  stxdmcv: Option[TypoUnknownPgMcvList],
  stxdexpr: Option[Array[TypoUnknownPgStatistic]]
)

object PgStatisticExtDataRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatisticExtDataRow] = new JdbcDecoder[PgStatisticExtDataRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatisticExtDataRow) =
      columIndex + 4 ->
        PgStatisticExtDataRow(
          stxoid = PgStatisticExtDataId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          stxdndistinct = JdbcDecoder.optionDecoder(TypoUnknownPgNdistinct.jdbcDecoder).unsafeDecode(columIndex + 1, rs)._2,
          stxddependencies = JdbcDecoder.optionDecoder(TypoUnknownPgDependencies.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          stxdmcv = JdbcDecoder.optionDecoder(TypoUnknownPgMcvList.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2,
          stxdexpr = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoUnknownPgStatistic]]).unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatisticExtDataRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val stxoid = jsonObj.get("stxoid").toRight("Missing field 'stxoid'").flatMap(_.as(PgStatisticExtDataId.jsonDecoder))
    val stxdndistinct = jsonObj.get("stxdndistinct").fold[Either[String, Option[TypoUnknownPgNdistinct]]](Right(None))(_.as(JsonDecoder.option(TypoUnknownPgNdistinct.jsonDecoder)))
    val stxddependencies = jsonObj.get("stxddependencies").fold[Either[String, Option[TypoUnknownPgDependencies]]](Right(None))(_.as(JsonDecoder.option(TypoUnknownPgDependencies.jsonDecoder)))
    val stxdmcv = jsonObj.get("stxdmcv").fold[Either[String, Option[TypoUnknownPgMcvList]]](Right(None))(_.as(JsonDecoder.option(TypoUnknownPgMcvList.jsonDecoder)))
    val stxdexpr = jsonObj.get("stxdexpr").fold[Either[String, Option[Array[TypoUnknownPgStatistic]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoUnknownPgStatistic](TypoUnknownPgStatistic.jsonDecoder, implicitly))))
    if (stxoid.isRight && stxdndistinct.isRight && stxddependencies.isRight && stxdmcv.isRight && stxdexpr.isRight)
      Right(PgStatisticExtDataRow(stxoid = stxoid.toOption.get, stxdndistinct = stxdndistinct.toOption.get, stxddependencies = stxddependencies.toOption.get, stxdmcv = stxdmcv.toOption.get, stxdexpr = stxdexpr.toOption.get))
    else Left(List[Either[String, Any]](stxoid, stxdndistinct, stxddependencies, stxdmcv, stxdexpr).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatisticExtDataRow] = new JsonEncoder[PgStatisticExtDataRow] {
    override def unsafeEncode(a: PgStatisticExtDataRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""stxoid":""")
      PgStatisticExtDataId.jsonEncoder.unsafeEncode(a.stxoid, indent, out)
      out.write(",")
      out.write(""""stxdndistinct":""")
      JsonEncoder.option(TypoUnknownPgNdistinct.jsonEncoder).unsafeEncode(a.stxdndistinct, indent, out)
      out.write(",")
      out.write(""""stxddependencies":""")
      JsonEncoder.option(TypoUnknownPgDependencies.jsonEncoder).unsafeEncode(a.stxddependencies, indent, out)
      out.write(",")
      out.write(""""stxdmcv":""")
      JsonEncoder.option(TypoUnknownPgMcvList.jsonEncoder).unsafeEncode(a.stxdmcv, indent, out)
      out.write(",")
      out.write(""""stxdexpr":""")
      JsonEncoder.option(JsonEncoder.array[TypoUnknownPgStatistic](TypoUnknownPgStatistic.jsonEncoder, implicitly)).unsafeEncode(a.stxdexpr, indent, out)
      out.write("}")
    }
  }
}
