/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_file_settings

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgFileSettingsViewRow(
  sourcefile: /* nullability unknown */ Option[String],
  sourceline: /* nullability unknown */ Option[Int],
  seqno: /* nullability unknown */ Option[Int],
  name: /* nullability unknown */ Option[String],
  setting: /* nullability unknown */ Option[String],
  applied: /* nullability unknown */ Option[Boolean],
  error: /* nullability unknown */ Option[String]
)

object PgFileSettingsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgFileSettingsViewRow] = new JdbcDecoder[PgFileSettingsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgFileSettingsViewRow) =
      columIndex + 6 ->
        PgFileSettingsViewRow(
          sourcefile = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          sourceline = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 1, rs)._2,
          seqno = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 2, rs)._2,
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          setting = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          applied = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 5, rs)._2,
          error = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgFileSettingsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val sourcefile = jsonObj.get("sourcefile").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val sourceline = jsonObj.get("sourceline").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val seqno = jsonObj.get("seqno").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val setting = jsonObj.get("setting").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val applied = jsonObj.get("applied").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val error = jsonObj.get("error").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (sourcefile.isRight && sourceline.isRight && seqno.isRight && name.isRight && setting.isRight && applied.isRight && error.isRight)
      Right(PgFileSettingsViewRow(sourcefile = sourcefile.toOption.get, sourceline = sourceline.toOption.get, seqno = seqno.toOption.get, name = name.toOption.get, setting = setting.toOption.get, applied = applied.toOption.get, error = error.toOption.get))
    else Left(List[Either[String, Any]](sourcefile, sourceline, seqno, name, setting, applied, error).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgFileSettingsViewRow] = new JsonEncoder[PgFileSettingsViewRow] {
    override def unsafeEncode(a: PgFileSettingsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""sourcefile":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.sourcefile, indent, out)
      out.write(",")
      out.write(""""sourceline":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.sourceline, indent, out)
      out.write(",")
      out.write(""""seqno":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.seqno, indent, out)
      out.write(",")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""setting":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.setting, indent, out)
      out.write(",")
      out.write(""""applied":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.applied, indent, out)
      out.write(",")
      out.write(""""error":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.error, indent, out)
      out.write("}")
    }
  }
}
