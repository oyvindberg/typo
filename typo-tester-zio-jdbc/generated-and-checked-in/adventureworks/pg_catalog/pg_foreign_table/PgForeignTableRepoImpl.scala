/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_table

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgForeignTableRepoImpl extends PgForeignTableRepo {
  override def delete(ftrelid: PgForeignTableId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_foreign_table where "ftrelid" = ${Segment.paramSegment(ftrelid)(PgForeignTableId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgForeignTableFields, PgForeignTableRow] = {
    DeleteBuilder("pg_catalog.pg_foreign_table", PgForeignTableFields)
  }
  override def insert(unsaved: PgForeignTableRow): ZIO[ZConnection, Throwable, PgForeignTableRow] = {
    sql"""insert into pg_catalog.pg_foreign_table("ftrelid", "ftserver", "ftoptions")
          values (${Segment.paramSegment(unsaved.ftrelid)(PgForeignTableId.setter)}::oid, ${Segment.paramSegment(unsaved.ftserver)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.ftoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text)
          returning "ftrelid", "ftserver", "ftoptions"
       """.insertReturning(PgForeignTableRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgForeignTableFields, PgForeignTableRow] = {
    SelectBuilderSql("pg_catalog.pg_foreign_table", PgForeignTableFields, PgForeignTableRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgForeignTableRow] = {
    sql"""select "ftrelid", "ftserver", "ftoptions" from pg_catalog.pg_foreign_table""".query(PgForeignTableRow.jdbcDecoder).selectStream
  }
  override def selectById(ftrelid: PgForeignTableId): ZIO[ZConnection, Throwable, Option[PgForeignTableRow]] = {
    sql"""select "ftrelid", "ftserver", "ftoptions" from pg_catalog.pg_foreign_table where "ftrelid" = ${Segment.paramSegment(ftrelid)(PgForeignTableId.setter)}""".query(PgForeignTableRow.jdbcDecoder).selectOne
  }
  override def selectByIds(ftrelids: Array[PgForeignTableId]): ZStream[ZConnection, Throwable, PgForeignTableRow] = {
    sql"""select "ftrelid", "ftserver", "ftoptions" from pg_catalog.pg_foreign_table where "ftrelid" = ANY(${Segment.paramSegment(ftrelids)(PgForeignTableId.arraySetter)})""".query(PgForeignTableRow.jdbcDecoder).selectStream
  }
  override def update(row: PgForeignTableRow): ZIO[ZConnection, Throwable, Boolean] = {
    val ftrelid = row.ftrelid
    sql"""update pg_catalog.pg_foreign_table
          set "ftserver" = ${Segment.paramSegment(row.ftserver)(Setter.longSetter)}::oid,
              "ftoptions" = ${Segment.paramSegment(row.ftoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          where "ftrelid" = ${Segment.paramSegment(ftrelid)(PgForeignTableId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgForeignTableFields, PgForeignTableRow] = {
    UpdateBuilder("pg_catalog.pg_foreign_table", PgForeignTableFields, PgForeignTableRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgForeignTableRow): ZIO[ZConnection, Throwable, UpdateResult[PgForeignTableRow]] = {
    sql"""insert into pg_catalog.pg_foreign_table("ftrelid", "ftserver", "ftoptions")
          values (
            ${Segment.paramSegment(unsaved.ftrelid)(PgForeignTableId.setter)}::oid,
            ${Segment.paramSegment(unsaved.ftserver)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.ftoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          )
          on conflict ("ftrelid")
          do update set
            "ftserver" = EXCLUDED."ftserver",
            "ftoptions" = EXCLUDED."ftoptions"
          returning "ftrelid", "ftserver", "ftoptions"""".insertReturning(PgForeignTableRow.jdbcDecoder)
  }
}
