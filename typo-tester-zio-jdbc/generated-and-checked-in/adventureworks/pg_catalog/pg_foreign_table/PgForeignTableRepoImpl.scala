/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_table

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgForeignTableRepoImpl extends PgForeignTableRepo {
  override def delete(ftrelid: PgForeignTableId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_foreign_table where "ftrelid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgForeignTableFields, PgForeignTableRow] = {
    DeleteBuilder("pg_catalog.pg_foreign_table", PgForeignTableFields)
  }
  override def insert(unsaved: PgForeignTableRow): ZIO[ZConnection, Throwable, PgForeignTableRow] = {
    sql"""insert into pg_catalog.pg_foreign_table("ftrelid", "ftserver", "ftoptions")
          values (???::oid, ???::oid, ???::_text)
          returning "ftrelid", "ftserver", "ftoptions"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgForeignTableFields, PgForeignTableRow] = {
    SelectBuilderSql("pg_catalog.pg_foreign_table", PgForeignTableFields, PgForeignTableRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgForeignTableRow] = {
    sql"""select "ftrelid", "ftserver", "ftoptions" from pg_catalog.pg_foreign_table""".query[PgForeignTableRow].selectStream
  }
  override def selectById(ftrelid: PgForeignTableId): ZIO[ZConnection, Throwable, Option[PgForeignTableRow]] = {
    sql"""select "ftrelid", "ftserver", "ftoptions" from pg_catalog.pg_foreign_table where "ftrelid" = ???""".query[PgForeignTableRow].selectOne
  }
  override def selectByIds(ftrelids: Array[PgForeignTableId]): ZStream[ZConnection, Throwable, PgForeignTableRow] = {
    sql"""select "ftrelid", "ftserver", "ftoptions" from pg_catalog.pg_foreign_table where "ftrelid" = ANY(${ftrelids})""".query[PgForeignTableRow].selectStream
  }
  override def update(row: PgForeignTableRow): ZIO[ZConnection, Throwable, Boolean] = {
    val ftrelid = row.ftrelid
    sql"""update pg_catalog.pg_foreign_table
          set "ftserver" = ???::oid,
              "ftoptions" = ???::_text
          where "ftrelid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgForeignTableFields, PgForeignTableRow] = {
    UpdateBuilder("pg_catalog.pg_foreign_table", PgForeignTableFields, PgForeignTableRow.read)
  }
  override def upsert(unsaved: PgForeignTableRow): ZIO[ZConnection, Throwable, PgForeignTableRow] = {
    sql"""insert into pg_catalog.pg_foreign_table("ftrelid", "ftserver", "ftoptions")
          values (
            ???::oid,
            ???::oid,
            ???::_text
          )
          on conflict ("ftrelid")
          do update set
            "ftserver" = EXCLUDED."ftserver",
            "ftoptions" = EXCLUDED."ftoptions"
          returning "ftrelid", "ftserver", "ftoptions"
       """.query(???).unique
  }
}
