/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_table

import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgForeignTableStructure[Row](val prefix: Option[String], val extract: Row => PgForeignTableRow, val merge: (Row, PgForeignTableRow) => Row)
  extends Relation[PgForeignTableFields, PgForeignTableRow, Row]
    with PgForeignTableFields[Row] { outer =>

  override val ftrelid = new IdField[PgForeignTableId, Row](prefix, "ftrelid", None, Some("oid"))(x => extract(x).ftrelid, (row, value) => merge(row, extract(row).copy(ftrelid = value)))
  override val ftserver = new Field[/* oid */ Long, Row](prefix, "ftserver", None, Some("oid"))(x => extract(x).ftserver, (row, value) => merge(row, extract(row).copy(ftserver = value)))
  override val ftoptions = new OptField[Array[String], Row](prefix, "ftoptions", None, Some("_text"))(x => extract(x).ftoptions, (row, value) => merge(row, extract(row).copy(ftoptions = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](ftrelid, ftserver, ftoptions)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgForeignTableRow, merge: (NewRow, PgForeignTableRow) => NewRow): PgForeignTableStructure[NewRow] =
    new PgForeignTableStructure(prefix, extract, merge)
}
