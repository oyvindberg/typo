/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_table

import typo.dsl.Bijection
import typo.dsl.ParameterMetaData
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Type for the primary key of table `pg_catalog.pg_foreign_table` */
case class PgForeignTableId(value: /* oid */ Long) extends AnyVal
object PgForeignTableId {
  implicit lazy val arraySetter: Setter[Array[PgForeignTableId]] = adventureworks.LongArraySetter.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[PgForeignTableId, /* oid */ Long] = Bijection[PgForeignTableId, /* oid */ Long](_.value)(PgForeignTableId.apply)
  implicit lazy val jdbcDecoder: JdbcDecoder[PgForeignTableId] = JdbcDecoder.longDecoder.map(PgForeignTableId.apply)
  implicit lazy val jdbcEncoder: JdbcEncoder[PgForeignTableId] = JdbcEncoder.longEncoder.contramap(_.value)
  implicit lazy val jsonDecoder: JsonDecoder[PgForeignTableId] = JsonDecoder.long.map(PgForeignTableId.apply)
  implicit lazy val jsonEncoder: JsonEncoder[PgForeignTableId] = JsonEncoder.long.contramap(_.value)
  implicit lazy val ordering: Ordering[PgForeignTableId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[PgForeignTableId] = ParameterMetaData.instance[PgForeignTableId](ParameterMetaData.LongParameterMetaData.sqlType, ParameterMetaData.LongParameterMetaData.jdbcType)
  implicit lazy val setter: Setter[PgForeignTableId] = Setter.longSetter.contramap(_.value)
}
