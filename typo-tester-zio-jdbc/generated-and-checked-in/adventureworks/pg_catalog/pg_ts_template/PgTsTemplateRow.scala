/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_template

import adventureworks.customtypes.TypoRegproc
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgTsTemplateRow(
  oid: PgTsTemplateId,
  tmplname: String,
  tmplnamespace: /* oid */ Long,
  tmplinit: TypoRegproc,
  tmpllexize: TypoRegproc
)

object PgTsTemplateRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgTsTemplateRow] = new JdbcDecoder[PgTsTemplateRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgTsTemplateRow) =
      columIndex + 4 ->
        PgTsTemplateRow(
          oid = PgTsTemplateId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          tmplname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          tmplnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          tmplinit = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          tmpllexize = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgTsTemplateRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgTsTemplateId.jsonDecoder))
    val tmplname = jsonObj.get("tmplname").toRight("Missing field 'tmplname'").flatMap(_.as(JsonDecoder.string))
    val tmplnamespace = jsonObj.get("tmplnamespace").toRight("Missing field 'tmplnamespace'").flatMap(_.as(JsonDecoder.long))
    val tmplinit = jsonObj.get("tmplinit").toRight("Missing field 'tmplinit'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val tmpllexize = jsonObj.get("tmpllexize").toRight("Missing field 'tmpllexize'").flatMap(_.as(TypoRegproc.jsonDecoder))
    if (oid.isRight && tmplname.isRight && tmplnamespace.isRight && tmplinit.isRight && tmpllexize.isRight)
      Right(PgTsTemplateRow(oid = oid.toOption.get, tmplname = tmplname.toOption.get, tmplnamespace = tmplnamespace.toOption.get, tmplinit = tmplinit.toOption.get, tmpllexize = tmpllexize.toOption.get))
    else Left(List[Either[String, Any]](oid, tmplname, tmplnamespace, tmplinit, tmpllexize).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTsTemplateRow] = new JsonEncoder[PgTsTemplateRow] {
    override def unsafeEncode(a: PgTsTemplateRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgTsTemplateId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""tmplname":""")
      JsonEncoder.string.unsafeEncode(a.tmplname, indent, out)
      out.write(",")
      out.write(""""tmplnamespace":""")
      JsonEncoder.long.unsafeEncode(a.tmplnamespace, indent, out)
      out.write(",")
      out.write(""""tmplinit":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.tmplinit, indent, out)
      out.write(",")
      out.write(""""tmpllexize":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.tmpllexize, indent, out)
      out.write("}")
    }
  }
}
