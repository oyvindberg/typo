/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_template

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgTsTemplateRepoImpl extends PgTsTemplateRepo {
  override def delete(oid: PgTsTemplateId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_ts_template where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTsTemplateFields, PgTsTemplateRow] = {
    DeleteBuilder("pg_catalog.pg_ts_template", PgTsTemplateFields)
  }
  override def insert(unsaved: PgTsTemplateRow): ZIO[ZConnection, Throwable, PgTsTemplateRow] = {
    sql"""insert into pg_catalog.pg_ts_template("oid", "tmplname", "tmplnamespace", "tmplinit", "tmpllexize")
          values (???::oid, ???::name, ???::oid, ???::regproc, ???::regproc)
          returning "oid", "tmplname", "tmplnamespace", "tmplinit", "tmpllexize"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgTsTemplateFields, PgTsTemplateRow] = {
    SelectBuilderSql("pg_catalog.pg_ts_template", PgTsTemplateFields, PgTsTemplateRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTsTemplateRow] = {
    sql"""select "oid", "tmplname", "tmplnamespace", "tmplinit", "tmpllexize" from pg_catalog.pg_ts_template""".query[PgTsTemplateRow].selectStream
  }
  override def selectById(oid: PgTsTemplateId): ZIO[ZConnection, Throwable, Option[PgTsTemplateRow]] = {
    sql"""select "oid", "tmplname", "tmplnamespace", "tmplinit", "tmpllexize" from pg_catalog.pg_ts_template where "oid" = ???""".query[PgTsTemplateRow].selectOne
  }
  override def selectByIds(oids: Array[PgTsTemplateId]): ZStream[ZConnection, Throwable, PgTsTemplateRow] = {
    sql"""select "oid", "tmplname", "tmplnamespace", "tmplinit", "tmpllexize" from pg_catalog.pg_ts_template where "oid" = ANY(${oids})""".query[PgTsTemplateRow].selectStream
  }
  override def selectByUnique(tmplname: String, tmplnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgTsTemplateRow]] = {
    sql"""select "tmplname", "tmplnamespace"
          from pg_catalog.pg_ts_template
          where "tmplname" = ??? AND "tmplnamespace" = ???
       """.query[PgTsTemplateRow].selectOne
  }
  override def update(row: PgTsTemplateRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_ts_template
          set "tmplname" = ???::name,
              "tmplnamespace" = ???::oid,
              "tmplinit" = ???::regproc,
              "tmpllexize" = ???::regproc
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTsTemplateFields, PgTsTemplateRow] = {
    UpdateBuilder("pg_catalog.pg_ts_template", PgTsTemplateFields, PgTsTemplateRow.read)
  }
  override def upsert(unsaved: PgTsTemplateRow): ZIO[ZConnection, Throwable, PgTsTemplateRow] = {
    sql"""insert into pg_catalog.pg_ts_template("oid", "tmplname", "tmplnamespace", "tmplinit", "tmpllexize")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::regproc,
            ???::regproc
          )
          on conflict ("oid")
          do update set
            "tmplname" = EXCLUDED."tmplname",
            "tmplnamespace" = EXCLUDED."tmplnamespace",
            "tmplinit" = EXCLUDED."tmplinit",
            "tmpllexize" = EXCLUDED."tmpllexize"
          returning "oid", "tmplname", "tmplnamespace", "tmplinit", "tmpllexize"
       """.query(???).unique
  }
}
