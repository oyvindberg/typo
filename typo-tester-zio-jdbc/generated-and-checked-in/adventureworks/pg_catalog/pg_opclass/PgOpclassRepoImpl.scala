/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opclass

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgOpclassRepoImpl extends PgOpclassRepo {
  override def delete(oid: PgOpclassId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_opclass where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgOpclassFields, PgOpclassRow] = {
    DeleteBuilder("pg_catalog.pg_opclass", PgOpclassFields)
  }
  override def insert(unsaved: PgOpclassRow): ZIO[ZConnection, Throwable, PgOpclassRow] = {
    sql"""insert into pg_catalog.pg_opclass("oid", "opcmethod", "opcname", "opcnamespace", "opcowner", "opcfamily", "opcintype", "opcdefault", "opckeytype")
          values (???::oid, ???::oid, ???::name, ???::oid, ???::oid, ???::oid, ???::oid, ???, ???::oid)
          returning "oid", "opcmethod", "opcname", "opcnamespace", "opcowner", "opcfamily", "opcintype", "opcdefault", "opckeytype"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgOpclassFields, PgOpclassRow] = {
    SelectBuilderSql("pg_catalog.pg_opclass", PgOpclassFields, PgOpclassRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgOpclassRow] = {
    sql"""select "oid", "opcmethod", "opcname", "opcnamespace", "opcowner", "opcfamily", "opcintype", "opcdefault", "opckeytype" from pg_catalog.pg_opclass""".query[PgOpclassRow].selectStream
  }
  override def selectById(oid: PgOpclassId): ZIO[ZConnection, Throwable, Option[PgOpclassRow]] = {
    sql"""select "oid", "opcmethod", "opcname", "opcnamespace", "opcowner", "opcfamily", "opcintype", "opcdefault", "opckeytype" from pg_catalog.pg_opclass where "oid" = ???""".query[PgOpclassRow].selectOne
  }
  override def selectByIds(oids: Array[PgOpclassId]): ZStream[ZConnection, Throwable, PgOpclassRow] = {
    sql"""select "oid", "opcmethod", "opcname", "opcnamespace", "opcowner", "opcfamily", "opcintype", "opcdefault", "opckeytype" from pg_catalog.pg_opclass where "oid" = ANY(${oids})""".query[PgOpclassRow].selectStream
  }
  override def selectByUnique(opcmethod: /* oid */ Long, opcname: String, opcnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgOpclassRow]] = {
    sql"""select "opcmethod", "opcname", "opcnamespace"
          from pg_catalog.pg_opclass
          where "opcmethod" = ??? AND "opcname" = ??? AND "opcnamespace" = ???
       """.query[PgOpclassRow].selectOne
  }
  override def update(row: PgOpclassRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_opclass
          set "opcmethod" = ???::oid,
              "opcname" = ???::name,
              "opcnamespace" = ???::oid,
              "opcowner" = ???::oid,
              "opcfamily" = ???::oid,
              "opcintype" = ???::oid,
              "opcdefault" = ???,
              "opckeytype" = ???::oid
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgOpclassFields, PgOpclassRow] = {
    UpdateBuilder("pg_catalog.pg_opclass", PgOpclassFields, PgOpclassRow.read)
  }
  override def upsert(unsaved: PgOpclassRow): ZIO[ZConnection, Throwable, PgOpclassRow] = {
    sql"""insert into pg_catalog.pg_opclass("oid", "opcmethod", "opcname", "opcnamespace", "opcowner", "opcfamily", "opcintype", "opcdefault", "opckeytype")
          values (
            ???::oid,
            ???::oid,
            ???::name,
            ???::oid,
            ???::oid,
            ???::oid,
            ???::oid,
            ???,
            ???::oid
          )
          on conflict ("oid")
          do update set
            "opcmethod" = EXCLUDED."opcmethod",
            "opcname" = EXCLUDED."opcname",
            "opcnamespace" = EXCLUDED."opcnamespace",
            "opcowner" = EXCLUDED."opcowner",
            "opcfamily" = EXCLUDED."opcfamily",
            "opcintype" = EXCLUDED."opcintype",
            "opcdefault" = EXCLUDED."opcdefault",
            "opckeytype" = EXCLUDED."opckeytype"
          returning "oid", "opcmethod", "opcname", "opcnamespace", "opcowner", "opcfamily", "opcintype", "opcdefault", "opckeytype"
       """.query(???).unique
  }
}
