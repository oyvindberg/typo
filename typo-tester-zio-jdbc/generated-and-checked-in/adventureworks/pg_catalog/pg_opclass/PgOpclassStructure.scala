/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opclass

import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

class PgOpclassStructure[Row](val prefix: Option[String], val extract: Row => PgOpclassRow, val merge: (Row, PgOpclassRow) => Row)
  extends Relation[PgOpclassFields, PgOpclassRow, Row]
    with PgOpclassFields[Row] { outer =>

  override val oid = new IdField[PgOpclassId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val opcmethod = new Field[/* oid */ Long, Row](prefix, "opcmethod", None, Some("oid"))(x => extract(x).opcmethod, (row, value) => merge(row, extract(row).copy(opcmethod = value)))
  override val opcname = new Field[String, Row](prefix, "opcname", None, Some("name"))(x => extract(x).opcname, (row, value) => merge(row, extract(row).copy(opcname = value)))
  override val opcnamespace = new Field[/* oid */ Long, Row](prefix, "opcnamespace", None, Some("oid"))(x => extract(x).opcnamespace, (row, value) => merge(row, extract(row).copy(opcnamespace = value)))
  override val opcowner = new Field[/* oid */ Long, Row](prefix, "opcowner", None, Some("oid"))(x => extract(x).opcowner, (row, value) => merge(row, extract(row).copy(opcowner = value)))
  override val opcfamily = new Field[/* oid */ Long, Row](prefix, "opcfamily", None, Some("oid"))(x => extract(x).opcfamily, (row, value) => merge(row, extract(row).copy(opcfamily = value)))
  override val opcintype = new Field[/* oid */ Long, Row](prefix, "opcintype", None, Some("oid"))(x => extract(x).opcintype, (row, value) => merge(row, extract(row).copy(opcintype = value)))
  override val opcdefault = new Field[Boolean, Row](prefix, "opcdefault", None, None)(x => extract(x).opcdefault, (row, value) => merge(row, extract(row).copy(opcdefault = value)))
  override val opckeytype = new Field[/* oid */ Long, Row](prefix, "opckeytype", None, Some("oid"))(x => extract(x).opckeytype, (row, value) => merge(row, extract(row).copy(opckeytype = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgOpclassRow, merge: (NewRow, PgOpclassRow) => NewRow): PgOpclassStructure[NewRow] =
    new PgOpclassStructure(prefix, extract, merge)
}
