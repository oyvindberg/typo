/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_locks

import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoXid
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgLocksViewRow(
  locktype: /* nullability unknown */ Option[String],
  database: /* nullability unknown */ Option[/* oid */ Long],
  relation: /* nullability unknown */ Option[/* oid */ Long],
  page: /* nullability unknown */ Option[Int],
  tuple: /* nullability unknown */ Option[TypoShort],
  virtualxid: /* nullability unknown */ Option[String],
  transactionid: /* nullability unknown */ Option[TypoXid],
  classid: /* nullability unknown */ Option[/* oid */ Long],
  objid: /* nullability unknown */ Option[/* oid */ Long],
  objsubid: /* nullability unknown */ Option[TypoShort],
  virtualtransaction: /* nullability unknown */ Option[String],
  pid: /* nullability unknown */ Option[Int],
  mode: /* nullability unknown */ Option[String],
  granted: /* nullability unknown */ Option[Boolean],
  fastpath: /* nullability unknown */ Option[Boolean],
  waitstart: /* nullability unknown */ Option[TypoInstant]
)

object PgLocksViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgLocksViewRow] = new JdbcDecoder[PgLocksViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgLocksViewRow) =
      columIndex + 15 ->
        PgLocksViewRow(
          locktype = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          database = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          relation = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 2, rs)._2,
          page = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 3, rs)._2,
          tuple = JdbcDecoder.optionDecoder(TypoShort.jdbcDecoder).unsafeDecode(columIndex + 4, rs)._2,
          virtualxid = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          transactionid = JdbcDecoder.optionDecoder(TypoXid.jdbcDecoder).unsafeDecode(columIndex + 6, rs)._2,
          classid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          objid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 8, rs)._2,
          objsubid = JdbcDecoder.optionDecoder(TypoShort.jdbcDecoder).unsafeDecode(columIndex + 9, rs)._2,
          virtualtransaction = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 10, rs)._2,
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 11, rs)._2,
          mode = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 12, rs)._2,
          granted = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 13, rs)._2,
          fastpath = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 14, rs)._2,
          waitstart = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 15, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgLocksViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val locktype = jsonObj.get("locktype").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val database = jsonObj.get("database").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val relation = jsonObj.get("relation").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val page = jsonObj.get("page").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val tuple = jsonObj.get("tuple").fold[Either[String, Option[TypoShort]]](Right(None))(_.as(JsonDecoder.option(TypoShort.jsonDecoder)))
    val virtualxid = jsonObj.get("virtualxid").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val transactionid = jsonObj.get("transactionid").fold[Either[String, Option[TypoXid]]](Right(None))(_.as(JsonDecoder.option(TypoXid.jsonDecoder)))
    val classid = jsonObj.get("classid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val objid = jsonObj.get("objid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val objsubid = jsonObj.get("objsubid").fold[Either[String, Option[TypoShort]]](Right(None))(_.as(JsonDecoder.option(TypoShort.jsonDecoder)))
    val virtualtransaction = jsonObj.get("virtualtransaction").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val mode = jsonObj.get("mode").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val granted = jsonObj.get("granted").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val fastpath = jsonObj.get("fastpath").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val waitstart = jsonObj.get("waitstart").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    if (locktype.isRight && database.isRight && relation.isRight && page.isRight && tuple.isRight && virtualxid.isRight && transactionid.isRight && classid.isRight && objid.isRight && objsubid.isRight && virtualtransaction.isRight && pid.isRight && mode.isRight && granted.isRight && fastpath.isRight && waitstart.isRight)
      Right(PgLocksViewRow(locktype = locktype.toOption.get, database = database.toOption.get, relation = relation.toOption.get, page = page.toOption.get, tuple = tuple.toOption.get, virtualxid = virtualxid.toOption.get, transactionid = transactionid.toOption.get, classid = classid.toOption.get, objid = objid.toOption.get, objsubid = objsubid.toOption.get, virtualtransaction = virtualtransaction.toOption.get, pid = pid.toOption.get, mode = mode.toOption.get, granted = granted.toOption.get, fastpath = fastpath.toOption.get, waitstart = waitstart.toOption.get))
    else Left(List[Either[String, Any]](locktype, database, relation, page, tuple, virtualxid, transactionid, classid, objid, objsubid, virtualtransaction, pid, mode, granted, fastpath, waitstart).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgLocksViewRow] = new JsonEncoder[PgLocksViewRow] {
    override def unsafeEncode(a: PgLocksViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""locktype":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.locktype, indent, out)
      out.write(",")
      out.write(""""database":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.database, indent, out)
      out.write(",")
      out.write(""""relation":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.relation, indent, out)
      out.write(",")
      out.write(""""page":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.page, indent, out)
      out.write(",")
      out.write(""""tuple":""")
      JsonEncoder.option(TypoShort.jsonEncoder).unsafeEncode(a.tuple, indent, out)
      out.write(",")
      out.write(""""virtualxid":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.virtualxid, indent, out)
      out.write(",")
      out.write(""""transactionid":""")
      JsonEncoder.option(TypoXid.jsonEncoder).unsafeEncode(a.transactionid, indent, out)
      out.write(",")
      out.write(""""classid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.classid, indent, out)
      out.write(",")
      out.write(""""objid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.objid, indent, out)
      out.write(",")
      out.write(""""objsubid":""")
      JsonEncoder.option(TypoShort.jsonEncoder).unsafeEncode(a.objsubid, indent, out)
      out.write(",")
      out.write(""""virtualtransaction":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.virtualtransaction, indent, out)
      out.write(",")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""mode":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.mode, indent, out)
      out.write(",")
      out.write(""""granted":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.granted, indent, out)
      out.write(",")
      out.write(""""fastpath":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.fastpath, indent, out)
      out.write(",")
      out.write(""""waitstart":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.waitstart, indent, out)
      out.write("}")
    }
  }
}
