/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_locks

import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoXid
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgLocksViewStructure[Row](val prefix: Option[String], val extract: Row => PgLocksViewRow, val merge: (Row, PgLocksViewRow) => Row)
  extends Relation[PgLocksViewFields, PgLocksViewRow, Row]
    with PgLocksViewFields[Row] { outer =>

  override val locktype = new OptField[String, Row](prefix, "locktype", None, None)(x => extract(x).locktype, (row, value) => merge(row, extract(row).copy(locktype = value)))
  override val database = new OptField[/* oid */ Long, Row](prefix, "database", None, None)(x => extract(x).database, (row, value) => merge(row, extract(row).copy(database = value)))
  override val relation = new OptField[/* oid */ Long, Row](prefix, "relation", None, None)(x => extract(x).relation, (row, value) => merge(row, extract(row).copy(relation = value)))
  override val page = new OptField[Int, Row](prefix, "page", None, None)(x => extract(x).page, (row, value) => merge(row, extract(row).copy(page = value)))
  override val tuple = new OptField[TypoShort, Row](prefix, "tuple", None, None)(x => extract(x).tuple, (row, value) => merge(row, extract(row).copy(tuple = value)))
  override val virtualxid = new OptField[String, Row](prefix, "virtualxid", None, None)(x => extract(x).virtualxid, (row, value) => merge(row, extract(row).copy(virtualxid = value)))
  override val transactionid = new OptField[TypoXid, Row](prefix, "transactionid", None, None)(x => extract(x).transactionid, (row, value) => merge(row, extract(row).copy(transactionid = value)))
  override val classid = new OptField[/* oid */ Long, Row](prefix, "classid", None, None)(x => extract(x).classid, (row, value) => merge(row, extract(row).copy(classid = value)))
  override val objid = new OptField[/* oid */ Long, Row](prefix, "objid", None, None)(x => extract(x).objid, (row, value) => merge(row, extract(row).copy(objid = value)))
  override val objsubid = new OptField[TypoShort, Row](prefix, "objsubid", None, None)(x => extract(x).objsubid, (row, value) => merge(row, extract(row).copy(objsubid = value)))
  override val virtualtransaction = new OptField[String, Row](prefix, "virtualtransaction", None, None)(x => extract(x).virtualtransaction, (row, value) => merge(row, extract(row).copy(virtualtransaction = value)))
  override val pid = new OptField[Int, Row](prefix, "pid", None, None)(x => extract(x).pid, (row, value) => merge(row, extract(row).copy(pid = value)))
  override val mode = new OptField[String, Row](prefix, "mode", None, None)(x => extract(x).mode, (row, value) => merge(row, extract(row).copy(mode = value)))
  override val granted = new OptField[Boolean, Row](prefix, "granted", None, None)(x => extract(x).granted, (row, value) => merge(row, extract(row).copy(granted = value)))
  override val fastpath = new OptField[Boolean, Row](prefix, "fastpath", None, None)(x => extract(x).fastpath, (row, value) => merge(row, extract(row).copy(fastpath = value)))
  override val waitstart = new OptField[TypoInstant, Row](prefix, "waitstart", Some("text"), None)(x => extract(x).waitstart, (row, value) => merge(row, extract(row).copy(waitstart = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](locktype, database, relation, page, tuple, virtualxid, transactionid, classid, objid, objsubid, virtualtransaction, pid, mode, granted, fastpath, waitstart)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgLocksViewRow, merge: (NewRow, PgLocksViewRow) => NewRow): PgLocksViewStructure[NewRow] =
    new PgLocksViewStructure(prefix, extract, merge)
}
