/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgTsConfigRepoImpl extends PgTsConfigRepo {
  override def delete(oid: PgTsConfigId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_ts_config where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTsConfigFields, PgTsConfigRow] = {
    DeleteBuilder("pg_catalog.pg_ts_config", PgTsConfigFields)
  }
  override def insert(unsaved: PgTsConfigRow): ZIO[ZConnection, Throwable, PgTsConfigRow] = {
    sql"""insert into pg_catalog.pg_ts_config("oid", "cfgname", "cfgnamespace", "cfgowner", "cfgparser")
          values (???::oid, ???::name, ???::oid, ???::oid, ???::oid)
          returning "oid", "cfgname", "cfgnamespace", "cfgowner", "cfgparser"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgTsConfigFields, PgTsConfigRow] = {
    SelectBuilderSql("pg_catalog.pg_ts_config", PgTsConfigFields, PgTsConfigRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTsConfigRow] = {
    sql"""select "oid", "cfgname", "cfgnamespace", "cfgowner", "cfgparser" from pg_catalog.pg_ts_config""".query[PgTsConfigRow].selectStream
  }
  override def selectById(oid: PgTsConfigId): ZIO[ZConnection, Throwable, Option[PgTsConfigRow]] = {
    sql"""select "oid", "cfgname", "cfgnamespace", "cfgowner", "cfgparser" from pg_catalog.pg_ts_config where "oid" = ???""".query[PgTsConfigRow].selectOne
  }
  override def selectByIds(oids: Array[PgTsConfigId]): ZStream[ZConnection, Throwable, PgTsConfigRow] = {
    sql"""select "oid", "cfgname", "cfgnamespace", "cfgowner", "cfgparser" from pg_catalog.pg_ts_config where "oid" = ANY(${oids})""".query[PgTsConfigRow].selectStream
  }
  override def selectByUnique(cfgname: String, cfgnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgTsConfigRow]] = {
    sql"""select "cfgname", "cfgnamespace"
          from pg_catalog.pg_ts_config
          where "cfgname" = ??? AND "cfgnamespace" = ???
       """.query[PgTsConfigRow].selectOne
  }
  override def update(row: PgTsConfigRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_ts_config
          set "cfgname" = ???::name,
              "cfgnamespace" = ???::oid,
              "cfgowner" = ???::oid,
              "cfgparser" = ???::oid
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTsConfigFields, PgTsConfigRow] = {
    UpdateBuilder("pg_catalog.pg_ts_config", PgTsConfigFields, PgTsConfigRow.read)
  }
  override def upsert(unsaved: PgTsConfigRow): ZIO[ZConnection, Throwable, PgTsConfigRow] = {
    sql"""insert into pg_catalog.pg_ts_config("oid", "cfgname", "cfgnamespace", "cfgowner", "cfgparser")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::oid,
            ???::oid
          )
          on conflict ("oid")
          do update set
            "cfgname" = EXCLUDED."cfgname",
            "cfgnamespace" = EXCLUDED."cfgnamespace",
            "cfgowner" = EXCLUDED."cfgowner",
            "cfgparser" = EXCLUDED."cfgparser"
          returning "oid", "cfgname", "cfgnamespace", "cfgowner", "cfgparser"
       """.query(???).unique
  }
}
