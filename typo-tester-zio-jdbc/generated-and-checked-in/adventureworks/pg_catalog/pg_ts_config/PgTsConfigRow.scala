/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgTsConfigRow(
  oid: PgTsConfigId,
  cfgname: String,
  cfgnamespace: /* oid */ Long,
  cfgowner: /* oid */ Long,
  cfgparser: /* oid */ Long
)

object PgTsConfigRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgTsConfigRow] = new JdbcDecoder[PgTsConfigRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgTsConfigRow) =
      columIndex + 4 ->
        PgTsConfigRow(
          oid = PgTsConfigId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          cfgname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          cfgnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          cfgowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          cfgparser = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgTsConfigRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgTsConfigId.jsonDecoder))
    val cfgname = jsonObj.get("cfgname").toRight("Missing field 'cfgname'").flatMap(_.as(JsonDecoder.string))
    val cfgnamespace = jsonObj.get("cfgnamespace").toRight("Missing field 'cfgnamespace'").flatMap(_.as(JsonDecoder.long))
    val cfgowner = jsonObj.get("cfgowner").toRight("Missing field 'cfgowner'").flatMap(_.as(JsonDecoder.long))
    val cfgparser = jsonObj.get("cfgparser").toRight("Missing field 'cfgparser'").flatMap(_.as(JsonDecoder.long))
    if (oid.isRight && cfgname.isRight && cfgnamespace.isRight && cfgowner.isRight && cfgparser.isRight)
      Right(PgTsConfigRow(oid = oid.toOption.get, cfgname = cfgname.toOption.get, cfgnamespace = cfgnamespace.toOption.get, cfgowner = cfgowner.toOption.get, cfgparser = cfgparser.toOption.get))
    else Left(List[Either[String, Any]](oid, cfgname, cfgnamespace, cfgowner, cfgparser).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTsConfigRow] = new JsonEncoder[PgTsConfigRow] {
    override def unsafeEncode(a: PgTsConfigRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgTsConfigId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""cfgname":""")
      JsonEncoder.string.unsafeEncode(a.cfgname, indent, out)
      out.write(",")
      out.write(""""cfgnamespace":""")
      JsonEncoder.long.unsafeEncode(a.cfgnamespace, indent, out)
      out.write(",")
      out.write(""""cfgowner":""")
      JsonEncoder.long.unsafeEncode(a.cfgowner, indent, out)
      out.write(",")
      out.write(""""cfgparser":""")
      JsonEncoder.long.unsafeEncode(a.cfgparser, indent, out)
      out.write("}")
    }
  }
}
