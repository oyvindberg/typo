/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_default_acl

import adventureworks.customtypes.TypoAclItem
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgDefaultAclRow(
  oid: PgDefaultAclId,
  defaclrole: /* oid */ Long,
  defaclnamespace: /* oid */ Long,
  defaclobjtype: String,
  defaclacl: Array[TypoAclItem]
)

object PgDefaultAclRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgDefaultAclRow] = new JdbcDecoder[PgDefaultAclRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgDefaultAclRow) =
      columIndex + 4 ->
        PgDefaultAclRow(
          oid = PgDefaultAclId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          defaclrole = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          defaclnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          defaclobjtype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          defaclacl = JdbcDecoder[Array[TypoAclItem]].unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgDefaultAclRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgDefaultAclId.jsonDecoder))
    val defaclrole = jsonObj.get("defaclrole").toRight("Missing field 'defaclrole'").flatMap(_.as(JsonDecoder.long))
    val defaclnamespace = jsonObj.get("defaclnamespace").toRight("Missing field 'defaclnamespace'").flatMap(_.as(JsonDecoder.long))
    val defaclobjtype = jsonObj.get("defaclobjtype").toRight("Missing field 'defaclobjtype'").flatMap(_.as(JsonDecoder.string))
    val defaclacl = jsonObj.get("defaclacl").toRight("Missing field 'defaclacl'").flatMap(_.as(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly)))
    if (oid.isRight && defaclrole.isRight && defaclnamespace.isRight && defaclobjtype.isRight && defaclacl.isRight)
      Right(PgDefaultAclRow(oid = oid.toOption.get, defaclrole = defaclrole.toOption.get, defaclnamespace = defaclnamespace.toOption.get, defaclobjtype = defaclobjtype.toOption.get, defaclacl = defaclacl.toOption.get))
    else Left(List[Either[String, Any]](oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgDefaultAclRow] = new JsonEncoder[PgDefaultAclRow] {
    override def unsafeEncode(a: PgDefaultAclRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgDefaultAclId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""defaclrole":""")
      JsonEncoder.long.unsafeEncode(a.defaclrole, indent, out)
      out.write(",")
      out.write(""""defaclnamespace":""")
      JsonEncoder.long.unsafeEncode(a.defaclnamespace, indent, out)
      out.write(",")
      out.write(""""defaclobjtype":""")
      JsonEncoder.string.unsafeEncode(a.defaclobjtype, indent, out)
      out.write(",")
      out.write(""""defaclacl":""")
      JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly).unsafeEncode(a.defaclacl, indent, out)
      out.write("}")
    }
  }
}
