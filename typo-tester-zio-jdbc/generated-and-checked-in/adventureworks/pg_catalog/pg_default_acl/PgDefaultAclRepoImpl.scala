/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_default_acl

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgDefaultAclRepoImpl extends PgDefaultAclRepo {
  override def delete(oid: PgDefaultAclId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_default_acl where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgDefaultAclFields, PgDefaultAclRow] = {
    DeleteBuilder("pg_catalog.pg_default_acl", PgDefaultAclFields)
  }
  override def insert(unsaved: PgDefaultAclRow): ZIO[ZConnection, Throwable, PgDefaultAclRow] = {
    sql"""insert into pg_catalog.pg_default_acl("oid", "defaclrole", "defaclnamespace", "defaclobjtype", "defaclacl")
          values (???::oid, ???::oid, ???::oid, ???::char, ???::_aclitem)
          returning "oid", "defaclrole", "defaclnamespace", "defaclobjtype", "defaclacl"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgDefaultAclFields, PgDefaultAclRow] = {
    SelectBuilderSql("pg_catalog.pg_default_acl", PgDefaultAclFields, PgDefaultAclRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgDefaultAclRow] = {
    sql"""select "oid", "defaclrole", "defaclnamespace", "defaclobjtype", "defaclacl" from pg_catalog.pg_default_acl""".query[PgDefaultAclRow].selectStream
  }
  override def selectById(oid: PgDefaultAclId): ZIO[ZConnection, Throwable, Option[PgDefaultAclRow]] = {
    sql"""select "oid", "defaclrole", "defaclnamespace", "defaclobjtype", "defaclacl" from pg_catalog.pg_default_acl where "oid" = ???""".query[PgDefaultAclRow].selectOne
  }
  override def selectByIds(oids: Array[PgDefaultAclId]): ZStream[ZConnection, Throwable, PgDefaultAclRow] = {
    sql"""select "oid", "defaclrole", "defaclnamespace", "defaclobjtype", "defaclacl" from pg_catalog.pg_default_acl where "oid" = ANY(${oids})""".query[PgDefaultAclRow].selectStream
  }
  override def selectByUnique(defaclrole: /* oid */ Long, defaclnamespace: /* oid */ Long, defaclobjtype: String): ZIO[ZConnection, Throwable, Option[PgDefaultAclRow]] = {
    sql"""select "defaclrole", "defaclnamespace", "defaclobjtype"
          from pg_catalog.pg_default_acl
          where "defaclrole" = ??? AND "defaclnamespace" = ??? AND "defaclobjtype" = ???
       """.query[PgDefaultAclRow].selectOne
  }
  override def update(row: PgDefaultAclRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_default_acl
          set "defaclrole" = ???::oid,
              "defaclnamespace" = ???::oid,
              "defaclobjtype" = ???::char,
              "defaclacl" = ???::_aclitem
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgDefaultAclFields, PgDefaultAclRow] = {
    UpdateBuilder("pg_catalog.pg_default_acl", PgDefaultAclFields, PgDefaultAclRow.read)
  }
  override def upsert(unsaved: PgDefaultAclRow): ZIO[ZConnection, Throwable, PgDefaultAclRow] = {
    sql"""insert into pg_catalog.pg_default_acl("oid", "defaclrole", "defaclnamespace", "defaclobjtype", "defaclacl")
          values (
            ???::oid,
            ???::oid,
            ???::oid,
            ???::char,
            ???::_aclitem
          )
          on conflict ("oid")
          do update set
            "defaclrole" = EXCLUDED."defaclrole",
            "defaclnamespace" = EXCLUDED."defaclnamespace",
            "defaclobjtype" = EXCLUDED."defaclobjtype",
            "defaclacl" = EXCLUDED."defaclacl"
          returning "oid", "defaclrole", "defaclnamespace", "defaclobjtype", "defaclacl"
       """.query(???).unique
  }
}
