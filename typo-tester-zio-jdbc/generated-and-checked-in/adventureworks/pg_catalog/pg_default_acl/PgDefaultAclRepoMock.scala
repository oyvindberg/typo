/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_default_acl

import scala.annotation.nowarn
import typo.dsl.DeleteBuilder
import typo.dsl.DeleteBuilder.DeleteBuilderMock
import typo.dsl.DeleteParams
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderMock
import typo.dsl.SelectParams
import typo.dsl.UpdateBuilder
import typo.dsl.UpdateBuilder.UpdateBuilderMock
import typo.dsl.UpdateParams
import zio.Chunk
import zio.ZIO
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.stream.ZStream

class PgDefaultAclRepoMock(map: scala.collection.mutable.Map[PgDefaultAclId, PgDefaultAclRow] = scala.collection.mutable.Map.empty) extends PgDefaultAclRepo {
  override def delete(oid: PgDefaultAclId): ZIO[ZConnection, Throwable, Boolean] = {
    ZIO.succeed(map.remove(oid).isDefined)
  }
  override def delete: DeleteBuilder[PgDefaultAclFields, PgDefaultAclRow] = {
    DeleteBuilderMock(DeleteParams.empty, PgDefaultAclFields, map)
  }
  override def insert(unsaved: PgDefaultAclRow): ZIO[ZConnection, Throwable, PgDefaultAclRow] = {
    ZIO.succeed {
      val _ =
        if (map.contains(unsaved.oid))
          sys.error(s"id ${unsaved.oid} already exists")
        else
          map.put(unsaved.oid, unsaved)
    
      unsaved
    }
  }
  override def select: SelectBuilder[PgDefaultAclFields, PgDefaultAclRow] = {
    SelectBuilderMock(PgDefaultAclFields, ZIO.succeed(Chunk.fromIterable(map.values)), SelectParams.empty)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgDefaultAclRow] = {
    ZStream.fromIterable(map.values)
  }
  override def selectById(oid: PgDefaultAclId): ZIO[ZConnection, Throwable, Option[PgDefaultAclRow]] = {
    ZIO.succeed(map.get(oid))
  }
  override def selectByIds(oids: Array[PgDefaultAclId]): ZStream[ZConnection, Throwable, PgDefaultAclRow] = {
    ZStream.fromIterable(oids.flatMap(map.get))
  }
  override def selectByUnique(defaclrole: /* oid */ Long, defaclnamespace: /* oid */ Long, defaclobjtype: String): ZIO[ZConnection, Throwable, Option[PgDefaultAclRow]] = {
    ZIO.succeed(map.values.find(v => defaclrole == v.defaclrole && defaclnamespace == v.defaclnamespace && defaclobjtype == v.defaclobjtype))
  }
  override def update(row: PgDefaultAclRow): ZIO[ZConnection, Throwable, Boolean] = {
    ZIO.succeed {
      map.get(row.oid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.oid, row): @nowarn
          true
        case None => false
      }
    }
  }
  override def update: UpdateBuilder[PgDefaultAclFields, PgDefaultAclRow] = {
    UpdateBuilderMock(UpdateParams.empty, PgDefaultAclFields, map)
  }
  override def upsert(unsaved: PgDefaultAclRow): ZIO[ZConnection, Throwable, UpdateResult[PgDefaultAclRow]] = {
    ZIO.succeed {
      map.put(unsaved.oid, unsaved): @nowarn
      UpdateResult(1, Chunk.single(unsaved))
    }
  }
}
