/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_subscription_rel

import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `pg_catalog.pg_subscription_rel` */
case class PgSubscriptionRelId(srrelid: /* oid */ Long, srsubid: /* oid */ Long)
object PgSubscriptionRelId {
  implicit lazy val jsonDecoder: JsonDecoder[PgSubscriptionRelId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val srrelid = jsonObj.get("srrelid").toRight("Missing field 'srrelid'").flatMap(_.as(JsonDecoder.long))
    val srsubid = jsonObj.get("srsubid").toRight("Missing field 'srsubid'").flatMap(_.as(JsonDecoder.long))
    if (srrelid.isRight && srsubid.isRight)
      Right(PgSubscriptionRelId(srrelid = srrelid.toOption.get, srsubid = srsubid.toOption.get))
    else Left(List[Either[String, Any]](srrelid, srsubid).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgSubscriptionRelId] = new JsonEncoder[PgSubscriptionRelId] {
    override def unsafeEncode(a: PgSubscriptionRelId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""srrelid":""")
      JsonEncoder.long.unsafeEncode(a.srrelid, indent, out)
      out.write(",")
      out.write(""""srsubid":""")
      JsonEncoder.long.unsafeEncode(a.srsubid, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[PgSubscriptionRelId] = Ordering.by(x => (x.srrelid, x.srsubid))
}
