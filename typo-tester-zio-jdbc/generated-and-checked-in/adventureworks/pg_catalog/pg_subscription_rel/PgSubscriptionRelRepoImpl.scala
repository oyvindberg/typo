/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_subscription_rel

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgSubscriptionRelRepoImpl extends PgSubscriptionRelRepo {
  override def delete(compositeId: PgSubscriptionRelId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_subscription_rel where "srrelid" = ??? AND "srsubid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgSubscriptionRelFields, PgSubscriptionRelRow] = {
    DeleteBuilder("pg_catalog.pg_subscription_rel", PgSubscriptionRelFields)
  }
  override def insert(unsaved: PgSubscriptionRelRow): ZIO[ZConnection, Throwable, PgSubscriptionRelRow] = {
    sql"""insert into pg_catalog.pg_subscription_rel("srsubid", "srrelid", "srsubstate", "srsublsn")
          values (???::oid, ???::oid, ???::char, ???::pg_lsn)
          returning "srsubid", "srrelid", "srsubstate", "srsublsn"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgSubscriptionRelFields, PgSubscriptionRelRow] = {
    SelectBuilderSql("pg_catalog.pg_subscription_rel", PgSubscriptionRelFields, PgSubscriptionRelRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgSubscriptionRelRow] = {
    sql"""select "srsubid", "srrelid", "srsubstate", "srsublsn" from pg_catalog.pg_subscription_rel""".query[PgSubscriptionRelRow].selectStream
  }
  override def selectById(compositeId: PgSubscriptionRelId): ZIO[ZConnection, Throwable, Option[PgSubscriptionRelRow]] = {
    sql"""select "srsubid", "srrelid", "srsubstate", "srsublsn" from pg_catalog.pg_subscription_rel where "srrelid" = ??? AND "srsubid" = ???""".query[PgSubscriptionRelRow].selectOne
  }
  override def update(row: PgSubscriptionRelRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_subscription_rel
          set "srsubstate" = ???::char,
              "srsublsn" = ???::pg_lsn
          where "srrelid" = ??? AND "srsubid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgSubscriptionRelFields, PgSubscriptionRelRow] = {
    UpdateBuilder("pg_catalog.pg_subscription_rel", PgSubscriptionRelFields, PgSubscriptionRelRow.read)
  }
  override def upsert(unsaved: PgSubscriptionRelRow): ZIO[ZConnection, Throwable, PgSubscriptionRelRow] = {
    sql"""insert into pg_catalog.pg_subscription_rel("srsubid", "srrelid", "srsubstate", "srsublsn")
          values (
            ???::oid,
            ???::oid,
            ???::char,
            ???::pg_lsn
          )
          on conflict ("srrelid", "srsubid")
          do update set
            "srsubstate" = EXCLUDED."srsubstate",
            "srsublsn" = EXCLUDED."srsublsn"
          returning "srsubid", "srrelid", "srsubstate", "srsublsn"
       """.query(???).unique
  }
}
