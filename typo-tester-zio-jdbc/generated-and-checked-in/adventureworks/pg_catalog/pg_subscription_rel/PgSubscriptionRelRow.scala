/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_subscription_rel

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgSubscriptionRelRow(
  srsubid: /* oid */ Long,
  srrelid: /* oid */ Long,
  srsubstate: String,
  srsublsn: Option[/* pg_lsn */ Long]
){
   val compositeId: PgSubscriptionRelId = PgSubscriptionRelId(srrelid, srsubid)
 }

object PgSubscriptionRelRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgSubscriptionRelRow] = new JdbcDecoder[PgSubscriptionRelRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgSubscriptionRelRow) =
      columIndex + 3 ->
        PgSubscriptionRelRow(
          srsubid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 0, rs)._2,
          srrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          srsubstate = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          srsublsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgSubscriptionRelRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val srsubid = jsonObj.get("srsubid").toRight("Missing field 'srsubid'").flatMap(_.as(JsonDecoder.long))
    val srrelid = jsonObj.get("srrelid").toRight("Missing field 'srrelid'").flatMap(_.as(JsonDecoder.long))
    val srsubstate = jsonObj.get("srsubstate").toRight("Missing field 'srsubstate'").flatMap(_.as(JsonDecoder.string))
    val srsublsn = jsonObj.get("srsublsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (srsubid.isRight && srrelid.isRight && srsubstate.isRight && srsublsn.isRight)
      Right(PgSubscriptionRelRow(srsubid = srsubid.toOption.get, srrelid = srrelid.toOption.get, srsubstate = srsubstate.toOption.get, srsublsn = srsublsn.toOption.get))
    else Left(List[Either[String, Any]](srsubid, srrelid, srsubstate, srsublsn).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgSubscriptionRelRow] = new JsonEncoder[PgSubscriptionRelRow] {
    override def unsafeEncode(a: PgSubscriptionRelRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""srsubid":""")
      JsonEncoder.long.unsafeEncode(a.srsubid, indent, out)
      out.write(",")
      out.write(""""srrelid":""")
      JsonEncoder.long.unsafeEncode(a.srrelid, indent, out)
      out.write(",")
      out.write(""""srsubstate":""")
      JsonEncoder.string.unsafeEncode(a.srsubstate, indent, out)
      out.write(",")
      out.write(""""srsublsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.srsublsn, indent, out)
      out.write("}")
    }
  }
}
