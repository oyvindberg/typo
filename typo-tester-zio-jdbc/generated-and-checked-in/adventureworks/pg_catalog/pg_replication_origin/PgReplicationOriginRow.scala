/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_origin

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgReplicationOriginRow(
  roident: PgReplicationOriginId,
  roname: String
)

object PgReplicationOriginRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgReplicationOriginRow] = new JdbcDecoder[PgReplicationOriginRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgReplicationOriginRow) =
      columIndex + 1 ->
        PgReplicationOriginRow(
          roident = PgReplicationOriginId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          roname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgReplicationOriginRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val roident = jsonObj.get("roident").toRight("Missing field 'roident'").flatMap(_.as(PgReplicationOriginId.jsonDecoder))
    val roname = jsonObj.get("roname").toRight("Missing field 'roname'").flatMap(_.as(JsonDecoder.string))
    if (roident.isRight && roname.isRight)
      Right(PgReplicationOriginRow(roident = roident.toOption.get, roname = roname.toOption.get))
    else Left(List[Either[String, Any]](roident, roname).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgReplicationOriginRow] = new JsonEncoder[PgReplicationOriginRow] {
    override def unsafeEncode(a: PgReplicationOriginRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""roident":""")
      PgReplicationOriginId.jsonEncoder.unsafeEncode(a.roident, indent, out)
      out.write(",")
      out.write(""""roname":""")
      JsonEncoder.string.unsafeEncode(a.roname, indent, out)
      out.write("}")
    }
  }
}
