/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_origin

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgReplicationOriginRepoImpl extends PgReplicationOriginRepo {
  override def delete(roident: PgReplicationOriginId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_replication_origin where "roident" = ${Segment.paramSegment(roident)(PgReplicationOriginId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgReplicationOriginFields, PgReplicationOriginRow] = {
    DeleteBuilder("pg_catalog.pg_replication_origin", PgReplicationOriginFields)
  }
  override def insert(unsaved: PgReplicationOriginRow): ZIO[ZConnection, Throwable, PgReplicationOriginRow] = {
    sql"""insert into pg_catalog.pg_replication_origin("roident", "roname")
          values (${Segment.paramSegment(unsaved.roident)(PgReplicationOriginId.setter)}::oid, ${Segment.paramSegment(unsaved.roname)(Setter.stringSetter)})
          returning "roident", "roname"
       """.insertReturning(PgReplicationOriginRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgReplicationOriginFields, PgReplicationOriginRow] = {
    SelectBuilderSql("pg_catalog.pg_replication_origin", PgReplicationOriginFields, PgReplicationOriginRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgReplicationOriginRow] = {
    sql"""select "roident", "roname" from pg_catalog.pg_replication_origin""".query(PgReplicationOriginRow.jdbcDecoder).selectStream
  }
  override def selectById(roident: PgReplicationOriginId): ZIO[ZConnection, Throwable, Option[PgReplicationOriginRow]] = {
    sql"""select "roident", "roname" from pg_catalog.pg_replication_origin where "roident" = ${Segment.paramSegment(roident)(PgReplicationOriginId.setter)}""".query(PgReplicationOriginRow.jdbcDecoder).selectOne
  }
  override def selectByIds(roidents: Array[PgReplicationOriginId]): ZStream[ZConnection, Throwable, PgReplicationOriginRow] = {
    sql"""select "roident", "roname" from pg_catalog.pg_replication_origin where "roident" = ANY(${Segment.paramSegment(roidents)(PgReplicationOriginId.arraySetter)})""".query(PgReplicationOriginRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(roname: String): ZIO[ZConnection, Throwable, Option[PgReplicationOriginRow]] = {
    sql"""select "roname"
          from pg_catalog.pg_replication_origin
          where "roname" = ${Segment.paramSegment(roname)(Setter.stringSetter)}
       """.query(PgReplicationOriginRow.jdbcDecoder).selectOne
  }
  override def update(row: PgReplicationOriginRow): ZIO[ZConnection, Throwable, Boolean] = {
    val roident = row.roident
    sql"""update pg_catalog.pg_replication_origin
          set "roname" = ${Segment.paramSegment(row.roname)(Setter.stringSetter)}
          where "roident" = ${Segment.paramSegment(roident)(PgReplicationOriginId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgReplicationOriginFields, PgReplicationOriginRow] = {
    UpdateBuilder("pg_catalog.pg_replication_origin", PgReplicationOriginFields, PgReplicationOriginRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgReplicationOriginRow): ZIO[ZConnection, Throwable, UpdateResult[PgReplicationOriginRow]] = {
    sql"""insert into pg_catalog.pg_replication_origin("roident", "roname")
          values (
            ${Segment.paramSegment(unsaved.roident)(PgReplicationOriginId.setter)}::oid,
            ${Segment.paramSegment(unsaved.roname)(Setter.stringSetter)}
          )
          on conflict ("roident")
          do update set
            "roname" = EXCLUDED."roname"
          returning "roident", "roname"""".insertReturning(PgReplicationOriginRow.jdbcDecoder)
  }
}
