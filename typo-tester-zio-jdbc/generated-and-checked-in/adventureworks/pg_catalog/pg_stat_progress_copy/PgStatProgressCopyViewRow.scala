/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_copy

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatProgressCopyViewRow(
  pid: /* nullability unknown */ Option[Int],
  datid: /* nullability unknown */ Option[/* oid */ Long],
  /** Points to [[pg_database.PgDatabaseRow.datname]] */
  datname: Option[String],
  relid: /* nullability unknown */ Option[/* oid */ Long],
  command: /* nullability unknown */ Option[String],
  `type`: /* nullability unknown */ Option[String],
  bytesProcessed: /* nullability unknown */ Option[Long],
  bytesTotal: /* nullability unknown */ Option[Long],
  tuplesProcessed: /* nullability unknown */ Option[Long],
  tuplesExcluded: /* nullability unknown */ Option[Long]
)

object PgStatProgressCopyViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatProgressCopyViewRow] = new JdbcDecoder[PgStatProgressCopyViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatProgressCopyViewRow) =
      columIndex + 9 ->
        PgStatProgressCopyViewRow(
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 0, rs)._2,
          datid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          datname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          relid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          command = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          `type` = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          bytesProcessed = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 6, rs)._2,
          bytesTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          tuplesProcessed = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 8, rs)._2,
          tuplesExcluded = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 9, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatProgressCopyViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val datid = jsonObj.get("datid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val datname = jsonObj.get("datname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val relid = jsonObj.get("relid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val command = jsonObj.get("command").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val `type` = jsonObj.get("type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val bytesProcessed = jsonObj.get("bytes_processed").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val bytesTotal = jsonObj.get("bytes_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tuplesProcessed = jsonObj.get("tuples_processed").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tuplesExcluded = jsonObj.get("tuples_excluded").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (pid.isRight && datid.isRight && datname.isRight && relid.isRight && command.isRight && `type`.isRight && bytesProcessed.isRight && bytesTotal.isRight && tuplesProcessed.isRight && tuplesExcluded.isRight)
      Right(PgStatProgressCopyViewRow(pid = pid.toOption.get, datid = datid.toOption.get, datname = datname.toOption.get, relid = relid.toOption.get, command = command.toOption.get, `type` = `type`.toOption.get, bytesProcessed = bytesProcessed.toOption.get, bytesTotal = bytesTotal.toOption.get, tuplesProcessed = tuplesProcessed.toOption.get, tuplesExcluded = tuplesExcluded.toOption.get))
    else Left(List[Either[String, Any]](pid, datid, datname, relid, command, `type`, bytesProcessed, bytesTotal, tuplesProcessed, tuplesExcluded).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatProgressCopyViewRow] = new JsonEncoder[PgStatProgressCopyViewRow] {
    override def unsafeEncode(a: PgStatProgressCopyViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""datid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.datid, indent, out)
      out.write(",")
      out.write(""""datname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.datname, indent, out)
      out.write(",")
      out.write(""""relid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.relid, indent, out)
      out.write(",")
      out.write(""""command":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.command, indent, out)
      out.write(",")
      out.write(""""type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.`type`, indent, out)
      out.write(",")
      out.write(""""bytes_processed":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.bytesProcessed, indent, out)
      out.write(",")
      out.write(""""bytes_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.bytesTotal, indent, out)
      out.write(",")
      out.write(""""tuples_processed":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tuplesProcessed, indent, out)
      out.write(",")
      out.write(""""tuples_excluded":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tuplesExcluded, indent, out)
      out.write("}")
    }
  }
}
