/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_user_tables

import adventureworks.customtypes.TypoInstant
import adventureworks.pg_catalog.pg_class.PgClassId
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgStatUserTablesViewStructure[Row](val prefix: Option[String], val extract: Row => PgStatUserTablesViewRow, val merge: (Row, PgStatUserTablesViewRow) => Row)
  extends Relation[PgStatUserTablesViewFields, PgStatUserTablesViewRow, Row]
    with PgStatUserTablesViewFields[Row] { outer =>

  override val relid = new OptField[PgClassId, Row](prefix, "relid", None, None)(x => extract(x).relid, (row, value) => merge(row, extract(row).copy(relid = value)))
  override val schemaname = new OptField[String, Row](prefix, "schemaname", None, None)(x => extract(x).schemaname, (row, value) => merge(row, extract(row).copy(schemaname = value)))
  override val relname = new OptField[String, Row](prefix, "relname", None, None)(x => extract(x).relname, (row, value) => merge(row, extract(row).copy(relname = value)))
  override val seqScan = new OptField[/* nullability unknown */ Long, Row](prefix, "seq_scan", None, None)(x => extract(x).seqScan, (row, value) => merge(row, extract(row).copy(seqScan = value)))
  override val seqTupRead = new OptField[/* nullability unknown */ Long, Row](prefix, "seq_tup_read", None, None)(x => extract(x).seqTupRead, (row, value) => merge(row, extract(row).copy(seqTupRead = value)))
  override val idxScan = new OptField[/* nullability unknown */ Long, Row](prefix, "idx_scan", None, None)(x => extract(x).idxScan, (row, value) => merge(row, extract(row).copy(idxScan = value)))
  override val idxTupFetch = new OptField[/* nullability unknown */ Long, Row](prefix, "idx_tup_fetch", None, None)(x => extract(x).idxTupFetch, (row, value) => merge(row, extract(row).copy(idxTupFetch = value)))
  override val nTupIns = new OptField[/* nullability unknown */ Long, Row](prefix, "n_tup_ins", None, None)(x => extract(x).nTupIns, (row, value) => merge(row, extract(row).copy(nTupIns = value)))
  override val nTupUpd = new OptField[/* nullability unknown */ Long, Row](prefix, "n_tup_upd", None, None)(x => extract(x).nTupUpd, (row, value) => merge(row, extract(row).copy(nTupUpd = value)))
  override val nTupDel = new OptField[/* nullability unknown */ Long, Row](prefix, "n_tup_del", None, None)(x => extract(x).nTupDel, (row, value) => merge(row, extract(row).copy(nTupDel = value)))
  override val nTupHotUpd = new OptField[/* nullability unknown */ Long, Row](prefix, "n_tup_hot_upd", None, None)(x => extract(x).nTupHotUpd, (row, value) => merge(row, extract(row).copy(nTupHotUpd = value)))
  override val nLiveTup = new OptField[/* nullability unknown */ Long, Row](prefix, "n_live_tup", None, None)(x => extract(x).nLiveTup, (row, value) => merge(row, extract(row).copy(nLiveTup = value)))
  override val nDeadTup = new OptField[/* nullability unknown */ Long, Row](prefix, "n_dead_tup", None, None)(x => extract(x).nDeadTup, (row, value) => merge(row, extract(row).copy(nDeadTup = value)))
  override val nModSinceAnalyze = new OptField[/* nullability unknown */ Long, Row](prefix, "n_mod_since_analyze", None, None)(x => extract(x).nModSinceAnalyze, (row, value) => merge(row, extract(row).copy(nModSinceAnalyze = value)))
  override val nInsSinceVacuum = new OptField[/* nullability unknown */ Long, Row](prefix, "n_ins_since_vacuum", None, None)(x => extract(x).nInsSinceVacuum, (row, value) => merge(row, extract(row).copy(nInsSinceVacuum = value)))
  override val lastVacuum = new OptField[/* nullability unknown */ TypoInstant, Row](prefix, "last_vacuum", Some("text"), None)(x => extract(x).lastVacuum, (row, value) => merge(row, extract(row).copy(lastVacuum = value)))
  override val lastAutovacuum = new OptField[/* nullability unknown */ TypoInstant, Row](prefix, "last_autovacuum", Some("text"), None)(x => extract(x).lastAutovacuum, (row, value) => merge(row, extract(row).copy(lastAutovacuum = value)))
  override val lastAnalyze = new OptField[/* nullability unknown */ TypoInstant, Row](prefix, "last_analyze", Some("text"), None)(x => extract(x).lastAnalyze, (row, value) => merge(row, extract(row).copy(lastAnalyze = value)))
  override val lastAutoanalyze = new OptField[/* nullability unknown */ TypoInstant, Row](prefix, "last_autoanalyze", Some("text"), None)(x => extract(x).lastAutoanalyze, (row, value) => merge(row, extract(row).copy(lastAutoanalyze = value)))
  override val vacuumCount = new OptField[/* nullability unknown */ Long, Row](prefix, "vacuum_count", None, None)(x => extract(x).vacuumCount, (row, value) => merge(row, extract(row).copy(vacuumCount = value)))
  override val autovacuumCount = new OptField[/* nullability unknown */ Long, Row](prefix, "autovacuum_count", None, None)(x => extract(x).autovacuumCount, (row, value) => merge(row, extract(row).copy(autovacuumCount = value)))
  override val analyzeCount = new OptField[/* nullability unknown */ Long, Row](prefix, "analyze_count", None, None)(x => extract(x).analyzeCount, (row, value) => merge(row, extract(row).copy(analyzeCount = value)))
  override val autoanalyzeCount = new OptField[/* nullability unknown */ Long, Row](prefix, "autoanalyze_count", None, None)(x => extract(x).autoanalyzeCount, (row, value) => merge(row, extract(row).copy(autoanalyzeCount = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](relid, schemaname, relname, seqScan, seqTupRead, idxScan, idxTupFetch, nTupIns, nTupUpd, nTupDel, nTupHotUpd, nLiveTup, nDeadTup, nModSinceAnalyze, nInsSinceVacuum, lastVacuum, lastAutovacuum, lastAnalyze, lastAutoanalyze, vacuumCount, autovacuumCount, analyzeCount, autoanalyzeCount)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgStatUserTablesViewRow, merge: (NewRow, PgStatUserTablesViewRow) => NewRow): PgStatUserTablesViewStructure[NewRow] =
    new PgStatUserTablesViewStructure(prefix, extract, merge)
}
