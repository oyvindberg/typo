/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_shadow

import adventureworks.customtypes.TypoInstant
import adventureworks.pg_catalog.pg_authid.PgAuthidId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgShadowViewRow(
  /** Points to [[pg_authid.PgAuthidRow.rolname]] */
  usename: String,
  /** Points to [[pg_authid.PgAuthidRow.oid]] */
  usesysid: PgAuthidId,
  /** Points to [[pg_authid.PgAuthidRow.rolcreatedb]] */
  usecreatedb: Boolean,
  /** Points to [[pg_authid.PgAuthidRow.rolsuper]] */
  usesuper: Boolean,
  /** Points to [[pg_authid.PgAuthidRow.rolreplication]] */
  userepl: Boolean,
  /** Points to [[pg_authid.PgAuthidRow.rolbypassrls]] */
  usebypassrls: Boolean,
  /** Points to [[pg_authid.PgAuthidRow.rolpassword]] */
  passwd: Option[String],
  /** Points to [[pg_authid.PgAuthidRow.rolvaliduntil]] */
  valuntil: Option[TypoInstant],
  /** Points to [[pg_db_role_setting.PgDbRoleSettingRow.setconfig]] */
  useconfig: Option[Array[String]]
)

object PgShadowViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgShadowViewRow] = new JdbcDecoder[PgShadowViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgShadowViewRow) =
      columIndex + 8 ->
        PgShadowViewRow(
          usename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 0, rs)._2,
          usesysid = PgAuthidId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          usecreatedb = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 2, rs)._2,
          usesuper = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 3, rs)._2,
          userepl = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 4, rs)._2,
          usebypassrls = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 5, rs)._2,
          passwd = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          valuntil = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 7, rs)._2,
          useconfig = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgShadowViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val usename = jsonObj.get("usename").toRight("Missing field 'usename'").flatMap(_.as(JsonDecoder.string))
    val usesysid = jsonObj.get("usesysid").toRight("Missing field 'usesysid'").flatMap(_.as(PgAuthidId.jsonDecoder))
    val usecreatedb = jsonObj.get("usecreatedb").toRight("Missing field 'usecreatedb'").flatMap(_.as(JsonDecoder.boolean))
    val usesuper = jsonObj.get("usesuper").toRight("Missing field 'usesuper'").flatMap(_.as(JsonDecoder.boolean))
    val userepl = jsonObj.get("userepl").toRight("Missing field 'userepl'").flatMap(_.as(JsonDecoder.boolean))
    val usebypassrls = jsonObj.get("usebypassrls").toRight("Missing field 'usebypassrls'").flatMap(_.as(JsonDecoder.boolean))
    val passwd = jsonObj.get("passwd").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val valuntil = jsonObj.get("valuntil").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val useconfig = jsonObj.get("useconfig").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    if (usename.isRight && usesysid.isRight && usecreatedb.isRight && usesuper.isRight && userepl.isRight && usebypassrls.isRight && passwd.isRight && valuntil.isRight && useconfig.isRight)
      Right(PgShadowViewRow(usename = usename.toOption.get, usesysid = usesysid.toOption.get, usecreatedb = usecreatedb.toOption.get, usesuper = usesuper.toOption.get, userepl = userepl.toOption.get, usebypassrls = usebypassrls.toOption.get, passwd = passwd.toOption.get, valuntil = valuntil.toOption.get, useconfig = useconfig.toOption.get))
    else Left(List[Either[String, Any]](usename, usesysid, usecreatedb, usesuper, userepl, usebypassrls, passwd, valuntil, useconfig).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgShadowViewRow] = new JsonEncoder[PgShadowViewRow] {
    override def unsafeEncode(a: PgShadowViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""usename":""")
      JsonEncoder.string.unsafeEncode(a.usename, indent, out)
      out.write(",")
      out.write(""""usesysid":""")
      PgAuthidId.jsonEncoder.unsafeEncode(a.usesysid, indent, out)
      out.write(",")
      out.write(""""usecreatedb":""")
      JsonEncoder.boolean.unsafeEncode(a.usecreatedb, indent, out)
      out.write(",")
      out.write(""""usesuper":""")
      JsonEncoder.boolean.unsafeEncode(a.usesuper, indent, out)
      out.write(",")
      out.write(""""userepl":""")
      JsonEncoder.boolean.unsafeEncode(a.userepl, indent, out)
      out.write(",")
      out.write(""""usebypassrls":""")
      JsonEncoder.boolean.unsafeEncode(a.usebypassrls, indent, out)
      out.write(",")
      out.write(""""passwd":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.passwd, indent, out)
      out.write(",")
      out.write(""""valuntil":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.valuntil, indent, out)
      out.write(",")
      out.write(""""useconfig":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.useconfig, indent, out)
      out.write("}")
    }
  }
}
