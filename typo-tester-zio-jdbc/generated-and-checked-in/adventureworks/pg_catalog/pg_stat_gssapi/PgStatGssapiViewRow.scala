/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_gssapi

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatGssapiViewRow(
  pid: /* nullability unknown */ Option[Int],
  gssAuthenticated: /* nullability unknown */ Option[Boolean],
  principal: /* nullability unknown */ Option[String],
  encrypted: /* nullability unknown */ Option[Boolean]
)

object PgStatGssapiViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatGssapiViewRow] = new JdbcDecoder[PgStatGssapiViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatGssapiViewRow) =
      columIndex + 3 ->
        PgStatGssapiViewRow(
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 0, rs)._2,
          gssAuthenticated = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 1, rs)._2,
          principal = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          encrypted = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatGssapiViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val gssAuthenticated = jsonObj.get("gss_authenticated").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val principal = jsonObj.get("principal").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val encrypted = jsonObj.get("encrypted").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    if (pid.isRight && gssAuthenticated.isRight && principal.isRight && encrypted.isRight)
      Right(PgStatGssapiViewRow(pid = pid.toOption.get, gssAuthenticated = gssAuthenticated.toOption.get, principal = principal.toOption.get, encrypted = encrypted.toOption.get))
    else Left(List[Either[String, Any]](pid, gssAuthenticated, principal, encrypted).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatGssapiViewRow] = new JsonEncoder[PgStatGssapiViewRow] {
    override def unsafeEncode(a: PgStatGssapiViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""gss_authenticated":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.gssAuthenticated, indent, out)
      out.write(",")
      out.write(""""principal":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.principal, indent, out)
      out.write(",")
      out.write(""""encrypted":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.encrypted, indent, out)
      out.write("}")
    }
  }
}
