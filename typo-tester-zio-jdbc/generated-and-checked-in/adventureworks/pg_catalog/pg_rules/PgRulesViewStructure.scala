/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_rules

import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgRulesViewStructure[Row](val prefix: Option[String], val extract: Row => PgRulesViewRow, val merge: (Row, PgRulesViewRow) => Row)
  extends Relation[PgRulesViewFields, PgRulesViewRow, Row]
    with PgRulesViewFields[Row] { outer =>

  override val schemaname = new OptField[String, Row](prefix, "schemaname", None, None)(x => extract(x).schemaname, (row, value) => merge(row, extract(row).copy(schemaname = value)))
  override val tablename = new Field[String, Row](prefix, "tablename", None, None)(x => extract(x).tablename, (row, value) => merge(row, extract(row).copy(tablename = value)))
  override val rulename = new Field[String, Row](prefix, "rulename", None, None)(x => extract(x).rulename, (row, value) => merge(row, extract(row).copy(rulename = value)))
  override val definition = new OptField[String, Row](prefix, "definition", None, None)(x => extract(x).definition, (row, value) => merge(row, extract(row).copy(definition = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](schemaname, tablename, rulename, definition)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgRulesViewRow, merge: (NewRow, PgRulesViewRow) => NewRow): PgRulesViewStructure[NewRow] =
    new PgRulesViewStructure(prefix, extract, merge)
}
