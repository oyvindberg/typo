/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_rules

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgRulesViewRow(
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  tablename: String,
  /** Points to [[pg_rewrite.PgRewriteRow.rulename]] */
  rulename: String,
  definition: /* nullability unknown */ Option[String]
)

object PgRulesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgRulesViewRow] = new JdbcDecoder[PgRulesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgRulesViewRow) =
      columIndex + 3 ->
        PgRulesViewRow(
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          tablename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          rulename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          definition = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgRulesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tablename = jsonObj.get("tablename").toRight("Missing field 'tablename'").flatMap(_.as(JsonDecoder.string))
    val rulename = jsonObj.get("rulename").toRight("Missing field 'rulename'").flatMap(_.as(JsonDecoder.string))
    val definition = jsonObj.get("definition").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (schemaname.isRight && tablename.isRight && rulename.isRight && definition.isRight)
      Right(PgRulesViewRow(schemaname = schemaname.toOption.get, tablename = tablename.toOption.get, rulename = rulename.toOption.get, definition = definition.toOption.get))
    else Left(List[Either[String, Any]](schemaname, tablename, rulename, definition).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgRulesViewRow] = new JsonEncoder[PgRulesViewRow] {
    override def unsafeEncode(a: PgRulesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""tablename":""")
      JsonEncoder.string.unsafeEncode(a.tablename, indent, out)
      out.write(",")
      out.write(""""rulename":""")
      JsonEncoder.string.unsafeEncode(a.rulename, indent, out)
      out.write(",")
      out.write(""""definition":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.definition, indent, out)
      out.write("}")
    }
  }
}
