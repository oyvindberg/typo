/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_extension

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgExtensionRepoImpl extends PgExtensionRepo {
  override def delete(oid: PgExtensionId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_extension where "oid" = ${Segment.paramSegment(oid)(PgExtensionId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgExtensionFields, PgExtensionRow] = {
    DeleteBuilder("pg_catalog.pg_extension", PgExtensionFields)
  }
  override def insert(unsaved: PgExtensionRow): ZIO[ZConnection, Throwable, PgExtensionRow] = {
    sql"""insert into pg_catalog.pg_extension("oid", "extname", "extowner", "extnamespace", "extrelocatable", "extversion", "extconfig", "extcondition")
          values (${Segment.paramSegment(unsaved.oid)(PgExtensionId.setter)}::oid, ${Segment.paramSegment(unsaved.extname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.extowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.extnamespace)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.extrelocatable)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.extversion)(Setter.stringSetter)}, ${Segment.paramSegment(unsaved.extconfig)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid, ${Segment.paramSegment(unsaved.extcondition)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text)
          returning "oid", "extname", "extowner", "extnamespace", "extrelocatable", "extversion", "extconfig", "extcondition"
       """.insertReturning(PgExtensionRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgExtensionFields, PgExtensionRow] = {
    SelectBuilderSql("pg_catalog.pg_extension", PgExtensionFields, PgExtensionRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgExtensionRow] = {
    sql"""select "oid", "extname", "extowner", "extnamespace", "extrelocatable", "extversion", "extconfig", "extcondition" from pg_catalog.pg_extension""".query(PgExtensionRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgExtensionId): ZIO[ZConnection, Throwable, Option[PgExtensionRow]] = {
    sql"""select "oid", "extname", "extowner", "extnamespace", "extrelocatable", "extversion", "extconfig", "extcondition" from pg_catalog.pg_extension where "oid" = ${Segment.paramSegment(oid)(PgExtensionId.setter)}""".query(PgExtensionRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgExtensionId]): ZStream[ZConnection, Throwable, PgExtensionRow] = {
    sql"""select "oid", "extname", "extowner", "extnamespace", "extrelocatable", "extversion", "extconfig", "extcondition" from pg_catalog.pg_extension where "oid" = ANY(${Segment.paramSegment(oids)(PgExtensionId.arraySetter)})""".query(PgExtensionRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(extname: String): ZIO[ZConnection, Throwable, Option[PgExtensionRow]] = {
    sql"""select "extname"
          from pg_catalog.pg_extension
          where "extname" = ${Segment.paramSegment(extname)(Setter.stringSetter)}
       """.query(PgExtensionRow.jdbcDecoder).selectOne
  }
  override def update(row: PgExtensionRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_extension
          set "extname" = ${Segment.paramSegment(row.extname)(Setter.stringSetter)}::name,
              "extowner" = ${Segment.paramSegment(row.extowner)(Setter.longSetter)}::oid,
              "extnamespace" = ${Segment.paramSegment(row.extnamespace)(Setter.longSetter)}::oid,
              "extrelocatable" = ${Segment.paramSegment(row.extrelocatable)(Setter.booleanSetter)},
              "extversion" = ${Segment.paramSegment(row.extversion)(Setter.stringSetter)},
              "extconfig" = ${Segment.paramSegment(row.extconfig)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
              "extcondition" = ${Segment.paramSegment(row.extcondition)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          where "oid" = ${Segment.paramSegment(oid)(PgExtensionId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgExtensionFields, PgExtensionRow] = {
    UpdateBuilder("pg_catalog.pg_extension", PgExtensionFields, PgExtensionRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgExtensionRow): ZIO[ZConnection, Throwable, UpdateResult[PgExtensionRow]] = {
    sql"""insert into pg_catalog.pg_extension("oid", "extname", "extowner", "extnamespace", "extrelocatable", "extversion", "extconfig", "extcondition")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgExtensionId.setter)}::oid,
            ${Segment.paramSegment(unsaved.extname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.extowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.extnamespace)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.extrelocatable)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.extversion)(Setter.stringSetter)},
            ${Segment.paramSegment(unsaved.extconfig)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
            ${Segment.paramSegment(unsaved.extcondition)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          )
          on conflict ("oid")
          do update set
            "extname" = EXCLUDED."extname",
            "extowner" = EXCLUDED."extowner",
            "extnamespace" = EXCLUDED."extnamespace",
            "extrelocatable" = EXCLUDED."extrelocatable",
            "extversion" = EXCLUDED."extversion",
            "extconfig" = EXCLUDED."extconfig",
            "extcondition" = EXCLUDED."extcondition"
          returning "oid", "extname", "extowner", "extnamespace", "extrelocatable", "extversion", "extconfig", "extcondition"""".insertReturning(PgExtensionRow.jdbcDecoder)
  }
}
