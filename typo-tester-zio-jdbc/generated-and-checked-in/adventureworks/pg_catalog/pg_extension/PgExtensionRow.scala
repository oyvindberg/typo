/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_extension

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgExtensionRow(
  oid: PgExtensionId,
  extname: String,
  extowner: /* oid */ Long,
  extnamespace: /* oid */ Long,
  extrelocatable: Boolean,
  extversion: String,
  extconfig: Option[Array[/* oid */ Long]],
  extcondition: Option[Array[String]]
)

object PgExtensionRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgExtensionRow] = new JdbcDecoder[PgExtensionRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgExtensionRow) =
      columIndex + 7 ->
        PgExtensionRow(
          oid = PgExtensionId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          extname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          extowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          extnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          extrelocatable = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 4, rs)._2,
          extversion = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 5, rs)._2,
          extconfig = JdbcDecoder.optionDecoder(adventureworks.LongArrayDecoder).unsafeDecode(columIndex + 6, rs)._2,
          extcondition = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgExtensionRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgExtensionId.jsonDecoder))
    val extname = jsonObj.get("extname").toRight("Missing field 'extname'").flatMap(_.as(JsonDecoder.string))
    val extowner = jsonObj.get("extowner").toRight("Missing field 'extowner'").flatMap(_.as(JsonDecoder.long))
    val extnamespace = jsonObj.get("extnamespace").toRight("Missing field 'extnamespace'").flatMap(_.as(JsonDecoder.long))
    val extrelocatable = jsonObj.get("extrelocatable").toRight("Missing field 'extrelocatable'").flatMap(_.as(JsonDecoder.boolean))
    val extversion = jsonObj.get("extversion").toRight("Missing field 'extversion'").flatMap(_.as(JsonDecoder.string))
    val extconfig = jsonObj.get("extconfig").fold[Either[String, Option[Array[Long]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Long](JsonDecoder.long, implicitly))))
    val extcondition = jsonObj.get("extcondition").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    if (oid.isRight && extname.isRight && extowner.isRight && extnamespace.isRight && extrelocatable.isRight && extversion.isRight && extconfig.isRight && extcondition.isRight)
      Right(PgExtensionRow(oid = oid.toOption.get, extname = extname.toOption.get, extowner = extowner.toOption.get, extnamespace = extnamespace.toOption.get, extrelocatable = extrelocatable.toOption.get, extversion = extversion.toOption.get, extconfig = extconfig.toOption.get, extcondition = extcondition.toOption.get))
    else Left(List[Either[String, Any]](oid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgExtensionRow] = new JsonEncoder[PgExtensionRow] {
    override def unsafeEncode(a: PgExtensionRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgExtensionId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""extname":""")
      JsonEncoder.string.unsafeEncode(a.extname, indent, out)
      out.write(",")
      out.write(""""extowner":""")
      JsonEncoder.long.unsafeEncode(a.extowner, indent, out)
      out.write(",")
      out.write(""""extnamespace":""")
      JsonEncoder.long.unsafeEncode(a.extnamespace, indent, out)
      out.write(",")
      out.write(""""extrelocatable":""")
      JsonEncoder.boolean.unsafeEncode(a.extrelocatable, indent, out)
      out.write(",")
      out.write(""""extversion":""")
      JsonEncoder.string.unsafeEncode(a.extversion, indent, out)
      out.write(",")
      out.write(""""extconfig":""")
      JsonEncoder.option(JsonEncoder.array[Long](JsonEncoder.long, implicitly)).unsafeEncode(a.extconfig, indent, out)
      out.write(",")
      out.write(""""extcondition":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.extcondition, indent, out)
      out.write("}")
    }
  }
}
