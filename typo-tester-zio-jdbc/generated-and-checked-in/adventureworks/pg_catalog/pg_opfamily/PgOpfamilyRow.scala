/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opfamily

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgOpfamilyRow(
  oid: PgOpfamilyId,
  opfmethod: /* oid */ Long,
  opfname: String,
  opfnamespace: /* oid */ Long,
  opfowner: /* oid */ Long
)

object PgOpfamilyRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgOpfamilyRow] = new JdbcDecoder[PgOpfamilyRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgOpfamilyRow) =
      columIndex + 4 ->
        PgOpfamilyRow(
          oid = PgOpfamilyId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          opfmethod = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          opfname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          opfnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          opfowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgOpfamilyRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgOpfamilyId.jsonDecoder))
    val opfmethod = jsonObj.get("opfmethod").toRight("Missing field 'opfmethod'").flatMap(_.as(JsonDecoder.long))
    val opfname = jsonObj.get("opfname").toRight("Missing field 'opfname'").flatMap(_.as(JsonDecoder.string))
    val opfnamespace = jsonObj.get("opfnamespace").toRight("Missing field 'opfnamespace'").flatMap(_.as(JsonDecoder.long))
    val opfowner = jsonObj.get("opfowner").toRight("Missing field 'opfowner'").flatMap(_.as(JsonDecoder.long))
    if (oid.isRight && opfmethod.isRight && opfname.isRight && opfnamespace.isRight && opfowner.isRight)
      Right(PgOpfamilyRow(oid = oid.toOption.get, opfmethod = opfmethod.toOption.get, opfname = opfname.toOption.get, opfnamespace = opfnamespace.toOption.get, opfowner = opfowner.toOption.get))
    else Left(List[Either[String, Any]](oid, opfmethod, opfname, opfnamespace, opfowner).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgOpfamilyRow] = new JsonEncoder[PgOpfamilyRow] {
    override def unsafeEncode(a: PgOpfamilyRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgOpfamilyId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""opfmethod":""")
      JsonEncoder.long.unsafeEncode(a.opfmethod, indent, out)
      out.write(",")
      out.write(""""opfname":""")
      JsonEncoder.string.unsafeEncode(a.opfname, indent, out)
      out.write(",")
      out.write(""""opfnamespace":""")
      JsonEncoder.long.unsafeEncode(a.opfnamespace, indent, out)
      out.write(",")
      out.write(""""opfowner":""")
      JsonEncoder.long.unsafeEncode(a.opfowner, indent, out)
      out.write("}")
    }
  }
}
