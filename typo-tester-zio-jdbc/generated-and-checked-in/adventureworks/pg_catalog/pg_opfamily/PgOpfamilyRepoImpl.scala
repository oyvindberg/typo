/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opfamily

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgOpfamilyRepoImpl extends PgOpfamilyRepo {
  override def delete(oid: PgOpfamilyId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_opfamily where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgOpfamilyFields, PgOpfamilyRow] = {
    DeleteBuilder("pg_catalog.pg_opfamily", PgOpfamilyFields)
  }
  override def insert(unsaved: PgOpfamilyRow): ZIO[ZConnection, Throwable, PgOpfamilyRow] = {
    sql"""insert into pg_catalog.pg_opfamily("oid", "opfmethod", "opfname", "opfnamespace", "opfowner")
          values (???::oid, ???::oid, ???::name, ???::oid, ???::oid)
          returning "oid", "opfmethod", "opfname", "opfnamespace", "opfowner"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgOpfamilyFields, PgOpfamilyRow] = {
    SelectBuilderSql("pg_catalog.pg_opfamily", PgOpfamilyFields, PgOpfamilyRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgOpfamilyRow] = {
    sql"""select "oid", "opfmethod", "opfname", "opfnamespace", "opfowner" from pg_catalog.pg_opfamily""".query[PgOpfamilyRow].selectStream
  }
  override def selectById(oid: PgOpfamilyId): ZIO[ZConnection, Throwable, Option[PgOpfamilyRow]] = {
    sql"""select "oid", "opfmethod", "opfname", "opfnamespace", "opfowner" from pg_catalog.pg_opfamily where "oid" = ???""".query[PgOpfamilyRow].selectOne
  }
  override def selectByIds(oids: Array[PgOpfamilyId]): ZStream[ZConnection, Throwable, PgOpfamilyRow] = {
    sql"""select "oid", "opfmethod", "opfname", "opfnamespace", "opfowner" from pg_catalog.pg_opfamily where "oid" = ANY(${oids})""".query[PgOpfamilyRow].selectStream
  }
  override def selectByUnique(opfmethod: /* oid */ Long, opfname: String, opfnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgOpfamilyRow]] = {
    sql"""select "opfmethod", "opfname", "opfnamespace"
          from pg_catalog.pg_opfamily
          where "opfmethod" = ??? AND "opfname" = ??? AND "opfnamespace" = ???
       """.query[PgOpfamilyRow].selectOne
  }
  override def update(row: PgOpfamilyRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_opfamily
          set "opfmethod" = ???::oid,
              "opfname" = ???::name,
              "opfnamespace" = ???::oid,
              "opfowner" = ???::oid
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgOpfamilyFields, PgOpfamilyRow] = {
    UpdateBuilder("pg_catalog.pg_opfamily", PgOpfamilyFields, PgOpfamilyRow.read)
  }
  override def upsert(unsaved: PgOpfamilyRow): ZIO[ZConnection, Throwable, PgOpfamilyRow] = {
    sql"""insert into pg_catalog.pg_opfamily("oid", "opfmethod", "opfname", "opfnamespace", "opfowner")
          values (
            ???::oid,
            ???::oid,
            ???::name,
            ???::oid,
            ???::oid
          )
          on conflict ("oid")
          do update set
            "opfmethod" = EXCLUDED."opfmethod",
            "opfname" = EXCLUDED."opfname",
            "opfnamespace" = EXCLUDED."opfnamespace",
            "opfowner" = EXCLUDED."opfowner"
          returning "oid", "opfmethod", "opfname", "opfnamespace", "opfowner"
       """.query(???).unique
  }
}
