/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_database

import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoXid
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgDatabaseStructure[Row](val prefix: Option[String], val extract: Row => PgDatabaseRow, val merge: (Row, PgDatabaseRow) => Row)
  extends Relation[PgDatabaseFields, PgDatabaseRow, Row]
    with PgDatabaseFields[Row] { outer =>

  override val oid = new IdField[PgDatabaseId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val datname = new Field[String, Row](prefix, "datname", None, Some("name"))(x => extract(x).datname, (row, value) => merge(row, extract(row).copy(datname = value)))
  override val datdba = new Field[/* oid */ Long, Row](prefix, "datdba", None, Some("oid"))(x => extract(x).datdba, (row, value) => merge(row, extract(row).copy(datdba = value)))
  override val encoding = new Field[Int, Row](prefix, "encoding", None, Some("int4"))(x => extract(x).encoding, (row, value) => merge(row, extract(row).copy(encoding = value)))
  override val datcollate = new Field[String, Row](prefix, "datcollate", None, Some("name"))(x => extract(x).datcollate, (row, value) => merge(row, extract(row).copy(datcollate = value)))
  override val datctype = new Field[String, Row](prefix, "datctype", None, Some("name"))(x => extract(x).datctype, (row, value) => merge(row, extract(row).copy(datctype = value)))
  override val datistemplate = new Field[Boolean, Row](prefix, "datistemplate", None, None)(x => extract(x).datistemplate, (row, value) => merge(row, extract(row).copy(datistemplate = value)))
  override val datallowconn = new Field[Boolean, Row](prefix, "datallowconn", None, None)(x => extract(x).datallowconn, (row, value) => merge(row, extract(row).copy(datallowconn = value)))
  override val datconnlimit = new Field[Int, Row](prefix, "datconnlimit", None, Some("int4"))(x => extract(x).datconnlimit, (row, value) => merge(row, extract(row).copy(datconnlimit = value)))
  override val datlastsysoid = new Field[/* oid */ Long, Row](prefix, "datlastsysoid", None, Some("oid"))(x => extract(x).datlastsysoid, (row, value) => merge(row, extract(row).copy(datlastsysoid = value)))
  override val datfrozenxid = new Field[TypoXid, Row](prefix, "datfrozenxid", None, Some("xid"))(x => extract(x).datfrozenxid, (row, value) => merge(row, extract(row).copy(datfrozenxid = value)))
  override val datminmxid = new Field[TypoXid, Row](prefix, "datminmxid", None, Some("xid"))(x => extract(x).datminmxid, (row, value) => merge(row, extract(row).copy(datminmxid = value)))
  override val dattablespace = new Field[/* oid */ Long, Row](prefix, "dattablespace", None, Some("oid"))(x => extract(x).dattablespace, (row, value) => merge(row, extract(row).copy(dattablespace = value)))
  override val datacl = new OptField[Array[TypoAclItem], Row](prefix, "datacl", None, Some("_aclitem"))(x => extract(x).datacl, (row, value) => merge(row, extract(row).copy(datacl = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, datname, datdba, encoding, datcollate, datctype, datistemplate, datallowconn, datconnlimit, datlastsysoid, datfrozenxid, datminmxid, dattablespace, datacl)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgDatabaseRow, merge: (NewRow, PgDatabaseRow) => NewRow): PgDatabaseStructure[NewRow] =
    new PgDatabaseStructure(prefix, extract, merge)
}
