/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_database

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgDatabaseRepoImpl extends PgDatabaseRepo {
  override def delete(oid: PgDatabaseId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_database where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgDatabaseFields, PgDatabaseRow] = {
    DeleteBuilder("pg_catalog.pg_database", PgDatabaseFields)
  }
  override def insert(unsaved: PgDatabaseRow): ZIO[ZConnection, Throwable, PgDatabaseRow] = {
    sql"""insert into pg_catalog.pg_database("oid", "datname", "datdba", "encoding", "datcollate", "datctype", "datistemplate", "datallowconn", "datconnlimit", "datlastsysoid", "datfrozenxid", "datminmxid", "dattablespace", "datacl")
          values (???::oid, ???::name, ???::oid, ???::int4, ???::name, ???::name, ???, ???, ???::int4, ???::oid, ???::xid, ???::xid, ???::oid, ???::_aclitem)
          returning "oid", "datname", "datdba", "encoding", "datcollate", "datctype", "datistemplate", "datallowconn", "datconnlimit", "datlastsysoid", "datfrozenxid", "datminmxid", "dattablespace", "datacl"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgDatabaseFields, PgDatabaseRow] = {
    SelectBuilderSql("pg_catalog.pg_database", PgDatabaseFields, PgDatabaseRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgDatabaseRow] = {
    sql"""select "oid", "datname", "datdba", "encoding", "datcollate", "datctype", "datistemplate", "datallowconn", "datconnlimit", "datlastsysoid", "datfrozenxid", "datminmxid", "dattablespace", "datacl" from pg_catalog.pg_database""".query[PgDatabaseRow].selectStream
  }
  override def selectById(oid: PgDatabaseId): ZIO[ZConnection, Throwable, Option[PgDatabaseRow]] = {
    sql"""select "oid", "datname", "datdba", "encoding", "datcollate", "datctype", "datistemplate", "datallowconn", "datconnlimit", "datlastsysoid", "datfrozenxid", "datminmxid", "dattablespace", "datacl" from pg_catalog.pg_database where "oid" = ???""".query[PgDatabaseRow].selectOne
  }
  override def selectByIds(oids: Array[PgDatabaseId]): ZStream[ZConnection, Throwable, PgDatabaseRow] = {
    sql"""select "oid", "datname", "datdba", "encoding", "datcollate", "datctype", "datistemplate", "datallowconn", "datconnlimit", "datlastsysoid", "datfrozenxid", "datminmxid", "dattablespace", "datacl" from pg_catalog.pg_database where "oid" = ANY(${oids})""".query[PgDatabaseRow].selectStream
  }
  override def selectByUnique(datname: String): ZIO[ZConnection, Throwable, Option[PgDatabaseRow]] = {
    sql"""select "datname"
          from pg_catalog.pg_database
          where "datname" = ???
       """.query[PgDatabaseRow].selectOne
  }
  override def update(row: PgDatabaseRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_database
          set "datname" = ???::name,
              "datdba" = ???::oid,
              "encoding" = ???::int4,
              "datcollate" = ???::name,
              "datctype" = ???::name,
              "datistemplate" = ???,
              "datallowconn" = ???,
              "datconnlimit" = ???::int4,
              "datlastsysoid" = ???::oid,
              "datfrozenxid" = ???::xid,
              "datminmxid" = ???::xid,
              "dattablespace" = ???::oid,
              "datacl" = ???::_aclitem
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgDatabaseFields, PgDatabaseRow] = {
    UpdateBuilder("pg_catalog.pg_database", PgDatabaseFields, PgDatabaseRow.read)
  }
  override def upsert(unsaved: PgDatabaseRow): ZIO[ZConnection, Throwable, PgDatabaseRow] = {
    sql"""insert into pg_catalog.pg_database("oid", "datname", "datdba", "encoding", "datcollate", "datctype", "datistemplate", "datallowconn", "datconnlimit", "datlastsysoid", "datfrozenxid", "datminmxid", "dattablespace", "datacl")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::int4,
            ???::name,
            ???::name,
            ???,
            ???,
            ???::int4,
            ???::oid,
            ???::xid,
            ???::xid,
            ???::oid,
            ???::_aclitem
          )
          on conflict ("oid")
          do update set
            "datname" = EXCLUDED."datname",
            "datdba" = EXCLUDED."datdba",
            "encoding" = EXCLUDED."encoding",
            "datcollate" = EXCLUDED."datcollate",
            "datctype" = EXCLUDED."datctype",
            "datistemplate" = EXCLUDED."datistemplate",
            "datallowconn" = EXCLUDED."datallowconn",
            "datconnlimit" = EXCLUDED."datconnlimit",
            "datlastsysoid" = EXCLUDED."datlastsysoid",
            "datfrozenxid" = EXCLUDED."datfrozenxid",
            "datminmxid" = EXCLUDED."datminmxid",
            "dattablespace" = EXCLUDED."dattablespace",
            "datacl" = EXCLUDED."datacl"
          returning "oid", "datname", "datdba", "encoding", "datcollate", "datctype", "datistemplate", "datallowconn", "datconnlimit", "datlastsysoid", "datfrozenxid", "datminmxid", "dattablespace", "datacl"
       """.query(???).unique
  }
}
