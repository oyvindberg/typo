/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_database

import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoXid
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgDatabaseRow(
  oid: PgDatabaseId,
  datname: String,
  datdba: /* oid */ Long,
  encoding: Int,
  datcollate: String,
  datctype: String,
  datistemplate: Boolean,
  datallowconn: Boolean,
  datconnlimit: Int,
  datlastsysoid: /* oid */ Long,
  datfrozenxid: TypoXid,
  datminmxid: TypoXid,
  dattablespace: /* oid */ Long,
  datacl: Option[Array[TypoAclItem]]
)

object PgDatabaseRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgDatabaseRow] = new JdbcDecoder[PgDatabaseRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgDatabaseRow) =
      columIndex + 13 ->
        PgDatabaseRow(
          oid = PgDatabaseId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          datname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          datdba = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          encoding = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 3, rs)._2,
          datcollate = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 4, rs)._2,
          datctype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 5, rs)._2,
          datistemplate = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 6, rs)._2,
          datallowconn = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 7, rs)._2,
          datconnlimit = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 8, rs)._2,
          datlastsysoid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 9, rs)._2,
          datfrozenxid = TypoXid.jdbcDecoder.unsafeDecode(columIndex + 10, rs)._2,
          datminmxid = TypoXid.jdbcDecoder.unsafeDecode(columIndex + 11, rs)._2,
          dattablespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 12, rs)._2,
          datacl = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoAclItem]]).unsafeDecode(columIndex + 13, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgDatabaseRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgDatabaseId.jsonDecoder))
    val datname = jsonObj.get("datname").toRight("Missing field 'datname'").flatMap(_.as(JsonDecoder.string))
    val datdba = jsonObj.get("datdba").toRight("Missing field 'datdba'").flatMap(_.as(JsonDecoder.long))
    val encoding = jsonObj.get("encoding").toRight("Missing field 'encoding'").flatMap(_.as(JsonDecoder.int))
    val datcollate = jsonObj.get("datcollate").toRight("Missing field 'datcollate'").flatMap(_.as(JsonDecoder.string))
    val datctype = jsonObj.get("datctype").toRight("Missing field 'datctype'").flatMap(_.as(JsonDecoder.string))
    val datistemplate = jsonObj.get("datistemplate").toRight("Missing field 'datistemplate'").flatMap(_.as(JsonDecoder.boolean))
    val datallowconn = jsonObj.get("datallowconn").toRight("Missing field 'datallowconn'").flatMap(_.as(JsonDecoder.boolean))
    val datconnlimit = jsonObj.get("datconnlimit").toRight("Missing field 'datconnlimit'").flatMap(_.as(JsonDecoder.int))
    val datlastsysoid = jsonObj.get("datlastsysoid").toRight("Missing field 'datlastsysoid'").flatMap(_.as(JsonDecoder.long))
    val datfrozenxid = jsonObj.get("datfrozenxid").toRight("Missing field 'datfrozenxid'").flatMap(_.as(TypoXid.jsonDecoder))
    val datminmxid = jsonObj.get("datminmxid").toRight("Missing field 'datminmxid'").flatMap(_.as(TypoXid.jsonDecoder))
    val dattablespace = jsonObj.get("dattablespace").toRight("Missing field 'dattablespace'").flatMap(_.as(JsonDecoder.long))
    val datacl = jsonObj.get("datacl").fold[Either[String, Option[Array[TypoAclItem]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly))))
    if (oid.isRight && datname.isRight && datdba.isRight && encoding.isRight && datcollate.isRight && datctype.isRight && datistemplate.isRight && datallowconn.isRight && datconnlimit.isRight && datlastsysoid.isRight && datfrozenxid.isRight && datminmxid.isRight && dattablespace.isRight && datacl.isRight)
      Right(PgDatabaseRow(oid = oid.toOption.get, datname = datname.toOption.get, datdba = datdba.toOption.get, encoding = encoding.toOption.get, datcollate = datcollate.toOption.get, datctype = datctype.toOption.get, datistemplate = datistemplate.toOption.get, datallowconn = datallowconn.toOption.get, datconnlimit = datconnlimit.toOption.get, datlastsysoid = datlastsysoid.toOption.get, datfrozenxid = datfrozenxid.toOption.get, datminmxid = datminmxid.toOption.get, dattablespace = dattablespace.toOption.get, datacl = datacl.toOption.get))
    else Left(List[Either[String, Any]](oid, datname, datdba, encoding, datcollate, datctype, datistemplate, datallowconn, datconnlimit, datlastsysoid, datfrozenxid, datminmxid, dattablespace, datacl).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgDatabaseRow] = new JsonEncoder[PgDatabaseRow] {
    override def unsafeEncode(a: PgDatabaseRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgDatabaseId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""datname":""")
      JsonEncoder.string.unsafeEncode(a.datname, indent, out)
      out.write(",")
      out.write(""""datdba":""")
      JsonEncoder.long.unsafeEncode(a.datdba, indent, out)
      out.write(",")
      out.write(""""encoding":""")
      JsonEncoder.int.unsafeEncode(a.encoding, indent, out)
      out.write(",")
      out.write(""""datcollate":""")
      JsonEncoder.string.unsafeEncode(a.datcollate, indent, out)
      out.write(",")
      out.write(""""datctype":""")
      JsonEncoder.string.unsafeEncode(a.datctype, indent, out)
      out.write(",")
      out.write(""""datistemplate":""")
      JsonEncoder.boolean.unsafeEncode(a.datistemplate, indent, out)
      out.write(",")
      out.write(""""datallowconn":""")
      JsonEncoder.boolean.unsafeEncode(a.datallowconn, indent, out)
      out.write(",")
      out.write(""""datconnlimit":""")
      JsonEncoder.int.unsafeEncode(a.datconnlimit, indent, out)
      out.write(",")
      out.write(""""datlastsysoid":""")
      JsonEncoder.long.unsafeEncode(a.datlastsysoid, indent, out)
      out.write(",")
      out.write(""""datfrozenxid":""")
      TypoXid.jsonEncoder.unsafeEncode(a.datfrozenxid, indent, out)
      out.write(",")
      out.write(""""datminmxid":""")
      TypoXid.jsonEncoder.unsafeEncode(a.datminmxid, indent, out)
      out.write(",")
      out.write(""""dattablespace":""")
      JsonEncoder.long.unsafeEncode(a.dattablespace, indent, out)
      out.write(",")
      out.write(""""datacl":""")
      JsonEncoder.option(JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly)).unsafeEncode(a.datacl, indent, out)
      out.write("}")
    }
  }
}
