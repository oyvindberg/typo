/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_server

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgForeignServerRepoImpl extends PgForeignServerRepo {
  override def delete(oid: PgForeignServerId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_foreign_server where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgForeignServerFields, PgForeignServerRow] = {
    DeleteBuilder("pg_catalog.pg_foreign_server", PgForeignServerFields)
  }
  override def insert(unsaved: PgForeignServerRow): ZIO[ZConnection, Throwable, PgForeignServerRow] = {
    sql"""insert into pg_catalog.pg_foreign_server("oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions")
          values (???::oid, ???::name, ???::oid, ???::oid, ???, ???, ???::_aclitem, ???::_text)
          returning "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgForeignServerFields, PgForeignServerRow] = {
    SelectBuilderSql("pg_catalog.pg_foreign_server", PgForeignServerFields, PgForeignServerRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgForeignServerRow] = {
    sql"""select "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions" from pg_catalog.pg_foreign_server""".query[PgForeignServerRow].selectStream
  }
  override def selectById(oid: PgForeignServerId): ZIO[ZConnection, Throwable, Option[PgForeignServerRow]] = {
    sql"""select "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions" from pg_catalog.pg_foreign_server where "oid" = ???""".query[PgForeignServerRow].selectOne
  }
  override def selectByIds(oids: Array[PgForeignServerId]): ZStream[ZConnection, Throwable, PgForeignServerRow] = {
    sql"""select "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions" from pg_catalog.pg_foreign_server where "oid" = ANY(${oids})""".query[PgForeignServerRow].selectStream
  }
  override def selectByUnique(srvname: String): ZIO[ZConnection, Throwable, Option[PgForeignServerRow]] = {
    sql"""select "srvname"
          from pg_catalog.pg_foreign_server
          where "srvname" = ???
       """.query[PgForeignServerRow].selectOne
  }
  override def update(row: PgForeignServerRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_foreign_server
          set "srvname" = ???::name,
              "srvowner" = ???::oid,
              "srvfdw" = ???::oid,
              "srvtype" = ???,
              "srvversion" = ???,
              "srvacl" = ???::_aclitem,
              "srvoptions" = ???::_text
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgForeignServerFields, PgForeignServerRow] = {
    UpdateBuilder("pg_catalog.pg_foreign_server", PgForeignServerFields, PgForeignServerRow.read)
  }
  override def upsert(unsaved: PgForeignServerRow): ZIO[ZConnection, Throwable, PgForeignServerRow] = {
    sql"""insert into pg_catalog.pg_foreign_server("oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::oid,
            ???,
            ???,
            ???::_aclitem,
            ???::_text
          )
          on conflict ("oid")
          do update set
            "srvname" = EXCLUDED."srvname",
            "srvowner" = EXCLUDED."srvowner",
            "srvfdw" = EXCLUDED."srvfdw",
            "srvtype" = EXCLUDED."srvtype",
            "srvversion" = EXCLUDED."srvversion",
            "srvacl" = EXCLUDED."srvacl",
            "srvoptions" = EXCLUDED."srvoptions"
          returning "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions"
       """.query(???).unique
  }
}
