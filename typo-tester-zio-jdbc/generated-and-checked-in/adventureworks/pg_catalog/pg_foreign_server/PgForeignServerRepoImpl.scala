/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_server

import adventureworks.customtypes.TypoAclItem
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgForeignServerRepoImpl extends PgForeignServerRepo {
  override def delete(oid: PgForeignServerId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_foreign_server where "oid" = ${Segment.paramSegment(oid)(PgForeignServerId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgForeignServerFields, PgForeignServerRow] = {
    DeleteBuilder("pg_catalog.pg_foreign_server", PgForeignServerFields)
  }
  override def insert(unsaved: PgForeignServerRow): ZIO[ZConnection, Throwable, PgForeignServerRow] = {
    sql"""insert into pg_catalog.pg_foreign_server("oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions")
          values (${Segment.paramSegment(unsaved.oid)(PgForeignServerId.setter)}::oid, ${Segment.paramSegment(unsaved.srvname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.srvowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.srvfdw)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.srvtype)(Setter.optionParamSetter(Setter.stringSetter))}, ${Segment.paramSegment(unsaved.srvversion)(Setter.optionParamSetter(Setter.stringSetter))}, ${Segment.paramSegment(unsaved.srvacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem, ${Segment.paramSegment(unsaved.srvoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text)
          returning "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions"
       """.insertReturning(PgForeignServerRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgForeignServerFields, PgForeignServerRow] = {
    SelectBuilderSql("pg_catalog.pg_foreign_server", PgForeignServerFields, PgForeignServerRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgForeignServerRow] = {
    sql"""select "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions" from pg_catalog.pg_foreign_server""".query(PgForeignServerRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgForeignServerId): ZIO[ZConnection, Throwable, Option[PgForeignServerRow]] = {
    sql"""select "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions" from pg_catalog.pg_foreign_server where "oid" = ${Segment.paramSegment(oid)(PgForeignServerId.setter)}""".query(PgForeignServerRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgForeignServerId]): ZStream[ZConnection, Throwable, PgForeignServerRow] = {
    sql"""select "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions" from pg_catalog.pg_foreign_server where "oid" = ANY(${Segment.paramSegment(oids)(PgForeignServerId.arraySetter)})""".query(PgForeignServerRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(srvname: String): ZIO[ZConnection, Throwable, Option[PgForeignServerRow]] = {
    sql"""select "srvname"
          from pg_catalog.pg_foreign_server
          where "srvname" = ${Segment.paramSegment(srvname)(Setter.stringSetter)}
       """.query(PgForeignServerRow.jdbcDecoder).selectOne
  }
  override def update(row: PgForeignServerRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_foreign_server
          set "srvname" = ${Segment.paramSegment(row.srvname)(Setter.stringSetter)}::name,
              "srvowner" = ${Segment.paramSegment(row.srvowner)(Setter.longSetter)}::oid,
              "srvfdw" = ${Segment.paramSegment(row.srvfdw)(Setter.longSetter)}::oid,
              "srvtype" = ${Segment.paramSegment(row.srvtype)(Setter.optionParamSetter(Setter.stringSetter))},
              "srvversion" = ${Segment.paramSegment(row.srvversion)(Setter.optionParamSetter(Setter.stringSetter))},
              "srvacl" = ${Segment.paramSegment(row.srvacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem,
              "srvoptions" = ${Segment.paramSegment(row.srvoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          where "oid" = ${Segment.paramSegment(oid)(PgForeignServerId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgForeignServerFields, PgForeignServerRow] = {
    UpdateBuilder("pg_catalog.pg_foreign_server", PgForeignServerFields, PgForeignServerRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgForeignServerRow): ZIO[ZConnection, Throwable, UpdateResult[PgForeignServerRow]] = {
    sql"""insert into pg_catalog.pg_foreign_server("oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgForeignServerId.setter)}::oid,
            ${Segment.paramSegment(unsaved.srvname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.srvowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.srvfdw)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.srvtype)(Setter.optionParamSetter(Setter.stringSetter))},
            ${Segment.paramSegment(unsaved.srvversion)(Setter.optionParamSetter(Setter.stringSetter))},
            ${Segment.paramSegment(unsaved.srvacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem,
            ${Segment.paramSegment(unsaved.srvoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          )
          on conflict ("oid")
          do update set
            "srvname" = EXCLUDED."srvname",
            "srvowner" = EXCLUDED."srvowner",
            "srvfdw" = EXCLUDED."srvfdw",
            "srvtype" = EXCLUDED."srvtype",
            "srvversion" = EXCLUDED."srvversion",
            "srvacl" = EXCLUDED."srvacl",
            "srvoptions" = EXCLUDED."srvoptions"
          returning "oid", "srvname", "srvowner", "srvfdw", "srvtype", "srvversion", "srvacl", "srvoptions"""".insertReturning(PgForeignServerRow.jdbcDecoder)
  }
}
