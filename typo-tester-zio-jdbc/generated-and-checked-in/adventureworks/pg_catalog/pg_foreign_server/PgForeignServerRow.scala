/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_server

import adventureworks.customtypes.TypoAclItem
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgForeignServerRow(
  oid: PgForeignServerId,
  srvname: String,
  srvowner: /* oid */ Long,
  srvfdw: /* oid */ Long,
  srvtype: Option[String],
  srvversion: Option[String],
  srvacl: Option[Array[TypoAclItem]],
  srvoptions: Option[Array[String]]
)

object PgForeignServerRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgForeignServerRow] = new JdbcDecoder[PgForeignServerRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgForeignServerRow) =
      columIndex + 7 ->
        PgForeignServerRow(
          oid = PgForeignServerId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          srvname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          srvowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          srvfdw = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          srvtype = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          srvversion = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          srvacl = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoAclItem]]).unsafeDecode(columIndex + 6, rs)._2,
          srvoptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgForeignServerRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgForeignServerId.jsonDecoder))
    val srvname = jsonObj.get("srvname").toRight("Missing field 'srvname'").flatMap(_.as(JsonDecoder.string))
    val srvowner = jsonObj.get("srvowner").toRight("Missing field 'srvowner'").flatMap(_.as(JsonDecoder.long))
    val srvfdw = jsonObj.get("srvfdw").toRight("Missing field 'srvfdw'").flatMap(_.as(JsonDecoder.long))
    val srvtype = jsonObj.get("srvtype").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val srvversion = jsonObj.get("srvversion").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val srvacl = jsonObj.get("srvacl").fold[Either[String, Option[Array[TypoAclItem]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly))))
    val srvoptions = jsonObj.get("srvoptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    if (oid.isRight && srvname.isRight && srvowner.isRight && srvfdw.isRight && srvtype.isRight && srvversion.isRight && srvacl.isRight && srvoptions.isRight)
      Right(PgForeignServerRow(oid = oid.toOption.get, srvname = srvname.toOption.get, srvowner = srvowner.toOption.get, srvfdw = srvfdw.toOption.get, srvtype = srvtype.toOption.get, srvversion = srvversion.toOption.get, srvacl = srvacl.toOption.get, srvoptions = srvoptions.toOption.get))
    else Left(List[Either[String, Any]](oid, srvname, srvowner, srvfdw, srvtype, srvversion, srvacl, srvoptions).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgForeignServerRow] = new JsonEncoder[PgForeignServerRow] {
    override def unsafeEncode(a: PgForeignServerRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgForeignServerId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""srvname":""")
      JsonEncoder.string.unsafeEncode(a.srvname, indent, out)
      out.write(",")
      out.write(""""srvowner":""")
      JsonEncoder.long.unsafeEncode(a.srvowner, indent, out)
      out.write(",")
      out.write(""""srvfdw":""")
      JsonEncoder.long.unsafeEncode(a.srvfdw, indent, out)
      out.write(",")
      out.write(""""srvtype":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.srvtype, indent, out)
      out.write(",")
      out.write(""""srvversion":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.srvversion, indent, out)
      out.write(",")
      out.write(""""srvacl":""")
      JsonEncoder.option(JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly)).unsafeEncode(a.srvacl, indent, out)
      out.write(",")
      out.write(""""srvoptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.srvoptions, indent, out)
      out.write("}")
    }
  }
}
