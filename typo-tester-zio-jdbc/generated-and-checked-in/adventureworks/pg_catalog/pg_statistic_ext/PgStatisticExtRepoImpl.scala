/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic_ext

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgStatisticExtRepoImpl extends PgStatisticExtRepo {
  override def delete(oid: PgStatisticExtId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_statistic_ext where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgStatisticExtFields, PgStatisticExtRow] = {
    DeleteBuilder("pg_catalog.pg_statistic_ext", PgStatisticExtFields)
  }
  override def insert(unsaved: PgStatisticExtRow): ZIO[ZConnection, Throwable, PgStatisticExtRow] = {
    sql"""insert into pg_catalog.pg_statistic_ext("oid", "stxrelid", "stxname", "stxnamespace", "stxowner", "stxstattarget", "stxkeys", "stxkind", "stxexprs")
          values (???::oid, ???::oid, ???::name, ???::oid, ???::oid, ???::int4, ???::int2vector, ???::_char, ???::pg_node_tree)
          returning "oid", "stxrelid", "stxname", "stxnamespace", "stxowner", "stxstattarget", "stxkeys", "stxkind", "stxexprs"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgStatisticExtFields, PgStatisticExtRow] = {
    SelectBuilderSql("pg_catalog.pg_statistic_ext", PgStatisticExtFields, PgStatisticExtRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgStatisticExtRow] = {
    sql"""select "oid", "stxrelid", "stxname", "stxnamespace", "stxowner", "stxstattarget", "stxkeys", "stxkind", "stxexprs" from pg_catalog.pg_statistic_ext""".query[PgStatisticExtRow].selectStream
  }
  override def selectById(oid: PgStatisticExtId): ZIO[ZConnection, Throwable, Option[PgStatisticExtRow]] = {
    sql"""select "oid", "stxrelid", "stxname", "stxnamespace", "stxowner", "stxstattarget", "stxkeys", "stxkind", "stxexprs" from pg_catalog.pg_statistic_ext where "oid" = ???""".query[PgStatisticExtRow].selectOne
  }
  override def selectByIds(oids: Array[PgStatisticExtId]): ZStream[ZConnection, Throwable, PgStatisticExtRow] = {
    sql"""select "oid", "stxrelid", "stxname", "stxnamespace", "stxowner", "stxstattarget", "stxkeys", "stxkind", "stxexprs" from pg_catalog.pg_statistic_ext where "oid" = ANY(${oids})""".query[PgStatisticExtRow].selectStream
  }
  override def selectByUnique(stxname: String, stxnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgStatisticExtRow]] = {
    sql"""select "stxname", "stxnamespace"
          from pg_catalog.pg_statistic_ext
          where "stxname" = ??? AND "stxnamespace" = ???
       """.query[PgStatisticExtRow].selectOne
  }
  override def update(row: PgStatisticExtRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_statistic_ext
          set "stxrelid" = ???::oid,
              "stxname" = ???::name,
              "stxnamespace" = ???::oid,
              "stxowner" = ???::oid,
              "stxstattarget" = ???::int4,
              "stxkeys" = ???::int2vector,
              "stxkind" = ???::_char,
              "stxexprs" = ???::pg_node_tree
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgStatisticExtFields, PgStatisticExtRow] = {
    UpdateBuilder("pg_catalog.pg_statistic_ext", PgStatisticExtFields, PgStatisticExtRow.read)
  }
  override def upsert(unsaved: PgStatisticExtRow): ZIO[ZConnection, Throwable, PgStatisticExtRow] = {
    sql"""insert into pg_catalog.pg_statistic_ext("oid", "stxrelid", "stxname", "stxnamespace", "stxowner", "stxstattarget", "stxkeys", "stxkind", "stxexprs")
          values (
            ???::oid,
            ???::oid,
            ???::name,
            ???::oid,
            ???::oid,
            ???::int4,
            ???::int2vector,
            ???::_char,
            ???::pg_node_tree
          )
          on conflict ("oid")
          do update set
            "stxrelid" = EXCLUDED."stxrelid",
            "stxname" = EXCLUDED."stxname",
            "stxnamespace" = EXCLUDED."stxnamespace",
            "stxowner" = EXCLUDED."stxowner",
            "stxstattarget" = EXCLUDED."stxstattarget",
            "stxkeys" = EXCLUDED."stxkeys",
            "stxkind" = EXCLUDED."stxkind",
            "stxexprs" = EXCLUDED."stxexprs"
          returning "oid", "stxrelid", "stxname", "stxnamespace", "stxowner", "stxstattarget", "stxkeys", "stxkind", "stxexprs"
       """.query(???).unique
  }
}
