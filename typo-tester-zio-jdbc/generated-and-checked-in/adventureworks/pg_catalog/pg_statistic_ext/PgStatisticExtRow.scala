/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic_ext

import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoPgNodeTree
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatisticExtRow(
  oid: PgStatisticExtId,
  stxrelid: /* oid */ Long,
  stxname: String,
  stxnamespace: /* oid */ Long,
  stxowner: /* oid */ Long,
  stxstattarget: Int,
  stxkeys: TypoInt2Vector,
  stxkind: Array[String],
  stxexprs: Option[TypoPgNodeTree]
)

object PgStatisticExtRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatisticExtRow] = new JdbcDecoder[PgStatisticExtRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatisticExtRow) =
      columIndex + 8 ->
        PgStatisticExtRow(
          oid = PgStatisticExtId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          stxrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          stxname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          stxnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          stxowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          stxstattarget = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 5, rs)._2,
          stxkeys = TypoInt2Vector.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          stxkind = adventureworks.StringArrayDecoder.unsafeDecode(columIndex + 7, rs)._2,
          stxexprs = JdbcDecoder.optionDecoder(TypoPgNodeTree.jdbcDecoder).unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatisticExtRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgStatisticExtId.jsonDecoder))
    val stxrelid = jsonObj.get("stxrelid").toRight("Missing field 'stxrelid'").flatMap(_.as(JsonDecoder.long))
    val stxname = jsonObj.get("stxname").toRight("Missing field 'stxname'").flatMap(_.as(JsonDecoder.string))
    val stxnamespace = jsonObj.get("stxnamespace").toRight("Missing field 'stxnamespace'").flatMap(_.as(JsonDecoder.long))
    val stxowner = jsonObj.get("stxowner").toRight("Missing field 'stxowner'").flatMap(_.as(JsonDecoder.long))
    val stxstattarget = jsonObj.get("stxstattarget").toRight("Missing field 'stxstattarget'").flatMap(_.as(JsonDecoder.int))
    val stxkeys = jsonObj.get("stxkeys").toRight("Missing field 'stxkeys'").flatMap(_.as(TypoInt2Vector.jsonDecoder))
    val stxkind = jsonObj.get("stxkind").toRight("Missing field 'stxkind'").flatMap(_.as(JsonDecoder.array[String](JsonDecoder.string, implicitly)))
    val stxexprs = jsonObj.get("stxexprs").fold[Either[String, Option[TypoPgNodeTree]]](Right(None))(_.as(JsonDecoder.option(TypoPgNodeTree.jsonDecoder)))
    if (oid.isRight && stxrelid.isRight && stxname.isRight && stxnamespace.isRight && stxowner.isRight && stxstattarget.isRight && stxkeys.isRight && stxkind.isRight && stxexprs.isRight)
      Right(PgStatisticExtRow(oid = oid.toOption.get, stxrelid = stxrelid.toOption.get, stxname = stxname.toOption.get, stxnamespace = stxnamespace.toOption.get, stxowner = stxowner.toOption.get, stxstattarget = stxstattarget.toOption.get, stxkeys = stxkeys.toOption.get, stxkind = stxkind.toOption.get, stxexprs = stxexprs.toOption.get))
    else Left(List[Either[String, Any]](oid, stxrelid, stxname, stxnamespace, stxowner, stxstattarget, stxkeys, stxkind, stxexprs).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatisticExtRow] = new JsonEncoder[PgStatisticExtRow] {
    override def unsafeEncode(a: PgStatisticExtRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgStatisticExtId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""stxrelid":""")
      JsonEncoder.long.unsafeEncode(a.stxrelid, indent, out)
      out.write(",")
      out.write(""""stxname":""")
      JsonEncoder.string.unsafeEncode(a.stxname, indent, out)
      out.write(",")
      out.write(""""stxnamespace":""")
      JsonEncoder.long.unsafeEncode(a.stxnamespace, indent, out)
      out.write(",")
      out.write(""""stxowner":""")
      JsonEncoder.long.unsafeEncode(a.stxowner, indent, out)
      out.write(",")
      out.write(""""stxstattarget":""")
      JsonEncoder.int.unsafeEncode(a.stxstattarget, indent, out)
      out.write(",")
      out.write(""""stxkeys":""")
      TypoInt2Vector.jsonEncoder.unsafeEncode(a.stxkeys, indent, out)
      out.write(",")
      out.write(""""stxkind":""")
      JsonEncoder.array[String](JsonEncoder.string, implicitly).unsafeEncode(a.stxkind, indent, out)
      out.write(",")
      out.write(""""stxexprs":""")
      JsonEncoder.option(TypoPgNodeTree.jsonEncoder).unsafeEncode(a.stxexprs, indent, out)
      out.write("}")
    }
  }
}
