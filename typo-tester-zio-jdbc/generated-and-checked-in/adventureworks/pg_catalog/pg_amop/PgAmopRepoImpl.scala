/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amop

import adventureworks.customtypes.TypoShort
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgAmopRepoImpl extends PgAmopRepo {
  override def delete(oid: PgAmopId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_amop where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgAmopFields, PgAmopRow] = {
    DeleteBuilder("pg_catalog.pg_amop", PgAmopFields)
  }
  override def insert(unsaved: PgAmopRow): ZIO[ZConnection, Throwable, PgAmopRow] = {
    sql"""insert into pg_catalog.pg_amop("oid", "amopfamily", "amoplefttype", "amoprighttype", "amopstrategy", "amoppurpose", "amopopr", "amopmethod", "amopsortfamily")
          values (???::oid, ???::oid, ???::oid, ???::oid, ???::int2, ???::char, ???::oid, ???::oid, ???::oid)
          returning "oid", "amopfamily", "amoplefttype", "amoprighttype", "amopstrategy", "amoppurpose", "amopopr", "amopmethod", "amopsortfamily"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgAmopFields, PgAmopRow] = {
    SelectBuilderSql("pg_catalog.pg_amop", PgAmopFields, PgAmopRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgAmopRow] = {
    sql"""select "oid", "amopfamily", "amoplefttype", "amoprighttype", "amopstrategy", "amoppurpose", "amopopr", "amopmethod", "amopsortfamily" from pg_catalog.pg_amop""".query[PgAmopRow].selectStream
  }
  override def selectById(oid: PgAmopId): ZIO[ZConnection, Throwable, Option[PgAmopRow]] = {
    sql"""select "oid", "amopfamily", "amoplefttype", "amoprighttype", "amopstrategy", "amoppurpose", "amopopr", "amopmethod", "amopsortfamily" from pg_catalog.pg_amop where "oid" = ???""".query[PgAmopRow].selectOne
  }
  override def selectByIds(oids: Array[PgAmopId]): ZStream[ZConnection, Throwable, PgAmopRow] = {
    sql"""select "oid", "amopfamily", "amoplefttype", "amoprighttype", "amopstrategy", "amoppurpose", "amopopr", "amopmethod", "amopsortfamily" from pg_catalog.pg_amop where "oid" = ANY(${oids})""".query[PgAmopRow].selectStream
  }
  override def selectByUnique(amopfamily: /* oid */ Long, amoplefttype: /* oid */ Long, amoprighttype: /* oid */ Long, amopstrategy: TypoShort): ZIO[ZConnection, Throwable, Option[PgAmopRow]] = {
    sql"""select "amopfamily", "amoplefttype", "amoprighttype", "amopstrategy"
          from pg_catalog.pg_amop
          where "amopfamily" = ??? AND "amoplefttype" = ??? AND "amoprighttype" = ??? AND "amopstrategy" = ???
       """.query[PgAmopRow].selectOne
  }
  override def selectByUnique(amopopr: /* oid */ Long, amoppurpose: String, amopfamily: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgAmopRow]] = {
    sql"""select "amopopr", "amoppurpose", "amopfamily"
          from pg_catalog.pg_amop
          where "amopopr" = ??? AND "amoppurpose" = ??? AND "amopfamily" = ???
       """.query[PgAmopRow].selectOne
  }
  override def update(row: PgAmopRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_amop
          set "amopfamily" = ???::oid,
              "amoplefttype" = ???::oid,
              "amoprighttype" = ???::oid,
              "amopstrategy" = ???::int2,
              "amoppurpose" = ???::char,
              "amopopr" = ???::oid,
              "amopmethod" = ???::oid,
              "amopsortfamily" = ???::oid
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgAmopFields, PgAmopRow] = {
    UpdateBuilder("pg_catalog.pg_amop", PgAmopFields, PgAmopRow.read)
  }
  override def upsert(unsaved: PgAmopRow): ZIO[ZConnection, Throwable, PgAmopRow] = {
    sql"""insert into pg_catalog.pg_amop("oid", "amopfamily", "amoplefttype", "amoprighttype", "amopstrategy", "amoppurpose", "amopopr", "amopmethod", "amopsortfamily")
          values (
            ???::oid,
            ???::oid,
            ???::oid,
            ???::oid,
            ???::int2,
            ???::char,
            ???::oid,
            ???::oid,
            ???::oid
          )
          on conflict ("oid")
          do update set
            "amopfamily" = EXCLUDED."amopfamily",
            "amoplefttype" = EXCLUDED."amoplefttype",
            "amoprighttype" = EXCLUDED."amoprighttype",
            "amopstrategy" = EXCLUDED."amopstrategy",
            "amoppurpose" = EXCLUDED."amoppurpose",
            "amopopr" = EXCLUDED."amopopr",
            "amopmethod" = EXCLUDED."amopmethod",
            "amopsortfamily" = EXCLUDED."amopsortfamily"
          returning "oid", "amopfamily", "amoplefttype", "amoprighttype", "amopstrategy", "amoppurpose", "amopopr", "amopmethod", "amopsortfamily"
       """.query(???).unique
  }
}
