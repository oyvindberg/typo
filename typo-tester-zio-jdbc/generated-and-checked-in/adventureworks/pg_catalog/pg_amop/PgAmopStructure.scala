/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amop

import adventureworks.customtypes.TypoShort
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

class PgAmopStructure[Row](val prefix: Option[String], val extract: Row => PgAmopRow, val merge: (Row, PgAmopRow) => Row)
  extends Relation[PgAmopFields, PgAmopRow, Row]
    with PgAmopFields[Row] { outer =>

  override val oid = new IdField[PgAmopId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val amopfamily = new Field[/* oid */ Long, Row](prefix, "amopfamily", None, Some("oid"))(x => extract(x).amopfamily, (row, value) => merge(row, extract(row).copy(amopfamily = value)))
  override val amoplefttype = new Field[/* oid */ Long, Row](prefix, "amoplefttype", None, Some("oid"))(x => extract(x).amoplefttype, (row, value) => merge(row, extract(row).copy(amoplefttype = value)))
  override val amoprighttype = new Field[/* oid */ Long, Row](prefix, "amoprighttype", None, Some("oid"))(x => extract(x).amoprighttype, (row, value) => merge(row, extract(row).copy(amoprighttype = value)))
  override val amopstrategy = new Field[TypoShort, Row](prefix, "amopstrategy", None, Some("int2"))(x => extract(x).amopstrategy, (row, value) => merge(row, extract(row).copy(amopstrategy = value)))
  override val amoppurpose = new Field[String, Row](prefix, "amoppurpose", None, Some("char"))(x => extract(x).amoppurpose, (row, value) => merge(row, extract(row).copy(amoppurpose = value)))
  override val amopopr = new Field[/* oid */ Long, Row](prefix, "amopopr", None, Some("oid"))(x => extract(x).amopopr, (row, value) => merge(row, extract(row).copy(amopopr = value)))
  override val amopmethod = new Field[/* oid */ Long, Row](prefix, "amopmethod", None, Some("oid"))(x => extract(x).amopmethod, (row, value) => merge(row, extract(row).copy(amopmethod = value)))
  override val amopsortfamily = new Field[/* oid */ Long, Row](prefix, "amopsortfamily", None, Some("oid"))(x => extract(x).amopsortfamily, (row, value) => merge(row, extract(row).copy(amopsortfamily = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgAmopRow, merge: (NewRow, PgAmopRow) => NewRow): PgAmopStructure[NewRow] =
    new PgAmopStructure(prefix, extract, merge)
}
