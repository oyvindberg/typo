/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amop

import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgAmopRow(
  oid: PgAmopId,
  amopfamily: /* oid */ Long,
  amoplefttype: /* oid */ Long,
  amoprighttype: /* oid */ Long,
  amopstrategy: TypoShort,
  amoppurpose: String,
  amopopr: /* oid */ Long,
  amopmethod: /* oid */ Long,
  amopsortfamily: /* oid */ Long
)

object PgAmopRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgAmopRow] = new JdbcDecoder[PgAmopRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgAmopRow) =
      columIndex + 8 ->
        PgAmopRow(
          oid = PgAmopId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          amopfamily = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          amoplefttype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          amoprighttype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          amopstrategy = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          amoppurpose = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 5, rs)._2,
          amopopr = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 6, rs)._2,
          amopmethod = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 7, rs)._2,
          amopsortfamily = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgAmopRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgAmopId.jsonDecoder))
    val amopfamily = jsonObj.get("amopfamily").toRight("Missing field 'amopfamily'").flatMap(_.as(JsonDecoder.long))
    val amoplefttype = jsonObj.get("amoplefttype").toRight("Missing field 'amoplefttype'").flatMap(_.as(JsonDecoder.long))
    val amoprighttype = jsonObj.get("amoprighttype").toRight("Missing field 'amoprighttype'").flatMap(_.as(JsonDecoder.long))
    val amopstrategy = jsonObj.get("amopstrategy").toRight("Missing field 'amopstrategy'").flatMap(_.as(TypoShort.jsonDecoder))
    val amoppurpose = jsonObj.get("amoppurpose").toRight("Missing field 'amoppurpose'").flatMap(_.as(JsonDecoder.string))
    val amopopr = jsonObj.get("amopopr").toRight("Missing field 'amopopr'").flatMap(_.as(JsonDecoder.long))
    val amopmethod = jsonObj.get("amopmethod").toRight("Missing field 'amopmethod'").flatMap(_.as(JsonDecoder.long))
    val amopsortfamily = jsonObj.get("amopsortfamily").toRight("Missing field 'amopsortfamily'").flatMap(_.as(JsonDecoder.long))
    if (oid.isRight && amopfamily.isRight && amoplefttype.isRight && amoprighttype.isRight && amopstrategy.isRight && amoppurpose.isRight && amopopr.isRight && amopmethod.isRight && amopsortfamily.isRight)
      Right(PgAmopRow(oid = oid.toOption.get, amopfamily = amopfamily.toOption.get, amoplefttype = amoplefttype.toOption.get, amoprighttype = amoprighttype.toOption.get, amopstrategy = amopstrategy.toOption.get, amoppurpose = amoppurpose.toOption.get, amopopr = amopopr.toOption.get, amopmethod = amopmethod.toOption.get, amopsortfamily = amopsortfamily.toOption.get))
    else Left(List[Either[String, Any]](oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgAmopRow] = new JsonEncoder[PgAmopRow] {
    override def unsafeEncode(a: PgAmopRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgAmopId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""amopfamily":""")
      JsonEncoder.long.unsafeEncode(a.amopfamily, indent, out)
      out.write(",")
      out.write(""""amoplefttype":""")
      JsonEncoder.long.unsafeEncode(a.amoplefttype, indent, out)
      out.write(",")
      out.write(""""amoprighttype":""")
      JsonEncoder.long.unsafeEncode(a.amoprighttype, indent, out)
      out.write(",")
      out.write(""""amopstrategy":""")
      TypoShort.jsonEncoder.unsafeEncode(a.amopstrategy, indent, out)
      out.write(",")
      out.write(""""amoppurpose":""")
      JsonEncoder.string.unsafeEncode(a.amoppurpose, indent, out)
      out.write(",")
      out.write(""""amopopr":""")
      JsonEncoder.long.unsafeEncode(a.amopopr, indent, out)
      out.write(",")
      out.write(""""amopmethod":""")
      JsonEncoder.long.unsafeEncode(a.amopmethod, indent, out)
      out.write(",")
      out.write(""""amopsortfamily":""")
      JsonEncoder.long.unsafeEncode(a.amopsortfamily, indent, out)
      out.write("}")
    }
  }
}
