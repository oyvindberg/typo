/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_views

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgViewsViewRow(
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  viewname: String,
  viewowner: /* nullability unknown */ Option[String],
  definition: /* nullability unknown */ Option[String]
)

object PgViewsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgViewsViewRow] = new JdbcDecoder[PgViewsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgViewsViewRow) =
      columIndex + 3 ->
        PgViewsViewRow(
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          viewname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          viewowner = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          definition = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgViewsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val viewname = jsonObj.get("viewname").toRight("Missing field 'viewname'").flatMap(_.as(JsonDecoder.string))
    val viewowner = jsonObj.get("viewowner").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val definition = jsonObj.get("definition").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (schemaname.isRight && viewname.isRight && viewowner.isRight && definition.isRight)
      Right(PgViewsViewRow(schemaname = schemaname.toOption.get, viewname = viewname.toOption.get, viewowner = viewowner.toOption.get, definition = definition.toOption.get))
    else Left(List[Either[String, Any]](schemaname, viewname, viewowner, definition).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgViewsViewRow] = new JsonEncoder[PgViewsViewRow] {
    override def unsafeEncode(a: PgViewsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""viewname":""")
      JsonEncoder.string.unsafeEncode(a.viewname, indent, out)
      out.write(",")
      out.write(""""viewowner":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.viewowner, indent, out)
      out.write(",")
      out.write(""""definition":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.definition, indent, out)
      out.write("}")
    }
  }
}
