/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_db_role_setting

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgDbRoleSettingRepoImpl extends PgDbRoleSettingRepo {
  override def delete(compositeId: PgDbRoleSettingId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_db_role_setting where "setdatabase" = ??? AND "setrole" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgDbRoleSettingFields, PgDbRoleSettingRow] = {
    DeleteBuilder("pg_catalog.pg_db_role_setting", PgDbRoleSettingFields)
  }
  override def insert(unsaved: PgDbRoleSettingRow): ZIO[ZConnection, Throwable, PgDbRoleSettingRow] = {
    sql"""insert into pg_catalog.pg_db_role_setting("setdatabase", "setrole", "setconfig")
          values (???::oid, ???::oid, ???::_text)
          returning "setdatabase", "setrole", "setconfig"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgDbRoleSettingFields, PgDbRoleSettingRow] = {
    SelectBuilderSql("pg_catalog.pg_db_role_setting", PgDbRoleSettingFields, PgDbRoleSettingRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgDbRoleSettingRow] = {
    sql"""select "setdatabase", "setrole", "setconfig" from pg_catalog.pg_db_role_setting""".query[PgDbRoleSettingRow].selectStream
  }
  override def selectById(compositeId: PgDbRoleSettingId): ZIO[ZConnection, Throwable, Option[PgDbRoleSettingRow]] = {
    sql"""select "setdatabase", "setrole", "setconfig" from pg_catalog.pg_db_role_setting where "setdatabase" = ??? AND "setrole" = ???""".query[PgDbRoleSettingRow].selectOne
  }
  override def update(row: PgDbRoleSettingRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_db_role_setting
          set "setconfig" = ???::_text
          where "setdatabase" = ??? AND "setrole" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgDbRoleSettingFields, PgDbRoleSettingRow] = {
    UpdateBuilder("pg_catalog.pg_db_role_setting", PgDbRoleSettingFields, PgDbRoleSettingRow.read)
  }
  override def upsert(unsaved: PgDbRoleSettingRow): ZIO[ZConnection, Throwable, PgDbRoleSettingRow] = {
    sql"""insert into pg_catalog.pg_db_role_setting("setdatabase", "setrole", "setconfig")
          values (
            ???::oid,
            ???::oid,
            ???::_text
          )
          on conflict ("setdatabase", "setrole")
          do update set
            "setconfig" = EXCLUDED."setconfig"
          returning "setdatabase", "setrole", "setconfig"
       """.query(???).unique
  }
}
