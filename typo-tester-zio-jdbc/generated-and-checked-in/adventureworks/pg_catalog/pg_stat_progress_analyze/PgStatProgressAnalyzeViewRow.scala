/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_analyze

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatProgressAnalyzeViewRow(
  pid: /* nullability unknown */ Option[Int],
  datid: /* nullability unknown */ Option[/* oid */ Long],
  /** Points to [[pg_database.PgDatabaseRow.datname]] */
  datname: Option[String],
  relid: /* nullability unknown */ Option[/* oid */ Long],
  phase: /* nullability unknown */ Option[String],
  sampleBlksTotal: /* nullability unknown */ Option[Long],
  sampleBlksScanned: /* nullability unknown */ Option[Long],
  extStatsTotal: /* nullability unknown */ Option[Long],
  extStatsComputed: /* nullability unknown */ Option[Long],
  childTablesTotal: /* nullability unknown */ Option[Long],
  childTablesDone: /* nullability unknown */ Option[Long],
  currentChildTableRelid: /* nullability unknown */ Option[/* oid */ Long]
)

object PgStatProgressAnalyzeViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatProgressAnalyzeViewRow] = new JdbcDecoder[PgStatProgressAnalyzeViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatProgressAnalyzeViewRow) =
      columIndex + 11 ->
        PgStatProgressAnalyzeViewRow(
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 0, rs)._2,
          datid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          datname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          relid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          phase = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          sampleBlksTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          sampleBlksScanned = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 6, rs)._2,
          extStatsTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          extStatsComputed = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 8, rs)._2,
          childTablesTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 9, rs)._2,
          childTablesDone = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 10, rs)._2,
          currentChildTableRelid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 11, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatProgressAnalyzeViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val datid = jsonObj.get("datid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val datname = jsonObj.get("datname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val relid = jsonObj.get("relid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val phase = jsonObj.get("phase").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val sampleBlksTotal = jsonObj.get("sample_blks_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val sampleBlksScanned = jsonObj.get("sample_blks_scanned").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val extStatsTotal = jsonObj.get("ext_stats_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val extStatsComputed = jsonObj.get("ext_stats_computed").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val childTablesTotal = jsonObj.get("child_tables_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val childTablesDone = jsonObj.get("child_tables_done").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val currentChildTableRelid = jsonObj.get("current_child_table_relid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (pid.isRight && datid.isRight && datname.isRight && relid.isRight && phase.isRight && sampleBlksTotal.isRight && sampleBlksScanned.isRight && extStatsTotal.isRight && extStatsComputed.isRight && childTablesTotal.isRight && childTablesDone.isRight && currentChildTableRelid.isRight)
      Right(PgStatProgressAnalyzeViewRow(pid = pid.toOption.get, datid = datid.toOption.get, datname = datname.toOption.get, relid = relid.toOption.get, phase = phase.toOption.get, sampleBlksTotal = sampleBlksTotal.toOption.get, sampleBlksScanned = sampleBlksScanned.toOption.get, extStatsTotal = extStatsTotal.toOption.get, extStatsComputed = extStatsComputed.toOption.get, childTablesTotal = childTablesTotal.toOption.get, childTablesDone = childTablesDone.toOption.get, currentChildTableRelid = currentChildTableRelid.toOption.get))
    else Left(List[Either[String, Any]](pid, datid, datname, relid, phase, sampleBlksTotal, sampleBlksScanned, extStatsTotal, extStatsComputed, childTablesTotal, childTablesDone, currentChildTableRelid).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatProgressAnalyzeViewRow] = new JsonEncoder[PgStatProgressAnalyzeViewRow] {
    override def unsafeEncode(a: PgStatProgressAnalyzeViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""datid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.datid, indent, out)
      out.write(",")
      out.write(""""datname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.datname, indent, out)
      out.write(",")
      out.write(""""relid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.relid, indent, out)
      out.write(",")
      out.write(""""phase":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.phase, indent, out)
      out.write(",")
      out.write(""""sample_blks_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.sampleBlksTotal, indent, out)
      out.write(",")
      out.write(""""sample_blks_scanned":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.sampleBlksScanned, indent, out)
      out.write(",")
      out.write(""""ext_stats_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.extStatsTotal, indent, out)
      out.write(",")
      out.write(""""ext_stats_computed":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.extStatsComputed, indent, out)
      out.write(",")
      out.write(""""child_tables_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.childTablesTotal, indent, out)
      out.write(",")
      out.write(""""child_tables_done":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.childTablesDone, indent, out)
      out.write(",")
      out.write(""""current_child_table_relid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.currentChildTableRelid, indent, out)
      out.write("}")
    }
  }
}
