/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_sequences

import adventureworks.customtypes.TypoRegtype
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgSequencesViewRow(
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: String,
  /** Points to [[pg_class.PgClassRow.relname]] */
  sequencename: String,
  sequenceowner: /* nullability unknown */ Option[String],
  dataType: /* nullability unknown */ Option[TypoRegtype],
  /** Points to [[pg_sequence.PgSequenceRow.seqstart]] */
  startValue: Long,
  /** Points to [[pg_sequence.PgSequenceRow.seqmin]] */
  minValue: Long,
  /** Points to [[pg_sequence.PgSequenceRow.seqmax]] */
  maxValue: Long,
  /** Points to [[pg_sequence.PgSequenceRow.seqincrement]] */
  incrementBy: Long,
  /** Points to [[pg_sequence.PgSequenceRow.seqcycle]] */
  cycle: Boolean,
  /** Points to [[pg_sequence.PgSequenceRow.seqcache]] */
  cacheSize: Long,
  lastValue: /* nullability unknown */ Option[Long]
)

object PgSequencesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgSequencesViewRow] = new JdbcDecoder[PgSequencesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgSequencesViewRow) =
      columIndex + 10 ->
        PgSequencesViewRow(
          schemaname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 0, rs)._2,
          sequencename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          sequenceowner = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          dataType = JdbcDecoder.optionDecoder(TypoRegtype.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2,
          startValue = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          minValue = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 5, rs)._2,
          maxValue = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 6, rs)._2,
          incrementBy = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 7, rs)._2,
          cycle = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 8, rs)._2,
          cacheSize = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 9, rs)._2,
          lastValue = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 10, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgSequencesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val schemaname = jsonObj.get("schemaname").toRight("Missing field 'schemaname'").flatMap(_.as(JsonDecoder.string))
    val sequencename = jsonObj.get("sequencename").toRight("Missing field 'sequencename'").flatMap(_.as(JsonDecoder.string))
    val sequenceowner = jsonObj.get("sequenceowner").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val dataType = jsonObj.get("data_type").fold[Either[String, Option[TypoRegtype]]](Right(None))(_.as(JsonDecoder.option(TypoRegtype.jsonDecoder)))
    val startValue = jsonObj.get("start_value").toRight("Missing field 'start_value'").flatMap(_.as(JsonDecoder.long))
    val minValue = jsonObj.get("min_value").toRight("Missing field 'min_value'").flatMap(_.as(JsonDecoder.long))
    val maxValue = jsonObj.get("max_value").toRight("Missing field 'max_value'").flatMap(_.as(JsonDecoder.long))
    val incrementBy = jsonObj.get("increment_by").toRight("Missing field 'increment_by'").flatMap(_.as(JsonDecoder.long))
    val cycle = jsonObj.get("cycle").toRight("Missing field 'cycle'").flatMap(_.as(JsonDecoder.boolean))
    val cacheSize = jsonObj.get("cache_size").toRight("Missing field 'cache_size'").flatMap(_.as(JsonDecoder.long))
    val lastValue = jsonObj.get("last_value").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (schemaname.isRight && sequencename.isRight && sequenceowner.isRight && dataType.isRight && startValue.isRight && minValue.isRight && maxValue.isRight && incrementBy.isRight && cycle.isRight && cacheSize.isRight && lastValue.isRight)
      Right(PgSequencesViewRow(schemaname = schemaname.toOption.get, sequencename = sequencename.toOption.get, sequenceowner = sequenceowner.toOption.get, dataType = dataType.toOption.get, startValue = startValue.toOption.get, minValue = minValue.toOption.get, maxValue = maxValue.toOption.get, incrementBy = incrementBy.toOption.get, cycle = cycle.toOption.get, cacheSize = cacheSize.toOption.get, lastValue = lastValue.toOption.get))
    else Left(List[Either[String, Any]](schemaname, sequencename, sequenceowner, dataType, startValue, minValue, maxValue, incrementBy, cycle, cacheSize, lastValue).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgSequencesViewRow] = new JsonEncoder[PgSequencesViewRow] {
    override def unsafeEncode(a: PgSequencesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""schemaname":""")
      JsonEncoder.string.unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""sequencename":""")
      JsonEncoder.string.unsafeEncode(a.sequencename, indent, out)
      out.write(",")
      out.write(""""sequenceowner":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.sequenceowner, indent, out)
      out.write(",")
      out.write(""""data_type":""")
      JsonEncoder.option(TypoRegtype.jsonEncoder).unsafeEncode(a.dataType, indent, out)
      out.write(",")
      out.write(""""start_value":""")
      JsonEncoder.long.unsafeEncode(a.startValue, indent, out)
      out.write(",")
      out.write(""""min_value":""")
      JsonEncoder.long.unsafeEncode(a.minValue, indent, out)
      out.write(",")
      out.write(""""max_value":""")
      JsonEncoder.long.unsafeEncode(a.maxValue, indent, out)
      out.write(",")
      out.write(""""increment_by":""")
      JsonEncoder.long.unsafeEncode(a.incrementBy, indent, out)
      out.write(",")
      out.write(""""cycle":""")
      JsonEncoder.boolean.unsafeEncode(a.cycle, indent, out)
      out.write(",")
      out.write(""""cache_size":""")
      JsonEncoder.long.unsafeEncode(a.cacheSize, indent, out)
      out.write(",")
      out.write(""""last_value":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.lastValue, indent, out)
      out.write("}")
    }
  }
}
