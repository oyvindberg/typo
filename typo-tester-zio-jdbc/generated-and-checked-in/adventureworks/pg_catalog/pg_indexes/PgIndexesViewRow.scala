/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_indexes

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgIndexesViewRow(
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  tablename: String,
  /** Points to [[pg_class.PgClassRow.relname]] */
  indexname: String,
  /** Points to [[pg_tablespace.PgTablespaceRow.spcname]] */
  tablespace: Option[String],
  indexdef: /* nullability unknown */ Option[String]
)

object PgIndexesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgIndexesViewRow] = new JdbcDecoder[PgIndexesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgIndexesViewRow) =
      columIndex + 4 ->
        PgIndexesViewRow(
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          tablename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          indexname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          tablespace = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          indexdef = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgIndexesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tablename = jsonObj.get("tablename").toRight("Missing field 'tablename'").flatMap(_.as(JsonDecoder.string))
    val indexname = jsonObj.get("indexname").toRight("Missing field 'indexname'").flatMap(_.as(JsonDecoder.string))
    val tablespace = jsonObj.get("tablespace").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val indexdef = jsonObj.get("indexdef").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (schemaname.isRight && tablename.isRight && indexname.isRight && tablespace.isRight && indexdef.isRight)
      Right(PgIndexesViewRow(schemaname = schemaname.toOption.get, tablename = tablename.toOption.get, indexname = indexname.toOption.get, tablespace = tablespace.toOption.get, indexdef = indexdef.toOption.get))
    else Left(List[Either[String, Any]](schemaname, tablename, indexname, tablespace, indexdef).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgIndexesViewRow] = new JsonEncoder[PgIndexesViewRow] {
    override def unsafeEncode(a: PgIndexesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""tablename":""")
      JsonEncoder.string.unsafeEncode(a.tablename, indent, out)
      out.write(",")
      out.write(""""indexname":""")
      JsonEncoder.string.unsafeEncode(a.indexname, indent, out)
      out.write(",")
      out.write(""""tablespace":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tablespace, indent, out)
      out.write(",")
      out.write(""""indexdef":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.indexdef, indent, out)
      out.write("}")
    }
  }
}
