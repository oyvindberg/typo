/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic

import adventureworks.customtypes.TypoShort
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `pg_catalog.pg_statistic` */
case class PgStatisticId(starelid: /* oid */ Long, staattnum: TypoShort, stainherit: Boolean)
object PgStatisticId {
  implicit lazy val jsonDecoder: JsonDecoder[PgStatisticId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val starelid = jsonObj.get("starelid").toRight("Missing field 'starelid'").flatMap(_.as(JsonDecoder.long))
    val staattnum = jsonObj.get("staattnum").toRight("Missing field 'staattnum'").flatMap(_.as(TypoShort.jsonDecoder))
    val stainherit = jsonObj.get("stainherit").toRight("Missing field 'stainherit'").flatMap(_.as(JsonDecoder.boolean))
    if (starelid.isRight && staattnum.isRight && stainherit.isRight)
      Right(PgStatisticId(starelid = starelid.toOption.get, staattnum = staattnum.toOption.get, stainherit = stainherit.toOption.get))
    else Left(List[Either[String, Any]](starelid, staattnum, stainherit).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatisticId] = new JsonEncoder[PgStatisticId] {
    override def unsafeEncode(a: PgStatisticId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""starelid":""")
      JsonEncoder.long.unsafeEncode(a.starelid, indent, out)
      out.write(",")
      out.write(""""staattnum":""")
      TypoShort.jsonEncoder.unsafeEncode(a.staattnum, indent, out)
      out.write(",")
      out.write(""""stainherit":""")
      JsonEncoder.boolean.unsafeEncode(a.stainherit, indent, out)
      out.write("}")
    }
  }
  implicit def ordering(implicit O0: Ordering[TypoShort]): Ordering[PgStatisticId] = Ordering.by(x => (x.starelid, x.staattnum, x.stainherit))
}
