/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic

import adventureworks.customtypes.TypoAnyArray
import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatisticRow(
  starelid: /* oid */ Long,
  staattnum: TypoShort,
  stainherit: Boolean,
  stanullfrac: Float,
  stawidth: Int,
  stadistinct: Float,
  stakind1: TypoShort,
  stakind2: TypoShort,
  stakind3: TypoShort,
  stakind4: TypoShort,
  stakind5: TypoShort,
  staop1: /* oid */ Long,
  staop2: /* oid */ Long,
  staop3: /* oid */ Long,
  staop4: /* oid */ Long,
  staop5: /* oid */ Long,
  stacoll1: /* oid */ Long,
  stacoll2: /* oid */ Long,
  stacoll3: /* oid */ Long,
  stacoll4: /* oid */ Long,
  stacoll5: /* oid */ Long,
  stanumbers1: Option[Array[Float]],
  stanumbers2: Option[Array[Float]],
  stanumbers3: Option[Array[Float]],
  stanumbers4: Option[Array[Float]],
  stanumbers5: Option[Array[Float]],
  stavalues1: Option[TypoAnyArray],
  stavalues2: Option[TypoAnyArray],
  stavalues3: Option[TypoAnyArray],
  stavalues4: Option[TypoAnyArray],
  stavalues5: Option[TypoAnyArray]
){
   val compositeId: PgStatisticId = PgStatisticId(starelid, staattnum, stainherit)
 }

object PgStatisticRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatisticRow] = new JdbcDecoder[PgStatisticRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatisticRow) =
      columIndex + 30 ->
        PgStatisticRow(
          starelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 0, rs)._2,
          staattnum = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          stainherit = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 2, rs)._2,
          stanullfrac = JdbcDecoder.floatDecoder.unsafeDecode(columIndex + 3, rs)._2,
          stawidth = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 4, rs)._2,
          stadistinct = JdbcDecoder.floatDecoder.unsafeDecode(columIndex + 5, rs)._2,
          stakind1 = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          stakind2 = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 7, rs)._2,
          stakind3 = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 8, rs)._2,
          stakind4 = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 9, rs)._2,
          stakind5 = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 10, rs)._2,
          staop1 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 11, rs)._2,
          staop2 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 12, rs)._2,
          staop3 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 13, rs)._2,
          staop4 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 14, rs)._2,
          staop5 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 15, rs)._2,
          stacoll1 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 16, rs)._2,
          stacoll2 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 17, rs)._2,
          stacoll3 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 18, rs)._2,
          stacoll4 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 19, rs)._2,
          stacoll5 = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 20, rs)._2,
          stanumbers1 = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 21, rs)._2,
          stanumbers2 = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 22, rs)._2,
          stanumbers3 = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 23, rs)._2,
          stanumbers4 = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 24, rs)._2,
          stanumbers5 = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 25, rs)._2,
          stavalues1 = JdbcDecoder.optionDecoder(TypoAnyArray.jdbcDecoder).unsafeDecode(columIndex + 26, rs)._2,
          stavalues2 = JdbcDecoder.optionDecoder(TypoAnyArray.jdbcDecoder).unsafeDecode(columIndex + 27, rs)._2,
          stavalues3 = JdbcDecoder.optionDecoder(TypoAnyArray.jdbcDecoder).unsafeDecode(columIndex + 28, rs)._2,
          stavalues4 = JdbcDecoder.optionDecoder(TypoAnyArray.jdbcDecoder).unsafeDecode(columIndex + 29, rs)._2,
          stavalues5 = JdbcDecoder.optionDecoder(TypoAnyArray.jdbcDecoder).unsafeDecode(columIndex + 30, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatisticRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val starelid = jsonObj.get("starelid").toRight("Missing field 'starelid'").flatMap(_.as(JsonDecoder.long))
    val staattnum = jsonObj.get("staattnum").toRight("Missing field 'staattnum'").flatMap(_.as(TypoShort.jsonDecoder))
    val stainherit = jsonObj.get("stainherit").toRight("Missing field 'stainherit'").flatMap(_.as(JsonDecoder.boolean))
    val stanullfrac = jsonObj.get("stanullfrac").toRight("Missing field 'stanullfrac'").flatMap(_.as(JsonDecoder.float))
    val stawidth = jsonObj.get("stawidth").toRight("Missing field 'stawidth'").flatMap(_.as(JsonDecoder.int))
    val stadistinct = jsonObj.get("stadistinct").toRight("Missing field 'stadistinct'").flatMap(_.as(JsonDecoder.float))
    val stakind1 = jsonObj.get("stakind1").toRight("Missing field 'stakind1'").flatMap(_.as(TypoShort.jsonDecoder))
    val stakind2 = jsonObj.get("stakind2").toRight("Missing field 'stakind2'").flatMap(_.as(TypoShort.jsonDecoder))
    val stakind3 = jsonObj.get("stakind3").toRight("Missing field 'stakind3'").flatMap(_.as(TypoShort.jsonDecoder))
    val stakind4 = jsonObj.get("stakind4").toRight("Missing field 'stakind4'").flatMap(_.as(TypoShort.jsonDecoder))
    val stakind5 = jsonObj.get("stakind5").toRight("Missing field 'stakind5'").flatMap(_.as(TypoShort.jsonDecoder))
    val staop1 = jsonObj.get("staop1").toRight("Missing field 'staop1'").flatMap(_.as(JsonDecoder.long))
    val staop2 = jsonObj.get("staop2").toRight("Missing field 'staop2'").flatMap(_.as(JsonDecoder.long))
    val staop3 = jsonObj.get("staop3").toRight("Missing field 'staop3'").flatMap(_.as(JsonDecoder.long))
    val staop4 = jsonObj.get("staop4").toRight("Missing field 'staop4'").flatMap(_.as(JsonDecoder.long))
    val staop5 = jsonObj.get("staop5").toRight("Missing field 'staop5'").flatMap(_.as(JsonDecoder.long))
    val stacoll1 = jsonObj.get("stacoll1").toRight("Missing field 'stacoll1'").flatMap(_.as(JsonDecoder.long))
    val stacoll2 = jsonObj.get("stacoll2").toRight("Missing field 'stacoll2'").flatMap(_.as(JsonDecoder.long))
    val stacoll3 = jsonObj.get("stacoll3").toRight("Missing field 'stacoll3'").flatMap(_.as(JsonDecoder.long))
    val stacoll4 = jsonObj.get("stacoll4").toRight("Missing field 'stacoll4'").flatMap(_.as(JsonDecoder.long))
    val stacoll5 = jsonObj.get("stacoll5").toRight("Missing field 'stacoll5'").flatMap(_.as(JsonDecoder.long))
    val stanumbers1 = jsonObj.get("stanumbers1").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Float](JsonDecoder.float, implicitly))))
    val stanumbers2 = jsonObj.get("stanumbers2").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Float](JsonDecoder.float, implicitly))))
    val stanumbers3 = jsonObj.get("stanumbers3").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Float](JsonDecoder.float, implicitly))))
    val stanumbers4 = jsonObj.get("stanumbers4").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Float](JsonDecoder.float, implicitly))))
    val stanumbers5 = jsonObj.get("stanumbers5").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Float](JsonDecoder.float, implicitly))))
    val stavalues1 = jsonObj.get("stavalues1").fold[Either[String, Option[TypoAnyArray]]](Right(None))(_.as(JsonDecoder.option(TypoAnyArray.jsonDecoder)))
    val stavalues2 = jsonObj.get("stavalues2").fold[Either[String, Option[TypoAnyArray]]](Right(None))(_.as(JsonDecoder.option(TypoAnyArray.jsonDecoder)))
    val stavalues3 = jsonObj.get("stavalues3").fold[Either[String, Option[TypoAnyArray]]](Right(None))(_.as(JsonDecoder.option(TypoAnyArray.jsonDecoder)))
    val stavalues4 = jsonObj.get("stavalues4").fold[Either[String, Option[TypoAnyArray]]](Right(None))(_.as(JsonDecoder.option(TypoAnyArray.jsonDecoder)))
    val stavalues5 = jsonObj.get("stavalues5").fold[Either[String, Option[TypoAnyArray]]](Right(None))(_.as(JsonDecoder.option(TypoAnyArray.jsonDecoder)))
    if (starelid.isRight && staattnum.isRight && stainherit.isRight && stanullfrac.isRight && stawidth.isRight && stadistinct.isRight && stakind1.isRight && stakind2.isRight && stakind3.isRight && stakind4.isRight && stakind5.isRight && staop1.isRight && staop2.isRight && staop3.isRight && staop4.isRight && staop5.isRight && stacoll1.isRight && stacoll2.isRight && stacoll3.isRight && stacoll4.isRight && stacoll5.isRight && stanumbers1.isRight && stanumbers2.isRight && stanumbers3.isRight && stanumbers4.isRight && stanumbers5.isRight && stavalues1.isRight && stavalues2.isRight && stavalues3.isRight && stavalues4.isRight && stavalues5.isRight)
      Right(PgStatisticRow(starelid = starelid.toOption.get, staattnum = staattnum.toOption.get, stainherit = stainherit.toOption.get, stanullfrac = stanullfrac.toOption.get, stawidth = stawidth.toOption.get, stadistinct = stadistinct.toOption.get, stakind1 = stakind1.toOption.get, stakind2 = stakind2.toOption.get, stakind3 = stakind3.toOption.get, stakind4 = stakind4.toOption.get, stakind5 = stakind5.toOption.get, staop1 = staop1.toOption.get, staop2 = staop2.toOption.get, staop3 = staop3.toOption.get, staop4 = staop4.toOption.get, staop5 = staop5.toOption.get, stacoll1 = stacoll1.toOption.get, stacoll2 = stacoll2.toOption.get, stacoll3 = stacoll3.toOption.get, stacoll4 = stacoll4.toOption.get, stacoll5 = stacoll5.toOption.get, stanumbers1 = stanumbers1.toOption.get, stanumbers2 = stanumbers2.toOption.get, stanumbers3 = stanumbers3.toOption.get, stanumbers4 = stanumbers4.toOption.get, stanumbers5 = stanumbers5.toOption.get, stavalues1 = stavalues1.toOption.get, stavalues2 = stavalues2.toOption.get, stavalues3 = stavalues3.toOption.get, stavalues4 = stavalues4.toOption.get, stavalues5 = stavalues5.toOption.get))
    else Left(List[Either[String, Any]](starelid, staattnum, stainherit, stanullfrac, stawidth, stadistinct, stakind1, stakind2, stakind3, stakind4, stakind5, staop1, staop2, staop3, staop4, staop5, stacoll1, stacoll2, stacoll3, stacoll4, stacoll5, stanumbers1, stanumbers2, stanumbers3, stanumbers4, stanumbers5, stavalues1, stavalues2, stavalues3, stavalues4, stavalues5).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatisticRow] = new JsonEncoder[PgStatisticRow] {
    override def unsafeEncode(a: PgStatisticRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""starelid":""")
      JsonEncoder.long.unsafeEncode(a.starelid, indent, out)
      out.write(",")
      out.write(""""staattnum":""")
      TypoShort.jsonEncoder.unsafeEncode(a.staattnum, indent, out)
      out.write(",")
      out.write(""""stainherit":""")
      JsonEncoder.boolean.unsafeEncode(a.stainherit, indent, out)
      out.write(",")
      out.write(""""stanullfrac":""")
      JsonEncoder.float.unsafeEncode(a.stanullfrac, indent, out)
      out.write(",")
      out.write(""""stawidth":""")
      JsonEncoder.int.unsafeEncode(a.stawidth, indent, out)
      out.write(",")
      out.write(""""stadistinct":""")
      JsonEncoder.float.unsafeEncode(a.stadistinct, indent, out)
      out.write(",")
      out.write(""""stakind1":""")
      TypoShort.jsonEncoder.unsafeEncode(a.stakind1, indent, out)
      out.write(",")
      out.write(""""stakind2":""")
      TypoShort.jsonEncoder.unsafeEncode(a.stakind2, indent, out)
      out.write(",")
      out.write(""""stakind3":""")
      TypoShort.jsonEncoder.unsafeEncode(a.stakind3, indent, out)
      out.write(",")
      out.write(""""stakind4":""")
      TypoShort.jsonEncoder.unsafeEncode(a.stakind4, indent, out)
      out.write(",")
      out.write(""""stakind5":""")
      TypoShort.jsonEncoder.unsafeEncode(a.stakind5, indent, out)
      out.write(",")
      out.write(""""staop1":""")
      JsonEncoder.long.unsafeEncode(a.staop1, indent, out)
      out.write(",")
      out.write(""""staop2":""")
      JsonEncoder.long.unsafeEncode(a.staop2, indent, out)
      out.write(",")
      out.write(""""staop3":""")
      JsonEncoder.long.unsafeEncode(a.staop3, indent, out)
      out.write(",")
      out.write(""""staop4":""")
      JsonEncoder.long.unsafeEncode(a.staop4, indent, out)
      out.write(",")
      out.write(""""staop5":""")
      JsonEncoder.long.unsafeEncode(a.staop5, indent, out)
      out.write(",")
      out.write(""""stacoll1":""")
      JsonEncoder.long.unsafeEncode(a.stacoll1, indent, out)
      out.write(",")
      out.write(""""stacoll2":""")
      JsonEncoder.long.unsafeEncode(a.stacoll2, indent, out)
      out.write(",")
      out.write(""""stacoll3":""")
      JsonEncoder.long.unsafeEncode(a.stacoll3, indent, out)
      out.write(",")
      out.write(""""stacoll4":""")
      JsonEncoder.long.unsafeEncode(a.stacoll4, indent, out)
      out.write(",")
      out.write(""""stacoll5":""")
      JsonEncoder.long.unsafeEncode(a.stacoll5, indent, out)
      out.write(",")
      out.write(""""stanumbers1":""")
      JsonEncoder.option(JsonEncoder.array[Float](JsonEncoder.float, implicitly)).unsafeEncode(a.stanumbers1, indent, out)
      out.write(",")
      out.write(""""stanumbers2":""")
      JsonEncoder.option(JsonEncoder.array[Float](JsonEncoder.float, implicitly)).unsafeEncode(a.stanumbers2, indent, out)
      out.write(",")
      out.write(""""stanumbers3":""")
      JsonEncoder.option(JsonEncoder.array[Float](JsonEncoder.float, implicitly)).unsafeEncode(a.stanumbers3, indent, out)
      out.write(",")
      out.write(""""stanumbers4":""")
      JsonEncoder.option(JsonEncoder.array[Float](JsonEncoder.float, implicitly)).unsafeEncode(a.stanumbers4, indent, out)
      out.write(",")
      out.write(""""stanumbers5":""")
      JsonEncoder.option(JsonEncoder.array[Float](JsonEncoder.float, implicitly)).unsafeEncode(a.stanumbers5, indent, out)
      out.write(",")
      out.write(""""stavalues1":""")
      JsonEncoder.option(TypoAnyArray.jsonEncoder).unsafeEncode(a.stavalues1, indent, out)
      out.write(",")
      out.write(""""stavalues2":""")
      JsonEncoder.option(TypoAnyArray.jsonEncoder).unsafeEncode(a.stavalues2, indent, out)
      out.write(",")
      out.write(""""stavalues3":""")
      JsonEncoder.option(TypoAnyArray.jsonEncoder).unsafeEncode(a.stavalues3, indent, out)
      out.write(",")
      out.write(""""stavalues4":""")
      JsonEncoder.option(TypoAnyArray.jsonEncoder).unsafeEncode(a.stavalues4, indent, out)
      out.write(",")
      out.write(""""stavalues5":""")
      JsonEncoder.option(TypoAnyArray.jsonEncoder).unsafeEncode(a.stavalues5, indent, out)
      out.write("}")
    }
  }
}
