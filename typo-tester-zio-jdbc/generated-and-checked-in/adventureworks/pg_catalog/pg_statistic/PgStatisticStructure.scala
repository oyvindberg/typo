/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic

import adventureworks.customtypes.TypoAnyArray
import adventureworks.customtypes.TypoShort
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgStatisticStructure[Row](val prefix: Option[String], val extract: Row => PgStatisticRow, val merge: (Row, PgStatisticRow) => Row)
  extends Relation[PgStatisticFields, PgStatisticRow, Row]
    with PgStatisticFields[Row] { outer =>

  override val starelid = new IdField[/* oid */ Long, Row](prefix, "starelid", None, Some("oid"))(x => extract(x).starelid, (row, value) => merge(row, extract(row).copy(starelid = value)))
  override val staattnum = new IdField[TypoShort, Row](prefix, "staattnum", None, Some("int2"))(x => extract(x).staattnum, (row, value) => merge(row, extract(row).copy(staattnum = value)))
  override val stainherit = new IdField[Boolean, Row](prefix, "stainherit", None, None)(x => extract(x).stainherit, (row, value) => merge(row, extract(row).copy(stainherit = value)))
  override val stanullfrac = new Field[Float, Row](prefix, "stanullfrac", None, Some("float4"))(x => extract(x).stanullfrac, (row, value) => merge(row, extract(row).copy(stanullfrac = value)))
  override val stawidth = new Field[Int, Row](prefix, "stawidth", None, Some("int4"))(x => extract(x).stawidth, (row, value) => merge(row, extract(row).copy(stawidth = value)))
  override val stadistinct = new Field[Float, Row](prefix, "stadistinct", None, Some("float4"))(x => extract(x).stadistinct, (row, value) => merge(row, extract(row).copy(stadistinct = value)))
  override val stakind1 = new Field[TypoShort, Row](prefix, "stakind1", None, Some("int2"))(x => extract(x).stakind1, (row, value) => merge(row, extract(row).copy(stakind1 = value)))
  override val stakind2 = new Field[TypoShort, Row](prefix, "stakind2", None, Some("int2"))(x => extract(x).stakind2, (row, value) => merge(row, extract(row).copy(stakind2 = value)))
  override val stakind3 = new Field[TypoShort, Row](prefix, "stakind3", None, Some("int2"))(x => extract(x).stakind3, (row, value) => merge(row, extract(row).copy(stakind3 = value)))
  override val stakind4 = new Field[TypoShort, Row](prefix, "stakind4", None, Some("int2"))(x => extract(x).stakind4, (row, value) => merge(row, extract(row).copy(stakind4 = value)))
  override val stakind5 = new Field[TypoShort, Row](prefix, "stakind5", None, Some("int2"))(x => extract(x).stakind5, (row, value) => merge(row, extract(row).copy(stakind5 = value)))
  override val staop1 = new Field[/* oid */ Long, Row](prefix, "staop1", None, Some("oid"))(x => extract(x).staop1, (row, value) => merge(row, extract(row).copy(staop1 = value)))
  override val staop2 = new Field[/* oid */ Long, Row](prefix, "staop2", None, Some("oid"))(x => extract(x).staop2, (row, value) => merge(row, extract(row).copy(staop2 = value)))
  override val staop3 = new Field[/* oid */ Long, Row](prefix, "staop3", None, Some("oid"))(x => extract(x).staop3, (row, value) => merge(row, extract(row).copy(staop3 = value)))
  override val staop4 = new Field[/* oid */ Long, Row](prefix, "staop4", None, Some("oid"))(x => extract(x).staop4, (row, value) => merge(row, extract(row).copy(staop4 = value)))
  override val staop5 = new Field[/* oid */ Long, Row](prefix, "staop5", None, Some("oid"))(x => extract(x).staop5, (row, value) => merge(row, extract(row).copy(staop5 = value)))
  override val stacoll1 = new Field[/* oid */ Long, Row](prefix, "stacoll1", None, Some("oid"))(x => extract(x).stacoll1, (row, value) => merge(row, extract(row).copy(stacoll1 = value)))
  override val stacoll2 = new Field[/* oid */ Long, Row](prefix, "stacoll2", None, Some("oid"))(x => extract(x).stacoll2, (row, value) => merge(row, extract(row).copy(stacoll2 = value)))
  override val stacoll3 = new Field[/* oid */ Long, Row](prefix, "stacoll3", None, Some("oid"))(x => extract(x).stacoll3, (row, value) => merge(row, extract(row).copy(stacoll3 = value)))
  override val stacoll4 = new Field[/* oid */ Long, Row](prefix, "stacoll4", None, Some("oid"))(x => extract(x).stacoll4, (row, value) => merge(row, extract(row).copy(stacoll4 = value)))
  override val stacoll5 = new Field[/* oid */ Long, Row](prefix, "stacoll5", None, Some("oid"))(x => extract(x).stacoll5, (row, value) => merge(row, extract(row).copy(stacoll5 = value)))
  override val stanumbers1 = new OptField[Array[Float], Row](prefix, "stanumbers1", None, Some("_float4"))(x => extract(x).stanumbers1, (row, value) => merge(row, extract(row).copy(stanumbers1 = value)))
  override val stanumbers2 = new OptField[Array[Float], Row](prefix, "stanumbers2", None, Some("_float4"))(x => extract(x).stanumbers2, (row, value) => merge(row, extract(row).copy(stanumbers2 = value)))
  override val stanumbers3 = new OptField[Array[Float], Row](prefix, "stanumbers3", None, Some("_float4"))(x => extract(x).stanumbers3, (row, value) => merge(row, extract(row).copy(stanumbers3 = value)))
  override val stanumbers4 = new OptField[Array[Float], Row](prefix, "stanumbers4", None, Some("_float4"))(x => extract(x).stanumbers4, (row, value) => merge(row, extract(row).copy(stanumbers4 = value)))
  override val stanumbers5 = new OptField[Array[Float], Row](prefix, "stanumbers5", None, Some("_float4"))(x => extract(x).stanumbers5, (row, value) => merge(row, extract(row).copy(stanumbers5 = value)))
  override val stavalues1 = new OptField[TypoAnyArray, Row](prefix, "stavalues1", None, Some("anyarray"))(x => extract(x).stavalues1, (row, value) => merge(row, extract(row).copy(stavalues1 = value)))
  override val stavalues2 = new OptField[TypoAnyArray, Row](prefix, "stavalues2", None, Some("anyarray"))(x => extract(x).stavalues2, (row, value) => merge(row, extract(row).copy(stavalues2 = value)))
  override val stavalues3 = new OptField[TypoAnyArray, Row](prefix, "stavalues3", None, Some("anyarray"))(x => extract(x).stavalues3, (row, value) => merge(row, extract(row).copy(stavalues3 = value)))
  override val stavalues4 = new OptField[TypoAnyArray, Row](prefix, "stavalues4", None, Some("anyarray"))(x => extract(x).stavalues4, (row, value) => merge(row, extract(row).copy(stavalues4 = value)))
  override val stavalues5 = new OptField[TypoAnyArray, Row](prefix, "stavalues5", None, Some("anyarray"))(x => extract(x).stavalues5, (row, value) => merge(row, extract(row).copy(stavalues5 = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](starelid, staattnum, stainherit, stanullfrac, stawidth, stadistinct, stakind1, stakind2, stakind3, stakind4, stakind5, staop1, staop2, staop3, staop4, staop5, stacoll1, stacoll2, stacoll3, stacoll4, stacoll5, stanumbers1, stanumbers2, stanumbers3, stanumbers4, stanumbers5, stavalues1, stavalues2, stavalues3, stavalues4, stavalues5)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgStatisticRow, merge: (NewRow, PgStatisticRow) => NewRow): PgStatisticStructure[NewRow] =
    new PgStatisticStructure(prefix, extract, merge)
}
