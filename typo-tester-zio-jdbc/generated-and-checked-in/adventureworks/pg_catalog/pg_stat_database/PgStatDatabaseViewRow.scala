/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_database

import adventureworks.customtypes.TypoInstant
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatDatabaseViewRow(
  datid: /* nullability unknown */ Option[/* oid */ Long],
  datname: /* nullability unknown */ Option[String],
  numbackends: /* nullability unknown */ Option[Int],
  xactCommit: /* nullability unknown */ Option[Long],
  xactRollback: /* nullability unknown */ Option[Long],
  blksRead: /* nullability unknown */ Option[Long],
  blksHit: /* nullability unknown */ Option[Long],
  tupReturned: /* nullability unknown */ Option[Long],
  tupFetched: /* nullability unknown */ Option[Long],
  tupInserted: /* nullability unknown */ Option[Long],
  tupUpdated: /* nullability unknown */ Option[Long],
  tupDeleted: /* nullability unknown */ Option[Long],
  conflicts: /* nullability unknown */ Option[Long],
  tempFiles: /* nullability unknown */ Option[Long],
  tempBytes: /* nullability unknown */ Option[Long],
  deadlocks: /* nullability unknown */ Option[Long],
  checksumFailures: /* nullability unknown */ Option[Long],
  checksumLastFailure: /* nullability unknown */ Option[TypoInstant],
  blkReadTime: /* nullability unknown */ Option[Double],
  blkWriteTime: /* nullability unknown */ Option[Double],
  sessionTime: /* nullability unknown */ Option[Double],
  activeTime: /* nullability unknown */ Option[Double],
  idleInTransactionTime: /* nullability unknown */ Option[Double],
  sessions: /* nullability unknown */ Option[Long],
  sessionsAbandoned: /* nullability unknown */ Option[Long],
  sessionsFatal: /* nullability unknown */ Option[Long],
  sessionsKilled: /* nullability unknown */ Option[Long],
  statsReset: /* nullability unknown */ Option[TypoInstant]
)

object PgStatDatabaseViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatDatabaseViewRow] = new JdbcDecoder[PgStatDatabaseViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatDatabaseViewRow) =
      columIndex + 27 ->
        PgStatDatabaseViewRow(
          datid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 0, rs)._2,
          datname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          numbackends = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 2, rs)._2,
          xactCommit = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          xactRollback = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          blksRead = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          blksHit = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 6, rs)._2,
          tupReturned = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          tupFetched = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 8, rs)._2,
          tupInserted = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 9, rs)._2,
          tupUpdated = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 10, rs)._2,
          tupDeleted = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 11, rs)._2,
          conflicts = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 12, rs)._2,
          tempFiles = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 13, rs)._2,
          tempBytes = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 14, rs)._2,
          deadlocks = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 15, rs)._2,
          checksumFailures = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 16, rs)._2,
          checksumLastFailure = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 17, rs)._2,
          blkReadTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 18, rs)._2,
          blkWriteTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 19, rs)._2,
          sessionTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 20, rs)._2,
          activeTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 21, rs)._2,
          idleInTransactionTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 22, rs)._2,
          sessions = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 23, rs)._2,
          sessionsAbandoned = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 24, rs)._2,
          sessionsFatal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 25, rs)._2,
          sessionsKilled = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 26, rs)._2,
          statsReset = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 27, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatDatabaseViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val datid = jsonObj.get("datid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val datname = jsonObj.get("datname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val numbackends = jsonObj.get("numbackends").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val xactCommit = jsonObj.get("xact_commit").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val xactRollback = jsonObj.get("xact_rollback").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val blksRead = jsonObj.get("blks_read").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val blksHit = jsonObj.get("blks_hit").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tupReturned = jsonObj.get("tup_returned").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tupFetched = jsonObj.get("tup_fetched").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tupInserted = jsonObj.get("tup_inserted").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tupUpdated = jsonObj.get("tup_updated").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tupDeleted = jsonObj.get("tup_deleted").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val conflicts = jsonObj.get("conflicts").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tempFiles = jsonObj.get("temp_files").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tempBytes = jsonObj.get("temp_bytes").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val deadlocks = jsonObj.get("deadlocks").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val checksumFailures = jsonObj.get("checksum_failures").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val checksumLastFailure = jsonObj.get("checksum_last_failure").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val blkReadTime = jsonObj.get("blk_read_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val blkWriteTime = jsonObj.get("blk_write_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val sessionTime = jsonObj.get("session_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val activeTime = jsonObj.get("active_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val idleInTransactionTime = jsonObj.get("idle_in_transaction_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val sessions = jsonObj.get("sessions").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val sessionsAbandoned = jsonObj.get("sessions_abandoned").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val sessionsFatal = jsonObj.get("sessions_fatal").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val sessionsKilled = jsonObj.get("sessions_killed").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val statsReset = jsonObj.get("stats_reset").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    if (datid.isRight && datname.isRight && numbackends.isRight && xactCommit.isRight && xactRollback.isRight && blksRead.isRight && blksHit.isRight && tupReturned.isRight && tupFetched.isRight && tupInserted.isRight && tupUpdated.isRight && tupDeleted.isRight && conflicts.isRight && tempFiles.isRight && tempBytes.isRight && deadlocks.isRight && checksumFailures.isRight && checksumLastFailure.isRight && blkReadTime.isRight && blkWriteTime.isRight && sessionTime.isRight && activeTime.isRight && idleInTransactionTime.isRight && sessions.isRight && sessionsAbandoned.isRight && sessionsFatal.isRight && sessionsKilled.isRight && statsReset.isRight)
      Right(PgStatDatabaseViewRow(datid = datid.toOption.get, datname = datname.toOption.get, numbackends = numbackends.toOption.get, xactCommit = xactCommit.toOption.get, xactRollback = xactRollback.toOption.get, blksRead = blksRead.toOption.get, blksHit = blksHit.toOption.get, tupReturned = tupReturned.toOption.get, tupFetched = tupFetched.toOption.get, tupInserted = tupInserted.toOption.get, tupUpdated = tupUpdated.toOption.get, tupDeleted = tupDeleted.toOption.get, conflicts = conflicts.toOption.get, tempFiles = tempFiles.toOption.get, tempBytes = tempBytes.toOption.get, deadlocks = deadlocks.toOption.get, checksumFailures = checksumFailures.toOption.get, checksumLastFailure = checksumLastFailure.toOption.get, blkReadTime = blkReadTime.toOption.get, blkWriteTime = blkWriteTime.toOption.get, sessionTime = sessionTime.toOption.get, activeTime = activeTime.toOption.get, idleInTransactionTime = idleInTransactionTime.toOption.get, sessions = sessions.toOption.get, sessionsAbandoned = sessionsAbandoned.toOption.get, sessionsFatal = sessionsFatal.toOption.get, sessionsKilled = sessionsKilled.toOption.get, statsReset = statsReset.toOption.get))
    else Left(List[Either[String, Any]](datid, datname, numbackends, xactCommit, xactRollback, blksRead, blksHit, tupReturned, tupFetched, tupInserted, tupUpdated, tupDeleted, conflicts, tempFiles, tempBytes, deadlocks, checksumFailures, checksumLastFailure, blkReadTime, blkWriteTime, sessionTime, activeTime, idleInTransactionTime, sessions, sessionsAbandoned, sessionsFatal, sessionsKilled, statsReset).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatDatabaseViewRow] = new JsonEncoder[PgStatDatabaseViewRow] {
    override def unsafeEncode(a: PgStatDatabaseViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""datid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.datid, indent, out)
      out.write(",")
      out.write(""""datname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.datname, indent, out)
      out.write(",")
      out.write(""""numbackends":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.numbackends, indent, out)
      out.write(",")
      out.write(""""xact_commit":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.xactCommit, indent, out)
      out.write(",")
      out.write(""""xact_rollback":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.xactRollback, indent, out)
      out.write(",")
      out.write(""""blks_read":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blksRead, indent, out)
      out.write(",")
      out.write(""""blks_hit":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blksHit, indent, out)
      out.write(",")
      out.write(""""tup_returned":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tupReturned, indent, out)
      out.write(",")
      out.write(""""tup_fetched":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tupFetched, indent, out)
      out.write(",")
      out.write(""""tup_inserted":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tupInserted, indent, out)
      out.write(",")
      out.write(""""tup_updated":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tupUpdated, indent, out)
      out.write(",")
      out.write(""""tup_deleted":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tupDeleted, indent, out)
      out.write(",")
      out.write(""""conflicts":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.conflicts, indent, out)
      out.write(",")
      out.write(""""temp_files":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tempFiles, indent, out)
      out.write(",")
      out.write(""""temp_bytes":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tempBytes, indent, out)
      out.write(",")
      out.write(""""deadlocks":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.deadlocks, indent, out)
      out.write(",")
      out.write(""""checksum_failures":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.checksumFailures, indent, out)
      out.write(",")
      out.write(""""checksum_last_failure":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.checksumLastFailure, indent, out)
      out.write(",")
      out.write(""""blk_read_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.blkReadTime, indent, out)
      out.write(",")
      out.write(""""blk_write_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.blkWriteTime, indent, out)
      out.write(",")
      out.write(""""session_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.sessionTime, indent, out)
      out.write(",")
      out.write(""""active_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.activeTime, indent, out)
      out.write(",")
      out.write(""""idle_in_transaction_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.idleInTransactionTime, indent, out)
      out.write(",")
      out.write(""""sessions":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.sessions, indent, out)
      out.write(",")
      out.write(""""sessions_abandoned":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.sessionsAbandoned, indent, out)
      out.write(",")
      out.write(""""sessions_fatal":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.sessionsFatal, indent, out)
      out.write(",")
      out.write(""""sessions_killed":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.sessionsKilled, indent, out)
      out.write(",")
      out.write(""""stats_reset":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.statsReset, indent, out)
      out.write("}")
    }
  }
}
