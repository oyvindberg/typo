/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_aggregate

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgAggregateRepoImpl extends PgAggregateRepo {
  override def delete(aggfnoid: PgAggregateId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_aggregate where "aggfnoid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgAggregateFields, PgAggregateRow] = {
    DeleteBuilder("pg_catalog.pg_aggregate", PgAggregateFields)
  }
  override def insert(unsaved: PgAggregateRow): ZIO[ZConnection, Throwable, PgAggregateRow] = {
    sql"""insert into pg_catalog.pg_aggregate("aggfnoid", "aggkind", "aggnumdirectargs", "aggtransfn", "aggfinalfn", "aggcombinefn", "aggserialfn", "aggdeserialfn", "aggmtransfn", "aggminvtransfn", "aggmfinalfn", "aggfinalextra", "aggmfinalextra", "aggfinalmodify", "aggmfinalmodify", "aggsortop", "aggtranstype", "aggtransspace", "aggmtranstype", "aggmtransspace", "agginitval", "aggminitval")
          values (???::regproc, ???::char, ???::int2, ???::regproc, ???::regproc, ???::regproc, ???::regproc, ???::regproc, ???::regproc, ???::regproc, ???::regproc, ???, ???, ???::char, ???::char, ???::oid, ???::oid, ???::int4, ???::oid, ???::int4, ???, ???)
          returning "aggfnoid", "aggkind", "aggnumdirectargs", "aggtransfn", "aggfinalfn", "aggcombinefn", "aggserialfn", "aggdeserialfn", "aggmtransfn", "aggminvtransfn", "aggmfinalfn", "aggfinalextra", "aggmfinalextra", "aggfinalmodify", "aggmfinalmodify", "aggsortop", "aggtranstype", "aggtransspace", "aggmtranstype", "aggmtransspace", "agginitval", "aggminitval"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgAggregateFields, PgAggregateRow] = {
    SelectBuilderSql("pg_catalog.pg_aggregate", PgAggregateFields, PgAggregateRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgAggregateRow] = {
    sql"""select "aggfnoid", "aggkind", "aggnumdirectargs", "aggtransfn", "aggfinalfn", "aggcombinefn", "aggserialfn", "aggdeserialfn", "aggmtransfn", "aggminvtransfn", "aggmfinalfn", "aggfinalextra", "aggmfinalextra", "aggfinalmodify", "aggmfinalmodify", "aggsortop", "aggtranstype", "aggtransspace", "aggmtranstype", "aggmtransspace", "agginitval", "aggminitval" from pg_catalog.pg_aggregate""".query[PgAggregateRow].selectStream
  }
  override def selectById(aggfnoid: PgAggregateId): ZIO[ZConnection, Throwable, Option[PgAggregateRow]] = {
    sql"""select "aggfnoid", "aggkind", "aggnumdirectargs", "aggtransfn", "aggfinalfn", "aggcombinefn", "aggserialfn", "aggdeserialfn", "aggmtransfn", "aggminvtransfn", "aggmfinalfn", "aggfinalextra", "aggmfinalextra", "aggfinalmodify", "aggmfinalmodify", "aggsortop", "aggtranstype", "aggtransspace", "aggmtranstype", "aggmtransspace", "agginitval", "aggminitval" from pg_catalog.pg_aggregate where "aggfnoid" = ???""".query[PgAggregateRow].selectOne
  }
  override def selectByIds(aggfnoids: Array[PgAggregateId]): ZStream[ZConnection, Throwable, PgAggregateRow] = {
    sql"""select "aggfnoid", "aggkind", "aggnumdirectargs", "aggtransfn", "aggfinalfn", "aggcombinefn", "aggserialfn", "aggdeserialfn", "aggmtransfn", "aggminvtransfn", "aggmfinalfn", "aggfinalextra", "aggmfinalextra", "aggfinalmodify", "aggmfinalmodify", "aggsortop", "aggtranstype", "aggtransspace", "aggmtranstype", "aggmtransspace", "agginitval", "aggminitval" from pg_catalog.pg_aggregate where "aggfnoid" = ANY(${aggfnoids})""".query[PgAggregateRow].selectStream
  }
  override def update(row: PgAggregateRow): ZIO[ZConnection, Throwable, Boolean] = {
    val aggfnoid = row.aggfnoid
    sql"""update pg_catalog.pg_aggregate
          set "aggkind" = ???::char,
              "aggnumdirectargs" = ???::int2,
              "aggtransfn" = ???::regproc,
              "aggfinalfn" = ???::regproc,
              "aggcombinefn" = ???::regproc,
              "aggserialfn" = ???::regproc,
              "aggdeserialfn" = ???::regproc,
              "aggmtransfn" = ???::regproc,
              "aggminvtransfn" = ???::regproc,
              "aggmfinalfn" = ???::regproc,
              "aggfinalextra" = ???,
              "aggmfinalextra" = ???,
              "aggfinalmodify" = ???::char,
              "aggmfinalmodify" = ???::char,
              "aggsortop" = ???::oid,
              "aggtranstype" = ???::oid,
              "aggtransspace" = ???::int4,
              "aggmtranstype" = ???::oid,
              "aggmtransspace" = ???::int4,
              "agginitval" = ???,
              "aggminitval" = ???
          where "aggfnoid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgAggregateFields, PgAggregateRow] = {
    UpdateBuilder("pg_catalog.pg_aggregate", PgAggregateFields, PgAggregateRow.read)
  }
  override def upsert(unsaved: PgAggregateRow): ZIO[ZConnection, Throwable, PgAggregateRow] = {
    sql"""insert into pg_catalog.pg_aggregate("aggfnoid", "aggkind", "aggnumdirectargs", "aggtransfn", "aggfinalfn", "aggcombinefn", "aggserialfn", "aggdeserialfn", "aggmtransfn", "aggminvtransfn", "aggmfinalfn", "aggfinalextra", "aggmfinalextra", "aggfinalmodify", "aggmfinalmodify", "aggsortop", "aggtranstype", "aggtransspace", "aggmtranstype", "aggmtransspace", "agginitval", "aggminitval")
          values (
            ???::regproc,
            ???::char,
            ???::int2,
            ???::regproc,
            ???::regproc,
            ???::regproc,
            ???::regproc,
            ???::regproc,
            ???::regproc,
            ???::regproc,
            ???::regproc,
            ???,
            ???,
            ???::char,
            ???::char,
            ???::oid,
            ???::oid,
            ???::int4,
            ???::oid,
            ???::int4,
            ???,
            ???
          )
          on conflict ("aggfnoid")
          do update set
            "aggkind" = EXCLUDED."aggkind",
            "aggnumdirectargs" = EXCLUDED."aggnumdirectargs",
            "aggtransfn" = EXCLUDED."aggtransfn",
            "aggfinalfn" = EXCLUDED."aggfinalfn",
            "aggcombinefn" = EXCLUDED."aggcombinefn",
            "aggserialfn" = EXCLUDED."aggserialfn",
            "aggdeserialfn" = EXCLUDED."aggdeserialfn",
            "aggmtransfn" = EXCLUDED."aggmtransfn",
            "aggminvtransfn" = EXCLUDED."aggminvtransfn",
            "aggmfinalfn" = EXCLUDED."aggmfinalfn",
            "aggfinalextra" = EXCLUDED."aggfinalextra",
            "aggmfinalextra" = EXCLUDED."aggmfinalextra",
            "aggfinalmodify" = EXCLUDED."aggfinalmodify",
            "aggmfinalmodify" = EXCLUDED."aggmfinalmodify",
            "aggsortop" = EXCLUDED."aggsortop",
            "aggtranstype" = EXCLUDED."aggtranstype",
            "aggtransspace" = EXCLUDED."aggtransspace",
            "aggmtranstype" = EXCLUDED."aggmtranstype",
            "aggmtransspace" = EXCLUDED."aggmtransspace",
            "agginitval" = EXCLUDED."agginitval",
            "aggminitval" = EXCLUDED."aggminitval"
          returning "aggfnoid", "aggkind", "aggnumdirectargs", "aggtransfn", "aggfinalfn", "aggcombinefn", "aggserialfn", "aggdeserialfn", "aggmtransfn", "aggminvtransfn", "aggmfinalfn", "aggfinalextra", "aggmfinalextra", "aggfinalmodify", "aggmfinalmodify", "aggsortop", "aggtranstype", "aggtransspace", "aggmtranstype", "aggmtransspace", "agginitval", "aggminitval"
       """.query(???).unique
  }
}
