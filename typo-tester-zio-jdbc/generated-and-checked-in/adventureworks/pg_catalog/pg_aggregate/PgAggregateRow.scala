/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_aggregate

import adventureworks.customtypes.TypoRegproc
import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgAggregateRow(
  aggfnoid: PgAggregateId,
  aggkind: String,
  aggnumdirectargs: TypoShort,
  aggtransfn: TypoRegproc,
  aggfinalfn: TypoRegproc,
  aggcombinefn: TypoRegproc,
  aggserialfn: TypoRegproc,
  aggdeserialfn: TypoRegproc,
  aggmtransfn: TypoRegproc,
  aggminvtransfn: TypoRegproc,
  aggmfinalfn: TypoRegproc,
  aggfinalextra: Boolean,
  aggmfinalextra: Boolean,
  aggfinalmodify: String,
  aggmfinalmodify: String,
  aggsortop: /* oid */ Long,
  aggtranstype: /* oid */ Long,
  aggtransspace: Int,
  aggmtranstype: /* oid */ Long,
  aggmtransspace: Int,
  agginitval: Option[String],
  aggminitval: Option[String]
)

object PgAggregateRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgAggregateRow] = new JdbcDecoder[PgAggregateRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgAggregateRow) =
      columIndex + 21 ->
        PgAggregateRow(
          aggfnoid = PgAggregateId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          aggkind = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          aggnumdirectargs = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          aggtransfn = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          aggfinalfn = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          aggcombinefn = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          aggserialfn = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          aggdeserialfn = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 7, rs)._2,
          aggmtransfn = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 8, rs)._2,
          aggminvtransfn = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 9, rs)._2,
          aggmfinalfn = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 10, rs)._2,
          aggfinalextra = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 11, rs)._2,
          aggmfinalextra = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 12, rs)._2,
          aggfinalmodify = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 13, rs)._2,
          aggmfinalmodify = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 14, rs)._2,
          aggsortop = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 15, rs)._2,
          aggtranstype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 16, rs)._2,
          aggtransspace = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 17, rs)._2,
          aggmtranstype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 18, rs)._2,
          aggmtransspace = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 19, rs)._2,
          agginitval = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 20, rs)._2,
          aggminitval = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 21, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgAggregateRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val aggfnoid = jsonObj.get("aggfnoid").toRight("Missing field 'aggfnoid'").flatMap(_.as(PgAggregateId.jsonDecoder))
    val aggkind = jsonObj.get("aggkind").toRight("Missing field 'aggkind'").flatMap(_.as(JsonDecoder.string))
    val aggnumdirectargs = jsonObj.get("aggnumdirectargs").toRight("Missing field 'aggnumdirectargs'").flatMap(_.as(TypoShort.jsonDecoder))
    val aggtransfn = jsonObj.get("aggtransfn").toRight("Missing field 'aggtransfn'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val aggfinalfn = jsonObj.get("aggfinalfn").toRight("Missing field 'aggfinalfn'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val aggcombinefn = jsonObj.get("aggcombinefn").toRight("Missing field 'aggcombinefn'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val aggserialfn = jsonObj.get("aggserialfn").toRight("Missing field 'aggserialfn'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val aggdeserialfn = jsonObj.get("aggdeserialfn").toRight("Missing field 'aggdeserialfn'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val aggmtransfn = jsonObj.get("aggmtransfn").toRight("Missing field 'aggmtransfn'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val aggminvtransfn = jsonObj.get("aggminvtransfn").toRight("Missing field 'aggminvtransfn'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val aggmfinalfn = jsonObj.get("aggmfinalfn").toRight("Missing field 'aggmfinalfn'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val aggfinalextra = jsonObj.get("aggfinalextra").toRight("Missing field 'aggfinalextra'").flatMap(_.as(JsonDecoder.boolean))
    val aggmfinalextra = jsonObj.get("aggmfinalextra").toRight("Missing field 'aggmfinalextra'").flatMap(_.as(JsonDecoder.boolean))
    val aggfinalmodify = jsonObj.get("aggfinalmodify").toRight("Missing field 'aggfinalmodify'").flatMap(_.as(JsonDecoder.string))
    val aggmfinalmodify = jsonObj.get("aggmfinalmodify").toRight("Missing field 'aggmfinalmodify'").flatMap(_.as(JsonDecoder.string))
    val aggsortop = jsonObj.get("aggsortop").toRight("Missing field 'aggsortop'").flatMap(_.as(JsonDecoder.long))
    val aggtranstype = jsonObj.get("aggtranstype").toRight("Missing field 'aggtranstype'").flatMap(_.as(JsonDecoder.long))
    val aggtransspace = jsonObj.get("aggtransspace").toRight("Missing field 'aggtransspace'").flatMap(_.as(JsonDecoder.int))
    val aggmtranstype = jsonObj.get("aggmtranstype").toRight("Missing field 'aggmtranstype'").flatMap(_.as(JsonDecoder.long))
    val aggmtransspace = jsonObj.get("aggmtransspace").toRight("Missing field 'aggmtransspace'").flatMap(_.as(JsonDecoder.int))
    val agginitval = jsonObj.get("agginitval").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val aggminitval = jsonObj.get("aggminitval").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (aggfnoid.isRight && aggkind.isRight && aggnumdirectargs.isRight && aggtransfn.isRight && aggfinalfn.isRight && aggcombinefn.isRight && aggserialfn.isRight && aggdeserialfn.isRight && aggmtransfn.isRight && aggminvtransfn.isRight && aggmfinalfn.isRight && aggfinalextra.isRight && aggmfinalextra.isRight && aggfinalmodify.isRight && aggmfinalmodify.isRight && aggsortop.isRight && aggtranstype.isRight && aggtransspace.isRight && aggmtranstype.isRight && aggmtransspace.isRight && agginitval.isRight && aggminitval.isRight)
      Right(PgAggregateRow(aggfnoid = aggfnoid.toOption.get, aggkind = aggkind.toOption.get, aggnumdirectargs = aggnumdirectargs.toOption.get, aggtransfn = aggtransfn.toOption.get, aggfinalfn = aggfinalfn.toOption.get, aggcombinefn = aggcombinefn.toOption.get, aggserialfn = aggserialfn.toOption.get, aggdeserialfn = aggdeserialfn.toOption.get, aggmtransfn = aggmtransfn.toOption.get, aggminvtransfn = aggminvtransfn.toOption.get, aggmfinalfn = aggmfinalfn.toOption.get, aggfinalextra = aggfinalextra.toOption.get, aggmfinalextra = aggmfinalextra.toOption.get, aggfinalmodify = aggfinalmodify.toOption.get, aggmfinalmodify = aggmfinalmodify.toOption.get, aggsortop = aggsortop.toOption.get, aggtranstype = aggtranstype.toOption.get, aggtransspace = aggtransspace.toOption.get, aggmtranstype = aggmtranstype.toOption.get, aggmtransspace = aggmtransspace.toOption.get, agginitval = agginitval.toOption.get, aggminitval = aggminitval.toOption.get))
    else Left(List[Either[String, Any]](aggfnoid, aggkind, aggnumdirectargs, aggtransfn, aggfinalfn, aggcombinefn, aggserialfn, aggdeserialfn, aggmtransfn, aggminvtransfn, aggmfinalfn, aggfinalextra, aggmfinalextra, aggfinalmodify, aggmfinalmodify, aggsortop, aggtranstype, aggtransspace, aggmtranstype, aggmtransspace, agginitval, aggminitval).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgAggregateRow] = new JsonEncoder[PgAggregateRow] {
    override def unsafeEncode(a: PgAggregateRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""aggfnoid":""")
      PgAggregateId.jsonEncoder.unsafeEncode(a.aggfnoid, indent, out)
      out.write(",")
      out.write(""""aggkind":""")
      JsonEncoder.string.unsafeEncode(a.aggkind, indent, out)
      out.write(",")
      out.write(""""aggnumdirectargs":""")
      TypoShort.jsonEncoder.unsafeEncode(a.aggnumdirectargs, indent, out)
      out.write(",")
      out.write(""""aggtransfn":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.aggtransfn, indent, out)
      out.write(",")
      out.write(""""aggfinalfn":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.aggfinalfn, indent, out)
      out.write(",")
      out.write(""""aggcombinefn":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.aggcombinefn, indent, out)
      out.write(",")
      out.write(""""aggserialfn":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.aggserialfn, indent, out)
      out.write(",")
      out.write(""""aggdeserialfn":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.aggdeserialfn, indent, out)
      out.write(",")
      out.write(""""aggmtransfn":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.aggmtransfn, indent, out)
      out.write(",")
      out.write(""""aggminvtransfn":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.aggminvtransfn, indent, out)
      out.write(",")
      out.write(""""aggmfinalfn":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.aggmfinalfn, indent, out)
      out.write(",")
      out.write(""""aggfinalextra":""")
      JsonEncoder.boolean.unsafeEncode(a.aggfinalextra, indent, out)
      out.write(",")
      out.write(""""aggmfinalextra":""")
      JsonEncoder.boolean.unsafeEncode(a.aggmfinalextra, indent, out)
      out.write(",")
      out.write(""""aggfinalmodify":""")
      JsonEncoder.string.unsafeEncode(a.aggfinalmodify, indent, out)
      out.write(",")
      out.write(""""aggmfinalmodify":""")
      JsonEncoder.string.unsafeEncode(a.aggmfinalmodify, indent, out)
      out.write(",")
      out.write(""""aggsortop":""")
      JsonEncoder.long.unsafeEncode(a.aggsortop, indent, out)
      out.write(",")
      out.write(""""aggtranstype":""")
      JsonEncoder.long.unsafeEncode(a.aggtranstype, indent, out)
      out.write(",")
      out.write(""""aggtransspace":""")
      JsonEncoder.int.unsafeEncode(a.aggtransspace, indent, out)
      out.write(",")
      out.write(""""aggmtranstype":""")
      JsonEncoder.long.unsafeEncode(a.aggmtranstype, indent, out)
      out.write(",")
      out.write(""""aggmtransspace":""")
      JsonEncoder.int.unsafeEncode(a.aggmtransspace, indent, out)
      out.write(",")
      out.write(""""agginitval":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.agginitval, indent, out)
      out.write(",")
      out.write(""""aggminitval":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.aggminitval, indent, out)
      out.write("}")
    }
  }
}
