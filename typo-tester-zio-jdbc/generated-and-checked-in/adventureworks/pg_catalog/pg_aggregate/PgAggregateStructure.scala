/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_aggregate

import adventureworks.customtypes.TypoRegproc
import adventureworks.customtypes.TypoShort
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgAggregateStructure[Row](val prefix: Option[String], val extract: Row => PgAggregateRow, val merge: (Row, PgAggregateRow) => Row)
  extends Relation[PgAggregateFields, PgAggregateRow, Row]
    with PgAggregateFields[Row] { outer =>

  override val aggfnoid = new IdField[PgAggregateId, Row](prefix, "aggfnoid", None, Some("regproc"))(x => extract(x).aggfnoid, (row, value) => merge(row, extract(row).copy(aggfnoid = value)))
  override val aggkind = new Field[String, Row](prefix, "aggkind", None, Some("char"))(x => extract(x).aggkind, (row, value) => merge(row, extract(row).copy(aggkind = value)))
  override val aggnumdirectargs = new Field[TypoShort, Row](prefix, "aggnumdirectargs", None, Some("int2"))(x => extract(x).aggnumdirectargs, (row, value) => merge(row, extract(row).copy(aggnumdirectargs = value)))
  override val aggtransfn = new Field[TypoRegproc, Row](prefix, "aggtransfn", None, Some("regproc"))(x => extract(x).aggtransfn, (row, value) => merge(row, extract(row).copy(aggtransfn = value)))
  override val aggfinalfn = new Field[TypoRegproc, Row](prefix, "aggfinalfn", None, Some("regproc"))(x => extract(x).aggfinalfn, (row, value) => merge(row, extract(row).copy(aggfinalfn = value)))
  override val aggcombinefn = new Field[TypoRegproc, Row](prefix, "aggcombinefn", None, Some("regproc"))(x => extract(x).aggcombinefn, (row, value) => merge(row, extract(row).copy(aggcombinefn = value)))
  override val aggserialfn = new Field[TypoRegproc, Row](prefix, "aggserialfn", None, Some("regproc"))(x => extract(x).aggserialfn, (row, value) => merge(row, extract(row).copy(aggserialfn = value)))
  override val aggdeserialfn = new Field[TypoRegproc, Row](prefix, "aggdeserialfn", None, Some("regproc"))(x => extract(x).aggdeserialfn, (row, value) => merge(row, extract(row).copy(aggdeserialfn = value)))
  override val aggmtransfn = new Field[TypoRegproc, Row](prefix, "aggmtransfn", None, Some("regproc"))(x => extract(x).aggmtransfn, (row, value) => merge(row, extract(row).copy(aggmtransfn = value)))
  override val aggminvtransfn = new Field[TypoRegproc, Row](prefix, "aggminvtransfn", None, Some("regproc"))(x => extract(x).aggminvtransfn, (row, value) => merge(row, extract(row).copy(aggminvtransfn = value)))
  override val aggmfinalfn = new Field[TypoRegproc, Row](prefix, "aggmfinalfn", None, Some("regproc"))(x => extract(x).aggmfinalfn, (row, value) => merge(row, extract(row).copy(aggmfinalfn = value)))
  override val aggfinalextra = new Field[Boolean, Row](prefix, "aggfinalextra", None, None)(x => extract(x).aggfinalextra, (row, value) => merge(row, extract(row).copy(aggfinalextra = value)))
  override val aggmfinalextra = new Field[Boolean, Row](prefix, "aggmfinalextra", None, None)(x => extract(x).aggmfinalextra, (row, value) => merge(row, extract(row).copy(aggmfinalextra = value)))
  override val aggfinalmodify = new Field[String, Row](prefix, "aggfinalmodify", None, Some("char"))(x => extract(x).aggfinalmodify, (row, value) => merge(row, extract(row).copy(aggfinalmodify = value)))
  override val aggmfinalmodify = new Field[String, Row](prefix, "aggmfinalmodify", None, Some("char"))(x => extract(x).aggmfinalmodify, (row, value) => merge(row, extract(row).copy(aggmfinalmodify = value)))
  override val aggsortop = new Field[/* oid */ Long, Row](prefix, "aggsortop", None, Some("oid"))(x => extract(x).aggsortop, (row, value) => merge(row, extract(row).copy(aggsortop = value)))
  override val aggtranstype = new Field[/* oid */ Long, Row](prefix, "aggtranstype", None, Some("oid"))(x => extract(x).aggtranstype, (row, value) => merge(row, extract(row).copy(aggtranstype = value)))
  override val aggtransspace = new Field[Int, Row](prefix, "aggtransspace", None, Some("int4"))(x => extract(x).aggtransspace, (row, value) => merge(row, extract(row).copy(aggtransspace = value)))
  override val aggmtranstype = new Field[/* oid */ Long, Row](prefix, "aggmtranstype", None, Some("oid"))(x => extract(x).aggmtranstype, (row, value) => merge(row, extract(row).copy(aggmtranstype = value)))
  override val aggmtransspace = new Field[Int, Row](prefix, "aggmtransspace", None, Some("int4"))(x => extract(x).aggmtransspace, (row, value) => merge(row, extract(row).copy(aggmtransspace = value)))
  override val agginitval = new OptField[String, Row](prefix, "agginitval", None, None)(x => extract(x).agginitval, (row, value) => merge(row, extract(row).copy(agginitval = value)))
  override val aggminitval = new OptField[String, Row](prefix, "aggminitval", None, None)(x => extract(x).aggminitval, (row, value) => merge(row, extract(row).copy(aggminitval = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](aggfnoid, aggkind, aggnumdirectargs, aggtransfn, aggfinalfn, aggcombinefn, aggserialfn, aggdeserialfn, aggmtransfn, aggminvtransfn, aggmfinalfn, aggfinalextra, aggmfinalextra, aggfinalmodify, aggmfinalmodify, aggsortop, aggtranstype, aggtransspace, aggmtranstype, aggmtransspace, agginitval, aggminitval)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgAggregateRow, merge: (NewRow, PgAggregateRow) => NewRow): PgAggregateStructure[NewRow] =
    new PgAggregateStructure(prefix, extract, merge)
}
