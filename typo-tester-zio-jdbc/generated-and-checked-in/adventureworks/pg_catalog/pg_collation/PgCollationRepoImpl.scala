/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_collation

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgCollationRepoImpl extends PgCollationRepo {
  override def delete(oid: PgCollationId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_collation where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgCollationFields, PgCollationRow] = {
    DeleteBuilder("pg_catalog.pg_collation", PgCollationFields)
  }
  override def insert(unsaved: PgCollationRow): ZIO[ZConnection, Throwable, PgCollationRow] = {
    sql"""insert into pg_catalog.pg_collation("oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion")
          values (???::oid, ???::name, ???::oid, ???::oid, ???::char, ???, ???::int4, ???::name, ???::name, ???)
          returning "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgCollationFields, PgCollationRow] = {
    SelectBuilderSql("pg_catalog.pg_collation", PgCollationFields, PgCollationRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgCollationRow] = {
    sql"""select "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion" from pg_catalog.pg_collation""".query[PgCollationRow].selectStream
  }
  override def selectById(oid: PgCollationId): ZIO[ZConnection, Throwable, Option[PgCollationRow]] = {
    sql"""select "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion" from pg_catalog.pg_collation where "oid" = ???""".query[PgCollationRow].selectOne
  }
  override def selectByIds(oids: Array[PgCollationId]): ZStream[ZConnection, Throwable, PgCollationRow] = {
    sql"""select "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion" from pg_catalog.pg_collation where "oid" = ANY(${oids})""".query[PgCollationRow].selectStream
  }
  override def selectByUnique(collname: String, collencoding: Int, collnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgCollationRow]] = {
    sql"""select "collname", "collencoding", "collnamespace"
          from pg_catalog.pg_collation
          where "collname" = ??? AND "collencoding" = ??? AND "collnamespace" = ???
       """.query[PgCollationRow].selectOne
  }
  override def update(row: PgCollationRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_collation
          set "collname" = ???::name,
              "collnamespace" = ???::oid,
              "collowner" = ???::oid,
              "collprovider" = ???::char,
              "collisdeterministic" = ???,
              "collencoding" = ???::int4,
              "collcollate" = ???::name,
              "collctype" = ???::name,
              "collversion" = ???
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgCollationFields, PgCollationRow] = {
    UpdateBuilder("pg_catalog.pg_collation", PgCollationFields, PgCollationRow.read)
  }
  override def upsert(unsaved: PgCollationRow): ZIO[ZConnection, Throwable, PgCollationRow] = {
    sql"""insert into pg_catalog.pg_collation("oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::oid,
            ???::char,
            ???,
            ???::int4,
            ???::name,
            ???::name,
            ???
          )
          on conflict ("oid")
          do update set
            "collname" = EXCLUDED."collname",
            "collnamespace" = EXCLUDED."collnamespace",
            "collowner" = EXCLUDED."collowner",
            "collprovider" = EXCLUDED."collprovider",
            "collisdeterministic" = EXCLUDED."collisdeterministic",
            "collencoding" = EXCLUDED."collencoding",
            "collcollate" = EXCLUDED."collcollate",
            "collctype" = EXCLUDED."collctype",
            "collversion" = EXCLUDED."collversion"
          returning "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion"
       """.query(???).unique
  }
}
