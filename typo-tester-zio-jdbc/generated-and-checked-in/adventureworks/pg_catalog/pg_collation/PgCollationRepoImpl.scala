/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_collation

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgCollationRepoImpl extends PgCollationRepo {
  override def delete(oid: PgCollationId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_collation where "oid" = ${Segment.paramSegment(oid)(PgCollationId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgCollationFields, PgCollationRow] = {
    DeleteBuilder("pg_catalog.pg_collation", PgCollationFields)
  }
  override def insert(unsaved: PgCollationRow): ZIO[ZConnection, Throwable, PgCollationRow] = {
    sql"""insert into pg_catalog.pg_collation("oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion")
          values (${Segment.paramSegment(unsaved.oid)(PgCollationId.setter)}::oid, ${Segment.paramSegment(unsaved.collname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.collnamespace)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.collowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.collprovider)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.collisdeterministic)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.collencoding)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.collcollate)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.collctype)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.collversion)(Setter.optionParamSetter(Setter.stringSetter))})
          returning "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion"
       """.insertReturning(PgCollationRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgCollationFields, PgCollationRow] = {
    SelectBuilderSql("pg_catalog.pg_collation", PgCollationFields, PgCollationRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgCollationRow] = {
    sql"""select "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion" from pg_catalog.pg_collation""".query(PgCollationRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgCollationId): ZIO[ZConnection, Throwable, Option[PgCollationRow]] = {
    sql"""select "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion" from pg_catalog.pg_collation where "oid" = ${Segment.paramSegment(oid)(PgCollationId.setter)}""".query(PgCollationRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgCollationId]): ZStream[ZConnection, Throwable, PgCollationRow] = {
    sql"""select "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion" from pg_catalog.pg_collation where "oid" = ANY(${Segment.paramSegment(oids)(PgCollationId.arraySetter)})""".query(PgCollationRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(collname: String, collencoding: Int, collnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgCollationRow]] = {
    sql"""select "collname", "collencoding", "collnamespace"
          from pg_catalog.pg_collation
          where "collname" = ${Segment.paramSegment(collname)(Setter.stringSetter)} AND "collencoding" = ${Segment.paramSegment(collencoding)(Setter.intSetter)} AND "collnamespace" = ${Segment.paramSegment(collnamespace)(Setter.longSetter)}
       """.query(PgCollationRow.jdbcDecoder).selectOne
  }
  override def update(row: PgCollationRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_collation
          set "collname" = ${Segment.paramSegment(row.collname)(Setter.stringSetter)}::name,
              "collnamespace" = ${Segment.paramSegment(row.collnamespace)(Setter.longSetter)}::oid,
              "collowner" = ${Segment.paramSegment(row.collowner)(Setter.longSetter)}::oid,
              "collprovider" = ${Segment.paramSegment(row.collprovider)(Setter.stringSetter)}::char,
              "collisdeterministic" = ${Segment.paramSegment(row.collisdeterministic)(Setter.booleanSetter)},
              "collencoding" = ${Segment.paramSegment(row.collencoding)(Setter.intSetter)}::int4,
              "collcollate" = ${Segment.paramSegment(row.collcollate)(Setter.stringSetter)}::name,
              "collctype" = ${Segment.paramSegment(row.collctype)(Setter.stringSetter)}::name,
              "collversion" = ${Segment.paramSegment(row.collversion)(Setter.optionParamSetter(Setter.stringSetter))}
          where "oid" = ${Segment.paramSegment(oid)(PgCollationId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgCollationFields, PgCollationRow] = {
    UpdateBuilder("pg_catalog.pg_collation", PgCollationFields, PgCollationRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgCollationRow): ZIO[ZConnection, Throwable, UpdateResult[PgCollationRow]] = {
    sql"""insert into pg_catalog.pg_collation("oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgCollationId.setter)}::oid,
            ${Segment.paramSegment(unsaved.collname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.collnamespace)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.collowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.collprovider)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.collisdeterministic)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.collencoding)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.collcollate)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.collctype)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.collversion)(Setter.optionParamSetter(Setter.stringSetter))}
          )
          on conflict ("oid")
          do update set
            "collname" = EXCLUDED."collname",
            "collnamespace" = EXCLUDED."collnamespace",
            "collowner" = EXCLUDED."collowner",
            "collprovider" = EXCLUDED."collprovider",
            "collisdeterministic" = EXCLUDED."collisdeterministic",
            "collencoding" = EXCLUDED."collencoding",
            "collcollate" = EXCLUDED."collcollate",
            "collctype" = EXCLUDED."collctype",
            "collversion" = EXCLUDED."collversion"
          returning "oid", "collname", "collnamespace", "collowner", "collprovider", "collisdeterministic", "collencoding", "collcollate", "collctype", "collversion"""".insertReturning(PgCollationRow.jdbcDecoder)
  }
}
