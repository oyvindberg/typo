/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_collation

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgCollationRow(
  oid: PgCollationId,
  collname: String,
  collnamespace: /* oid */ Long,
  collowner: /* oid */ Long,
  collprovider: String,
  collisdeterministic: Boolean,
  collencoding: Int,
  collcollate: String,
  collctype: String,
  collversion: Option[String]
)

object PgCollationRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgCollationRow] = new JdbcDecoder[PgCollationRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgCollationRow) =
      columIndex + 9 ->
        PgCollationRow(
          oid = PgCollationId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          collname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          collnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          collowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          collprovider = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 4, rs)._2,
          collisdeterministic = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 5, rs)._2,
          collencoding = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 6, rs)._2,
          collcollate = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 7, rs)._2,
          collctype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 8, rs)._2,
          collversion = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgCollationRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgCollationId.jsonDecoder))
    val collname = jsonObj.get("collname").toRight("Missing field 'collname'").flatMap(_.as(JsonDecoder.string))
    val collnamespace = jsonObj.get("collnamespace").toRight("Missing field 'collnamespace'").flatMap(_.as(JsonDecoder.long))
    val collowner = jsonObj.get("collowner").toRight("Missing field 'collowner'").flatMap(_.as(JsonDecoder.long))
    val collprovider = jsonObj.get("collprovider").toRight("Missing field 'collprovider'").flatMap(_.as(JsonDecoder.string))
    val collisdeterministic = jsonObj.get("collisdeterministic").toRight("Missing field 'collisdeterministic'").flatMap(_.as(JsonDecoder.boolean))
    val collencoding = jsonObj.get("collencoding").toRight("Missing field 'collencoding'").flatMap(_.as(JsonDecoder.int))
    val collcollate = jsonObj.get("collcollate").toRight("Missing field 'collcollate'").flatMap(_.as(JsonDecoder.string))
    val collctype = jsonObj.get("collctype").toRight("Missing field 'collctype'").flatMap(_.as(JsonDecoder.string))
    val collversion = jsonObj.get("collversion").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (oid.isRight && collname.isRight && collnamespace.isRight && collowner.isRight && collprovider.isRight && collisdeterministic.isRight && collencoding.isRight && collcollate.isRight && collctype.isRight && collversion.isRight)
      Right(PgCollationRow(oid = oid.toOption.get, collname = collname.toOption.get, collnamespace = collnamespace.toOption.get, collowner = collowner.toOption.get, collprovider = collprovider.toOption.get, collisdeterministic = collisdeterministic.toOption.get, collencoding = collencoding.toOption.get, collcollate = collcollate.toOption.get, collctype = collctype.toOption.get, collversion = collversion.toOption.get))
    else Left(List[Either[String, Any]](oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgCollationRow] = new JsonEncoder[PgCollationRow] {
    override def unsafeEncode(a: PgCollationRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgCollationId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""collname":""")
      JsonEncoder.string.unsafeEncode(a.collname, indent, out)
      out.write(",")
      out.write(""""collnamespace":""")
      JsonEncoder.long.unsafeEncode(a.collnamespace, indent, out)
      out.write(",")
      out.write(""""collowner":""")
      JsonEncoder.long.unsafeEncode(a.collowner, indent, out)
      out.write(",")
      out.write(""""collprovider":""")
      JsonEncoder.string.unsafeEncode(a.collprovider, indent, out)
      out.write(",")
      out.write(""""collisdeterministic":""")
      JsonEncoder.boolean.unsafeEncode(a.collisdeterministic, indent, out)
      out.write(",")
      out.write(""""collencoding":""")
      JsonEncoder.int.unsafeEncode(a.collencoding, indent, out)
      out.write(",")
      out.write(""""collcollate":""")
      JsonEncoder.string.unsafeEncode(a.collcollate, indent, out)
      out.write(",")
      out.write(""""collctype":""")
      JsonEncoder.string.unsafeEncode(a.collctype, indent, out)
      out.write(",")
      out.write(""""collversion":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.collversion, indent, out)
      out.write("}")
    }
  }
}
