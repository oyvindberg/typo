/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_collation

import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgCollationStructure[Row](val prefix: Option[String], val extract: Row => PgCollationRow, val merge: (Row, PgCollationRow) => Row)
  extends Relation[PgCollationFields, PgCollationRow, Row]
    with PgCollationFields[Row] { outer =>

  override val oid = new IdField[PgCollationId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val collname = new Field[String, Row](prefix, "collname", None, Some("name"))(x => extract(x).collname, (row, value) => merge(row, extract(row).copy(collname = value)))
  override val collnamespace = new Field[/* oid */ Long, Row](prefix, "collnamespace", None, Some("oid"))(x => extract(x).collnamespace, (row, value) => merge(row, extract(row).copy(collnamespace = value)))
  override val collowner = new Field[/* oid */ Long, Row](prefix, "collowner", None, Some("oid"))(x => extract(x).collowner, (row, value) => merge(row, extract(row).copy(collowner = value)))
  override val collprovider = new Field[String, Row](prefix, "collprovider", None, Some("char"))(x => extract(x).collprovider, (row, value) => merge(row, extract(row).copy(collprovider = value)))
  override val collisdeterministic = new Field[Boolean, Row](prefix, "collisdeterministic", None, None)(x => extract(x).collisdeterministic, (row, value) => merge(row, extract(row).copy(collisdeterministic = value)))
  override val collencoding = new Field[Int, Row](prefix, "collencoding", None, Some("int4"))(x => extract(x).collencoding, (row, value) => merge(row, extract(row).copy(collencoding = value)))
  override val collcollate = new Field[String, Row](prefix, "collcollate", None, Some("name"))(x => extract(x).collcollate, (row, value) => merge(row, extract(row).copy(collcollate = value)))
  override val collctype = new Field[String, Row](prefix, "collctype", None, Some("name"))(x => extract(x).collctype, (row, value) => merge(row, extract(row).copy(collctype = value)))
  override val collversion = new OptField[String, Row](prefix, "collversion", None, None)(x => extract(x).collversion, (row, value) => merge(row, extract(row).copy(collversion = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, collname, collnamespace, collowner, collprovider, collisdeterministic, collencoding, collcollate, collctype, collversion)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgCollationRow, merge: (NewRow, PgCollationRow) => NewRow): PgCollationStructure[NewRow] =
    new PgCollationStructure(prefix, extract, merge)
}
