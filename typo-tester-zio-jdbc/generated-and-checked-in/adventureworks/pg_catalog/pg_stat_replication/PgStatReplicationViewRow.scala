/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_replication

import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoXid
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatReplicationViewRow(
  pid: /* nullability unknown */ Option[Int],
  usesysid: /* nullability unknown */ Option[/* oid */ Long],
  /** Points to [[pg_authid.PgAuthidRow.rolname]] */
  usename: Option[String],
  applicationName: /* nullability unknown */ Option[String],
  clientAddr: /* nullability unknown */ Option[TypoInet],
  clientHostname: /* nullability unknown */ Option[String],
  clientPort: /* nullability unknown */ Option[Int],
  backendStart: /* nullability unknown */ Option[TypoInstant],
  backendXmin: /* nullability unknown */ Option[TypoXid],
  state: /* nullability unknown */ Option[String],
  sentLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  writeLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  flushLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  replayLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  writeLag: /* nullability unknown */ Option[TypoInterval],
  flushLag: /* nullability unknown */ Option[TypoInterval],
  replayLag: /* nullability unknown */ Option[TypoInterval],
  syncPriority: /* nullability unknown */ Option[Int],
  syncState: /* nullability unknown */ Option[String],
  replyTime: /* nullability unknown */ Option[TypoInstant]
)

object PgStatReplicationViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatReplicationViewRow] = new JdbcDecoder[PgStatReplicationViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatReplicationViewRow) =
      columIndex + 19 ->
        PgStatReplicationViewRow(
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 0, rs)._2,
          usesysid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          usename = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          applicationName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          clientAddr = JdbcDecoder.optionDecoder(TypoInet.jdbcDecoder).unsafeDecode(columIndex + 4, rs)._2,
          clientHostname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          clientPort = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 6, rs)._2,
          backendStart = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 7, rs)._2,
          backendXmin = JdbcDecoder.optionDecoder(TypoXid.jdbcDecoder).unsafeDecode(columIndex + 8, rs)._2,
          state = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2,
          sentLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 10, rs)._2,
          writeLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 11, rs)._2,
          flushLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 12, rs)._2,
          replayLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 13, rs)._2,
          writeLag = JdbcDecoder.optionDecoder(TypoInterval.jdbcDecoder).unsafeDecode(columIndex + 14, rs)._2,
          flushLag = JdbcDecoder.optionDecoder(TypoInterval.jdbcDecoder).unsafeDecode(columIndex + 15, rs)._2,
          replayLag = JdbcDecoder.optionDecoder(TypoInterval.jdbcDecoder).unsafeDecode(columIndex + 16, rs)._2,
          syncPriority = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 17, rs)._2,
          syncState = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 18, rs)._2,
          replyTime = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 19, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatReplicationViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val usesysid = jsonObj.get("usesysid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val usename = jsonObj.get("usename").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val applicationName = jsonObj.get("application_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val clientAddr = jsonObj.get("client_addr").fold[Either[String, Option[TypoInet]]](Right(None))(_.as(JsonDecoder.option(TypoInet.jsonDecoder)))
    val clientHostname = jsonObj.get("client_hostname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val clientPort = jsonObj.get("client_port").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val backendStart = jsonObj.get("backend_start").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val backendXmin = jsonObj.get("backend_xmin").fold[Either[String, Option[TypoXid]]](Right(None))(_.as(JsonDecoder.option(TypoXid.jsonDecoder)))
    val state = jsonObj.get("state").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val sentLsn = jsonObj.get("sent_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val writeLsn = jsonObj.get("write_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val flushLsn = jsonObj.get("flush_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val replayLsn = jsonObj.get("replay_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val writeLag = jsonObj.get("write_lag").fold[Either[String, Option[TypoInterval]]](Right(None))(_.as(JsonDecoder.option(TypoInterval.jsonDecoder)))
    val flushLag = jsonObj.get("flush_lag").fold[Either[String, Option[TypoInterval]]](Right(None))(_.as(JsonDecoder.option(TypoInterval.jsonDecoder)))
    val replayLag = jsonObj.get("replay_lag").fold[Either[String, Option[TypoInterval]]](Right(None))(_.as(JsonDecoder.option(TypoInterval.jsonDecoder)))
    val syncPriority = jsonObj.get("sync_priority").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val syncState = jsonObj.get("sync_state").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val replyTime = jsonObj.get("reply_time").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    if (pid.isRight && usesysid.isRight && usename.isRight && applicationName.isRight && clientAddr.isRight && clientHostname.isRight && clientPort.isRight && backendStart.isRight && backendXmin.isRight && state.isRight && sentLsn.isRight && writeLsn.isRight && flushLsn.isRight && replayLsn.isRight && writeLag.isRight && flushLag.isRight && replayLag.isRight && syncPriority.isRight && syncState.isRight && replyTime.isRight)
      Right(PgStatReplicationViewRow(pid = pid.toOption.get, usesysid = usesysid.toOption.get, usename = usename.toOption.get, applicationName = applicationName.toOption.get, clientAddr = clientAddr.toOption.get, clientHostname = clientHostname.toOption.get, clientPort = clientPort.toOption.get, backendStart = backendStart.toOption.get, backendXmin = backendXmin.toOption.get, state = state.toOption.get, sentLsn = sentLsn.toOption.get, writeLsn = writeLsn.toOption.get, flushLsn = flushLsn.toOption.get, replayLsn = replayLsn.toOption.get, writeLag = writeLag.toOption.get, flushLag = flushLag.toOption.get, replayLag = replayLag.toOption.get, syncPriority = syncPriority.toOption.get, syncState = syncState.toOption.get, replyTime = replyTime.toOption.get))
    else Left(List[Either[String, Any]](pid, usesysid, usename, applicationName, clientAddr, clientHostname, clientPort, backendStart, backendXmin, state, sentLsn, writeLsn, flushLsn, replayLsn, writeLag, flushLag, replayLag, syncPriority, syncState, replyTime).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatReplicationViewRow] = new JsonEncoder[PgStatReplicationViewRow] {
    override def unsafeEncode(a: PgStatReplicationViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""usesysid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.usesysid, indent, out)
      out.write(",")
      out.write(""""usename":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.usename, indent, out)
      out.write(",")
      out.write(""""application_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.applicationName, indent, out)
      out.write(",")
      out.write(""""client_addr":""")
      JsonEncoder.option(TypoInet.jsonEncoder).unsafeEncode(a.clientAddr, indent, out)
      out.write(",")
      out.write(""""client_hostname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.clientHostname, indent, out)
      out.write(",")
      out.write(""""client_port":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.clientPort, indent, out)
      out.write(",")
      out.write(""""backend_start":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.backendStart, indent, out)
      out.write(",")
      out.write(""""backend_xmin":""")
      JsonEncoder.option(TypoXid.jsonEncoder).unsafeEncode(a.backendXmin, indent, out)
      out.write(",")
      out.write(""""state":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.state, indent, out)
      out.write(",")
      out.write(""""sent_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.sentLsn, indent, out)
      out.write(",")
      out.write(""""write_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.writeLsn, indent, out)
      out.write(",")
      out.write(""""flush_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.flushLsn, indent, out)
      out.write(",")
      out.write(""""replay_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.replayLsn, indent, out)
      out.write(",")
      out.write(""""write_lag":""")
      JsonEncoder.option(TypoInterval.jsonEncoder).unsafeEncode(a.writeLag, indent, out)
      out.write(",")
      out.write(""""flush_lag":""")
      JsonEncoder.option(TypoInterval.jsonEncoder).unsafeEncode(a.flushLag, indent, out)
      out.write(",")
      out.write(""""replay_lag":""")
      JsonEncoder.option(TypoInterval.jsonEncoder).unsafeEncode(a.replayLag, indent, out)
      out.write(",")
      out.write(""""sync_priority":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.syncPriority, indent, out)
      out.write(",")
      out.write(""""sync_state":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.syncState, indent, out)
      out.write(",")
      out.write(""""reply_time":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.replyTime, indent, out)
      out.write("}")
    }
  }
}
