/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_largeobject_metadata

import adventureworks.customtypes.TypoAclItem
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgLargeobjectMetadataRow(
  oid: PgLargeobjectMetadataId,
  lomowner: /* oid */ Long,
  lomacl: Option[Array[TypoAclItem]]
)

object PgLargeobjectMetadataRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgLargeobjectMetadataRow] = new JdbcDecoder[PgLargeobjectMetadataRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgLargeobjectMetadataRow) =
      columIndex + 2 ->
        PgLargeobjectMetadataRow(
          oid = PgLargeobjectMetadataId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          lomowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          lomacl = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoAclItem]]).unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgLargeobjectMetadataRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgLargeobjectMetadataId.jsonDecoder))
    val lomowner = jsonObj.get("lomowner").toRight("Missing field 'lomowner'").flatMap(_.as(JsonDecoder.long))
    val lomacl = jsonObj.get("lomacl").fold[Either[String, Option[Array[TypoAclItem]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly))))
    if (oid.isRight && lomowner.isRight && lomacl.isRight)
      Right(PgLargeobjectMetadataRow(oid = oid.toOption.get, lomowner = lomowner.toOption.get, lomacl = lomacl.toOption.get))
    else Left(List[Either[String, Any]](oid, lomowner, lomacl).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgLargeobjectMetadataRow] = new JsonEncoder[PgLargeobjectMetadataRow] {
    override def unsafeEncode(a: PgLargeobjectMetadataRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgLargeobjectMetadataId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""lomowner":""")
      JsonEncoder.long.unsafeEncode(a.lomowner, indent, out)
      out.write(",")
      out.write(""""lomacl":""")
      JsonEncoder.option(JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly)).unsafeEncode(a.lomacl, indent, out)
      out.write("}")
    }
  }
}
