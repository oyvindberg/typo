/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_largeobject_metadata

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgLargeobjectMetadataRepoImpl extends PgLargeobjectMetadataRepo {
  override def delete(oid: PgLargeobjectMetadataId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_largeobject_metadata where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgLargeobjectMetadataFields, PgLargeobjectMetadataRow] = {
    DeleteBuilder("pg_catalog.pg_largeobject_metadata", PgLargeobjectMetadataFields)
  }
  override def insert(unsaved: PgLargeobjectMetadataRow): ZIO[ZConnection, Throwable, PgLargeobjectMetadataRow] = {
    sql"""insert into pg_catalog.pg_largeobject_metadata("oid", "lomowner", "lomacl")
          values (???::oid, ???::oid, ???::_aclitem)
          returning "oid", "lomowner", "lomacl"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgLargeobjectMetadataFields, PgLargeobjectMetadataRow] = {
    SelectBuilderSql("pg_catalog.pg_largeobject_metadata", PgLargeobjectMetadataFields, PgLargeobjectMetadataRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgLargeobjectMetadataRow] = {
    sql"""select "oid", "lomowner", "lomacl" from pg_catalog.pg_largeobject_metadata""".query[PgLargeobjectMetadataRow].selectStream
  }
  override def selectById(oid: PgLargeobjectMetadataId): ZIO[ZConnection, Throwable, Option[PgLargeobjectMetadataRow]] = {
    sql"""select "oid", "lomowner", "lomacl" from pg_catalog.pg_largeobject_metadata where "oid" = ???""".query[PgLargeobjectMetadataRow].selectOne
  }
  override def selectByIds(oids: Array[PgLargeobjectMetadataId]): ZStream[ZConnection, Throwable, PgLargeobjectMetadataRow] = {
    sql"""select "oid", "lomowner", "lomacl" from pg_catalog.pg_largeobject_metadata where "oid" = ANY(${oids})""".query[PgLargeobjectMetadataRow].selectStream
  }
  override def update(row: PgLargeobjectMetadataRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_largeobject_metadata
          set "lomowner" = ???::oid,
              "lomacl" = ???::_aclitem
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgLargeobjectMetadataFields, PgLargeobjectMetadataRow] = {
    UpdateBuilder("pg_catalog.pg_largeobject_metadata", PgLargeobjectMetadataFields, PgLargeobjectMetadataRow.read)
  }
  override def upsert(unsaved: PgLargeobjectMetadataRow): ZIO[ZConnection, Throwable, PgLargeobjectMetadataRow] = {
    sql"""insert into pg_catalog.pg_largeobject_metadata("oid", "lomowner", "lomacl")
          values (
            ???::oid,
            ???::oid,
            ???::_aclitem
          )
          on conflict ("oid")
          do update set
            "lomowner" = EXCLUDED."lomowner",
            "lomacl" = EXCLUDED."lomacl"
          returning "oid", "lomowner", "lomacl"
       """.query(???).unique
  }
}
