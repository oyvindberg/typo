/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_type

import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoRegproc
import adventureworks.customtypes.TypoShort
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgTypeStructure[Row](val prefix: Option[String], val extract: Row => PgTypeRow, val merge: (Row, PgTypeRow) => Row)
  extends Relation[PgTypeFields, PgTypeRow, Row]
    with PgTypeFields[Row] { outer =>

  override val oid = new IdField[PgTypeId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val typname = new Field[String, Row](prefix, "typname", None, Some("name"))(x => extract(x).typname, (row, value) => merge(row, extract(row).copy(typname = value)))
  override val typnamespace = new Field[/* oid */ Long, Row](prefix, "typnamespace", None, Some("oid"))(x => extract(x).typnamespace, (row, value) => merge(row, extract(row).copy(typnamespace = value)))
  override val typowner = new Field[/* oid */ Long, Row](prefix, "typowner", None, Some("oid"))(x => extract(x).typowner, (row, value) => merge(row, extract(row).copy(typowner = value)))
  override val typlen = new Field[TypoShort, Row](prefix, "typlen", None, Some("int2"))(x => extract(x).typlen, (row, value) => merge(row, extract(row).copy(typlen = value)))
  override val typbyval = new Field[Boolean, Row](prefix, "typbyval", None, None)(x => extract(x).typbyval, (row, value) => merge(row, extract(row).copy(typbyval = value)))
  override val typtype = new Field[String, Row](prefix, "typtype", None, Some("char"))(x => extract(x).typtype, (row, value) => merge(row, extract(row).copy(typtype = value)))
  override val typcategory = new Field[String, Row](prefix, "typcategory", None, Some("char"))(x => extract(x).typcategory, (row, value) => merge(row, extract(row).copy(typcategory = value)))
  override val typispreferred = new Field[Boolean, Row](prefix, "typispreferred", None, None)(x => extract(x).typispreferred, (row, value) => merge(row, extract(row).copy(typispreferred = value)))
  override val typisdefined = new Field[Boolean, Row](prefix, "typisdefined", None, None)(x => extract(x).typisdefined, (row, value) => merge(row, extract(row).copy(typisdefined = value)))
  override val typdelim = new Field[String, Row](prefix, "typdelim", None, Some("char"))(x => extract(x).typdelim, (row, value) => merge(row, extract(row).copy(typdelim = value)))
  override val typrelid = new Field[/* oid */ Long, Row](prefix, "typrelid", None, Some("oid"))(x => extract(x).typrelid, (row, value) => merge(row, extract(row).copy(typrelid = value)))
  override val typsubscript = new Field[TypoRegproc, Row](prefix, "typsubscript", None, Some("regproc"))(x => extract(x).typsubscript, (row, value) => merge(row, extract(row).copy(typsubscript = value)))
  override val typelem = new Field[/* oid */ Long, Row](prefix, "typelem", None, Some("oid"))(x => extract(x).typelem, (row, value) => merge(row, extract(row).copy(typelem = value)))
  override val typarray = new Field[/* oid */ Long, Row](prefix, "typarray", None, Some("oid"))(x => extract(x).typarray, (row, value) => merge(row, extract(row).copy(typarray = value)))
  override val typinput = new Field[TypoRegproc, Row](prefix, "typinput", None, Some("regproc"))(x => extract(x).typinput, (row, value) => merge(row, extract(row).copy(typinput = value)))
  override val typoutput = new Field[TypoRegproc, Row](prefix, "typoutput", None, Some("regproc"))(x => extract(x).typoutput, (row, value) => merge(row, extract(row).copy(typoutput = value)))
  override val typreceive = new Field[TypoRegproc, Row](prefix, "typreceive", None, Some("regproc"))(x => extract(x).typreceive, (row, value) => merge(row, extract(row).copy(typreceive = value)))
  override val typsend = new Field[TypoRegproc, Row](prefix, "typsend", None, Some("regproc"))(x => extract(x).typsend, (row, value) => merge(row, extract(row).copy(typsend = value)))
  override val typmodin = new Field[TypoRegproc, Row](prefix, "typmodin", None, Some("regproc"))(x => extract(x).typmodin, (row, value) => merge(row, extract(row).copy(typmodin = value)))
  override val typmodout = new Field[TypoRegproc, Row](prefix, "typmodout", None, Some("regproc"))(x => extract(x).typmodout, (row, value) => merge(row, extract(row).copy(typmodout = value)))
  override val typanalyze = new Field[TypoRegproc, Row](prefix, "typanalyze", None, Some("regproc"))(x => extract(x).typanalyze, (row, value) => merge(row, extract(row).copy(typanalyze = value)))
  override val typalign = new Field[String, Row](prefix, "typalign", None, Some("char"))(x => extract(x).typalign, (row, value) => merge(row, extract(row).copy(typalign = value)))
  override val typstorage = new Field[String, Row](prefix, "typstorage", None, Some("char"))(x => extract(x).typstorage, (row, value) => merge(row, extract(row).copy(typstorage = value)))
  override val typnotnull = new Field[Boolean, Row](prefix, "typnotnull", None, None)(x => extract(x).typnotnull, (row, value) => merge(row, extract(row).copy(typnotnull = value)))
  override val typbasetype = new Field[/* oid */ Long, Row](prefix, "typbasetype", None, Some("oid"))(x => extract(x).typbasetype, (row, value) => merge(row, extract(row).copy(typbasetype = value)))
  override val typtypmod = new Field[Int, Row](prefix, "typtypmod", None, Some("int4"))(x => extract(x).typtypmod, (row, value) => merge(row, extract(row).copy(typtypmod = value)))
  override val typndims = new Field[Int, Row](prefix, "typndims", None, Some("int4"))(x => extract(x).typndims, (row, value) => merge(row, extract(row).copy(typndims = value)))
  override val typcollation = new Field[/* oid */ Long, Row](prefix, "typcollation", None, Some("oid"))(x => extract(x).typcollation, (row, value) => merge(row, extract(row).copy(typcollation = value)))
  override val typdefaultbin = new OptField[TypoPgNodeTree, Row](prefix, "typdefaultbin", None, Some("pg_node_tree"))(x => extract(x).typdefaultbin, (row, value) => merge(row, extract(row).copy(typdefaultbin = value)))
  override val typdefault = new OptField[String, Row](prefix, "typdefault", None, None)(x => extract(x).typdefault, (row, value) => merge(row, extract(row).copy(typdefault = value)))
  override val typacl = new OptField[Array[TypoAclItem], Row](prefix, "typacl", None, Some("_aclitem"))(x => extract(x).typacl, (row, value) => merge(row, extract(row).copy(typacl = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, typname, typnamespace, typowner, typlen, typbyval, typtype, typcategory, typispreferred, typisdefined, typdelim, typrelid, typsubscript, typelem, typarray, typinput, typoutput, typreceive, typsend, typmodin, typmodout, typanalyze, typalign, typstorage, typnotnull, typbasetype, typtypmod, typndims, typcollation, typdefaultbin, typdefault, typacl)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgTypeRow, merge: (NewRow, PgTypeRow) => NewRow): PgTypeStructure[NewRow] =
    new PgTypeStructure(prefix, extract, merge)
}
