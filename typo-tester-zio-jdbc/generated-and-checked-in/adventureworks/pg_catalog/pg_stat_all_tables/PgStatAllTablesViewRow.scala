/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_all_tables

import adventureworks.customtypes.TypoInstant
import adventureworks.pg_catalog.pg_class.PgClassId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatAllTablesViewRow(
  /** Points to [[pg_class.PgClassRow.oid]] */
  relid: PgClassId,
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  relname: String,
  seqScan: /* nullability unknown */ Option[Long],
  seqTupRead: /* nullability unknown */ Option[Long],
  idxScan: /* nullability unknown */ Option[Long],
  idxTupFetch: /* nullability unknown */ Option[Long],
  nTupIns: /* nullability unknown */ Option[Long],
  nTupUpd: /* nullability unknown */ Option[Long],
  nTupDel: /* nullability unknown */ Option[Long],
  nTupHotUpd: /* nullability unknown */ Option[Long],
  nLiveTup: /* nullability unknown */ Option[Long],
  nDeadTup: /* nullability unknown */ Option[Long],
  nModSinceAnalyze: /* nullability unknown */ Option[Long],
  nInsSinceVacuum: /* nullability unknown */ Option[Long],
  lastVacuum: /* nullability unknown */ Option[TypoInstant],
  lastAutovacuum: /* nullability unknown */ Option[TypoInstant],
  lastAnalyze: /* nullability unknown */ Option[TypoInstant],
  lastAutoanalyze: /* nullability unknown */ Option[TypoInstant],
  vacuumCount: /* nullability unknown */ Option[Long],
  autovacuumCount: /* nullability unknown */ Option[Long],
  analyzeCount: /* nullability unknown */ Option[Long],
  autoanalyzeCount: /* nullability unknown */ Option[Long]
)

object PgStatAllTablesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatAllTablesViewRow] = new JdbcDecoder[PgStatAllTablesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatAllTablesViewRow) =
      columIndex + 22 ->
        PgStatAllTablesViewRow(
          relid = PgClassId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          relname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          seqScan = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          seqTupRead = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          idxScan = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          idxTupFetch = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 6, rs)._2,
          nTupIns = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          nTupUpd = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 8, rs)._2,
          nTupDel = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 9, rs)._2,
          nTupHotUpd = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 10, rs)._2,
          nLiveTup = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 11, rs)._2,
          nDeadTup = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 12, rs)._2,
          nModSinceAnalyze = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 13, rs)._2,
          nInsSinceVacuum = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 14, rs)._2,
          lastVacuum = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 15, rs)._2,
          lastAutovacuum = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 16, rs)._2,
          lastAnalyze = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 17, rs)._2,
          lastAutoanalyze = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 18, rs)._2,
          vacuumCount = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 19, rs)._2,
          autovacuumCount = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 20, rs)._2,
          analyzeCount = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 21, rs)._2,
          autoanalyzeCount = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 22, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatAllTablesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val relid = jsonObj.get("relid").toRight("Missing field 'relid'").flatMap(_.as(PgClassId.jsonDecoder))
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val relname = jsonObj.get("relname").toRight("Missing field 'relname'").flatMap(_.as(JsonDecoder.string))
    val seqScan = jsonObj.get("seq_scan").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val seqTupRead = jsonObj.get("seq_tup_read").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val idxScan = jsonObj.get("idx_scan").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val idxTupFetch = jsonObj.get("idx_tup_fetch").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val nTupIns = jsonObj.get("n_tup_ins").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val nTupUpd = jsonObj.get("n_tup_upd").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val nTupDel = jsonObj.get("n_tup_del").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val nTupHotUpd = jsonObj.get("n_tup_hot_upd").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val nLiveTup = jsonObj.get("n_live_tup").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val nDeadTup = jsonObj.get("n_dead_tup").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val nModSinceAnalyze = jsonObj.get("n_mod_since_analyze").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val nInsSinceVacuum = jsonObj.get("n_ins_since_vacuum").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val lastVacuum = jsonObj.get("last_vacuum").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val lastAutovacuum = jsonObj.get("last_autovacuum").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val lastAnalyze = jsonObj.get("last_analyze").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val lastAutoanalyze = jsonObj.get("last_autoanalyze").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val vacuumCount = jsonObj.get("vacuum_count").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val autovacuumCount = jsonObj.get("autovacuum_count").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val analyzeCount = jsonObj.get("analyze_count").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val autoanalyzeCount = jsonObj.get("autoanalyze_count").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (relid.isRight && schemaname.isRight && relname.isRight && seqScan.isRight && seqTupRead.isRight && idxScan.isRight && idxTupFetch.isRight && nTupIns.isRight && nTupUpd.isRight && nTupDel.isRight && nTupHotUpd.isRight && nLiveTup.isRight && nDeadTup.isRight && nModSinceAnalyze.isRight && nInsSinceVacuum.isRight && lastVacuum.isRight && lastAutovacuum.isRight && lastAnalyze.isRight && lastAutoanalyze.isRight && vacuumCount.isRight && autovacuumCount.isRight && analyzeCount.isRight && autoanalyzeCount.isRight)
      Right(PgStatAllTablesViewRow(relid = relid.toOption.get, schemaname = schemaname.toOption.get, relname = relname.toOption.get, seqScan = seqScan.toOption.get, seqTupRead = seqTupRead.toOption.get, idxScan = idxScan.toOption.get, idxTupFetch = idxTupFetch.toOption.get, nTupIns = nTupIns.toOption.get, nTupUpd = nTupUpd.toOption.get, nTupDel = nTupDel.toOption.get, nTupHotUpd = nTupHotUpd.toOption.get, nLiveTup = nLiveTup.toOption.get, nDeadTup = nDeadTup.toOption.get, nModSinceAnalyze = nModSinceAnalyze.toOption.get, nInsSinceVacuum = nInsSinceVacuum.toOption.get, lastVacuum = lastVacuum.toOption.get, lastAutovacuum = lastAutovacuum.toOption.get, lastAnalyze = lastAnalyze.toOption.get, lastAutoanalyze = lastAutoanalyze.toOption.get, vacuumCount = vacuumCount.toOption.get, autovacuumCount = autovacuumCount.toOption.get, analyzeCount = analyzeCount.toOption.get, autoanalyzeCount = autoanalyzeCount.toOption.get))
    else Left(List[Either[String, Any]](relid, schemaname, relname, seqScan, seqTupRead, idxScan, idxTupFetch, nTupIns, nTupUpd, nTupDel, nTupHotUpd, nLiveTup, nDeadTup, nModSinceAnalyze, nInsSinceVacuum, lastVacuum, lastAutovacuum, lastAnalyze, lastAutoanalyze, vacuumCount, autovacuumCount, analyzeCount, autoanalyzeCount).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatAllTablesViewRow] = new JsonEncoder[PgStatAllTablesViewRow] {
    override def unsafeEncode(a: PgStatAllTablesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""relid":""")
      PgClassId.jsonEncoder.unsafeEncode(a.relid, indent, out)
      out.write(",")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""relname":""")
      JsonEncoder.string.unsafeEncode(a.relname, indent, out)
      out.write(",")
      out.write(""""seq_scan":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.seqScan, indent, out)
      out.write(",")
      out.write(""""seq_tup_read":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.seqTupRead, indent, out)
      out.write(",")
      out.write(""""idx_scan":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.idxScan, indent, out)
      out.write(",")
      out.write(""""idx_tup_fetch":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.idxTupFetch, indent, out)
      out.write(",")
      out.write(""""n_tup_ins":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.nTupIns, indent, out)
      out.write(",")
      out.write(""""n_tup_upd":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.nTupUpd, indent, out)
      out.write(",")
      out.write(""""n_tup_del":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.nTupDel, indent, out)
      out.write(",")
      out.write(""""n_tup_hot_upd":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.nTupHotUpd, indent, out)
      out.write(",")
      out.write(""""n_live_tup":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.nLiveTup, indent, out)
      out.write(",")
      out.write(""""n_dead_tup":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.nDeadTup, indent, out)
      out.write(",")
      out.write(""""n_mod_since_analyze":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.nModSinceAnalyze, indent, out)
      out.write(",")
      out.write(""""n_ins_since_vacuum":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.nInsSinceVacuum, indent, out)
      out.write(",")
      out.write(""""last_vacuum":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.lastVacuum, indent, out)
      out.write(",")
      out.write(""""last_autovacuum":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.lastAutovacuum, indent, out)
      out.write(",")
      out.write(""""last_analyze":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.lastAnalyze, indent, out)
      out.write(",")
      out.write(""""last_autoanalyze":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.lastAutoanalyze, indent, out)
      out.write(",")
      out.write(""""vacuum_count":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.vacuumCount, indent, out)
      out.write(",")
      out.write(""""autovacuum_count":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.autovacuumCount, indent, out)
      out.write(",")
      out.write(""""analyze_count":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.analyzeCount, indent, out)
      out.write(",")
      out.write(""""autoanalyze_count":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.autoanalyzeCount, indent, out)
      out.write("}")
    }
  }
}
