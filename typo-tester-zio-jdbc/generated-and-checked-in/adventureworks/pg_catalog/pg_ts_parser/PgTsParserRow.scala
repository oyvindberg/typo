/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_parser

import adventureworks.customtypes.TypoRegproc
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgTsParserRow(
  oid: PgTsParserId,
  prsname: String,
  prsnamespace: /* oid */ Long,
  prsstart: TypoRegproc,
  prstoken: TypoRegproc,
  prsend: TypoRegproc,
  prsheadline: TypoRegproc,
  prslextype: TypoRegproc
)

object PgTsParserRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgTsParserRow] = new JdbcDecoder[PgTsParserRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgTsParserRow) =
      columIndex + 7 ->
        PgTsParserRow(
          oid = PgTsParserId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          prsname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          prsnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          prsstart = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          prstoken = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          prsend = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          prsheadline = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          prslextype = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgTsParserRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgTsParserId.jsonDecoder))
    val prsname = jsonObj.get("prsname").toRight("Missing field 'prsname'").flatMap(_.as(JsonDecoder.string))
    val prsnamespace = jsonObj.get("prsnamespace").toRight("Missing field 'prsnamespace'").flatMap(_.as(JsonDecoder.long))
    val prsstart = jsonObj.get("prsstart").toRight("Missing field 'prsstart'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val prstoken = jsonObj.get("prstoken").toRight("Missing field 'prstoken'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val prsend = jsonObj.get("prsend").toRight("Missing field 'prsend'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val prsheadline = jsonObj.get("prsheadline").toRight("Missing field 'prsheadline'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val prslextype = jsonObj.get("prslextype").toRight("Missing field 'prslextype'").flatMap(_.as(TypoRegproc.jsonDecoder))
    if (oid.isRight && prsname.isRight && prsnamespace.isRight && prsstart.isRight && prstoken.isRight && prsend.isRight && prsheadline.isRight && prslextype.isRight)
      Right(PgTsParserRow(oid = oid.toOption.get, prsname = prsname.toOption.get, prsnamespace = prsnamespace.toOption.get, prsstart = prsstart.toOption.get, prstoken = prstoken.toOption.get, prsend = prsend.toOption.get, prsheadline = prsheadline.toOption.get, prslextype = prslextype.toOption.get))
    else Left(List[Either[String, Any]](oid, prsname, prsnamespace, prsstart, prstoken, prsend, prsheadline, prslextype).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTsParserRow] = new JsonEncoder[PgTsParserRow] {
    override def unsafeEncode(a: PgTsParserRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgTsParserId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""prsname":""")
      JsonEncoder.string.unsafeEncode(a.prsname, indent, out)
      out.write(",")
      out.write(""""prsnamespace":""")
      JsonEncoder.long.unsafeEncode(a.prsnamespace, indent, out)
      out.write(",")
      out.write(""""prsstart":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.prsstart, indent, out)
      out.write(",")
      out.write(""""prstoken":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.prstoken, indent, out)
      out.write(",")
      out.write(""""prsend":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.prsend, indent, out)
      out.write(",")
      out.write(""""prsheadline":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.prsheadline, indent, out)
      out.write(",")
      out.write(""""prslextype":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.prslextype, indent, out)
      out.write("}")
    }
  }
}
