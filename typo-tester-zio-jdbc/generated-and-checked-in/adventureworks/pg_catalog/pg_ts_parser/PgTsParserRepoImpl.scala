/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_parser

import adventureworks.customtypes.TypoRegproc
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgTsParserRepoImpl extends PgTsParserRepo {
  override def delete(oid: PgTsParserId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_ts_parser where "oid" = ${Segment.paramSegment(oid)(PgTsParserId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTsParserFields, PgTsParserRow] = {
    DeleteBuilder("pg_catalog.pg_ts_parser", PgTsParserFields)
  }
  override def insert(unsaved: PgTsParserRow): ZIO[ZConnection, Throwable, PgTsParserRow] = {
    sql"""insert into pg_catalog.pg_ts_parser("oid", "prsname", "prsnamespace", "prsstart", "prstoken", "prsend", "prsheadline", "prslextype")
          values (${Segment.paramSegment(unsaved.oid)(PgTsParserId.setter)}::oid, ${Segment.paramSegment(unsaved.prsname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.prsnamespace)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.prsstart)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.prstoken)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.prsend)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.prsheadline)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.prslextype)(TypoRegproc.setter)}::regproc)
          returning "oid", "prsname", "prsnamespace", "prsstart", "prstoken", "prsend", "prsheadline", "prslextype"
       """.insertReturning(PgTsParserRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgTsParserFields, PgTsParserRow] = {
    SelectBuilderSql("pg_catalog.pg_ts_parser", PgTsParserFields, PgTsParserRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTsParserRow] = {
    sql"""select "oid", "prsname", "prsnamespace", "prsstart", "prstoken", "prsend", "prsheadline", "prslextype" from pg_catalog.pg_ts_parser""".query(PgTsParserRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgTsParserId): ZIO[ZConnection, Throwable, Option[PgTsParserRow]] = {
    sql"""select "oid", "prsname", "prsnamespace", "prsstart", "prstoken", "prsend", "prsheadline", "prslextype" from pg_catalog.pg_ts_parser where "oid" = ${Segment.paramSegment(oid)(PgTsParserId.setter)}""".query(PgTsParserRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgTsParserId]): ZStream[ZConnection, Throwable, PgTsParserRow] = {
    sql"""select "oid", "prsname", "prsnamespace", "prsstart", "prstoken", "prsend", "prsheadline", "prslextype" from pg_catalog.pg_ts_parser where "oid" = ANY(${Segment.paramSegment(oids)(PgTsParserId.arraySetter)})""".query(PgTsParserRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(prsname: String, prsnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgTsParserRow]] = {
    sql"""select "prsname", "prsnamespace"
          from pg_catalog.pg_ts_parser
          where "prsname" = ${Segment.paramSegment(prsname)(Setter.stringSetter)} AND "prsnamespace" = ${Segment.paramSegment(prsnamespace)(Setter.longSetter)}
       """.query(PgTsParserRow.jdbcDecoder).selectOne
  }
  override def update(row: PgTsParserRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_ts_parser
          set "prsname" = ${Segment.paramSegment(row.prsname)(Setter.stringSetter)}::name,
              "prsnamespace" = ${Segment.paramSegment(row.prsnamespace)(Setter.longSetter)}::oid,
              "prsstart" = ${Segment.paramSegment(row.prsstart)(TypoRegproc.setter)}::regproc,
              "prstoken" = ${Segment.paramSegment(row.prstoken)(TypoRegproc.setter)}::regproc,
              "prsend" = ${Segment.paramSegment(row.prsend)(TypoRegproc.setter)}::regproc,
              "prsheadline" = ${Segment.paramSegment(row.prsheadline)(TypoRegproc.setter)}::regproc,
              "prslextype" = ${Segment.paramSegment(row.prslextype)(TypoRegproc.setter)}::regproc
          where "oid" = ${Segment.paramSegment(oid)(PgTsParserId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTsParserFields, PgTsParserRow] = {
    UpdateBuilder("pg_catalog.pg_ts_parser", PgTsParserFields, PgTsParserRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgTsParserRow): ZIO[ZConnection, Throwable, UpdateResult[PgTsParserRow]] = {
    sql"""insert into pg_catalog.pg_ts_parser("oid", "prsname", "prsnamespace", "prsstart", "prstoken", "prsend", "prsheadline", "prslextype")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgTsParserId.setter)}::oid,
            ${Segment.paramSegment(unsaved.prsname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.prsnamespace)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.prsstart)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.prstoken)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.prsend)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.prsheadline)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.prslextype)(TypoRegproc.setter)}::regproc
          )
          on conflict ("oid")
          do update set
            "prsname" = EXCLUDED."prsname",
            "prsnamespace" = EXCLUDED."prsnamespace",
            "prsstart" = EXCLUDED."prsstart",
            "prstoken" = EXCLUDED."prstoken",
            "prsend" = EXCLUDED."prsend",
            "prsheadline" = EXCLUDED."prsheadline",
            "prslextype" = EXCLUDED."prslextype"
          returning "oid", "prsname", "prsnamespace", "prsstart", "prstoken", "prsend", "prsheadline", "prslextype"""".insertReturning(PgTsParserRow.jdbcDecoder)
  }
}
