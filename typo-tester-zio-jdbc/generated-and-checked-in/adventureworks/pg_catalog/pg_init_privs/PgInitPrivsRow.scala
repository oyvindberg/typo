/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_init_privs

import adventureworks.customtypes.TypoAclItem
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgInitPrivsRow(
  objoid: /* oid */ Long,
  classoid: /* oid */ Long,
  objsubid: Int,
  privtype: String,
  initprivs: Array[TypoAclItem]
){
   val compositeId: PgInitPrivsId = PgInitPrivsId(objoid, classoid, objsubid)
 }

object PgInitPrivsRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgInitPrivsRow] = new JdbcDecoder[PgInitPrivsRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgInitPrivsRow) =
      columIndex + 4 ->
        PgInitPrivsRow(
          objoid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 0, rs)._2,
          classoid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          objsubid = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 2, rs)._2,
          privtype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          initprivs = JdbcDecoder[Array[TypoAclItem]].unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgInitPrivsRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val objoid = jsonObj.get("objoid").toRight("Missing field 'objoid'").flatMap(_.as(JsonDecoder.long))
    val classoid = jsonObj.get("classoid").toRight("Missing field 'classoid'").flatMap(_.as(JsonDecoder.long))
    val objsubid = jsonObj.get("objsubid").toRight("Missing field 'objsubid'").flatMap(_.as(JsonDecoder.int))
    val privtype = jsonObj.get("privtype").toRight("Missing field 'privtype'").flatMap(_.as(JsonDecoder.string))
    val initprivs = jsonObj.get("initprivs").toRight("Missing field 'initprivs'").flatMap(_.as(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly)))
    if (objoid.isRight && classoid.isRight && objsubid.isRight && privtype.isRight && initprivs.isRight)
      Right(PgInitPrivsRow(objoid = objoid.toOption.get, classoid = classoid.toOption.get, objsubid = objsubid.toOption.get, privtype = privtype.toOption.get, initprivs = initprivs.toOption.get))
    else Left(List[Either[String, Any]](objoid, classoid, objsubid, privtype, initprivs).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgInitPrivsRow] = new JsonEncoder[PgInitPrivsRow] {
    override def unsafeEncode(a: PgInitPrivsRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""objoid":""")
      JsonEncoder.long.unsafeEncode(a.objoid, indent, out)
      out.write(",")
      out.write(""""classoid":""")
      JsonEncoder.long.unsafeEncode(a.classoid, indent, out)
      out.write(",")
      out.write(""""objsubid":""")
      JsonEncoder.int.unsafeEncode(a.objsubid, indent, out)
      out.write(",")
      out.write(""""privtype":""")
      JsonEncoder.string.unsafeEncode(a.privtype, indent, out)
      out.write(",")
      out.write(""""initprivs":""")
      JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly).unsafeEncode(a.initprivs, indent, out)
      out.write("}")
    }
  }
}
