/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_init_privs

import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `pg_catalog.pg_init_privs` */
case class PgInitPrivsId(objoid: /* oid */ Long, classoid: /* oid */ Long, objsubid: Int)
object PgInitPrivsId {
  implicit lazy val jsonDecoder: JsonDecoder[PgInitPrivsId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val objoid = jsonObj.get("objoid").toRight("Missing field 'objoid'").flatMap(_.as(JsonDecoder.long))
    val classoid = jsonObj.get("classoid").toRight("Missing field 'classoid'").flatMap(_.as(JsonDecoder.long))
    val objsubid = jsonObj.get("objsubid").toRight("Missing field 'objsubid'").flatMap(_.as(JsonDecoder.int))
    if (objoid.isRight && classoid.isRight && objsubid.isRight)
      Right(PgInitPrivsId(objoid = objoid.toOption.get, classoid = classoid.toOption.get, objsubid = objsubid.toOption.get))
    else Left(List[Either[String, Any]](objoid, classoid, objsubid).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgInitPrivsId] = new JsonEncoder[PgInitPrivsId] {
    override def unsafeEncode(a: PgInitPrivsId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""objoid":""")
      JsonEncoder.long.unsafeEncode(a.objoid, indent, out)
      out.write(",")
      out.write(""""classoid":""")
      JsonEncoder.long.unsafeEncode(a.classoid, indent, out)
      out.write(",")
      out.write(""""objsubid":""")
      JsonEncoder.int.unsafeEncode(a.objsubid, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[PgInitPrivsId] = Ordering.by(x => (x.objoid, x.classoid, x.objsubid))
}
