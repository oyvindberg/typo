/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_hba_file_rules

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgHbaFileRulesViewRow(
  lineNumber: /* nullability unknown */ Option[Int],
  `type`: /* nullability unknown */ Option[String],
  database: /* nullability unknown */ Option[Array[String]],
  userName: /* nullability unknown */ Option[Array[String]],
  address: /* nullability unknown */ Option[String],
  netmask: /* nullability unknown */ Option[String],
  authMethod: /* nullability unknown */ Option[String],
  options: /* nullability unknown */ Option[Array[String]],
  error: /* nullability unknown */ Option[String]
)

object PgHbaFileRulesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgHbaFileRulesViewRow] = new JdbcDecoder[PgHbaFileRulesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgHbaFileRulesViewRow) =
      columIndex + 8 ->
        PgHbaFileRulesViewRow(
          lineNumber = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 0, rs)._2,
          `type` = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          database = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 2, rs)._2,
          userName = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 3, rs)._2,
          address = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          netmask = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          authMethod = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          options = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 7, rs)._2,
          error = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgHbaFileRulesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val lineNumber = jsonObj.get("line_number").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val `type` = jsonObj.get("type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val database = jsonObj.get("database").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val userName = jsonObj.get("user_name").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val address = jsonObj.get("address").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val netmask = jsonObj.get("netmask").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val authMethod = jsonObj.get("auth_method").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val options = jsonObj.get("options").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val error = jsonObj.get("error").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (lineNumber.isRight && `type`.isRight && database.isRight && userName.isRight && address.isRight && netmask.isRight && authMethod.isRight && options.isRight && error.isRight)
      Right(PgHbaFileRulesViewRow(lineNumber = lineNumber.toOption.get, `type` = `type`.toOption.get, database = database.toOption.get, userName = userName.toOption.get, address = address.toOption.get, netmask = netmask.toOption.get, authMethod = authMethod.toOption.get, options = options.toOption.get, error = error.toOption.get))
    else Left(List[Either[String, Any]](lineNumber, `type`, database, userName, address, netmask, authMethod, options, error).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgHbaFileRulesViewRow] = new JsonEncoder[PgHbaFileRulesViewRow] {
    override def unsafeEncode(a: PgHbaFileRulesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""line_number":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.lineNumber, indent, out)
      out.write(",")
      out.write(""""type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.`type`, indent, out)
      out.write(",")
      out.write(""""database":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.database, indent, out)
      out.write(",")
      out.write(""""user_name":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.userName, indent, out)
      out.write(",")
      out.write(""""address":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.address, indent, out)
      out.write(",")
      out.write(""""netmask":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.netmask, indent, out)
      out.write(",")
      out.write(""""auth_method":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.authMethod, indent, out)
      out.write(",")
      out.write(""""options":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.options, indent, out)
      out.write(",")
      out.write(""""error":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.error, indent, out)
      out.write("}")
    }
  }
}
