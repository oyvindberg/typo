/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_xact_user_functions

import adventureworks.pg_catalog.pg_proc.PgProcId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatXactUserFunctionsViewRow(
  /** Points to [[pg_proc.PgProcRow.oid]] */
  funcid: PgProcId,
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_proc.PgProcRow.proname]] */
  funcname: String,
  calls: /* nullability unknown */ Option[Long],
  totalTime: /* nullability unknown */ Option[Double],
  selfTime: /* nullability unknown */ Option[Double]
)

object PgStatXactUserFunctionsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatXactUserFunctionsViewRow] = new JdbcDecoder[PgStatXactUserFunctionsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatXactUserFunctionsViewRow) =
      columIndex + 5 ->
        PgStatXactUserFunctionsViewRow(
          funcid = PgProcId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          funcname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          calls = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          totalTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 4, rs)._2,
          selfTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatXactUserFunctionsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val funcid = jsonObj.get("funcid").toRight("Missing field 'funcid'").flatMap(_.as(PgProcId.jsonDecoder))
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val funcname = jsonObj.get("funcname").toRight("Missing field 'funcname'").flatMap(_.as(JsonDecoder.string))
    val calls = jsonObj.get("calls").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val totalTime = jsonObj.get("total_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val selfTime = jsonObj.get("self_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    if (funcid.isRight && schemaname.isRight && funcname.isRight && calls.isRight && totalTime.isRight && selfTime.isRight)
      Right(PgStatXactUserFunctionsViewRow(funcid = funcid.toOption.get, schemaname = schemaname.toOption.get, funcname = funcname.toOption.get, calls = calls.toOption.get, totalTime = totalTime.toOption.get, selfTime = selfTime.toOption.get))
    else Left(List[Either[String, Any]](funcid, schemaname, funcname, calls, totalTime, selfTime).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatXactUserFunctionsViewRow] = new JsonEncoder[PgStatXactUserFunctionsViewRow] {
    override def unsafeEncode(a: PgStatXactUserFunctionsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""funcid":""")
      PgProcId.jsonEncoder.unsafeEncode(a.funcid, indent, out)
      out.write(",")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""funcname":""")
      JsonEncoder.string.unsafeEncode(a.funcname, indent, out)
      out.write(",")
      out.write(""""calls":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.calls, indent, out)
      out.write(",")
      out.write(""""total_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.totalTime, indent, out)
      out.write(",")
      out.write(""""self_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.selfTime, indent, out)
      out.write("}")
    }
  }
}
