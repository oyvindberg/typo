/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_event_trigger

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgEventTriggerRepoImpl extends PgEventTriggerRepo {
  override def delete(oid: PgEventTriggerId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_event_trigger where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgEventTriggerFields, PgEventTriggerRow] = {
    DeleteBuilder("pg_catalog.pg_event_trigger", PgEventTriggerFields)
  }
  override def insert(unsaved: PgEventTriggerRow): ZIO[ZConnection, Throwable, PgEventTriggerRow] = {
    sql"""insert into pg_catalog.pg_event_trigger("oid", "evtname", "evtevent", "evtowner", "evtfoid", "evtenabled", "evttags")
          values (???::oid, ???::name, ???::name, ???::oid, ???::oid, ???::char, ???::_text)
          returning "oid", "evtname", "evtevent", "evtowner", "evtfoid", "evtenabled", "evttags"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgEventTriggerFields, PgEventTriggerRow] = {
    SelectBuilderSql("pg_catalog.pg_event_trigger", PgEventTriggerFields, PgEventTriggerRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgEventTriggerRow] = {
    sql"""select "oid", "evtname", "evtevent", "evtowner", "evtfoid", "evtenabled", "evttags" from pg_catalog.pg_event_trigger""".query[PgEventTriggerRow].selectStream
  }
  override def selectById(oid: PgEventTriggerId): ZIO[ZConnection, Throwable, Option[PgEventTriggerRow]] = {
    sql"""select "oid", "evtname", "evtevent", "evtowner", "evtfoid", "evtenabled", "evttags" from pg_catalog.pg_event_trigger where "oid" = ???""".query[PgEventTriggerRow].selectOne
  }
  override def selectByIds(oids: Array[PgEventTriggerId]): ZStream[ZConnection, Throwable, PgEventTriggerRow] = {
    sql"""select "oid", "evtname", "evtevent", "evtowner", "evtfoid", "evtenabled", "evttags" from pg_catalog.pg_event_trigger where "oid" = ANY(${oids})""".query[PgEventTriggerRow].selectStream
  }
  override def selectByUnique(evtname: String): ZIO[ZConnection, Throwable, Option[PgEventTriggerRow]] = {
    sql"""select "evtname"
          from pg_catalog.pg_event_trigger
          where "evtname" = ???
       """.query[PgEventTriggerRow].selectOne
  }
  override def update(row: PgEventTriggerRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_event_trigger
          set "evtname" = ???::name,
              "evtevent" = ???::name,
              "evtowner" = ???::oid,
              "evtfoid" = ???::oid,
              "evtenabled" = ???::char,
              "evttags" = ???::_text
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgEventTriggerFields, PgEventTriggerRow] = {
    UpdateBuilder("pg_catalog.pg_event_trigger", PgEventTriggerFields, PgEventTriggerRow.read)
  }
  override def upsert(unsaved: PgEventTriggerRow): ZIO[ZConnection, Throwable, PgEventTriggerRow] = {
    sql"""insert into pg_catalog.pg_event_trigger("oid", "evtname", "evtevent", "evtowner", "evtfoid", "evtenabled", "evttags")
          values (
            ???::oid,
            ???::name,
            ???::name,
            ???::oid,
            ???::oid,
            ???::char,
            ???::_text
          )
          on conflict ("oid")
          do update set
            "evtname" = EXCLUDED."evtname",
            "evtevent" = EXCLUDED."evtevent",
            "evtowner" = EXCLUDED."evtowner",
            "evtfoid" = EXCLUDED."evtfoid",
            "evtenabled" = EXCLUDED."evtenabled",
            "evttags" = EXCLUDED."evttags"
          returning "oid", "evtname", "evtevent", "evtowner", "evtfoid", "evtenabled", "evttags"
       """.query(???).unique
  }
}
