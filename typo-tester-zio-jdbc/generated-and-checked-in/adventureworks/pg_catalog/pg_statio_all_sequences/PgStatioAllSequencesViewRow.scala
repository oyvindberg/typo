/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statio_all_sequences

import adventureworks.pg_catalog.pg_class.PgClassId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatioAllSequencesViewRow(
  /** Points to [[pg_class.PgClassRow.oid]] */
  relid: PgClassId,
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  relname: String,
  blksRead: /* nullability unknown */ Option[Long],
  blksHit: /* nullability unknown */ Option[Long]
)

object PgStatioAllSequencesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatioAllSequencesViewRow] = new JdbcDecoder[PgStatioAllSequencesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatioAllSequencesViewRow) =
      columIndex + 4 ->
        PgStatioAllSequencesViewRow(
          relid = PgClassId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          relname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          blksRead = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          blksHit = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatioAllSequencesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val relid = jsonObj.get("relid").toRight("Missing field 'relid'").flatMap(_.as(PgClassId.jsonDecoder))
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val relname = jsonObj.get("relname").toRight("Missing field 'relname'").flatMap(_.as(JsonDecoder.string))
    val blksRead = jsonObj.get("blks_read").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val blksHit = jsonObj.get("blks_hit").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (relid.isRight && schemaname.isRight && relname.isRight && blksRead.isRight && blksHit.isRight)
      Right(PgStatioAllSequencesViewRow(relid = relid.toOption.get, schemaname = schemaname.toOption.get, relname = relname.toOption.get, blksRead = blksRead.toOption.get, blksHit = blksHit.toOption.get))
    else Left(List[Either[String, Any]](relid, schemaname, relname, blksRead, blksHit).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatioAllSequencesViewRow] = new JsonEncoder[PgStatioAllSequencesViewRow] {
    override def unsafeEncode(a: PgStatioAllSequencesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""relid":""")
      PgClassId.jsonEncoder.unsafeEncode(a.relid, indent, out)
      out.write(",")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""relname":""")
      JsonEncoder.string.unsafeEncode(a.relname, indent, out)
      out.write(",")
      out.write(""""blks_read":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blksRead, indent, out)
      out.write(",")
      out.write(""""blks_hit":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blksHit, indent, out)
      out.write("}")
    }
  }
}
