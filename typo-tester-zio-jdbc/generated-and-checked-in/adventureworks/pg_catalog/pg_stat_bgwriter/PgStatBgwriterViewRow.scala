/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_bgwriter

import adventureworks.customtypes.TypoInstant
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatBgwriterViewRow(
  checkpointsTimed: /* nullability unknown */ Option[Long],
  checkpointsReq: /* nullability unknown */ Option[Long],
  checkpointWriteTime: /* nullability unknown */ Option[Double],
  checkpointSyncTime: /* nullability unknown */ Option[Double],
  buffersCheckpoint: /* nullability unknown */ Option[Long],
  buffersClean: /* nullability unknown */ Option[Long],
  maxwrittenClean: /* nullability unknown */ Option[Long],
  buffersBackend: /* nullability unknown */ Option[Long],
  buffersBackendFsync: /* nullability unknown */ Option[Long],
  buffersAlloc: /* nullability unknown */ Option[Long],
  statsReset: /* nullability unknown */ Option[TypoInstant]
)

object PgStatBgwriterViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatBgwriterViewRow] = new JdbcDecoder[PgStatBgwriterViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatBgwriterViewRow) =
      columIndex + 10 ->
        PgStatBgwriterViewRow(
          checkpointsTimed = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 0, rs)._2,
          checkpointsReq = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          checkpointWriteTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 2, rs)._2,
          checkpointSyncTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 3, rs)._2,
          buffersCheckpoint = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          buffersClean = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          maxwrittenClean = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 6, rs)._2,
          buffersBackend = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          buffersBackendFsync = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 8, rs)._2,
          buffersAlloc = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 9, rs)._2,
          statsReset = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 10, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatBgwriterViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val checkpointsTimed = jsonObj.get("checkpoints_timed").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val checkpointsReq = jsonObj.get("checkpoints_req").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val checkpointWriteTime = jsonObj.get("checkpoint_write_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val checkpointSyncTime = jsonObj.get("checkpoint_sync_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val buffersCheckpoint = jsonObj.get("buffers_checkpoint").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val buffersClean = jsonObj.get("buffers_clean").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val maxwrittenClean = jsonObj.get("maxwritten_clean").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val buffersBackend = jsonObj.get("buffers_backend").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val buffersBackendFsync = jsonObj.get("buffers_backend_fsync").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val buffersAlloc = jsonObj.get("buffers_alloc").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val statsReset = jsonObj.get("stats_reset").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    if (checkpointsTimed.isRight && checkpointsReq.isRight && checkpointWriteTime.isRight && checkpointSyncTime.isRight && buffersCheckpoint.isRight && buffersClean.isRight && maxwrittenClean.isRight && buffersBackend.isRight && buffersBackendFsync.isRight && buffersAlloc.isRight && statsReset.isRight)
      Right(PgStatBgwriterViewRow(checkpointsTimed = checkpointsTimed.toOption.get, checkpointsReq = checkpointsReq.toOption.get, checkpointWriteTime = checkpointWriteTime.toOption.get, checkpointSyncTime = checkpointSyncTime.toOption.get, buffersCheckpoint = buffersCheckpoint.toOption.get, buffersClean = buffersClean.toOption.get, maxwrittenClean = maxwrittenClean.toOption.get, buffersBackend = buffersBackend.toOption.get, buffersBackendFsync = buffersBackendFsync.toOption.get, buffersAlloc = buffersAlloc.toOption.get, statsReset = statsReset.toOption.get))
    else Left(List[Either[String, Any]](checkpointsTimed, checkpointsReq, checkpointWriteTime, checkpointSyncTime, buffersCheckpoint, buffersClean, maxwrittenClean, buffersBackend, buffersBackendFsync, buffersAlloc, statsReset).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatBgwriterViewRow] = new JsonEncoder[PgStatBgwriterViewRow] {
    override def unsafeEncode(a: PgStatBgwriterViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""checkpoints_timed":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.checkpointsTimed, indent, out)
      out.write(",")
      out.write(""""checkpoints_req":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.checkpointsReq, indent, out)
      out.write(",")
      out.write(""""checkpoint_write_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.checkpointWriteTime, indent, out)
      out.write(",")
      out.write(""""checkpoint_sync_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.checkpointSyncTime, indent, out)
      out.write(",")
      out.write(""""buffers_checkpoint":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.buffersCheckpoint, indent, out)
      out.write(",")
      out.write(""""buffers_clean":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.buffersClean, indent, out)
      out.write(",")
      out.write(""""maxwritten_clean":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.maxwrittenClean, indent, out)
      out.write(",")
      out.write(""""buffers_backend":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.buffersBackend, indent, out)
      out.write(",")
      out.write(""""buffers_backend_fsync":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.buffersBackendFsync, indent, out)
      out.write(",")
      out.write(""""buffers_alloc":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.buffersAlloc, indent, out)
      out.write(",")
      out.write(""""stats_reset":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.statsReset, indent, out)
      out.write("}")
    }
  }
}
