/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_dict

import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgTsDictStructure[Row](val prefix: Option[String], val extract: Row => PgTsDictRow, val merge: (Row, PgTsDictRow) => Row)
  extends Relation[PgTsDictFields, PgTsDictRow, Row]
    with PgTsDictFields[Row] { outer =>

  override val oid = new IdField[PgTsDictId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val dictname = new Field[String, Row](prefix, "dictname", None, Some("name"))(x => extract(x).dictname, (row, value) => merge(row, extract(row).copy(dictname = value)))
  override val dictnamespace = new Field[/* oid */ Long, Row](prefix, "dictnamespace", None, Some("oid"))(x => extract(x).dictnamespace, (row, value) => merge(row, extract(row).copy(dictnamespace = value)))
  override val dictowner = new Field[/* oid */ Long, Row](prefix, "dictowner", None, Some("oid"))(x => extract(x).dictowner, (row, value) => merge(row, extract(row).copy(dictowner = value)))
  override val dicttemplate = new Field[/* oid */ Long, Row](prefix, "dicttemplate", None, Some("oid"))(x => extract(x).dicttemplate, (row, value) => merge(row, extract(row).copy(dicttemplate = value)))
  override val dictinitoption = new OptField[String, Row](prefix, "dictinitoption", None, None)(x => extract(x).dictinitoption, (row, value) => merge(row, extract(row).copy(dictinitoption = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgTsDictRow, merge: (NewRow, PgTsDictRow) => NewRow): PgTsDictStructure[NewRow] =
    new PgTsDictStructure(prefix, extract, merge)
}
