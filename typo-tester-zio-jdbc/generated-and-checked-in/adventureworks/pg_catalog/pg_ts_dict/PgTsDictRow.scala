/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_dict

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgTsDictRow(
  oid: PgTsDictId,
  dictname: String,
  dictnamespace: /* oid */ Long,
  dictowner: /* oid */ Long,
  dicttemplate: /* oid */ Long,
  dictinitoption: Option[String]
)

object PgTsDictRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgTsDictRow] = new JdbcDecoder[PgTsDictRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgTsDictRow) =
      columIndex + 5 ->
        PgTsDictRow(
          oid = PgTsDictId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          dictname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          dictnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          dictowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          dicttemplate = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          dictinitoption = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgTsDictRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgTsDictId.jsonDecoder))
    val dictname = jsonObj.get("dictname").toRight("Missing field 'dictname'").flatMap(_.as(JsonDecoder.string))
    val dictnamespace = jsonObj.get("dictnamespace").toRight("Missing field 'dictnamespace'").flatMap(_.as(JsonDecoder.long))
    val dictowner = jsonObj.get("dictowner").toRight("Missing field 'dictowner'").flatMap(_.as(JsonDecoder.long))
    val dicttemplate = jsonObj.get("dicttemplate").toRight("Missing field 'dicttemplate'").flatMap(_.as(JsonDecoder.long))
    val dictinitoption = jsonObj.get("dictinitoption").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (oid.isRight && dictname.isRight && dictnamespace.isRight && dictowner.isRight && dicttemplate.isRight && dictinitoption.isRight)
      Right(PgTsDictRow(oid = oid.toOption.get, dictname = dictname.toOption.get, dictnamespace = dictnamespace.toOption.get, dictowner = dictowner.toOption.get, dicttemplate = dicttemplate.toOption.get, dictinitoption = dictinitoption.toOption.get))
    else Left(List[Either[String, Any]](oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTsDictRow] = new JsonEncoder[PgTsDictRow] {
    override def unsafeEncode(a: PgTsDictRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgTsDictId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""dictname":""")
      JsonEncoder.string.unsafeEncode(a.dictname, indent, out)
      out.write(",")
      out.write(""""dictnamespace":""")
      JsonEncoder.long.unsafeEncode(a.dictnamespace, indent, out)
      out.write(",")
      out.write(""""dictowner":""")
      JsonEncoder.long.unsafeEncode(a.dictowner, indent, out)
      out.write(",")
      out.write(""""dicttemplate":""")
      JsonEncoder.long.unsafeEncode(a.dicttemplate, indent, out)
      out.write(",")
      out.write(""""dictinitoption":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.dictinitoption, indent, out)
      out.write("}")
    }
  }
}
