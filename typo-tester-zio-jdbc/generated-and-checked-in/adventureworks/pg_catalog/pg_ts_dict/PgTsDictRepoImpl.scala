/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_dict

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgTsDictRepoImpl extends PgTsDictRepo {
  override def delete(oid: PgTsDictId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_ts_dict where "oid" = ${Segment.paramSegment(oid)(PgTsDictId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTsDictFields, PgTsDictRow] = {
    DeleteBuilder("pg_catalog.pg_ts_dict", PgTsDictFields)
  }
  override def insert(unsaved: PgTsDictRow): ZIO[ZConnection, Throwable, PgTsDictRow] = {
    sql"""insert into pg_catalog.pg_ts_dict("oid", "dictname", "dictnamespace", "dictowner", "dicttemplate", "dictinitoption")
          values (${Segment.paramSegment(unsaved.oid)(PgTsDictId.setter)}::oid, ${Segment.paramSegment(unsaved.dictname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.dictnamespace)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.dictowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.dicttemplate)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.dictinitoption)(Setter.optionParamSetter(Setter.stringSetter))})
          returning "oid", "dictname", "dictnamespace", "dictowner", "dicttemplate", "dictinitoption"
       """.insertReturning(PgTsDictRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgTsDictFields, PgTsDictRow] = {
    SelectBuilderSql("pg_catalog.pg_ts_dict", PgTsDictFields, PgTsDictRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTsDictRow] = {
    sql"""select "oid", "dictname", "dictnamespace", "dictowner", "dicttemplate", "dictinitoption" from pg_catalog.pg_ts_dict""".query(PgTsDictRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgTsDictId): ZIO[ZConnection, Throwable, Option[PgTsDictRow]] = {
    sql"""select "oid", "dictname", "dictnamespace", "dictowner", "dicttemplate", "dictinitoption" from pg_catalog.pg_ts_dict where "oid" = ${Segment.paramSegment(oid)(PgTsDictId.setter)}""".query(PgTsDictRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgTsDictId]): ZStream[ZConnection, Throwable, PgTsDictRow] = {
    sql"""select "oid", "dictname", "dictnamespace", "dictowner", "dicttemplate", "dictinitoption" from pg_catalog.pg_ts_dict where "oid" = ANY(${Segment.paramSegment(oids)(PgTsDictId.arraySetter)})""".query(PgTsDictRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(dictname: String, dictnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgTsDictRow]] = {
    sql"""select "dictname", "dictnamespace"
          from pg_catalog.pg_ts_dict
          where "dictname" = ${Segment.paramSegment(dictname)(Setter.stringSetter)} AND "dictnamespace" = ${Segment.paramSegment(dictnamespace)(Setter.longSetter)}
       """.query(PgTsDictRow.jdbcDecoder).selectOne
  }
  override def update(row: PgTsDictRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_ts_dict
          set "dictname" = ${Segment.paramSegment(row.dictname)(Setter.stringSetter)}::name,
              "dictnamespace" = ${Segment.paramSegment(row.dictnamespace)(Setter.longSetter)}::oid,
              "dictowner" = ${Segment.paramSegment(row.dictowner)(Setter.longSetter)}::oid,
              "dicttemplate" = ${Segment.paramSegment(row.dicttemplate)(Setter.longSetter)}::oid,
              "dictinitoption" = ${Segment.paramSegment(row.dictinitoption)(Setter.optionParamSetter(Setter.stringSetter))}
          where "oid" = ${Segment.paramSegment(oid)(PgTsDictId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTsDictFields, PgTsDictRow] = {
    UpdateBuilder("pg_catalog.pg_ts_dict", PgTsDictFields, PgTsDictRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgTsDictRow): ZIO[ZConnection, Throwable, UpdateResult[PgTsDictRow]] = {
    sql"""insert into pg_catalog.pg_ts_dict("oid", "dictname", "dictnamespace", "dictowner", "dicttemplate", "dictinitoption")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgTsDictId.setter)}::oid,
            ${Segment.paramSegment(unsaved.dictname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.dictnamespace)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.dictowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.dicttemplate)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.dictinitoption)(Setter.optionParamSetter(Setter.stringSetter))}
          )
          on conflict ("oid")
          do update set
            "dictname" = EXCLUDED."dictname",
            "dictnamespace" = EXCLUDED."dictnamespace",
            "dictowner" = EXCLUDED."dictowner",
            "dicttemplate" = EXCLUDED."dicttemplate",
            "dictinitoption" = EXCLUDED."dictinitoption"
          returning "oid", "dictname", "dictnamespace", "dictowner", "dicttemplate", "dictinitoption"""".insertReturning(PgTsDictRow.jdbcDecoder)
  }
}
