/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_trigger

import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgTriggerRow(
  oid: PgTriggerId,
  tgrelid: /* oid */ Long,
  tgparentid: /* oid */ Long,
  tgname: String,
  tgfoid: /* oid */ Long,
  tgtype: TypoShort,
  tgenabled: String,
  tgisinternal: Boolean,
  tgconstrrelid: /* oid */ Long,
  tgconstrindid: /* oid */ Long,
  tgconstraint: /* oid */ Long,
  tgdeferrable: Boolean,
  tginitdeferred: Boolean,
  tgnargs: TypoShort,
  tgattr: TypoInt2Vector,
  tgargs: TypoBytea,
  tgqual: Option[TypoPgNodeTree],
  tgoldtable: Option[String],
  tgnewtable: Option[String]
)

object PgTriggerRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgTriggerRow] = new JdbcDecoder[PgTriggerRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgTriggerRow) =
      columIndex + 18 ->
        PgTriggerRow(
          oid = PgTriggerId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          tgrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          tgparentid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          tgname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          tgfoid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          tgtype = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          tgenabled = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 6, rs)._2,
          tgisinternal = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 7, rs)._2,
          tgconstrrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 8, rs)._2,
          tgconstrindid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 9, rs)._2,
          tgconstraint = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 10, rs)._2,
          tgdeferrable = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 11, rs)._2,
          tginitdeferred = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 12, rs)._2,
          tgnargs = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 13, rs)._2,
          tgattr = TypoInt2Vector.jdbcDecoder.unsafeDecode(columIndex + 14, rs)._2,
          tgargs = TypoBytea.jdbcDecoder.unsafeDecode(columIndex + 15, rs)._2,
          tgqual = JdbcDecoder.optionDecoder(TypoPgNodeTree.jdbcDecoder).unsafeDecode(columIndex + 16, rs)._2,
          tgoldtable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 17, rs)._2,
          tgnewtable = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 18, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgTriggerRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgTriggerId.jsonDecoder))
    val tgrelid = jsonObj.get("tgrelid").toRight("Missing field 'tgrelid'").flatMap(_.as(JsonDecoder.long))
    val tgparentid = jsonObj.get("tgparentid").toRight("Missing field 'tgparentid'").flatMap(_.as(JsonDecoder.long))
    val tgname = jsonObj.get("tgname").toRight("Missing field 'tgname'").flatMap(_.as(JsonDecoder.string))
    val tgfoid = jsonObj.get("tgfoid").toRight("Missing field 'tgfoid'").flatMap(_.as(JsonDecoder.long))
    val tgtype = jsonObj.get("tgtype").toRight("Missing field 'tgtype'").flatMap(_.as(TypoShort.jsonDecoder))
    val tgenabled = jsonObj.get("tgenabled").toRight("Missing field 'tgenabled'").flatMap(_.as(JsonDecoder.string))
    val tgisinternal = jsonObj.get("tgisinternal").toRight("Missing field 'tgisinternal'").flatMap(_.as(JsonDecoder.boolean))
    val tgconstrrelid = jsonObj.get("tgconstrrelid").toRight("Missing field 'tgconstrrelid'").flatMap(_.as(JsonDecoder.long))
    val tgconstrindid = jsonObj.get("tgconstrindid").toRight("Missing field 'tgconstrindid'").flatMap(_.as(JsonDecoder.long))
    val tgconstraint = jsonObj.get("tgconstraint").toRight("Missing field 'tgconstraint'").flatMap(_.as(JsonDecoder.long))
    val tgdeferrable = jsonObj.get("tgdeferrable").toRight("Missing field 'tgdeferrable'").flatMap(_.as(JsonDecoder.boolean))
    val tginitdeferred = jsonObj.get("tginitdeferred").toRight("Missing field 'tginitdeferred'").flatMap(_.as(JsonDecoder.boolean))
    val tgnargs = jsonObj.get("tgnargs").toRight("Missing field 'tgnargs'").flatMap(_.as(TypoShort.jsonDecoder))
    val tgattr = jsonObj.get("tgattr").toRight("Missing field 'tgattr'").flatMap(_.as(TypoInt2Vector.jsonDecoder))
    val tgargs = jsonObj.get("tgargs").toRight("Missing field 'tgargs'").flatMap(_.as(TypoBytea.jsonDecoder))
    val tgqual = jsonObj.get("tgqual").fold[Either[String, Option[TypoPgNodeTree]]](Right(None))(_.as(JsonDecoder.option(TypoPgNodeTree.jsonDecoder)))
    val tgoldtable = jsonObj.get("tgoldtable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tgnewtable = jsonObj.get("tgnewtable").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (oid.isRight && tgrelid.isRight && tgparentid.isRight && tgname.isRight && tgfoid.isRight && tgtype.isRight && tgenabled.isRight && tgisinternal.isRight && tgconstrrelid.isRight && tgconstrindid.isRight && tgconstraint.isRight && tgdeferrable.isRight && tginitdeferred.isRight && tgnargs.isRight && tgattr.isRight && tgargs.isRight && tgqual.isRight && tgoldtable.isRight && tgnewtable.isRight)
      Right(PgTriggerRow(oid = oid.toOption.get, tgrelid = tgrelid.toOption.get, tgparentid = tgparentid.toOption.get, tgname = tgname.toOption.get, tgfoid = tgfoid.toOption.get, tgtype = tgtype.toOption.get, tgenabled = tgenabled.toOption.get, tgisinternal = tgisinternal.toOption.get, tgconstrrelid = tgconstrrelid.toOption.get, tgconstrindid = tgconstrindid.toOption.get, tgconstraint = tgconstraint.toOption.get, tgdeferrable = tgdeferrable.toOption.get, tginitdeferred = tginitdeferred.toOption.get, tgnargs = tgnargs.toOption.get, tgattr = tgattr.toOption.get, tgargs = tgargs.toOption.get, tgqual = tgqual.toOption.get, tgoldtable = tgoldtable.toOption.get, tgnewtable = tgnewtable.toOption.get))
    else Left(List[Either[String, Any]](oid, tgrelid, tgparentid, tgname, tgfoid, tgtype, tgenabled, tgisinternal, tgconstrrelid, tgconstrindid, tgconstraint, tgdeferrable, tginitdeferred, tgnargs, tgattr, tgargs, tgqual, tgoldtable, tgnewtable).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTriggerRow] = new JsonEncoder[PgTriggerRow] {
    override def unsafeEncode(a: PgTriggerRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgTriggerId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""tgrelid":""")
      JsonEncoder.long.unsafeEncode(a.tgrelid, indent, out)
      out.write(",")
      out.write(""""tgparentid":""")
      JsonEncoder.long.unsafeEncode(a.tgparentid, indent, out)
      out.write(",")
      out.write(""""tgname":""")
      JsonEncoder.string.unsafeEncode(a.tgname, indent, out)
      out.write(",")
      out.write(""""tgfoid":""")
      JsonEncoder.long.unsafeEncode(a.tgfoid, indent, out)
      out.write(",")
      out.write(""""tgtype":""")
      TypoShort.jsonEncoder.unsafeEncode(a.tgtype, indent, out)
      out.write(",")
      out.write(""""tgenabled":""")
      JsonEncoder.string.unsafeEncode(a.tgenabled, indent, out)
      out.write(",")
      out.write(""""tgisinternal":""")
      JsonEncoder.boolean.unsafeEncode(a.tgisinternal, indent, out)
      out.write(",")
      out.write(""""tgconstrrelid":""")
      JsonEncoder.long.unsafeEncode(a.tgconstrrelid, indent, out)
      out.write(",")
      out.write(""""tgconstrindid":""")
      JsonEncoder.long.unsafeEncode(a.tgconstrindid, indent, out)
      out.write(",")
      out.write(""""tgconstraint":""")
      JsonEncoder.long.unsafeEncode(a.tgconstraint, indent, out)
      out.write(",")
      out.write(""""tgdeferrable":""")
      JsonEncoder.boolean.unsafeEncode(a.tgdeferrable, indent, out)
      out.write(",")
      out.write(""""tginitdeferred":""")
      JsonEncoder.boolean.unsafeEncode(a.tginitdeferred, indent, out)
      out.write(",")
      out.write(""""tgnargs":""")
      TypoShort.jsonEncoder.unsafeEncode(a.tgnargs, indent, out)
      out.write(",")
      out.write(""""tgattr":""")
      TypoInt2Vector.jsonEncoder.unsafeEncode(a.tgattr, indent, out)
      out.write(",")
      out.write(""""tgargs":""")
      TypoBytea.jsonEncoder.unsafeEncode(a.tgargs, indent, out)
      out.write(",")
      out.write(""""tgqual":""")
      JsonEncoder.option(TypoPgNodeTree.jsonEncoder).unsafeEncode(a.tgqual, indent, out)
      out.write(",")
      out.write(""""tgoldtable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tgoldtable, indent, out)
      out.write(",")
      out.write(""""tgnewtable":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tgnewtable, indent, out)
      out.write("}")
    }
  }
}
