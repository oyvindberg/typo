/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_trigger

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgTriggerRepoImpl extends PgTriggerRepo {
  override def delete(oid: PgTriggerId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_trigger where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTriggerFields, PgTriggerRow] = {
    DeleteBuilder("pg_catalog.pg_trigger", PgTriggerFields)
  }
  override def insert(unsaved: PgTriggerRow): ZIO[ZConnection, Throwable, PgTriggerRow] = {
    sql"""insert into pg_catalog.pg_trigger("oid", "tgrelid", "tgparentid", "tgname", "tgfoid", "tgtype", "tgenabled", "tgisinternal", "tgconstrrelid", "tgconstrindid", "tgconstraint", "tgdeferrable", "tginitdeferred", "tgnargs", "tgattr", "tgargs", "tgqual", "tgoldtable", "tgnewtable")
          values (???::oid, ???::oid, ???::oid, ???::name, ???::oid, ???::int2, ???::char, ???, ???::oid, ???::oid, ???::oid, ???, ???, ???::int2, ???::int2vector, ???::bytea, ???::pg_node_tree, ???::name, ???::name)
          returning "oid", "tgrelid", "tgparentid", "tgname", "tgfoid", "tgtype", "tgenabled", "tgisinternal", "tgconstrrelid", "tgconstrindid", "tgconstraint", "tgdeferrable", "tginitdeferred", "tgnargs", "tgattr", "tgargs", "tgqual", "tgoldtable", "tgnewtable"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgTriggerFields, PgTriggerRow] = {
    SelectBuilderSql("pg_catalog.pg_trigger", PgTriggerFields, PgTriggerRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTriggerRow] = {
    sql"""select "oid", "tgrelid", "tgparentid", "tgname", "tgfoid", "tgtype", "tgenabled", "tgisinternal", "tgconstrrelid", "tgconstrindid", "tgconstraint", "tgdeferrable", "tginitdeferred", "tgnargs", "tgattr", "tgargs", "tgqual", "tgoldtable", "tgnewtable" from pg_catalog.pg_trigger""".query[PgTriggerRow].selectStream
  }
  override def selectById(oid: PgTriggerId): ZIO[ZConnection, Throwable, Option[PgTriggerRow]] = {
    sql"""select "oid", "tgrelid", "tgparentid", "tgname", "tgfoid", "tgtype", "tgenabled", "tgisinternal", "tgconstrrelid", "tgconstrindid", "tgconstraint", "tgdeferrable", "tginitdeferred", "tgnargs", "tgattr", "tgargs", "tgqual", "tgoldtable", "tgnewtable" from pg_catalog.pg_trigger where "oid" = ???""".query[PgTriggerRow].selectOne
  }
  override def selectByIds(oids: Array[PgTriggerId]): ZStream[ZConnection, Throwable, PgTriggerRow] = {
    sql"""select "oid", "tgrelid", "tgparentid", "tgname", "tgfoid", "tgtype", "tgenabled", "tgisinternal", "tgconstrrelid", "tgconstrindid", "tgconstraint", "tgdeferrable", "tginitdeferred", "tgnargs", "tgattr", "tgargs", "tgqual", "tgoldtable", "tgnewtable" from pg_catalog.pg_trigger where "oid" = ANY(${oids})""".query[PgTriggerRow].selectStream
  }
  override def selectByUnique(tgrelid: /* oid */ Long, tgname: String): ZIO[ZConnection, Throwable, Option[PgTriggerRow]] = {
    sql"""select "tgrelid", "tgname"
          from pg_catalog.pg_trigger
          where "tgrelid" = ??? AND "tgname" = ???
       """.query[PgTriggerRow].selectOne
  }
  override def update(row: PgTriggerRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_trigger
          set "tgrelid" = ???::oid,
              "tgparentid" = ???::oid,
              "tgname" = ???::name,
              "tgfoid" = ???::oid,
              "tgtype" = ???::int2,
              "tgenabled" = ???::char,
              "tgisinternal" = ???,
              "tgconstrrelid" = ???::oid,
              "tgconstrindid" = ???::oid,
              "tgconstraint" = ???::oid,
              "tgdeferrable" = ???,
              "tginitdeferred" = ???,
              "tgnargs" = ???::int2,
              "tgattr" = ???::int2vector,
              "tgargs" = ???::bytea,
              "tgqual" = ???::pg_node_tree,
              "tgoldtable" = ???::name,
              "tgnewtable" = ???::name
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTriggerFields, PgTriggerRow] = {
    UpdateBuilder("pg_catalog.pg_trigger", PgTriggerFields, PgTriggerRow.read)
  }
  override def upsert(unsaved: PgTriggerRow): ZIO[ZConnection, Throwable, PgTriggerRow] = {
    sql"""insert into pg_catalog.pg_trigger("oid", "tgrelid", "tgparentid", "tgname", "tgfoid", "tgtype", "tgenabled", "tgisinternal", "tgconstrrelid", "tgconstrindid", "tgconstraint", "tgdeferrable", "tginitdeferred", "tgnargs", "tgattr", "tgargs", "tgqual", "tgoldtable", "tgnewtable")
          values (
            ???::oid,
            ???::oid,
            ???::oid,
            ???::name,
            ???::oid,
            ???::int2,
            ???::char,
            ???,
            ???::oid,
            ???::oid,
            ???::oid,
            ???,
            ???,
            ???::int2,
            ???::int2vector,
            ???::bytea,
            ???::pg_node_tree,
            ???::name,
            ???::name
          )
          on conflict ("oid")
          do update set
            "tgrelid" = EXCLUDED."tgrelid",
            "tgparentid" = EXCLUDED."tgparentid",
            "tgname" = EXCLUDED."tgname",
            "tgfoid" = EXCLUDED."tgfoid",
            "tgtype" = EXCLUDED."tgtype",
            "tgenabled" = EXCLUDED."tgenabled",
            "tgisinternal" = EXCLUDED."tgisinternal",
            "tgconstrrelid" = EXCLUDED."tgconstrrelid",
            "tgconstrindid" = EXCLUDED."tgconstrindid",
            "tgconstraint" = EXCLUDED."tgconstraint",
            "tgdeferrable" = EXCLUDED."tgdeferrable",
            "tginitdeferred" = EXCLUDED."tginitdeferred",
            "tgnargs" = EXCLUDED."tgnargs",
            "tgattr" = EXCLUDED."tgattr",
            "tgargs" = EXCLUDED."tgargs",
            "tgqual" = EXCLUDED."tgqual",
            "tgoldtable" = EXCLUDED."tgoldtable",
            "tgnewtable" = EXCLUDED."tgnewtable"
          returning "oid", "tgrelid", "tgparentid", "tgname", "tgfoid", "tgtype", "tgenabled", "tgisinternal", "tgconstrrelid", "tgconstrindid", "tgconstraint", "tgdeferrable", "tginitdeferred", "tgnargs", "tgattr", "tgargs", "tgqual", "tgoldtable", "tgnewtable"
       """.query(???).unique
  }
}
