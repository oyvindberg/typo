/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_timezone_names

import adventureworks.customtypes.TypoInterval
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgTimezoneNamesViewRow(
  name: /* nullability unknown */ Option[String],
  abbrev: /* nullability unknown */ Option[String],
  utcOffset: /* nullability unknown */ Option[TypoInterval],
  isDst: /* nullability unknown */ Option[Boolean]
)

object PgTimezoneNamesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgTimezoneNamesViewRow] = new JdbcDecoder[PgTimezoneNamesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgTimezoneNamesViewRow) =
      columIndex + 3 ->
        PgTimezoneNamesViewRow(
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          abbrev = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          utcOffset = JdbcDecoder.optionDecoder(TypoInterval.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          isDst = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgTimezoneNamesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val abbrev = jsonObj.get("abbrev").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val utcOffset = jsonObj.get("utc_offset").fold[Either[String, Option[TypoInterval]]](Right(None))(_.as(JsonDecoder.option(TypoInterval.jsonDecoder)))
    val isDst = jsonObj.get("is_dst").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    if (name.isRight && abbrev.isRight && utcOffset.isRight && isDst.isRight)
      Right(PgTimezoneNamesViewRow(name = name.toOption.get, abbrev = abbrev.toOption.get, utcOffset = utcOffset.toOption.get, isDst = isDst.toOption.get))
    else Left(List[Either[String, Any]](name, abbrev, utcOffset, isDst).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTimezoneNamesViewRow] = new JsonEncoder[PgTimezoneNamesViewRow] {
    override def unsafeEncode(a: PgTimezoneNamesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""abbrev":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.abbrev, indent, out)
      out.write(",")
      out.write(""""utc_offset":""")
      JsonEncoder.option(TypoInterval.jsonEncoder).unsafeEncode(a.utcOffset, indent, out)
      out.write(",")
      out.write(""""is_dst":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.isDst, indent, out)
      out.write("}")
    }
  }
}
