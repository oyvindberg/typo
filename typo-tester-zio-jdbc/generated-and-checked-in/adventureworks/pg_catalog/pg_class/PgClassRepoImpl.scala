/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_class

import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoXid
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgClassRepoImpl extends PgClassRepo {
  override def delete(oid: PgClassId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_class where "oid" = ${Segment.paramSegment(oid)(PgClassId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgClassFields, PgClassRow] = {
    DeleteBuilder("pg_catalog.pg_class", PgClassFields)
  }
  override def insert(unsaved: PgClassRow): ZIO[ZConnection, Throwable, PgClassRow] = {
    sql"""insert into pg_catalog.pg_class("oid", "relname", "relnamespace", "reltype", "reloftype", "relowner", "relam", "relfilenode", "reltablespace", "relpages", "reltuples", "relallvisible", "reltoastrelid", "relhasindex", "relisshared", "relpersistence", "relkind", "relnatts", "relchecks", "relhasrules", "relhastriggers", "relhassubclass", "relrowsecurity", "relforcerowsecurity", "relispopulated", "relreplident", "relispartition", "relrewrite", "relfrozenxid", "relminmxid", "relacl", "reloptions", "relpartbound")
          values (${Segment.paramSegment(unsaved.oid)(PgClassId.setter)}::oid, ${Segment.paramSegment(unsaved.relname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.relnamespace)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.reltype)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.reloftype)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.relowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.relam)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.relfilenode)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.reltablespace)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.relpages)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.reltuples)(Setter.floatSetter)}::float4, ${Segment.paramSegment(unsaved.relallvisible)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.reltoastrelid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.relhasindex)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.relisshared)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.relpersistence)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.relkind)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.relnatts)(TypoShort.setter)}::int2, ${Segment.paramSegment(unsaved.relchecks)(TypoShort.setter)}::int2, ${Segment.paramSegment(unsaved.relhasrules)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.relhastriggers)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.relhassubclass)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.relrowsecurity)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.relforcerowsecurity)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.relispopulated)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.relreplident)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.relispartition)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.relrewrite)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.relfrozenxid)(TypoXid.setter)}::xid, ${Segment.paramSegment(unsaved.relminmxid)(TypoXid.setter)}::xid, ${Segment.paramSegment(unsaved.relacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem, ${Segment.paramSegment(unsaved.reloptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text, ${Segment.paramSegment(unsaved.relpartbound)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree)
          returning "oid", "relname", "relnamespace", "reltype", "reloftype", "relowner", "relam", "relfilenode", "reltablespace", "relpages", "reltuples", "relallvisible", "reltoastrelid", "relhasindex", "relisshared", "relpersistence", "relkind", "relnatts", "relchecks", "relhasrules", "relhastriggers", "relhassubclass", "relrowsecurity", "relforcerowsecurity", "relispopulated", "relreplident", "relispartition", "relrewrite", "relfrozenxid", "relminmxid", "relacl", "reloptions", "relpartbound"
       """.insertReturning(PgClassRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgClassFields, PgClassRow] = {
    SelectBuilderSql("pg_catalog.pg_class", PgClassFields, PgClassRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgClassRow] = {
    sql"""select "oid", "relname", "relnamespace", "reltype", "reloftype", "relowner", "relam", "relfilenode", "reltablespace", "relpages", "reltuples", "relallvisible", "reltoastrelid", "relhasindex", "relisshared", "relpersistence", "relkind", "relnatts", "relchecks", "relhasrules", "relhastriggers", "relhassubclass", "relrowsecurity", "relforcerowsecurity", "relispopulated", "relreplident", "relispartition", "relrewrite", "relfrozenxid", "relminmxid", "relacl", "reloptions", "relpartbound" from pg_catalog.pg_class""".query(PgClassRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgClassId): ZIO[ZConnection, Throwable, Option[PgClassRow]] = {
    sql"""select "oid", "relname", "relnamespace", "reltype", "reloftype", "relowner", "relam", "relfilenode", "reltablespace", "relpages", "reltuples", "relallvisible", "reltoastrelid", "relhasindex", "relisshared", "relpersistence", "relkind", "relnatts", "relchecks", "relhasrules", "relhastriggers", "relhassubclass", "relrowsecurity", "relforcerowsecurity", "relispopulated", "relreplident", "relispartition", "relrewrite", "relfrozenxid", "relminmxid", "relacl", "reloptions", "relpartbound" from pg_catalog.pg_class where "oid" = ${Segment.paramSegment(oid)(PgClassId.setter)}""".query(PgClassRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgClassId]): ZStream[ZConnection, Throwable, PgClassRow] = {
    sql"""select "oid", "relname", "relnamespace", "reltype", "reloftype", "relowner", "relam", "relfilenode", "reltablespace", "relpages", "reltuples", "relallvisible", "reltoastrelid", "relhasindex", "relisshared", "relpersistence", "relkind", "relnatts", "relchecks", "relhasrules", "relhastriggers", "relhassubclass", "relrowsecurity", "relforcerowsecurity", "relispopulated", "relreplident", "relispartition", "relrewrite", "relfrozenxid", "relminmxid", "relacl", "reloptions", "relpartbound" from pg_catalog.pg_class where "oid" = ANY(${Segment.paramSegment(oids)(PgClassId.arraySetter)})""".query(PgClassRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(relname: String, relnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgClassRow]] = {
    sql"""select "relname", "relnamespace"
          from pg_catalog.pg_class
          where "relname" = ${Segment.paramSegment(relname)(Setter.stringSetter)} AND "relnamespace" = ${Segment.paramSegment(relnamespace)(Setter.longSetter)}
       """.query(PgClassRow.jdbcDecoder).selectOne
  }
  override def update(row: PgClassRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_class
          set "relname" = ${Segment.paramSegment(row.relname)(Setter.stringSetter)}::name,
              "relnamespace" = ${Segment.paramSegment(row.relnamespace)(Setter.longSetter)}::oid,
              "reltype" = ${Segment.paramSegment(row.reltype)(Setter.longSetter)}::oid,
              "reloftype" = ${Segment.paramSegment(row.reloftype)(Setter.longSetter)}::oid,
              "relowner" = ${Segment.paramSegment(row.relowner)(Setter.longSetter)}::oid,
              "relam" = ${Segment.paramSegment(row.relam)(Setter.longSetter)}::oid,
              "relfilenode" = ${Segment.paramSegment(row.relfilenode)(Setter.longSetter)}::oid,
              "reltablespace" = ${Segment.paramSegment(row.reltablespace)(Setter.longSetter)}::oid,
              "relpages" = ${Segment.paramSegment(row.relpages)(Setter.intSetter)}::int4,
              "reltuples" = ${Segment.paramSegment(row.reltuples)(Setter.floatSetter)}::float4,
              "relallvisible" = ${Segment.paramSegment(row.relallvisible)(Setter.intSetter)}::int4,
              "reltoastrelid" = ${Segment.paramSegment(row.reltoastrelid)(Setter.longSetter)}::oid,
              "relhasindex" = ${Segment.paramSegment(row.relhasindex)(Setter.booleanSetter)},
              "relisshared" = ${Segment.paramSegment(row.relisshared)(Setter.booleanSetter)},
              "relpersistence" = ${Segment.paramSegment(row.relpersistence)(Setter.stringSetter)}::char,
              "relkind" = ${Segment.paramSegment(row.relkind)(Setter.stringSetter)}::char,
              "relnatts" = ${Segment.paramSegment(row.relnatts)(TypoShort.setter)}::int2,
              "relchecks" = ${Segment.paramSegment(row.relchecks)(TypoShort.setter)}::int2,
              "relhasrules" = ${Segment.paramSegment(row.relhasrules)(Setter.booleanSetter)},
              "relhastriggers" = ${Segment.paramSegment(row.relhastriggers)(Setter.booleanSetter)},
              "relhassubclass" = ${Segment.paramSegment(row.relhassubclass)(Setter.booleanSetter)},
              "relrowsecurity" = ${Segment.paramSegment(row.relrowsecurity)(Setter.booleanSetter)},
              "relforcerowsecurity" = ${Segment.paramSegment(row.relforcerowsecurity)(Setter.booleanSetter)},
              "relispopulated" = ${Segment.paramSegment(row.relispopulated)(Setter.booleanSetter)},
              "relreplident" = ${Segment.paramSegment(row.relreplident)(Setter.stringSetter)}::char,
              "relispartition" = ${Segment.paramSegment(row.relispartition)(Setter.booleanSetter)},
              "relrewrite" = ${Segment.paramSegment(row.relrewrite)(Setter.longSetter)}::oid,
              "relfrozenxid" = ${Segment.paramSegment(row.relfrozenxid)(TypoXid.setter)}::xid,
              "relminmxid" = ${Segment.paramSegment(row.relminmxid)(TypoXid.setter)}::xid,
              "relacl" = ${Segment.paramSegment(row.relacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem,
              "reloptions" = ${Segment.paramSegment(row.reloptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text,
              "relpartbound" = ${Segment.paramSegment(row.relpartbound)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree
          where "oid" = ${Segment.paramSegment(oid)(PgClassId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgClassFields, PgClassRow] = {
    UpdateBuilder("pg_catalog.pg_class", PgClassFields, PgClassRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgClassRow): ZIO[ZConnection, Throwable, UpdateResult[PgClassRow]] = {
    sql"""insert into pg_catalog.pg_class("oid", "relname", "relnamespace", "reltype", "reloftype", "relowner", "relam", "relfilenode", "reltablespace", "relpages", "reltuples", "relallvisible", "reltoastrelid", "relhasindex", "relisshared", "relpersistence", "relkind", "relnatts", "relchecks", "relhasrules", "relhastriggers", "relhassubclass", "relrowsecurity", "relforcerowsecurity", "relispopulated", "relreplident", "relispartition", "relrewrite", "relfrozenxid", "relminmxid", "relacl", "reloptions", "relpartbound")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgClassId.setter)}::oid,
            ${Segment.paramSegment(unsaved.relname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.relnamespace)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.reltype)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.reloftype)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.relowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.relam)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.relfilenode)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.reltablespace)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.relpages)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.reltuples)(Setter.floatSetter)}::float4,
            ${Segment.paramSegment(unsaved.relallvisible)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.reltoastrelid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.relhasindex)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.relisshared)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.relpersistence)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.relkind)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.relnatts)(TypoShort.setter)}::int2,
            ${Segment.paramSegment(unsaved.relchecks)(TypoShort.setter)}::int2,
            ${Segment.paramSegment(unsaved.relhasrules)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.relhastriggers)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.relhassubclass)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.relrowsecurity)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.relforcerowsecurity)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.relispopulated)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.relreplident)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.relispartition)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.relrewrite)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.relfrozenxid)(TypoXid.setter)}::xid,
            ${Segment.paramSegment(unsaved.relminmxid)(TypoXid.setter)}::xid,
            ${Segment.paramSegment(unsaved.relacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem,
            ${Segment.paramSegment(unsaved.reloptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text,
            ${Segment.paramSegment(unsaved.relpartbound)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree
          )
          on conflict ("oid")
          do update set
            "relname" = EXCLUDED."relname",
            "relnamespace" = EXCLUDED."relnamespace",
            "reltype" = EXCLUDED."reltype",
            "reloftype" = EXCLUDED."reloftype",
            "relowner" = EXCLUDED."relowner",
            "relam" = EXCLUDED."relam",
            "relfilenode" = EXCLUDED."relfilenode",
            "reltablespace" = EXCLUDED."reltablespace",
            "relpages" = EXCLUDED."relpages",
            "reltuples" = EXCLUDED."reltuples",
            "relallvisible" = EXCLUDED."relallvisible",
            "reltoastrelid" = EXCLUDED."reltoastrelid",
            "relhasindex" = EXCLUDED."relhasindex",
            "relisshared" = EXCLUDED."relisshared",
            "relpersistence" = EXCLUDED."relpersistence",
            "relkind" = EXCLUDED."relkind",
            "relnatts" = EXCLUDED."relnatts",
            "relchecks" = EXCLUDED."relchecks",
            "relhasrules" = EXCLUDED."relhasrules",
            "relhastriggers" = EXCLUDED."relhastriggers",
            "relhassubclass" = EXCLUDED."relhassubclass",
            "relrowsecurity" = EXCLUDED."relrowsecurity",
            "relforcerowsecurity" = EXCLUDED."relforcerowsecurity",
            "relispopulated" = EXCLUDED."relispopulated",
            "relreplident" = EXCLUDED."relreplident",
            "relispartition" = EXCLUDED."relispartition",
            "relrewrite" = EXCLUDED."relrewrite",
            "relfrozenxid" = EXCLUDED."relfrozenxid",
            "relminmxid" = EXCLUDED."relminmxid",
            "relacl" = EXCLUDED."relacl",
            "reloptions" = EXCLUDED."reloptions",
            "relpartbound" = EXCLUDED."relpartbound"
          returning "oid", "relname", "relnamespace", "reltype", "reloftype", "relowner", "relam", "relfilenode", "reltablespace", "relpages", "reltuples", "relallvisible", "reltoastrelid", "relhasindex", "relisshared", "relpersistence", "relkind", "relnatts", "relchecks", "relhasrules", "relhastriggers", "relhassubclass", "relrowsecurity", "relforcerowsecurity", "relispopulated", "relreplident", "relispartition", "relrewrite", "relfrozenxid", "relminmxid", "relacl", "reloptions", "relpartbound"""".insertReturning(PgClassRow.jdbcDecoder)
  }
}
