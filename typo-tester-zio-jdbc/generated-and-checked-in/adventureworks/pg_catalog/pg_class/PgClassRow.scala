/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_class

import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoXid
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgClassRow(
  oid: PgClassId,
  relname: String,
  relnamespace: /* oid */ Long,
  reltype: /* oid */ Long,
  reloftype: /* oid */ Long,
  relowner: /* oid */ Long,
  relam: /* oid */ Long,
  relfilenode: /* oid */ Long,
  reltablespace: /* oid */ Long,
  relpages: Int,
  reltuples: Float,
  relallvisible: Int,
  reltoastrelid: /* oid */ Long,
  relhasindex: Boolean,
  relisshared: Boolean,
  relpersistence: String,
  relkind: String,
  relnatts: TypoShort,
  relchecks: TypoShort,
  relhasrules: Boolean,
  relhastriggers: Boolean,
  relhassubclass: Boolean,
  relrowsecurity: Boolean,
  relforcerowsecurity: Boolean,
  relispopulated: Boolean,
  relreplident: String,
  relispartition: Boolean,
  relrewrite: /* oid */ Long,
  relfrozenxid: TypoXid,
  relminmxid: TypoXid,
  relacl: Option[Array[TypoAclItem]],
  reloptions: Option[Array[String]],
  relpartbound: Option[TypoPgNodeTree]
)

object PgClassRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgClassRow] = new JdbcDecoder[PgClassRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgClassRow) =
      columIndex + 32 ->
        PgClassRow(
          oid = PgClassId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          relname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          relnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          reltype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          reloftype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          relowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 5, rs)._2,
          relam = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 6, rs)._2,
          relfilenode = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 7, rs)._2,
          reltablespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 8, rs)._2,
          relpages = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 9, rs)._2,
          reltuples = JdbcDecoder.floatDecoder.unsafeDecode(columIndex + 10, rs)._2,
          relallvisible = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 11, rs)._2,
          reltoastrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 12, rs)._2,
          relhasindex = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 13, rs)._2,
          relisshared = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 14, rs)._2,
          relpersistence = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 15, rs)._2,
          relkind = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 16, rs)._2,
          relnatts = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 17, rs)._2,
          relchecks = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 18, rs)._2,
          relhasrules = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 19, rs)._2,
          relhastriggers = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 20, rs)._2,
          relhassubclass = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 21, rs)._2,
          relrowsecurity = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 22, rs)._2,
          relforcerowsecurity = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 23, rs)._2,
          relispopulated = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 24, rs)._2,
          relreplident = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 25, rs)._2,
          relispartition = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 26, rs)._2,
          relrewrite = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 27, rs)._2,
          relfrozenxid = TypoXid.jdbcDecoder.unsafeDecode(columIndex + 28, rs)._2,
          relminmxid = TypoXid.jdbcDecoder.unsafeDecode(columIndex + 29, rs)._2,
          relacl = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoAclItem]]).unsafeDecode(columIndex + 30, rs)._2,
          reloptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 31, rs)._2,
          relpartbound = JdbcDecoder.optionDecoder(TypoPgNodeTree.jdbcDecoder).unsafeDecode(columIndex + 32, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgClassRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgClassId.jsonDecoder))
    val relname = jsonObj.get("relname").toRight("Missing field 'relname'").flatMap(_.as(JsonDecoder.string))
    val relnamespace = jsonObj.get("relnamespace").toRight("Missing field 'relnamespace'").flatMap(_.as(JsonDecoder.long))
    val reltype = jsonObj.get("reltype").toRight("Missing field 'reltype'").flatMap(_.as(JsonDecoder.long))
    val reloftype = jsonObj.get("reloftype").toRight("Missing field 'reloftype'").flatMap(_.as(JsonDecoder.long))
    val relowner = jsonObj.get("relowner").toRight("Missing field 'relowner'").flatMap(_.as(JsonDecoder.long))
    val relam = jsonObj.get("relam").toRight("Missing field 'relam'").flatMap(_.as(JsonDecoder.long))
    val relfilenode = jsonObj.get("relfilenode").toRight("Missing field 'relfilenode'").flatMap(_.as(JsonDecoder.long))
    val reltablespace = jsonObj.get("reltablespace").toRight("Missing field 'reltablespace'").flatMap(_.as(JsonDecoder.long))
    val relpages = jsonObj.get("relpages").toRight("Missing field 'relpages'").flatMap(_.as(JsonDecoder.int))
    val reltuples = jsonObj.get("reltuples").toRight("Missing field 'reltuples'").flatMap(_.as(JsonDecoder.float))
    val relallvisible = jsonObj.get("relallvisible").toRight("Missing field 'relallvisible'").flatMap(_.as(JsonDecoder.int))
    val reltoastrelid = jsonObj.get("reltoastrelid").toRight("Missing field 'reltoastrelid'").flatMap(_.as(JsonDecoder.long))
    val relhasindex = jsonObj.get("relhasindex").toRight("Missing field 'relhasindex'").flatMap(_.as(JsonDecoder.boolean))
    val relisshared = jsonObj.get("relisshared").toRight("Missing field 'relisshared'").flatMap(_.as(JsonDecoder.boolean))
    val relpersistence = jsonObj.get("relpersistence").toRight("Missing field 'relpersistence'").flatMap(_.as(JsonDecoder.string))
    val relkind = jsonObj.get("relkind").toRight("Missing field 'relkind'").flatMap(_.as(JsonDecoder.string))
    val relnatts = jsonObj.get("relnatts").toRight("Missing field 'relnatts'").flatMap(_.as(TypoShort.jsonDecoder))
    val relchecks = jsonObj.get("relchecks").toRight("Missing field 'relchecks'").flatMap(_.as(TypoShort.jsonDecoder))
    val relhasrules = jsonObj.get("relhasrules").toRight("Missing field 'relhasrules'").flatMap(_.as(JsonDecoder.boolean))
    val relhastriggers = jsonObj.get("relhastriggers").toRight("Missing field 'relhastriggers'").flatMap(_.as(JsonDecoder.boolean))
    val relhassubclass = jsonObj.get("relhassubclass").toRight("Missing field 'relhassubclass'").flatMap(_.as(JsonDecoder.boolean))
    val relrowsecurity = jsonObj.get("relrowsecurity").toRight("Missing field 'relrowsecurity'").flatMap(_.as(JsonDecoder.boolean))
    val relforcerowsecurity = jsonObj.get("relforcerowsecurity").toRight("Missing field 'relforcerowsecurity'").flatMap(_.as(JsonDecoder.boolean))
    val relispopulated = jsonObj.get("relispopulated").toRight("Missing field 'relispopulated'").flatMap(_.as(JsonDecoder.boolean))
    val relreplident = jsonObj.get("relreplident").toRight("Missing field 'relreplident'").flatMap(_.as(JsonDecoder.string))
    val relispartition = jsonObj.get("relispartition").toRight("Missing field 'relispartition'").flatMap(_.as(JsonDecoder.boolean))
    val relrewrite = jsonObj.get("relrewrite").toRight("Missing field 'relrewrite'").flatMap(_.as(JsonDecoder.long))
    val relfrozenxid = jsonObj.get("relfrozenxid").toRight("Missing field 'relfrozenxid'").flatMap(_.as(TypoXid.jsonDecoder))
    val relminmxid = jsonObj.get("relminmxid").toRight("Missing field 'relminmxid'").flatMap(_.as(TypoXid.jsonDecoder))
    val relacl = jsonObj.get("relacl").fold[Either[String, Option[Array[TypoAclItem]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly))))
    val reloptions = jsonObj.get("reloptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val relpartbound = jsonObj.get("relpartbound").fold[Either[String, Option[TypoPgNodeTree]]](Right(None))(_.as(JsonDecoder.option(TypoPgNodeTree.jsonDecoder)))
    if (oid.isRight && relname.isRight && relnamespace.isRight && reltype.isRight && reloftype.isRight && relowner.isRight && relam.isRight && relfilenode.isRight && reltablespace.isRight && relpages.isRight && reltuples.isRight && relallvisible.isRight && reltoastrelid.isRight && relhasindex.isRight && relisshared.isRight && relpersistence.isRight && relkind.isRight && relnatts.isRight && relchecks.isRight && relhasrules.isRight && relhastriggers.isRight && relhassubclass.isRight && relrowsecurity.isRight && relforcerowsecurity.isRight && relispopulated.isRight && relreplident.isRight && relispartition.isRight && relrewrite.isRight && relfrozenxid.isRight && relminmxid.isRight && relacl.isRight && reloptions.isRight && relpartbound.isRight)
      Right(PgClassRow(oid = oid.toOption.get, relname = relname.toOption.get, relnamespace = relnamespace.toOption.get, reltype = reltype.toOption.get, reloftype = reloftype.toOption.get, relowner = relowner.toOption.get, relam = relam.toOption.get, relfilenode = relfilenode.toOption.get, reltablespace = reltablespace.toOption.get, relpages = relpages.toOption.get, reltuples = reltuples.toOption.get, relallvisible = relallvisible.toOption.get, reltoastrelid = reltoastrelid.toOption.get, relhasindex = relhasindex.toOption.get, relisshared = relisshared.toOption.get, relpersistence = relpersistence.toOption.get, relkind = relkind.toOption.get, relnatts = relnatts.toOption.get, relchecks = relchecks.toOption.get, relhasrules = relhasrules.toOption.get, relhastriggers = relhastriggers.toOption.get, relhassubclass = relhassubclass.toOption.get, relrowsecurity = relrowsecurity.toOption.get, relforcerowsecurity = relforcerowsecurity.toOption.get, relispopulated = relispopulated.toOption.get, relreplident = relreplident.toOption.get, relispartition = relispartition.toOption.get, relrewrite = relrewrite.toOption.get, relfrozenxid = relfrozenxid.toOption.get, relminmxid = relminmxid.toOption.get, relacl = relacl.toOption.get, reloptions = reloptions.toOption.get, relpartbound = relpartbound.toOption.get))
    else Left(List[Either[String, Any]](oid, relname, relnamespace, reltype, reloftype, relowner, relam, relfilenode, reltablespace, relpages, reltuples, relallvisible, reltoastrelid, relhasindex, relisshared, relpersistence, relkind, relnatts, relchecks, relhasrules, relhastriggers, relhassubclass, relrowsecurity, relforcerowsecurity, relispopulated, relreplident, relispartition, relrewrite, relfrozenxid, relminmxid, relacl, reloptions, relpartbound).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgClassRow] = new JsonEncoder[PgClassRow] {
    override def unsafeEncode(a: PgClassRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgClassId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""relname":""")
      JsonEncoder.string.unsafeEncode(a.relname, indent, out)
      out.write(",")
      out.write(""""relnamespace":""")
      JsonEncoder.long.unsafeEncode(a.relnamespace, indent, out)
      out.write(",")
      out.write(""""reltype":""")
      JsonEncoder.long.unsafeEncode(a.reltype, indent, out)
      out.write(",")
      out.write(""""reloftype":""")
      JsonEncoder.long.unsafeEncode(a.reloftype, indent, out)
      out.write(",")
      out.write(""""relowner":""")
      JsonEncoder.long.unsafeEncode(a.relowner, indent, out)
      out.write(",")
      out.write(""""relam":""")
      JsonEncoder.long.unsafeEncode(a.relam, indent, out)
      out.write(",")
      out.write(""""relfilenode":""")
      JsonEncoder.long.unsafeEncode(a.relfilenode, indent, out)
      out.write(",")
      out.write(""""reltablespace":""")
      JsonEncoder.long.unsafeEncode(a.reltablespace, indent, out)
      out.write(",")
      out.write(""""relpages":""")
      JsonEncoder.int.unsafeEncode(a.relpages, indent, out)
      out.write(",")
      out.write(""""reltuples":""")
      JsonEncoder.float.unsafeEncode(a.reltuples, indent, out)
      out.write(",")
      out.write(""""relallvisible":""")
      JsonEncoder.int.unsafeEncode(a.relallvisible, indent, out)
      out.write(",")
      out.write(""""reltoastrelid":""")
      JsonEncoder.long.unsafeEncode(a.reltoastrelid, indent, out)
      out.write(",")
      out.write(""""relhasindex":""")
      JsonEncoder.boolean.unsafeEncode(a.relhasindex, indent, out)
      out.write(",")
      out.write(""""relisshared":""")
      JsonEncoder.boolean.unsafeEncode(a.relisshared, indent, out)
      out.write(",")
      out.write(""""relpersistence":""")
      JsonEncoder.string.unsafeEncode(a.relpersistence, indent, out)
      out.write(",")
      out.write(""""relkind":""")
      JsonEncoder.string.unsafeEncode(a.relkind, indent, out)
      out.write(",")
      out.write(""""relnatts":""")
      TypoShort.jsonEncoder.unsafeEncode(a.relnatts, indent, out)
      out.write(",")
      out.write(""""relchecks":""")
      TypoShort.jsonEncoder.unsafeEncode(a.relchecks, indent, out)
      out.write(",")
      out.write(""""relhasrules":""")
      JsonEncoder.boolean.unsafeEncode(a.relhasrules, indent, out)
      out.write(",")
      out.write(""""relhastriggers":""")
      JsonEncoder.boolean.unsafeEncode(a.relhastriggers, indent, out)
      out.write(",")
      out.write(""""relhassubclass":""")
      JsonEncoder.boolean.unsafeEncode(a.relhassubclass, indent, out)
      out.write(",")
      out.write(""""relrowsecurity":""")
      JsonEncoder.boolean.unsafeEncode(a.relrowsecurity, indent, out)
      out.write(",")
      out.write(""""relforcerowsecurity":""")
      JsonEncoder.boolean.unsafeEncode(a.relforcerowsecurity, indent, out)
      out.write(",")
      out.write(""""relispopulated":""")
      JsonEncoder.boolean.unsafeEncode(a.relispopulated, indent, out)
      out.write(",")
      out.write(""""relreplident":""")
      JsonEncoder.string.unsafeEncode(a.relreplident, indent, out)
      out.write(",")
      out.write(""""relispartition":""")
      JsonEncoder.boolean.unsafeEncode(a.relispartition, indent, out)
      out.write(",")
      out.write(""""relrewrite":""")
      JsonEncoder.long.unsafeEncode(a.relrewrite, indent, out)
      out.write(",")
      out.write(""""relfrozenxid":""")
      TypoXid.jsonEncoder.unsafeEncode(a.relfrozenxid, indent, out)
      out.write(",")
      out.write(""""relminmxid":""")
      TypoXid.jsonEncoder.unsafeEncode(a.relminmxid, indent, out)
      out.write(",")
      out.write(""""relacl":""")
      JsonEncoder.option(JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly)).unsafeEncode(a.relacl, indent, out)
      out.write(",")
      out.write(""""reloptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.reloptions, indent, out)
      out.write(",")
      out.write(""""relpartbound":""")
      JsonEncoder.option(TypoPgNodeTree.jsonEncoder).unsafeEncode(a.relpartbound, indent, out)
      out.write("}")
    }
  }
}
