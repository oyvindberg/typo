/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_auth_members

import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `pg_catalog.pg_auth_members` */
case class PgAuthMembersId(roleid: /* oid */ Long, member: /* oid */ Long)
object PgAuthMembersId {
  implicit lazy val jsonDecoder: JsonDecoder[PgAuthMembersId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val roleid = jsonObj.get("roleid").toRight("Missing field 'roleid'").flatMap(_.as(JsonDecoder.long))
    val member = jsonObj.get("member").toRight("Missing field 'member'").flatMap(_.as(JsonDecoder.long))
    if (roleid.isRight && member.isRight)
      Right(PgAuthMembersId(roleid = roleid.toOption.get, member = member.toOption.get))
    else Left(List[Either[String, Any]](roleid, member).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgAuthMembersId] = new JsonEncoder[PgAuthMembersId] {
    override def unsafeEncode(a: PgAuthMembersId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""roleid":""")
      JsonEncoder.long.unsafeEncode(a.roleid, indent, out)
      out.write(",")
      out.write(""""member":""")
      JsonEncoder.long.unsafeEncode(a.member, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[PgAuthMembersId] = Ordering.by(x => (x.roleid, x.member))
}
