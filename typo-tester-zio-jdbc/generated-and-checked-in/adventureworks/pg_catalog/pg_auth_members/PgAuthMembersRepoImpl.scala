/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_auth_members

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgAuthMembersRepoImpl extends PgAuthMembersRepo {
  override def delete(compositeId: PgAuthMembersId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_auth_members where "roleid" = ??? AND "member" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgAuthMembersFields, PgAuthMembersRow] = {
    DeleteBuilder("pg_catalog.pg_auth_members", PgAuthMembersFields)
  }
  override def insert(unsaved: PgAuthMembersRow): ZIO[ZConnection, Throwable, PgAuthMembersRow] = {
    sql"""insert into pg_catalog.pg_auth_members("roleid", "member", "grantor", "admin_option")
          values (???::oid, ???::oid, ???::oid, ???)
          returning "roleid", "member", "grantor", "admin_option"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgAuthMembersFields, PgAuthMembersRow] = {
    SelectBuilderSql("pg_catalog.pg_auth_members", PgAuthMembersFields, PgAuthMembersRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgAuthMembersRow] = {
    sql"""select "roleid", "member", "grantor", "admin_option" from pg_catalog.pg_auth_members""".query[PgAuthMembersRow].selectStream
  }
  override def selectById(compositeId: PgAuthMembersId): ZIO[ZConnection, Throwable, Option[PgAuthMembersRow]] = {
    sql"""select "roleid", "member", "grantor", "admin_option" from pg_catalog.pg_auth_members where "roleid" = ??? AND "member" = ???""".query[PgAuthMembersRow].selectOne
  }
  override def selectByUnique(member: /* oid */ Long, roleid: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgAuthMembersRow]] = {
    sql"""select "member", "roleid"
          from pg_catalog.pg_auth_members
          where "member" = ??? AND "roleid" = ???
       """.query[PgAuthMembersRow].selectOne
  }
  override def update(row: PgAuthMembersRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_auth_members
          set "grantor" = ???::oid,
              "admin_option" = ???
          where "roleid" = ??? AND "member" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgAuthMembersFields, PgAuthMembersRow] = {
    UpdateBuilder("pg_catalog.pg_auth_members", PgAuthMembersFields, PgAuthMembersRow.read)
  }
  override def upsert(unsaved: PgAuthMembersRow): ZIO[ZConnection, Throwable, PgAuthMembersRow] = {
    sql"""insert into pg_catalog.pg_auth_members("roleid", "member", "grantor", "admin_option")
          values (
            ???::oid,
            ???::oid,
            ???::oid,
            ???
          )
          on conflict ("roleid", "member")
          do update set
            "grantor" = EXCLUDED."grantor",
            "admin_option" = EXCLUDED."admin_option"
          returning "roleid", "member", "grantor", "admin_option"
       """.query(???).unique
  }
}
