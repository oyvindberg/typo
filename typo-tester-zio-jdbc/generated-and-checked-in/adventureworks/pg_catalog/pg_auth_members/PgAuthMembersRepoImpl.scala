/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_auth_members

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgAuthMembersRepoImpl extends PgAuthMembersRepo {
  override def delete(compositeId: PgAuthMembersId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_auth_members where "roleid" = ${Segment.paramSegment(compositeId.roleid)(Setter.longSetter)} AND "member" = ${Segment.paramSegment(compositeId.member)(Setter.longSetter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgAuthMembersFields, PgAuthMembersRow] = {
    DeleteBuilder("pg_catalog.pg_auth_members", PgAuthMembersFields)
  }
  override def insert(unsaved: PgAuthMembersRow): ZIO[ZConnection, Throwable, PgAuthMembersRow] = {
    sql"""insert into pg_catalog.pg_auth_members("roleid", "member", "grantor", "admin_option")
          values (${Segment.paramSegment(unsaved.roleid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.member)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.grantor)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.adminOption)(Setter.booleanSetter)})
          returning "roleid", "member", "grantor", "admin_option"
       """.insertReturning(PgAuthMembersRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgAuthMembersFields, PgAuthMembersRow] = {
    SelectBuilderSql("pg_catalog.pg_auth_members", PgAuthMembersFields, PgAuthMembersRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgAuthMembersRow] = {
    sql"""select "roleid", "member", "grantor", "admin_option" from pg_catalog.pg_auth_members""".query(PgAuthMembersRow.jdbcDecoder).selectStream
  }
  override def selectById(compositeId: PgAuthMembersId): ZIO[ZConnection, Throwable, Option[PgAuthMembersRow]] = {
    sql"""select "roleid", "member", "grantor", "admin_option" from pg_catalog.pg_auth_members where "roleid" = ${Segment.paramSegment(compositeId.roleid)(Setter.longSetter)} AND "member" = ${Segment.paramSegment(compositeId.member)(Setter.longSetter)}""".query(PgAuthMembersRow.jdbcDecoder).selectOne
  }
  override def selectByUnique(member: /* oid */ Long, roleid: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgAuthMembersRow]] = {
    sql"""select "member", "roleid"
          from pg_catalog.pg_auth_members
          where "member" = ${Segment.paramSegment(member)(Setter.longSetter)} AND "roleid" = ${Segment.paramSegment(roleid)(Setter.longSetter)}
       """.query(PgAuthMembersRow.jdbcDecoder).selectOne
  }
  override def update(row: PgAuthMembersRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_auth_members
          set "grantor" = ${Segment.paramSegment(row.grantor)(Setter.longSetter)}::oid,
              "admin_option" = ${Segment.paramSegment(row.adminOption)(Setter.booleanSetter)}
          where "roleid" = ${Segment.paramSegment(compositeId.roleid)(Setter.longSetter)} AND "member" = ${Segment.paramSegment(compositeId.member)(Setter.longSetter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgAuthMembersFields, PgAuthMembersRow] = {
    UpdateBuilder("pg_catalog.pg_auth_members", PgAuthMembersFields, PgAuthMembersRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgAuthMembersRow): ZIO[ZConnection, Throwable, UpdateResult[PgAuthMembersRow]] = {
    sql"""insert into pg_catalog.pg_auth_members("roleid", "member", "grantor", "admin_option")
          values (
            ${Segment.paramSegment(unsaved.roleid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.member)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.grantor)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.adminOption)(Setter.booleanSetter)}
          )
          on conflict ("roleid", "member")
          do update set
            "grantor" = EXCLUDED."grantor",
            "admin_option" = EXCLUDED."admin_option"
          returning "roleid", "member", "grantor", "admin_option"""".insertReturning(PgAuthMembersRow.jdbcDecoder)
  }
}
