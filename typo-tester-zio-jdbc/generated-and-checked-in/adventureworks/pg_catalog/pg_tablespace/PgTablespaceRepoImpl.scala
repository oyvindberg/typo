/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_tablespace

import adventureworks.customtypes.TypoAclItem
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgTablespaceRepoImpl extends PgTablespaceRepo {
  override def delete(oid: PgTablespaceId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_tablespace where "oid" = ${Segment.paramSegment(oid)(PgTablespaceId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTablespaceFields, PgTablespaceRow] = {
    DeleteBuilder("pg_catalog.pg_tablespace", PgTablespaceFields)
  }
  override def insert(unsaved: PgTablespaceRow): ZIO[ZConnection, Throwable, PgTablespaceRow] = {
    sql"""insert into pg_catalog.pg_tablespace("oid", "spcname", "spcowner", "spcacl", "spcoptions")
          values (${Segment.paramSegment(unsaved.oid)(PgTablespaceId.setter)}::oid, ${Segment.paramSegment(unsaved.spcname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.spcowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.spcacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem, ${Segment.paramSegment(unsaved.spcoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text)
          returning "oid", "spcname", "spcowner", "spcacl", "spcoptions"
       """.insertReturning(PgTablespaceRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgTablespaceFields, PgTablespaceRow] = {
    SelectBuilderSql("pg_catalog.pg_tablespace", PgTablespaceFields, PgTablespaceRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTablespaceRow] = {
    sql"""select "oid", "spcname", "spcowner", "spcacl", "spcoptions" from pg_catalog.pg_tablespace""".query(PgTablespaceRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgTablespaceId): ZIO[ZConnection, Throwable, Option[PgTablespaceRow]] = {
    sql"""select "oid", "spcname", "spcowner", "spcacl", "spcoptions" from pg_catalog.pg_tablespace where "oid" = ${Segment.paramSegment(oid)(PgTablespaceId.setter)}""".query(PgTablespaceRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgTablespaceId]): ZStream[ZConnection, Throwable, PgTablespaceRow] = {
    sql"""select "oid", "spcname", "spcowner", "spcacl", "spcoptions" from pg_catalog.pg_tablespace where "oid" = ANY(${Segment.paramSegment(oids)(PgTablespaceId.arraySetter)})""".query(PgTablespaceRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(spcname: String): ZIO[ZConnection, Throwable, Option[PgTablespaceRow]] = {
    sql"""select "spcname"
          from pg_catalog.pg_tablespace
          where "spcname" = ${Segment.paramSegment(spcname)(Setter.stringSetter)}
       """.query(PgTablespaceRow.jdbcDecoder).selectOne
  }
  override def update(row: PgTablespaceRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_tablespace
          set "spcname" = ${Segment.paramSegment(row.spcname)(Setter.stringSetter)}::name,
              "spcowner" = ${Segment.paramSegment(row.spcowner)(Setter.longSetter)}::oid,
              "spcacl" = ${Segment.paramSegment(row.spcacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem,
              "spcoptions" = ${Segment.paramSegment(row.spcoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          where "oid" = ${Segment.paramSegment(oid)(PgTablespaceId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTablespaceFields, PgTablespaceRow] = {
    UpdateBuilder("pg_catalog.pg_tablespace", PgTablespaceFields, PgTablespaceRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgTablespaceRow): ZIO[ZConnection, Throwable, UpdateResult[PgTablespaceRow]] = {
    sql"""insert into pg_catalog.pg_tablespace("oid", "spcname", "spcowner", "spcacl", "spcoptions")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgTablespaceId.setter)}::oid,
            ${Segment.paramSegment(unsaved.spcname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.spcowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.spcacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem,
            ${Segment.paramSegment(unsaved.spcoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          )
          on conflict ("oid")
          do update set
            "spcname" = EXCLUDED."spcname",
            "spcowner" = EXCLUDED."spcowner",
            "spcacl" = EXCLUDED."spcacl",
            "spcoptions" = EXCLUDED."spcoptions"
          returning "oid", "spcname", "spcowner", "spcacl", "spcoptions"""".insertReturning(PgTablespaceRow.jdbcDecoder)
  }
}
