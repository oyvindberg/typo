/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_tablespace

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgTablespaceRepoImpl extends PgTablespaceRepo {
  override def delete(oid: PgTablespaceId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_tablespace where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTablespaceFields, PgTablespaceRow] = {
    DeleteBuilder("pg_catalog.pg_tablespace", PgTablespaceFields)
  }
  override def insert(unsaved: PgTablespaceRow): ZIO[ZConnection, Throwable, PgTablespaceRow] = {
    sql"""insert into pg_catalog.pg_tablespace("oid", "spcname", "spcowner", "spcacl", "spcoptions")
          values (???::oid, ???::name, ???::oid, ???::_aclitem, ???::_text)
          returning "oid", "spcname", "spcowner", "spcacl", "spcoptions"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgTablespaceFields, PgTablespaceRow] = {
    SelectBuilderSql("pg_catalog.pg_tablespace", PgTablespaceFields, PgTablespaceRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTablespaceRow] = {
    sql"""select "oid", "spcname", "spcowner", "spcacl", "spcoptions" from pg_catalog.pg_tablespace""".query[PgTablespaceRow].selectStream
  }
  override def selectById(oid: PgTablespaceId): ZIO[ZConnection, Throwable, Option[PgTablespaceRow]] = {
    sql"""select "oid", "spcname", "spcowner", "spcacl", "spcoptions" from pg_catalog.pg_tablespace where "oid" = ???""".query[PgTablespaceRow].selectOne
  }
  override def selectByIds(oids: Array[PgTablespaceId]): ZStream[ZConnection, Throwable, PgTablespaceRow] = {
    sql"""select "oid", "spcname", "spcowner", "spcacl", "spcoptions" from pg_catalog.pg_tablespace where "oid" = ANY(${oids})""".query[PgTablespaceRow].selectStream
  }
  override def selectByUnique(spcname: String): ZIO[ZConnection, Throwable, Option[PgTablespaceRow]] = {
    sql"""select "spcname"
          from pg_catalog.pg_tablespace
          where "spcname" = ???
       """.query[PgTablespaceRow].selectOne
  }
  override def update(row: PgTablespaceRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_tablespace
          set "spcname" = ???::name,
              "spcowner" = ???::oid,
              "spcacl" = ???::_aclitem,
              "spcoptions" = ???::_text
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTablespaceFields, PgTablespaceRow] = {
    UpdateBuilder("pg_catalog.pg_tablespace", PgTablespaceFields, PgTablespaceRow.read)
  }
  override def upsert(unsaved: PgTablespaceRow): ZIO[ZConnection, Throwable, PgTablespaceRow] = {
    sql"""insert into pg_catalog.pg_tablespace("oid", "spcname", "spcowner", "spcacl", "spcoptions")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::_aclitem,
            ???::_text
          )
          on conflict ("oid")
          do update set
            "spcname" = EXCLUDED."spcname",
            "spcowner" = EXCLUDED."spcowner",
            "spcacl" = EXCLUDED."spcacl",
            "spcoptions" = EXCLUDED."spcoptions"
          returning "oid", "spcname", "spcowner", "spcacl", "spcoptions"
       """.query(???).unique
  }
}
