/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_slots

import adventureworks.customtypes.TypoXid
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgReplicationSlotsViewRow(
  slotName: /* nullability unknown */ Option[String],
  plugin: /* nullability unknown */ Option[String],
  slotType: /* nullability unknown */ Option[String],
  datoid: /* nullability unknown */ Option[/* oid */ Long],
  /** Points to [[pg_database.PgDatabaseRow.datname]] */
  database: Option[String],
  temporary: /* nullability unknown */ Option[Boolean],
  active: /* nullability unknown */ Option[Boolean],
  activePid: /* nullability unknown */ Option[Int],
  xmin: /* nullability unknown */ Option[TypoXid],
  catalogXmin: /* nullability unknown */ Option[TypoXid],
  restartLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  confirmedFlushLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  walStatus: /* nullability unknown */ Option[String],
  safeWalSize: /* nullability unknown */ Option[Long],
  twoPhase: /* nullability unknown */ Option[Boolean]
)

object PgReplicationSlotsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgReplicationSlotsViewRow] = new JdbcDecoder[PgReplicationSlotsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgReplicationSlotsViewRow) =
      columIndex + 14 ->
        PgReplicationSlotsViewRow(
          slotName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          plugin = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          slotType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          datoid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          database = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          temporary = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 5, rs)._2,
          active = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 6, rs)._2,
          activePid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 7, rs)._2,
          xmin = JdbcDecoder.optionDecoder(TypoXid.jdbcDecoder).unsafeDecode(columIndex + 8, rs)._2,
          catalogXmin = JdbcDecoder.optionDecoder(TypoXid.jdbcDecoder).unsafeDecode(columIndex + 9, rs)._2,
          restartLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 10, rs)._2,
          confirmedFlushLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 11, rs)._2,
          walStatus = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 12, rs)._2,
          safeWalSize = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 13, rs)._2,
          twoPhase = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 14, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgReplicationSlotsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val slotName = jsonObj.get("slot_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val plugin = jsonObj.get("plugin").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val slotType = jsonObj.get("slot_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val datoid = jsonObj.get("datoid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val database = jsonObj.get("database").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val temporary = jsonObj.get("temporary").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val active = jsonObj.get("active").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val activePid = jsonObj.get("active_pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val xmin = jsonObj.get("xmin").fold[Either[String, Option[TypoXid]]](Right(None))(_.as(JsonDecoder.option(TypoXid.jsonDecoder)))
    val catalogXmin = jsonObj.get("catalog_xmin").fold[Either[String, Option[TypoXid]]](Right(None))(_.as(JsonDecoder.option(TypoXid.jsonDecoder)))
    val restartLsn = jsonObj.get("restart_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val confirmedFlushLsn = jsonObj.get("confirmed_flush_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val walStatus = jsonObj.get("wal_status").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val safeWalSize = jsonObj.get("safe_wal_size").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val twoPhase = jsonObj.get("two_phase").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    if (slotName.isRight && plugin.isRight && slotType.isRight && datoid.isRight && database.isRight && temporary.isRight && active.isRight && activePid.isRight && xmin.isRight && catalogXmin.isRight && restartLsn.isRight && confirmedFlushLsn.isRight && walStatus.isRight && safeWalSize.isRight && twoPhase.isRight)
      Right(PgReplicationSlotsViewRow(slotName = slotName.toOption.get, plugin = plugin.toOption.get, slotType = slotType.toOption.get, datoid = datoid.toOption.get, database = database.toOption.get, temporary = temporary.toOption.get, active = active.toOption.get, activePid = activePid.toOption.get, xmin = xmin.toOption.get, catalogXmin = catalogXmin.toOption.get, restartLsn = restartLsn.toOption.get, confirmedFlushLsn = confirmedFlushLsn.toOption.get, walStatus = walStatus.toOption.get, safeWalSize = safeWalSize.toOption.get, twoPhase = twoPhase.toOption.get))
    else Left(List[Either[String, Any]](slotName, plugin, slotType, datoid, database, temporary, active, activePid, xmin, catalogXmin, restartLsn, confirmedFlushLsn, walStatus, safeWalSize, twoPhase).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgReplicationSlotsViewRow] = new JsonEncoder[PgReplicationSlotsViewRow] {
    override def unsafeEncode(a: PgReplicationSlotsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""slot_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.slotName, indent, out)
      out.write(",")
      out.write(""""plugin":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.plugin, indent, out)
      out.write(",")
      out.write(""""slot_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.slotType, indent, out)
      out.write(",")
      out.write(""""datoid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.datoid, indent, out)
      out.write(",")
      out.write(""""database":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.database, indent, out)
      out.write(",")
      out.write(""""temporary":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.temporary, indent, out)
      out.write(",")
      out.write(""""active":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.active, indent, out)
      out.write(",")
      out.write(""""active_pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.activePid, indent, out)
      out.write(",")
      out.write(""""xmin":""")
      JsonEncoder.option(TypoXid.jsonEncoder).unsafeEncode(a.xmin, indent, out)
      out.write(",")
      out.write(""""catalog_xmin":""")
      JsonEncoder.option(TypoXid.jsonEncoder).unsafeEncode(a.catalogXmin, indent, out)
      out.write(",")
      out.write(""""restart_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.restartLsn, indent, out)
      out.write(",")
      out.write(""""confirmed_flush_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.confirmedFlushLsn, indent, out)
      out.write(",")
      out.write(""""wal_status":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.walStatus, indent, out)
      out.write(",")
      out.write(""""safe_wal_size":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.safeWalSize, indent, out)
      out.write(",")
      out.write(""""two_phase":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.twoPhase, indent, out)
      out.write("}")
    }
  }
}
