/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_slru

import adventureworks.customtypes.TypoInstant
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatSlruViewRow(
  name: /* nullability unknown */ Option[String],
  blksZeroed: /* nullability unknown */ Option[Long],
  blksHit: /* nullability unknown */ Option[Long],
  blksRead: /* nullability unknown */ Option[Long],
  blksWritten: /* nullability unknown */ Option[Long],
  blksExists: /* nullability unknown */ Option[Long],
  flushes: /* nullability unknown */ Option[Long],
  truncates: /* nullability unknown */ Option[Long],
  statsReset: /* nullability unknown */ Option[TypoInstant]
)

object PgStatSlruViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatSlruViewRow] = new JdbcDecoder[PgStatSlruViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatSlruViewRow) =
      columIndex + 8 ->
        PgStatSlruViewRow(
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          blksZeroed = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          blksHit = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 2, rs)._2,
          blksRead = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          blksWritten = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          blksExists = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          flushes = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 6, rs)._2,
          truncates = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          statsReset = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatSlruViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val blksZeroed = jsonObj.get("blks_zeroed").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val blksHit = jsonObj.get("blks_hit").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val blksRead = jsonObj.get("blks_read").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val blksWritten = jsonObj.get("blks_written").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val blksExists = jsonObj.get("blks_exists").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val flushes = jsonObj.get("flushes").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val truncates = jsonObj.get("truncates").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val statsReset = jsonObj.get("stats_reset").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    if (name.isRight && blksZeroed.isRight && blksHit.isRight && blksRead.isRight && blksWritten.isRight && blksExists.isRight && flushes.isRight && truncates.isRight && statsReset.isRight)
      Right(PgStatSlruViewRow(name = name.toOption.get, blksZeroed = blksZeroed.toOption.get, blksHit = blksHit.toOption.get, blksRead = blksRead.toOption.get, blksWritten = blksWritten.toOption.get, blksExists = blksExists.toOption.get, flushes = flushes.toOption.get, truncates = truncates.toOption.get, statsReset = statsReset.toOption.get))
    else Left(List[Either[String, Any]](name, blksZeroed, blksHit, blksRead, blksWritten, blksExists, flushes, truncates, statsReset).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatSlruViewRow] = new JsonEncoder[PgStatSlruViewRow] {
    override def unsafeEncode(a: PgStatSlruViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""blks_zeroed":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blksZeroed, indent, out)
      out.write(",")
      out.write(""""blks_hit":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blksHit, indent, out)
      out.write(",")
      out.write(""""blks_read":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blksRead, indent, out)
      out.write(",")
      out.write(""""blks_written":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blksWritten, indent, out)
      out.write(",")
      out.write(""""blks_exists":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blksExists, indent, out)
      out.write(",")
      out.write(""""flushes":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.flushes, indent, out)
      out.write(",")
      out.write(""""truncates":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.truncates, indent, out)
      out.write(",")
      out.write(""""stats_reset":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.statsReset, indent, out)
      out.write("}")
    }
  }
}
