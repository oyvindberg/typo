/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config_map

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgTsConfigMapRepoImpl extends PgTsConfigMapRepo {
  override def delete(compositeId: PgTsConfigMapId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_ts_config_map where "mapcfg" = ??? AND "maptokentype" = ??? AND "mapseqno" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTsConfigMapFields, PgTsConfigMapRow] = {
    DeleteBuilder("pg_catalog.pg_ts_config_map", PgTsConfigMapFields)
  }
  override def insert(unsaved: PgTsConfigMapRow): ZIO[ZConnection, Throwable, PgTsConfigMapRow] = {
    sql"""insert into pg_catalog.pg_ts_config_map("mapcfg", "maptokentype", "mapseqno", "mapdict")
          values (???::oid, ???::int4, ???::int4, ???::oid)
          returning "mapcfg", "maptokentype", "mapseqno", "mapdict"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgTsConfigMapFields, PgTsConfigMapRow] = {
    SelectBuilderSql("pg_catalog.pg_ts_config_map", PgTsConfigMapFields, PgTsConfigMapRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTsConfigMapRow] = {
    sql"""select "mapcfg", "maptokentype", "mapseqno", "mapdict" from pg_catalog.pg_ts_config_map""".query[PgTsConfigMapRow].selectStream
  }
  override def selectById(compositeId: PgTsConfigMapId): ZIO[ZConnection, Throwable, Option[PgTsConfigMapRow]] = {
    sql"""select "mapcfg", "maptokentype", "mapseqno", "mapdict" from pg_catalog.pg_ts_config_map where "mapcfg" = ??? AND "maptokentype" = ??? AND "mapseqno" = ???""".query[PgTsConfigMapRow].selectOne
  }
  override def update(row: PgTsConfigMapRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_ts_config_map
          set "mapdict" = ???::oid
          where "mapcfg" = ??? AND "maptokentype" = ??? AND "mapseqno" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTsConfigMapFields, PgTsConfigMapRow] = {
    UpdateBuilder("pg_catalog.pg_ts_config_map", PgTsConfigMapFields, PgTsConfigMapRow.read)
  }
  override def upsert(unsaved: PgTsConfigMapRow): ZIO[ZConnection, Throwable, PgTsConfigMapRow] = {
    sql"""insert into pg_catalog.pg_ts_config_map("mapcfg", "maptokentype", "mapseqno", "mapdict")
          values (
            ???::oid,
            ???::int4,
            ???::int4,
            ???::oid
          )
          on conflict ("mapcfg", "maptokentype", "mapseqno")
          do update set
            "mapdict" = EXCLUDED."mapdict"
          returning "mapcfg", "maptokentype", "mapseqno", "mapdict"
       """.query(???).unique
  }
}
