/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config_map

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgTsConfigMapRepoImpl extends PgTsConfigMapRepo {
  override def delete(compositeId: PgTsConfigMapId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_ts_config_map where "mapcfg" = ${Segment.paramSegment(compositeId.mapcfg)(Setter.longSetter)} AND "maptokentype" = ${Segment.paramSegment(compositeId.maptokentype)(Setter.intSetter)} AND "mapseqno" = ${Segment.paramSegment(compositeId.mapseqno)(Setter.intSetter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTsConfigMapFields, PgTsConfigMapRow] = {
    DeleteBuilder("pg_catalog.pg_ts_config_map", PgTsConfigMapFields)
  }
  override def insert(unsaved: PgTsConfigMapRow): ZIO[ZConnection, Throwable, PgTsConfigMapRow] = {
    sql"""insert into pg_catalog.pg_ts_config_map("mapcfg", "maptokentype", "mapseqno", "mapdict")
          values (${Segment.paramSegment(unsaved.mapcfg)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.maptokentype)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.mapseqno)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.mapdict)(Setter.longSetter)}::oid)
          returning "mapcfg", "maptokentype", "mapseqno", "mapdict"
       """.insertReturning(PgTsConfigMapRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgTsConfigMapFields, PgTsConfigMapRow] = {
    SelectBuilderSql("pg_catalog.pg_ts_config_map", PgTsConfigMapFields, PgTsConfigMapRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgTsConfigMapRow] = {
    sql"""select "mapcfg", "maptokentype", "mapseqno", "mapdict" from pg_catalog.pg_ts_config_map""".query(PgTsConfigMapRow.jdbcDecoder).selectStream
  }
  override def selectById(compositeId: PgTsConfigMapId): ZIO[ZConnection, Throwable, Option[PgTsConfigMapRow]] = {
    sql"""select "mapcfg", "maptokentype", "mapseqno", "mapdict" from pg_catalog.pg_ts_config_map where "mapcfg" = ${Segment.paramSegment(compositeId.mapcfg)(Setter.longSetter)} AND "maptokentype" = ${Segment.paramSegment(compositeId.maptokentype)(Setter.intSetter)} AND "mapseqno" = ${Segment.paramSegment(compositeId.mapseqno)(Setter.intSetter)}""".query(PgTsConfigMapRow.jdbcDecoder).selectOne
  }
  override def update(row: PgTsConfigMapRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_ts_config_map
          set "mapdict" = ${Segment.paramSegment(row.mapdict)(Setter.longSetter)}::oid
          where "mapcfg" = ${Segment.paramSegment(compositeId.mapcfg)(Setter.longSetter)} AND "maptokentype" = ${Segment.paramSegment(compositeId.maptokentype)(Setter.intSetter)} AND "mapseqno" = ${Segment.paramSegment(compositeId.mapseqno)(Setter.intSetter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgTsConfigMapFields, PgTsConfigMapRow] = {
    UpdateBuilder("pg_catalog.pg_ts_config_map", PgTsConfigMapFields, PgTsConfigMapRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgTsConfigMapRow): ZIO[ZConnection, Throwable, UpdateResult[PgTsConfigMapRow]] = {
    sql"""insert into pg_catalog.pg_ts_config_map("mapcfg", "maptokentype", "mapseqno", "mapdict")
          values (
            ${Segment.paramSegment(unsaved.mapcfg)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.maptokentype)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.mapseqno)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.mapdict)(Setter.longSetter)}::oid
          )
          on conflict ("mapcfg", "maptokentype", "mapseqno")
          do update set
            "mapdict" = EXCLUDED."mapdict"
          returning "mapcfg", "maptokentype", "mapseqno", "mapdict"""".insertReturning(PgTsConfigMapRow.jdbcDecoder)
  }
}
