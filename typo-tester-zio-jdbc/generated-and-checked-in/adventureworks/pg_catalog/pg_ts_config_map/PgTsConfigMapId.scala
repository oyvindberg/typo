/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config_map

import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `pg_catalog.pg_ts_config_map` */
case class PgTsConfigMapId(mapcfg: /* oid */ Long, maptokentype: Int, mapseqno: Int)
object PgTsConfigMapId {
  implicit lazy val jsonDecoder: JsonDecoder[PgTsConfigMapId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val mapcfg = jsonObj.get("mapcfg").toRight("Missing field 'mapcfg'").flatMap(_.as(JsonDecoder.long))
    val maptokentype = jsonObj.get("maptokentype").toRight("Missing field 'maptokentype'").flatMap(_.as(JsonDecoder.int))
    val mapseqno = jsonObj.get("mapseqno").toRight("Missing field 'mapseqno'").flatMap(_.as(JsonDecoder.int))
    if (mapcfg.isRight && maptokentype.isRight && mapseqno.isRight)
      Right(PgTsConfigMapId(mapcfg = mapcfg.toOption.get, maptokentype = maptokentype.toOption.get, mapseqno = mapseqno.toOption.get))
    else Left(List[Either[String, Any]](mapcfg, maptokentype, mapseqno).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTsConfigMapId] = new JsonEncoder[PgTsConfigMapId] {
    override def unsafeEncode(a: PgTsConfigMapId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""mapcfg":""")
      JsonEncoder.long.unsafeEncode(a.mapcfg, indent, out)
      out.write(",")
      out.write(""""maptokentype":""")
      JsonEncoder.int.unsafeEncode(a.maptokentype, indent, out)
      out.write(",")
      out.write(""""mapseqno":""")
      JsonEncoder.int.unsafeEncode(a.mapseqno, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[PgTsConfigMapId] = Ordering.by(x => (x.mapcfg, x.maptokentype, x.mapseqno))
}
