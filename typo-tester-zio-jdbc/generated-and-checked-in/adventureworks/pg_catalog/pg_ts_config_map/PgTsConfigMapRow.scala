/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config_map

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgTsConfigMapRow(
  mapcfg: /* oid */ Long,
  maptokentype: Int,
  mapseqno: Int,
  mapdict: /* oid */ Long
){
   val compositeId: PgTsConfigMapId = PgTsConfigMapId(mapcfg, maptokentype, mapseqno)
 }

object PgTsConfigMapRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgTsConfigMapRow] = new JdbcDecoder[PgTsConfigMapRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgTsConfigMapRow) =
      columIndex + 3 ->
        PgTsConfigMapRow(
          mapcfg = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 0, rs)._2,
          maptokentype = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 1, rs)._2,
          mapseqno = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 2, rs)._2,
          mapdict = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgTsConfigMapRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val mapcfg = jsonObj.get("mapcfg").toRight("Missing field 'mapcfg'").flatMap(_.as(JsonDecoder.long))
    val maptokentype = jsonObj.get("maptokentype").toRight("Missing field 'maptokentype'").flatMap(_.as(JsonDecoder.int))
    val mapseqno = jsonObj.get("mapseqno").toRight("Missing field 'mapseqno'").flatMap(_.as(JsonDecoder.int))
    val mapdict = jsonObj.get("mapdict").toRight("Missing field 'mapdict'").flatMap(_.as(JsonDecoder.long))
    if (mapcfg.isRight && maptokentype.isRight && mapseqno.isRight && mapdict.isRight)
      Right(PgTsConfigMapRow(mapcfg = mapcfg.toOption.get, maptokentype = maptokentype.toOption.get, mapseqno = mapseqno.toOption.get, mapdict = mapdict.toOption.get))
    else Left(List[Either[String, Any]](mapcfg, maptokentype, mapseqno, mapdict).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTsConfigMapRow] = new JsonEncoder[PgTsConfigMapRow] {
    override def unsafeEncode(a: PgTsConfigMapRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""mapcfg":""")
      JsonEncoder.long.unsafeEncode(a.mapcfg, indent, out)
      out.write(",")
      out.write(""""maptokentype":""")
      JsonEncoder.int.unsafeEncode(a.maptokentype, indent, out)
      out.write(",")
      out.write(""""mapseqno":""")
      JsonEncoder.int.unsafeEncode(a.mapseqno, indent, out)
      out.write(",")
      out.write(""""mapdict":""")
      JsonEncoder.long.unsafeEncode(a.mapdict, indent, out)
      out.write("}")
    }
  }
}
