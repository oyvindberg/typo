/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_range

import adventureworks.customtypes.TypoRegproc
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgRangeRepoImpl extends PgRangeRepo {
  override def delete(rngtypid: PgRangeId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_range where "rngtypid" = ${Segment.paramSegment(rngtypid)(PgRangeId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgRangeFields, PgRangeRow] = {
    DeleteBuilder("pg_catalog.pg_range", PgRangeFields)
  }
  override def insert(unsaved: PgRangeRow): ZIO[ZConnection, Throwable, PgRangeRow] = {
    sql"""insert into pg_catalog.pg_range("rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff")
          values (${Segment.paramSegment(unsaved.rngtypid)(PgRangeId.setter)}::oid, ${Segment.paramSegment(unsaved.rngsubtype)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.rngmultitypid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.rngcollation)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.rngsubopc)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.rngcanonical)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.rngsubdiff)(TypoRegproc.setter)}::regproc)
          returning "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff"
       """.insertReturning(PgRangeRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgRangeFields, PgRangeRow] = {
    SelectBuilderSql("pg_catalog.pg_range", PgRangeFields, PgRangeRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgRangeRow] = {
    sql"""select "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff" from pg_catalog.pg_range""".query(PgRangeRow.jdbcDecoder).selectStream
  }
  override def selectById(rngtypid: PgRangeId): ZIO[ZConnection, Throwable, Option[PgRangeRow]] = {
    sql"""select "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff" from pg_catalog.pg_range where "rngtypid" = ${Segment.paramSegment(rngtypid)(PgRangeId.setter)}""".query(PgRangeRow.jdbcDecoder).selectOne
  }
  override def selectByIds(rngtypids: Array[PgRangeId]): ZStream[ZConnection, Throwable, PgRangeRow] = {
    sql"""select "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff" from pg_catalog.pg_range where "rngtypid" = ANY(${Segment.paramSegment(rngtypids)(PgRangeId.arraySetter)})""".query(PgRangeRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(rngmultitypid: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgRangeRow]] = {
    sql"""select "rngmultitypid"
          from pg_catalog.pg_range
          where "rngmultitypid" = ${Segment.paramSegment(rngmultitypid)(Setter.longSetter)}
       """.query(PgRangeRow.jdbcDecoder).selectOne
  }
  override def update(row: PgRangeRow): ZIO[ZConnection, Throwable, Boolean] = {
    val rngtypid = row.rngtypid
    sql"""update pg_catalog.pg_range
          set "rngsubtype" = ${Segment.paramSegment(row.rngsubtype)(Setter.longSetter)}::oid,
              "rngmultitypid" = ${Segment.paramSegment(row.rngmultitypid)(Setter.longSetter)}::oid,
              "rngcollation" = ${Segment.paramSegment(row.rngcollation)(Setter.longSetter)}::oid,
              "rngsubopc" = ${Segment.paramSegment(row.rngsubopc)(Setter.longSetter)}::oid,
              "rngcanonical" = ${Segment.paramSegment(row.rngcanonical)(TypoRegproc.setter)}::regproc,
              "rngsubdiff" = ${Segment.paramSegment(row.rngsubdiff)(TypoRegproc.setter)}::regproc
          where "rngtypid" = ${Segment.paramSegment(rngtypid)(PgRangeId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgRangeFields, PgRangeRow] = {
    UpdateBuilder("pg_catalog.pg_range", PgRangeFields, PgRangeRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgRangeRow): ZIO[ZConnection, Throwable, UpdateResult[PgRangeRow]] = {
    sql"""insert into pg_catalog.pg_range("rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff")
          values (
            ${Segment.paramSegment(unsaved.rngtypid)(PgRangeId.setter)}::oid,
            ${Segment.paramSegment(unsaved.rngsubtype)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.rngmultitypid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.rngcollation)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.rngsubopc)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.rngcanonical)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.rngsubdiff)(TypoRegproc.setter)}::regproc
          )
          on conflict ("rngtypid")
          do update set
            "rngsubtype" = EXCLUDED."rngsubtype",
            "rngmultitypid" = EXCLUDED."rngmultitypid",
            "rngcollation" = EXCLUDED."rngcollation",
            "rngsubopc" = EXCLUDED."rngsubopc",
            "rngcanonical" = EXCLUDED."rngcanonical",
            "rngsubdiff" = EXCLUDED."rngsubdiff"
          returning "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff"""".insertReturning(PgRangeRow.jdbcDecoder)
  }
}
