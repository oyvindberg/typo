/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_range

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgRangeRepoImpl extends PgRangeRepo {
  override def delete(rngtypid: PgRangeId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_range where "rngtypid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgRangeFields, PgRangeRow] = {
    DeleteBuilder("pg_catalog.pg_range", PgRangeFields)
  }
  override def insert(unsaved: PgRangeRow): ZIO[ZConnection, Throwable, PgRangeRow] = {
    sql"""insert into pg_catalog.pg_range("rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff")
          values (???::oid, ???::oid, ???::oid, ???::oid, ???::oid, ???::regproc, ???::regproc)
          returning "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgRangeFields, PgRangeRow] = {
    SelectBuilderSql("pg_catalog.pg_range", PgRangeFields, PgRangeRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgRangeRow] = {
    sql"""select "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff" from pg_catalog.pg_range""".query[PgRangeRow].selectStream
  }
  override def selectById(rngtypid: PgRangeId): ZIO[ZConnection, Throwable, Option[PgRangeRow]] = {
    sql"""select "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff" from pg_catalog.pg_range where "rngtypid" = ???""".query[PgRangeRow].selectOne
  }
  override def selectByIds(rngtypids: Array[PgRangeId]): ZStream[ZConnection, Throwable, PgRangeRow] = {
    sql"""select "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff" from pg_catalog.pg_range where "rngtypid" = ANY(${rngtypids})""".query[PgRangeRow].selectStream
  }
  override def selectByUnique(rngmultitypid: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgRangeRow]] = {
    sql"""select "rngmultitypid"
          from pg_catalog.pg_range
          where "rngmultitypid" = ???
       """.query[PgRangeRow].selectOne
  }
  override def update(row: PgRangeRow): ZIO[ZConnection, Throwable, Boolean] = {
    val rngtypid = row.rngtypid
    sql"""update pg_catalog.pg_range
          set "rngsubtype" = ???::oid,
              "rngmultitypid" = ???::oid,
              "rngcollation" = ???::oid,
              "rngsubopc" = ???::oid,
              "rngcanonical" = ???::regproc,
              "rngsubdiff" = ???::regproc
          where "rngtypid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgRangeFields, PgRangeRow] = {
    UpdateBuilder("pg_catalog.pg_range", PgRangeFields, PgRangeRow.read)
  }
  override def upsert(unsaved: PgRangeRow): ZIO[ZConnection, Throwable, PgRangeRow] = {
    sql"""insert into pg_catalog.pg_range("rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff")
          values (
            ???::oid,
            ???::oid,
            ???::oid,
            ???::oid,
            ???::oid,
            ???::regproc,
            ???::regproc
          )
          on conflict ("rngtypid")
          do update set
            "rngsubtype" = EXCLUDED."rngsubtype",
            "rngmultitypid" = EXCLUDED."rngmultitypid",
            "rngcollation" = EXCLUDED."rngcollation",
            "rngsubopc" = EXCLUDED."rngsubopc",
            "rngcanonical" = EXCLUDED."rngcanonical",
            "rngsubdiff" = EXCLUDED."rngsubdiff"
          returning "rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff"
       """.query(???).unique
  }
}
