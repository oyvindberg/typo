/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_range

import adventureworks.customtypes.TypoRegproc
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgRangeRow(
  rngtypid: PgRangeId,
  rngsubtype: /* oid */ Long,
  rngmultitypid: /* oid */ Long,
  rngcollation: /* oid */ Long,
  rngsubopc: /* oid */ Long,
  rngcanonical: TypoRegproc,
  rngsubdiff: TypoRegproc
)

object PgRangeRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgRangeRow] = new JdbcDecoder[PgRangeRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgRangeRow) =
      columIndex + 6 ->
        PgRangeRow(
          rngtypid = PgRangeId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          rngsubtype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          rngmultitypid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          rngcollation = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          rngsubopc = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          rngcanonical = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          rngsubdiff = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgRangeRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val rngtypid = jsonObj.get("rngtypid").toRight("Missing field 'rngtypid'").flatMap(_.as(PgRangeId.jsonDecoder))
    val rngsubtype = jsonObj.get("rngsubtype").toRight("Missing field 'rngsubtype'").flatMap(_.as(JsonDecoder.long))
    val rngmultitypid = jsonObj.get("rngmultitypid").toRight("Missing field 'rngmultitypid'").flatMap(_.as(JsonDecoder.long))
    val rngcollation = jsonObj.get("rngcollation").toRight("Missing field 'rngcollation'").flatMap(_.as(JsonDecoder.long))
    val rngsubopc = jsonObj.get("rngsubopc").toRight("Missing field 'rngsubopc'").flatMap(_.as(JsonDecoder.long))
    val rngcanonical = jsonObj.get("rngcanonical").toRight("Missing field 'rngcanonical'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val rngsubdiff = jsonObj.get("rngsubdiff").toRight("Missing field 'rngsubdiff'").flatMap(_.as(TypoRegproc.jsonDecoder))
    if (rngtypid.isRight && rngsubtype.isRight && rngmultitypid.isRight && rngcollation.isRight && rngsubopc.isRight && rngcanonical.isRight && rngsubdiff.isRight)
      Right(PgRangeRow(rngtypid = rngtypid.toOption.get, rngsubtype = rngsubtype.toOption.get, rngmultitypid = rngmultitypid.toOption.get, rngcollation = rngcollation.toOption.get, rngsubopc = rngsubopc.toOption.get, rngcanonical = rngcanonical.toOption.get, rngsubdiff = rngsubdiff.toOption.get))
    else Left(List[Either[String, Any]](rngtypid, rngsubtype, rngmultitypid, rngcollation, rngsubopc, rngcanonical, rngsubdiff).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgRangeRow] = new JsonEncoder[PgRangeRow] {
    override def unsafeEncode(a: PgRangeRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""rngtypid":""")
      PgRangeId.jsonEncoder.unsafeEncode(a.rngtypid, indent, out)
      out.write(",")
      out.write(""""rngsubtype":""")
      JsonEncoder.long.unsafeEncode(a.rngsubtype, indent, out)
      out.write(",")
      out.write(""""rngmultitypid":""")
      JsonEncoder.long.unsafeEncode(a.rngmultitypid, indent, out)
      out.write(",")
      out.write(""""rngcollation":""")
      JsonEncoder.long.unsafeEncode(a.rngcollation, indent, out)
      out.write(",")
      out.write(""""rngsubopc":""")
      JsonEncoder.long.unsafeEncode(a.rngsubopc, indent, out)
      out.write(",")
      out.write(""""rngcanonical":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.rngcanonical, indent, out)
      out.write(",")
      out.write(""""rngsubdiff":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.rngsubdiff, indent, out)
      out.write("}")
    }
  }
}
