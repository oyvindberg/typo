/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_tables

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgTablesViewRow(
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  tablename: String,
  tableowner: /* nullability unknown */ Option[String],
  /** Points to [[pg_tablespace.PgTablespaceRow.spcname]] */
  tablespace: Option[String],
  /** Points to [[pg_class.PgClassRow.relhasindex]] */
  hasindexes: Boolean,
  /** Points to [[pg_class.PgClassRow.relhasrules]] */
  hasrules: Boolean,
  /** Points to [[pg_class.PgClassRow.relhastriggers]] */
  hastriggers: Boolean,
  /** Points to [[pg_class.PgClassRow.relrowsecurity]] */
  rowsecurity: Boolean
)

object PgTablesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgTablesViewRow] = new JdbcDecoder[PgTablesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgTablesViewRow) =
      columIndex + 7 ->
        PgTablesViewRow(
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          tablename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          tableowner = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          tablespace = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          hasindexes = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 4, rs)._2,
          hasrules = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 5, rs)._2,
          hastriggers = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 6, rs)._2,
          rowsecurity = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgTablesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tablename = jsonObj.get("tablename").toRight("Missing field 'tablename'").flatMap(_.as(JsonDecoder.string))
    val tableowner = jsonObj.get("tableowner").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tablespace = jsonObj.get("tablespace").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val hasindexes = jsonObj.get("hasindexes").toRight("Missing field 'hasindexes'").flatMap(_.as(JsonDecoder.boolean))
    val hasrules = jsonObj.get("hasrules").toRight("Missing field 'hasrules'").flatMap(_.as(JsonDecoder.boolean))
    val hastriggers = jsonObj.get("hastriggers").toRight("Missing field 'hastriggers'").flatMap(_.as(JsonDecoder.boolean))
    val rowsecurity = jsonObj.get("rowsecurity").toRight("Missing field 'rowsecurity'").flatMap(_.as(JsonDecoder.boolean))
    if (schemaname.isRight && tablename.isRight && tableowner.isRight && tablespace.isRight && hasindexes.isRight && hasrules.isRight && hastriggers.isRight && rowsecurity.isRight)
      Right(PgTablesViewRow(schemaname = schemaname.toOption.get, tablename = tablename.toOption.get, tableowner = tableowner.toOption.get, tablespace = tablespace.toOption.get, hasindexes = hasindexes.toOption.get, hasrules = hasrules.toOption.get, hastriggers = hastriggers.toOption.get, rowsecurity = rowsecurity.toOption.get))
    else Left(List[Either[String, Any]](schemaname, tablename, tableowner, tablespace, hasindexes, hasrules, hastriggers, rowsecurity).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgTablesViewRow] = new JsonEncoder[PgTablesViewRow] {
    override def unsafeEncode(a: PgTablesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""tablename":""")
      JsonEncoder.string.unsafeEncode(a.tablename, indent, out)
      out.write(",")
      out.write(""""tableowner":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tableowner, indent, out)
      out.write(",")
      out.write(""""tablespace":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tablespace, indent, out)
      out.write(",")
      out.write(""""hasindexes":""")
      JsonEncoder.boolean.unsafeEncode(a.hasindexes, indent, out)
      out.write(",")
      out.write(""""hasrules":""")
      JsonEncoder.boolean.unsafeEncode(a.hasrules, indent, out)
      out.write(",")
      out.write(""""hastriggers":""")
      JsonEncoder.boolean.unsafeEncode(a.hastriggers, indent, out)
      out.write(",")
      out.write(""""rowsecurity":""")
      JsonEncoder.boolean.unsafeEncode(a.rowsecurity, indent, out)
      out.write("}")
    }
  }
}
