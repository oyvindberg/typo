/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_operator

import adventureworks.customtypes.TypoRegproc
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgOperatorRepoImpl extends PgOperatorRepo {
  override def delete(oid: PgOperatorId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_operator where "oid" = ${Segment.paramSegment(oid)(PgOperatorId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgOperatorFields, PgOperatorRow] = {
    DeleteBuilder("pg_catalog.pg_operator", PgOperatorFields)
  }
  override def insert(unsaved: PgOperatorRow): ZIO[ZConnection, Throwable, PgOperatorRow] = {
    sql"""insert into pg_catalog.pg_operator("oid", "oprname", "oprnamespace", "oprowner", "oprkind", "oprcanmerge", "oprcanhash", "oprleft", "oprright", "oprresult", "oprcom", "oprnegate", "oprcode", "oprrest", "oprjoin")
          values (${Segment.paramSegment(unsaved.oid)(PgOperatorId.setter)}::oid, ${Segment.paramSegment(unsaved.oprname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.oprnamespace)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.oprowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.oprkind)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.oprcanmerge)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.oprcanhash)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.oprleft)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.oprright)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.oprresult)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.oprcom)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.oprnegate)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.oprcode)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.oprrest)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.oprjoin)(TypoRegproc.setter)}::regproc)
          returning "oid", "oprname", "oprnamespace", "oprowner", "oprkind", "oprcanmerge", "oprcanhash", "oprleft", "oprright", "oprresult", "oprcom", "oprnegate", "oprcode", "oprrest", "oprjoin"
       """.insertReturning(PgOperatorRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgOperatorFields, PgOperatorRow] = {
    SelectBuilderSql("pg_catalog.pg_operator", PgOperatorFields, PgOperatorRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgOperatorRow] = {
    sql"""select "oid", "oprname", "oprnamespace", "oprowner", "oprkind", "oprcanmerge", "oprcanhash", "oprleft", "oprright", "oprresult", "oprcom", "oprnegate", "oprcode", "oprrest", "oprjoin" from pg_catalog.pg_operator""".query(PgOperatorRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgOperatorId): ZIO[ZConnection, Throwable, Option[PgOperatorRow]] = {
    sql"""select "oid", "oprname", "oprnamespace", "oprowner", "oprkind", "oprcanmerge", "oprcanhash", "oprleft", "oprright", "oprresult", "oprcom", "oprnegate", "oprcode", "oprrest", "oprjoin" from pg_catalog.pg_operator where "oid" = ${Segment.paramSegment(oid)(PgOperatorId.setter)}""".query(PgOperatorRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgOperatorId]): ZStream[ZConnection, Throwable, PgOperatorRow] = {
    sql"""select "oid", "oprname", "oprnamespace", "oprowner", "oprkind", "oprcanmerge", "oprcanhash", "oprleft", "oprright", "oprresult", "oprcom", "oprnegate", "oprcode", "oprrest", "oprjoin" from pg_catalog.pg_operator where "oid" = ANY(${Segment.paramSegment(oids)(PgOperatorId.arraySetter)})""".query(PgOperatorRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(oprname: String, oprleft: /* oid */ Long, oprright: /* oid */ Long, oprnamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgOperatorRow]] = {
    sql"""select "oprname", "oprleft", "oprright", "oprnamespace"
          from pg_catalog.pg_operator
          where "oprname" = ${Segment.paramSegment(oprname)(Setter.stringSetter)} AND "oprleft" = ${Segment.paramSegment(oprleft)(Setter.longSetter)} AND "oprright" = ${Segment.paramSegment(oprright)(Setter.longSetter)} AND "oprnamespace" = ${Segment.paramSegment(oprnamespace)(Setter.longSetter)}
       """.query(PgOperatorRow.jdbcDecoder).selectOne
  }
  override def update(row: PgOperatorRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_operator
          set "oprname" = ${Segment.paramSegment(row.oprname)(Setter.stringSetter)}::name,
              "oprnamespace" = ${Segment.paramSegment(row.oprnamespace)(Setter.longSetter)}::oid,
              "oprowner" = ${Segment.paramSegment(row.oprowner)(Setter.longSetter)}::oid,
              "oprkind" = ${Segment.paramSegment(row.oprkind)(Setter.stringSetter)}::char,
              "oprcanmerge" = ${Segment.paramSegment(row.oprcanmerge)(Setter.booleanSetter)},
              "oprcanhash" = ${Segment.paramSegment(row.oprcanhash)(Setter.booleanSetter)},
              "oprleft" = ${Segment.paramSegment(row.oprleft)(Setter.longSetter)}::oid,
              "oprright" = ${Segment.paramSegment(row.oprright)(Setter.longSetter)}::oid,
              "oprresult" = ${Segment.paramSegment(row.oprresult)(Setter.longSetter)}::oid,
              "oprcom" = ${Segment.paramSegment(row.oprcom)(Setter.longSetter)}::oid,
              "oprnegate" = ${Segment.paramSegment(row.oprnegate)(Setter.longSetter)}::oid,
              "oprcode" = ${Segment.paramSegment(row.oprcode)(TypoRegproc.setter)}::regproc,
              "oprrest" = ${Segment.paramSegment(row.oprrest)(TypoRegproc.setter)}::regproc,
              "oprjoin" = ${Segment.paramSegment(row.oprjoin)(TypoRegproc.setter)}::regproc
          where "oid" = ${Segment.paramSegment(oid)(PgOperatorId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgOperatorFields, PgOperatorRow] = {
    UpdateBuilder("pg_catalog.pg_operator", PgOperatorFields, PgOperatorRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgOperatorRow): ZIO[ZConnection, Throwable, UpdateResult[PgOperatorRow]] = {
    sql"""insert into pg_catalog.pg_operator("oid", "oprname", "oprnamespace", "oprowner", "oprkind", "oprcanmerge", "oprcanhash", "oprleft", "oprright", "oprresult", "oprcom", "oprnegate", "oprcode", "oprrest", "oprjoin")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgOperatorId.setter)}::oid,
            ${Segment.paramSegment(unsaved.oprname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.oprnamespace)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.oprowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.oprkind)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.oprcanmerge)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.oprcanhash)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.oprleft)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.oprright)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.oprresult)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.oprcom)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.oprnegate)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.oprcode)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.oprrest)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.oprjoin)(TypoRegproc.setter)}::regproc
          )
          on conflict ("oid")
          do update set
            "oprname" = EXCLUDED."oprname",
            "oprnamespace" = EXCLUDED."oprnamespace",
            "oprowner" = EXCLUDED."oprowner",
            "oprkind" = EXCLUDED."oprkind",
            "oprcanmerge" = EXCLUDED."oprcanmerge",
            "oprcanhash" = EXCLUDED."oprcanhash",
            "oprleft" = EXCLUDED."oprleft",
            "oprright" = EXCLUDED."oprright",
            "oprresult" = EXCLUDED."oprresult",
            "oprcom" = EXCLUDED."oprcom",
            "oprnegate" = EXCLUDED."oprnegate",
            "oprcode" = EXCLUDED."oprcode",
            "oprrest" = EXCLUDED."oprrest",
            "oprjoin" = EXCLUDED."oprjoin"
          returning "oid", "oprname", "oprnamespace", "oprowner", "oprkind", "oprcanmerge", "oprcanhash", "oprleft", "oprright", "oprresult", "oprcom", "oprnegate", "oprcode", "oprrest", "oprjoin"""".insertReturning(PgOperatorRow.jdbcDecoder)
  }
}
