/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_operator

import adventureworks.customtypes.TypoRegproc
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgOperatorRow(
  oid: PgOperatorId,
  oprname: String,
  oprnamespace: /* oid */ Long,
  oprowner: /* oid */ Long,
  oprkind: String,
  oprcanmerge: Boolean,
  oprcanhash: Boolean,
  oprleft: /* oid */ Long,
  oprright: /* oid */ Long,
  oprresult: /* oid */ Long,
  oprcom: /* oid */ Long,
  oprnegate: /* oid */ Long,
  oprcode: TypoRegproc,
  oprrest: TypoRegproc,
  oprjoin: TypoRegproc
)

object PgOperatorRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgOperatorRow] = new JdbcDecoder[PgOperatorRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgOperatorRow) =
      columIndex + 14 ->
        PgOperatorRow(
          oid = PgOperatorId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          oprname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          oprnamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          oprowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          oprkind = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 4, rs)._2,
          oprcanmerge = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 5, rs)._2,
          oprcanhash = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 6, rs)._2,
          oprleft = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 7, rs)._2,
          oprright = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 8, rs)._2,
          oprresult = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 9, rs)._2,
          oprcom = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 10, rs)._2,
          oprnegate = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 11, rs)._2,
          oprcode = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 12, rs)._2,
          oprrest = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 13, rs)._2,
          oprjoin = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 14, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgOperatorRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgOperatorId.jsonDecoder))
    val oprname = jsonObj.get("oprname").toRight("Missing field 'oprname'").flatMap(_.as(JsonDecoder.string))
    val oprnamespace = jsonObj.get("oprnamespace").toRight("Missing field 'oprnamespace'").flatMap(_.as(JsonDecoder.long))
    val oprowner = jsonObj.get("oprowner").toRight("Missing field 'oprowner'").flatMap(_.as(JsonDecoder.long))
    val oprkind = jsonObj.get("oprkind").toRight("Missing field 'oprkind'").flatMap(_.as(JsonDecoder.string))
    val oprcanmerge = jsonObj.get("oprcanmerge").toRight("Missing field 'oprcanmerge'").flatMap(_.as(JsonDecoder.boolean))
    val oprcanhash = jsonObj.get("oprcanhash").toRight("Missing field 'oprcanhash'").flatMap(_.as(JsonDecoder.boolean))
    val oprleft = jsonObj.get("oprleft").toRight("Missing field 'oprleft'").flatMap(_.as(JsonDecoder.long))
    val oprright = jsonObj.get("oprright").toRight("Missing field 'oprright'").flatMap(_.as(JsonDecoder.long))
    val oprresult = jsonObj.get("oprresult").toRight("Missing field 'oprresult'").flatMap(_.as(JsonDecoder.long))
    val oprcom = jsonObj.get("oprcom").toRight("Missing field 'oprcom'").flatMap(_.as(JsonDecoder.long))
    val oprnegate = jsonObj.get("oprnegate").toRight("Missing field 'oprnegate'").flatMap(_.as(JsonDecoder.long))
    val oprcode = jsonObj.get("oprcode").toRight("Missing field 'oprcode'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val oprrest = jsonObj.get("oprrest").toRight("Missing field 'oprrest'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val oprjoin = jsonObj.get("oprjoin").toRight("Missing field 'oprjoin'").flatMap(_.as(TypoRegproc.jsonDecoder))
    if (oid.isRight && oprname.isRight && oprnamespace.isRight && oprowner.isRight && oprkind.isRight && oprcanmerge.isRight && oprcanhash.isRight && oprleft.isRight && oprright.isRight && oprresult.isRight && oprcom.isRight && oprnegate.isRight && oprcode.isRight && oprrest.isRight && oprjoin.isRight)
      Right(PgOperatorRow(oid = oid.toOption.get, oprname = oprname.toOption.get, oprnamespace = oprnamespace.toOption.get, oprowner = oprowner.toOption.get, oprkind = oprkind.toOption.get, oprcanmerge = oprcanmerge.toOption.get, oprcanhash = oprcanhash.toOption.get, oprleft = oprleft.toOption.get, oprright = oprright.toOption.get, oprresult = oprresult.toOption.get, oprcom = oprcom.toOption.get, oprnegate = oprnegate.toOption.get, oprcode = oprcode.toOption.get, oprrest = oprrest.toOption.get, oprjoin = oprjoin.toOption.get))
    else Left(List[Either[String, Any]](oid, oprname, oprnamespace, oprowner, oprkind, oprcanmerge, oprcanhash, oprleft, oprright, oprresult, oprcom, oprnegate, oprcode, oprrest, oprjoin).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgOperatorRow] = new JsonEncoder[PgOperatorRow] {
    override def unsafeEncode(a: PgOperatorRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgOperatorId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""oprname":""")
      JsonEncoder.string.unsafeEncode(a.oprname, indent, out)
      out.write(",")
      out.write(""""oprnamespace":""")
      JsonEncoder.long.unsafeEncode(a.oprnamespace, indent, out)
      out.write(",")
      out.write(""""oprowner":""")
      JsonEncoder.long.unsafeEncode(a.oprowner, indent, out)
      out.write(",")
      out.write(""""oprkind":""")
      JsonEncoder.string.unsafeEncode(a.oprkind, indent, out)
      out.write(",")
      out.write(""""oprcanmerge":""")
      JsonEncoder.boolean.unsafeEncode(a.oprcanmerge, indent, out)
      out.write(",")
      out.write(""""oprcanhash":""")
      JsonEncoder.boolean.unsafeEncode(a.oprcanhash, indent, out)
      out.write(",")
      out.write(""""oprleft":""")
      JsonEncoder.long.unsafeEncode(a.oprleft, indent, out)
      out.write(",")
      out.write(""""oprright":""")
      JsonEncoder.long.unsafeEncode(a.oprright, indent, out)
      out.write(",")
      out.write(""""oprresult":""")
      JsonEncoder.long.unsafeEncode(a.oprresult, indent, out)
      out.write(",")
      out.write(""""oprcom":""")
      JsonEncoder.long.unsafeEncode(a.oprcom, indent, out)
      out.write(",")
      out.write(""""oprnegate":""")
      JsonEncoder.long.unsafeEncode(a.oprnegate, indent, out)
      out.write(",")
      out.write(""""oprcode":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.oprcode, indent, out)
      out.write(",")
      out.write(""""oprrest":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.oprrest, indent, out)
      out.write(",")
      out.write(""""oprjoin":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.oprjoin, indent, out)
      out.write("}")
    }
  }
}
