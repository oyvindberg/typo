/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_operator

import adventureworks.customtypes.TypoRegproc
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

class PgOperatorStructure[Row](val prefix: Option[String], val extract: Row => PgOperatorRow, val merge: (Row, PgOperatorRow) => Row)
  extends Relation[PgOperatorFields, PgOperatorRow, Row]
    with PgOperatorFields[Row] { outer =>

  override val oid = new IdField[PgOperatorId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val oprname = new Field[String, Row](prefix, "oprname", None, Some("name"))(x => extract(x).oprname, (row, value) => merge(row, extract(row).copy(oprname = value)))
  override val oprnamespace = new Field[/* oid */ Long, Row](prefix, "oprnamespace", None, Some("oid"))(x => extract(x).oprnamespace, (row, value) => merge(row, extract(row).copy(oprnamespace = value)))
  override val oprowner = new Field[/* oid */ Long, Row](prefix, "oprowner", None, Some("oid"))(x => extract(x).oprowner, (row, value) => merge(row, extract(row).copy(oprowner = value)))
  override val oprkind = new Field[String, Row](prefix, "oprkind", None, Some("char"))(x => extract(x).oprkind, (row, value) => merge(row, extract(row).copy(oprkind = value)))
  override val oprcanmerge = new Field[Boolean, Row](prefix, "oprcanmerge", None, None)(x => extract(x).oprcanmerge, (row, value) => merge(row, extract(row).copy(oprcanmerge = value)))
  override val oprcanhash = new Field[Boolean, Row](prefix, "oprcanhash", None, None)(x => extract(x).oprcanhash, (row, value) => merge(row, extract(row).copy(oprcanhash = value)))
  override val oprleft = new Field[/* oid */ Long, Row](prefix, "oprleft", None, Some("oid"))(x => extract(x).oprleft, (row, value) => merge(row, extract(row).copy(oprleft = value)))
  override val oprright = new Field[/* oid */ Long, Row](prefix, "oprright", None, Some("oid"))(x => extract(x).oprright, (row, value) => merge(row, extract(row).copy(oprright = value)))
  override val oprresult = new Field[/* oid */ Long, Row](prefix, "oprresult", None, Some("oid"))(x => extract(x).oprresult, (row, value) => merge(row, extract(row).copy(oprresult = value)))
  override val oprcom = new Field[/* oid */ Long, Row](prefix, "oprcom", None, Some("oid"))(x => extract(x).oprcom, (row, value) => merge(row, extract(row).copy(oprcom = value)))
  override val oprnegate = new Field[/* oid */ Long, Row](prefix, "oprnegate", None, Some("oid"))(x => extract(x).oprnegate, (row, value) => merge(row, extract(row).copy(oprnegate = value)))
  override val oprcode = new Field[TypoRegproc, Row](prefix, "oprcode", None, Some("regproc"))(x => extract(x).oprcode, (row, value) => merge(row, extract(row).copy(oprcode = value)))
  override val oprrest = new Field[TypoRegproc, Row](prefix, "oprrest", None, Some("regproc"))(x => extract(x).oprrest, (row, value) => merge(row, extract(row).copy(oprrest = value)))
  override val oprjoin = new Field[TypoRegproc, Row](prefix, "oprjoin", None, Some("regproc"))(x => extract(x).oprjoin, (row, value) => merge(row, extract(row).copy(oprjoin = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, oprname, oprnamespace, oprowner, oprkind, oprcanmerge, oprcanhash, oprleft, oprright, oprresult, oprcom, oprnegate, oprcode, oprrest, oprjoin)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgOperatorRow, merge: (NewRow, PgOperatorRow) => NewRow): PgOperatorStructure[NewRow] =
    new PgOperatorStructure(prefix, extract, merge)
}
