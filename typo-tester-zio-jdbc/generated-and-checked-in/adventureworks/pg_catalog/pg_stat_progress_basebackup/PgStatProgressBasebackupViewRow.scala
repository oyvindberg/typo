/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_basebackup

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatProgressBasebackupViewRow(
  pid: /* nullability unknown */ Option[Int],
  phase: /* nullability unknown */ Option[String],
  backupTotal: /* nullability unknown */ Option[Long],
  backupStreamed: /* nullability unknown */ Option[Long],
  tablespacesTotal: /* nullability unknown */ Option[Long],
  tablespacesStreamed: /* nullability unknown */ Option[Long]
)

object PgStatProgressBasebackupViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatProgressBasebackupViewRow] = new JdbcDecoder[PgStatProgressBasebackupViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatProgressBasebackupViewRow) =
      columIndex + 5 ->
        PgStatProgressBasebackupViewRow(
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 0, rs)._2,
          phase = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          backupTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 2, rs)._2,
          backupStreamed = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          tablespacesTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          tablespacesStreamed = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatProgressBasebackupViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val phase = jsonObj.get("phase").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val backupTotal = jsonObj.get("backup_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val backupStreamed = jsonObj.get("backup_streamed").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tablespacesTotal = jsonObj.get("tablespaces_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tablespacesStreamed = jsonObj.get("tablespaces_streamed").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (pid.isRight && phase.isRight && backupTotal.isRight && backupStreamed.isRight && tablespacesTotal.isRight && tablespacesStreamed.isRight)
      Right(PgStatProgressBasebackupViewRow(pid = pid.toOption.get, phase = phase.toOption.get, backupTotal = backupTotal.toOption.get, backupStreamed = backupStreamed.toOption.get, tablespacesTotal = tablespacesTotal.toOption.get, tablespacesStreamed = tablespacesStreamed.toOption.get))
    else Left(List[Either[String, Any]](pid, phase, backupTotal, backupStreamed, tablespacesTotal, tablespacesStreamed).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatProgressBasebackupViewRow] = new JsonEncoder[PgStatProgressBasebackupViewRow] {
    override def unsafeEncode(a: PgStatProgressBasebackupViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""phase":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.phase, indent, out)
      out.write(",")
      out.write(""""backup_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.backupTotal, indent, out)
      out.write(",")
      out.write(""""backup_streamed":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.backupStreamed, indent, out)
      out.write(",")
      out.write(""""tablespaces_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tablespacesTotal, indent, out)
      out.write(",")
      out.write(""""tablespaces_streamed":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tablespacesStreamed, indent, out)
      out.write("}")
    }
  }
}
