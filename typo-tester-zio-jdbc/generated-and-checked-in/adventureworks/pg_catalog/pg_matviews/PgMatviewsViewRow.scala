/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_matviews

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgMatviewsViewRow(
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  matviewname: String,
  matviewowner: /* nullability unknown */ Option[String],
  /** Points to [[pg_tablespace.PgTablespaceRow.spcname]] */
  tablespace: Option[String],
  /** Points to [[pg_class.PgClassRow.relhasindex]] */
  hasindexes: Boolean,
  /** Points to [[pg_class.PgClassRow.relispopulated]] */
  ispopulated: Boolean,
  definition: /* nullability unknown */ Option[String]
)

object PgMatviewsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgMatviewsViewRow] = new JdbcDecoder[PgMatviewsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgMatviewsViewRow) =
      columIndex + 6 ->
        PgMatviewsViewRow(
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          matviewname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          matviewowner = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          tablespace = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          hasindexes = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 4, rs)._2,
          ispopulated = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 5, rs)._2,
          definition = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgMatviewsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val matviewname = jsonObj.get("matviewname").toRight("Missing field 'matviewname'").flatMap(_.as(JsonDecoder.string))
    val matviewowner = jsonObj.get("matviewowner").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tablespace = jsonObj.get("tablespace").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val hasindexes = jsonObj.get("hasindexes").toRight("Missing field 'hasindexes'").flatMap(_.as(JsonDecoder.boolean))
    val ispopulated = jsonObj.get("ispopulated").toRight("Missing field 'ispopulated'").flatMap(_.as(JsonDecoder.boolean))
    val definition = jsonObj.get("definition").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (schemaname.isRight && matviewname.isRight && matviewowner.isRight && tablespace.isRight && hasindexes.isRight && ispopulated.isRight && definition.isRight)
      Right(PgMatviewsViewRow(schemaname = schemaname.toOption.get, matviewname = matviewname.toOption.get, matviewowner = matviewowner.toOption.get, tablespace = tablespace.toOption.get, hasindexes = hasindexes.toOption.get, ispopulated = ispopulated.toOption.get, definition = definition.toOption.get))
    else Left(List[Either[String, Any]](schemaname, matviewname, matviewowner, tablespace, hasindexes, ispopulated, definition).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgMatviewsViewRow] = new JsonEncoder[PgMatviewsViewRow] {
    override def unsafeEncode(a: PgMatviewsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""matviewname":""")
      JsonEncoder.string.unsafeEncode(a.matviewname, indent, out)
      out.write(",")
      out.write(""""matviewowner":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.matviewowner, indent, out)
      out.write(",")
      out.write(""""tablespace":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.tablespace, indent, out)
      out.write(",")
      out.write(""""hasindexes":""")
      JsonEncoder.boolean.unsafeEncode(a.hasindexes, indent, out)
      out.write(",")
      out.write(""""ispopulated":""")
      JsonEncoder.boolean.unsafeEncode(a.ispopulated, indent, out)
      out.write(",")
      out.write(""""definition":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.definition, indent, out)
      out.write("}")
    }
  }
}
