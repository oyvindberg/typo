/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statio_all_tables

import adventureworks.pg_catalog.pg_class.PgClassId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatioAllTablesViewRow(
  /** Points to [[pg_class.PgClassRow.oid]] */
  relid: PgClassId,
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  relname: String,
  heapBlksRead: /* nullability unknown */ Option[Long],
  heapBlksHit: /* nullability unknown */ Option[Long],
  idxBlksRead: /* nullability unknown */ Option[Long],
  idxBlksHit: /* nullability unknown */ Option[Long],
  toastBlksRead: /* nullability unknown */ Option[Long],
  toastBlksHit: /* nullability unknown */ Option[Long],
  tidxBlksRead: /* nullability unknown */ Option[Long],
  tidxBlksHit: /* nullability unknown */ Option[Long]
)

object PgStatioAllTablesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatioAllTablesViewRow] = new JdbcDecoder[PgStatioAllTablesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatioAllTablesViewRow) =
      columIndex + 10 ->
        PgStatioAllTablesViewRow(
          relid = PgClassId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          relname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          heapBlksRead = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          heapBlksHit = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          idxBlksRead = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          idxBlksHit = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 6, rs)._2,
          toastBlksRead = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          toastBlksHit = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 8, rs)._2,
          tidxBlksRead = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 9, rs)._2,
          tidxBlksHit = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 10, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatioAllTablesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val relid = jsonObj.get("relid").toRight("Missing field 'relid'").flatMap(_.as(PgClassId.jsonDecoder))
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val relname = jsonObj.get("relname").toRight("Missing field 'relname'").flatMap(_.as(JsonDecoder.string))
    val heapBlksRead = jsonObj.get("heap_blks_read").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val heapBlksHit = jsonObj.get("heap_blks_hit").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val idxBlksRead = jsonObj.get("idx_blks_read").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val idxBlksHit = jsonObj.get("idx_blks_hit").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val toastBlksRead = jsonObj.get("toast_blks_read").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val toastBlksHit = jsonObj.get("toast_blks_hit").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tidxBlksRead = jsonObj.get("tidx_blks_read").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tidxBlksHit = jsonObj.get("tidx_blks_hit").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (relid.isRight && schemaname.isRight && relname.isRight && heapBlksRead.isRight && heapBlksHit.isRight && idxBlksRead.isRight && idxBlksHit.isRight && toastBlksRead.isRight && toastBlksHit.isRight && tidxBlksRead.isRight && tidxBlksHit.isRight)
      Right(PgStatioAllTablesViewRow(relid = relid.toOption.get, schemaname = schemaname.toOption.get, relname = relname.toOption.get, heapBlksRead = heapBlksRead.toOption.get, heapBlksHit = heapBlksHit.toOption.get, idxBlksRead = idxBlksRead.toOption.get, idxBlksHit = idxBlksHit.toOption.get, toastBlksRead = toastBlksRead.toOption.get, toastBlksHit = toastBlksHit.toOption.get, tidxBlksRead = tidxBlksRead.toOption.get, tidxBlksHit = tidxBlksHit.toOption.get))
    else Left(List[Either[String, Any]](relid, schemaname, relname, heapBlksRead, heapBlksHit, idxBlksRead, idxBlksHit, toastBlksRead, toastBlksHit, tidxBlksRead, tidxBlksHit).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatioAllTablesViewRow] = new JsonEncoder[PgStatioAllTablesViewRow] {
    override def unsafeEncode(a: PgStatioAllTablesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""relid":""")
      PgClassId.jsonEncoder.unsafeEncode(a.relid, indent, out)
      out.write(",")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""relname":""")
      JsonEncoder.string.unsafeEncode(a.relname, indent, out)
      out.write(",")
      out.write(""""heap_blks_read":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.heapBlksRead, indent, out)
      out.write(",")
      out.write(""""heap_blks_hit":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.heapBlksHit, indent, out)
      out.write(",")
      out.write(""""idx_blks_read":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.idxBlksRead, indent, out)
      out.write(",")
      out.write(""""idx_blks_hit":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.idxBlksHit, indent, out)
      out.write(",")
      out.write(""""toast_blks_read":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.toastBlksRead, indent, out)
      out.write(",")
      out.write(""""toast_blks_hit":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.toastBlksHit, indent, out)
      out.write(",")
      out.write(""""tidx_blks_read":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tidxBlksRead, indent, out)
      out.write(",")
      out.write(""""tidx_blks_hit":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tidxBlksHit, indent, out)
      out.write("}")
    }
  }
}
