/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_available_extensions

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgAvailableExtensionsViewRow(
  name: /* nullability unknown */ Option[String],
  defaultVersion: /* nullability unknown */ Option[String],
  /** Points to [[pg_extension.PgExtensionRow.extversion]] */
  installedVersion: Option[String],
  comment: /* nullability unknown */ Option[String]
)

object PgAvailableExtensionsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgAvailableExtensionsViewRow] = new JdbcDecoder[PgAvailableExtensionsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgAvailableExtensionsViewRow) =
      columIndex + 3 ->
        PgAvailableExtensionsViewRow(
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          defaultVersion = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          installedVersion = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          comment = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgAvailableExtensionsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val defaultVersion = jsonObj.get("default_version").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val installedVersion = jsonObj.get("installed_version").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val comment = jsonObj.get("comment").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (name.isRight && defaultVersion.isRight && installedVersion.isRight && comment.isRight)
      Right(PgAvailableExtensionsViewRow(name = name.toOption.get, defaultVersion = defaultVersion.toOption.get, installedVersion = installedVersion.toOption.get, comment = comment.toOption.get))
    else Left(List[Either[String, Any]](name, defaultVersion, installedVersion, comment).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgAvailableExtensionsViewRow] = new JsonEncoder[PgAvailableExtensionsViewRow] {
    override def unsafeEncode(a: PgAvailableExtensionsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""default_version":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.defaultVersion, indent, out)
      out.write(",")
      out.write(""""installed_version":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.installedVersion, indent, out)
      out.write(",")
      out.write(""""comment":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.comment, indent, out)
      out.write("}")
    }
  }
}
