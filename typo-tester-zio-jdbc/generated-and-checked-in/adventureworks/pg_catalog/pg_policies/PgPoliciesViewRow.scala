/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_policies

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgPoliciesViewRow(
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: String,
  /** Points to [[pg_class.PgClassRow.relname]] */
  tablename: String,
  /** Points to [[pg_policy.PgPolicyRow.polname]] */
  policyname: String,
  permissive: /* nullability unknown */ Option[String],
  roles: /* nullability unknown */ Option[Array[String]],
  cmd: /* nullability unknown */ Option[String],
  qual: /* nullability unknown */ Option[String],
  withCheck: /* nullability unknown */ Option[String]
)

object PgPoliciesViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgPoliciesViewRow] = new JdbcDecoder[PgPoliciesViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgPoliciesViewRow) =
      columIndex + 7 ->
        PgPoliciesViewRow(
          schemaname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 0, rs)._2,
          tablename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          policyname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          permissive = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          roles = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 4, rs)._2,
          cmd = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          qual = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          withCheck = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgPoliciesViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val schemaname = jsonObj.get("schemaname").toRight("Missing field 'schemaname'").flatMap(_.as(JsonDecoder.string))
    val tablename = jsonObj.get("tablename").toRight("Missing field 'tablename'").flatMap(_.as(JsonDecoder.string))
    val policyname = jsonObj.get("policyname").toRight("Missing field 'policyname'").flatMap(_.as(JsonDecoder.string))
    val permissive = jsonObj.get("permissive").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val roles = jsonObj.get("roles").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val cmd = jsonObj.get("cmd").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val qual = jsonObj.get("qual").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val withCheck = jsonObj.get("with_check").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (schemaname.isRight && tablename.isRight && policyname.isRight && permissive.isRight && roles.isRight && cmd.isRight && qual.isRight && withCheck.isRight)
      Right(PgPoliciesViewRow(schemaname = schemaname.toOption.get, tablename = tablename.toOption.get, policyname = policyname.toOption.get, permissive = permissive.toOption.get, roles = roles.toOption.get, cmd = cmd.toOption.get, qual = qual.toOption.get, withCheck = withCheck.toOption.get))
    else Left(List[Either[String, Any]](schemaname, tablename, policyname, permissive, roles, cmd, qual, withCheck).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgPoliciesViewRow] = new JsonEncoder[PgPoliciesViewRow] {
    override def unsafeEncode(a: PgPoliciesViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""schemaname":""")
      JsonEncoder.string.unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""tablename":""")
      JsonEncoder.string.unsafeEncode(a.tablename, indent, out)
      out.write(",")
      out.write(""""policyname":""")
      JsonEncoder.string.unsafeEncode(a.policyname, indent, out)
      out.write(",")
      out.write(""""permissive":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.permissive, indent, out)
      out.write(",")
      out.write(""""roles":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.roles, indent, out)
      out.write(",")
      out.write(""""cmd":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.cmd, indent, out)
      out.write(",")
      out.write(""""qual":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.qual, indent, out)
      out.write(",")
      out.write(""""with_check":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.withCheck, indent, out)
      out.write("}")
    }
  }
}
