/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_settings

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgSettingsViewRow(
  name: /* nullability unknown */ Option[String],
  setting: /* nullability unknown */ Option[String],
  unit: /* nullability unknown */ Option[String],
  category: /* nullability unknown */ Option[String],
  shortDesc: /* nullability unknown */ Option[String],
  extraDesc: /* nullability unknown */ Option[String],
  context: /* nullability unknown */ Option[String],
  vartype: /* nullability unknown */ Option[String],
  source: /* nullability unknown */ Option[String],
  minVal: /* nullability unknown */ Option[String],
  maxVal: /* nullability unknown */ Option[String],
  enumvals: /* nullability unknown */ Option[Array[String]],
  bootVal: /* nullability unknown */ Option[String],
  resetVal: /* nullability unknown */ Option[String],
  sourcefile: /* nullability unknown */ Option[String],
  sourceline: /* nullability unknown */ Option[Int],
  pendingRestart: /* nullability unknown */ Option[Boolean]
)

object PgSettingsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgSettingsViewRow] = new JdbcDecoder[PgSettingsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgSettingsViewRow) =
      columIndex + 16 ->
        PgSettingsViewRow(
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          setting = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          unit = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          category = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          shortDesc = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          extraDesc = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          context = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          vartype = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          source = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          minVal = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2,
          maxVal = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 10, rs)._2,
          enumvals = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 11, rs)._2,
          bootVal = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 12, rs)._2,
          resetVal = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 13, rs)._2,
          sourcefile = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 14, rs)._2,
          sourceline = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 15, rs)._2,
          pendingRestart = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 16, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgSettingsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val setting = jsonObj.get("setting").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val unit = jsonObj.get("unit").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val category = jsonObj.get("category").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val shortDesc = jsonObj.get("short_desc").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val extraDesc = jsonObj.get("extra_desc").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val context = jsonObj.get("context").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val vartype = jsonObj.get("vartype").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val source = jsonObj.get("source").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val minVal = jsonObj.get("min_val").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val maxVal = jsonObj.get("max_val").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val enumvals = jsonObj.get("enumvals").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val bootVal = jsonObj.get("boot_val").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val resetVal = jsonObj.get("reset_val").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val sourcefile = jsonObj.get("sourcefile").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val sourceline = jsonObj.get("sourceline").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val pendingRestart = jsonObj.get("pending_restart").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    if (name.isRight && setting.isRight && unit.isRight && category.isRight && shortDesc.isRight && extraDesc.isRight && context.isRight && vartype.isRight && source.isRight && minVal.isRight && maxVal.isRight && enumvals.isRight && bootVal.isRight && resetVal.isRight && sourcefile.isRight && sourceline.isRight && pendingRestart.isRight)
      Right(PgSettingsViewRow(name = name.toOption.get, setting = setting.toOption.get, unit = unit.toOption.get, category = category.toOption.get, shortDesc = shortDesc.toOption.get, extraDesc = extraDesc.toOption.get, context = context.toOption.get, vartype = vartype.toOption.get, source = source.toOption.get, minVal = minVal.toOption.get, maxVal = maxVal.toOption.get, enumvals = enumvals.toOption.get, bootVal = bootVal.toOption.get, resetVal = resetVal.toOption.get, sourcefile = sourcefile.toOption.get, sourceline = sourceline.toOption.get, pendingRestart = pendingRestart.toOption.get))
    else Left(List[Either[String, Any]](name, setting, unit, category, shortDesc, extraDesc, context, vartype, source, minVal, maxVal, enumvals, bootVal, resetVal, sourcefile, sourceline, pendingRestart).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgSettingsViewRow] = new JsonEncoder[PgSettingsViewRow] {
    override def unsafeEncode(a: PgSettingsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""setting":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.setting, indent, out)
      out.write(",")
      out.write(""""unit":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.unit, indent, out)
      out.write(",")
      out.write(""""category":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.category, indent, out)
      out.write(",")
      out.write(""""short_desc":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.shortDesc, indent, out)
      out.write(",")
      out.write(""""extra_desc":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.extraDesc, indent, out)
      out.write(",")
      out.write(""""context":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.context, indent, out)
      out.write(",")
      out.write(""""vartype":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.vartype, indent, out)
      out.write(",")
      out.write(""""source":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.source, indent, out)
      out.write(",")
      out.write(""""min_val":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.minVal, indent, out)
      out.write(",")
      out.write(""""max_val":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.maxVal, indent, out)
      out.write(",")
      out.write(""""enumvals":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.enumvals, indent, out)
      out.write(",")
      out.write(""""boot_val":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.bootVal, indent, out)
      out.write(",")
      out.write(""""reset_val":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.resetVal, indent, out)
      out.write(",")
      out.write(""""sourcefile":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.sourcefile, indent, out)
      out.write(",")
      out.write(""""sourceline":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.sourceline, indent, out)
      out.write(",")
      out.write(""""pending_restart":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.pendingRestart, indent, out)
      out.write("}")
    }
  }
}
