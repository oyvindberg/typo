/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_depend

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgDependRow(
  classid: /* oid */ Long,
  objid: /* oid */ Long,
  objsubid: Int,
  refclassid: /* oid */ Long,
  refobjid: /* oid */ Long,
  refobjsubid: Int,
  deptype: String
)

object PgDependRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgDependRow] = new JdbcDecoder[PgDependRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgDependRow) =
      columIndex + 6 ->
        PgDependRow(
          classid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 0, rs)._2,
          objid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          objsubid = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 2, rs)._2,
          refclassid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          refobjid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          refobjsubid = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 5, rs)._2,
          deptype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgDependRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val classid = jsonObj.get("classid").toRight("Missing field 'classid'").flatMap(_.as(JsonDecoder.long))
    val objid = jsonObj.get("objid").toRight("Missing field 'objid'").flatMap(_.as(JsonDecoder.long))
    val objsubid = jsonObj.get("objsubid").toRight("Missing field 'objsubid'").flatMap(_.as(JsonDecoder.int))
    val refclassid = jsonObj.get("refclassid").toRight("Missing field 'refclassid'").flatMap(_.as(JsonDecoder.long))
    val refobjid = jsonObj.get("refobjid").toRight("Missing field 'refobjid'").flatMap(_.as(JsonDecoder.long))
    val refobjsubid = jsonObj.get("refobjsubid").toRight("Missing field 'refobjsubid'").flatMap(_.as(JsonDecoder.int))
    val deptype = jsonObj.get("deptype").toRight("Missing field 'deptype'").flatMap(_.as(JsonDecoder.string))
    if (classid.isRight && objid.isRight && objsubid.isRight && refclassid.isRight && refobjid.isRight && refobjsubid.isRight && deptype.isRight)
      Right(PgDependRow(classid = classid.toOption.get, objid = objid.toOption.get, objsubid = objsubid.toOption.get, refclassid = refclassid.toOption.get, refobjid = refobjid.toOption.get, refobjsubid = refobjsubid.toOption.get, deptype = deptype.toOption.get))
    else Left(List[Either[String, Any]](classid, objid, objsubid, refclassid, refobjid, refobjsubid, deptype).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgDependRow] = new JsonEncoder[PgDependRow] {
    override def unsafeEncode(a: PgDependRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""classid":""")
      JsonEncoder.long.unsafeEncode(a.classid, indent, out)
      out.write(",")
      out.write(""""objid":""")
      JsonEncoder.long.unsafeEncode(a.objid, indent, out)
      out.write(",")
      out.write(""""objsubid":""")
      JsonEncoder.int.unsafeEncode(a.objsubid, indent, out)
      out.write(",")
      out.write(""""refclassid":""")
      JsonEncoder.long.unsafeEncode(a.refclassid, indent, out)
      out.write(",")
      out.write(""""refobjid":""")
      JsonEncoder.long.unsafeEncode(a.refobjid, indent, out)
      out.write(",")
      out.write(""""refobjsubid":""")
      JsonEncoder.int.unsafeEncode(a.refobjsubid, indent, out)
      out.write(",")
      out.write(""""deptype":""")
      JsonEncoder.string.unsafeEncode(a.deptype, indent, out)
      out.write("}")
    }
  }
}
