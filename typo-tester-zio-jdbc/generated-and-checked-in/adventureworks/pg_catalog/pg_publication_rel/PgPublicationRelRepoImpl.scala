/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_publication_rel

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgPublicationRelRepoImpl extends PgPublicationRelRepo {
  override def delete(oid: PgPublicationRelId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_publication_rel where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgPublicationRelFields, PgPublicationRelRow] = {
    DeleteBuilder("pg_catalog.pg_publication_rel", PgPublicationRelFields)
  }
  override def insert(unsaved: PgPublicationRelRow): ZIO[ZConnection, Throwable, PgPublicationRelRow] = {
    sql"""insert into pg_catalog.pg_publication_rel("oid", "prpubid", "prrelid")
          values (???::oid, ???::oid, ???::oid)
          returning "oid", "prpubid", "prrelid"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgPublicationRelFields, PgPublicationRelRow] = {
    SelectBuilderSql("pg_catalog.pg_publication_rel", PgPublicationRelFields, PgPublicationRelRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgPublicationRelRow] = {
    sql"""select "oid", "prpubid", "prrelid" from pg_catalog.pg_publication_rel""".query[PgPublicationRelRow].selectStream
  }
  override def selectById(oid: PgPublicationRelId): ZIO[ZConnection, Throwable, Option[PgPublicationRelRow]] = {
    sql"""select "oid", "prpubid", "prrelid" from pg_catalog.pg_publication_rel where "oid" = ???""".query[PgPublicationRelRow].selectOne
  }
  override def selectByIds(oids: Array[PgPublicationRelId]): ZStream[ZConnection, Throwable, PgPublicationRelRow] = {
    sql"""select "oid", "prpubid", "prrelid" from pg_catalog.pg_publication_rel where "oid" = ANY(${oids})""".query[PgPublicationRelRow].selectStream
  }
  override def selectByUnique(prrelid: /* oid */ Long, prpubid: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgPublicationRelRow]] = {
    sql"""select "prrelid", "prpubid"
          from pg_catalog.pg_publication_rel
          where "prrelid" = ??? AND "prpubid" = ???
       """.query[PgPublicationRelRow].selectOne
  }
  override def update(row: PgPublicationRelRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_publication_rel
          set "prpubid" = ???::oid,
              "prrelid" = ???::oid
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgPublicationRelFields, PgPublicationRelRow] = {
    UpdateBuilder("pg_catalog.pg_publication_rel", PgPublicationRelFields, PgPublicationRelRow.read)
  }
  override def upsert(unsaved: PgPublicationRelRow): ZIO[ZConnection, Throwable, PgPublicationRelRow] = {
    sql"""insert into pg_catalog.pg_publication_rel("oid", "prpubid", "prrelid")
          values (
            ???::oid,
            ???::oid,
            ???::oid
          )
          on conflict ("oid")
          do update set
            "prpubid" = EXCLUDED."prpubid",
            "prrelid" = EXCLUDED."prrelid"
          returning "oid", "prpubid", "prrelid"
       """.query(???).unique
  }
}
