/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_origin_status

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgReplicationOriginStatusViewRow(
  localId: /* nullability unknown */ Option[/* oid */ Long],
  externalId: /* nullability unknown */ Option[String],
  remoteLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  localLsn: /* nullability unknown */ Option[/* pg_lsn */ Long]
)

object PgReplicationOriginStatusViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgReplicationOriginStatusViewRow] = new JdbcDecoder[PgReplicationOriginStatusViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgReplicationOriginStatusViewRow) =
      columIndex + 3 ->
        PgReplicationOriginStatusViewRow(
          localId = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 0, rs)._2,
          externalId = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          remoteLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 2, rs)._2,
          localLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgReplicationOriginStatusViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val localId = jsonObj.get("local_id").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val externalId = jsonObj.get("external_id").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val remoteLsn = jsonObj.get("remote_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val localLsn = jsonObj.get("local_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (localId.isRight && externalId.isRight && remoteLsn.isRight && localLsn.isRight)
      Right(PgReplicationOriginStatusViewRow(localId = localId.toOption.get, externalId = externalId.toOption.get, remoteLsn = remoteLsn.toOption.get, localLsn = localLsn.toOption.get))
    else Left(List[Either[String, Any]](localId, externalId, remoteLsn, localLsn).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgReplicationOriginStatusViewRow] = new JsonEncoder[PgReplicationOriginStatusViewRow] {
    override def unsafeEncode(a: PgReplicationOriginStatusViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""local_id":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.localId, indent, out)
      out.write(",")
      out.write(""""external_id":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.externalId, indent, out)
      out.write(",")
      out.write(""""remote_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.remoteLsn, indent, out)
      out.write(",")
      out.write(""""local_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.localLsn, indent, out)
      out.write("}")
    }
  }
}
