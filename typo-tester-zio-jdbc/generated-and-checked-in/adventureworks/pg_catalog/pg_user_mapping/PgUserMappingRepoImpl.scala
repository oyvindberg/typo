/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_user_mapping

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgUserMappingRepoImpl extends PgUserMappingRepo {
  override def delete(oid: PgUserMappingId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_user_mapping where "oid" = ${Segment.paramSegment(oid)(PgUserMappingId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgUserMappingFields, PgUserMappingRow] = {
    DeleteBuilder("pg_catalog.pg_user_mapping", PgUserMappingFields)
  }
  override def insert(unsaved: PgUserMappingRow): ZIO[ZConnection, Throwable, PgUserMappingRow] = {
    sql"""insert into pg_catalog.pg_user_mapping("oid", "umuser", "umserver", "umoptions")
          values (${Segment.paramSegment(unsaved.oid)(PgUserMappingId.setter)}::oid, ${Segment.paramSegment(unsaved.umuser)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.umserver)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.umoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text)
          returning "oid", "umuser", "umserver", "umoptions"
       """.insertReturning(PgUserMappingRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgUserMappingFields, PgUserMappingRow] = {
    SelectBuilderSql("pg_catalog.pg_user_mapping", PgUserMappingFields, PgUserMappingRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgUserMappingRow] = {
    sql"""select "oid", "umuser", "umserver", "umoptions" from pg_catalog.pg_user_mapping""".query(PgUserMappingRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgUserMappingId): ZIO[ZConnection, Throwable, Option[PgUserMappingRow]] = {
    sql"""select "oid", "umuser", "umserver", "umoptions" from pg_catalog.pg_user_mapping where "oid" = ${Segment.paramSegment(oid)(PgUserMappingId.setter)}""".query(PgUserMappingRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgUserMappingId]): ZStream[ZConnection, Throwable, PgUserMappingRow] = {
    sql"""select "oid", "umuser", "umserver", "umoptions" from pg_catalog.pg_user_mapping where "oid" = ANY(${Segment.paramSegment(oids)(PgUserMappingId.arraySetter)})""".query(PgUserMappingRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(umuser: /* oid */ Long, umserver: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgUserMappingRow]] = {
    sql"""select "umuser", "umserver"
          from pg_catalog.pg_user_mapping
          where "umuser" = ${Segment.paramSegment(umuser)(Setter.longSetter)} AND "umserver" = ${Segment.paramSegment(umserver)(Setter.longSetter)}
       """.query(PgUserMappingRow.jdbcDecoder).selectOne
  }
  override def update(row: PgUserMappingRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_user_mapping
          set "umuser" = ${Segment.paramSegment(row.umuser)(Setter.longSetter)}::oid,
              "umserver" = ${Segment.paramSegment(row.umserver)(Setter.longSetter)}::oid,
              "umoptions" = ${Segment.paramSegment(row.umoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          where "oid" = ${Segment.paramSegment(oid)(PgUserMappingId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgUserMappingFields, PgUserMappingRow] = {
    UpdateBuilder("pg_catalog.pg_user_mapping", PgUserMappingFields, PgUserMappingRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgUserMappingRow): ZIO[ZConnection, Throwable, UpdateResult[PgUserMappingRow]] = {
    sql"""insert into pg_catalog.pg_user_mapping("oid", "umuser", "umserver", "umoptions")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgUserMappingId.setter)}::oid,
            ${Segment.paramSegment(unsaved.umuser)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.umserver)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.umoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          )
          on conflict ("oid")
          do update set
            "umuser" = EXCLUDED."umuser",
            "umserver" = EXCLUDED."umserver",
            "umoptions" = EXCLUDED."umoptions"
          returning "oid", "umuser", "umserver", "umoptions"""".insertReturning(PgUserMappingRow.jdbcDecoder)
  }
}
