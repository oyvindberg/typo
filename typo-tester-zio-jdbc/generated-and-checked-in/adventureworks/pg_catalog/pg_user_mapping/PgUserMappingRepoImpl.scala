/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_user_mapping

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgUserMappingRepoImpl extends PgUserMappingRepo {
  override def delete(oid: PgUserMappingId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_user_mapping where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgUserMappingFields, PgUserMappingRow] = {
    DeleteBuilder("pg_catalog.pg_user_mapping", PgUserMappingFields)
  }
  override def insert(unsaved: PgUserMappingRow): ZIO[ZConnection, Throwable, PgUserMappingRow] = {
    sql"""insert into pg_catalog.pg_user_mapping("oid", "umuser", "umserver", "umoptions")
          values (???::oid, ???::oid, ???::oid, ???::_text)
          returning "oid", "umuser", "umserver", "umoptions"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgUserMappingFields, PgUserMappingRow] = {
    SelectBuilderSql("pg_catalog.pg_user_mapping", PgUserMappingFields, PgUserMappingRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgUserMappingRow] = {
    sql"""select "oid", "umuser", "umserver", "umoptions" from pg_catalog.pg_user_mapping""".query[PgUserMappingRow].selectStream
  }
  override def selectById(oid: PgUserMappingId): ZIO[ZConnection, Throwable, Option[PgUserMappingRow]] = {
    sql"""select "oid", "umuser", "umserver", "umoptions" from pg_catalog.pg_user_mapping where "oid" = ???""".query[PgUserMappingRow].selectOne
  }
  override def selectByIds(oids: Array[PgUserMappingId]): ZStream[ZConnection, Throwable, PgUserMappingRow] = {
    sql"""select "oid", "umuser", "umserver", "umoptions" from pg_catalog.pg_user_mapping where "oid" = ANY(${oids})""".query[PgUserMappingRow].selectStream
  }
  override def selectByUnique(umuser: /* oid */ Long, umserver: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgUserMappingRow]] = {
    sql"""select "umuser", "umserver"
          from pg_catalog.pg_user_mapping
          where "umuser" = ??? AND "umserver" = ???
       """.query[PgUserMappingRow].selectOne
  }
  override def update(row: PgUserMappingRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_user_mapping
          set "umuser" = ???::oid,
              "umserver" = ???::oid,
              "umoptions" = ???::_text
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgUserMappingFields, PgUserMappingRow] = {
    UpdateBuilder("pg_catalog.pg_user_mapping", PgUserMappingFields, PgUserMappingRow.read)
  }
  override def upsert(unsaved: PgUserMappingRow): ZIO[ZConnection, Throwable, PgUserMappingRow] = {
    sql"""insert into pg_catalog.pg_user_mapping("oid", "umuser", "umserver", "umoptions")
          values (
            ???::oid,
            ???::oid,
            ???::oid,
            ???::_text
          )
          on conflict ("oid")
          do update set
            "umuser" = EXCLUDED."umuser",
            "umserver" = EXCLUDED."umserver",
            "umoptions" = EXCLUDED."umoptions"
          returning "oid", "umuser", "umserver", "umoptions"
       """.query(???).unique
  }
}
