/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_user_mapping

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgUserMappingRow(
  oid: PgUserMappingId,
  umuser: /* oid */ Long,
  umserver: /* oid */ Long,
  umoptions: Option[Array[String]]
)

object PgUserMappingRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgUserMappingRow] = new JdbcDecoder[PgUserMappingRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgUserMappingRow) =
      columIndex + 3 ->
        PgUserMappingRow(
          oid = PgUserMappingId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          umuser = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          umserver = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          umoptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgUserMappingRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgUserMappingId.jsonDecoder))
    val umuser = jsonObj.get("umuser").toRight("Missing field 'umuser'").flatMap(_.as(JsonDecoder.long))
    val umserver = jsonObj.get("umserver").toRight("Missing field 'umserver'").flatMap(_.as(JsonDecoder.long))
    val umoptions = jsonObj.get("umoptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    if (oid.isRight && umuser.isRight && umserver.isRight && umoptions.isRight)
      Right(PgUserMappingRow(oid = oid.toOption.get, umuser = umuser.toOption.get, umserver = umserver.toOption.get, umoptions = umoptions.toOption.get))
    else Left(List[Either[String, Any]](oid, umuser, umserver, umoptions).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgUserMappingRow] = new JsonEncoder[PgUserMappingRow] {
    override def unsafeEncode(a: PgUserMappingRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgUserMappingId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""umuser":""")
      JsonEncoder.long.unsafeEncode(a.umuser, indent, out)
      out.write(",")
      out.write(""""umserver":""")
      JsonEncoder.long.unsafeEncode(a.umserver, indent, out)
      out.write(",")
      out.write(""""umoptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.umoptions, indent, out)
      out.write("}")
    }
  }
}
