/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_attribute

import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoAnyArray
import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgAttributeRow(
  attrelid: /* oid */ Long,
  attname: String,
  atttypid: /* oid */ Long,
  attstattarget: Int,
  attlen: TypoShort,
  attnum: TypoShort,
  attndims: Int,
  attcacheoff: Int,
  atttypmod: Int,
  attbyval: Boolean,
  attalign: String,
  attstorage: String,
  attcompression: String,
  attnotnull: Boolean,
  atthasdef: Boolean,
  atthasmissing: Boolean,
  attidentity: String,
  attgenerated: String,
  attisdropped: Boolean,
  attislocal: Boolean,
  attinhcount: Int,
  attcollation: /* oid */ Long,
  attacl: Option[Array[TypoAclItem]],
  attoptions: Option[Array[String]],
  attfdwoptions: Option[Array[String]],
  attmissingval: Option[TypoAnyArray]
){
   val compositeId: PgAttributeId = PgAttributeId(attrelid, attnum)
 }

object PgAttributeRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgAttributeRow] = new JdbcDecoder[PgAttributeRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgAttributeRow) =
      columIndex + 25 ->
        PgAttributeRow(
          attrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 0, rs)._2,
          attname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          atttypid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          attstattarget = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 3, rs)._2,
          attlen = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          attnum = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          attndims = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 6, rs)._2,
          attcacheoff = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 7, rs)._2,
          atttypmod = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 8, rs)._2,
          attbyval = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 9, rs)._2,
          attalign = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 10, rs)._2,
          attstorage = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 11, rs)._2,
          attcompression = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 12, rs)._2,
          attnotnull = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 13, rs)._2,
          atthasdef = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 14, rs)._2,
          atthasmissing = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 15, rs)._2,
          attidentity = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 16, rs)._2,
          attgenerated = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 17, rs)._2,
          attisdropped = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 18, rs)._2,
          attislocal = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 19, rs)._2,
          attinhcount = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 20, rs)._2,
          attcollation = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 21, rs)._2,
          attacl = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoAclItem]]).unsafeDecode(columIndex + 22, rs)._2,
          attoptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 23, rs)._2,
          attfdwoptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 24, rs)._2,
          attmissingval = JdbcDecoder.optionDecoder(TypoAnyArray.jdbcDecoder).unsafeDecode(columIndex + 25, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgAttributeRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val attrelid = jsonObj.get("attrelid").toRight("Missing field 'attrelid'").flatMap(_.as(JsonDecoder.long))
    val attname = jsonObj.get("attname").toRight("Missing field 'attname'").flatMap(_.as(JsonDecoder.string))
    val atttypid = jsonObj.get("atttypid").toRight("Missing field 'atttypid'").flatMap(_.as(JsonDecoder.long))
    val attstattarget = jsonObj.get("attstattarget").toRight("Missing field 'attstattarget'").flatMap(_.as(JsonDecoder.int))
    val attlen = jsonObj.get("attlen").toRight("Missing field 'attlen'").flatMap(_.as(TypoShort.jsonDecoder))
    val attnum = jsonObj.get("attnum").toRight("Missing field 'attnum'").flatMap(_.as(TypoShort.jsonDecoder))
    val attndims = jsonObj.get("attndims").toRight("Missing field 'attndims'").flatMap(_.as(JsonDecoder.int))
    val attcacheoff = jsonObj.get("attcacheoff").toRight("Missing field 'attcacheoff'").flatMap(_.as(JsonDecoder.int))
    val atttypmod = jsonObj.get("atttypmod").toRight("Missing field 'atttypmod'").flatMap(_.as(JsonDecoder.int))
    val attbyval = jsonObj.get("attbyval").toRight("Missing field 'attbyval'").flatMap(_.as(JsonDecoder.boolean))
    val attalign = jsonObj.get("attalign").toRight("Missing field 'attalign'").flatMap(_.as(JsonDecoder.string))
    val attstorage = jsonObj.get("attstorage").toRight("Missing field 'attstorage'").flatMap(_.as(JsonDecoder.string))
    val attcompression = jsonObj.get("attcompression").toRight("Missing field 'attcompression'").flatMap(_.as(JsonDecoder.string))
    val attnotnull = jsonObj.get("attnotnull").toRight("Missing field 'attnotnull'").flatMap(_.as(JsonDecoder.boolean))
    val atthasdef = jsonObj.get("atthasdef").toRight("Missing field 'atthasdef'").flatMap(_.as(JsonDecoder.boolean))
    val atthasmissing = jsonObj.get("atthasmissing").toRight("Missing field 'atthasmissing'").flatMap(_.as(JsonDecoder.boolean))
    val attidentity = jsonObj.get("attidentity").toRight("Missing field 'attidentity'").flatMap(_.as(JsonDecoder.string))
    val attgenerated = jsonObj.get("attgenerated").toRight("Missing field 'attgenerated'").flatMap(_.as(JsonDecoder.string))
    val attisdropped = jsonObj.get("attisdropped").toRight("Missing field 'attisdropped'").flatMap(_.as(JsonDecoder.boolean))
    val attislocal = jsonObj.get("attislocal").toRight("Missing field 'attislocal'").flatMap(_.as(JsonDecoder.boolean))
    val attinhcount = jsonObj.get("attinhcount").toRight("Missing field 'attinhcount'").flatMap(_.as(JsonDecoder.int))
    val attcollation = jsonObj.get("attcollation").toRight("Missing field 'attcollation'").flatMap(_.as(JsonDecoder.long))
    val attacl = jsonObj.get("attacl").fold[Either[String, Option[Array[TypoAclItem]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly))))
    val attoptions = jsonObj.get("attoptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val attfdwoptions = jsonObj.get("attfdwoptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val attmissingval = jsonObj.get("attmissingval").fold[Either[String, Option[TypoAnyArray]]](Right(None))(_.as(JsonDecoder.option(TypoAnyArray.jsonDecoder)))
    if (attrelid.isRight && attname.isRight && atttypid.isRight && attstattarget.isRight && attlen.isRight && attnum.isRight && attndims.isRight && attcacheoff.isRight && atttypmod.isRight && attbyval.isRight && attalign.isRight && attstorage.isRight && attcompression.isRight && attnotnull.isRight && atthasdef.isRight && atthasmissing.isRight && attidentity.isRight && attgenerated.isRight && attisdropped.isRight && attislocal.isRight && attinhcount.isRight && attcollation.isRight && attacl.isRight && attoptions.isRight && attfdwoptions.isRight && attmissingval.isRight)
      Right(PgAttributeRow(attrelid = attrelid.toOption.get, attname = attname.toOption.get, atttypid = atttypid.toOption.get, attstattarget = attstattarget.toOption.get, attlen = attlen.toOption.get, attnum = attnum.toOption.get, attndims = attndims.toOption.get, attcacheoff = attcacheoff.toOption.get, atttypmod = atttypmod.toOption.get, attbyval = attbyval.toOption.get, attalign = attalign.toOption.get, attstorage = attstorage.toOption.get, attcompression = attcompression.toOption.get, attnotnull = attnotnull.toOption.get, atthasdef = atthasdef.toOption.get, atthasmissing = atthasmissing.toOption.get, attidentity = attidentity.toOption.get, attgenerated = attgenerated.toOption.get, attisdropped = attisdropped.toOption.get, attislocal = attislocal.toOption.get, attinhcount = attinhcount.toOption.get, attcollation = attcollation.toOption.get, attacl = attacl.toOption.get, attoptions = attoptions.toOption.get, attfdwoptions = attfdwoptions.toOption.get, attmissingval = attmissingval.toOption.get))
    else Left(List[Either[String, Any]](attrelid, attname, atttypid, attstattarget, attlen, attnum, attndims, attcacheoff, atttypmod, attbyval, attalign, attstorage, attcompression, attnotnull, atthasdef, atthasmissing, attidentity, attgenerated, attisdropped, attislocal, attinhcount, attcollation, attacl, attoptions, attfdwoptions, attmissingval).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgAttributeRow] = new JsonEncoder[PgAttributeRow] {
    override def unsafeEncode(a: PgAttributeRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""attrelid":""")
      JsonEncoder.long.unsafeEncode(a.attrelid, indent, out)
      out.write(",")
      out.write(""""attname":""")
      JsonEncoder.string.unsafeEncode(a.attname, indent, out)
      out.write(",")
      out.write(""""atttypid":""")
      JsonEncoder.long.unsafeEncode(a.atttypid, indent, out)
      out.write(",")
      out.write(""""attstattarget":""")
      JsonEncoder.int.unsafeEncode(a.attstattarget, indent, out)
      out.write(",")
      out.write(""""attlen":""")
      TypoShort.jsonEncoder.unsafeEncode(a.attlen, indent, out)
      out.write(",")
      out.write(""""attnum":""")
      TypoShort.jsonEncoder.unsafeEncode(a.attnum, indent, out)
      out.write(",")
      out.write(""""attndims":""")
      JsonEncoder.int.unsafeEncode(a.attndims, indent, out)
      out.write(",")
      out.write(""""attcacheoff":""")
      JsonEncoder.int.unsafeEncode(a.attcacheoff, indent, out)
      out.write(",")
      out.write(""""atttypmod":""")
      JsonEncoder.int.unsafeEncode(a.atttypmod, indent, out)
      out.write(",")
      out.write(""""attbyval":""")
      JsonEncoder.boolean.unsafeEncode(a.attbyval, indent, out)
      out.write(",")
      out.write(""""attalign":""")
      JsonEncoder.string.unsafeEncode(a.attalign, indent, out)
      out.write(",")
      out.write(""""attstorage":""")
      JsonEncoder.string.unsafeEncode(a.attstorage, indent, out)
      out.write(",")
      out.write(""""attcompression":""")
      JsonEncoder.string.unsafeEncode(a.attcompression, indent, out)
      out.write(",")
      out.write(""""attnotnull":""")
      JsonEncoder.boolean.unsafeEncode(a.attnotnull, indent, out)
      out.write(",")
      out.write(""""atthasdef":""")
      JsonEncoder.boolean.unsafeEncode(a.atthasdef, indent, out)
      out.write(",")
      out.write(""""atthasmissing":""")
      JsonEncoder.boolean.unsafeEncode(a.atthasmissing, indent, out)
      out.write(",")
      out.write(""""attidentity":""")
      JsonEncoder.string.unsafeEncode(a.attidentity, indent, out)
      out.write(",")
      out.write(""""attgenerated":""")
      JsonEncoder.string.unsafeEncode(a.attgenerated, indent, out)
      out.write(",")
      out.write(""""attisdropped":""")
      JsonEncoder.boolean.unsafeEncode(a.attisdropped, indent, out)
      out.write(",")
      out.write(""""attislocal":""")
      JsonEncoder.boolean.unsafeEncode(a.attislocal, indent, out)
      out.write(",")
      out.write(""""attinhcount":""")
      JsonEncoder.int.unsafeEncode(a.attinhcount, indent, out)
      out.write(",")
      out.write(""""attcollation":""")
      JsonEncoder.long.unsafeEncode(a.attcollation, indent, out)
      out.write(",")
      out.write(""""attacl":""")
      JsonEncoder.option(JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly)).unsafeEncode(a.attacl, indent, out)
      out.write(",")
      out.write(""""attoptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.attoptions, indent, out)
      out.write(",")
      out.write(""""attfdwoptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.attfdwoptions, indent, out)
      out.write(",")
      out.write(""""attmissingval":""")
      JsonEncoder.option(TypoAnyArray.jsonEncoder).unsafeEncode(a.attmissingval, indent, out)
      out.write("}")
    }
  }
}
