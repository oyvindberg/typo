/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_attribute

import adventureworks.customtypes.TypoShort
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `pg_catalog.pg_attribute` */
case class PgAttributeId(attrelid: /* oid */ Long, attnum: TypoShort)
object PgAttributeId {
  implicit lazy val jsonDecoder: JsonDecoder[PgAttributeId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val attrelid = jsonObj.get("attrelid").toRight("Missing field 'attrelid'").flatMap(_.as(JsonDecoder.long))
    val attnum = jsonObj.get("attnum").toRight("Missing field 'attnum'").flatMap(_.as(TypoShort.jsonDecoder))
    if (attrelid.isRight && attnum.isRight)
      Right(PgAttributeId(attrelid = attrelid.toOption.get, attnum = attnum.toOption.get))
    else Left(List[Either[String, Any]](attrelid, attnum).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgAttributeId] = new JsonEncoder[PgAttributeId] {
    override def unsafeEncode(a: PgAttributeId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""attrelid":""")
      JsonEncoder.long.unsafeEncode(a.attrelid, indent, out)
      out.write(",")
      out.write(""""attnum":""")
      TypoShort.jsonEncoder.unsafeEncode(a.attnum, indent, out)
      out.write("}")
    }
  }
  implicit def ordering(implicit O0: Ordering[TypoShort]): Ordering[PgAttributeId] = Ordering.by(x => (x.attrelid, x.attnum))
}
