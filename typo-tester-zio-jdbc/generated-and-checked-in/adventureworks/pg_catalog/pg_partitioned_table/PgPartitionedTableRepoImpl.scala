/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_partitioned_table

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgPartitionedTableRepoImpl extends PgPartitionedTableRepo {
  override def delete(partrelid: PgPartitionedTableId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_partitioned_table where "partrelid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgPartitionedTableFields, PgPartitionedTableRow] = {
    DeleteBuilder("pg_catalog.pg_partitioned_table", PgPartitionedTableFields)
  }
  override def insert(unsaved: PgPartitionedTableRow): ZIO[ZConnection, Throwable, PgPartitionedTableRow] = {
    sql"""insert into pg_catalog.pg_partitioned_table("partrelid", "partstrat", "partnatts", "partdefid", "partattrs", "partclass", "partcollation", "partexprs")
          values (???::oid, ???::char, ???::int2, ???::oid, ???::int2vector, ???::oidvector, ???::oidvector, ???::pg_node_tree)
          returning "partrelid", "partstrat", "partnatts", "partdefid", "partattrs", "partclass", "partcollation", "partexprs"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgPartitionedTableFields, PgPartitionedTableRow] = {
    SelectBuilderSql("pg_catalog.pg_partitioned_table", PgPartitionedTableFields, PgPartitionedTableRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgPartitionedTableRow] = {
    sql"""select "partrelid", "partstrat", "partnatts", "partdefid", "partattrs", "partclass", "partcollation", "partexprs" from pg_catalog.pg_partitioned_table""".query[PgPartitionedTableRow].selectStream
  }
  override def selectById(partrelid: PgPartitionedTableId): ZIO[ZConnection, Throwable, Option[PgPartitionedTableRow]] = {
    sql"""select "partrelid", "partstrat", "partnatts", "partdefid", "partattrs", "partclass", "partcollation", "partexprs" from pg_catalog.pg_partitioned_table where "partrelid" = ???""".query[PgPartitionedTableRow].selectOne
  }
  override def selectByIds(partrelids: Array[PgPartitionedTableId]): ZStream[ZConnection, Throwable, PgPartitionedTableRow] = {
    sql"""select "partrelid", "partstrat", "partnatts", "partdefid", "partattrs", "partclass", "partcollation", "partexprs" from pg_catalog.pg_partitioned_table where "partrelid" = ANY(${partrelids})""".query[PgPartitionedTableRow].selectStream
  }
  override def update(row: PgPartitionedTableRow): ZIO[ZConnection, Throwable, Boolean] = {
    val partrelid = row.partrelid
    sql"""update pg_catalog.pg_partitioned_table
          set "partstrat" = ???::char,
              "partnatts" = ???::int2,
              "partdefid" = ???::oid,
              "partattrs" = ???::int2vector,
              "partclass" = ???::oidvector,
              "partcollation" = ???::oidvector,
              "partexprs" = ???::pg_node_tree
          where "partrelid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgPartitionedTableFields, PgPartitionedTableRow] = {
    UpdateBuilder("pg_catalog.pg_partitioned_table", PgPartitionedTableFields, PgPartitionedTableRow.read)
  }
  override def upsert(unsaved: PgPartitionedTableRow): ZIO[ZConnection, Throwable, PgPartitionedTableRow] = {
    sql"""insert into pg_catalog.pg_partitioned_table("partrelid", "partstrat", "partnatts", "partdefid", "partattrs", "partclass", "partcollation", "partexprs")
          values (
            ???::oid,
            ???::char,
            ???::int2,
            ???::oid,
            ???::int2vector,
            ???::oidvector,
            ???::oidvector,
            ???::pg_node_tree
          )
          on conflict ("partrelid")
          do update set
            "partstrat" = EXCLUDED."partstrat",
            "partnatts" = EXCLUDED."partnatts",
            "partdefid" = EXCLUDED."partdefid",
            "partattrs" = EXCLUDED."partattrs",
            "partclass" = EXCLUDED."partclass",
            "partcollation" = EXCLUDED."partcollation",
            "partexprs" = EXCLUDED."partexprs"
          returning "partrelid", "partstrat", "partnatts", "partdefid", "partattrs", "partclass", "partcollation", "partexprs"
       """.query(???).unique
  }
}
