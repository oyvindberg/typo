/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_partitioned_table

import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoOidVector
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgPartitionedTableRow(
  partrelid: PgPartitionedTableId,
  partstrat: String,
  partnatts: TypoShort,
  partdefid: /* oid */ Long,
  partattrs: TypoInt2Vector,
  partclass: TypoOidVector,
  partcollation: TypoOidVector,
  partexprs: Option[TypoPgNodeTree]
)

object PgPartitionedTableRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgPartitionedTableRow] = new JdbcDecoder[PgPartitionedTableRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgPartitionedTableRow) =
      columIndex + 7 ->
        PgPartitionedTableRow(
          partrelid = PgPartitionedTableId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          partstrat = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          partnatts = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          partdefid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          partattrs = TypoInt2Vector.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          partclass = TypoOidVector.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          partcollation = TypoOidVector.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          partexprs = JdbcDecoder.optionDecoder(TypoPgNodeTree.jdbcDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgPartitionedTableRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val partrelid = jsonObj.get("partrelid").toRight("Missing field 'partrelid'").flatMap(_.as(PgPartitionedTableId.jsonDecoder))
    val partstrat = jsonObj.get("partstrat").toRight("Missing field 'partstrat'").flatMap(_.as(JsonDecoder.string))
    val partnatts = jsonObj.get("partnatts").toRight("Missing field 'partnatts'").flatMap(_.as(TypoShort.jsonDecoder))
    val partdefid = jsonObj.get("partdefid").toRight("Missing field 'partdefid'").flatMap(_.as(JsonDecoder.long))
    val partattrs = jsonObj.get("partattrs").toRight("Missing field 'partattrs'").flatMap(_.as(TypoInt2Vector.jsonDecoder))
    val partclass = jsonObj.get("partclass").toRight("Missing field 'partclass'").flatMap(_.as(TypoOidVector.jsonDecoder))
    val partcollation = jsonObj.get("partcollation").toRight("Missing field 'partcollation'").flatMap(_.as(TypoOidVector.jsonDecoder))
    val partexprs = jsonObj.get("partexprs").fold[Either[String, Option[TypoPgNodeTree]]](Right(None))(_.as(JsonDecoder.option(TypoPgNodeTree.jsonDecoder)))
    if (partrelid.isRight && partstrat.isRight && partnatts.isRight && partdefid.isRight && partattrs.isRight && partclass.isRight && partcollation.isRight && partexprs.isRight)
      Right(PgPartitionedTableRow(partrelid = partrelid.toOption.get, partstrat = partstrat.toOption.get, partnatts = partnatts.toOption.get, partdefid = partdefid.toOption.get, partattrs = partattrs.toOption.get, partclass = partclass.toOption.get, partcollation = partcollation.toOption.get, partexprs = partexprs.toOption.get))
    else Left(List[Either[String, Any]](partrelid, partstrat, partnatts, partdefid, partattrs, partclass, partcollation, partexprs).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgPartitionedTableRow] = new JsonEncoder[PgPartitionedTableRow] {
    override def unsafeEncode(a: PgPartitionedTableRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""partrelid":""")
      PgPartitionedTableId.jsonEncoder.unsafeEncode(a.partrelid, indent, out)
      out.write(",")
      out.write(""""partstrat":""")
      JsonEncoder.string.unsafeEncode(a.partstrat, indent, out)
      out.write(",")
      out.write(""""partnatts":""")
      TypoShort.jsonEncoder.unsafeEncode(a.partnatts, indent, out)
      out.write(",")
      out.write(""""partdefid":""")
      JsonEncoder.long.unsafeEncode(a.partdefid, indent, out)
      out.write(",")
      out.write(""""partattrs":""")
      TypoInt2Vector.jsonEncoder.unsafeEncode(a.partattrs, indent, out)
      out.write(",")
      out.write(""""partclass":""")
      TypoOidVector.jsonEncoder.unsafeEncode(a.partclass, indent, out)
      out.write(",")
      out.write(""""partcollation":""")
      TypoOidVector.jsonEncoder.unsafeEncode(a.partcollation, indent, out)
      out.write(",")
      out.write(""""partexprs":""")
      JsonEncoder.option(TypoPgNodeTree.jsonEncoder).unsafeEncode(a.partexprs, indent, out)
      out.write("}")
    }
  }
}
