/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_largeobject

import adventureworks.customtypes.TypoBytea
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgLargeobjectRow(
  loid: /* oid */ Long,
  pageno: Int,
  data: TypoBytea
){
   val compositeId: PgLargeobjectId = PgLargeobjectId(loid, pageno)
 }

object PgLargeobjectRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgLargeobjectRow] = new JdbcDecoder[PgLargeobjectRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgLargeobjectRow) =
      columIndex + 2 ->
        PgLargeobjectRow(
          loid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 0, rs)._2,
          pageno = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 1, rs)._2,
          data = TypoBytea.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgLargeobjectRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val loid = jsonObj.get("loid").toRight("Missing field 'loid'").flatMap(_.as(JsonDecoder.long))
    val pageno = jsonObj.get("pageno").toRight("Missing field 'pageno'").flatMap(_.as(JsonDecoder.int))
    val data = jsonObj.get("data").toRight("Missing field 'data'").flatMap(_.as(TypoBytea.jsonDecoder))
    if (loid.isRight && pageno.isRight && data.isRight)
      Right(PgLargeobjectRow(loid = loid.toOption.get, pageno = pageno.toOption.get, data = data.toOption.get))
    else Left(List[Either[String, Any]](loid, pageno, data).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgLargeobjectRow] = new JsonEncoder[PgLargeobjectRow] {
    override def unsafeEncode(a: PgLargeobjectRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""loid":""")
      JsonEncoder.long.unsafeEncode(a.loid, indent, out)
      out.write(",")
      out.write(""""pageno":""")
      JsonEncoder.int.unsafeEncode(a.pageno, indent, out)
      out.write(",")
      out.write(""""data":""")
      TypoBytea.jsonEncoder.unsafeEncode(a.data, indent, out)
      out.write("}")
    }
  }
}
