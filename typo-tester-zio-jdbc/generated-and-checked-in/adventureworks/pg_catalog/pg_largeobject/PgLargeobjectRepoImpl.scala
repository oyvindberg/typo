/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_largeobject

import adventureworks.customtypes.TypoBytea
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgLargeobjectRepoImpl extends PgLargeobjectRepo {
  override def delete(compositeId: PgLargeobjectId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_largeobject where "loid" = ${Segment.paramSegment(compositeId.loid)(Setter.longSetter)} AND "pageno" = ${Segment.paramSegment(compositeId.pageno)(Setter.intSetter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgLargeobjectFields, PgLargeobjectRow] = {
    DeleteBuilder("pg_catalog.pg_largeobject", PgLargeobjectFields)
  }
  override def insert(unsaved: PgLargeobjectRow): ZIO[ZConnection, Throwable, PgLargeobjectRow] = {
    sql"""insert into pg_catalog.pg_largeobject("loid", "pageno", "data")
          values (${Segment.paramSegment(unsaved.loid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.pageno)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.data)(TypoBytea.setter)}::bytea)
          returning "loid", "pageno", "data"
       """.insertReturning(PgLargeobjectRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgLargeobjectFields, PgLargeobjectRow] = {
    SelectBuilderSql("pg_catalog.pg_largeobject", PgLargeobjectFields, PgLargeobjectRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgLargeobjectRow] = {
    sql"""select "loid", "pageno", "data" from pg_catalog.pg_largeobject""".query(PgLargeobjectRow.jdbcDecoder).selectStream
  }
  override def selectById(compositeId: PgLargeobjectId): ZIO[ZConnection, Throwable, Option[PgLargeobjectRow]] = {
    sql"""select "loid", "pageno", "data" from pg_catalog.pg_largeobject where "loid" = ${Segment.paramSegment(compositeId.loid)(Setter.longSetter)} AND "pageno" = ${Segment.paramSegment(compositeId.pageno)(Setter.intSetter)}""".query(PgLargeobjectRow.jdbcDecoder).selectOne
  }
  override def update(row: PgLargeobjectRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_largeobject
          set "data" = ${Segment.paramSegment(row.data)(TypoBytea.setter)}::bytea
          where "loid" = ${Segment.paramSegment(compositeId.loid)(Setter.longSetter)} AND "pageno" = ${Segment.paramSegment(compositeId.pageno)(Setter.intSetter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgLargeobjectFields, PgLargeobjectRow] = {
    UpdateBuilder("pg_catalog.pg_largeobject", PgLargeobjectFields, PgLargeobjectRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgLargeobjectRow): ZIO[ZConnection, Throwable, UpdateResult[PgLargeobjectRow]] = {
    sql"""insert into pg_catalog.pg_largeobject("loid", "pageno", "data")
          values (
            ${Segment.paramSegment(unsaved.loid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.pageno)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.data)(TypoBytea.setter)}::bytea
          )
          on conflict ("loid", "pageno")
          do update set
            "data" = EXCLUDED."data"
          returning "loid", "pageno", "data"""".insertReturning(PgLargeobjectRow.jdbcDecoder)
  }
}
