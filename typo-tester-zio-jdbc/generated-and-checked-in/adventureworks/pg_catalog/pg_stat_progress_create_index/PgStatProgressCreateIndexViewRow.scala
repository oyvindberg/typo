/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_create_index

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatProgressCreateIndexViewRow(
  pid: /* nullability unknown */ Option[Int],
  datid: /* nullability unknown */ Option[/* oid */ Long],
  /** Points to [[pg_database.PgDatabaseRow.datname]] */
  datname: Option[String],
  relid: /* nullability unknown */ Option[/* oid */ Long],
  indexRelid: /* nullability unknown */ Option[/* oid */ Long],
  command: /* nullability unknown */ Option[String],
  phase: /* nullability unknown */ Option[String],
  lockersTotal: /* nullability unknown */ Option[Long],
  lockersDone: /* nullability unknown */ Option[Long],
  currentLockerPid: /* nullability unknown */ Option[Long],
  blocksTotal: /* nullability unknown */ Option[Long],
  blocksDone: /* nullability unknown */ Option[Long],
  tuplesTotal: /* nullability unknown */ Option[Long],
  tuplesDone: /* nullability unknown */ Option[Long],
  partitionsTotal: /* nullability unknown */ Option[Long],
  partitionsDone: /* nullability unknown */ Option[Long]
)

object PgStatProgressCreateIndexViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatProgressCreateIndexViewRow] = new JdbcDecoder[PgStatProgressCreateIndexViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatProgressCreateIndexViewRow) =
      columIndex + 15 ->
        PgStatProgressCreateIndexViewRow(
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 0, rs)._2,
          datid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          datname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          relid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          indexRelid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          command = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          phase = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          lockersTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          lockersDone = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 8, rs)._2,
          currentLockerPid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 9, rs)._2,
          blocksTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 10, rs)._2,
          blocksDone = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 11, rs)._2,
          tuplesTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 12, rs)._2,
          tuplesDone = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 13, rs)._2,
          partitionsTotal = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 14, rs)._2,
          partitionsDone = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 15, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatProgressCreateIndexViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val datid = jsonObj.get("datid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val datname = jsonObj.get("datname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val relid = jsonObj.get("relid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val indexRelid = jsonObj.get("index_relid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val command = jsonObj.get("command").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val phase = jsonObj.get("phase").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val lockersTotal = jsonObj.get("lockers_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val lockersDone = jsonObj.get("lockers_done").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val currentLockerPid = jsonObj.get("current_locker_pid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val blocksTotal = jsonObj.get("blocks_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val blocksDone = jsonObj.get("blocks_done").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tuplesTotal = jsonObj.get("tuples_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val tuplesDone = jsonObj.get("tuples_done").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val partitionsTotal = jsonObj.get("partitions_total").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val partitionsDone = jsonObj.get("partitions_done").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (pid.isRight && datid.isRight && datname.isRight && relid.isRight && indexRelid.isRight && command.isRight && phase.isRight && lockersTotal.isRight && lockersDone.isRight && currentLockerPid.isRight && blocksTotal.isRight && blocksDone.isRight && tuplesTotal.isRight && tuplesDone.isRight && partitionsTotal.isRight && partitionsDone.isRight)
      Right(PgStatProgressCreateIndexViewRow(pid = pid.toOption.get, datid = datid.toOption.get, datname = datname.toOption.get, relid = relid.toOption.get, indexRelid = indexRelid.toOption.get, command = command.toOption.get, phase = phase.toOption.get, lockersTotal = lockersTotal.toOption.get, lockersDone = lockersDone.toOption.get, currentLockerPid = currentLockerPid.toOption.get, blocksTotal = blocksTotal.toOption.get, blocksDone = blocksDone.toOption.get, tuplesTotal = tuplesTotal.toOption.get, tuplesDone = tuplesDone.toOption.get, partitionsTotal = partitionsTotal.toOption.get, partitionsDone = partitionsDone.toOption.get))
    else Left(List[Either[String, Any]](pid, datid, datname, relid, indexRelid, command, phase, lockersTotal, lockersDone, currentLockerPid, blocksTotal, blocksDone, tuplesTotal, tuplesDone, partitionsTotal, partitionsDone).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatProgressCreateIndexViewRow] = new JsonEncoder[PgStatProgressCreateIndexViewRow] {
    override def unsafeEncode(a: PgStatProgressCreateIndexViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""datid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.datid, indent, out)
      out.write(",")
      out.write(""""datname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.datname, indent, out)
      out.write(",")
      out.write(""""relid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.relid, indent, out)
      out.write(",")
      out.write(""""index_relid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.indexRelid, indent, out)
      out.write(",")
      out.write(""""command":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.command, indent, out)
      out.write(",")
      out.write(""""phase":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.phase, indent, out)
      out.write(",")
      out.write(""""lockers_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.lockersTotal, indent, out)
      out.write(",")
      out.write(""""lockers_done":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.lockersDone, indent, out)
      out.write(",")
      out.write(""""current_locker_pid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.currentLockerPid, indent, out)
      out.write(",")
      out.write(""""blocks_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blocksTotal, indent, out)
      out.write(",")
      out.write(""""blocks_done":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.blocksDone, indent, out)
      out.write(",")
      out.write(""""tuples_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tuplesTotal, indent, out)
      out.write(",")
      out.write(""""tuples_done":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.tuplesDone, indent, out)
      out.write(",")
      out.write(""""partitions_total":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.partitionsTotal, indent, out)
      out.write(",")
      out.write(""""partitions_done":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.partitionsDone, indent, out)
      out.write("}")
    }
  }
}
