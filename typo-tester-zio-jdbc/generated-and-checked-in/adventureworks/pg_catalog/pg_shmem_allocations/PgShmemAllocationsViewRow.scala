/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_shmem_allocations

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgShmemAllocationsViewRow(
  name: /* nullability unknown */ Option[String],
  off: /* nullability unknown */ Option[Long],
  size: /* nullability unknown */ Option[Long],
  allocatedSize: /* nullability unknown */ Option[Long]
)

object PgShmemAllocationsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgShmemAllocationsViewRow] = new JdbcDecoder[PgShmemAllocationsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgShmemAllocationsViewRow) =
      columIndex + 3 ->
        PgShmemAllocationsViewRow(
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          off = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          size = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 2, rs)._2,
          allocatedSize = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgShmemAllocationsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val off = jsonObj.get("off").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val size = jsonObj.get("size").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val allocatedSize = jsonObj.get("allocated_size").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (name.isRight && off.isRight && size.isRight && allocatedSize.isRight)
      Right(PgShmemAllocationsViewRow(name = name.toOption.get, off = off.toOption.get, size = size.toOption.get, allocatedSize = allocatedSize.toOption.get))
    else Left(List[Either[String, Any]](name, off, size, allocatedSize).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgShmemAllocationsViewRow] = new JsonEncoder[PgShmemAllocationsViewRow] {
    override def unsafeEncode(a: PgShmemAllocationsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""off":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.off, indent, out)
      out.write(",")
      out.write(""""size":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.size, indent, out)
      out.write(",")
      out.write(""""allocated_size":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.allocatedSize, indent, out)
      out.write("}")
    }
  }
}
