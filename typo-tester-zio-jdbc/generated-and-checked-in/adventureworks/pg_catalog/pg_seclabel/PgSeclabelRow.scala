/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_seclabel

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgSeclabelRow(
  objoid: /* oid */ Long,
  classoid: /* oid */ Long,
  objsubid: Int,
  provider: String,
  label: String
){
   val compositeId: PgSeclabelId = PgSeclabelId(objoid, classoid, objsubid, provider)
 }

object PgSeclabelRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgSeclabelRow] = new JdbcDecoder[PgSeclabelRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgSeclabelRow) =
      columIndex + 4 ->
        PgSeclabelRow(
          objoid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 0, rs)._2,
          classoid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          objsubid = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 2, rs)._2,
          provider = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          label = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgSeclabelRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val objoid = jsonObj.get("objoid").toRight("Missing field 'objoid'").flatMap(_.as(JsonDecoder.long))
    val classoid = jsonObj.get("classoid").toRight("Missing field 'classoid'").flatMap(_.as(JsonDecoder.long))
    val objsubid = jsonObj.get("objsubid").toRight("Missing field 'objsubid'").flatMap(_.as(JsonDecoder.int))
    val provider = jsonObj.get("provider").toRight("Missing field 'provider'").flatMap(_.as(JsonDecoder.string))
    val label = jsonObj.get("label").toRight("Missing field 'label'").flatMap(_.as(JsonDecoder.string))
    if (objoid.isRight && classoid.isRight && objsubid.isRight && provider.isRight && label.isRight)
      Right(PgSeclabelRow(objoid = objoid.toOption.get, classoid = classoid.toOption.get, objsubid = objsubid.toOption.get, provider = provider.toOption.get, label = label.toOption.get))
    else Left(List[Either[String, Any]](objoid, classoid, objsubid, provider, label).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgSeclabelRow] = new JsonEncoder[PgSeclabelRow] {
    override def unsafeEncode(a: PgSeclabelRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""objoid":""")
      JsonEncoder.long.unsafeEncode(a.objoid, indent, out)
      out.write(",")
      out.write(""""classoid":""")
      JsonEncoder.long.unsafeEncode(a.classoid, indent, out)
      out.write(",")
      out.write(""""objsubid":""")
      JsonEncoder.int.unsafeEncode(a.objsubid, indent, out)
      out.write(",")
      out.write(""""provider":""")
      JsonEncoder.string.unsafeEncode(a.provider, indent, out)
      out.write(",")
      out.write(""""label":""")
      JsonEncoder.string.unsafeEncode(a.label, indent, out)
      out.write("}")
    }
  }
}
