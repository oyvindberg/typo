/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_rewrite

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgRewriteRepoImpl extends PgRewriteRepo {
  override def delete(oid: PgRewriteId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_rewrite where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgRewriteFields, PgRewriteRow] = {
    DeleteBuilder("pg_catalog.pg_rewrite", PgRewriteFields)
  }
  override def insert(unsaved: PgRewriteRow): ZIO[ZConnection, Throwable, PgRewriteRow] = {
    sql"""insert into pg_catalog.pg_rewrite("oid", "rulename", "ev_class", "ev_type", "ev_enabled", "is_instead", "ev_qual", "ev_action")
          values (???::oid, ???::name, ???::oid, ???::char, ???::char, ???, ???::pg_node_tree, ???::pg_node_tree)
          returning "oid", "rulename", "ev_class", "ev_type", "ev_enabled", "is_instead", "ev_qual", "ev_action"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgRewriteFields, PgRewriteRow] = {
    SelectBuilderSql("pg_catalog.pg_rewrite", PgRewriteFields, PgRewriteRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgRewriteRow] = {
    sql"""select "oid", "rulename", "ev_class", "ev_type", "ev_enabled", "is_instead", "ev_qual", "ev_action" from pg_catalog.pg_rewrite""".query[PgRewriteRow].selectStream
  }
  override def selectById(oid: PgRewriteId): ZIO[ZConnection, Throwable, Option[PgRewriteRow]] = {
    sql"""select "oid", "rulename", "ev_class", "ev_type", "ev_enabled", "is_instead", "ev_qual", "ev_action" from pg_catalog.pg_rewrite where "oid" = ???""".query[PgRewriteRow].selectOne
  }
  override def selectByIds(oids: Array[PgRewriteId]): ZStream[ZConnection, Throwable, PgRewriteRow] = {
    sql"""select "oid", "rulename", "ev_class", "ev_type", "ev_enabled", "is_instead", "ev_qual", "ev_action" from pg_catalog.pg_rewrite where "oid" = ANY(${oids})""".query[PgRewriteRow].selectStream
  }
  override def selectByUnique(evClass: /* oid */ Long, rulename: String): ZIO[ZConnection, Throwable, Option[PgRewriteRow]] = {
    sql"""select "ev_class", "rulename"
          from pg_catalog.pg_rewrite
          where "ev_class" = ??? AND "rulename" = ???
       """.query[PgRewriteRow].selectOne
  }
  override def update(row: PgRewriteRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_rewrite
          set "rulename" = ???::name,
              "ev_class" = ???::oid,
              "ev_type" = ???::char,
              "ev_enabled" = ???::char,
              "is_instead" = ???,
              "ev_qual" = ???::pg_node_tree,
              "ev_action" = ???::pg_node_tree
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgRewriteFields, PgRewriteRow] = {
    UpdateBuilder("pg_catalog.pg_rewrite", PgRewriteFields, PgRewriteRow.read)
  }
  override def upsert(unsaved: PgRewriteRow): ZIO[ZConnection, Throwable, PgRewriteRow] = {
    sql"""insert into pg_catalog.pg_rewrite("oid", "rulename", "ev_class", "ev_type", "ev_enabled", "is_instead", "ev_qual", "ev_action")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::char,
            ???::char,
            ???,
            ???::pg_node_tree,
            ???::pg_node_tree
          )
          on conflict ("oid")
          do update set
            "rulename" = EXCLUDED."rulename",
            "ev_class" = EXCLUDED."ev_class",
            "ev_type" = EXCLUDED."ev_type",
            "ev_enabled" = EXCLUDED."ev_enabled",
            "is_instead" = EXCLUDED."is_instead",
            "ev_qual" = EXCLUDED."ev_qual",
            "ev_action" = EXCLUDED."ev_action"
          returning "oid", "rulename", "ev_class", "ev_type", "ev_enabled", "is_instead", "ev_qual", "ev_action"
       """.query(???).unique
  }
}
