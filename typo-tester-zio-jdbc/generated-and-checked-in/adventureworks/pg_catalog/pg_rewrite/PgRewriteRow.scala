/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_rewrite

import adventureworks.customtypes.TypoPgNodeTree
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgRewriteRow(
  oid: PgRewriteId,
  rulename: String,
  evClass: /* oid */ Long,
  evType: String,
  evEnabled: String,
  isInstead: Boolean,
  evQual: TypoPgNodeTree,
  evAction: TypoPgNodeTree
)

object PgRewriteRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgRewriteRow] = new JdbcDecoder[PgRewriteRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgRewriteRow) =
      columIndex + 7 ->
        PgRewriteRow(
          oid = PgRewriteId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          rulename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          evClass = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          evType = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          evEnabled = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 4, rs)._2,
          isInstead = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 5, rs)._2,
          evQual = TypoPgNodeTree.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          evAction = TypoPgNodeTree.jdbcDecoder.unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgRewriteRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgRewriteId.jsonDecoder))
    val rulename = jsonObj.get("rulename").toRight("Missing field 'rulename'").flatMap(_.as(JsonDecoder.string))
    val evClass = jsonObj.get("ev_class").toRight("Missing field 'ev_class'").flatMap(_.as(JsonDecoder.long))
    val evType = jsonObj.get("ev_type").toRight("Missing field 'ev_type'").flatMap(_.as(JsonDecoder.string))
    val evEnabled = jsonObj.get("ev_enabled").toRight("Missing field 'ev_enabled'").flatMap(_.as(JsonDecoder.string))
    val isInstead = jsonObj.get("is_instead").toRight("Missing field 'is_instead'").flatMap(_.as(JsonDecoder.boolean))
    val evQual = jsonObj.get("ev_qual").toRight("Missing field 'ev_qual'").flatMap(_.as(TypoPgNodeTree.jsonDecoder))
    val evAction = jsonObj.get("ev_action").toRight("Missing field 'ev_action'").flatMap(_.as(TypoPgNodeTree.jsonDecoder))
    if (oid.isRight && rulename.isRight && evClass.isRight && evType.isRight && evEnabled.isRight && isInstead.isRight && evQual.isRight && evAction.isRight)
      Right(PgRewriteRow(oid = oid.toOption.get, rulename = rulename.toOption.get, evClass = evClass.toOption.get, evType = evType.toOption.get, evEnabled = evEnabled.toOption.get, isInstead = isInstead.toOption.get, evQual = evQual.toOption.get, evAction = evAction.toOption.get))
    else Left(List[Either[String, Any]](oid, rulename, evClass, evType, evEnabled, isInstead, evQual, evAction).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgRewriteRow] = new JsonEncoder[PgRewriteRow] {
    override def unsafeEncode(a: PgRewriteRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgRewriteId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""rulename":""")
      JsonEncoder.string.unsafeEncode(a.rulename, indent, out)
      out.write(",")
      out.write(""""ev_class":""")
      JsonEncoder.long.unsafeEncode(a.evClass, indent, out)
      out.write(",")
      out.write(""""ev_type":""")
      JsonEncoder.string.unsafeEncode(a.evType, indent, out)
      out.write(",")
      out.write(""""ev_enabled":""")
      JsonEncoder.string.unsafeEncode(a.evEnabled, indent, out)
      out.write(",")
      out.write(""""is_instead":""")
      JsonEncoder.boolean.unsafeEncode(a.isInstead, indent, out)
      out.write(",")
      out.write(""""ev_qual":""")
      TypoPgNodeTree.jsonEncoder.unsafeEncode(a.evQual, indent, out)
      out.write(",")
      out.write(""""ev_action":""")
      TypoPgNodeTree.jsonEncoder.unsafeEncode(a.evAction, indent, out)
      out.write("}")
    }
  }
}
