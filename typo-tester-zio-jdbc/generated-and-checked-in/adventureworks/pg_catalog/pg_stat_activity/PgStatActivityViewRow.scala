/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_activity

import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoXid
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatActivityViewRow(
  datid: /* nullability unknown */ Option[/* oid */ Long],
  /** Points to [[pg_database.PgDatabaseRow.datname]] */
  datname: Option[String],
  pid: /* nullability unknown */ Option[Int],
  leaderPid: /* nullability unknown */ Option[Int],
  usesysid: /* nullability unknown */ Option[/* oid */ Long],
  /** Points to [[pg_authid.PgAuthidRow.rolname]] */
  usename: Option[String],
  applicationName: /* nullability unknown */ Option[String],
  clientAddr: /* nullability unknown */ Option[TypoInet],
  clientHostname: /* nullability unknown */ Option[String],
  clientPort: /* nullability unknown */ Option[Int],
  backendStart: /* nullability unknown */ Option[TypoInstant],
  xactStart: /* nullability unknown */ Option[TypoInstant],
  queryStart: /* nullability unknown */ Option[TypoInstant],
  stateChange: /* nullability unknown */ Option[TypoInstant],
  waitEventType: /* nullability unknown */ Option[String],
  waitEvent: /* nullability unknown */ Option[String],
  state: /* nullability unknown */ Option[String],
  backendXid: /* nullability unknown */ Option[TypoXid],
  backendXmin: /* nullability unknown */ Option[TypoXid],
  queryId: /* nullability unknown */ Option[Long],
  query: /* nullability unknown */ Option[String],
  backendType: /* nullability unknown */ Option[String]
)

object PgStatActivityViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatActivityViewRow] = new JdbcDecoder[PgStatActivityViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatActivityViewRow) =
      columIndex + 21 ->
        PgStatActivityViewRow(
          datid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 0, rs)._2,
          datname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 2, rs)._2,
          leaderPid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 3, rs)._2,
          usesysid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          usename = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          applicationName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          clientAddr = JdbcDecoder.optionDecoder(TypoInet.jdbcDecoder).unsafeDecode(columIndex + 7, rs)._2,
          clientHostname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          clientPort = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 9, rs)._2,
          backendStart = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 10, rs)._2,
          xactStart = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 11, rs)._2,
          queryStart = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 12, rs)._2,
          stateChange = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 13, rs)._2,
          waitEventType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 14, rs)._2,
          waitEvent = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 15, rs)._2,
          state = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 16, rs)._2,
          backendXid = JdbcDecoder.optionDecoder(TypoXid.jdbcDecoder).unsafeDecode(columIndex + 17, rs)._2,
          backendXmin = JdbcDecoder.optionDecoder(TypoXid.jdbcDecoder).unsafeDecode(columIndex + 18, rs)._2,
          queryId = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 19, rs)._2,
          query = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 20, rs)._2,
          backendType = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 21, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatActivityViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val datid = jsonObj.get("datid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val datname = jsonObj.get("datname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val leaderPid = jsonObj.get("leader_pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val usesysid = jsonObj.get("usesysid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val usename = jsonObj.get("usename").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val applicationName = jsonObj.get("application_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val clientAddr = jsonObj.get("client_addr").fold[Either[String, Option[TypoInet]]](Right(None))(_.as(JsonDecoder.option(TypoInet.jsonDecoder)))
    val clientHostname = jsonObj.get("client_hostname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val clientPort = jsonObj.get("client_port").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val backendStart = jsonObj.get("backend_start").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val xactStart = jsonObj.get("xact_start").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val queryStart = jsonObj.get("query_start").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val stateChange = jsonObj.get("state_change").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val waitEventType = jsonObj.get("wait_event_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val waitEvent = jsonObj.get("wait_event").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val state = jsonObj.get("state").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val backendXid = jsonObj.get("backend_xid").fold[Either[String, Option[TypoXid]]](Right(None))(_.as(JsonDecoder.option(TypoXid.jsonDecoder)))
    val backendXmin = jsonObj.get("backend_xmin").fold[Either[String, Option[TypoXid]]](Right(None))(_.as(JsonDecoder.option(TypoXid.jsonDecoder)))
    val queryId = jsonObj.get("query_id").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val query = jsonObj.get("query").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val backendType = jsonObj.get("backend_type").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (datid.isRight && datname.isRight && pid.isRight && leaderPid.isRight && usesysid.isRight && usename.isRight && applicationName.isRight && clientAddr.isRight && clientHostname.isRight && clientPort.isRight && backendStart.isRight && xactStart.isRight && queryStart.isRight && stateChange.isRight && waitEventType.isRight && waitEvent.isRight && state.isRight && backendXid.isRight && backendXmin.isRight && queryId.isRight && query.isRight && backendType.isRight)
      Right(PgStatActivityViewRow(datid = datid.toOption.get, datname = datname.toOption.get, pid = pid.toOption.get, leaderPid = leaderPid.toOption.get, usesysid = usesysid.toOption.get, usename = usename.toOption.get, applicationName = applicationName.toOption.get, clientAddr = clientAddr.toOption.get, clientHostname = clientHostname.toOption.get, clientPort = clientPort.toOption.get, backendStart = backendStart.toOption.get, xactStart = xactStart.toOption.get, queryStart = queryStart.toOption.get, stateChange = stateChange.toOption.get, waitEventType = waitEventType.toOption.get, waitEvent = waitEvent.toOption.get, state = state.toOption.get, backendXid = backendXid.toOption.get, backendXmin = backendXmin.toOption.get, queryId = queryId.toOption.get, query = query.toOption.get, backendType = backendType.toOption.get))
    else Left(List[Either[String, Any]](datid, datname, pid, leaderPid, usesysid, usename, applicationName, clientAddr, clientHostname, clientPort, backendStart, xactStart, queryStart, stateChange, waitEventType, waitEvent, state, backendXid, backendXmin, queryId, query, backendType).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatActivityViewRow] = new JsonEncoder[PgStatActivityViewRow] {
    override def unsafeEncode(a: PgStatActivityViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""datid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.datid, indent, out)
      out.write(",")
      out.write(""""datname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.datname, indent, out)
      out.write(",")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""leader_pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.leaderPid, indent, out)
      out.write(",")
      out.write(""""usesysid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.usesysid, indent, out)
      out.write(",")
      out.write(""""usename":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.usename, indent, out)
      out.write(",")
      out.write(""""application_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.applicationName, indent, out)
      out.write(",")
      out.write(""""client_addr":""")
      JsonEncoder.option(TypoInet.jsonEncoder).unsafeEncode(a.clientAddr, indent, out)
      out.write(",")
      out.write(""""client_hostname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.clientHostname, indent, out)
      out.write(",")
      out.write(""""client_port":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.clientPort, indent, out)
      out.write(",")
      out.write(""""backend_start":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.backendStart, indent, out)
      out.write(",")
      out.write(""""xact_start":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.xactStart, indent, out)
      out.write(",")
      out.write(""""query_start":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.queryStart, indent, out)
      out.write(",")
      out.write(""""state_change":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.stateChange, indent, out)
      out.write(",")
      out.write(""""wait_event_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.waitEventType, indent, out)
      out.write(",")
      out.write(""""wait_event":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.waitEvent, indent, out)
      out.write(",")
      out.write(""""state":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.state, indent, out)
      out.write(",")
      out.write(""""backend_xid":""")
      JsonEncoder.option(TypoXid.jsonEncoder).unsafeEncode(a.backendXid, indent, out)
      out.write(",")
      out.write(""""backend_xmin":""")
      JsonEncoder.option(TypoXid.jsonEncoder).unsafeEncode(a.backendXmin, indent, out)
      out.write(",")
      out.write(""""query_id":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.queryId, indent, out)
      out.write(",")
      out.write(""""query":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.query, indent, out)
      out.write(",")
      out.write(""""backend_type":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.backendType, indent, out)
      out.write("}")
    }
  }
}
