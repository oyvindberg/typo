/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_description

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgDescriptionRepoImpl extends PgDescriptionRepo {
  override def delete(compositeId: PgDescriptionId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_description where "objoid" = ??? AND "classoid" = ??? AND "objsubid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgDescriptionFields, PgDescriptionRow] = {
    DeleteBuilder("pg_catalog.pg_description", PgDescriptionFields)
  }
  override def insert(unsaved: PgDescriptionRow): ZIO[ZConnection, Throwable, PgDescriptionRow] = {
    sql"""insert into pg_catalog.pg_description("objoid", "classoid", "objsubid", "description")
          values (???::oid, ???::oid, ???::int4, ???)
          returning "objoid", "classoid", "objsubid", "description"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgDescriptionFields, PgDescriptionRow] = {
    SelectBuilderSql("pg_catalog.pg_description", PgDescriptionFields, PgDescriptionRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgDescriptionRow] = {
    sql"""select "objoid", "classoid", "objsubid", "description" from pg_catalog.pg_description""".query[PgDescriptionRow].selectStream
  }
  override def selectById(compositeId: PgDescriptionId): ZIO[ZConnection, Throwable, Option[PgDescriptionRow]] = {
    sql"""select "objoid", "classoid", "objsubid", "description" from pg_catalog.pg_description where "objoid" = ??? AND "classoid" = ??? AND "objsubid" = ???""".query[PgDescriptionRow].selectOne
  }
  override def update(row: PgDescriptionRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_description
          set "description" = ???
          where "objoid" = ??? AND "classoid" = ??? AND "objsubid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgDescriptionFields, PgDescriptionRow] = {
    UpdateBuilder("pg_catalog.pg_description", PgDescriptionFields, PgDescriptionRow.read)
  }
  override def upsert(unsaved: PgDescriptionRow): ZIO[ZConnection, Throwable, PgDescriptionRow] = {
    sql"""insert into pg_catalog.pg_description("objoid", "classoid", "objsubid", "description")
          values (
            ???::oid,
            ???::oid,
            ???::int4,
            ???
          )
          on conflict ("objoid", "classoid", "objsubid")
          do update set
            "description" = EXCLUDED."description"
          returning "objoid", "classoid", "objsubid", "description"
       """.query(???).unique
  }
}
