/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_description

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgDescriptionRepoImpl extends PgDescriptionRepo {
  override def delete(compositeId: PgDescriptionId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_description where "objoid" = ${Segment.paramSegment(compositeId.objoid)(Setter.longSetter)} AND "classoid" = ${Segment.paramSegment(compositeId.classoid)(Setter.longSetter)} AND "objsubid" = ${Segment.paramSegment(compositeId.objsubid)(Setter.intSetter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgDescriptionFields, PgDescriptionRow] = {
    DeleteBuilder("pg_catalog.pg_description", PgDescriptionFields)
  }
  override def insert(unsaved: PgDescriptionRow): ZIO[ZConnection, Throwable, PgDescriptionRow] = {
    sql"""insert into pg_catalog.pg_description("objoid", "classoid", "objsubid", "description")
          values (${Segment.paramSegment(unsaved.objoid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.classoid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.objsubid)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.description)(Setter.stringSetter)})
          returning "objoid", "classoid", "objsubid", "description"
       """.insertReturning(PgDescriptionRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgDescriptionFields, PgDescriptionRow] = {
    SelectBuilderSql("pg_catalog.pg_description", PgDescriptionFields, PgDescriptionRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgDescriptionRow] = {
    sql"""select "objoid", "classoid", "objsubid", "description" from pg_catalog.pg_description""".query(PgDescriptionRow.jdbcDecoder).selectStream
  }
  override def selectById(compositeId: PgDescriptionId): ZIO[ZConnection, Throwable, Option[PgDescriptionRow]] = {
    sql"""select "objoid", "classoid", "objsubid", "description" from pg_catalog.pg_description where "objoid" = ${Segment.paramSegment(compositeId.objoid)(Setter.longSetter)} AND "classoid" = ${Segment.paramSegment(compositeId.classoid)(Setter.longSetter)} AND "objsubid" = ${Segment.paramSegment(compositeId.objsubid)(Setter.intSetter)}""".query(PgDescriptionRow.jdbcDecoder).selectOne
  }
  override def update(row: PgDescriptionRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_description
          set "description" = ${Segment.paramSegment(row.description)(Setter.stringSetter)}
          where "objoid" = ${Segment.paramSegment(compositeId.objoid)(Setter.longSetter)} AND "classoid" = ${Segment.paramSegment(compositeId.classoid)(Setter.longSetter)} AND "objsubid" = ${Segment.paramSegment(compositeId.objsubid)(Setter.intSetter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgDescriptionFields, PgDescriptionRow] = {
    UpdateBuilder("pg_catalog.pg_description", PgDescriptionFields, PgDescriptionRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgDescriptionRow): ZIO[ZConnection, Throwable, UpdateResult[PgDescriptionRow]] = {
    sql"""insert into pg_catalog.pg_description("objoid", "classoid", "objsubid", "description")
          values (
            ${Segment.paramSegment(unsaved.objoid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.classoid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.objsubid)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.description)(Setter.stringSetter)}
          )
          on conflict ("objoid", "classoid", "objsubid")
          do update set
            "description" = EXCLUDED."description"
          returning "objoid", "classoid", "objsubid", "description"""".insertReturning(PgDescriptionRow.jdbcDecoder)
  }
}
