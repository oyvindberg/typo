/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_authid

import adventureworks.customtypes.TypoInstant
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgAuthidRepoImpl extends PgAuthidRepo {
  override def delete(oid: PgAuthidId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_authid where "oid" = ${Segment.paramSegment(oid)(PgAuthidId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgAuthidFields, PgAuthidRow] = {
    DeleteBuilder("pg_catalog.pg_authid", PgAuthidFields)
  }
  override def insert(unsaved: PgAuthidRow): ZIO[ZConnection, Throwable, PgAuthidRow] = {
    sql"""insert into pg_catalog.pg_authid("oid", "rolname", "rolsuper", "rolinherit", "rolcreaterole", "rolcreatedb", "rolcanlogin", "rolreplication", "rolbypassrls", "rolconnlimit", "rolpassword", "rolvaliduntil")
          values (${Segment.paramSegment(unsaved.oid)(PgAuthidId.setter)}::oid, ${Segment.paramSegment(unsaved.rolname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.rolsuper)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.rolinherit)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.rolcreaterole)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.rolcreatedb)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.rolcanlogin)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.rolreplication)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.rolbypassrls)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.rolconnlimit)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.rolpassword)(Setter.optionParamSetter(Setter.stringSetter))}, ${Segment.paramSegment(unsaved.rolvaliduntil)(Setter.optionParamSetter(TypoInstant.setter))}::timestamptz)
          returning "oid", "rolname", "rolsuper", "rolinherit", "rolcreaterole", "rolcreatedb", "rolcanlogin", "rolreplication", "rolbypassrls", "rolconnlimit", "rolpassword", "rolvaliduntil"::text
       """.insertReturning(PgAuthidRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgAuthidFields, PgAuthidRow] = {
    SelectBuilderSql("pg_catalog.pg_authid", PgAuthidFields, PgAuthidRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgAuthidRow] = {
    sql"""select "oid", "rolname", "rolsuper", "rolinherit", "rolcreaterole", "rolcreatedb", "rolcanlogin", "rolreplication", "rolbypassrls", "rolconnlimit", "rolpassword", "rolvaliduntil"::text from pg_catalog.pg_authid""".query(PgAuthidRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgAuthidId): ZIO[ZConnection, Throwable, Option[PgAuthidRow]] = {
    sql"""select "oid", "rolname", "rolsuper", "rolinherit", "rolcreaterole", "rolcreatedb", "rolcanlogin", "rolreplication", "rolbypassrls", "rolconnlimit", "rolpassword", "rolvaliduntil"::text from pg_catalog.pg_authid where "oid" = ${Segment.paramSegment(oid)(PgAuthidId.setter)}""".query(PgAuthidRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgAuthidId]): ZStream[ZConnection, Throwable, PgAuthidRow] = {
    sql"""select "oid", "rolname", "rolsuper", "rolinherit", "rolcreaterole", "rolcreatedb", "rolcanlogin", "rolreplication", "rolbypassrls", "rolconnlimit", "rolpassword", "rolvaliduntil"::text from pg_catalog.pg_authid where "oid" = ANY(${Segment.paramSegment(oids)(PgAuthidId.arraySetter)})""".query(PgAuthidRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(rolname: String): ZIO[ZConnection, Throwable, Option[PgAuthidRow]] = {
    sql"""select "rolname"
          from pg_catalog.pg_authid
          where "rolname" = ${Segment.paramSegment(rolname)(Setter.stringSetter)}
       """.query(PgAuthidRow.jdbcDecoder).selectOne
  }
  override def update(row: PgAuthidRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_authid
          set "rolname" = ${Segment.paramSegment(row.rolname)(Setter.stringSetter)}::name,
              "rolsuper" = ${Segment.paramSegment(row.rolsuper)(Setter.booleanSetter)},
              "rolinherit" = ${Segment.paramSegment(row.rolinherit)(Setter.booleanSetter)},
              "rolcreaterole" = ${Segment.paramSegment(row.rolcreaterole)(Setter.booleanSetter)},
              "rolcreatedb" = ${Segment.paramSegment(row.rolcreatedb)(Setter.booleanSetter)},
              "rolcanlogin" = ${Segment.paramSegment(row.rolcanlogin)(Setter.booleanSetter)},
              "rolreplication" = ${Segment.paramSegment(row.rolreplication)(Setter.booleanSetter)},
              "rolbypassrls" = ${Segment.paramSegment(row.rolbypassrls)(Setter.booleanSetter)},
              "rolconnlimit" = ${Segment.paramSegment(row.rolconnlimit)(Setter.intSetter)}::int4,
              "rolpassword" = ${Segment.paramSegment(row.rolpassword)(Setter.optionParamSetter(Setter.stringSetter))},
              "rolvaliduntil" = ${Segment.paramSegment(row.rolvaliduntil)(Setter.optionParamSetter(TypoInstant.setter))}::timestamptz
          where "oid" = ${Segment.paramSegment(oid)(PgAuthidId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgAuthidFields, PgAuthidRow] = {
    UpdateBuilder("pg_catalog.pg_authid", PgAuthidFields, PgAuthidRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgAuthidRow): ZIO[ZConnection, Throwable, UpdateResult[PgAuthidRow]] = {
    sql"""insert into pg_catalog.pg_authid("oid", "rolname", "rolsuper", "rolinherit", "rolcreaterole", "rolcreatedb", "rolcanlogin", "rolreplication", "rolbypassrls", "rolconnlimit", "rolpassword", "rolvaliduntil")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgAuthidId.setter)}::oid,
            ${Segment.paramSegment(unsaved.rolname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.rolsuper)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.rolinherit)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.rolcreaterole)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.rolcreatedb)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.rolcanlogin)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.rolreplication)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.rolbypassrls)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.rolconnlimit)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.rolpassword)(Setter.optionParamSetter(Setter.stringSetter))},
            ${Segment.paramSegment(unsaved.rolvaliduntil)(Setter.optionParamSetter(TypoInstant.setter))}::timestamptz
          )
          on conflict ("oid")
          do update set
            "rolname" = EXCLUDED."rolname",
            "rolsuper" = EXCLUDED."rolsuper",
            "rolinherit" = EXCLUDED."rolinherit",
            "rolcreaterole" = EXCLUDED."rolcreaterole",
            "rolcreatedb" = EXCLUDED."rolcreatedb",
            "rolcanlogin" = EXCLUDED."rolcanlogin",
            "rolreplication" = EXCLUDED."rolreplication",
            "rolbypassrls" = EXCLUDED."rolbypassrls",
            "rolconnlimit" = EXCLUDED."rolconnlimit",
            "rolpassword" = EXCLUDED."rolpassword",
            "rolvaliduntil" = EXCLUDED."rolvaliduntil"
          returning "oid", "rolname", "rolsuper", "rolinherit", "rolcreaterole", "rolcreatedb", "rolcanlogin", "rolreplication", "rolbypassrls", "rolconnlimit", "rolpassword", "rolvaliduntil"::text""".insertReturning(PgAuthidRow.jdbcDecoder)
  }
}
