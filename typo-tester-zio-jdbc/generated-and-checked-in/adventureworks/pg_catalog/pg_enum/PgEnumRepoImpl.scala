/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_enum

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgEnumRepoImpl extends PgEnumRepo {
  override def delete(oid: PgEnumId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_enum where "oid" = ${Segment.paramSegment(oid)(PgEnumId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgEnumFields, PgEnumRow] = {
    DeleteBuilder("pg_catalog.pg_enum", PgEnumFields)
  }
  override def insert(unsaved: PgEnumRow): ZIO[ZConnection, Throwable, PgEnumRow] = {
    sql"""insert into pg_catalog.pg_enum("oid", "enumtypid", "enumsortorder", "enumlabel")
          values (${Segment.paramSegment(unsaved.oid)(PgEnumId.setter)}::oid, ${Segment.paramSegment(unsaved.enumtypid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.enumsortorder)(Setter.floatSetter)}::float4, ${Segment.paramSegment(unsaved.enumlabel)(Setter.stringSetter)}::name)
          returning "oid", "enumtypid", "enumsortorder", "enumlabel"
       """.insertReturning(PgEnumRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgEnumFields, PgEnumRow] = {
    SelectBuilderSql("pg_catalog.pg_enum", PgEnumFields, PgEnumRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgEnumRow] = {
    sql"""select "oid", "enumtypid", "enumsortorder", "enumlabel" from pg_catalog.pg_enum""".query(PgEnumRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgEnumId): ZIO[ZConnection, Throwable, Option[PgEnumRow]] = {
    sql"""select "oid", "enumtypid", "enumsortorder", "enumlabel" from pg_catalog.pg_enum where "oid" = ${Segment.paramSegment(oid)(PgEnumId.setter)}""".query(PgEnumRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgEnumId]): ZStream[ZConnection, Throwable, PgEnumRow] = {
    sql"""select "oid", "enumtypid", "enumsortorder", "enumlabel" from pg_catalog.pg_enum where "oid" = ANY(${Segment.paramSegment(oids)(PgEnumId.arraySetter)})""".query(PgEnumRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(enumtypid: /* oid */ Long, enumlabel: String): ZIO[ZConnection, Throwable, Option[PgEnumRow]] = {
    sql"""select "enumtypid", "enumlabel"
          from pg_catalog.pg_enum
          where "enumtypid" = ${Segment.paramSegment(enumtypid)(Setter.longSetter)} AND "enumlabel" = ${Segment.paramSegment(enumlabel)(Setter.stringSetter)}
       """.query(PgEnumRow.jdbcDecoder).selectOne
  }
  override def selectByUnique(enumtypid: /* oid */ Long, enumsortorder: Float): ZIO[ZConnection, Throwable, Option[PgEnumRow]] = {
    sql"""select "enumtypid", "enumsortorder"
          from pg_catalog.pg_enum
          where "enumtypid" = ${Segment.paramSegment(enumtypid)(Setter.longSetter)} AND "enumsortorder" = ${Segment.paramSegment(enumsortorder)(Setter.floatSetter)}
       """.query(PgEnumRow.jdbcDecoder).selectOne
  }
  override def update(row: PgEnumRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_enum
          set "enumtypid" = ${Segment.paramSegment(row.enumtypid)(Setter.longSetter)}::oid,
              "enumsortorder" = ${Segment.paramSegment(row.enumsortorder)(Setter.floatSetter)}::float4,
              "enumlabel" = ${Segment.paramSegment(row.enumlabel)(Setter.stringSetter)}::name
          where "oid" = ${Segment.paramSegment(oid)(PgEnumId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgEnumFields, PgEnumRow] = {
    UpdateBuilder("pg_catalog.pg_enum", PgEnumFields, PgEnumRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgEnumRow): ZIO[ZConnection, Throwable, UpdateResult[PgEnumRow]] = {
    sql"""insert into pg_catalog.pg_enum("oid", "enumtypid", "enumsortorder", "enumlabel")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgEnumId.setter)}::oid,
            ${Segment.paramSegment(unsaved.enumtypid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.enumsortorder)(Setter.floatSetter)}::float4,
            ${Segment.paramSegment(unsaved.enumlabel)(Setter.stringSetter)}::name
          )
          on conflict ("oid")
          do update set
            "enumtypid" = EXCLUDED."enumtypid",
            "enumsortorder" = EXCLUDED."enumsortorder",
            "enumlabel" = EXCLUDED."enumlabel"
          returning "oid", "enumtypid", "enumsortorder", "enumlabel"""".insertReturning(PgEnumRow.jdbcDecoder)
  }
}
