/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_enum

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgEnumRow(
  oid: PgEnumId,
  enumtypid: /* oid */ Long,
  enumsortorder: Float,
  enumlabel: String
)

object PgEnumRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgEnumRow] = new JdbcDecoder[PgEnumRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgEnumRow) =
      columIndex + 3 ->
        PgEnumRow(
          oid = PgEnumId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          enumtypid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          enumsortorder = JdbcDecoder.floatDecoder.unsafeDecode(columIndex + 2, rs)._2,
          enumlabel = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgEnumRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgEnumId.jsonDecoder))
    val enumtypid = jsonObj.get("enumtypid").toRight("Missing field 'enumtypid'").flatMap(_.as(JsonDecoder.long))
    val enumsortorder = jsonObj.get("enumsortorder").toRight("Missing field 'enumsortorder'").flatMap(_.as(JsonDecoder.float))
    val enumlabel = jsonObj.get("enumlabel").toRight("Missing field 'enumlabel'").flatMap(_.as(JsonDecoder.string))
    if (oid.isRight && enumtypid.isRight && enumsortorder.isRight && enumlabel.isRight)
      Right(PgEnumRow(oid = oid.toOption.get, enumtypid = enumtypid.toOption.get, enumsortorder = enumsortorder.toOption.get, enumlabel = enumlabel.toOption.get))
    else Left(List[Either[String, Any]](oid, enumtypid, enumsortorder, enumlabel).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgEnumRow] = new JsonEncoder[PgEnumRow] {
    override def unsafeEncode(a: PgEnumRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgEnumId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""enumtypid":""")
      JsonEncoder.long.unsafeEncode(a.enumtypid, indent, out)
      out.write(",")
      out.write(""""enumsortorder":""")
      JsonEncoder.float.unsafeEncode(a.enumsortorder, indent, out)
      out.write(",")
      out.write(""""enumlabel":""")
      JsonEncoder.string.unsafeEncode(a.enumlabel, indent, out)
      out.write("}")
    }
  }
}
