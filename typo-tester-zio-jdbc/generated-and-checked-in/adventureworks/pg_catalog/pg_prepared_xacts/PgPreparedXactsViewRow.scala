/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_prepared_xacts

import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoXid
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgPreparedXactsViewRow(
  transaction: /* nullability unknown */ Option[TypoXid],
  gid: /* nullability unknown */ Option[String],
  prepared: /* nullability unknown */ Option[TypoInstant],
  /** Points to [[pg_authid.PgAuthidRow.rolname]] */
  owner: Option[String],
  /** Points to [[pg_database.PgDatabaseRow.datname]] */
  database: Option[String]
)

object PgPreparedXactsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgPreparedXactsViewRow] = new JdbcDecoder[PgPreparedXactsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgPreparedXactsViewRow) =
      columIndex + 4 ->
        PgPreparedXactsViewRow(
          transaction = JdbcDecoder.optionDecoder(TypoXid.jdbcDecoder).unsafeDecode(columIndex + 0, rs)._2,
          gid = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          prepared = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          owner = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          database = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgPreparedXactsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val transaction = jsonObj.get("transaction").fold[Either[String, Option[TypoXid]]](Right(None))(_.as(JsonDecoder.option(TypoXid.jsonDecoder)))
    val gid = jsonObj.get("gid").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val prepared = jsonObj.get("prepared").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val owner = jsonObj.get("owner").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val database = jsonObj.get("database").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (transaction.isRight && gid.isRight && prepared.isRight && owner.isRight && database.isRight)
      Right(PgPreparedXactsViewRow(transaction = transaction.toOption.get, gid = gid.toOption.get, prepared = prepared.toOption.get, owner = owner.toOption.get, database = database.toOption.get))
    else Left(List[Either[String, Any]](transaction, gid, prepared, owner, database).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgPreparedXactsViewRow] = new JsonEncoder[PgPreparedXactsViewRow] {
    override def unsafeEncode(a: PgPreparedXactsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""transaction":""")
      JsonEncoder.option(TypoXid.jsonEncoder).unsafeEncode(a.transaction, indent, out)
      out.write(",")
      out.write(""""gid":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.gid, indent, out)
      out.write(",")
      out.write(""""prepared":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.prepared, indent, out)
      out.write(",")
      out.write(""""owner":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.owner, indent, out)
      out.write(",")
      out.write(""""database":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.database, indent, out)
      out.write("}")
    }
  }
}
