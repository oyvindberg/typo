/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_language

import adventureworks.customtypes.TypoAclItem
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgLanguageRepoImpl extends PgLanguageRepo {
  override def delete(oid: PgLanguageId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_language where "oid" = ${Segment.paramSegment(oid)(PgLanguageId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgLanguageFields, PgLanguageRow] = {
    DeleteBuilder("pg_catalog.pg_language", PgLanguageFields)
  }
  override def insert(unsaved: PgLanguageRow): ZIO[ZConnection, Throwable, PgLanguageRow] = {
    sql"""insert into pg_catalog.pg_language("oid", "lanname", "lanowner", "lanispl", "lanpltrusted", "lanplcallfoid", "laninline", "lanvalidator", "lanacl")
          values (${Segment.paramSegment(unsaved.oid)(PgLanguageId.setter)}::oid, ${Segment.paramSegment(unsaved.lanname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.lanowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.lanispl)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.lanpltrusted)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.lanplcallfoid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.laninline)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.lanvalidator)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.lanacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem)
          returning "oid", "lanname", "lanowner", "lanispl", "lanpltrusted", "lanplcallfoid", "laninline", "lanvalidator", "lanacl"
       """.insertReturning(PgLanguageRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgLanguageFields, PgLanguageRow] = {
    SelectBuilderSql("pg_catalog.pg_language", PgLanguageFields, PgLanguageRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgLanguageRow] = {
    sql"""select "oid", "lanname", "lanowner", "lanispl", "lanpltrusted", "lanplcallfoid", "laninline", "lanvalidator", "lanacl" from pg_catalog.pg_language""".query(PgLanguageRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgLanguageId): ZIO[ZConnection, Throwable, Option[PgLanguageRow]] = {
    sql"""select "oid", "lanname", "lanowner", "lanispl", "lanpltrusted", "lanplcallfoid", "laninline", "lanvalidator", "lanacl" from pg_catalog.pg_language where "oid" = ${Segment.paramSegment(oid)(PgLanguageId.setter)}""".query(PgLanguageRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgLanguageId]): ZStream[ZConnection, Throwable, PgLanguageRow] = {
    sql"""select "oid", "lanname", "lanowner", "lanispl", "lanpltrusted", "lanplcallfoid", "laninline", "lanvalidator", "lanacl" from pg_catalog.pg_language where "oid" = ANY(${Segment.paramSegment(oids)(PgLanguageId.arraySetter)})""".query(PgLanguageRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(lanname: String): ZIO[ZConnection, Throwable, Option[PgLanguageRow]] = {
    sql"""select "lanname"
          from pg_catalog.pg_language
          where "lanname" = ${Segment.paramSegment(lanname)(Setter.stringSetter)}
       """.query(PgLanguageRow.jdbcDecoder).selectOne
  }
  override def update(row: PgLanguageRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_language
          set "lanname" = ${Segment.paramSegment(row.lanname)(Setter.stringSetter)}::name,
              "lanowner" = ${Segment.paramSegment(row.lanowner)(Setter.longSetter)}::oid,
              "lanispl" = ${Segment.paramSegment(row.lanispl)(Setter.booleanSetter)},
              "lanpltrusted" = ${Segment.paramSegment(row.lanpltrusted)(Setter.booleanSetter)},
              "lanplcallfoid" = ${Segment.paramSegment(row.lanplcallfoid)(Setter.longSetter)}::oid,
              "laninline" = ${Segment.paramSegment(row.laninline)(Setter.longSetter)}::oid,
              "lanvalidator" = ${Segment.paramSegment(row.lanvalidator)(Setter.longSetter)}::oid,
              "lanacl" = ${Segment.paramSegment(row.lanacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem
          where "oid" = ${Segment.paramSegment(oid)(PgLanguageId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgLanguageFields, PgLanguageRow] = {
    UpdateBuilder("pg_catalog.pg_language", PgLanguageFields, PgLanguageRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgLanguageRow): ZIO[ZConnection, Throwable, UpdateResult[PgLanguageRow]] = {
    sql"""insert into pg_catalog.pg_language("oid", "lanname", "lanowner", "lanispl", "lanpltrusted", "lanplcallfoid", "laninline", "lanvalidator", "lanacl")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgLanguageId.setter)}::oid,
            ${Segment.paramSegment(unsaved.lanname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.lanowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.lanispl)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.lanpltrusted)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.lanplcallfoid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.laninline)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.lanvalidator)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.lanacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem
          )
          on conflict ("oid")
          do update set
            "lanname" = EXCLUDED."lanname",
            "lanowner" = EXCLUDED."lanowner",
            "lanispl" = EXCLUDED."lanispl",
            "lanpltrusted" = EXCLUDED."lanpltrusted",
            "lanplcallfoid" = EXCLUDED."lanplcallfoid",
            "laninline" = EXCLUDED."laninline",
            "lanvalidator" = EXCLUDED."lanvalidator",
            "lanacl" = EXCLUDED."lanacl"
          returning "oid", "lanname", "lanowner", "lanispl", "lanpltrusted", "lanplcallfoid", "laninline", "lanvalidator", "lanacl"""".insertReturning(PgLanguageRow.jdbcDecoder)
  }
}
