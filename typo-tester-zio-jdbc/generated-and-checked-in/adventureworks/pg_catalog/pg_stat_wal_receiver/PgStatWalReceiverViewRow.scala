/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_wal_receiver

import adventureworks.customtypes.TypoInstant
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatWalReceiverViewRow(
  pid: /* nullability unknown */ Option[Int],
  status: /* nullability unknown */ Option[String],
  receiveStartLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  receiveStartTli: /* nullability unknown */ Option[Int],
  writtenLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  flushedLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  receivedTli: /* nullability unknown */ Option[Int],
  lastMsgSendTime: /* nullability unknown */ Option[TypoInstant],
  lastMsgReceiptTime: /* nullability unknown */ Option[TypoInstant],
  latestEndLsn: /* nullability unknown */ Option[/* pg_lsn */ Long],
  latestEndTime: /* nullability unknown */ Option[TypoInstant],
  slotName: /* nullability unknown */ Option[String],
  senderHost: /* nullability unknown */ Option[String],
  senderPort: /* nullability unknown */ Option[Int],
  conninfo: /* nullability unknown */ Option[String]
)

object PgStatWalReceiverViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatWalReceiverViewRow] = new JdbcDecoder[PgStatWalReceiverViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatWalReceiverViewRow) =
      columIndex + 14 ->
        PgStatWalReceiverViewRow(
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 0, rs)._2,
          status = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          receiveStartLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 2, rs)._2,
          receiveStartTli = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 3, rs)._2,
          writtenLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          flushedLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          receivedTli = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 6, rs)._2,
          lastMsgSendTime = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 7, rs)._2,
          lastMsgReceiptTime = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 8, rs)._2,
          latestEndLsn = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 9, rs)._2,
          latestEndTime = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 10, rs)._2,
          slotName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 11, rs)._2,
          senderHost = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 12, rs)._2,
          senderPort = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 13, rs)._2,
          conninfo = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 14, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatWalReceiverViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val status = jsonObj.get("status").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val receiveStartLsn = jsonObj.get("receive_start_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val receiveStartTli = jsonObj.get("receive_start_tli").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val writtenLsn = jsonObj.get("written_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val flushedLsn = jsonObj.get("flushed_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val receivedTli = jsonObj.get("received_tli").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val lastMsgSendTime = jsonObj.get("last_msg_send_time").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val lastMsgReceiptTime = jsonObj.get("last_msg_receipt_time").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val latestEndLsn = jsonObj.get("latest_end_lsn").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val latestEndTime = jsonObj.get("latest_end_time").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val slotName = jsonObj.get("slot_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val senderHost = jsonObj.get("sender_host").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val senderPort = jsonObj.get("sender_port").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val conninfo = jsonObj.get("conninfo").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (pid.isRight && status.isRight && receiveStartLsn.isRight && receiveStartTli.isRight && writtenLsn.isRight && flushedLsn.isRight && receivedTli.isRight && lastMsgSendTime.isRight && lastMsgReceiptTime.isRight && latestEndLsn.isRight && latestEndTime.isRight && slotName.isRight && senderHost.isRight && senderPort.isRight && conninfo.isRight)
      Right(PgStatWalReceiverViewRow(pid = pid.toOption.get, status = status.toOption.get, receiveStartLsn = receiveStartLsn.toOption.get, receiveStartTli = receiveStartTli.toOption.get, writtenLsn = writtenLsn.toOption.get, flushedLsn = flushedLsn.toOption.get, receivedTli = receivedTli.toOption.get, lastMsgSendTime = lastMsgSendTime.toOption.get, lastMsgReceiptTime = lastMsgReceiptTime.toOption.get, latestEndLsn = latestEndLsn.toOption.get, latestEndTime = latestEndTime.toOption.get, slotName = slotName.toOption.get, senderHost = senderHost.toOption.get, senderPort = senderPort.toOption.get, conninfo = conninfo.toOption.get))
    else Left(List[Either[String, Any]](pid, status, receiveStartLsn, receiveStartTli, writtenLsn, flushedLsn, receivedTli, lastMsgSendTime, lastMsgReceiptTime, latestEndLsn, latestEndTime, slotName, senderHost, senderPort, conninfo).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatWalReceiverViewRow] = new JsonEncoder[PgStatWalReceiverViewRow] {
    override def unsafeEncode(a: PgStatWalReceiverViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""status":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.status, indent, out)
      out.write(",")
      out.write(""""receive_start_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.receiveStartLsn, indent, out)
      out.write(",")
      out.write(""""receive_start_tli":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.receiveStartTli, indent, out)
      out.write(",")
      out.write(""""written_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.writtenLsn, indent, out)
      out.write(",")
      out.write(""""flushed_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.flushedLsn, indent, out)
      out.write(",")
      out.write(""""received_tli":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.receivedTli, indent, out)
      out.write(",")
      out.write(""""last_msg_send_time":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.lastMsgSendTime, indent, out)
      out.write(",")
      out.write(""""last_msg_receipt_time":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.lastMsgReceiptTime, indent, out)
      out.write(",")
      out.write(""""latest_end_lsn":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.latestEndLsn, indent, out)
      out.write(",")
      out.write(""""latest_end_time":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.latestEndTime, indent, out)
      out.write(",")
      out.write(""""slot_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.slotName, indent, out)
      out.write(",")
      out.write(""""sender_host":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.senderHost, indent, out)
      out.write(",")
      out.write(""""sender_port":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.senderPort, indent, out)
      out.write(",")
      out.write(""""conninfo":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.conninfo, indent, out)
      out.write("}")
    }
  }
}
