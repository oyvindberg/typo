/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_seclabels

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgSeclabelsViewRow(
  objoid: /* nullability unknown */ Option[/* oid */ Long],
  classoid: /* nullability unknown */ Option[/* oid */ Long],
  objsubid: /* nullability unknown */ Option[Int],
  objtype: /* nullability unknown */ Option[String],
  objnamespace: /* nullability unknown */ Option[/* oid */ Long],
  objname: /* nullability unknown */ Option[String],
  provider: /* nullability unknown */ Option[String],
  label: /* nullability unknown */ Option[String]
)

object PgSeclabelsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgSeclabelsViewRow] = new JdbcDecoder[PgSeclabelsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgSeclabelsViewRow) =
      columIndex + 7 ->
        PgSeclabelsViewRow(
          objoid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 0, rs)._2,
          classoid = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          objsubid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 2, rs)._2,
          objtype = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          objnamespace = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          objname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          provider = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          label = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgSeclabelsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val objoid = jsonObj.get("objoid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val classoid = jsonObj.get("classoid").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val objsubid = jsonObj.get("objsubid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val objtype = jsonObj.get("objtype").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val objnamespace = jsonObj.get("objnamespace").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val objname = jsonObj.get("objname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val provider = jsonObj.get("provider").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val label = jsonObj.get("label").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (objoid.isRight && classoid.isRight && objsubid.isRight && objtype.isRight && objnamespace.isRight && objname.isRight && provider.isRight && label.isRight)
      Right(PgSeclabelsViewRow(objoid = objoid.toOption.get, classoid = classoid.toOption.get, objsubid = objsubid.toOption.get, objtype = objtype.toOption.get, objnamespace = objnamespace.toOption.get, objname = objname.toOption.get, provider = provider.toOption.get, label = label.toOption.get))
    else Left(List[Either[String, Any]](objoid, classoid, objsubid, objtype, objnamespace, objname, provider, label).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgSeclabelsViewRow] = new JsonEncoder[PgSeclabelsViewRow] {
    override def unsafeEncode(a: PgSeclabelsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""objoid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.objoid, indent, out)
      out.write(",")
      out.write(""""classoid":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.classoid, indent, out)
      out.write(",")
      out.write(""""objsubid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.objsubid, indent, out)
      out.write(",")
      out.write(""""objtype":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objtype, indent, out)
      out.write(",")
      out.write(""""objnamespace":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.objnamespace, indent, out)
      out.write(",")
      out.write(""""objname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.objname, indent, out)
      out.write(",")
      out.write(""""provider":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.provider, indent, out)
      out.write(",")
      out.write(""""label":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.label, indent, out)
      out.write("}")
    }
  }
}
