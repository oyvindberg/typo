/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_data_wrapper

import adventureworks.customtypes.TypoAclItem
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgForeignDataWrapperRow(
  oid: PgForeignDataWrapperId,
  fdwname: String,
  fdwowner: /* oid */ Long,
  fdwhandler: /* oid */ Long,
  fdwvalidator: /* oid */ Long,
  fdwacl: Option[Array[TypoAclItem]],
  fdwoptions: Option[Array[String]]
)

object PgForeignDataWrapperRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgForeignDataWrapperRow] = new JdbcDecoder[PgForeignDataWrapperRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgForeignDataWrapperRow) =
      columIndex + 6 ->
        PgForeignDataWrapperRow(
          oid = PgForeignDataWrapperId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          fdwname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          fdwowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          fdwhandler = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          fdwvalidator = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          fdwacl = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoAclItem]]).unsafeDecode(columIndex + 5, rs)._2,
          fdwoptions = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgForeignDataWrapperRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgForeignDataWrapperId.jsonDecoder))
    val fdwname = jsonObj.get("fdwname").toRight("Missing field 'fdwname'").flatMap(_.as(JsonDecoder.string))
    val fdwowner = jsonObj.get("fdwowner").toRight("Missing field 'fdwowner'").flatMap(_.as(JsonDecoder.long))
    val fdwhandler = jsonObj.get("fdwhandler").toRight("Missing field 'fdwhandler'").flatMap(_.as(JsonDecoder.long))
    val fdwvalidator = jsonObj.get("fdwvalidator").toRight("Missing field 'fdwvalidator'").flatMap(_.as(JsonDecoder.long))
    val fdwacl = jsonObj.get("fdwacl").fold[Either[String, Option[Array[TypoAclItem]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly))))
    val fdwoptions = jsonObj.get("fdwoptions").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    if (oid.isRight && fdwname.isRight && fdwowner.isRight && fdwhandler.isRight && fdwvalidator.isRight && fdwacl.isRight && fdwoptions.isRight)
      Right(PgForeignDataWrapperRow(oid = oid.toOption.get, fdwname = fdwname.toOption.get, fdwowner = fdwowner.toOption.get, fdwhandler = fdwhandler.toOption.get, fdwvalidator = fdwvalidator.toOption.get, fdwacl = fdwacl.toOption.get, fdwoptions = fdwoptions.toOption.get))
    else Left(List[Either[String, Any]](oid, fdwname, fdwowner, fdwhandler, fdwvalidator, fdwacl, fdwoptions).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgForeignDataWrapperRow] = new JsonEncoder[PgForeignDataWrapperRow] {
    override def unsafeEncode(a: PgForeignDataWrapperRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgForeignDataWrapperId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""fdwname":""")
      JsonEncoder.string.unsafeEncode(a.fdwname, indent, out)
      out.write(",")
      out.write(""""fdwowner":""")
      JsonEncoder.long.unsafeEncode(a.fdwowner, indent, out)
      out.write(",")
      out.write(""""fdwhandler":""")
      JsonEncoder.long.unsafeEncode(a.fdwhandler, indent, out)
      out.write(",")
      out.write(""""fdwvalidator":""")
      JsonEncoder.long.unsafeEncode(a.fdwvalidator, indent, out)
      out.write(",")
      out.write(""""fdwacl":""")
      JsonEncoder.option(JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly)).unsafeEncode(a.fdwacl, indent, out)
      out.write(",")
      out.write(""""fdwoptions":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.fdwoptions, indent, out)
      out.write("}")
    }
  }
}
