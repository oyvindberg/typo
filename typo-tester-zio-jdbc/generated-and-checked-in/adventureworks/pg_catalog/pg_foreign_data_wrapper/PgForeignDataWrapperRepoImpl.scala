/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_foreign_data_wrapper

import adventureworks.customtypes.TypoAclItem
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgForeignDataWrapperRepoImpl extends PgForeignDataWrapperRepo {
  override def delete(oid: PgForeignDataWrapperId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_foreign_data_wrapper where "oid" = ${Segment.paramSegment(oid)(PgForeignDataWrapperId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgForeignDataWrapperFields, PgForeignDataWrapperRow] = {
    DeleteBuilder("pg_catalog.pg_foreign_data_wrapper", PgForeignDataWrapperFields)
  }
  override def insert(unsaved: PgForeignDataWrapperRow): ZIO[ZConnection, Throwable, PgForeignDataWrapperRow] = {
    sql"""insert into pg_catalog.pg_foreign_data_wrapper("oid", "fdwname", "fdwowner", "fdwhandler", "fdwvalidator", "fdwacl", "fdwoptions")
          values (${Segment.paramSegment(unsaved.oid)(PgForeignDataWrapperId.setter)}::oid, ${Segment.paramSegment(unsaved.fdwname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.fdwowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.fdwhandler)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.fdwvalidator)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.fdwacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem, ${Segment.paramSegment(unsaved.fdwoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text)
          returning "oid", "fdwname", "fdwowner", "fdwhandler", "fdwvalidator", "fdwacl", "fdwoptions"
       """.insertReturning(PgForeignDataWrapperRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgForeignDataWrapperFields, PgForeignDataWrapperRow] = {
    SelectBuilderSql("pg_catalog.pg_foreign_data_wrapper", PgForeignDataWrapperFields, PgForeignDataWrapperRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgForeignDataWrapperRow] = {
    sql"""select "oid", "fdwname", "fdwowner", "fdwhandler", "fdwvalidator", "fdwacl", "fdwoptions" from pg_catalog.pg_foreign_data_wrapper""".query(PgForeignDataWrapperRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgForeignDataWrapperId): ZIO[ZConnection, Throwable, Option[PgForeignDataWrapperRow]] = {
    sql"""select "oid", "fdwname", "fdwowner", "fdwhandler", "fdwvalidator", "fdwacl", "fdwoptions" from pg_catalog.pg_foreign_data_wrapper where "oid" = ${Segment.paramSegment(oid)(PgForeignDataWrapperId.setter)}""".query(PgForeignDataWrapperRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgForeignDataWrapperId]): ZStream[ZConnection, Throwable, PgForeignDataWrapperRow] = {
    sql"""select "oid", "fdwname", "fdwowner", "fdwhandler", "fdwvalidator", "fdwacl", "fdwoptions" from pg_catalog.pg_foreign_data_wrapper where "oid" = ANY(${Segment.paramSegment(oids)(PgForeignDataWrapperId.arraySetter)})""".query(PgForeignDataWrapperRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(fdwname: String): ZIO[ZConnection, Throwable, Option[PgForeignDataWrapperRow]] = {
    sql"""select "fdwname"
          from pg_catalog.pg_foreign_data_wrapper
          where "fdwname" = ${Segment.paramSegment(fdwname)(Setter.stringSetter)}
       """.query(PgForeignDataWrapperRow.jdbcDecoder).selectOne
  }
  override def update(row: PgForeignDataWrapperRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_foreign_data_wrapper
          set "fdwname" = ${Segment.paramSegment(row.fdwname)(Setter.stringSetter)}::name,
              "fdwowner" = ${Segment.paramSegment(row.fdwowner)(Setter.longSetter)}::oid,
              "fdwhandler" = ${Segment.paramSegment(row.fdwhandler)(Setter.longSetter)}::oid,
              "fdwvalidator" = ${Segment.paramSegment(row.fdwvalidator)(Setter.longSetter)}::oid,
              "fdwacl" = ${Segment.paramSegment(row.fdwacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem,
              "fdwoptions" = ${Segment.paramSegment(row.fdwoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          where "oid" = ${Segment.paramSegment(oid)(PgForeignDataWrapperId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgForeignDataWrapperFields, PgForeignDataWrapperRow] = {
    UpdateBuilder("pg_catalog.pg_foreign_data_wrapper", PgForeignDataWrapperFields, PgForeignDataWrapperRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgForeignDataWrapperRow): ZIO[ZConnection, Throwable, UpdateResult[PgForeignDataWrapperRow]] = {
    sql"""insert into pg_catalog.pg_foreign_data_wrapper("oid", "fdwname", "fdwowner", "fdwhandler", "fdwvalidator", "fdwacl", "fdwoptions")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgForeignDataWrapperId.setter)}::oid,
            ${Segment.paramSegment(unsaved.fdwname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.fdwowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.fdwhandler)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.fdwvalidator)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.fdwacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem,
            ${Segment.paramSegment(unsaved.fdwoptions)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text
          )
          on conflict ("oid")
          do update set
            "fdwname" = EXCLUDED."fdwname",
            "fdwowner" = EXCLUDED."fdwowner",
            "fdwhandler" = EXCLUDED."fdwhandler",
            "fdwvalidator" = EXCLUDED."fdwvalidator",
            "fdwacl" = EXCLUDED."fdwacl",
            "fdwoptions" = EXCLUDED."fdwoptions"
          returning "oid", "fdwname", "fdwowner", "fdwhandler", "fdwvalidator", "fdwacl", "fdwoptions"""".insertReturning(PgForeignDataWrapperRow.jdbcDecoder)
  }
}
