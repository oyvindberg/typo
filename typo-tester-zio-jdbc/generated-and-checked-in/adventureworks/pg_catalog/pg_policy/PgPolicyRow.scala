/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_policy

import adventureworks.customtypes.TypoPgNodeTree
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgPolicyRow(
  oid: PgPolicyId,
  polname: String,
  polrelid: /* oid */ Long,
  polcmd: String,
  polpermissive: Boolean,
  polroles: Array[/* oid */ Long],
  polqual: Option[TypoPgNodeTree],
  polwithcheck: Option[TypoPgNodeTree]
)

object PgPolicyRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgPolicyRow] = new JdbcDecoder[PgPolicyRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgPolicyRow) =
      columIndex + 7 ->
        PgPolicyRow(
          oid = PgPolicyId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          polname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          polrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          polcmd = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          polpermissive = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 4, rs)._2,
          polroles = adventureworks.LongArrayDecoder.unsafeDecode(columIndex + 5, rs)._2,
          polqual = JdbcDecoder.optionDecoder(TypoPgNodeTree.jdbcDecoder).unsafeDecode(columIndex + 6, rs)._2,
          polwithcheck = JdbcDecoder.optionDecoder(TypoPgNodeTree.jdbcDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgPolicyRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgPolicyId.jsonDecoder))
    val polname = jsonObj.get("polname").toRight("Missing field 'polname'").flatMap(_.as(JsonDecoder.string))
    val polrelid = jsonObj.get("polrelid").toRight("Missing field 'polrelid'").flatMap(_.as(JsonDecoder.long))
    val polcmd = jsonObj.get("polcmd").toRight("Missing field 'polcmd'").flatMap(_.as(JsonDecoder.string))
    val polpermissive = jsonObj.get("polpermissive").toRight("Missing field 'polpermissive'").flatMap(_.as(JsonDecoder.boolean))
    val polroles = jsonObj.get("polroles").toRight("Missing field 'polroles'").flatMap(_.as(JsonDecoder.array[Long](JsonDecoder.long, implicitly)))
    val polqual = jsonObj.get("polqual").fold[Either[String, Option[TypoPgNodeTree]]](Right(None))(_.as(JsonDecoder.option(TypoPgNodeTree.jsonDecoder)))
    val polwithcheck = jsonObj.get("polwithcheck").fold[Either[String, Option[TypoPgNodeTree]]](Right(None))(_.as(JsonDecoder.option(TypoPgNodeTree.jsonDecoder)))
    if (oid.isRight && polname.isRight && polrelid.isRight && polcmd.isRight && polpermissive.isRight && polroles.isRight && polqual.isRight && polwithcheck.isRight)
      Right(PgPolicyRow(oid = oid.toOption.get, polname = polname.toOption.get, polrelid = polrelid.toOption.get, polcmd = polcmd.toOption.get, polpermissive = polpermissive.toOption.get, polroles = polroles.toOption.get, polqual = polqual.toOption.get, polwithcheck = polwithcheck.toOption.get))
    else Left(List[Either[String, Any]](oid, polname, polrelid, polcmd, polpermissive, polroles, polqual, polwithcheck).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgPolicyRow] = new JsonEncoder[PgPolicyRow] {
    override def unsafeEncode(a: PgPolicyRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgPolicyId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""polname":""")
      JsonEncoder.string.unsafeEncode(a.polname, indent, out)
      out.write(",")
      out.write(""""polrelid":""")
      JsonEncoder.long.unsafeEncode(a.polrelid, indent, out)
      out.write(",")
      out.write(""""polcmd":""")
      JsonEncoder.string.unsafeEncode(a.polcmd, indent, out)
      out.write(",")
      out.write(""""polpermissive":""")
      JsonEncoder.boolean.unsafeEncode(a.polpermissive, indent, out)
      out.write(",")
      out.write(""""polroles":""")
      JsonEncoder.array[Long](JsonEncoder.long, implicitly).unsafeEncode(a.polroles, indent, out)
      out.write(",")
      out.write(""""polqual":""")
      JsonEncoder.option(TypoPgNodeTree.jsonEncoder).unsafeEncode(a.polqual, indent, out)
      out.write(",")
      out.write(""""polwithcheck":""")
      JsonEncoder.option(TypoPgNodeTree.jsonEncoder).unsafeEncode(a.polwithcheck, indent, out)
      out.write("}")
    }
  }
}
