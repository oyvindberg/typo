/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_policy

import adventureworks.customtypes.TypoPgNodeTree
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgPolicyRepoImpl extends PgPolicyRepo {
  override def delete(oid: PgPolicyId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_policy where "oid" = ${Segment.paramSegment(oid)(PgPolicyId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgPolicyFields, PgPolicyRow] = {
    DeleteBuilder("pg_catalog.pg_policy", PgPolicyFields)
  }
  override def insert(unsaved: PgPolicyRow): ZIO[ZConnection, Throwable, PgPolicyRow] = {
    sql"""insert into pg_catalog.pg_policy("oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck")
          values (${Segment.paramSegment(unsaved.oid)(PgPolicyId.setter)}::oid, ${Segment.paramSegment(unsaved.polname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.polrelid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.polcmd)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.polpermissive)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.polroles)(adventureworks.LongArraySetter)}::_oid, ${Segment.paramSegment(unsaved.polqual)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree, ${Segment.paramSegment(unsaved.polwithcheck)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree)
          returning "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck"
       """.insertReturning(PgPolicyRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgPolicyFields, PgPolicyRow] = {
    SelectBuilderSql("pg_catalog.pg_policy", PgPolicyFields, PgPolicyRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgPolicyRow] = {
    sql"""select "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck" from pg_catalog.pg_policy""".query(PgPolicyRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgPolicyId): ZIO[ZConnection, Throwable, Option[PgPolicyRow]] = {
    sql"""select "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck" from pg_catalog.pg_policy where "oid" = ${Segment.paramSegment(oid)(PgPolicyId.setter)}""".query(PgPolicyRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgPolicyId]): ZStream[ZConnection, Throwable, PgPolicyRow] = {
    sql"""select "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck" from pg_catalog.pg_policy where "oid" = ANY(${Segment.paramSegment(oids)(PgPolicyId.arraySetter)})""".query(PgPolicyRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(polrelid: /* oid */ Long, polname: String): ZIO[ZConnection, Throwable, Option[PgPolicyRow]] = {
    sql"""select "polrelid", "polname"
          from pg_catalog.pg_policy
          where "polrelid" = ${Segment.paramSegment(polrelid)(Setter.longSetter)} AND "polname" = ${Segment.paramSegment(polname)(Setter.stringSetter)}
       """.query(PgPolicyRow.jdbcDecoder).selectOne
  }
  override def update(row: PgPolicyRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_policy
          set "polname" = ${Segment.paramSegment(row.polname)(Setter.stringSetter)}::name,
              "polrelid" = ${Segment.paramSegment(row.polrelid)(Setter.longSetter)}::oid,
              "polcmd" = ${Segment.paramSegment(row.polcmd)(Setter.stringSetter)}::char,
              "polpermissive" = ${Segment.paramSegment(row.polpermissive)(Setter.booleanSetter)},
              "polroles" = ${Segment.paramSegment(row.polroles)(adventureworks.LongArraySetter)}::_oid,
              "polqual" = ${Segment.paramSegment(row.polqual)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree,
              "polwithcheck" = ${Segment.paramSegment(row.polwithcheck)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree
          where "oid" = ${Segment.paramSegment(oid)(PgPolicyId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgPolicyFields, PgPolicyRow] = {
    UpdateBuilder("pg_catalog.pg_policy", PgPolicyFields, PgPolicyRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgPolicyRow): ZIO[ZConnection, Throwable, UpdateResult[PgPolicyRow]] = {
    sql"""insert into pg_catalog.pg_policy("oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgPolicyId.setter)}::oid,
            ${Segment.paramSegment(unsaved.polname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.polrelid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.polcmd)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.polpermissive)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.polroles)(adventureworks.LongArraySetter)}::_oid,
            ${Segment.paramSegment(unsaved.polqual)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree,
            ${Segment.paramSegment(unsaved.polwithcheck)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree
          )
          on conflict ("oid")
          do update set
            "polname" = EXCLUDED."polname",
            "polrelid" = EXCLUDED."polrelid",
            "polcmd" = EXCLUDED."polcmd",
            "polpermissive" = EXCLUDED."polpermissive",
            "polroles" = EXCLUDED."polroles",
            "polqual" = EXCLUDED."polqual",
            "polwithcheck" = EXCLUDED."polwithcheck"
          returning "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck"""".insertReturning(PgPolicyRow.jdbcDecoder)
  }
}
