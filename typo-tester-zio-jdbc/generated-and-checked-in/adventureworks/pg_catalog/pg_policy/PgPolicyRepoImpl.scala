/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_policy

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgPolicyRepoImpl extends PgPolicyRepo {
  override def delete(oid: PgPolicyId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_policy where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgPolicyFields, PgPolicyRow] = {
    DeleteBuilder("pg_catalog.pg_policy", PgPolicyFields)
  }
  override def insert(unsaved: PgPolicyRow): ZIO[ZConnection, Throwable, PgPolicyRow] = {
    sql"""insert into pg_catalog.pg_policy("oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck")
          values (???::oid, ???::name, ???::oid, ???::char, ???, ???::_oid, ???::pg_node_tree, ???::pg_node_tree)
          returning "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgPolicyFields, PgPolicyRow] = {
    SelectBuilderSql("pg_catalog.pg_policy", PgPolicyFields, PgPolicyRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgPolicyRow] = {
    sql"""select "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck" from pg_catalog.pg_policy""".query[PgPolicyRow].selectStream
  }
  override def selectById(oid: PgPolicyId): ZIO[ZConnection, Throwable, Option[PgPolicyRow]] = {
    sql"""select "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck" from pg_catalog.pg_policy where "oid" = ???""".query[PgPolicyRow].selectOne
  }
  override def selectByIds(oids: Array[PgPolicyId]): ZStream[ZConnection, Throwable, PgPolicyRow] = {
    sql"""select "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck" from pg_catalog.pg_policy where "oid" = ANY(${oids})""".query[PgPolicyRow].selectStream
  }
  override def selectByUnique(polrelid: /* oid */ Long, polname: String): ZIO[ZConnection, Throwable, Option[PgPolicyRow]] = {
    sql"""select "polrelid", "polname"
          from pg_catalog.pg_policy
          where "polrelid" = ??? AND "polname" = ???
       """.query[PgPolicyRow].selectOne
  }
  override def update(row: PgPolicyRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_policy
          set "polname" = ???::name,
              "polrelid" = ???::oid,
              "polcmd" = ???::char,
              "polpermissive" = ???,
              "polroles" = ???::_oid,
              "polqual" = ???::pg_node_tree,
              "polwithcheck" = ???::pg_node_tree
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgPolicyFields, PgPolicyRow] = {
    UpdateBuilder("pg_catalog.pg_policy", PgPolicyFields, PgPolicyRow.read)
  }
  override def upsert(unsaved: PgPolicyRow): ZIO[ZConnection, Throwable, PgPolicyRow] = {
    sql"""insert into pg_catalog.pg_policy("oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::char,
            ???,
            ???::_oid,
            ???::pg_node_tree,
            ???::pg_node_tree
          )
          on conflict ("oid")
          do update set
            "polname" = EXCLUDED."polname",
            "polrelid" = EXCLUDED."polrelid",
            "polcmd" = EXCLUDED."polcmd",
            "polpermissive" = EXCLUDED."polpermissive",
            "polroles" = EXCLUDED."polroles",
            "polqual" = EXCLUDED."polqual",
            "polwithcheck" = EXCLUDED."polwithcheck"
          returning "oid", "polname", "polrelid", "polcmd", "polpermissive", "polroles", "polqual", "polwithcheck"
       """.query(???).unique
  }
}
