/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_index

import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoOidVector
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgIndexRepoImpl extends PgIndexRepo {
  override def delete(indexrelid: PgIndexId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_index where "indexrelid" = ${Segment.paramSegment(indexrelid)(PgIndexId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgIndexFields, PgIndexRow] = {
    DeleteBuilder("pg_catalog.pg_index", PgIndexFields)
  }
  override def insert(unsaved: PgIndexRow): ZIO[ZConnection, Throwable, PgIndexRow] = {
    sql"""insert into pg_catalog.pg_index("indexrelid", "indrelid", "indnatts", "indnkeyatts", "indisunique", "indisprimary", "indisexclusion", "indimmediate", "indisclustered", "indisvalid", "indcheckxmin", "indisready", "indislive", "indisreplident", "indkey", "indcollation", "indclass", "indoption", "indexprs", "indpred")
          values (${Segment.paramSegment(unsaved.indexrelid)(PgIndexId.setter)}::oid, ${Segment.paramSegment(unsaved.indrelid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.indnatts)(TypoShort.setter)}::int2, ${Segment.paramSegment(unsaved.indnkeyatts)(TypoShort.setter)}::int2, ${Segment.paramSegment(unsaved.indisunique)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indisprimary)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indisexclusion)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indimmediate)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indisclustered)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indisvalid)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indcheckxmin)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indisready)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indislive)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indisreplident)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.indkey)(TypoInt2Vector.setter)}::int2vector, ${Segment.paramSegment(unsaved.indcollation)(TypoOidVector.setter)}::oidvector, ${Segment.paramSegment(unsaved.indclass)(TypoOidVector.setter)}::oidvector, ${Segment.paramSegment(unsaved.indoption)(TypoInt2Vector.setter)}::int2vector, ${Segment.paramSegment(unsaved.indexprs)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree, ${Segment.paramSegment(unsaved.indpred)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree)
          returning "indexrelid", "indrelid", "indnatts", "indnkeyatts", "indisunique", "indisprimary", "indisexclusion", "indimmediate", "indisclustered", "indisvalid", "indcheckxmin", "indisready", "indislive", "indisreplident", "indkey", "indcollation", "indclass", "indoption", "indexprs", "indpred"
       """.insertReturning(PgIndexRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgIndexFields, PgIndexRow] = {
    SelectBuilderSql("pg_catalog.pg_index", PgIndexFields, PgIndexRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgIndexRow] = {
    sql"""select "indexrelid", "indrelid", "indnatts", "indnkeyatts", "indisunique", "indisprimary", "indisexclusion", "indimmediate", "indisclustered", "indisvalid", "indcheckxmin", "indisready", "indislive", "indisreplident", "indkey", "indcollation", "indclass", "indoption", "indexprs", "indpred" from pg_catalog.pg_index""".query(PgIndexRow.jdbcDecoder).selectStream
  }
  override def selectById(indexrelid: PgIndexId): ZIO[ZConnection, Throwable, Option[PgIndexRow]] = {
    sql"""select "indexrelid", "indrelid", "indnatts", "indnkeyatts", "indisunique", "indisprimary", "indisexclusion", "indimmediate", "indisclustered", "indisvalid", "indcheckxmin", "indisready", "indislive", "indisreplident", "indkey", "indcollation", "indclass", "indoption", "indexprs", "indpred" from pg_catalog.pg_index where "indexrelid" = ${Segment.paramSegment(indexrelid)(PgIndexId.setter)}""".query(PgIndexRow.jdbcDecoder).selectOne
  }
  override def selectByIds(indexrelids: Array[PgIndexId]): ZStream[ZConnection, Throwable, PgIndexRow] = {
    sql"""select "indexrelid", "indrelid", "indnatts", "indnkeyatts", "indisunique", "indisprimary", "indisexclusion", "indimmediate", "indisclustered", "indisvalid", "indcheckxmin", "indisready", "indislive", "indisreplident", "indkey", "indcollation", "indclass", "indoption", "indexprs", "indpred" from pg_catalog.pg_index where "indexrelid" = ANY(${Segment.paramSegment(indexrelids)(PgIndexId.arraySetter)})""".query(PgIndexRow.jdbcDecoder).selectStream
  }
  override def update(row: PgIndexRow): ZIO[ZConnection, Throwable, Boolean] = {
    val indexrelid = row.indexrelid
    sql"""update pg_catalog.pg_index
          set "indrelid" = ${Segment.paramSegment(row.indrelid)(Setter.longSetter)}::oid,
              "indnatts" = ${Segment.paramSegment(row.indnatts)(TypoShort.setter)}::int2,
              "indnkeyatts" = ${Segment.paramSegment(row.indnkeyatts)(TypoShort.setter)}::int2,
              "indisunique" = ${Segment.paramSegment(row.indisunique)(Setter.booleanSetter)},
              "indisprimary" = ${Segment.paramSegment(row.indisprimary)(Setter.booleanSetter)},
              "indisexclusion" = ${Segment.paramSegment(row.indisexclusion)(Setter.booleanSetter)},
              "indimmediate" = ${Segment.paramSegment(row.indimmediate)(Setter.booleanSetter)},
              "indisclustered" = ${Segment.paramSegment(row.indisclustered)(Setter.booleanSetter)},
              "indisvalid" = ${Segment.paramSegment(row.indisvalid)(Setter.booleanSetter)},
              "indcheckxmin" = ${Segment.paramSegment(row.indcheckxmin)(Setter.booleanSetter)},
              "indisready" = ${Segment.paramSegment(row.indisready)(Setter.booleanSetter)},
              "indislive" = ${Segment.paramSegment(row.indislive)(Setter.booleanSetter)},
              "indisreplident" = ${Segment.paramSegment(row.indisreplident)(Setter.booleanSetter)},
              "indkey" = ${Segment.paramSegment(row.indkey)(TypoInt2Vector.setter)}::int2vector,
              "indcollation" = ${Segment.paramSegment(row.indcollation)(TypoOidVector.setter)}::oidvector,
              "indclass" = ${Segment.paramSegment(row.indclass)(TypoOidVector.setter)}::oidvector,
              "indoption" = ${Segment.paramSegment(row.indoption)(TypoInt2Vector.setter)}::int2vector,
              "indexprs" = ${Segment.paramSegment(row.indexprs)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree,
              "indpred" = ${Segment.paramSegment(row.indpred)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree
          where "indexrelid" = ${Segment.paramSegment(indexrelid)(PgIndexId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgIndexFields, PgIndexRow] = {
    UpdateBuilder("pg_catalog.pg_index", PgIndexFields, PgIndexRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgIndexRow): ZIO[ZConnection, Throwable, UpdateResult[PgIndexRow]] = {
    sql"""insert into pg_catalog.pg_index("indexrelid", "indrelid", "indnatts", "indnkeyatts", "indisunique", "indisprimary", "indisexclusion", "indimmediate", "indisclustered", "indisvalid", "indcheckxmin", "indisready", "indislive", "indisreplident", "indkey", "indcollation", "indclass", "indoption", "indexprs", "indpred")
          values (
            ${Segment.paramSegment(unsaved.indexrelid)(PgIndexId.setter)}::oid,
            ${Segment.paramSegment(unsaved.indrelid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.indnatts)(TypoShort.setter)}::int2,
            ${Segment.paramSegment(unsaved.indnkeyatts)(TypoShort.setter)}::int2,
            ${Segment.paramSegment(unsaved.indisunique)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indisprimary)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indisexclusion)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indimmediate)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indisclustered)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indisvalid)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indcheckxmin)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indisready)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indislive)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indisreplident)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.indkey)(TypoInt2Vector.setter)}::int2vector,
            ${Segment.paramSegment(unsaved.indcollation)(TypoOidVector.setter)}::oidvector,
            ${Segment.paramSegment(unsaved.indclass)(TypoOidVector.setter)}::oidvector,
            ${Segment.paramSegment(unsaved.indoption)(TypoInt2Vector.setter)}::int2vector,
            ${Segment.paramSegment(unsaved.indexprs)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree,
            ${Segment.paramSegment(unsaved.indpred)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree
          )
          on conflict ("indexrelid")
          do update set
            "indrelid" = EXCLUDED."indrelid",
            "indnatts" = EXCLUDED."indnatts",
            "indnkeyatts" = EXCLUDED."indnkeyatts",
            "indisunique" = EXCLUDED."indisunique",
            "indisprimary" = EXCLUDED."indisprimary",
            "indisexclusion" = EXCLUDED."indisexclusion",
            "indimmediate" = EXCLUDED."indimmediate",
            "indisclustered" = EXCLUDED."indisclustered",
            "indisvalid" = EXCLUDED."indisvalid",
            "indcheckxmin" = EXCLUDED."indcheckxmin",
            "indisready" = EXCLUDED."indisready",
            "indislive" = EXCLUDED."indislive",
            "indisreplident" = EXCLUDED."indisreplident",
            "indkey" = EXCLUDED."indkey",
            "indcollation" = EXCLUDED."indcollation",
            "indclass" = EXCLUDED."indclass",
            "indoption" = EXCLUDED."indoption",
            "indexprs" = EXCLUDED."indexprs",
            "indpred" = EXCLUDED."indpred"
          returning "indexrelid", "indrelid", "indnatts", "indnkeyatts", "indisunique", "indisprimary", "indisexclusion", "indimmediate", "indisclustered", "indisvalid", "indcheckxmin", "indisready", "indislive", "indisreplident", "indkey", "indcollation", "indclass", "indoption", "indexprs", "indpred"""".insertReturning(PgIndexRow.jdbcDecoder)
  }
}
