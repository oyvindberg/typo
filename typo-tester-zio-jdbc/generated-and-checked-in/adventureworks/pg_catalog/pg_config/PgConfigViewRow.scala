/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_config

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgConfigViewRow(
  name: /* nullability unknown */ Option[String],
  setting: /* nullability unknown */ Option[String]
)

object PgConfigViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgConfigViewRow] = new JdbcDecoder[PgConfigViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgConfigViewRow) =
      columIndex + 1 ->
        PgConfigViewRow(
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          setting = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgConfigViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val setting = jsonObj.get("setting").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (name.isRight && setting.isRight)
      Right(PgConfigViewRow(name = name.toOption.get, setting = setting.toOption.get))
    else Left(List[Either[String, Any]](name, setting).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgConfigViewRow] = new JsonEncoder[PgConfigViewRow] {
    override def unsafeEncode(a: PgConfigViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""setting":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.setting, indent, out)
      out.write("}")
    }
  }
}
