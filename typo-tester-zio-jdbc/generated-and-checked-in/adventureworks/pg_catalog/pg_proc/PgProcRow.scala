/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_proc

import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoOidVector
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoRegproc
import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgProcRow(
  oid: PgProcId,
  proname: String,
  pronamespace: /* oid */ Long,
  proowner: /* oid */ Long,
  prolang: /* oid */ Long,
  procost: Float,
  prorows: Float,
  provariadic: /* oid */ Long,
  prosupport: TypoRegproc,
  prokind: String,
  prosecdef: Boolean,
  proleakproof: Boolean,
  proisstrict: Boolean,
  proretset: Boolean,
  provolatile: String,
  proparallel: String,
  pronargs: TypoShort,
  pronargdefaults: TypoShort,
  prorettype: /* oid */ Long,
  proargtypes: TypoOidVector,
  proallargtypes: Option[Array[/* oid */ Long]],
  proargmodes: Option[Array[String]],
  proargnames: Option[Array[String]],
  proargdefaults: Option[TypoPgNodeTree],
  protrftypes: Option[Array[/* oid */ Long]],
  prosrc: String,
  probin: Option[String],
  prosqlbody: Option[TypoPgNodeTree],
  proconfig: Option[Array[String]],
  proacl: Option[Array[TypoAclItem]]
)

object PgProcRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgProcRow] = new JdbcDecoder[PgProcRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgProcRow) =
      columIndex + 29 ->
        PgProcRow(
          oid = PgProcId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          proname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          pronamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          proowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          prolang = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          procost = JdbcDecoder.floatDecoder.unsafeDecode(columIndex + 5, rs)._2,
          prorows = JdbcDecoder.floatDecoder.unsafeDecode(columIndex + 6, rs)._2,
          provariadic = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 7, rs)._2,
          prosupport = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 8, rs)._2,
          prokind = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 9, rs)._2,
          prosecdef = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 10, rs)._2,
          proleakproof = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 11, rs)._2,
          proisstrict = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 12, rs)._2,
          proretset = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 13, rs)._2,
          provolatile = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 14, rs)._2,
          proparallel = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 15, rs)._2,
          pronargs = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 16, rs)._2,
          pronargdefaults = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 17, rs)._2,
          prorettype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 18, rs)._2,
          proargtypes = TypoOidVector.jdbcDecoder.unsafeDecode(columIndex + 19, rs)._2,
          proallargtypes = JdbcDecoder.optionDecoder(adventureworks.LongArrayDecoder).unsafeDecode(columIndex + 20, rs)._2,
          proargmodes = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 21, rs)._2,
          proargnames = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 22, rs)._2,
          proargdefaults = JdbcDecoder.optionDecoder(TypoPgNodeTree.jdbcDecoder).unsafeDecode(columIndex + 23, rs)._2,
          protrftypes = JdbcDecoder.optionDecoder(adventureworks.LongArrayDecoder).unsafeDecode(columIndex + 24, rs)._2,
          prosrc = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 25, rs)._2,
          probin = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 26, rs)._2,
          prosqlbody = JdbcDecoder.optionDecoder(TypoPgNodeTree.jdbcDecoder).unsafeDecode(columIndex + 27, rs)._2,
          proconfig = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 28, rs)._2,
          proacl = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoAclItem]]).unsafeDecode(columIndex + 29, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgProcRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgProcId.jsonDecoder))
    val proname = jsonObj.get("proname").toRight("Missing field 'proname'").flatMap(_.as(JsonDecoder.string))
    val pronamespace = jsonObj.get("pronamespace").toRight("Missing field 'pronamespace'").flatMap(_.as(JsonDecoder.long))
    val proowner = jsonObj.get("proowner").toRight("Missing field 'proowner'").flatMap(_.as(JsonDecoder.long))
    val prolang = jsonObj.get("prolang").toRight("Missing field 'prolang'").flatMap(_.as(JsonDecoder.long))
    val procost = jsonObj.get("procost").toRight("Missing field 'procost'").flatMap(_.as(JsonDecoder.float))
    val prorows = jsonObj.get("prorows").toRight("Missing field 'prorows'").flatMap(_.as(JsonDecoder.float))
    val provariadic = jsonObj.get("provariadic").toRight("Missing field 'provariadic'").flatMap(_.as(JsonDecoder.long))
    val prosupport = jsonObj.get("prosupport").toRight("Missing field 'prosupport'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val prokind = jsonObj.get("prokind").toRight("Missing field 'prokind'").flatMap(_.as(JsonDecoder.string))
    val prosecdef = jsonObj.get("prosecdef").toRight("Missing field 'prosecdef'").flatMap(_.as(JsonDecoder.boolean))
    val proleakproof = jsonObj.get("proleakproof").toRight("Missing field 'proleakproof'").flatMap(_.as(JsonDecoder.boolean))
    val proisstrict = jsonObj.get("proisstrict").toRight("Missing field 'proisstrict'").flatMap(_.as(JsonDecoder.boolean))
    val proretset = jsonObj.get("proretset").toRight("Missing field 'proretset'").flatMap(_.as(JsonDecoder.boolean))
    val provolatile = jsonObj.get("provolatile").toRight("Missing field 'provolatile'").flatMap(_.as(JsonDecoder.string))
    val proparallel = jsonObj.get("proparallel").toRight("Missing field 'proparallel'").flatMap(_.as(JsonDecoder.string))
    val pronargs = jsonObj.get("pronargs").toRight("Missing field 'pronargs'").flatMap(_.as(TypoShort.jsonDecoder))
    val pronargdefaults = jsonObj.get("pronargdefaults").toRight("Missing field 'pronargdefaults'").flatMap(_.as(TypoShort.jsonDecoder))
    val prorettype = jsonObj.get("prorettype").toRight("Missing field 'prorettype'").flatMap(_.as(JsonDecoder.long))
    val proargtypes = jsonObj.get("proargtypes").toRight("Missing field 'proargtypes'").flatMap(_.as(TypoOidVector.jsonDecoder))
    val proallargtypes = jsonObj.get("proallargtypes").fold[Either[String, Option[Array[Long]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Long](JsonDecoder.long, implicitly))))
    val proargmodes = jsonObj.get("proargmodes").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val proargnames = jsonObj.get("proargnames").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val proargdefaults = jsonObj.get("proargdefaults").fold[Either[String, Option[TypoPgNodeTree]]](Right(None))(_.as(JsonDecoder.option(TypoPgNodeTree.jsonDecoder)))
    val protrftypes = jsonObj.get("protrftypes").fold[Either[String, Option[Array[Long]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Long](JsonDecoder.long, implicitly))))
    val prosrc = jsonObj.get("prosrc").toRight("Missing field 'prosrc'").flatMap(_.as(JsonDecoder.string))
    val probin = jsonObj.get("probin").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val prosqlbody = jsonObj.get("prosqlbody").fold[Either[String, Option[TypoPgNodeTree]]](Right(None))(_.as(JsonDecoder.option(TypoPgNodeTree.jsonDecoder)))
    val proconfig = jsonObj.get("proconfig").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val proacl = jsonObj.get("proacl").fold[Either[String, Option[Array[TypoAclItem]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly))))
    if (oid.isRight && proname.isRight && pronamespace.isRight && proowner.isRight && prolang.isRight && procost.isRight && prorows.isRight && provariadic.isRight && prosupport.isRight && prokind.isRight && prosecdef.isRight && proleakproof.isRight && proisstrict.isRight && proretset.isRight && provolatile.isRight && proparallel.isRight && pronargs.isRight && pronargdefaults.isRight && prorettype.isRight && proargtypes.isRight && proallargtypes.isRight && proargmodes.isRight && proargnames.isRight && proargdefaults.isRight && protrftypes.isRight && prosrc.isRight && probin.isRight && prosqlbody.isRight && proconfig.isRight && proacl.isRight)
      Right(PgProcRow(oid = oid.toOption.get, proname = proname.toOption.get, pronamespace = pronamespace.toOption.get, proowner = proowner.toOption.get, prolang = prolang.toOption.get, procost = procost.toOption.get, prorows = prorows.toOption.get, provariadic = provariadic.toOption.get, prosupport = prosupport.toOption.get, prokind = prokind.toOption.get, prosecdef = prosecdef.toOption.get, proleakproof = proleakproof.toOption.get, proisstrict = proisstrict.toOption.get, proretset = proretset.toOption.get, provolatile = provolatile.toOption.get, proparallel = proparallel.toOption.get, pronargs = pronargs.toOption.get, pronargdefaults = pronargdefaults.toOption.get, prorettype = prorettype.toOption.get, proargtypes = proargtypes.toOption.get, proallargtypes = proallargtypes.toOption.get, proargmodes = proargmodes.toOption.get, proargnames = proargnames.toOption.get, proargdefaults = proargdefaults.toOption.get, protrftypes = protrftypes.toOption.get, prosrc = prosrc.toOption.get, probin = probin.toOption.get, prosqlbody = prosqlbody.toOption.get, proconfig = proconfig.toOption.get, proacl = proacl.toOption.get))
    else Left(List[Either[String, Any]](oid, proname, pronamespace, proowner, prolang, procost, prorows, provariadic, prosupport, prokind, prosecdef, proleakproof, proisstrict, proretset, provolatile, proparallel, pronargs, pronargdefaults, prorettype, proargtypes, proallargtypes, proargmodes, proargnames, proargdefaults, protrftypes, prosrc, probin, prosqlbody, proconfig, proacl).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgProcRow] = new JsonEncoder[PgProcRow] {
    override def unsafeEncode(a: PgProcRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgProcId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""proname":""")
      JsonEncoder.string.unsafeEncode(a.proname, indent, out)
      out.write(",")
      out.write(""""pronamespace":""")
      JsonEncoder.long.unsafeEncode(a.pronamespace, indent, out)
      out.write(",")
      out.write(""""proowner":""")
      JsonEncoder.long.unsafeEncode(a.proowner, indent, out)
      out.write(",")
      out.write(""""prolang":""")
      JsonEncoder.long.unsafeEncode(a.prolang, indent, out)
      out.write(",")
      out.write(""""procost":""")
      JsonEncoder.float.unsafeEncode(a.procost, indent, out)
      out.write(",")
      out.write(""""prorows":""")
      JsonEncoder.float.unsafeEncode(a.prorows, indent, out)
      out.write(",")
      out.write(""""provariadic":""")
      JsonEncoder.long.unsafeEncode(a.provariadic, indent, out)
      out.write(",")
      out.write(""""prosupport":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.prosupport, indent, out)
      out.write(",")
      out.write(""""prokind":""")
      JsonEncoder.string.unsafeEncode(a.prokind, indent, out)
      out.write(",")
      out.write(""""prosecdef":""")
      JsonEncoder.boolean.unsafeEncode(a.prosecdef, indent, out)
      out.write(",")
      out.write(""""proleakproof":""")
      JsonEncoder.boolean.unsafeEncode(a.proleakproof, indent, out)
      out.write(",")
      out.write(""""proisstrict":""")
      JsonEncoder.boolean.unsafeEncode(a.proisstrict, indent, out)
      out.write(",")
      out.write(""""proretset":""")
      JsonEncoder.boolean.unsafeEncode(a.proretset, indent, out)
      out.write(",")
      out.write(""""provolatile":""")
      JsonEncoder.string.unsafeEncode(a.provolatile, indent, out)
      out.write(",")
      out.write(""""proparallel":""")
      JsonEncoder.string.unsafeEncode(a.proparallel, indent, out)
      out.write(",")
      out.write(""""pronargs":""")
      TypoShort.jsonEncoder.unsafeEncode(a.pronargs, indent, out)
      out.write(",")
      out.write(""""pronargdefaults":""")
      TypoShort.jsonEncoder.unsafeEncode(a.pronargdefaults, indent, out)
      out.write(",")
      out.write(""""prorettype":""")
      JsonEncoder.long.unsafeEncode(a.prorettype, indent, out)
      out.write(",")
      out.write(""""proargtypes":""")
      TypoOidVector.jsonEncoder.unsafeEncode(a.proargtypes, indent, out)
      out.write(",")
      out.write(""""proallargtypes":""")
      JsonEncoder.option(JsonEncoder.array[Long](JsonEncoder.long, implicitly)).unsafeEncode(a.proallargtypes, indent, out)
      out.write(",")
      out.write(""""proargmodes":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.proargmodes, indent, out)
      out.write(",")
      out.write(""""proargnames":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.proargnames, indent, out)
      out.write(",")
      out.write(""""proargdefaults":""")
      JsonEncoder.option(TypoPgNodeTree.jsonEncoder).unsafeEncode(a.proargdefaults, indent, out)
      out.write(",")
      out.write(""""protrftypes":""")
      JsonEncoder.option(JsonEncoder.array[Long](JsonEncoder.long, implicitly)).unsafeEncode(a.protrftypes, indent, out)
      out.write(",")
      out.write(""""prosrc":""")
      JsonEncoder.string.unsafeEncode(a.prosrc, indent, out)
      out.write(",")
      out.write(""""probin":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.probin, indent, out)
      out.write(",")
      out.write(""""prosqlbody":""")
      JsonEncoder.option(TypoPgNodeTree.jsonEncoder).unsafeEncode(a.prosqlbody, indent, out)
      out.write(",")
      out.write(""""proconfig":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.proconfig, indent, out)
      out.write(",")
      out.write(""""proacl":""")
      JsonEncoder.option(JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly)).unsafeEncode(a.proacl, indent, out)
      out.write("}")
    }
  }
}
