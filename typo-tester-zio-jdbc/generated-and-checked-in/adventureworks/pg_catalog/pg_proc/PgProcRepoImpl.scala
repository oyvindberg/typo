/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_proc

import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoOidVector
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoRegproc
import adventureworks.customtypes.TypoShort
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgProcRepoImpl extends PgProcRepo {
  override def delete(oid: PgProcId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_proc where "oid" = ${Segment.paramSegment(oid)(PgProcId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgProcFields, PgProcRow] = {
    DeleteBuilder("pg_catalog.pg_proc", PgProcFields)
  }
  override def insert(unsaved: PgProcRow): ZIO[ZConnection, Throwable, PgProcRow] = {
    sql"""insert into pg_catalog.pg_proc("oid", "proname", "pronamespace", "proowner", "prolang", "procost", "prorows", "provariadic", "prosupport", "prokind", "prosecdef", "proleakproof", "proisstrict", "proretset", "provolatile", "proparallel", "pronargs", "pronargdefaults", "prorettype", "proargtypes", "proallargtypes", "proargmodes", "proargnames", "proargdefaults", "protrftypes", "prosrc", "probin", "prosqlbody", "proconfig", "proacl")
          values (${Segment.paramSegment(unsaved.oid)(PgProcId.setter)}::oid, ${Segment.paramSegment(unsaved.proname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.pronamespace)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.proowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.prolang)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.procost)(Setter.floatSetter)}::float4, ${Segment.paramSegment(unsaved.prorows)(Setter.floatSetter)}::float4, ${Segment.paramSegment(unsaved.provariadic)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.prosupport)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.prokind)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.prosecdef)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.proleakproof)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.proisstrict)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.proretset)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.provolatile)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.proparallel)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.pronargs)(TypoShort.setter)}::int2, ${Segment.paramSegment(unsaved.pronargdefaults)(TypoShort.setter)}::int2, ${Segment.paramSegment(unsaved.prorettype)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.proargtypes)(TypoOidVector.setter)}::oidvector, ${Segment.paramSegment(unsaved.proallargtypes)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid, ${Segment.paramSegment(unsaved.proargmodes)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_char, ${Segment.paramSegment(unsaved.proargnames)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text, ${Segment.paramSegment(unsaved.proargdefaults)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree, ${Segment.paramSegment(unsaved.protrftypes)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid, ${Segment.paramSegment(unsaved.prosrc)(Setter.stringSetter)}, ${Segment.paramSegment(unsaved.probin)(Setter.optionParamSetter(Setter.stringSetter))}, ${Segment.paramSegment(unsaved.prosqlbody)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree, ${Segment.paramSegment(unsaved.proconfig)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text, ${Segment.paramSegment(unsaved.proacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem)
          returning "oid", "proname", "pronamespace", "proowner", "prolang", "procost", "prorows", "provariadic", "prosupport", "prokind", "prosecdef", "proleakproof", "proisstrict", "proretset", "provolatile", "proparallel", "pronargs", "pronargdefaults", "prorettype", "proargtypes", "proallargtypes", "proargmodes", "proargnames", "proargdefaults", "protrftypes", "prosrc", "probin", "prosqlbody", "proconfig", "proacl"
       """.insertReturning(PgProcRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgProcFields, PgProcRow] = {
    SelectBuilderSql("pg_catalog.pg_proc", PgProcFields, PgProcRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgProcRow] = {
    sql"""select "oid", "proname", "pronamespace", "proowner", "prolang", "procost", "prorows", "provariadic", "prosupport", "prokind", "prosecdef", "proleakproof", "proisstrict", "proretset", "provolatile", "proparallel", "pronargs", "pronargdefaults", "prorettype", "proargtypes", "proallargtypes", "proargmodes", "proargnames", "proargdefaults", "protrftypes", "prosrc", "probin", "prosqlbody", "proconfig", "proacl" from pg_catalog.pg_proc""".query(PgProcRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgProcId): ZIO[ZConnection, Throwable, Option[PgProcRow]] = {
    sql"""select "oid", "proname", "pronamespace", "proowner", "prolang", "procost", "prorows", "provariadic", "prosupport", "prokind", "prosecdef", "proleakproof", "proisstrict", "proretset", "provolatile", "proparallel", "pronargs", "pronargdefaults", "prorettype", "proargtypes", "proallargtypes", "proargmodes", "proargnames", "proargdefaults", "protrftypes", "prosrc", "probin", "prosqlbody", "proconfig", "proacl" from pg_catalog.pg_proc where "oid" = ${Segment.paramSegment(oid)(PgProcId.setter)}""".query(PgProcRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgProcId]): ZStream[ZConnection, Throwable, PgProcRow] = {
    sql"""select "oid", "proname", "pronamespace", "proowner", "prolang", "procost", "prorows", "provariadic", "prosupport", "prokind", "prosecdef", "proleakproof", "proisstrict", "proretset", "provolatile", "proparallel", "pronargs", "pronargdefaults", "prorettype", "proargtypes", "proallargtypes", "proargmodes", "proargnames", "proargdefaults", "protrftypes", "prosrc", "probin", "prosqlbody", "proconfig", "proacl" from pg_catalog.pg_proc where "oid" = ANY(${Segment.paramSegment(oids)(PgProcId.arraySetter)})""".query(PgProcRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(proname: String, proargtypes: TypoOidVector, pronamespace: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgProcRow]] = {
    sql"""select "proname", "proargtypes", "pronamespace"
          from pg_catalog.pg_proc
          where "proname" = ${Segment.paramSegment(proname)(Setter.stringSetter)} AND "proargtypes" = ${Segment.paramSegment(proargtypes)(TypoOidVector.setter)} AND "pronamespace" = ${Segment.paramSegment(pronamespace)(Setter.longSetter)}
       """.query(PgProcRow.jdbcDecoder).selectOne
  }
  override def update(row: PgProcRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_proc
          set "proname" = ${Segment.paramSegment(row.proname)(Setter.stringSetter)}::name,
              "pronamespace" = ${Segment.paramSegment(row.pronamespace)(Setter.longSetter)}::oid,
              "proowner" = ${Segment.paramSegment(row.proowner)(Setter.longSetter)}::oid,
              "prolang" = ${Segment.paramSegment(row.prolang)(Setter.longSetter)}::oid,
              "procost" = ${Segment.paramSegment(row.procost)(Setter.floatSetter)}::float4,
              "prorows" = ${Segment.paramSegment(row.prorows)(Setter.floatSetter)}::float4,
              "provariadic" = ${Segment.paramSegment(row.provariadic)(Setter.longSetter)}::oid,
              "prosupport" = ${Segment.paramSegment(row.prosupport)(TypoRegproc.setter)}::regproc,
              "prokind" = ${Segment.paramSegment(row.prokind)(Setter.stringSetter)}::char,
              "prosecdef" = ${Segment.paramSegment(row.prosecdef)(Setter.booleanSetter)},
              "proleakproof" = ${Segment.paramSegment(row.proleakproof)(Setter.booleanSetter)},
              "proisstrict" = ${Segment.paramSegment(row.proisstrict)(Setter.booleanSetter)},
              "proretset" = ${Segment.paramSegment(row.proretset)(Setter.booleanSetter)},
              "provolatile" = ${Segment.paramSegment(row.provolatile)(Setter.stringSetter)}::char,
              "proparallel" = ${Segment.paramSegment(row.proparallel)(Setter.stringSetter)}::char,
              "pronargs" = ${Segment.paramSegment(row.pronargs)(TypoShort.setter)}::int2,
              "pronargdefaults" = ${Segment.paramSegment(row.pronargdefaults)(TypoShort.setter)}::int2,
              "prorettype" = ${Segment.paramSegment(row.prorettype)(Setter.longSetter)}::oid,
              "proargtypes" = ${Segment.paramSegment(row.proargtypes)(TypoOidVector.setter)}::oidvector,
              "proallargtypes" = ${Segment.paramSegment(row.proallargtypes)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
              "proargmodes" = ${Segment.paramSegment(row.proargmodes)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_char,
              "proargnames" = ${Segment.paramSegment(row.proargnames)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text,
              "proargdefaults" = ${Segment.paramSegment(row.proargdefaults)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree,
              "protrftypes" = ${Segment.paramSegment(row.protrftypes)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
              "prosrc" = ${Segment.paramSegment(row.prosrc)(Setter.stringSetter)},
              "probin" = ${Segment.paramSegment(row.probin)(Setter.optionParamSetter(Setter.stringSetter))},
              "prosqlbody" = ${Segment.paramSegment(row.prosqlbody)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree,
              "proconfig" = ${Segment.paramSegment(row.proconfig)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text,
              "proacl" = ${Segment.paramSegment(row.proacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem
          where "oid" = ${Segment.paramSegment(oid)(PgProcId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgProcFields, PgProcRow] = {
    UpdateBuilder("pg_catalog.pg_proc", PgProcFields, PgProcRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgProcRow): ZIO[ZConnection, Throwable, UpdateResult[PgProcRow]] = {
    sql"""insert into pg_catalog.pg_proc("oid", "proname", "pronamespace", "proowner", "prolang", "procost", "prorows", "provariadic", "prosupport", "prokind", "prosecdef", "proleakproof", "proisstrict", "proretset", "provolatile", "proparallel", "pronargs", "pronargdefaults", "prorettype", "proargtypes", "proallargtypes", "proargmodes", "proargnames", "proargdefaults", "protrftypes", "prosrc", "probin", "prosqlbody", "proconfig", "proacl")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgProcId.setter)}::oid,
            ${Segment.paramSegment(unsaved.proname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.pronamespace)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.proowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.prolang)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.procost)(Setter.floatSetter)}::float4,
            ${Segment.paramSegment(unsaved.prorows)(Setter.floatSetter)}::float4,
            ${Segment.paramSegment(unsaved.provariadic)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.prosupport)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.prokind)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.prosecdef)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.proleakproof)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.proisstrict)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.proretset)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.provolatile)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.proparallel)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.pronargs)(TypoShort.setter)}::int2,
            ${Segment.paramSegment(unsaved.pronargdefaults)(TypoShort.setter)}::int2,
            ${Segment.paramSegment(unsaved.prorettype)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.proargtypes)(TypoOidVector.setter)}::oidvector,
            ${Segment.paramSegment(unsaved.proallargtypes)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
            ${Segment.paramSegment(unsaved.proargmodes)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_char,
            ${Segment.paramSegment(unsaved.proargnames)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text,
            ${Segment.paramSegment(unsaved.proargdefaults)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree,
            ${Segment.paramSegment(unsaved.protrftypes)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
            ${Segment.paramSegment(unsaved.prosrc)(Setter.stringSetter)},
            ${Segment.paramSegment(unsaved.probin)(Setter.optionParamSetter(Setter.stringSetter))},
            ${Segment.paramSegment(unsaved.prosqlbody)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree,
            ${Segment.paramSegment(unsaved.proconfig)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::_text,
            ${Segment.paramSegment(unsaved.proacl)(Setter.optionParamSetter(TypoAclItem.arraySetter))}::_aclitem
          )
          on conflict ("oid")
          do update set
            "proname" = EXCLUDED."proname",
            "pronamespace" = EXCLUDED."pronamespace",
            "proowner" = EXCLUDED."proowner",
            "prolang" = EXCLUDED."prolang",
            "procost" = EXCLUDED."procost",
            "prorows" = EXCLUDED."prorows",
            "provariadic" = EXCLUDED."provariadic",
            "prosupport" = EXCLUDED."prosupport",
            "prokind" = EXCLUDED."prokind",
            "prosecdef" = EXCLUDED."prosecdef",
            "proleakproof" = EXCLUDED."proleakproof",
            "proisstrict" = EXCLUDED."proisstrict",
            "proretset" = EXCLUDED."proretset",
            "provolatile" = EXCLUDED."provolatile",
            "proparallel" = EXCLUDED."proparallel",
            "pronargs" = EXCLUDED."pronargs",
            "pronargdefaults" = EXCLUDED."pronargdefaults",
            "prorettype" = EXCLUDED."prorettype",
            "proargtypes" = EXCLUDED."proargtypes",
            "proallargtypes" = EXCLUDED."proallargtypes",
            "proargmodes" = EXCLUDED."proargmodes",
            "proargnames" = EXCLUDED."proargnames",
            "proargdefaults" = EXCLUDED."proargdefaults",
            "protrftypes" = EXCLUDED."protrftypes",
            "prosrc" = EXCLUDED."prosrc",
            "probin" = EXCLUDED."probin",
            "prosqlbody" = EXCLUDED."prosqlbody",
            "proconfig" = EXCLUDED."proconfig",
            "proacl" = EXCLUDED."proacl"
          returning "oid", "proname", "pronamespace", "proowner", "prolang", "procost", "prorows", "provariadic", "prosupport", "prokind", "prosecdef", "proleakproof", "proisstrict", "proretset", "provolatile", "proparallel", "pronargs", "pronargdefaults", "prorettype", "proargtypes", "proallargtypes", "proargmodes", "proargnames", "proargdefaults", "protrftypes", "prosrc", "probin", "prosqlbody", "proconfig", "proacl"""".insertReturning(PgProcRow.jdbcDecoder)
  }
}
