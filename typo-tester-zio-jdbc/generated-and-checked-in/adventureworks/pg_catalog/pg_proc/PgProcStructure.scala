/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_proc

import adventureworks.customtypes.TypoAclItem
import adventureworks.customtypes.TypoOidVector
import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoRegproc
import adventureworks.customtypes.TypoShort
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgProcStructure[Row](val prefix: Option[String], val extract: Row => PgProcRow, val merge: (Row, PgProcRow) => Row)
  extends Relation[PgProcFields, PgProcRow, Row]
    with PgProcFields[Row] { outer =>

  override val oid = new IdField[PgProcId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val proname = new Field[String, Row](prefix, "proname", None, Some("name"))(x => extract(x).proname, (row, value) => merge(row, extract(row).copy(proname = value)))
  override val pronamespace = new Field[/* oid */ Long, Row](prefix, "pronamespace", None, Some("oid"))(x => extract(x).pronamespace, (row, value) => merge(row, extract(row).copy(pronamespace = value)))
  override val proowner = new Field[/* oid */ Long, Row](prefix, "proowner", None, Some("oid"))(x => extract(x).proowner, (row, value) => merge(row, extract(row).copy(proowner = value)))
  override val prolang = new Field[/* oid */ Long, Row](prefix, "prolang", None, Some("oid"))(x => extract(x).prolang, (row, value) => merge(row, extract(row).copy(prolang = value)))
  override val procost = new Field[Float, Row](prefix, "procost", None, Some("float4"))(x => extract(x).procost, (row, value) => merge(row, extract(row).copy(procost = value)))
  override val prorows = new Field[Float, Row](prefix, "prorows", None, Some("float4"))(x => extract(x).prorows, (row, value) => merge(row, extract(row).copy(prorows = value)))
  override val provariadic = new Field[/* oid */ Long, Row](prefix, "provariadic", None, Some("oid"))(x => extract(x).provariadic, (row, value) => merge(row, extract(row).copy(provariadic = value)))
  override val prosupport = new Field[TypoRegproc, Row](prefix, "prosupport", None, Some("regproc"))(x => extract(x).prosupport, (row, value) => merge(row, extract(row).copy(prosupport = value)))
  override val prokind = new Field[String, Row](prefix, "prokind", None, Some("char"))(x => extract(x).prokind, (row, value) => merge(row, extract(row).copy(prokind = value)))
  override val prosecdef = new Field[Boolean, Row](prefix, "prosecdef", None, None)(x => extract(x).prosecdef, (row, value) => merge(row, extract(row).copy(prosecdef = value)))
  override val proleakproof = new Field[Boolean, Row](prefix, "proleakproof", None, None)(x => extract(x).proleakproof, (row, value) => merge(row, extract(row).copy(proleakproof = value)))
  override val proisstrict = new Field[Boolean, Row](prefix, "proisstrict", None, None)(x => extract(x).proisstrict, (row, value) => merge(row, extract(row).copy(proisstrict = value)))
  override val proretset = new Field[Boolean, Row](prefix, "proretset", None, None)(x => extract(x).proretset, (row, value) => merge(row, extract(row).copy(proretset = value)))
  override val provolatile = new Field[String, Row](prefix, "provolatile", None, Some("char"))(x => extract(x).provolatile, (row, value) => merge(row, extract(row).copy(provolatile = value)))
  override val proparallel = new Field[String, Row](prefix, "proparallel", None, Some("char"))(x => extract(x).proparallel, (row, value) => merge(row, extract(row).copy(proparallel = value)))
  override val pronargs = new Field[TypoShort, Row](prefix, "pronargs", None, Some("int2"))(x => extract(x).pronargs, (row, value) => merge(row, extract(row).copy(pronargs = value)))
  override val pronargdefaults = new Field[TypoShort, Row](prefix, "pronargdefaults", None, Some("int2"))(x => extract(x).pronargdefaults, (row, value) => merge(row, extract(row).copy(pronargdefaults = value)))
  override val prorettype = new Field[/* oid */ Long, Row](prefix, "prorettype", None, Some("oid"))(x => extract(x).prorettype, (row, value) => merge(row, extract(row).copy(prorettype = value)))
  override val proargtypes = new Field[TypoOidVector, Row](prefix, "proargtypes", None, Some("oidvector"))(x => extract(x).proargtypes, (row, value) => merge(row, extract(row).copy(proargtypes = value)))
  override val proallargtypes = new OptField[Array[/* oid */ Long], Row](prefix, "proallargtypes", None, Some("_oid"))(x => extract(x).proallargtypes, (row, value) => merge(row, extract(row).copy(proallargtypes = value)))
  override val proargmodes = new OptField[Array[String], Row](prefix, "proargmodes", None, Some("_char"))(x => extract(x).proargmodes, (row, value) => merge(row, extract(row).copy(proargmodes = value)))
  override val proargnames = new OptField[Array[String], Row](prefix, "proargnames", None, Some("_text"))(x => extract(x).proargnames, (row, value) => merge(row, extract(row).copy(proargnames = value)))
  override val proargdefaults = new OptField[TypoPgNodeTree, Row](prefix, "proargdefaults", None, Some("pg_node_tree"))(x => extract(x).proargdefaults, (row, value) => merge(row, extract(row).copy(proargdefaults = value)))
  override val protrftypes = new OptField[Array[/* oid */ Long], Row](prefix, "protrftypes", None, Some("_oid"))(x => extract(x).protrftypes, (row, value) => merge(row, extract(row).copy(protrftypes = value)))
  override val prosrc = new Field[String, Row](prefix, "prosrc", None, None)(x => extract(x).prosrc, (row, value) => merge(row, extract(row).copy(prosrc = value)))
  override val probin = new OptField[String, Row](prefix, "probin", None, None)(x => extract(x).probin, (row, value) => merge(row, extract(row).copy(probin = value)))
  override val prosqlbody = new OptField[TypoPgNodeTree, Row](prefix, "prosqlbody", None, Some("pg_node_tree"))(x => extract(x).prosqlbody, (row, value) => merge(row, extract(row).copy(prosqlbody = value)))
  override val proconfig = new OptField[Array[String], Row](prefix, "proconfig", None, Some("_text"))(x => extract(x).proconfig, (row, value) => merge(row, extract(row).copy(proconfig = value)))
  override val proacl = new OptField[Array[TypoAclItem], Row](prefix, "proacl", None, Some("_aclitem"))(x => extract(x).proacl, (row, value) => merge(row, extract(row).copy(proacl = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, proname, pronamespace, proowner, prolang, procost, prorows, provariadic, prosupport, prokind, prosecdef, proleakproof, proisstrict, proretset, provolatile, proparallel, pronargs, pronargdefaults, prorettype, proargtypes, proallargtypes, proargmodes, proargnames, proargdefaults, protrftypes, prosrc, probin, prosqlbody, proconfig, proacl)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgProcRow, merge: (NewRow, PgProcRow) => NewRow): PgProcStructure[NewRow] =
    new PgProcStructure(prefix, extract, merge)
}
