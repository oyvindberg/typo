/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_sequence

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgSequenceRow(
  seqrelid: PgSequenceId,
  seqtypid: /* oid */ Long,
  seqstart: Long,
  seqincrement: Long,
  seqmax: Long,
  seqmin: Long,
  seqcache: Long,
  seqcycle: Boolean
)

object PgSequenceRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgSequenceRow] = new JdbcDecoder[PgSequenceRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgSequenceRow) =
      columIndex + 7 ->
        PgSequenceRow(
          seqrelid = PgSequenceId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          seqtypid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          seqstart = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          seqincrement = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          seqmax = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 4, rs)._2,
          seqmin = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 5, rs)._2,
          seqcache = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 6, rs)._2,
          seqcycle = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgSequenceRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val seqrelid = jsonObj.get("seqrelid").toRight("Missing field 'seqrelid'").flatMap(_.as(PgSequenceId.jsonDecoder))
    val seqtypid = jsonObj.get("seqtypid").toRight("Missing field 'seqtypid'").flatMap(_.as(JsonDecoder.long))
    val seqstart = jsonObj.get("seqstart").toRight("Missing field 'seqstart'").flatMap(_.as(JsonDecoder.long))
    val seqincrement = jsonObj.get("seqincrement").toRight("Missing field 'seqincrement'").flatMap(_.as(JsonDecoder.long))
    val seqmax = jsonObj.get("seqmax").toRight("Missing field 'seqmax'").flatMap(_.as(JsonDecoder.long))
    val seqmin = jsonObj.get("seqmin").toRight("Missing field 'seqmin'").flatMap(_.as(JsonDecoder.long))
    val seqcache = jsonObj.get("seqcache").toRight("Missing field 'seqcache'").flatMap(_.as(JsonDecoder.long))
    val seqcycle = jsonObj.get("seqcycle").toRight("Missing field 'seqcycle'").flatMap(_.as(JsonDecoder.boolean))
    if (seqrelid.isRight && seqtypid.isRight && seqstart.isRight && seqincrement.isRight && seqmax.isRight && seqmin.isRight && seqcache.isRight && seqcycle.isRight)
      Right(PgSequenceRow(seqrelid = seqrelid.toOption.get, seqtypid = seqtypid.toOption.get, seqstart = seqstart.toOption.get, seqincrement = seqincrement.toOption.get, seqmax = seqmax.toOption.get, seqmin = seqmin.toOption.get, seqcache = seqcache.toOption.get, seqcycle = seqcycle.toOption.get))
    else Left(List[Either[String, Any]](seqrelid, seqtypid, seqstart, seqincrement, seqmax, seqmin, seqcache, seqcycle).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgSequenceRow] = new JsonEncoder[PgSequenceRow] {
    override def unsafeEncode(a: PgSequenceRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""seqrelid":""")
      PgSequenceId.jsonEncoder.unsafeEncode(a.seqrelid, indent, out)
      out.write(",")
      out.write(""""seqtypid":""")
      JsonEncoder.long.unsafeEncode(a.seqtypid, indent, out)
      out.write(",")
      out.write(""""seqstart":""")
      JsonEncoder.long.unsafeEncode(a.seqstart, indent, out)
      out.write(",")
      out.write(""""seqincrement":""")
      JsonEncoder.long.unsafeEncode(a.seqincrement, indent, out)
      out.write(",")
      out.write(""""seqmax":""")
      JsonEncoder.long.unsafeEncode(a.seqmax, indent, out)
      out.write(",")
      out.write(""""seqmin":""")
      JsonEncoder.long.unsafeEncode(a.seqmin, indent, out)
      out.write(",")
      out.write(""""seqcache":""")
      JsonEncoder.long.unsafeEncode(a.seqcache, indent, out)
      out.write(",")
      out.write(""""seqcycle":""")
      JsonEncoder.boolean.unsafeEncode(a.seqcycle, indent, out)
      out.write("}")
    }
  }
}
