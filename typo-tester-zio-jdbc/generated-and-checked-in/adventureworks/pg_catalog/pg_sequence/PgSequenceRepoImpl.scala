/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_sequence

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgSequenceRepoImpl extends PgSequenceRepo {
  override def delete(seqrelid: PgSequenceId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_sequence where "seqrelid" = ${Segment.paramSegment(seqrelid)(PgSequenceId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgSequenceFields, PgSequenceRow] = {
    DeleteBuilder("pg_catalog.pg_sequence", PgSequenceFields)
  }
  override def insert(unsaved: PgSequenceRow): ZIO[ZConnection, Throwable, PgSequenceRow] = {
    sql"""insert into pg_catalog.pg_sequence("seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle")
          values (${Segment.paramSegment(unsaved.seqrelid)(PgSequenceId.setter)}::oid, ${Segment.paramSegment(unsaved.seqtypid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.seqstart)(Setter.longSetter)}::int8, ${Segment.paramSegment(unsaved.seqincrement)(Setter.longSetter)}::int8, ${Segment.paramSegment(unsaved.seqmax)(Setter.longSetter)}::int8, ${Segment.paramSegment(unsaved.seqmin)(Setter.longSetter)}::int8, ${Segment.paramSegment(unsaved.seqcache)(Setter.longSetter)}::int8, ${Segment.paramSegment(unsaved.seqcycle)(Setter.booleanSetter)})
          returning "seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle"
       """.insertReturning(PgSequenceRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgSequenceFields, PgSequenceRow] = {
    SelectBuilderSql("pg_catalog.pg_sequence", PgSequenceFields, PgSequenceRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgSequenceRow] = {
    sql"""select "seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle" from pg_catalog.pg_sequence""".query(PgSequenceRow.jdbcDecoder).selectStream
  }
  override def selectById(seqrelid: PgSequenceId): ZIO[ZConnection, Throwable, Option[PgSequenceRow]] = {
    sql"""select "seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle" from pg_catalog.pg_sequence where "seqrelid" = ${Segment.paramSegment(seqrelid)(PgSequenceId.setter)}""".query(PgSequenceRow.jdbcDecoder).selectOne
  }
  override def selectByIds(seqrelids: Array[PgSequenceId]): ZStream[ZConnection, Throwable, PgSequenceRow] = {
    sql"""select "seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle" from pg_catalog.pg_sequence where "seqrelid" = ANY(${Segment.paramSegment(seqrelids)(PgSequenceId.arraySetter)})""".query(PgSequenceRow.jdbcDecoder).selectStream
  }
  override def update(row: PgSequenceRow): ZIO[ZConnection, Throwable, Boolean] = {
    val seqrelid = row.seqrelid
    sql"""update pg_catalog.pg_sequence
          set "seqtypid" = ${Segment.paramSegment(row.seqtypid)(Setter.longSetter)}::oid,
              "seqstart" = ${Segment.paramSegment(row.seqstart)(Setter.longSetter)}::int8,
              "seqincrement" = ${Segment.paramSegment(row.seqincrement)(Setter.longSetter)}::int8,
              "seqmax" = ${Segment.paramSegment(row.seqmax)(Setter.longSetter)}::int8,
              "seqmin" = ${Segment.paramSegment(row.seqmin)(Setter.longSetter)}::int8,
              "seqcache" = ${Segment.paramSegment(row.seqcache)(Setter.longSetter)}::int8,
              "seqcycle" = ${Segment.paramSegment(row.seqcycle)(Setter.booleanSetter)}
          where "seqrelid" = ${Segment.paramSegment(seqrelid)(PgSequenceId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgSequenceFields, PgSequenceRow] = {
    UpdateBuilder("pg_catalog.pg_sequence", PgSequenceFields, PgSequenceRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgSequenceRow): ZIO[ZConnection, Throwable, UpdateResult[PgSequenceRow]] = {
    sql"""insert into pg_catalog.pg_sequence("seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle")
          values (
            ${Segment.paramSegment(unsaved.seqrelid)(PgSequenceId.setter)}::oid,
            ${Segment.paramSegment(unsaved.seqtypid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.seqstart)(Setter.longSetter)}::int8,
            ${Segment.paramSegment(unsaved.seqincrement)(Setter.longSetter)}::int8,
            ${Segment.paramSegment(unsaved.seqmax)(Setter.longSetter)}::int8,
            ${Segment.paramSegment(unsaved.seqmin)(Setter.longSetter)}::int8,
            ${Segment.paramSegment(unsaved.seqcache)(Setter.longSetter)}::int8,
            ${Segment.paramSegment(unsaved.seqcycle)(Setter.booleanSetter)}
          )
          on conflict ("seqrelid")
          do update set
            "seqtypid" = EXCLUDED."seqtypid",
            "seqstart" = EXCLUDED."seqstart",
            "seqincrement" = EXCLUDED."seqincrement",
            "seqmax" = EXCLUDED."seqmax",
            "seqmin" = EXCLUDED."seqmin",
            "seqcache" = EXCLUDED."seqcache",
            "seqcycle" = EXCLUDED."seqcycle"
          returning "seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle"""".insertReturning(PgSequenceRow.jdbcDecoder)
  }
}
