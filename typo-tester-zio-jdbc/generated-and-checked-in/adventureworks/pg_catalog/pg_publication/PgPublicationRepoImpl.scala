/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_publication

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgPublicationRepoImpl extends PgPublicationRepo {
  override def delete(oid: PgPublicationId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_publication where "oid" = ${Segment.paramSegment(oid)(PgPublicationId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgPublicationFields, PgPublicationRow] = {
    DeleteBuilder("pg_catalog.pg_publication", PgPublicationFields)
  }
  override def insert(unsaved: PgPublicationRow): ZIO[ZConnection, Throwable, PgPublicationRow] = {
    sql"""insert into pg_catalog.pg_publication("oid", "pubname", "pubowner", "puballtables", "pubinsert", "pubupdate", "pubdelete", "pubtruncate", "pubviaroot")
          values (${Segment.paramSegment(unsaved.oid)(PgPublicationId.setter)}::oid, ${Segment.paramSegment(unsaved.pubname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.pubowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.puballtables)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.pubinsert)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.pubupdate)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.pubdelete)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.pubtruncate)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.pubviaroot)(Setter.booleanSetter)})
          returning "oid", "pubname", "pubowner", "puballtables", "pubinsert", "pubupdate", "pubdelete", "pubtruncate", "pubviaroot"
       """.insertReturning(PgPublicationRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgPublicationFields, PgPublicationRow] = {
    SelectBuilderSql("pg_catalog.pg_publication", PgPublicationFields, PgPublicationRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgPublicationRow] = {
    sql"""select "oid", "pubname", "pubowner", "puballtables", "pubinsert", "pubupdate", "pubdelete", "pubtruncate", "pubviaroot" from pg_catalog.pg_publication""".query(PgPublicationRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgPublicationId): ZIO[ZConnection, Throwable, Option[PgPublicationRow]] = {
    sql"""select "oid", "pubname", "pubowner", "puballtables", "pubinsert", "pubupdate", "pubdelete", "pubtruncate", "pubviaroot" from pg_catalog.pg_publication where "oid" = ${Segment.paramSegment(oid)(PgPublicationId.setter)}""".query(PgPublicationRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgPublicationId]): ZStream[ZConnection, Throwable, PgPublicationRow] = {
    sql"""select "oid", "pubname", "pubowner", "puballtables", "pubinsert", "pubupdate", "pubdelete", "pubtruncate", "pubviaroot" from pg_catalog.pg_publication where "oid" = ANY(${Segment.paramSegment(oids)(PgPublicationId.arraySetter)})""".query(PgPublicationRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(pubname: String): ZIO[ZConnection, Throwable, Option[PgPublicationRow]] = {
    sql"""select "pubname"
          from pg_catalog.pg_publication
          where "pubname" = ${Segment.paramSegment(pubname)(Setter.stringSetter)}
       """.query(PgPublicationRow.jdbcDecoder).selectOne
  }
  override def update(row: PgPublicationRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_publication
          set "pubname" = ${Segment.paramSegment(row.pubname)(Setter.stringSetter)}::name,
              "pubowner" = ${Segment.paramSegment(row.pubowner)(Setter.longSetter)}::oid,
              "puballtables" = ${Segment.paramSegment(row.puballtables)(Setter.booleanSetter)},
              "pubinsert" = ${Segment.paramSegment(row.pubinsert)(Setter.booleanSetter)},
              "pubupdate" = ${Segment.paramSegment(row.pubupdate)(Setter.booleanSetter)},
              "pubdelete" = ${Segment.paramSegment(row.pubdelete)(Setter.booleanSetter)},
              "pubtruncate" = ${Segment.paramSegment(row.pubtruncate)(Setter.booleanSetter)},
              "pubviaroot" = ${Segment.paramSegment(row.pubviaroot)(Setter.booleanSetter)}
          where "oid" = ${Segment.paramSegment(oid)(PgPublicationId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgPublicationFields, PgPublicationRow] = {
    UpdateBuilder("pg_catalog.pg_publication", PgPublicationFields, PgPublicationRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgPublicationRow): ZIO[ZConnection, Throwable, UpdateResult[PgPublicationRow]] = {
    sql"""insert into pg_catalog.pg_publication("oid", "pubname", "pubowner", "puballtables", "pubinsert", "pubupdate", "pubdelete", "pubtruncate", "pubviaroot")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgPublicationId.setter)}::oid,
            ${Segment.paramSegment(unsaved.pubname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.pubowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.puballtables)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.pubinsert)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.pubupdate)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.pubdelete)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.pubtruncate)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.pubviaroot)(Setter.booleanSetter)}
          )
          on conflict ("oid")
          do update set
            "pubname" = EXCLUDED."pubname",
            "pubowner" = EXCLUDED."pubowner",
            "puballtables" = EXCLUDED."puballtables",
            "pubinsert" = EXCLUDED."pubinsert",
            "pubupdate" = EXCLUDED."pubupdate",
            "pubdelete" = EXCLUDED."pubdelete",
            "pubtruncate" = EXCLUDED."pubtruncate",
            "pubviaroot" = EXCLUDED."pubviaroot"
          returning "oid", "pubname", "pubowner", "puballtables", "pubinsert", "pubupdate", "pubdelete", "pubtruncate", "pubviaroot"""".insertReturning(PgPublicationRow.jdbcDecoder)
  }
}
