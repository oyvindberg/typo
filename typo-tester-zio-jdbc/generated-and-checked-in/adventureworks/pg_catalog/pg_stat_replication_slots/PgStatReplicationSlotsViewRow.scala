/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_replication_slots

import adventureworks.customtypes.TypoInstant
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatReplicationSlotsViewRow(
  slotName: /* nullability unknown */ Option[String],
  spillTxns: /* nullability unknown */ Option[Long],
  spillCount: /* nullability unknown */ Option[Long],
  spillBytes: /* nullability unknown */ Option[Long],
  streamTxns: /* nullability unknown */ Option[Long],
  streamCount: /* nullability unknown */ Option[Long],
  streamBytes: /* nullability unknown */ Option[Long],
  totalTxns: /* nullability unknown */ Option[Long],
  totalBytes: /* nullability unknown */ Option[Long],
  statsReset: /* nullability unknown */ Option[TypoInstant]
)

object PgStatReplicationSlotsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatReplicationSlotsViewRow] = new JdbcDecoder[PgStatReplicationSlotsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatReplicationSlotsViewRow) =
      columIndex + 9 ->
        PgStatReplicationSlotsViewRow(
          slotName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          spillTxns = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          spillCount = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 2, rs)._2,
          spillBytes = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          streamTxns = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          streamCount = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          streamBytes = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 6, rs)._2,
          totalTxns = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 7, rs)._2,
          totalBytes = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 8, rs)._2,
          statsReset = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 9, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatReplicationSlotsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val slotName = jsonObj.get("slot_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val spillTxns = jsonObj.get("spill_txns").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val spillCount = jsonObj.get("spill_count").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val spillBytes = jsonObj.get("spill_bytes").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val streamTxns = jsonObj.get("stream_txns").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val streamCount = jsonObj.get("stream_count").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val streamBytes = jsonObj.get("stream_bytes").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val totalTxns = jsonObj.get("total_txns").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val totalBytes = jsonObj.get("total_bytes").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val statsReset = jsonObj.get("stats_reset").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    if (slotName.isRight && spillTxns.isRight && spillCount.isRight && spillBytes.isRight && streamTxns.isRight && streamCount.isRight && streamBytes.isRight && totalTxns.isRight && totalBytes.isRight && statsReset.isRight)
      Right(PgStatReplicationSlotsViewRow(slotName = slotName.toOption.get, spillTxns = spillTxns.toOption.get, spillCount = spillCount.toOption.get, spillBytes = spillBytes.toOption.get, streamTxns = streamTxns.toOption.get, streamCount = streamCount.toOption.get, streamBytes = streamBytes.toOption.get, totalTxns = totalTxns.toOption.get, totalBytes = totalBytes.toOption.get, statsReset = statsReset.toOption.get))
    else Left(List[Either[String, Any]](slotName, spillTxns, spillCount, spillBytes, streamTxns, streamCount, streamBytes, totalTxns, totalBytes, statsReset).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatReplicationSlotsViewRow] = new JsonEncoder[PgStatReplicationSlotsViewRow] {
    override def unsafeEncode(a: PgStatReplicationSlotsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""slot_name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.slotName, indent, out)
      out.write(",")
      out.write(""""spill_txns":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.spillTxns, indent, out)
      out.write(",")
      out.write(""""spill_count":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.spillCount, indent, out)
      out.write(",")
      out.write(""""spill_bytes":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.spillBytes, indent, out)
      out.write(",")
      out.write(""""stream_txns":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.streamTxns, indent, out)
      out.write(",")
      out.write(""""stream_count":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.streamCount, indent, out)
      out.write(",")
      out.write(""""stream_bytes":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.streamBytes, indent, out)
      out.write(",")
      out.write(""""total_txns":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.totalTxns, indent, out)
      out.write(",")
      out.write(""""total_bytes":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.totalBytes, indent, out)
      out.write(",")
      out.write(""""stats_reset":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.statsReset, indent, out)
      out.write("}")
    }
  }
}
