/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_prepared_statements

import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoRegtype
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgPreparedStatementsViewRow(
  name: /* nullability unknown */ Option[String],
  statement: /* nullability unknown */ Option[String],
  prepareTime: /* nullability unknown */ Option[TypoInstant],
  parameterTypes: /* nullability unknown */ Option[Array[TypoRegtype]],
  fromSql: /* nullability unknown */ Option[Boolean],
  genericPlans: /* nullability unknown */ Option[Long],
  customPlans: /* nullability unknown */ Option[Long]
)

object PgPreparedStatementsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgPreparedStatementsViewRow] = new JdbcDecoder[PgPreparedStatementsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgPreparedStatementsViewRow) =
      columIndex + 6 ->
        PgPreparedStatementsViewRow(
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          statement = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          prepareTime = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          parameterTypes = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoRegtype]]).unsafeDecode(columIndex + 3, rs)._2,
          fromSql = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 4, rs)._2,
          genericPlans = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          customPlans = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 6, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgPreparedStatementsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val statement = jsonObj.get("statement").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val prepareTime = jsonObj.get("prepare_time").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    val parameterTypes = jsonObj.get("parameter_types").fold[Either[String, Option[Array[TypoRegtype]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoRegtype](TypoRegtype.jsonDecoder, implicitly))))
    val fromSql = jsonObj.get("from_sql").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val genericPlans = jsonObj.get("generic_plans").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val customPlans = jsonObj.get("custom_plans").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    if (name.isRight && statement.isRight && prepareTime.isRight && parameterTypes.isRight && fromSql.isRight && genericPlans.isRight && customPlans.isRight)
      Right(PgPreparedStatementsViewRow(name = name.toOption.get, statement = statement.toOption.get, prepareTime = prepareTime.toOption.get, parameterTypes = parameterTypes.toOption.get, fromSql = fromSql.toOption.get, genericPlans = genericPlans.toOption.get, customPlans = customPlans.toOption.get))
    else Left(List[Either[String, Any]](name, statement, prepareTime, parameterTypes, fromSql, genericPlans, customPlans).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgPreparedStatementsViewRow] = new JsonEncoder[PgPreparedStatementsViewRow] {
    override def unsafeEncode(a: PgPreparedStatementsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""statement":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.statement, indent, out)
      out.write(",")
      out.write(""""prepare_time":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.prepareTime, indent, out)
      out.write(",")
      out.write(""""parameter_types":""")
      JsonEncoder.option(JsonEncoder.array[TypoRegtype](TypoRegtype.jsonEncoder, implicitly)).unsafeEncode(a.parameterTypes, indent, out)
      out.write(",")
      out.write(""""from_sql":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.fromSql, indent, out)
      out.write(",")
      out.write(""""generic_plans":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.genericPlans, indent, out)
      out.write(",")
      out.write(""""custom_plans":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.customPlans, indent, out)
      out.write("}")
    }
  }
}
