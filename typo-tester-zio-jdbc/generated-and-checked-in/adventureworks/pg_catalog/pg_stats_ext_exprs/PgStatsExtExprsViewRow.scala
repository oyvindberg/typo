/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stats_ext_exprs

import adventureworks.customtypes.TypoAnyArray
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatsExtExprsViewRow(
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: Option[String],
  /** Points to [[pg_class.PgClassRow.relname]] */
  tablename: String,
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  statisticsSchemaname: Option[String],
  /** Points to [[pg_statistic_ext.PgStatisticExtRow.stxname]] */
  statisticsName: String,
  statisticsOwner: /* nullability unknown */ Option[String],
  expr: /* nullability unknown */ Option[String],
  nullFrac: /* nullability unknown */ Option[Float],
  avgWidth: /* nullability unknown */ Option[Int],
  nDistinct: /* nullability unknown */ Option[Float],
  mostCommonVals: /* nullability unknown */ Option[TypoAnyArray],
  mostCommonFreqs: /* nullability unknown */ Option[Array[Float]],
  histogramBounds: /* nullability unknown */ Option[TypoAnyArray],
  correlation: /* nullability unknown */ Option[Float],
  mostCommonElems: /* nullability unknown */ Option[TypoAnyArray],
  mostCommonElemFreqs: /* nullability unknown */ Option[Array[Float]],
  elemCountHistogram: /* nullability unknown */ Option[Array[Float]]
)

object PgStatsExtExprsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatsExtExprsViewRow] = new JdbcDecoder[PgStatsExtExprsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatsExtExprsViewRow) =
      columIndex + 15 ->
        PgStatsExtExprsViewRow(
          schemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          tablename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          statisticsSchemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          statisticsName = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          statisticsOwner = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          expr = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          nullFrac = JdbcDecoder.optionDecoder(JdbcDecoder.floatDecoder).unsafeDecode(columIndex + 6, rs)._2,
          avgWidth = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 7, rs)._2,
          nDistinct = JdbcDecoder.optionDecoder(JdbcDecoder.floatDecoder).unsafeDecode(columIndex + 8, rs)._2,
          mostCommonVals = JdbcDecoder.optionDecoder(TypoAnyArray.jdbcDecoder).unsafeDecode(columIndex + 9, rs)._2,
          mostCommonFreqs = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 10, rs)._2,
          histogramBounds = JdbcDecoder.optionDecoder(TypoAnyArray.jdbcDecoder).unsafeDecode(columIndex + 11, rs)._2,
          correlation = JdbcDecoder.optionDecoder(JdbcDecoder.floatDecoder).unsafeDecode(columIndex + 12, rs)._2,
          mostCommonElems = JdbcDecoder.optionDecoder(TypoAnyArray.jdbcDecoder).unsafeDecode(columIndex + 13, rs)._2,
          mostCommonElemFreqs = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 14, rs)._2,
          elemCountHistogram = JdbcDecoder.optionDecoder(adventureworks.FloatArrayDecoder).unsafeDecode(columIndex + 15, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatsExtExprsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val schemaname = jsonObj.get("schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val tablename = jsonObj.get("tablename").toRight("Missing field 'tablename'").flatMap(_.as(JsonDecoder.string))
    val statisticsSchemaname = jsonObj.get("statistics_schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val statisticsName = jsonObj.get("statistics_name").toRight("Missing field 'statistics_name'").flatMap(_.as(JsonDecoder.string))
    val statisticsOwner = jsonObj.get("statistics_owner").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val expr = jsonObj.get("expr").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val nullFrac = jsonObj.get("null_frac").fold[Either[String, Option[Float]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.float)))
    val avgWidth = jsonObj.get("avg_width").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val nDistinct = jsonObj.get("n_distinct").fold[Either[String, Option[Float]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.float)))
    val mostCommonVals = jsonObj.get("most_common_vals").fold[Either[String, Option[TypoAnyArray]]](Right(None))(_.as(JsonDecoder.option(TypoAnyArray.jsonDecoder)))
    val mostCommonFreqs = jsonObj.get("most_common_freqs").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Float](JsonDecoder.float, implicitly))))
    val histogramBounds = jsonObj.get("histogram_bounds").fold[Either[String, Option[TypoAnyArray]]](Right(None))(_.as(JsonDecoder.option(TypoAnyArray.jsonDecoder)))
    val correlation = jsonObj.get("correlation").fold[Either[String, Option[Float]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.float)))
    val mostCommonElems = jsonObj.get("most_common_elems").fold[Either[String, Option[TypoAnyArray]]](Right(None))(_.as(JsonDecoder.option(TypoAnyArray.jsonDecoder)))
    val mostCommonElemFreqs = jsonObj.get("most_common_elem_freqs").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Float](JsonDecoder.float, implicitly))))
    val elemCountHistogram = jsonObj.get("elem_count_histogram").fold[Either[String, Option[Array[Float]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Float](JsonDecoder.float, implicitly))))
    if (schemaname.isRight && tablename.isRight && statisticsSchemaname.isRight && statisticsName.isRight && statisticsOwner.isRight && expr.isRight && nullFrac.isRight && avgWidth.isRight && nDistinct.isRight && mostCommonVals.isRight && mostCommonFreqs.isRight && histogramBounds.isRight && correlation.isRight && mostCommonElems.isRight && mostCommonElemFreqs.isRight && elemCountHistogram.isRight)
      Right(PgStatsExtExprsViewRow(schemaname = schemaname.toOption.get, tablename = tablename.toOption.get, statisticsSchemaname = statisticsSchemaname.toOption.get, statisticsName = statisticsName.toOption.get, statisticsOwner = statisticsOwner.toOption.get, expr = expr.toOption.get, nullFrac = nullFrac.toOption.get, avgWidth = avgWidth.toOption.get, nDistinct = nDistinct.toOption.get, mostCommonVals = mostCommonVals.toOption.get, mostCommonFreqs = mostCommonFreqs.toOption.get, histogramBounds = histogramBounds.toOption.get, correlation = correlation.toOption.get, mostCommonElems = mostCommonElems.toOption.get, mostCommonElemFreqs = mostCommonElemFreqs.toOption.get, elemCountHistogram = elemCountHistogram.toOption.get))
    else Left(List[Either[String, Any]](schemaname, tablename, statisticsSchemaname, statisticsName, statisticsOwner, expr, nullFrac, avgWidth, nDistinct, mostCommonVals, mostCommonFreqs, histogramBounds, correlation, mostCommonElems, mostCommonElemFreqs, elemCountHistogram).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatsExtExprsViewRow] = new JsonEncoder[PgStatsExtExprsViewRow] {
    override def unsafeEncode(a: PgStatsExtExprsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""tablename":""")
      JsonEncoder.string.unsafeEncode(a.tablename, indent, out)
      out.write(",")
      out.write(""""statistics_schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.statisticsSchemaname, indent, out)
      out.write(",")
      out.write(""""statistics_name":""")
      JsonEncoder.string.unsafeEncode(a.statisticsName, indent, out)
      out.write(",")
      out.write(""""statistics_owner":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.statisticsOwner, indent, out)
      out.write(",")
      out.write(""""expr":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.expr, indent, out)
      out.write(",")
      out.write(""""null_frac":""")
      JsonEncoder.option(JsonEncoder.float).unsafeEncode(a.nullFrac, indent, out)
      out.write(",")
      out.write(""""avg_width":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.avgWidth, indent, out)
      out.write(",")
      out.write(""""n_distinct":""")
      JsonEncoder.option(JsonEncoder.float).unsafeEncode(a.nDistinct, indent, out)
      out.write(",")
      out.write(""""most_common_vals":""")
      JsonEncoder.option(TypoAnyArray.jsonEncoder).unsafeEncode(a.mostCommonVals, indent, out)
      out.write(",")
      out.write(""""most_common_freqs":""")
      JsonEncoder.option(JsonEncoder.array[Float](JsonEncoder.float, implicitly)).unsafeEncode(a.mostCommonFreqs, indent, out)
      out.write(",")
      out.write(""""histogram_bounds":""")
      JsonEncoder.option(TypoAnyArray.jsonEncoder).unsafeEncode(a.histogramBounds, indent, out)
      out.write(",")
      out.write(""""correlation":""")
      JsonEncoder.option(JsonEncoder.float).unsafeEncode(a.correlation, indent, out)
      out.write(",")
      out.write(""""most_common_elems":""")
      JsonEncoder.option(TypoAnyArray.jsonEncoder).unsafeEncode(a.mostCommonElems, indent, out)
      out.write(",")
      out.write(""""most_common_elem_freqs":""")
      JsonEncoder.option(JsonEncoder.array[Float](JsonEncoder.float, implicitly)).unsafeEncode(a.mostCommonElemFreqs, indent, out)
      out.write(",")
      out.write(""""elem_count_histogram":""")
      JsonEncoder.option(JsonEncoder.array[Float](JsonEncoder.float, implicitly)).unsafeEncode(a.elemCountHistogram, indent, out)
      out.write("}")
    }
  }
}
