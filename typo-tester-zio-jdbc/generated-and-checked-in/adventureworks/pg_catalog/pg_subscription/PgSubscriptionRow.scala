/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_subscription

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgSubscriptionRow(
  oid: PgSubscriptionId,
  subdbid: /* oid */ Long,
  subname: String,
  subowner: /* oid */ Long,
  subenabled: Boolean,
  subbinary: Boolean,
  substream: Boolean,
  subconninfo: String,
  subslotname: Option[String],
  subsynccommit: String,
  subpublications: Array[String]
)

object PgSubscriptionRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgSubscriptionRow] = new JdbcDecoder[PgSubscriptionRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgSubscriptionRow) =
      columIndex + 10 ->
        PgSubscriptionRow(
          oid = PgSubscriptionId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          subdbid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          subname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          subowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          subenabled = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 4, rs)._2,
          subbinary = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 5, rs)._2,
          substream = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 6, rs)._2,
          subconninfo = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 7, rs)._2,
          subslotname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          subsynccommit = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 9, rs)._2,
          subpublications = adventureworks.StringArrayDecoder.unsafeDecode(columIndex + 10, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgSubscriptionRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgSubscriptionId.jsonDecoder))
    val subdbid = jsonObj.get("subdbid").toRight("Missing field 'subdbid'").flatMap(_.as(JsonDecoder.long))
    val subname = jsonObj.get("subname").toRight("Missing field 'subname'").flatMap(_.as(JsonDecoder.string))
    val subowner = jsonObj.get("subowner").toRight("Missing field 'subowner'").flatMap(_.as(JsonDecoder.long))
    val subenabled = jsonObj.get("subenabled").toRight("Missing field 'subenabled'").flatMap(_.as(JsonDecoder.boolean))
    val subbinary = jsonObj.get("subbinary").toRight("Missing field 'subbinary'").flatMap(_.as(JsonDecoder.boolean))
    val substream = jsonObj.get("substream").toRight("Missing field 'substream'").flatMap(_.as(JsonDecoder.boolean))
    val subconninfo = jsonObj.get("subconninfo").toRight("Missing field 'subconninfo'").flatMap(_.as(JsonDecoder.string))
    val subslotname = jsonObj.get("subslotname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val subsynccommit = jsonObj.get("subsynccommit").toRight("Missing field 'subsynccommit'").flatMap(_.as(JsonDecoder.string))
    val subpublications = jsonObj.get("subpublications").toRight("Missing field 'subpublications'").flatMap(_.as(JsonDecoder.array[String](JsonDecoder.string, implicitly)))
    if (oid.isRight && subdbid.isRight && subname.isRight && subowner.isRight && subenabled.isRight && subbinary.isRight && substream.isRight && subconninfo.isRight && subslotname.isRight && subsynccommit.isRight && subpublications.isRight)
      Right(PgSubscriptionRow(oid = oid.toOption.get, subdbid = subdbid.toOption.get, subname = subname.toOption.get, subowner = subowner.toOption.get, subenabled = subenabled.toOption.get, subbinary = subbinary.toOption.get, substream = substream.toOption.get, subconninfo = subconninfo.toOption.get, subslotname = subslotname.toOption.get, subsynccommit = subsynccommit.toOption.get, subpublications = subpublications.toOption.get))
    else Left(List[Either[String, Any]](oid, subdbid, subname, subowner, subenabled, subbinary, substream, subconninfo, subslotname, subsynccommit, subpublications).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgSubscriptionRow] = new JsonEncoder[PgSubscriptionRow] {
    override def unsafeEncode(a: PgSubscriptionRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgSubscriptionId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""subdbid":""")
      JsonEncoder.long.unsafeEncode(a.subdbid, indent, out)
      out.write(",")
      out.write(""""subname":""")
      JsonEncoder.string.unsafeEncode(a.subname, indent, out)
      out.write(",")
      out.write(""""subowner":""")
      JsonEncoder.long.unsafeEncode(a.subowner, indent, out)
      out.write(",")
      out.write(""""subenabled":""")
      JsonEncoder.boolean.unsafeEncode(a.subenabled, indent, out)
      out.write(",")
      out.write(""""subbinary":""")
      JsonEncoder.boolean.unsafeEncode(a.subbinary, indent, out)
      out.write(",")
      out.write(""""substream":""")
      JsonEncoder.boolean.unsafeEncode(a.substream, indent, out)
      out.write(",")
      out.write(""""subconninfo":""")
      JsonEncoder.string.unsafeEncode(a.subconninfo, indent, out)
      out.write(",")
      out.write(""""subslotname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.subslotname, indent, out)
      out.write(",")
      out.write(""""subsynccommit":""")
      JsonEncoder.string.unsafeEncode(a.subsynccommit, indent, out)
      out.write(",")
      out.write(""""subpublications":""")
      JsonEncoder.array[String](JsonEncoder.string, implicitly).unsafeEncode(a.subpublications, indent, out)
      out.write("}")
    }
  }
}
