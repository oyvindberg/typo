/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_subscription

import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgSubscriptionRepoImpl extends PgSubscriptionRepo {
  override def delete(oid: PgSubscriptionId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_subscription where "oid" = ${Segment.paramSegment(oid)(PgSubscriptionId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgSubscriptionFields, PgSubscriptionRow] = {
    DeleteBuilder("pg_catalog.pg_subscription", PgSubscriptionFields)
  }
  override def insert(unsaved: PgSubscriptionRow): ZIO[ZConnection, Throwable, PgSubscriptionRow] = {
    sql"""insert into pg_catalog.pg_subscription("oid", "subdbid", "subname", "subowner", "subenabled", "subbinary", "substream", "subconninfo", "subslotname", "subsynccommit", "subpublications")
          values (${Segment.paramSegment(unsaved.oid)(PgSubscriptionId.setter)}::oid, ${Segment.paramSegment(unsaved.subdbid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.subname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.subowner)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.subenabled)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.subbinary)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.substream)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.subconninfo)(Setter.stringSetter)}, ${Segment.paramSegment(unsaved.subslotname)(Setter.optionParamSetter(Setter.stringSetter))}::name, ${Segment.paramSegment(unsaved.subsynccommit)(Setter.stringSetter)}, ${Segment.paramSegment(unsaved.subpublications)(adventureworks.StringArraySetter)}::_text)
          returning "oid", "subdbid", "subname", "subowner", "subenabled", "subbinary", "substream", "subconninfo", "subslotname", "subsynccommit", "subpublications"
       """.insertReturning(PgSubscriptionRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgSubscriptionFields, PgSubscriptionRow] = {
    SelectBuilderSql("pg_catalog.pg_subscription", PgSubscriptionFields, PgSubscriptionRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgSubscriptionRow] = {
    sql"""select "oid", "subdbid", "subname", "subowner", "subenabled", "subbinary", "substream", "subconninfo", "subslotname", "subsynccommit", "subpublications" from pg_catalog.pg_subscription""".query(PgSubscriptionRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgSubscriptionId): ZIO[ZConnection, Throwable, Option[PgSubscriptionRow]] = {
    sql"""select "oid", "subdbid", "subname", "subowner", "subenabled", "subbinary", "substream", "subconninfo", "subslotname", "subsynccommit", "subpublications" from pg_catalog.pg_subscription where "oid" = ${Segment.paramSegment(oid)(PgSubscriptionId.setter)}""".query(PgSubscriptionRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgSubscriptionId]): ZStream[ZConnection, Throwable, PgSubscriptionRow] = {
    sql"""select "oid", "subdbid", "subname", "subowner", "subenabled", "subbinary", "substream", "subconninfo", "subslotname", "subsynccommit", "subpublications" from pg_catalog.pg_subscription where "oid" = ANY(${Segment.paramSegment(oids)(PgSubscriptionId.arraySetter)})""".query(PgSubscriptionRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(subdbid: /* oid */ Long, subname: String): ZIO[ZConnection, Throwable, Option[PgSubscriptionRow]] = {
    sql"""select "subdbid", "subname"
          from pg_catalog.pg_subscription
          where "subdbid" = ${Segment.paramSegment(subdbid)(Setter.longSetter)} AND "subname" = ${Segment.paramSegment(subname)(Setter.stringSetter)}
       """.query(PgSubscriptionRow.jdbcDecoder).selectOne
  }
  override def update(row: PgSubscriptionRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_subscription
          set "subdbid" = ${Segment.paramSegment(row.subdbid)(Setter.longSetter)}::oid,
              "subname" = ${Segment.paramSegment(row.subname)(Setter.stringSetter)}::name,
              "subowner" = ${Segment.paramSegment(row.subowner)(Setter.longSetter)}::oid,
              "subenabled" = ${Segment.paramSegment(row.subenabled)(Setter.booleanSetter)},
              "subbinary" = ${Segment.paramSegment(row.subbinary)(Setter.booleanSetter)},
              "substream" = ${Segment.paramSegment(row.substream)(Setter.booleanSetter)},
              "subconninfo" = ${Segment.paramSegment(row.subconninfo)(Setter.stringSetter)},
              "subslotname" = ${Segment.paramSegment(row.subslotname)(Setter.optionParamSetter(Setter.stringSetter))}::name,
              "subsynccommit" = ${Segment.paramSegment(row.subsynccommit)(Setter.stringSetter)},
              "subpublications" = ${Segment.paramSegment(row.subpublications)(adventureworks.StringArraySetter)}::_text
          where "oid" = ${Segment.paramSegment(oid)(PgSubscriptionId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgSubscriptionFields, PgSubscriptionRow] = {
    UpdateBuilder("pg_catalog.pg_subscription", PgSubscriptionFields, PgSubscriptionRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgSubscriptionRow): ZIO[ZConnection, Throwable, UpdateResult[PgSubscriptionRow]] = {
    sql"""insert into pg_catalog.pg_subscription("oid", "subdbid", "subname", "subowner", "subenabled", "subbinary", "substream", "subconninfo", "subslotname", "subsynccommit", "subpublications")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgSubscriptionId.setter)}::oid,
            ${Segment.paramSegment(unsaved.subdbid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.subname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.subowner)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.subenabled)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.subbinary)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.substream)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.subconninfo)(Setter.stringSetter)},
            ${Segment.paramSegment(unsaved.subslotname)(Setter.optionParamSetter(Setter.stringSetter))}::name,
            ${Segment.paramSegment(unsaved.subsynccommit)(Setter.stringSetter)},
            ${Segment.paramSegment(unsaved.subpublications)(adventureworks.StringArraySetter)}::_text
          )
          on conflict ("oid")
          do update set
            "subdbid" = EXCLUDED."subdbid",
            "subname" = EXCLUDED."subname",
            "subowner" = EXCLUDED."subowner",
            "subenabled" = EXCLUDED."subenabled",
            "subbinary" = EXCLUDED."subbinary",
            "substream" = EXCLUDED."substream",
            "subconninfo" = EXCLUDED."subconninfo",
            "subslotname" = EXCLUDED."subslotname",
            "subsynccommit" = EXCLUDED."subsynccommit",
            "subpublications" = EXCLUDED."subpublications"
          returning "oid", "subdbid", "subname", "subowner", "subenabled", "subbinary", "substream", "subconninfo", "subslotname", "subsynccommit", "subpublications"""".insertReturning(PgSubscriptionRow.jdbcDecoder)
  }
}
