/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amproc

import adventureworks.customtypes.TypoRegproc
import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgAmprocRow(
  oid: PgAmprocId,
  amprocfamily: /* oid */ Long,
  amproclefttype: /* oid */ Long,
  amprocrighttype: /* oid */ Long,
  amprocnum: TypoShort,
  amproc: TypoRegproc
)

object PgAmprocRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgAmprocRow] = new JdbcDecoder[PgAmprocRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgAmprocRow) =
      columIndex + 5 ->
        PgAmprocRow(
          oid = PgAmprocId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          amprocfamily = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          amproclefttype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          amprocrighttype = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          amprocnum = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          amproc = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgAmprocRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgAmprocId.jsonDecoder))
    val amprocfamily = jsonObj.get("amprocfamily").toRight("Missing field 'amprocfamily'").flatMap(_.as(JsonDecoder.long))
    val amproclefttype = jsonObj.get("amproclefttype").toRight("Missing field 'amproclefttype'").flatMap(_.as(JsonDecoder.long))
    val amprocrighttype = jsonObj.get("amprocrighttype").toRight("Missing field 'amprocrighttype'").flatMap(_.as(JsonDecoder.long))
    val amprocnum = jsonObj.get("amprocnum").toRight("Missing field 'amprocnum'").flatMap(_.as(TypoShort.jsonDecoder))
    val amproc = jsonObj.get("amproc").toRight("Missing field 'amproc'").flatMap(_.as(TypoRegproc.jsonDecoder))
    if (oid.isRight && amprocfamily.isRight && amproclefttype.isRight && amprocrighttype.isRight && amprocnum.isRight && amproc.isRight)
      Right(PgAmprocRow(oid = oid.toOption.get, amprocfamily = amprocfamily.toOption.get, amproclefttype = amproclefttype.toOption.get, amprocrighttype = amprocrighttype.toOption.get, amprocnum = amprocnum.toOption.get, amproc = amproc.toOption.get))
    else Left(List[Either[String, Any]](oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgAmprocRow] = new JsonEncoder[PgAmprocRow] {
    override def unsafeEncode(a: PgAmprocRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgAmprocId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""amprocfamily":""")
      JsonEncoder.long.unsafeEncode(a.amprocfamily, indent, out)
      out.write(",")
      out.write(""""amproclefttype":""")
      JsonEncoder.long.unsafeEncode(a.amproclefttype, indent, out)
      out.write(",")
      out.write(""""amprocrighttype":""")
      JsonEncoder.long.unsafeEncode(a.amprocrighttype, indent, out)
      out.write(",")
      out.write(""""amprocnum":""")
      TypoShort.jsonEncoder.unsafeEncode(a.amprocnum, indent, out)
      out.write(",")
      out.write(""""amproc":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.amproc, indent, out)
      out.write("}")
    }
  }
}
