/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amproc

import adventureworks.customtypes.TypoShort
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgAmprocRepoImpl extends PgAmprocRepo {
  override def delete(oid: PgAmprocId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_amproc where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgAmprocFields, PgAmprocRow] = {
    DeleteBuilder("pg_catalog.pg_amproc", PgAmprocFields)
  }
  override def insert(unsaved: PgAmprocRow): ZIO[ZConnection, Throwable, PgAmprocRow] = {
    sql"""insert into pg_catalog.pg_amproc("oid", "amprocfamily", "amproclefttype", "amprocrighttype", "amprocnum", "amproc")
          values (???::oid, ???::oid, ???::oid, ???::oid, ???::int2, ???::regproc)
          returning "oid", "amprocfamily", "amproclefttype", "amprocrighttype", "amprocnum", "amproc"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgAmprocFields, PgAmprocRow] = {
    SelectBuilderSql("pg_catalog.pg_amproc", PgAmprocFields, PgAmprocRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgAmprocRow] = {
    sql"""select "oid", "amprocfamily", "amproclefttype", "amprocrighttype", "amprocnum", "amproc" from pg_catalog.pg_amproc""".query[PgAmprocRow].selectStream
  }
  override def selectById(oid: PgAmprocId): ZIO[ZConnection, Throwable, Option[PgAmprocRow]] = {
    sql"""select "oid", "amprocfamily", "amproclefttype", "amprocrighttype", "amprocnum", "amproc" from pg_catalog.pg_amproc where "oid" = ???""".query[PgAmprocRow].selectOne
  }
  override def selectByIds(oids: Array[PgAmprocId]): ZStream[ZConnection, Throwable, PgAmprocRow] = {
    sql"""select "oid", "amprocfamily", "amproclefttype", "amprocrighttype", "amprocnum", "amproc" from pg_catalog.pg_amproc where "oid" = ANY(${oids})""".query[PgAmprocRow].selectStream
  }
  override def selectByUnique(amprocfamily: /* oid */ Long, amproclefttype: /* oid */ Long, amprocrighttype: /* oid */ Long, amprocnum: TypoShort): ZIO[ZConnection, Throwable, Option[PgAmprocRow]] = {
    sql"""select "amprocfamily", "amproclefttype", "amprocrighttype", "amprocnum"
          from pg_catalog.pg_amproc
          where "amprocfamily" = ??? AND "amproclefttype" = ??? AND "amprocrighttype" = ??? AND "amprocnum" = ???
       """.query[PgAmprocRow].selectOne
  }
  override def update(row: PgAmprocRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_amproc
          set "amprocfamily" = ???::oid,
              "amproclefttype" = ???::oid,
              "amprocrighttype" = ???::oid,
              "amprocnum" = ???::int2,
              "amproc" = ???::regproc
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgAmprocFields, PgAmprocRow] = {
    UpdateBuilder("pg_catalog.pg_amproc", PgAmprocFields, PgAmprocRow.read)
  }
  override def upsert(unsaved: PgAmprocRow): ZIO[ZConnection, Throwable, PgAmprocRow] = {
    sql"""insert into pg_catalog.pg_amproc("oid", "amprocfamily", "amproclefttype", "amprocrighttype", "amprocnum", "amproc")
          values (
            ???::oid,
            ???::oid,
            ???::oid,
            ???::oid,
            ???::int2,
            ???::regproc
          )
          on conflict ("oid")
          do update set
            "amprocfamily" = EXCLUDED."amprocfamily",
            "amproclefttype" = EXCLUDED."amproclefttype",
            "amprocrighttype" = EXCLUDED."amprocrighttype",
            "amprocnum" = EXCLUDED."amprocnum",
            "amproc" = EXCLUDED."amproc"
          returning "oid", "amprocfamily", "amproclefttype", "amprocrighttype", "amprocnum", "amproc"
       """.query(???).unique
  }
}
