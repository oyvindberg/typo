/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_constraint

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgConstraintRepoImpl extends PgConstraintRepo {
  override def delete(oid: PgConstraintId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_constraint where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgConstraintFields, PgConstraintRow] = {
    DeleteBuilder("pg_catalog.pg_constraint", PgConstraintFields)
  }
  override def insert(unsaved: PgConstraintRow): ZIO[ZConnection, Throwable, PgConstraintRow] = {
    sql"""insert into pg_catalog.pg_constraint("oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin")
          values (???::oid, ???::name, ???::oid, ???::char, ???, ???, ???, ???::oid, ???::oid, ???::oid, ???::oid, ???::oid, ???::char, ???::char, ???::char, ???, ???::int4, ???, ???::_int2, ???::_int2, ???::_oid, ???::_oid, ???::_oid, ???::_oid, ???::pg_node_tree)
          returning "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgConstraintFields, PgConstraintRow] = {
    SelectBuilderSql("pg_catalog.pg_constraint", PgConstraintFields, PgConstraintRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgConstraintRow] = {
    sql"""select "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin" from pg_catalog.pg_constraint""".query[PgConstraintRow].selectStream
  }
  override def selectById(oid: PgConstraintId): ZIO[ZConnection, Throwable, Option[PgConstraintRow]] = {
    sql"""select "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin" from pg_catalog.pg_constraint where "oid" = ???""".query[PgConstraintRow].selectOne
  }
  override def selectByIds(oids: Array[PgConstraintId]): ZStream[ZConnection, Throwable, PgConstraintRow] = {
    sql"""select "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin" from pg_catalog.pg_constraint where "oid" = ANY(${oids})""".query[PgConstraintRow].selectStream
  }
  override def selectByUnique(conrelid: /* oid */ Long, contypid: /* oid */ Long, conname: String): ZIO[ZConnection, Throwable, Option[PgConstraintRow]] = {
    sql"""select "conrelid", "contypid", "conname"
          from pg_catalog.pg_constraint
          where "conrelid" = ??? AND "contypid" = ??? AND "conname" = ???
       """.query[PgConstraintRow].selectOne
  }
  override def update(row: PgConstraintRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_constraint
          set "conname" = ???::name,
              "connamespace" = ???::oid,
              "contype" = ???::char,
              "condeferrable" = ???,
              "condeferred" = ???,
              "convalidated" = ???,
              "conrelid" = ???::oid,
              "contypid" = ???::oid,
              "conindid" = ???::oid,
              "conparentid" = ???::oid,
              "confrelid" = ???::oid,
              "confupdtype" = ???::char,
              "confdeltype" = ???::char,
              "confmatchtype" = ???::char,
              "conislocal" = ???,
              "coninhcount" = ???::int4,
              "connoinherit" = ???,
              "conkey" = ???::_int2,
              "confkey" = ???::_int2,
              "conpfeqop" = ???::_oid,
              "conppeqop" = ???::_oid,
              "conffeqop" = ???::_oid,
              "conexclop" = ???::_oid,
              "conbin" = ???::pg_node_tree
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgConstraintFields, PgConstraintRow] = {
    UpdateBuilder("pg_catalog.pg_constraint", PgConstraintFields, PgConstraintRow.read)
  }
  override def upsert(unsaved: PgConstraintRow): ZIO[ZConnection, Throwable, PgConstraintRow] = {
    sql"""insert into pg_catalog.pg_constraint("oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::char,
            ???,
            ???,
            ???,
            ???::oid,
            ???::oid,
            ???::oid,
            ???::oid,
            ???::oid,
            ???::char,
            ???::char,
            ???::char,
            ???,
            ???::int4,
            ???,
            ???::_int2,
            ???::_int2,
            ???::_oid,
            ???::_oid,
            ???::_oid,
            ???::_oid,
            ???::pg_node_tree
          )
          on conflict ("oid")
          do update set
            "conname" = EXCLUDED."conname",
            "connamespace" = EXCLUDED."connamespace",
            "contype" = EXCLUDED."contype",
            "condeferrable" = EXCLUDED."condeferrable",
            "condeferred" = EXCLUDED."condeferred",
            "convalidated" = EXCLUDED."convalidated",
            "conrelid" = EXCLUDED."conrelid",
            "contypid" = EXCLUDED."contypid",
            "conindid" = EXCLUDED."conindid",
            "conparentid" = EXCLUDED."conparentid",
            "confrelid" = EXCLUDED."confrelid",
            "confupdtype" = EXCLUDED."confupdtype",
            "confdeltype" = EXCLUDED."confdeltype",
            "confmatchtype" = EXCLUDED."confmatchtype",
            "conislocal" = EXCLUDED."conislocal",
            "coninhcount" = EXCLUDED."coninhcount",
            "connoinherit" = EXCLUDED."connoinherit",
            "conkey" = EXCLUDED."conkey",
            "confkey" = EXCLUDED."confkey",
            "conpfeqop" = EXCLUDED."conpfeqop",
            "conppeqop" = EXCLUDED."conppeqop",
            "conffeqop" = EXCLUDED."conffeqop",
            "conexclop" = EXCLUDED."conexclop",
            "conbin" = EXCLUDED."conbin"
          returning "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin"
       """.query(???).unique
  }
}
