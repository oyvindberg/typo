/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_constraint

import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgConstraintRepoImpl extends PgConstraintRepo {
  override def delete(oid: PgConstraintId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_constraint where "oid" = ${Segment.paramSegment(oid)(PgConstraintId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgConstraintFields, PgConstraintRow] = {
    DeleteBuilder("pg_catalog.pg_constraint", PgConstraintFields)
  }
  override def insert(unsaved: PgConstraintRow): ZIO[ZConnection, Throwable, PgConstraintRow] = {
    sql"""insert into pg_catalog.pg_constraint("oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin")
          values (${Segment.paramSegment(unsaved.oid)(PgConstraintId.setter)}::oid, ${Segment.paramSegment(unsaved.conname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.connamespace)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.contype)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.condeferrable)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.condeferred)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.convalidated)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.conrelid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.contypid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.conindid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.conparentid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.confrelid)(Setter.longSetter)}::oid, ${Segment.paramSegment(unsaved.confupdtype)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.confdeltype)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.confmatchtype)(Setter.stringSetter)}::char, ${Segment.paramSegment(unsaved.conislocal)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.coninhcount)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.connoinherit)(Setter.booleanSetter)}, ${Segment.paramSegment(unsaved.conkey)(Setter.optionParamSetter(TypoShort.arraySetter))}::_int2, ${Segment.paramSegment(unsaved.confkey)(Setter.optionParamSetter(TypoShort.arraySetter))}::_int2, ${Segment.paramSegment(unsaved.conpfeqop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid, ${Segment.paramSegment(unsaved.conppeqop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid, ${Segment.paramSegment(unsaved.conffeqop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid, ${Segment.paramSegment(unsaved.conexclop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid, ${Segment.paramSegment(unsaved.conbin)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree)
          returning "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin"
       """.insertReturning(PgConstraintRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgConstraintFields, PgConstraintRow] = {
    SelectBuilderSql("pg_catalog.pg_constraint", PgConstraintFields, PgConstraintRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgConstraintRow] = {
    sql"""select "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin" from pg_catalog.pg_constraint""".query(PgConstraintRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgConstraintId): ZIO[ZConnection, Throwable, Option[PgConstraintRow]] = {
    sql"""select "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin" from pg_catalog.pg_constraint where "oid" = ${Segment.paramSegment(oid)(PgConstraintId.setter)}""".query(PgConstraintRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgConstraintId]): ZStream[ZConnection, Throwable, PgConstraintRow] = {
    sql"""select "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin" from pg_catalog.pg_constraint where "oid" = ANY(${Segment.paramSegment(oids)(PgConstraintId.arraySetter)})""".query(PgConstraintRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(conrelid: /* oid */ Long, contypid: /* oid */ Long, conname: String): ZIO[ZConnection, Throwable, Option[PgConstraintRow]] = {
    sql"""select "conrelid", "contypid", "conname"
          from pg_catalog.pg_constraint
          where "conrelid" = ${Segment.paramSegment(conrelid)(Setter.longSetter)} AND "contypid" = ${Segment.paramSegment(contypid)(Setter.longSetter)} AND "conname" = ${Segment.paramSegment(conname)(Setter.stringSetter)}
       """.query(PgConstraintRow.jdbcDecoder).selectOne
  }
  override def update(row: PgConstraintRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_constraint
          set "conname" = ${Segment.paramSegment(row.conname)(Setter.stringSetter)}::name,
              "connamespace" = ${Segment.paramSegment(row.connamespace)(Setter.longSetter)}::oid,
              "contype" = ${Segment.paramSegment(row.contype)(Setter.stringSetter)}::char,
              "condeferrable" = ${Segment.paramSegment(row.condeferrable)(Setter.booleanSetter)},
              "condeferred" = ${Segment.paramSegment(row.condeferred)(Setter.booleanSetter)},
              "convalidated" = ${Segment.paramSegment(row.convalidated)(Setter.booleanSetter)},
              "conrelid" = ${Segment.paramSegment(row.conrelid)(Setter.longSetter)}::oid,
              "contypid" = ${Segment.paramSegment(row.contypid)(Setter.longSetter)}::oid,
              "conindid" = ${Segment.paramSegment(row.conindid)(Setter.longSetter)}::oid,
              "conparentid" = ${Segment.paramSegment(row.conparentid)(Setter.longSetter)}::oid,
              "confrelid" = ${Segment.paramSegment(row.confrelid)(Setter.longSetter)}::oid,
              "confupdtype" = ${Segment.paramSegment(row.confupdtype)(Setter.stringSetter)}::char,
              "confdeltype" = ${Segment.paramSegment(row.confdeltype)(Setter.stringSetter)}::char,
              "confmatchtype" = ${Segment.paramSegment(row.confmatchtype)(Setter.stringSetter)}::char,
              "conislocal" = ${Segment.paramSegment(row.conislocal)(Setter.booleanSetter)},
              "coninhcount" = ${Segment.paramSegment(row.coninhcount)(Setter.intSetter)}::int4,
              "connoinherit" = ${Segment.paramSegment(row.connoinherit)(Setter.booleanSetter)},
              "conkey" = ${Segment.paramSegment(row.conkey)(Setter.optionParamSetter(TypoShort.arraySetter))}::_int2,
              "confkey" = ${Segment.paramSegment(row.confkey)(Setter.optionParamSetter(TypoShort.arraySetter))}::_int2,
              "conpfeqop" = ${Segment.paramSegment(row.conpfeqop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
              "conppeqop" = ${Segment.paramSegment(row.conppeqop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
              "conffeqop" = ${Segment.paramSegment(row.conffeqop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
              "conexclop" = ${Segment.paramSegment(row.conexclop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
              "conbin" = ${Segment.paramSegment(row.conbin)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree
          where "oid" = ${Segment.paramSegment(oid)(PgConstraintId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgConstraintFields, PgConstraintRow] = {
    UpdateBuilder("pg_catalog.pg_constraint", PgConstraintFields, PgConstraintRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgConstraintRow): ZIO[ZConnection, Throwable, UpdateResult[PgConstraintRow]] = {
    sql"""insert into pg_catalog.pg_constraint("oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgConstraintId.setter)}::oid,
            ${Segment.paramSegment(unsaved.conname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.connamespace)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.contype)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.condeferrable)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.condeferred)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.convalidated)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.conrelid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.contypid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.conindid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.conparentid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.confrelid)(Setter.longSetter)}::oid,
            ${Segment.paramSegment(unsaved.confupdtype)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.confdeltype)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.confmatchtype)(Setter.stringSetter)}::char,
            ${Segment.paramSegment(unsaved.conislocal)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.coninhcount)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.connoinherit)(Setter.booleanSetter)},
            ${Segment.paramSegment(unsaved.conkey)(Setter.optionParamSetter(TypoShort.arraySetter))}::_int2,
            ${Segment.paramSegment(unsaved.confkey)(Setter.optionParamSetter(TypoShort.arraySetter))}::_int2,
            ${Segment.paramSegment(unsaved.conpfeqop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
            ${Segment.paramSegment(unsaved.conppeqop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
            ${Segment.paramSegment(unsaved.conffeqop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
            ${Segment.paramSegment(unsaved.conexclop)(Setter.optionParamSetter(adventureworks.LongArraySetter))}::_oid,
            ${Segment.paramSegment(unsaved.conbin)(Setter.optionParamSetter(TypoPgNodeTree.setter))}::pg_node_tree
          )
          on conflict ("oid")
          do update set
            "conname" = EXCLUDED."conname",
            "connamespace" = EXCLUDED."connamespace",
            "contype" = EXCLUDED."contype",
            "condeferrable" = EXCLUDED."condeferrable",
            "condeferred" = EXCLUDED."condeferred",
            "convalidated" = EXCLUDED."convalidated",
            "conrelid" = EXCLUDED."conrelid",
            "contypid" = EXCLUDED."contypid",
            "conindid" = EXCLUDED."conindid",
            "conparentid" = EXCLUDED."conparentid",
            "confrelid" = EXCLUDED."confrelid",
            "confupdtype" = EXCLUDED."confupdtype",
            "confdeltype" = EXCLUDED."confdeltype",
            "confmatchtype" = EXCLUDED."confmatchtype",
            "conislocal" = EXCLUDED."conislocal",
            "coninhcount" = EXCLUDED."coninhcount",
            "connoinherit" = EXCLUDED."connoinherit",
            "conkey" = EXCLUDED."conkey",
            "confkey" = EXCLUDED."confkey",
            "conpfeqop" = EXCLUDED."conpfeqop",
            "conppeqop" = EXCLUDED."conppeqop",
            "conffeqop" = EXCLUDED."conffeqop",
            "conexclop" = EXCLUDED."conexclop",
            "conbin" = EXCLUDED."conbin"
          returning "oid", "conname", "connamespace", "contype", "condeferrable", "condeferred", "convalidated", "conrelid", "contypid", "conindid", "conparentid", "confrelid", "confupdtype", "confdeltype", "confmatchtype", "conislocal", "coninhcount", "connoinherit", "conkey", "confkey", "conpfeqop", "conppeqop", "conffeqop", "conexclop", "conbin"""".insertReturning(PgConstraintRow.jdbcDecoder)
  }
}
