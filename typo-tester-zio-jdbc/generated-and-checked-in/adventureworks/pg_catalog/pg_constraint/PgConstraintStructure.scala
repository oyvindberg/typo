/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_constraint

import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgConstraintStructure[Row](val prefix: Option[String], val extract: Row => PgConstraintRow, val merge: (Row, PgConstraintRow) => Row)
  extends Relation[PgConstraintFields, PgConstraintRow, Row]
    with PgConstraintFields[Row] { outer =>

  override val oid = new IdField[PgConstraintId, Row](prefix, "oid", None, Some("oid"))(x => extract(x).oid, (row, value) => merge(row, extract(row).copy(oid = value)))
  override val conname = new Field[String, Row](prefix, "conname", None, Some("name"))(x => extract(x).conname, (row, value) => merge(row, extract(row).copy(conname = value)))
  override val connamespace = new Field[/* oid */ Long, Row](prefix, "connamespace", None, Some("oid"))(x => extract(x).connamespace, (row, value) => merge(row, extract(row).copy(connamespace = value)))
  override val contype = new Field[String, Row](prefix, "contype", None, Some("char"))(x => extract(x).contype, (row, value) => merge(row, extract(row).copy(contype = value)))
  override val condeferrable = new Field[Boolean, Row](prefix, "condeferrable", None, None)(x => extract(x).condeferrable, (row, value) => merge(row, extract(row).copy(condeferrable = value)))
  override val condeferred = new Field[Boolean, Row](prefix, "condeferred", None, None)(x => extract(x).condeferred, (row, value) => merge(row, extract(row).copy(condeferred = value)))
  override val convalidated = new Field[Boolean, Row](prefix, "convalidated", None, None)(x => extract(x).convalidated, (row, value) => merge(row, extract(row).copy(convalidated = value)))
  override val conrelid = new Field[/* oid */ Long, Row](prefix, "conrelid", None, Some("oid"))(x => extract(x).conrelid, (row, value) => merge(row, extract(row).copy(conrelid = value)))
  override val contypid = new Field[/* oid */ Long, Row](prefix, "contypid", None, Some("oid"))(x => extract(x).contypid, (row, value) => merge(row, extract(row).copy(contypid = value)))
  override val conindid = new Field[/* oid */ Long, Row](prefix, "conindid", None, Some("oid"))(x => extract(x).conindid, (row, value) => merge(row, extract(row).copy(conindid = value)))
  override val conparentid = new Field[/* oid */ Long, Row](prefix, "conparentid", None, Some("oid"))(x => extract(x).conparentid, (row, value) => merge(row, extract(row).copy(conparentid = value)))
  override val confrelid = new Field[/* oid */ Long, Row](prefix, "confrelid", None, Some("oid"))(x => extract(x).confrelid, (row, value) => merge(row, extract(row).copy(confrelid = value)))
  override val confupdtype = new Field[String, Row](prefix, "confupdtype", None, Some("char"))(x => extract(x).confupdtype, (row, value) => merge(row, extract(row).copy(confupdtype = value)))
  override val confdeltype = new Field[String, Row](prefix, "confdeltype", None, Some("char"))(x => extract(x).confdeltype, (row, value) => merge(row, extract(row).copy(confdeltype = value)))
  override val confmatchtype = new Field[String, Row](prefix, "confmatchtype", None, Some("char"))(x => extract(x).confmatchtype, (row, value) => merge(row, extract(row).copy(confmatchtype = value)))
  override val conislocal = new Field[Boolean, Row](prefix, "conislocal", None, None)(x => extract(x).conislocal, (row, value) => merge(row, extract(row).copy(conislocal = value)))
  override val coninhcount = new Field[Int, Row](prefix, "coninhcount", None, Some("int4"))(x => extract(x).coninhcount, (row, value) => merge(row, extract(row).copy(coninhcount = value)))
  override val connoinherit = new Field[Boolean, Row](prefix, "connoinherit", None, None)(x => extract(x).connoinherit, (row, value) => merge(row, extract(row).copy(connoinherit = value)))
  override val conkey = new OptField[Array[TypoShort], Row](prefix, "conkey", None, Some("_int2"))(x => extract(x).conkey, (row, value) => merge(row, extract(row).copy(conkey = value)))
  override val confkey = new OptField[Array[TypoShort], Row](prefix, "confkey", None, Some("_int2"))(x => extract(x).confkey, (row, value) => merge(row, extract(row).copy(confkey = value)))
  override val conpfeqop = new OptField[Array[/* oid */ Long], Row](prefix, "conpfeqop", None, Some("_oid"))(x => extract(x).conpfeqop, (row, value) => merge(row, extract(row).copy(conpfeqop = value)))
  override val conppeqop = new OptField[Array[/* oid */ Long], Row](prefix, "conppeqop", None, Some("_oid"))(x => extract(x).conppeqop, (row, value) => merge(row, extract(row).copy(conppeqop = value)))
  override val conffeqop = new OptField[Array[/* oid */ Long], Row](prefix, "conffeqop", None, Some("_oid"))(x => extract(x).conffeqop, (row, value) => merge(row, extract(row).copy(conffeqop = value)))
  override val conexclop = new OptField[Array[/* oid */ Long], Row](prefix, "conexclop", None, Some("_oid"))(x => extract(x).conexclop, (row, value) => merge(row, extract(row).copy(conexclop = value)))
  override val conbin = new OptField[TypoPgNodeTree, Row](prefix, "conbin", None, Some("pg_node_tree"))(x => extract(x).conbin, (row, value) => merge(row, extract(row).copy(conbin = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](oid, conname, connamespace, contype, condeferrable, condeferred, convalidated, conrelid, contypid, conindid, conparentid, confrelid, confupdtype, confdeltype, confmatchtype, conislocal, coninhcount, connoinherit, conkey, confkey, conpfeqop, conppeqop, conffeqop, conexclop, conbin)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgConstraintRow, merge: (NewRow, PgConstraintRow) => NewRow): PgConstraintStructure[NewRow] =
    new PgConstraintStructure(prefix, extract, merge)
}
