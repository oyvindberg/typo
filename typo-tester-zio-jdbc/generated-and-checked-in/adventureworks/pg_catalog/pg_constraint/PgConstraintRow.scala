/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_constraint

import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgConstraintRow(
  oid: PgConstraintId,
  conname: String,
  connamespace: /* oid */ Long,
  contype: String,
  condeferrable: Boolean,
  condeferred: Boolean,
  convalidated: Boolean,
  conrelid: /* oid */ Long,
  contypid: /* oid */ Long,
  conindid: /* oid */ Long,
  conparentid: /* oid */ Long,
  confrelid: /* oid */ Long,
  confupdtype: String,
  confdeltype: String,
  confmatchtype: String,
  conislocal: Boolean,
  coninhcount: Int,
  connoinherit: Boolean,
  conkey: Option[Array[TypoShort]],
  confkey: Option[Array[TypoShort]],
  conpfeqop: Option[Array[/* oid */ Long]],
  conppeqop: Option[Array[/* oid */ Long]],
  conffeqop: Option[Array[/* oid */ Long]],
  conexclop: Option[Array[/* oid */ Long]],
  conbin: Option[TypoPgNodeTree]
)

object PgConstraintRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgConstraintRow] = new JdbcDecoder[PgConstraintRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgConstraintRow) =
      columIndex + 24 ->
        PgConstraintRow(
          oid = PgConstraintId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          conname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          connamespace = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          contype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          condeferrable = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 4, rs)._2,
          condeferred = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 5, rs)._2,
          convalidated = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 6, rs)._2,
          conrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 7, rs)._2,
          contypid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 8, rs)._2,
          conindid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 9, rs)._2,
          conparentid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 10, rs)._2,
          confrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 11, rs)._2,
          confupdtype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 12, rs)._2,
          confdeltype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 13, rs)._2,
          confmatchtype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 14, rs)._2,
          conislocal = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 15, rs)._2,
          coninhcount = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 16, rs)._2,
          connoinherit = JdbcDecoder.booleanDecoder.unsafeDecode(columIndex + 17, rs)._2,
          conkey = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoShort]]).unsafeDecode(columIndex + 18, rs)._2,
          confkey = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoShort]]).unsafeDecode(columIndex + 19, rs)._2,
          conpfeqop = JdbcDecoder.optionDecoder(adventureworks.LongArrayDecoder).unsafeDecode(columIndex + 20, rs)._2,
          conppeqop = JdbcDecoder.optionDecoder(adventureworks.LongArrayDecoder).unsafeDecode(columIndex + 21, rs)._2,
          conffeqop = JdbcDecoder.optionDecoder(adventureworks.LongArrayDecoder).unsafeDecode(columIndex + 22, rs)._2,
          conexclop = JdbcDecoder.optionDecoder(adventureworks.LongArrayDecoder).unsafeDecode(columIndex + 23, rs)._2,
          conbin = JdbcDecoder.optionDecoder(TypoPgNodeTree.jdbcDecoder).unsafeDecode(columIndex + 24, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgConstraintRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgConstraintId.jsonDecoder))
    val conname = jsonObj.get("conname").toRight("Missing field 'conname'").flatMap(_.as(JsonDecoder.string))
    val connamespace = jsonObj.get("connamespace").toRight("Missing field 'connamespace'").flatMap(_.as(JsonDecoder.long))
    val contype = jsonObj.get("contype").toRight("Missing field 'contype'").flatMap(_.as(JsonDecoder.string))
    val condeferrable = jsonObj.get("condeferrable").toRight("Missing field 'condeferrable'").flatMap(_.as(JsonDecoder.boolean))
    val condeferred = jsonObj.get("condeferred").toRight("Missing field 'condeferred'").flatMap(_.as(JsonDecoder.boolean))
    val convalidated = jsonObj.get("convalidated").toRight("Missing field 'convalidated'").flatMap(_.as(JsonDecoder.boolean))
    val conrelid = jsonObj.get("conrelid").toRight("Missing field 'conrelid'").flatMap(_.as(JsonDecoder.long))
    val contypid = jsonObj.get("contypid").toRight("Missing field 'contypid'").flatMap(_.as(JsonDecoder.long))
    val conindid = jsonObj.get("conindid").toRight("Missing field 'conindid'").flatMap(_.as(JsonDecoder.long))
    val conparentid = jsonObj.get("conparentid").toRight("Missing field 'conparentid'").flatMap(_.as(JsonDecoder.long))
    val confrelid = jsonObj.get("confrelid").toRight("Missing field 'confrelid'").flatMap(_.as(JsonDecoder.long))
    val confupdtype = jsonObj.get("confupdtype").toRight("Missing field 'confupdtype'").flatMap(_.as(JsonDecoder.string))
    val confdeltype = jsonObj.get("confdeltype").toRight("Missing field 'confdeltype'").flatMap(_.as(JsonDecoder.string))
    val confmatchtype = jsonObj.get("confmatchtype").toRight("Missing field 'confmatchtype'").flatMap(_.as(JsonDecoder.string))
    val conislocal = jsonObj.get("conislocal").toRight("Missing field 'conislocal'").flatMap(_.as(JsonDecoder.boolean))
    val coninhcount = jsonObj.get("coninhcount").toRight("Missing field 'coninhcount'").flatMap(_.as(JsonDecoder.int))
    val connoinherit = jsonObj.get("connoinherit").toRight("Missing field 'connoinherit'").flatMap(_.as(JsonDecoder.boolean))
    val conkey = jsonObj.get("conkey").fold[Either[String, Option[Array[TypoShort]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoShort](TypoShort.jsonDecoder, implicitly))))
    val confkey = jsonObj.get("confkey").fold[Either[String, Option[Array[TypoShort]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoShort](TypoShort.jsonDecoder, implicitly))))
    val conpfeqop = jsonObj.get("conpfeqop").fold[Either[String, Option[Array[Long]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Long](JsonDecoder.long, implicitly))))
    val conppeqop = jsonObj.get("conppeqop").fold[Either[String, Option[Array[Long]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Long](JsonDecoder.long, implicitly))))
    val conffeqop = jsonObj.get("conffeqop").fold[Either[String, Option[Array[Long]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Long](JsonDecoder.long, implicitly))))
    val conexclop = jsonObj.get("conexclop").fold[Either[String, Option[Array[Long]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Long](JsonDecoder.long, implicitly))))
    val conbin = jsonObj.get("conbin").fold[Either[String, Option[TypoPgNodeTree]]](Right(None))(_.as(JsonDecoder.option(TypoPgNodeTree.jsonDecoder)))
    if (oid.isRight && conname.isRight && connamespace.isRight && contype.isRight && condeferrable.isRight && condeferred.isRight && convalidated.isRight && conrelid.isRight && contypid.isRight && conindid.isRight && conparentid.isRight && confrelid.isRight && confupdtype.isRight && confdeltype.isRight && confmatchtype.isRight && conislocal.isRight && coninhcount.isRight && connoinherit.isRight && conkey.isRight && confkey.isRight && conpfeqop.isRight && conppeqop.isRight && conffeqop.isRight && conexclop.isRight && conbin.isRight)
      Right(PgConstraintRow(oid = oid.toOption.get, conname = conname.toOption.get, connamespace = connamespace.toOption.get, contype = contype.toOption.get, condeferrable = condeferrable.toOption.get, condeferred = condeferred.toOption.get, convalidated = convalidated.toOption.get, conrelid = conrelid.toOption.get, contypid = contypid.toOption.get, conindid = conindid.toOption.get, conparentid = conparentid.toOption.get, confrelid = confrelid.toOption.get, confupdtype = confupdtype.toOption.get, confdeltype = confdeltype.toOption.get, confmatchtype = confmatchtype.toOption.get, conislocal = conislocal.toOption.get, coninhcount = coninhcount.toOption.get, connoinherit = connoinherit.toOption.get, conkey = conkey.toOption.get, confkey = confkey.toOption.get, conpfeqop = conpfeqop.toOption.get, conppeqop = conppeqop.toOption.get, conffeqop = conffeqop.toOption.get, conexclop = conexclop.toOption.get, conbin = conbin.toOption.get))
    else Left(List[Either[String, Any]](oid, conname, connamespace, contype, condeferrable, condeferred, convalidated, conrelid, contypid, conindid, conparentid, confrelid, confupdtype, confdeltype, confmatchtype, conislocal, coninhcount, connoinherit, conkey, confkey, conpfeqop, conppeqop, conffeqop, conexclop, conbin).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgConstraintRow] = new JsonEncoder[PgConstraintRow] {
    override def unsafeEncode(a: PgConstraintRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgConstraintId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""conname":""")
      JsonEncoder.string.unsafeEncode(a.conname, indent, out)
      out.write(",")
      out.write(""""connamespace":""")
      JsonEncoder.long.unsafeEncode(a.connamespace, indent, out)
      out.write(",")
      out.write(""""contype":""")
      JsonEncoder.string.unsafeEncode(a.contype, indent, out)
      out.write(",")
      out.write(""""condeferrable":""")
      JsonEncoder.boolean.unsafeEncode(a.condeferrable, indent, out)
      out.write(",")
      out.write(""""condeferred":""")
      JsonEncoder.boolean.unsafeEncode(a.condeferred, indent, out)
      out.write(",")
      out.write(""""convalidated":""")
      JsonEncoder.boolean.unsafeEncode(a.convalidated, indent, out)
      out.write(",")
      out.write(""""conrelid":""")
      JsonEncoder.long.unsafeEncode(a.conrelid, indent, out)
      out.write(",")
      out.write(""""contypid":""")
      JsonEncoder.long.unsafeEncode(a.contypid, indent, out)
      out.write(",")
      out.write(""""conindid":""")
      JsonEncoder.long.unsafeEncode(a.conindid, indent, out)
      out.write(",")
      out.write(""""conparentid":""")
      JsonEncoder.long.unsafeEncode(a.conparentid, indent, out)
      out.write(",")
      out.write(""""confrelid":""")
      JsonEncoder.long.unsafeEncode(a.confrelid, indent, out)
      out.write(",")
      out.write(""""confupdtype":""")
      JsonEncoder.string.unsafeEncode(a.confupdtype, indent, out)
      out.write(",")
      out.write(""""confdeltype":""")
      JsonEncoder.string.unsafeEncode(a.confdeltype, indent, out)
      out.write(",")
      out.write(""""confmatchtype":""")
      JsonEncoder.string.unsafeEncode(a.confmatchtype, indent, out)
      out.write(",")
      out.write(""""conislocal":""")
      JsonEncoder.boolean.unsafeEncode(a.conislocal, indent, out)
      out.write(",")
      out.write(""""coninhcount":""")
      JsonEncoder.int.unsafeEncode(a.coninhcount, indent, out)
      out.write(",")
      out.write(""""connoinherit":""")
      JsonEncoder.boolean.unsafeEncode(a.connoinherit, indent, out)
      out.write(",")
      out.write(""""conkey":""")
      JsonEncoder.option(JsonEncoder.array[TypoShort](TypoShort.jsonEncoder, implicitly)).unsafeEncode(a.conkey, indent, out)
      out.write(",")
      out.write(""""confkey":""")
      JsonEncoder.option(JsonEncoder.array[TypoShort](TypoShort.jsonEncoder, implicitly)).unsafeEncode(a.confkey, indent, out)
      out.write(",")
      out.write(""""conpfeqop":""")
      JsonEncoder.option(JsonEncoder.array[Long](JsonEncoder.long, implicitly)).unsafeEncode(a.conpfeqop, indent, out)
      out.write(",")
      out.write(""""conppeqop":""")
      JsonEncoder.option(JsonEncoder.array[Long](JsonEncoder.long, implicitly)).unsafeEncode(a.conppeqop, indent, out)
      out.write(",")
      out.write(""""conffeqop":""")
      JsonEncoder.option(JsonEncoder.array[Long](JsonEncoder.long, implicitly)).unsafeEncode(a.conffeqop, indent, out)
      out.write(",")
      out.write(""""conexclop":""")
      JsonEncoder.option(JsonEncoder.array[Long](JsonEncoder.long, implicitly)).unsafeEncode(a.conexclop, indent, out)
      out.write(",")
      out.write(""""conbin":""")
      JsonEncoder.option(TypoPgNodeTree.jsonEncoder).unsafeEncode(a.conbin, indent, out)
      out.write("}")
    }
  }
}
