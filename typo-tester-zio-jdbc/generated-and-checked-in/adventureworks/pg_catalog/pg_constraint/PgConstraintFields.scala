/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_constraint

import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField

trait PgConstraintFields[Row] {
  val oid: IdField[PgConstraintId, Row]
  val conname: Field[String, Row]
  val connamespace: Field[/* oid */ Long, Row]
  val contype: Field[String, Row]
  val condeferrable: Field[Boolean, Row]
  val condeferred: Field[Boolean, Row]
  val convalidated: Field[Boolean, Row]
  val conrelid: Field[/* oid */ Long, Row]
  val contypid: Field[/* oid */ Long, Row]
  val conindid: Field[/* oid */ Long, Row]
  val conparentid: Field[/* oid */ Long, Row]
  val confrelid: Field[/* oid */ Long, Row]
  val confupdtype: Field[String, Row]
  val confdeltype: Field[String, Row]
  val confmatchtype: Field[String, Row]
  val conislocal: Field[Boolean, Row]
  val coninhcount: Field[Int, Row]
  val connoinherit: Field[Boolean, Row]
  val conkey: OptField[Array[TypoShort], Row]
  val confkey: OptField[Array[TypoShort], Row]
  val conpfeqop: OptField[Array[/* oid */ Long], Row]
  val conppeqop: OptField[Array[/* oid */ Long], Row]
  val conffeqop: OptField[Array[/* oid */ Long], Row]
  val conexclop: OptField[Array[/* oid */ Long], Row]
  val conbin: OptField[TypoPgNodeTree, Row]
}
object PgConstraintFields extends PgConstraintStructure[PgConstraintRow](None, identity, (_, x) => x)

