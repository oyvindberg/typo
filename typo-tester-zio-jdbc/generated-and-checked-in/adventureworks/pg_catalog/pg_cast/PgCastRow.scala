/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_cast

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgCastRow(
  oid: PgCastId,
  castsource: /* oid */ Long,
  casttarget: /* oid */ Long,
  castfunc: /* oid */ Long,
  castcontext: String,
  castmethod: String
)

object PgCastRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgCastRow] = new JdbcDecoder[PgCastRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgCastRow) =
      columIndex + 5 ->
        PgCastRow(
          oid = PgCastId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          castsource = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          casttarget = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          castfunc = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 3, rs)._2,
          castcontext = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 4, rs)._2,
          castmethod = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgCastRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgCastId.jsonDecoder))
    val castsource = jsonObj.get("castsource").toRight("Missing field 'castsource'").flatMap(_.as(JsonDecoder.long))
    val casttarget = jsonObj.get("casttarget").toRight("Missing field 'casttarget'").flatMap(_.as(JsonDecoder.long))
    val castfunc = jsonObj.get("castfunc").toRight("Missing field 'castfunc'").flatMap(_.as(JsonDecoder.long))
    val castcontext = jsonObj.get("castcontext").toRight("Missing field 'castcontext'").flatMap(_.as(JsonDecoder.string))
    val castmethod = jsonObj.get("castmethod").toRight("Missing field 'castmethod'").flatMap(_.as(JsonDecoder.string))
    if (oid.isRight && castsource.isRight && casttarget.isRight && castfunc.isRight && castcontext.isRight && castmethod.isRight)
      Right(PgCastRow(oid = oid.toOption.get, castsource = castsource.toOption.get, casttarget = casttarget.toOption.get, castfunc = castfunc.toOption.get, castcontext = castcontext.toOption.get, castmethod = castmethod.toOption.get))
    else Left(List[Either[String, Any]](oid, castsource, casttarget, castfunc, castcontext, castmethod).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgCastRow] = new JsonEncoder[PgCastRow] {
    override def unsafeEncode(a: PgCastRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgCastId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""castsource":""")
      JsonEncoder.long.unsafeEncode(a.castsource, indent, out)
      out.write(",")
      out.write(""""casttarget":""")
      JsonEncoder.long.unsafeEncode(a.casttarget, indent, out)
      out.write(",")
      out.write(""""castfunc":""")
      JsonEncoder.long.unsafeEncode(a.castfunc, indent, out)
      out.write(",")
      out.write(""""castcontext":""")
      JsonEncoder.string.unsafeEncode(a.castcontext, indent, out)
      out.write(",")
      out.write(""""castmethod":""")
      JsonEncoder.string.unsafeEncode(a.castmethod, indent, out)
      out.write("}")
    }
  }
}
