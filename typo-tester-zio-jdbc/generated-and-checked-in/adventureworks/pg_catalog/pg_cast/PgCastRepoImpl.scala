/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_cast

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgCastRepoImpl extends PgCastRepo {
  override def delete(oid: PgCastId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_cast where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgCastFields, PgCastRow] = {
    DeleteBuilder("pg_catalog.pg_cast", PgCastFields)
  }
  override def insert(unsaved: PgCastRow): ZIO[ZConnection, Throwable, PgCastRow] = {
    sql"""insert into pg_catalog.pg_cast("oid", "castsource", "casttarget", "castfunc", "castcontext", "castmethod")
          values (???::oid, ???::oid, ???::oid, ???::oid, ???::char, ???::char)
          returning "oid", "castsource", "casttarget", "castfunc", "castcontext", "castmethod"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgCastFields, PgCastRow] = {
    SelectBuilderSql("pg_catalog.pg_cast", PgCastFields, PgCastRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgCastRow] = {
    sql"""select "oid", "castsource", "casttarget", "castfunc", "castcontext", "castmethod" from pg_catalog.pg_cast""".query[PgCastRow].selectStream
  }
  override def selectById(oid: PgCastId): ZIO[ZConnection, Throwable, Option[PgCastRow]] = {
    sql"""select "oid", "castsource", "casttarget", "castfunc", "castcontext", "castmethod" from pg_catalog.pg_cast where "oid" = ???""".query[PgCastRow].selectOne
  }
  override def selectByIds(oids: Array[PgCastId]): ZStream[ZConnection, Throwable, PgCastRow] = {
    sql"""select "oid", "castsource", "casttarget", "castfunc", "castcontext", "castmethod" from pg_catalog.pg_cast where "oid" = ANY(${oids})""".query[PgCastRow].selectStream
  }
  override def selectByUnique(castsource: /* oid */ Long, casttarget: /* oid */ Long): ZIO[ZConnection, Throwable, Option[PgCastRow]] = {
    sql"""select "castsource", "casttarget"
          from pg_catalog.pg_cast
          where "castsource" = ??? AND "casttarget" = ???
       """.query[PgCastRow].selectOne
  }
  override def update(row: PgCastRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_cast
          set "castsource" = ???::oid,
              "casttarget" = ???::oid,
              "castfunc" = ???::oid,
              "castcontext" = ???::char,
              "castmethod" = ???::char
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgCastFields, PgCastRow] = {
    UpdateBuilder("pg_catalog.pg_cast", PgCastFields, PgCastRow.read)
  }
  override def upsert(unsaved: PgCastRow): ZIO[ZConnection, Throwable, PgCastRow] = {
    sql"""insert into pg_catalog.pg_cast("oid", "castsource", "casttarget", "castfunc", "castcontext", "castmethod")
          values (
            ???::oid,
            ???::oid,
            ???::oid,
            ???::oid,
            ???::char,
            ???::char
          )
          on conflict ("oid")
          do update set
            "castsource" = EXCLUDED."castsource",
            "casttarget" = EXCLUDED."casttarget",
            "castfunc" = EXCLUDED."castfunc",
            "castcontext" = EXCLUDED."castcontext",
            "castmethod" = EXCLUDED."castmethod"
          returning "oid", "castsource", "casttarget", "castfunc", "castcontext", "castmethod"
       """.query(???).unique
  }
}
