/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_attrdef

import adventureworks.customtypes.TypoShort
import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgAttrdefRepoImpl extends PgAttrdefRepo {
  override def delete(oid: PgAttrdefId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_attrdef where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgAttrdefFields, PgAttrdefRow] = {
    DeleteBuilder("pg_catalog.pg_attrdef", PgAttrdefFields)
  }
  override def insert(unsaved: PgAttrdefRow): ZIO[ZConnection, Throwable, PgAttrdefRow] = {
    sql"""insert into pg_catalog.pg_attrdef("oid", "adrelid", "adnum", "adbin")
          values (???::oid, ???::oid, ???::int2, ???::pg_node_tree)
          returning "oid", "adrelid", "adnum", "adbin"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgAttrdefFields, PgAttrdefRow] = {
    SelectBuilderSql("pg_catalog.pg_attrdef", PgAttrdefFields, PgAttrdefRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgAttrdefRow] = {
    sql"""select "oid", "adrelid", "adnum", "adbin" from pg_catalog.pg_attrdef""".query[PgAttrdefRow].selectStream
  }
  override def selectById(oid: PgAttrdefId): ZIO[ZConnection, Throwable, Option[PgAttrdefRow]] = {
    sql"""select "oid", "adrelid", "adnum", "adbin" from pg_catalog.pg_attrdef where "oid" = ???""".query[PgAttrdefRow].selectOne
  }
  override def selectByIds(oids: Array[PgAttrdefId]): ZStream[ZConnection, Throwable, PgAttrdefRow] = {
    sql"""select "oid", "adrelid", "adnum", "adbin" from pg_catalog.pg_attrdef where "oid" = ANY(${oids})""".query[PgAttrdefRow].selectStream
  }
  override def selectByUnique(adrelid: /* oid */ Long, adnum: TypoShort): ZIO[ZConnection, Throwable, Option[PgAttrdefRow]] = {
    sql"""select "adrelid", "adnum"
          from pg_catalog.pg_attrdef
          where "adrelid" = ??? AND "adnum" = ???
       """.query[PgAttrdefRow].selectOne
  }
  override def update(row: PgAttrdefRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_attrdef
          set "adrelid" = ???::oid,
              "adnum" = ???::int2,
              "adbin" = ???::pg_node_tree
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgAttrdefFields, PgAttrdefRow] = {
    UpdateBuilder("pg_catalog.pg_attrdef", PgAttrdefFields, PgAttrdefRow.read)
  }
  override def upsert(unsaved: PgAttrdefRow): ZIO[ZConnection, Throwable, PgAttrdefRow] = {
    sql"""insert into pg_catalog.pg_attrdef("oid", "adrelid", "adnum", "adbin")
          values (
            ???::oid,
            ???::oid,
            ???::int2,
            ???::pg_node_tree
          )
          on conflict ("oid")
          do update set
            "adrelid" = EXCLUDED."adrelid",
            "adnum" = EXCLUDED."adnum",
            "adbin" = EXCLUDED."adbin"
          returning "oid", "adrelid", "adnum", "adbin"
       """.query(???).unique
  }
}
