/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_attrdef

import adventureworks.customtypes.TypoPgNodeTree
import adventureworks.customtypes.TypoShort
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgAttrdefRow(
  oid: PgAttrdefId,
  adrelid: /* oid */ Long,
  adnum: TypoShort,
  adbin: TypoPgNodeTree
)

object PgAttrdefRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgAttrdefRow] = new JdbcDecoder[PgAttrdefRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgAttrdefRow) =
      columIndex + 3 ->
        PgAttrdefRow(
          oid = PgAttrdefId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          adrelid = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 1, rs)._2,
          adnum = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          adbin = TypoPgNodeTree.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgAttrdefRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgAttrdefId.jsonDecoder))
    val adrelid = jsonObj.get("adrelid").toRight("Missing field 'adrelid'").flatMap(_.as(JsonDecoder.long))
    val adnum = jsonObj.get("adnum").toRight("Missing field 'adnum'").flatMap(_.as(TypoShort.jsonDecoder))
    val adbin = jsonObj.get("adbin").toRight("Missing field 'adbin'").flatMap(_.as(TypoPgNodeTree.jsonDecoder))
    if (oid.isRight && adrelid.isRight && adnum.isRight && adbin.isRight)
      Right(PgAttrdefRow(oid = oid.toOption.get, adrelid = adrelid.toOption.get, adnum = adnum.toOption.get, adbin = adbin.toOption.get))
    else Left(List[Either[String, Any]](oid, adrelid, adnum, adbin).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgAttrdefRow] = new JsonEncoder[PgAttrdefRow] {
    override def unsafeEncode(a: PgAttrdefRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgAttrdefId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""adrelid":""")
      JsonEncoder.long.unsafeEncode(a.adrelid, indent, out)
      out.write(",")
      out.write(""""adnum":""")
      TypoShort.jsonEncoder.unsafeEncode(a.adnum, indent, out)
      out.write(",")
      out.write(""""adbin":""")
      TypoPgNodeTree.jsonEncoder.unsafeEncode(a.adbin, indent, out)
      out.write("}")
    }
  }
}
