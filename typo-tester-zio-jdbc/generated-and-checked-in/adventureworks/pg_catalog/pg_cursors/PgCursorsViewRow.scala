/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_cursors

import adventureworks.customtypes.TypoInstant
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgCursorsViewRow(
  name: /* nullability unknown */ Option[String],
  statement: /* nullability unknown */ Option[String],
  isHoldable: /* nullability unknown */ Option[Boolean],
  isBinary: /* nullability unknown */ Option[Boolean],
  isScrollable: /* nullability unknown */ Option[Boolean],
  creationTime: /* nullability unknown */ Option[TypoInstant]
)

object PgCursorsViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgCursorsViewRow] = new JdbcDecoder[PgCursorsViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgCursorsViewRow) =
      columIndex + 5 ->
        PgCursorsViewRow(
          name = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 0, rs)._2,
          statement = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 1, rs)._2,
          isHoldable = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 2, rs)._2,
          isBinary = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 3, rs)._2,
          isScrollable = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 4, rs)._2,
          creationTime = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgCursorsViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val statement = jsonObj.get("statement").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val isHoldable = jsonObj.get("is_holdable").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val isBinary = jsonObj.get("is_binary").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val isScrollable = jsonObj.get("is_scrollable").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val creationTime = jsonObj.get("creation_time").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    if (name.isRight && statement.isRight && isHoldable.isRight && isBinary.isRight && isScrollable.isRight && creationTime.isRight)
      Right(PgCursorsViewRow(name = name.toOption.get, statement = statement.toOption.get, isHoldable = isHoldable.toOption.get, isBinary = isBinary.toOption.get, isScrollable = isScrollable.toOption.get, creationTime = creationTime.toOption.get))
    else Left(List[Either[String, Any]](name, statement, isHoldable, isBinary, isScrollable, creationTime).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgCursorsViewRow] = new JsonEncoder[PgCursorsViewRow] {
    override def unsafeEncode(a: PgCursorsViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""statement":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.statement, indent, out)
      out.write(",")
      out.write(""""is_holdable":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.isHoldable, indent, out)
      out.write(",")
      out.write(""""is_binary":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.isBinary, indent, out)
      out.write(",")
      out.write(""""is_scrollable":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.isScrollable, indent, out)
      out.write(",")
      out.write(""""creation_time":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.creationTime, indent, out)
      out.write("}")
    }
  }
}
