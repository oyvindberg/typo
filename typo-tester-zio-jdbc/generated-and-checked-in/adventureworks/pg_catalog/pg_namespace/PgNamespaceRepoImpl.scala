/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_namespace

import java.lang.Throwable
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlInterpolator
import zio.jdbc.ZConnection
import zio.stream.ZStream

object PgNamespaceRepoImpl extends PgNamespaceRepo {
  override def delete(oid: PgNamespaceId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_namespace where "oid" = ???""".update.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgNamespaceFields, PgNamespaceRow] = {
    DeleteBuilder("pg_catalog.pg_namespace", PgNamespaceFields)
  }
  override def insert(unsaved: PgNamespaceRow): ZIO[ZConnection, Throwable, PgNamespaceRow] = {
    sql"""insert into pg_catalog.pg_namespace("oid", "nspname", "nspowner", "nspacl")
          values (???::oid, ???::name, ???::oid, ???::_aclitem)
          returning "oid", "nspname", "nspowner", "nspacl"
       """.query(???).update.map(_ > 0)
  }
  override def select: SelectBuilder[PgNamespaceFields, PgNamespaceRow] = {
    SelectBuilderSql("pg_catalog.pg_namespace", PgNamespaceFields, PgNamespaceRow.read)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgNamespaceRow] = {
    sql"""select "oid", "nspname", "nspowner", "nspacl" from pg_catalog.pg_namespace""".query[PgNamespaceRow].selectStream
  }
  override def selectById(oid: PgNamespaceId): ZIO[ZConnection, Throwable, Option[PgNamespaceRow]] = {
    sql"""select "oid", "nspname", "nspowner", "nspacl" from pg_catalog.pg_namespace where "oid" = ???""".query[PgNamespaceRow].selectOne
  }
  override def selectByIds(oids: Array[PgNamespaceId]): ZStream[ZConnection, Throwable, PgNamespaceRow] = {
    sql"""select "oid", "nspname", "nspowner", "nspacl" from pg_catalog.pg_namespace where "oid" = ANY(${oids})""".query[PgNamespaceRow].selectStream
  }
  override def selectByUnique(nspname: String): ZIO[ZConnection, Throwable, Option[PgNamespaceRow]] = {
    sql"""select "nspname"
          from pg_catalog.pg_namespace
          where "nspname" = ???
       """.query[PgNamespaceRow].selectOne
  }
  override def update(row: PgNamespaceRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_namespace
          set "nspname" = ???::name,
              "nspowner" = ???::oid,
              "nspacl" = ???::_aclitem
          where "oid" = ???""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgNamespaceFields, PgNamespaceRow] = {
    UpdateBuilder("pg_catalog.pg_namespace", PgNamespaceFields, PgNamespaceRow.read)
  }
  override def upsert(unsaved: PgNamespaceRow): ZIO[ZConnection, Throwable, PgNamespaceRow] = {
    sql"""insert into pg_catalog.pg_namespace("oid", "nspname", "nspowner", "nspacl")
          values (
            ???::oid,
            ???::name,
            ???::oid,
            ???::_aclitem
          )
          on conflict ("oid")
          do update set
            "nspname" = EXCLUDED."nspname",
            "nspowner" = EXCLUDED."nspowner",
            "nspacl" = EXCLUDED."nspacl"
          returning "oid", "nspname", "nspowner", "nspacl"
       """.query(???).unique
  }
}
