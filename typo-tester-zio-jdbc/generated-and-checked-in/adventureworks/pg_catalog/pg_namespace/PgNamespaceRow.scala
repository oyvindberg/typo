/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_namespace

import adventureworks.customtypes.TypoAclItem
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgNamespaceRow(
  oid: PgNamespaceId,
  nspname: String,
  nspowner: /* oid */ Long,
  nspacl: Option[Array[TypoAclItem]]
)

object PgNamespaceRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgNamespaceRow] = new JdbcDecoder[PgNamespaceRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgNamespaceRow) =
      columIndex + 3 ->
        PgNamespaceRow(
          oid = PgNamespaceId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          nspname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          nspowner = JdbcDecoder.longDecoder.unsafeDecode(columIndex + 2, rs)._2,
          nspacl = JdbcDecoder.optionDecoder(JdbcDecoder[Array[TypoAclItem]]).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgNamespaceRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgNamespaceId.jsonDecoder))
    val nspname = jsonObj.get("nspname").toRight("Missing field 'nspname'").flatMap(_.as(JsonDecoder.string))
    val nspowner = jsonObj.get("nspowner").toRight("Missing field 'nspowner'").flatMap(_.as(JsonDecoder.long))
    val nspacl = jsonObj.get("nspacl").fold[Either[String, Option[Array[TypoAclItem]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[TypoAclItem](TypoAclItem.jsonDecoder, implicitly))))
    if (oid.isRight && nspname.isRight && nspowner.isRight && nspacl.isRight)
      Right(PgNamespaceRow(oid = oid.toOption.get, nspname = nspname.toOption.get, nspowner = nspowner.toOption.get, nspacl = nspacl.toOption.get))
    else Left(List[Either[String, Any]](oid, nspname, nspowner, nspacl).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgNamespaceRow] = new JsonEncoder[PgNamespaceRow] {
    override def unsafeEncode(a: PgNamespaceRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgNamespaceId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""nspname":""")
      JsonEncoder.string.unsafeEncode(a.nspname, indent, out)
      out.write(",")
      out.write(""""nspowner":""")
      JsonEncoder.long.unsafeEncode(a.nspowner, indent, out)
      out.write(",")
      out.write(""""nspacl":""")
      JsonEncoder.option(JsonEncoder.array[TypoAclItem](TypoAclItem.jsonEncoder, implicitly)).unsafeEncode(a.nspacl, indent, out)
      out.write("}")
    }
  }
}
