/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_ssl

import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatSslViewRow(
  pid: /* nullability unknown */ Option[Int],
  ssl: /* nullability unknown */ Option[Boolean],
  version: /* nullability unknown */ Option[String],
  cipher: /* nullability unknown */ Option[String],
  bits: /* nullability unknown */ Option[Int],
  clientDn: /* nullability unknown */ Option[String],
  clientSerial: /* nullability unknown */ Option[BigDecimal],
  issuerDn: /* nullability unknown */ Option[String]
)

object PgStatSslViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatSslViewRow] = new JdbcDecoder[PgStatSslViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatSslViewRow) =
      columIndex + 7 ->
        PgStatSslViewRow(
          pid = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 0, rs)._2,
          ssl = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 1, rs)._2,
          version = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          cipher = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          bits = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 4, rs)._2,
          clientDn = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          clientSerial = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 6, rs)._2,
          issuerDn = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatSslViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val pid = jsonObj.get("pid").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val ssl = jsonObj.get("ssl").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.boolean)))
    val version = jsonObj.get("version").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val cipher = jsonObj.get("cipher").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val bits = jsonObj.get("bits").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val clientDn = jsonObj.get("client_dn").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val clientSerial = jsonObj.get("client_serial").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.scalaBigDecimal)))
    val issuerDn = jsonObj.get("issuer_dn").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    if (pid.isRight && ssl.isRight && version.isRight && cipher.isRight && bits.isRight && clientDn.isRight && clientSerial.isRight && issuerDn.isRight)
      Right(PgStatSslViewRow(pid = pid.toOption.get, ssl = ssl.toOption.get, version = version.toOption.get, cipher = cipher.toOption.get, bits = bits.toOption.get, clientDn = clientDn.toOption.get, clientSerial = clientSerial.toOption.get, issuerDn = issuerDn.toOption.get))
    else Left(List[Either[String, Any]](pid, ssl, version, cipher, bits, clientDn, clientSerial, issuerDn).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatSslViewRow] = new JsonEncoder[PgStatSslViewRow] {
    override def unsafeEncode(a: PgStatSslViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""pid":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.pid, indent, out)
      out.write(",")
      out.write(""""ssl":""")
      JsonEncoder.option(JsonEncoder.boolean).unsafeEncode(a.ssl, indent, out)
      out.write(",")
      out.write(""""version":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.version, indent, out)
      out.write(",")
      out.write(""""cipher":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.cipher, indent, out)
      out.write(",")
      out.write(""""bits":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.bits, indent, out)
      out.write(",")
      out.write(""""client_dn":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.clientDn, indent, out)
      out.write(",")
      out.write(""""client_serial":""")
      JsonEncoder.option(JsonEncoder.scalaBigDecimal).unsafeEncode(a.clientSerial, indent, out)
      out.write(",")
      out.write(""""issuer_dn":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.issuerDn, indent, out)
      out.write("}")
    }
  }
}
