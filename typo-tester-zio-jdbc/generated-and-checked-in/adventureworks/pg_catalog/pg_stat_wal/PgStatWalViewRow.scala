/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_wal

import adventureworks.customtypes.TypoInstant
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatWalViewRow(
  walRecords: /* nullability unknown */ Option[Long],
  walFpi: /* nullability unknown */ Option[Long],
  walBytes: /* nullability unknown */ Option[BigDecimal],
  walBuffersFull: /* nullability unknown */ Option[Long],
  walWrite: /* nullability unknown */ Option[Long],
  walSync: /* nullability unknown */ Option[Long],
  walWriteTime: /* nullability unknown */ Option[Double],
  walSyncTime: /* nullability unknown */ Option[Double],
  statsReset: /* nullability unknown */ Option[TypoInstant]
)

object PgStatWalViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatWalViewRow] = new JdbcDecoder[PgStatWalViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatWalViewRow) =
      columIndex + 8 ->
        PgStatWalViewRow(
          walRecords = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 0, rs)._2,
          walFpi = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 1, rs)._2,
          walBytes = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 2, rs)._2,
          walBuffersFull = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 3, rs)._2,
          walWrite = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 4, rs)._2,
          walSync = JdbcDecoder.optionDecoder(JdbcDecoder.longDecoder).unsafeDecode(columIndex + 5, rs)._2,
          walWriteTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 6, rs)._2,
          walSyncTime = JdbcDecoder.optionDecoder(JdbcDecoder.doubleDecoder).unsafeDecode(columIndex + 7, rs)._2,
          statsReset = JdbcDecoder.optionDecoder(TypoInstant.jdbcDecoder).unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatWalViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val walRecords = jsonObj.get("wal_records").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val walFpi = jsonObj.get("wal_fpi").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val walBytes = jsonObj.get("wal_bytes").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.scalaBigDecimal)))
    val walBuffersFull = jsonObj.get("wal_buffers_full").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val walWrite = jsonObj.get("wal_write").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val walSync = jsonObj.get("wal_sync").fold[Either[String, Option[Long]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.long)))
    val walWriteTime = jsonObj.get("wal_write_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val walSyncTime = jsonObj.get("wal_sync_time").fold[Either[String, Option[Double]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.double)))
    val statsReset = jsonObj.get("stats_reset").fold[Either[String, Option[TypoInstant]]](Right(None))(_.as(JsonDecoder.option(TypoInstant.jsonDecoder)))
    if (walRecords.isRight && walFpi.isRight && walBytes.isRight && walBuffersFull.isRight && walWrite.isRight && walSync.isRight && walWriteTime.isRight && walSyncTime.isRight && statsReset.isRight)
      Right(PgStatWalViewRow(walRecords = walRecords.toOption.get, walFpi = walFpi.toOption.get, walBytes = walBytes.toOption.get, walBuffersFull = walBuffersFull.toOption.get, walWrite = walWrite.toOption.get, walSync = walSync.toOption.get, walWriteTime = walWriteTime.toOption.get, walSyncTime = walSyncTime.toOption.get, statsReset = statsReset.toOption.get))
    else Left(List[Either[String, Any]](walRecords, walFpi, walBytes, walBuffersFull, walWrite, walSync, walWriteTime, walSyncTime, statsReset).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatWalViewRow] = new JsonEncoder[PgStatWalViewRow] {
    override def unsafeEncode(a: PgStatWalViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""wal_records":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.walRecords, indent, out)
      out.write(",")
      out.write(""""wal_fpi":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.walFpi, indent, out)
      out.write(",")
      out.write(""""wal_bytes":""")
      JsonEncoder.option(JsonEncoder.scalaBigDecimal).unsafeEncode(a.walBytes, indent, out)
      out.write(",")
      out.write(""""wal_buffers_full":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.walBuffersFull, indent, out)
      out.write(",")
      out.write(""""wal_write":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.walWrite, indent, out)
      out.write(",")
      out.write(""""wal_sync":""")
      JsonEncoder.option(JsonEncoder.long).unsafeEncode(a.walSync, indent, out)
      out.write(",")
      out.write(""""wal_write_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.walWriteTime, indent, out)
      out.write(",")
      out.write(""""wal_sync_time":""")
      JsonEncoder.option(JsonEncoder.double).unsafeEncode(a.walSyncTime, indent, out)
      out.write(",")
      out.write(""""stats_reset":""")
      JsonEncoder.option(TypoInstant.jsonEncoder).unsafeEncode(a.statsReset, indent, out)
      out.write("}")
    }
  }
}
