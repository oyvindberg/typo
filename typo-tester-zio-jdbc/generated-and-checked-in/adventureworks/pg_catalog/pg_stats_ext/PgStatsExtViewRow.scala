/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stats_ext

import adventureworks.customtypes.TypoUnknownPgDependencies
import adventureworks.customtypes.TypoUnknownPgNdistinct
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgStatsExtViewRow(
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  schemaname: String,
  /** Points to [[pg_class.PgClassRow.relname]] */
  tablename: String,
  /** Points to [[pg_namespace.PgNamespaceRow.nspname]] */
  statisticsSchemaname: Option[String],
  /** Points to [[pg_statistic_ext.PgStatisticExtRow.stxname]] */
  statisticsName: String,
  statisticsOwner: /* nullability unknown */ Option[String],
  attnames: /* nullability unknown */ Option[Array[String]],
  exprs: /* nullability unknown */ Option[Array[String]],
  /** Points to [[pg_statistic_ext.PgStatisticExtRow.stxkind]] */
  kinds: Array[String],
  /** Points to [[pg_statistic_ext_data.PgStatisticExtDataRow.stxdndistinct]] */
  nDistinct: Option[TypoUnknownPgNdistinct],
  /** Points to [[pg_statistic_ext_data.PgStatisticExtDataRow.stxddependencies]] */
  dependencies: Option[TypoUnknownPgDependencies],
  mostCommonVals: /* nullability unknown */ Option[Array[String]],
  mostCommonValNulls: /* nullability unknown */ Option[Array[Boolean]],
  mostCommonFreqs: /* nullability unknown */ Option[Array[Double]],
  mostCommonBaseFreqs: /* nullability unknown */ Option[Array[Double]]
)

object PgStatsExtViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgStatsExtViewRow] = new JdbcDecoder[PgStatsExtViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgStatsExtViewRow) =
      columIndex + 13 ->
        PgStatsExtViewRow(
          schemaname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 0, rs)._2,
          tablename = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          statisticsSchemaname = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          statisticsName = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          statisticsOwner = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          attnames = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 5, rs)._2,
          exprs = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 6, rs)._2,
          kinds = adventureworks.StringArrayDecoder.unsafeDecode(columIndex + 7, rs)._2,
          nDistinct = JdbcDecoder.optionDecoder(TypoUnknownPgNdistinct.jdbcDecoder).unsafeDecode(columIndex + 8, rs)._2,
          dependencies = JdbcDecoder.optionDecoder(TypoUnknownPgDependencies.jdbcDecoder).unsafeDecode(columIndex + 9, rs)._2,
          mostCommonVals = JdbcDecoder.optionDecoder(adventureworks.StringArrayDecoder).unsafeDecode(columIndex + 10, rs)._2,
          mostCommonValNulls = JdbcDecoder.optionDecoder(adventureworks.BooleanArrayDecoder).unsafeDecode(columIndex + 11, rs)._2,
          mostCommonFreqs = JdbcDecoder.optionDecoder(adventureworks.DoubleArrayDecoder).unsafeDecode(columIndex + 12, rs)._2,
          mostCommonBaseFreqs = JdbcDecoder.optionDecoder(adventureworks.DoubleArrayDecoder).unsafeDecode(columIndex + 13, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgStatsExtViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val schemaname = jsonObj.get("schemaname").toRight("Missing field 'schemaname'").flatMap(_.as(JsonDecoder.string))
    val tablename = jsonObj.get("tablename").toRight("Missing field 'tablename'").flatMap(_.as(JsonDecoder.string))
    val statisticsSchemaname = jsonObj.get("statistics_schemaname").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val statisticsName = jsonObj.get("statistics_name").toRight("Missing field 'statistics_name'").flatMap(_.as(JsonDecoder.string))
    val statisticsOwner = jsonObj.get("statistics_owner").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val attnames = jsonObj.get("attnames").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val exprs = jsonObj.get("exprs").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val kinds = jsonObj.get("kinds").toRight("Missing field 'kinds'").flatMap(_.as(JsonDecoder.array[String](JsonDecoder.string, implicitly)))
    val nDistinct = jsonObj.get("n_distinct").fold[Either[String, Option[TypoUnknownPgNdistinct]]](Right(None))(_.as(JsonDecoder.option(TypoUnknownPgNdistinct.jsonDecoder)))
    val dependencies = jsonObj.get("dependencies").fold[Either[String, Option[TypoUnknownPgDependencies]]](Right(None))(_.as(JsonDecoder.option(TypoUnknownPgDependencies.jsonDecoder)))
    val mostCommonVals = jsonObj.get("most_common_vals").fold[Either[String, Option[Array[String]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[String](JsonDecoder.string, implicitly))))
    val mostCommonValNulls = jsonObj.get("most_common_val_nulls").fold[Either[String, Option[Array[Boolean]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Boolean](JsonDecoder.boolean, implicitly))))
    val mostCommonFreqs = jsonObj.get("most_common_freqs").fold[Either[String, Option[Array[Double]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Double](JsonDecoder.double, implicitly))))
    val mostCommonBaseFreqs = jsonObj.get("most_common_base_freqs").fold[Either[String, Option[Array[Double]]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.array[Double](JsonDecoder.double, implicitly))))
    if (schemaname.isRight && tablename.isRight && statisticsSchemaname.isRight && statisticsName.isRight && statisticsOwner.isRight && attnames.isRight && exprs.isRight && kinds.isRight && nDistinct.isRight && dependencies.isRight && mostCommonVals.isRight && mostCommonValNulls.isRight && mostCommonFreqs.isRight && mostCommonBaseFreqs.isRight)
      Right(PgStatsExtViewRow(schemaname = schemaname.toOption.get, tablename = tablename.toOption.get, statisticsSchemaname = statisticsSchemaname.toOption.get, statisticsName = statisticsName.toOption.get, statisticsOwner = statisticsOwner.toOption.get, attnames = attnames.toOption.get, exprs = exprs.toOption.get, kinds = kinds.toOption.get, nDistinct = nDistinct.toOption.get, dependencies = dependencies.toOption.get, mostCommonVals = mostCommonVals.toOption.get, mostCommonValNulls = mostCommonValNulls.toOption.get, mostCommonFreqs = mostCommonFreqs.toOption.get, mostCommonBaseFreqs = mostCommonBaseFreqs.toOption.get))
    else Left(List[Either[String, Any]](schemaname, tablename, statisticsSchemaname, statisticsName, statisticsOwner, attnames, exprs, kinds, nDistinct, dependencies, mostCommonVals, mostCommonValNulls, mostCommonFreqs, mostCommonBaseFreqs).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgStatsExtViewRow] = new JsonEncoder[PgStatsExtViewRow] {
    override def unsafeEncode(a: PgStatsExtViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""schemaname":""")
      JsonEncoder.string.unsafeEncode(a.schemaname, indent, out)
      out.write(",")
      out.write(""""tablename":""")
      JsonEncoder.string.unsafeEncode(a.tablename, indent, out)
      out.write(",")
      out.write(""""statistics_schemaname":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.statisticsSchemaname, indent, out)
      out.write(",")
      out.write(""""statistics_name":""")
      JsonEncoder.string.unsafeEncode(a.statisticsName, indent, out)
      out.write(",")
      out.write(""""statistics_owner":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.statisticsOwner, indent, out)
      out.write(",")
      out.write(""""attnames":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.attnames, indent, out)
      out.write(",")
      out.write(""""exprs":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.exprs, indent, out)
      out.write(",")
      out.write(""""kinds":""")
      JsonEncoder.array[String](JsonEncoder.string, implicitly).unsafeEncode(a.kinds, indent, out)
      out.write(",")
      out.write(""""n_distinct":""")
      JsonEncoder.option(TypoUnknownPgNdistinct.jsonEncoder).unsafeEncode(a.nDistinct, indent, out)
      out.write(",")
      out.write(""""dependencies":""")
      JsonEncoder.option(TypoUnknownPgDependencies.jsonEncoder).unsafeEncode(a.dependencies, indent, out)
      out.write(",")
      out.write(""""most_common_vals":""")
      JsonEncoder.option(JsonEncoder.array[String](JsonEncoder.string, implicitly)).unsafeEncode(a.mostCommonVals, indent, out)
      out.write(",")
      out.write(""""most_common_val_nulls":""")
      JsonEncoder.option(JsonEncoder.array[Boolean](JsonEncoder.boolean, implicitly)).unsafeEncode(a.mostCommonValNulls, indent, out)
      out.write(",")
      out.write(""""most_common_freqs":""")
      JsonEncoder.option(JsonEncoder.array[Double](JsonEncoder.double, implicitly)).unsafeEncode(a.mostCommonFreqs, indent, out)
      out.write(",")
      out.write(""""most_common_base_freqs":""")
      JsonEncoder.option(JsonEncoder.array[Double](JsonEncoder.double, implicitly)).unsafeEncode(a.mostCommonBaseFreqs, indent, out)
      out.write("}")
    }
  }
}
