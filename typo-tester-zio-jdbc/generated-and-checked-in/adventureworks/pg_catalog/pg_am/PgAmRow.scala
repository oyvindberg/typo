/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_am

import adventureworks.customtypes.TypoRegproc
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PgAmRow(
  oid: PgAmId,
  amname: String,
  amhandler: TypoRegproc,
  amtype: String
)

object PgAmRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PgAmRow] = new JdbcDecoder[PgAmRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PgAmRow) =
      columIndex + 3 ->
        PgAmRow(
          oid = PgAmId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          amname = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          amhandler = TypoRegproc.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          amtype = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PgAmRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val oid = jsonObj.get("oid").toRight("Missing field 'oid'").flatMap(_.as(PgAmId.jsonDecoder))
    val amname = jsonObj.get("amname").toRight("Missing field 'amname'").flatMap(_.as(JsonDecoder.string))
    val amhandler = jsonObj.get("amhandler").toRight("Missing field 'amhandler'").flatMap(_.as(TypoRegproc.jsonDecoder))
    val amtype = jsonObj.get("amtype").toRight("Missing field 'amtype'").flatMap(_.as(JsonDecoder.string))
    if (oid.isRight && amname.isRight && amhandler.isRight && amtype.isRight)
      Right(PgAmRow(oid = oid.toOption.get, amname = amname.toOption.get, amhandler = amhandler.toOption.get, amtype = amtype.toOption.get))
    else Left(List[Either[String, Any]](oid, amname, amhandler, amtype).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PgAmRow] = new JsonEncoder[PgAmRow] {
    override def unsafeEncode(a: PgAmRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""oid":""")
      PgAmId.jsonEncoder.unsafeEncode(a.oid, indent, out)
      out.write(",")
      out.write(""""amname":""")
      JsonEncoder.string.unsafeEncode(a.amname, indent, out)
      out.write(",")
      out.write(""""amhandler":""")
      TypoRegproc.jsonEncoder.unsafeEncode(a.amhandler, indent, out)
      out.write(",")
      out.write(""""amtype":""")
      JsonEncoder.string.unsafeEncode(a.amtype, indent, out)
      out.write("}")
    }
  }
}
