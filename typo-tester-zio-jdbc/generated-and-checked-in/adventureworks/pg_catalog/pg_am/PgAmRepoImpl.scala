/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_am

import adventureworks.customtypes.TypoRegproc
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

object PgAmRepoImpl extends PgAmRepo {
  override def delete(oid: PgAmId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from pg_catalog.pg_am where "oid" = ${Segment.paramSegment(oid)(PgAmId.setter)}""".delete.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgAmFields, PgAmRow] = {
    DeleteBuilder("pg_catalog.pg_am", PgAmFields)
  }
  override def insert(unsaved: PgAmRow): ZIO[ZConnection, Throwable, PgAmRow] = {
    sql"""insert into pg_catalog.pg_am("oid", "amname", "amhandler", "amtype")
          values (${Segment.paramSegment(unsaved.oid)(PgAmId.setter)}::oid, ${Segment.paramSegment(unsaved.amname)(Setter.stringSetter)}::name, ${Segment.paramSegment(unsaved.amhandler)(TypoRegproc.setter)}::regproc, ${Segment.paramSegment(unsaved.amtype)(Setter.stringSetter)}::char)
          returning "oid", "amname", "amhandler", "amtype"
       """.insertReturning(PgAmRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def select: SelectBuilder[PgAmFields, PgAmRow] = {
    SelectBuilderSql("pg_catalog.pg_am", PgAmFields, PgAmRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, PgAmRow] = {
    sql"""select "oid", "amname", "amhandler", "amtype" from pg_catalog.pg_am""".query(PgAmRow.jdbcDecoder).selectStream
  }
  override def selectById(oid: PgAmId): ZIO[ZConnection, Throwable, Option[PgAmRow]] = {
    sql"""select "oid", "amname", "amhandler", "amtype" from pg_catalog.pg_am where "oid" = ${Segment.paramSegment(oid)(PgAmId.setter)}""".query(PgAmRow.jdbcDecoder).selectOne
  }
  override def selectByIds(oids: Array[PgAmId]): ZStream[ZConnection, Throwable, PgAmRow] = {
    sql"""select "oid", "amname", "amhandler", "amtype" from pg_catalog.pg_am where "oid" = ANY(${Segment.paramSegment(oids)(PgAmId.arraySetter)})""".query(PgAmRow.jdbcDecoder).selectStream
  }
  override def selectByUnique(amname: String): ZIO[ZConnection, Throwable, Option[PgAmRow]] = {
    sql"""select "amname"
          from pg_catalog.pg_am
          where "amname" = ${Segment.paramSegment(amname)(Setter.stringSetter)}
       """.query(PgAmRow.jdbcDecoder).selectOne
  }
  override def update(row: PgAmRow): ZIO[ZConnection, Throwable, Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_am
          set "amname" = ${Segment.paramSegment(row.amname)(Setter.stringSetter)}::name,
              "amhandler" = ${Segment.paramSegment(row.amhandler)(TypoRegproc.setter)}::regproc,
              "amtype" = ${Segment.paramSegment(row.amtype)(Setter.stringSetter)}::char
          where "oid" = ${Segment.paramSegment(oid)(PgAmId.setter)}""".update.map(_ > 0)
  }
  override def update: UpdateBuilder[PgAmFields, PgAmRow] = {
    UpdateBuilder("pg_catalog.pg_am", PgAmFields, PgAmRow.jdbcDecoder)
  }
  override def upsert(unsaved: PgAmRow): ZIO[ZConnection, Throwable, UpdateResult[PgAmRow]] = {
    sql"""insert into pg_catalog.pg_am("oid", "amname", "amhandler", "amtype")
          values (
            ${Segment.paramSegment(unsaved.oid)(PgAmId.setter)}::oid,
            ${Segment.paramSegment(unsaved.amname)(Setter.stringSetter)}::name,
            ${Segment.paramSegment(unsaved.amhandler)(TypoRegproc.setter)}::regproc,
            ${Segment.paramSegment(unsaved.amtype)(Setter.stringSetter)}::char
          )
          on conflict ("oid")
          do update set
            "amname" = EXCLUDED."amname",
            "amhandler" = EXCLUDED."amhandler",
            "amtype" = EXCLUDED."amtype"
          returning "oid", "amname", "amhandler", "amtype"""".insertReturning(PgAmRow.jdbcDecoder)
  }
}
