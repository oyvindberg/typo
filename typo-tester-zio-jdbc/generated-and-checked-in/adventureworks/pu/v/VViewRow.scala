/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package v

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** View: pu.v */
case class VViewRow(
  /** Points to [[purchasing.vendor.VendorRow.businessentityid]] */
  id: BusinessentityId,
  /** Points to [[purchasing.vendor.VendorRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[purchasing.vendor.VendorRow.accountnumber]] */
  accountnumber: AccountNumber,
  /** Points to [[purchasing.vendor.VendorRow.name]] */
  name: Name,
  /** Points to [[purchasing.vendor.VendorRow.creditrating]] */
  creditrating: TypoShort,
  /** Points to [[purchasing.vendor.VendorRow.preferredvendorstatus]] */
  preferredvendorstatus: Flag,
  /** Points to [[purchasing.vendor.VendorRow.activeflag]] */
  activeflag: Flag,
  /** Points to [[purchasing.vendor.VendorRow.purchasingwebserviceurl]] */
  purchasingwebserviceurl: Option[/* max 1024 chars */ String],
  /** Points to [[purchasing.vendor.VendorRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object VViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[VViewRow] = new JdbcDecoder[VViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, VViewRow) =
      columIndex + 8 ->
        VViewRow(
          id = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          businessentityid = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          accountnumber = AccountNumber.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          name = Name.jdbcDecoder.unsafeDecode(columIndex + 3, rs)._2,
          creditrating = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          preferredvendorstatus = Flag.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          activeflag = Flag.jdbcDecoder.unsafeDecode(columIndex + 6, rs)._2,
          purchasingwebserviceurl = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[VViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val businessentityid = jsonObj.get("businessentityid").toRight("Missing field 'businessentityid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val accountnumber = jsonObj.get("accountnumber").toRight("Missing field 'accountnumber'").flatMap(_.as(AccountNumber.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val creditrating = jsonObj.get("creditrating").toRight("Missing field 'creditrating'").flatMap(_.as(TypoShort.jsonDecoder))
    val preferredvendorstatus = jsonObj.get("preferredvendorstatus").toRight("Missing field 'preferredvendorstatus'").flatMap(_.as(Flag.jsonDecoder))
    val activeflag = jsonObj.get("activeflag").toRight("Missing field 'activeflag'").flatMap(_.as(Flag.jsonDecoder))
    val purchasingwebserviceurl = jsonObj.get("purchasingwebserviceurl").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (id.isRight && businessentityid.isRight && accountnumber.isRight && name.isRight && creditrating.isRight && preferredvendorstatus.isRight && activeflag.isRight && purchasingwebserviceurl.isRight && modifieddate.isRight)
      Right(VViewRow(id = id.toOption.get, businessentityid = businessentityid.toOption.get, accountnumber = accountnumber.toOption.get, name = name.toOption.get, creditrating = creditrating.toOption.get, preferredvendorstatus = preferredvendorstatus.toOption.get, activeflag = activeflag.toOption.get, purchasingwebserviceurl = purchasingwebserviceurl.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](id, businessentityid, accountnumber, name, creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[VViewRow] = new JsonEncoder[VViewRow] {
    override def unsafeEncode(a: VViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""businessentityid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.businessentityid, indent, out)
      out.write(",")
      out.write(""""accountnumber":""")
      AccountNumber.jsonEncoder.unsafeEncode(a.accountnumber, indent, out)
      out.write(",")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""creditrating":""")
      TypoShort.jsonEncoder.unsafeEncode(a.creditrating, indent, out)
      out.write(",")
      out.write(""""preferredvendorstatus":""")
      Flag.jsonEncoder.unsafeEncode(a.preferredvendorstatus, indent, out)
      out.write(",")
      out.write(""""activeflag":""")
      Flag.jsonEncoder.unsafeEncode(a.activeflag, indent, out)
      out.write(",")
      out.write(""""purchasingwebserviceurl":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.purchasingwebserviceurl, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
}
