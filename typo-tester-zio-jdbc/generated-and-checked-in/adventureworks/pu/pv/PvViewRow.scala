/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package pv

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PvViewRow(
  /** Points to [[purchasing.productvendor.ProductvendorRow.productid]] */
  id: ProductId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.productid]] */
  productid: ProductId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.averageleadtime]] */
  averageleadtime: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.standardprice]] */
  standardprice: BigDecimal,
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptcost]] */
  lastreceiptcost: Option[BigDecimal],
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptdate]] */
  lastreceiptdate: Option[TypoLocalDateTime],
  /** Points to [[purchasing.productvendor.ProductvendorRow.minorderqty]] */
  minorderqty: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.maxorderqty]] */
  maxorderqty: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.onorderqty]] */
  onorderqty: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.unitmeasurecode]] */
  unitmeasurecode: UnitmeasureId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object PvViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PvViewRow] = new JdbcDecoder[PvViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PvViewRow) =
      columIndex + 11 ->
        PvViewRow(
          id = ProductId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          productid = ProductId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          businessentityid = BusinessentityId.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          averageleadtime = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 3, rs)._2,
          standardprice = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 4, rs)._2,
          lastreceiptcost = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 5, rs)._2,
          lastreceiptdate = JdbcDecoder.optionDecoder(TypoLocalDateTime.jdbcDecoder).unsafeDecode(columIndex + 6, rs)._2,
          minorderqty = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 7, rs)._2,
          maxorderqty = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 8, rs)._2,
          onorderqty = JdbcDecoder.optionDecoder(JdbcDecoder.intDecoder).unsafeDecode(columIndex + 9, rs)._2,
          unitmeasurecode = UnitmeasureId.jdbcDecoder.unsafeDecode(columIndex + 10, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 11, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PvViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(ProductId.jsonDecoder))
    val productid = jsonObj.get("productid").toRight("Missing field 'productid'").flatMap(_.as(ProductId.jsonDecoder))
    val businessentityid = jsonObj.get("businessentityid").toRight("Missing field 'businessentityid'").flatMap(_.as(BusinessentityId.jsonDecoder))
    val averageleadtime = jsonObj.get("averageleadtime").toRight("Missing field 'averageleadtime'").flatMap(_.as(JsonDecoder.int))
    val standardprice = jsonObj.get("standardprice").toRight("Missing field 'standardprice'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val lastreceiptcost = jsonObj.get("lastreceiptcost").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.scalaBigDecimal)))
    val lastreceiptdate = jsonObj.get("lastreceiptdate").fold[Either[String, Option[TypoLocalDateTime]]](Right(None))(_.as(JsonDecoder.option(TypoLocalDateTime.jsonDecoder)))
    val minorderqty = jsonObj.get("minorderqty").toRight("Missing field 'minorderqty'").flatMap(_.as(JsonDecoder.int))
    val maxorderqty = jsonObj.get("maxorderqty").toRight("Missing field 'maxorderqty'").flatMap(_.as(JsonDecoder.int))
    val onorderqty = jsonObj.get("onorderqty").fold[Either[String, Option[Int]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.int)))
    val unitmeasurecode = jsonObj.get("unitmeasurecode").toRight("Missing field 'unitmeasurecode'").flatMap(_.as(UnitmeasureId.jsonDecoder))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (id.isRight && productid.isRight && businessentityid.isRight && averageleadtime.isRight && standardprice.isRight && lastreceiptcost.isRight && lastreceiptdate.isRight && minorderqty.isRight && maxorderqty.isRight && onorderqty.isRight && unitmeasurecode.isRight && modifieddate.isRight)
      Right(PvViewRow(id = id.toOption.get, productid = productid.toOption.get, businessentityid = businessentityid.toOption.get, averageleadtime = averageleadtime.toOption.get, standardprice = standardprice.toOption.get, lastreceiptcost = lastreceiptcost.toOption.get, lastreceiptdate = lastreceiptdate.toOption.get, minorderqty = minorderqty.toOption.get, maxorderqty = maxorderqty.toOption.get, onorderqty = onorderqty.toOption.get, unitmeasurecode = unitmeasurecode.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](id, productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PvViewRow] = new JsonEncoder[PvViewRow] {
    override def unsafeEncode(a: PvViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      ProductId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""productid":""")
      ProductId.jsonEncoder.unsafeEncode(a.productid, indent, out)
      out.write(",")
      out.write(""""businessentityid":""")
      BusinessentityId.jsonEncoder.unsafeEncode(a.businessentityid, indent, out)
      out.write(",")
      out.write(""""averageleadtime":""")
      JsonEncoder.int.unsafeEncode(a.averageleadtime, indent, out)
      out.write(",")
      out.write(""""standardprice":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.standardprice, indent, out)
      out.write(",")
      out.write(""""lastreceiptcost":""")
      JsonEncoder.option(JsonEncoder.scalaBigDecimal).unsafeEncode(a.lastreceiptcost, indent, out)
      out.write(",")
      out.write(""""lastreceiptdate":""")
      JsonEncoder.option(TypoLocalDateTime.jsonEncoder).unsafeEncode(a.lastreceiptdate, indent, out)
      out.write(",")
      out.write(""""minorderqty":""")
      JsonEncoder.int.unsafeEncode(a.minorderqty, indent, out)
      out.write(",")
      out.write(""""maxorderqty":""")
      JsonEncoder.int.unsafeEncode(a.maxorderqty, indent, out)
      out.write(",")
      out.write(""""onorderqty":""")
      JsonEncoder.option(JsonEncoder.int).unsafeEncode(a.onorderqty, indent, out)
      out.write(",")
      out.write(""""unitmeasurecode":""")
      UnitmeasureId.jsonEncoder.unsafeEncode(a.unitmeasurecode, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
}
