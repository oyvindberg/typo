/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package p

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.production.product.ProductId
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Flag
import adventureworks.public.Name
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

case class PViewRow(
  /** Points to [[production.product.ProductRow.productid]] */
  id: ProductId,
  /** Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  /** Points to [[production.product.ProductRow.name]] */
  name: Name,
  /** Points to [[production.product.ProductRow.productnumber]] */
  productnumber: /* max 25 chars */ String,
  /** Points to [[production.product.ProductRow.makeflag]] */
  makeflag: Flag,
  /** Points to [[production.product.ProductRow.finishedgoodsflag]] */
  finishedgoodsflag: Flag,
  /** Points to [[production.product.ProductRow.color]] */
  color: Option[/* max 15 chars */ String],
  /** Points to [[production.product.ProductRow.safetystocklevel]] */
  safetystocklevel: TypoShort,
  /** Points to [[production.product.ProductRow.reorderpoint]] */
  reorderpoint: TypoShort,
  /** Points to [[production.product.ProductRow.standardcost]] */
  standardcost: BigDecimal,
  /** Points to [[production.product.ProductRow.listprice]] */
  listprice: BigDecimal,
  /** Points to [[production.product.ProductRow.size]] */
  size: Option[/* max 5 chars */ String],
  /** Points to [[production.product.ProductRow.sizeunitmeasurecode]] */
  sizeunitmeasurecode: Option[UnitmeasureId],
  /** Points to [[production.product.ProductRow.weightunitmeasurecode]] */
  weightunitmeasurecode: Option[UnitmeasureId],
  /** Points to [[production.product.ProductRow.weight]] */
  weight: Option[BigDecimal],
  /** Points to [[production.product.ProductRow.daystomanufacture]] */
  daystomanufacture: Int,
  /** Points to [[production.product.ProductRow.productline]] */
  productline: Option[/* bpchar, max 2 chars */ String],
  /** Points to [[production.product.ProductRow.class]] */
  `class`: Option[/* bpchar, max 2 chars */ String],
  /** Points to [[production.product.ProductRow.style]] */
  style: Option[/* bpchar, max 2 chars */ String],
  /** Points to [[production.product.ProductRow.productsubcategoryid]] */
  productsubcategoryid: Option[ProductsubcategoryId],
  /** Points to [[production.product.ProductRow.productmodelid]] */
  productmodelid: Option[ProductmodelId],
  /** Points to [[production.product.ProductRow.sellstartdate]] */
  sellstartdate: TypoLocalDateTime,
  /** Points to [[production.product.ProductRow.sellenddate]] */
  sellenddate: Option[TypoLocalDateTime],
  /** Points to [[production.product.ProductRow.discontinueddate]] */
  discontinueddate: Option[TypoLocalDateTime],
  /** Points to [[production.product.ProductRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[production.product.ProductRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object PViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[PViewRow] = new JdbcDecoder[PViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, PViewRow) =
      columIndex + 25 ->
        PViewRow(
          id = ProductId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          productid = ProductId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          name = Name.jdbcDecoder.unsafeDecode(columIndex + 2, rs)._2,
          productnumber = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 3, rs)._2,
          makeflag = Flag.jdbcDecoder.unsafeDecode(columIndex + 4, rs)._2,
          finishedgoodsflag = Flag.jdbcDecoder.unsafeDecode(columIndex + 5, rs)._2,
          color = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          safetystocklevel = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 7, rs)._2,
          reorderpoint = TypoShort.jdbcDecoder.unsafeDecode(columIndex + 8, rs)._2,
          standardcost = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 9, rs)._2,
          listprice = JdbcDecoder.bigDecimalDecoderScala.unsafeDecode(columIndex + 10, rs)._2,
          size = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 11, rs)._2,
          sizeunitmeasurecode = JdbcDecoder.optionDecoder(UnitmeasureId.jdbcDecoder).unsafeDecode(columIndex + 12, rs)._2,
          weightunitmeasurecode = JdbcDecoder.optionDecoder(UnitmeasureId.jdbcDecoder).unsafeDecode(columIndex + 13, rs)._2,
          weight = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 14, rs)._2,
          daystomanufacture = JdbcDecoder.intDecoder.unsafeDecode(columIndex + 15, rs)._2,
          productline = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 16, rs)._2,
          `class` = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 17, rs)._2,
          style = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 18, rs)._2,
          productsubcategoryid = JdbcDecoder.optionDecoder(ProductsubcategoryId.jdbcDecoder).unsafeDecode(columIndex + 19, rs)._2,
          productmodelid = JdbcDecoder.optionDecoder(ProductmodelId.jdbcDecoder).unsafeDecode(columIndex + 20, rs)._2,
          sellstartdate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 21, rs)._2,
          sellenddate = JdbcDecoder.optionDecoder(TypoLocalDateTime.jdbcDecoder).unsafeDecode(columIndex + 22, rs)._2,
          discontinueddate = JdbcDecoder.optionDecoder(TypoLocalDateTime.jdbcDecoder).unsafeDecode(columIndex + 23, rs)._2,
          rowguid = TypoUUID.jdbcDecoder.unsafeDecode(columIndex + 24, rs)._2,
          modifieddate = TypoLocalDateTime.jdbcDecoder.unsafeDecode(columIndex + 25, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[PViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(ProductId.jsonDecoder))
    val productid = jsonObj.get("productid").toRight("Missing field 'productid'").flatMap(_.as(ProductId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(Name.jsonDecoder))
    val productnumber = jsonObj.get("productnumber").toRight("Missing field 'productnumber'").flatMap(_.as(JsonDecoder.string))
    val makeflag = jsonObj.get("makeflag").toRight("Missing field 'makeflag'").flatMap(_.as(Flag.jsonDecoder))
    val finishedgoodsflag = jsonObj.get("finishedgoodsflag").toRight("Missing field 'finishedgoodsflag'").flatMap(_.as(Flag.jsonDecoder))
    val color = jsonObj.get("color").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val safetystocklevel = jsonObj.get("safetystocklevel").toRight("Missing field 'safetystocklevel'").flatMap(_.as(TypoShort.jsonDecoder))
    val reorderpoint = jsonObj.get("reorderpoint").toRight("Missing field 'reorderpoint'").flatMap(_.as(TypoShort.jsonDecoder))
    val standardcost = jsonObj.get("standardcost").toRight("Missing field 'standardcost'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val listprice = jsonObj.get("listprice").toRight("Missing field 'listprice'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val size = jsonObj.get("size").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val sizeunitmeasurecode = jsonObj.get("sizeunitmeasurecode").fold[Either[String, Option[UnitmeasureId]]](Right(None))(_.as(JsonDecoder.option(UnitmeasureId.jsonDecoder)))
    val weightunitmeasurecode = jsonObj.get("weightunitmeasurecode").fold[Either[String, Option[UnitmeasureId]]](Right(None))(_.as(JsonDecoder.option(UnitmeasureId.jsonDecoder)))
    val weight = jsonObj.get("weight").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.scalaBigDecimal)))
    val daystomanufacture = jsonObj.get("daystomanufacture").toRight("Missing field 'daystomanufacture'").flatMap(_.as(JsonDecoder.int))
    val productline = jsonObj.get("productline").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val `class` = jsonObj.get("class").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val style = jsonObj.get("style").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(JsonDecoder.string)))
    val productsubcategoryid = jsonObj.get("productsubcategoryid").fold[Either[String, Option[ProductsubcategoryId]]](Right(None))(_.as(JsonDecoder.option(ProductsubcategoryId.jsonDecoder)))
    val productmodelid = jsonObj.get("productmodelid").fold[Either[String, Option[ProductmodelId]]](Right(None))(_.as(JsonDecoder.option(ProductmodelId.jsonDecoder)))
    val sellstartdate = jsonObj.get("sellstartdate").toRight("Missing field 'sellstartdate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    val sellenddate = jsonObj.get("sellenddate").fold[Either[String, Option[TypoLocalDateTime]]](Right(None))(_.as(JsonDecoder.option(TypoLocalDateTime.jsonDecoder)))
    val discontinueddate = jsonObj.get("discontinueddate").fold[Either[String, Option[TypoLocalDateTime]]](Right(None))(_.as(JsonDecoder.option(TypoLocalDateTime.jsonDecoder)))
    val rowguid = jsonObj.get("rowguid").toRight("Missing field 'rowguid'").flatMap(_.as(TypoUUID.jsonDecoder))
    val modifieddate = jsonObj.get("modifieddate").toRight("Missing field 'modifieddate'").flatMap(_.as(TypoLocalDateTime.jsonDecoder))
    if (id.isRight && productid.isRight && name.isRight && productnumber.isRight && makeflag.isRight && finishedgoodsflag.isRight && color.isRight && safetystocklevel.isRight && reorderpoint.isRight && standardcost.isRight && listprice.isRight && size.isRight && sizeunitmeasurecode.isRight && weightunitmeasurecode.isRight && weight.isRight && daystomanufacture.isRight && productline.isRight && `class`.isRight && style.isRight && productsubcategoryid.isRight && productmodelid.isRight && sellstartdate.isRight && sellenddate.isRight && discontinueddate.isRight && rowguid.isRight && modifieddate.isRight)
      Right(PViewRow(id = id.toOption.get, productid = productid.toOption.get, name = name.toOption.get, productnumber = productnumber.toOption.get, makeflag = makeflag.toOption.get, finishedgoodsflag = finishedgoodsflag.toOption.get, color = color.toOption.get, safetystocklevel = safetystocklevel.toOption.get, reorderpoint = reorderpoint.toOption.get, standardcost = standardcost.toOption.get, listprice = listprice.toOption.get, size = size.toOption.get, sizeunitmeasurecode = sizeunitmeasurecode.toOption.get, weightunitmeasurecode = weightunitmeasurecode.toOption.get, weight = weight.toOption.get, daystomanufacture = daystomanufacture.toOption.get, productline = productline.toOption.get, `class` = `class`.toOption.get, style = style.toOption.get, productsubcategoryid = productsubcategoryid.toOption.get, productmodelid = productmodelid.toOption.get, sellstartdate = sellstartdate.toOption.get, sellenddate = sellenddate.toOption.get, discontinueddate = discontinueddate.toOption.get, rowguid = rowguid.toOption.get, modifieddate = modifieddate.toOption.get))
    else Left(List[Either[String, Any]](id, productid, name, productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, size, sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, `class`, style, productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PViewRow] = new JsonEncoder[PViewRow] {
    override def unsafeEncode(a: PViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      ProductId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""productid":""")
      ProductId.jsonEncoder.unsafeEncode(a.productid, indent, out)
      out.write(",")
      out.write(""""name":""")
      Name.jsonEncoder.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""productnumber":""")
      JsonEncoder.string.unsafeEncode(a.productnumber, indent, out)
      out.write(",")
      out.write(""""makeflag":""")
      Flag.jsonEncoder.unsafeEncode(a.makeflag, indent, out)
      out.write(",")
      out.write(""""finishedgoodsflag":""")
      Flag.jsonEncoder.unsafeEncode(a.finishedgoodsflag, indent, out)
      out.write(",")
      out.write(""""color":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.color, indent, out)
      out.write(",")
      out.write(""""safetystocklevel":""")
      TypoShort.jsonEncoder.unsafeEncode(a.safetystocklevel, indent, out)
      out.write(",")
      out.write(""""reorderpoint":""")
      TypoShort.jsonEncoder.unsafeEncode(a.reorderpoint, indent, out)
      out.write(",")
      out.write(""""standardcost":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.standardcost, indent, out)
      out.write(",")
      out.write(""""listprice":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.listprice, indent, out)
      out.write(",")
      out.write(""""size":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.size, indent, out)
      out.write(",")
      out.write(""""sizeunitmeasurecode":""")
      JsonEncoder.option(UnitmeasureId.jsonEncoder).unsafeEncode(a.sizeunitmeasurecode, indent, out)
      out.write(",")
      out.write(""""weightunitmeasurecode":""")
      JsonEncoder.option(UnitmeasureId.jsonEncoder).unsafeEncode(a.weightunitmeasurecode, indent, out)
      out.write(",")
      out.write(""""weight":""")
      JsonEncoder.option(JsonEncoder.scalaBigDecimal).unsafeEncode(a.weight, indent, out)
      out.write(",")
      out.write(""""daystomanufacture":""")
      JsonEncoder.int.unsafeEncode(a.daystomanufacture, indent, out)
      out.write(",")
      out.write(""""productline":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.productline, indent, out)
      out.write(",")
      out.write(""""class":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.`class`, indent, out)
      out.write(",")
      out.write(""""style":""")
      JsonEncoder.option(JsonEncoder.string).unsafeEncode(a.style, indent, out)
      out.write(",")
      out.write(""""productsubcategoryid":""")
      JsonEncoder.option(ProductsubcategoryId.jsonEncoder).unsafeEncode(a.productsubcategoryid, indent, out)
      out.write(",")
      out.write(""""productmodelid":""")
      JsonEncoder.option(ProductmodelId.jsonEncoder).unsafeEncode(a.productmodelid, indent, out)
      out.write(",")
      out.write(""""sellstartdate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.sellstartdate, indent, out)
      out.write(",")
      out.write(""""sellenddate":""")
      JsonEncoder.option(TypoLocalDateTime.jsonEncoder).unsafeEncode(a.sellenddate, indent, out)
      out.write(",")
      out.write(""""discontinueddate":""")
      JsonEncoder.option(TypoLocalDateTime.jsonEncoder).unsafeEncode(a.discontinueddate, indent, out)
      out.write(",")
      out.write(""""rowguid":""")
      TypoUUID.jsonEncoder.unsafeEncode(a.rowguid, indent, out)
      out.write(",")
      out.write(""""modifieddate":""")
      TypoLocalDateTime.jsonEncoder.unsafeEncode(a.modifieddate, indent, out)
      out.write("}")
    }
  }
}
