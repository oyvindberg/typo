/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package um

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Name
import typo.dsl.Path
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.Structure.Relation

trait UmViewFields {
  def id: Field[UnitmeasureId, UmViewRow]
  def unitmeasurecode: Field[UnitmeasureId, UmViewRow]
  def name: Field[Name, UmViewRow]
  def modifieddate: Field[TypoLocalDateTime, UmViewRow]
}

object UmViewFields {
  lazy val structure: Relation[UmViewFields, UmViewRow] =
    new Impl(Nil)
    
  private final class Impl(val _path: List[Path])
    extends Relation[UmViewFields, UmViewRow] {
  
    override lazy val fields: UmViewFields = new UmViewFields {
      override def id = Field[UnitmeasureId, UmViewRow](_path, "id", None, None, x => x.id, (row, value) => row.copy(id = value))
      override def unitmeasurecode = Field[UnitmeasureId, UmViewRow](_path, "unitmeasurecode", None, None, x => x.unitmeasurecode, (row, value) => row.copy(unitmeasurecode = value))
      override def name = Field[Name, UmViewRow](_path, "name", None, None, x => x.name, (row, value) => row.copy(name = value))
      override def modifieddate = Field[TypoLocalDateTime, UmViewRow](_path, "modifieddate", Some("text"), None, x => x.modifieddate, (row, value) => row.copy(modifieddate = value))
    }
  
    override lazy val columns: List[FieldLikeNoHkt[?, UmViewRow]] =
      List[FieldLikeNoHkt[?, UmViewRow]](fields.id, fields.unitmeasurecode, fields.name, fields.modifieddate)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
