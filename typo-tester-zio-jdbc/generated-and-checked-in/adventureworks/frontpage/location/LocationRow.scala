/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package location

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: frontpage.location
    Primary key: id */
case class LocationRow(
  /** Default: gen_random_uuid() */
  id: LocationId,
  name: String,
  position: Option[TypoPoint],
  area: Option[TypoPolygon],
  ipRange: Option[TypoInet],
  /** Default: '{}'::jsonb */
  metadata: Option[TypoJsonb]
){
   def toUnsavedRow(id: Defaulted[LocationId], metadata: Defaulted[Option[TypoJsonb]] = Defaulted.Provided(this.metadata)): LocationRowUnsaved =
     LocationRowUnsaved(name, position, area, ipRange, id, metadata)
 }

object LocationRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[LocationRow] = new JdbcDecoder[LocationRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, LocationRow) =
      columIndex + 5 ->
        LocationRow(
          id = LocationId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          name = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          position = JdbcDecoder.optionDecoder(TypoPoint.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          area = JdbcDecoder.optionDecoder(TypoPolygon.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2,
          ipRange = JdbcDecoder.optionDecoder(TypoInet.jdbcDecoder).unsafeDecode(columIndex + 4, rs)._2,
          metadata = JdbcDecoder.optionDecoder(TypoJsonb.jdbcDecoder).unsafeDecode(columIndex + 5, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[LocationRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(LocationId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(JsonDecoder.string))
    val position = jsonObj.get("position").fold[Either[String, Option[TypoPoint]]](Right(None))(_.as(JsonDecoder.option(using TypoPoint.jsonDecoder)))
    val area = jsonObj.get("area").fold[Either[String, Option[TypoPolygon]]](Right(None))(_.as(JsonDecoder.option(using TypoPolygon.jsonDecoder)))
    val ipRange = jsonObj.get("ip_range").fold[Either[String, Option[TypoInet]]](Right(None))(_.as(JsonDecoder.option(using TypoInet.jsonDecoder)))
    val metadata = jsonObj.get("metadata").fold[Either[String, Option[TypoJsonb]]](Right(None))(_.as(JsonDecoder.option(using TypoJsonb.jsonDecoder)))
    if (id.isRight && name.isRight && position.isRight && area.isRight && ipRange.isRight && metadata.isRight)
      Right(LocationRow(id = id.toOption.get, name = name.toOption.get, position = position.toOption.get, area = area.toOption.get, ipRange = ipRange.toOption.get, metadata = metadata.toOption.get))
    else Left(List[Either[String, Any]](id, name, position, area, ipRange, metadata).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[LocationRow] = new JsonEncoder[LocationRow] {
    override def unsafeEncode(a: LocationRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      LocationId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""name":""")
      JsonEncoder.string.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""position":""")
      JsonEncoder.option(using TypoPoint.jsonEncoder).unsafeEncode(a.position, indent, out)
      out.write(",")
      out.write(""""area":""")
      JsonEncoder.option(using TypoPolygon.jsonEncoder).unsafeEncode(a.area, indent, out)
      out.write(",")
      out.write(""""ip_range":""")
      JsonEncoder.option(using TypoInet.jsonEncoder).unsafeEncode(a.ipRange, indent, out)
      out.write(",")
      out.write(""""metadata":""")
      JsonEncoder.option(using TypoJsonb.jsonEncoder).unsafeEncode(a.metadata, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[LocationRow] = Text.instance[LocationRow]{ (row, sb) =>
    LocationId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPoint.text).unsafeEncode(row.position, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPolygon.text).unsafeEncode(row.area, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInet.text).unsafeEncode(row.ipRange, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoJsonb.text).unsafeEncode(row.metadata, sb)
  }
}
