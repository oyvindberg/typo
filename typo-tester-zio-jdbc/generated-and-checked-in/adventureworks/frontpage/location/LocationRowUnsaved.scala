/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package location

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `frontpage.location` which has not been persisted yet */
case class LocationRowUnsaved(
  name: String,
  position: Option[TypoPoint],
  area: Option[TypoPolygon],
  ipRange: Option[TypoInet],
  /** Default: gen_random_uuid() */
  id: Defaulted[LocationId] = Defaulted.UseDefault,
  /** Default: '{}'::jsonb */
  metadata: Defaulted[Option[TypoJsonb]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => LocationId, metadataDefault: => Option[TypoJsonb]): LocationRow =
    LocationRow(
      name = name,
      position = position,
      area = area,
      ipRange = ipRange,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      metadata = metadata match {
                   case Defaulted.UseDefault => metadataDefault
                   case Defaulted.Provided(value) => value
                 }
    )
}
object LocationRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[LocationRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(JsonDecoder.string))
    val position = jsonObj.get("position").fold[Either[String, Option[TypoPoint]]](Right(None))(_.as(JsonDecoder.option(using TypoPoint.jsonDecoder)))
    val area = jsonObj.get("area").fold[Either[String, Option[TypoPolygon]]](Right(None))(_.as(JsonDecoder.option(using TypoPolygon.jsonDecoder)))
    val ipRange = jsonObj.get("ip_range").fold[Either[String, Option[TypoInet]]](Right(None))(_.as(JsonDecoder.option(using TypoInet.jsonDecoder)))
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(Defaulted.jsonDecoder(LocationId.jsonDecoder)))
    val metadata = jsonObj.get("metadata").toRight("Missing field 'metadata'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.option(using TypoJsonb.jsonDecoder))))
    if (name.isRight && position.isRight && area.isRight && ipRange.isRight && id.isRight && metadata.isRight)
      Right(LocationRowUnsaved(name = name.toOption.get, position = position.toOption.get, area = area.toOption.get, ipRange = ipRange.toOption.get, id = id.toOption.get, metadata = metadata.toOption.get))
    else Left(List[Either[String, Any]](name, position, area, ipRange, id, metadata).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[LocationRowUnsaved] = new JsonEncoder[LocationRowUnsaved] {
    override def unsafeEncode(a: LocationRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.string.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""position":""")
      JsonEncoder.option(using TypoPoint.jsonEncoder).unsafeEncode(a.position, indent, out)
      out.write(",")
      out.write(""""area":""")
      JsonEncoder.option(using TypoPolygon.jsonEncoder).unsafeEncode(a.area, indent, out)
      out.write(",")
      out.write(""""ip_range":""")
      JsonEncoder.option(using TypoInet.jsonEncoder).unsafeEncode(a.ipRange, indent, out)
      out.write(",")
      out.write(""""id":""")
      Defaulted.jsonEncoder(LocationId.jsonEncoder).unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""metadata":""")
      Defaulted.jsonEncoder(JsonEncoder.option(using TypoJsonb.jsonEncoder)).unsafeEncode(a.metadata, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[LocationRowUnsaved] = Text.instance[LocationRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPoint.text).unsafeEncode(row.position, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPolygon.text).unsafeEncode(row.area, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInet.text).unsafeEncode(row.ipRange, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(LocationId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoJsonb.text)).unsafeEncode(row.metadata, sb)
  }
}
