/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package customer

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.user.UserId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `frontpage.customer` which has not been persisted yet */
case class CustomerRowUnsaved(
  /** Points to [[user.UserRow.id]] */
  userId: Option[UserId],
  companyName: Option[String],
  creditLimit: Option[BigDecimal],
  /** Default: gen_random_uuid() */
  id: Defaulted[CustomerId] = Defaulted.UseDefault,
  /** Default: false */
  verified: Defaulted[Option[Boolean]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => CustomerId, verifiedDefault: => Option[Boolean]): CustomerRow =
    CustomerRow(
      userId = userId,
      companyName = companyName,
      creditLimit = creditLimit,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      verified = verified match {
                   case Defaulted.UseDefault => verifiedDefault
                   case Defaulted.Provided(value) => value
                 }
    )
}
object CustomerRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[CustomerRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val userId = jsonObj.get("user_id").fold[Either[String, Option[UserId]]](Right(None))(_.as(JsonDecoder.option(using UserId.jsonDecoder)))
    val companyName = jsonObj.get("company_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val creditLimit = jsonObj.get("credit_limit").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.scalaBigDecimal)))
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(Defaulted.jsonDecoder(CustomerId.jsonDecoder)))
    val verified = jsonObj.get("verified").toRight("Missing field 'verified'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.option(using JsonDecoder.boolean))))
    if (userId.isRight && companyName.isRight && creditLimit.isRight && id.isRight && verified.isRight)
      Right(CustomerRowUnsaved(userId = userId.toOption.get, companyName = companyName.toOption.get, creditLimit = creditLimit.toOption.get, id = id.toOption.get, verified = verified.toOption.get))
    else Left(List[Either[String, Any]](userId, companyName, creditLimit, id, verified).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[CustomerRowUnsaved] = new JsonEncoder[CustomerRowUnsaved] {
    override def unsafeEncode(a: CustomerRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""user_id":""")
      JsonEncoder.option(using UserId.jsonEncoder).unsafeEncode(a.userId, indent, out)
      out.write(",")
      out.write(""""company_name":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.companyName, indent, out)
      out.write(",")
      out.write(""""credit_limit":""")
      JsonEncoder.option(using JsonEncoder.scalaBigDecimal).unsafeEncode(a.creditLimit, indent, out)
      out.write(",")
      out.write(""""id":""")
      Defaulted.jsonEncoder(CustomerId.jsonEncoder).unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""verified":""")
      Defaulted.jsonEncoder(JsonEncoder.option(using JsonEncoder.boolean)).unsafeEncode(a.verified, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[CustomerRowUnsaved] = Text.instance[CustomerRowUnsaved]{ (row, sb) =>
    Text.option(UserId.text).unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.companyName, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.creditLimit, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(CustomerId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.booleanInstance)).unsafeEncode(row.verified, sb)
  }
}
