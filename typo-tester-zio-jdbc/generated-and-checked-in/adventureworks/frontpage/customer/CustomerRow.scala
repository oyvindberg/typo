/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package customer

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.user.UserId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: frontpage.customer
    Primary key: id */
case class CustomerRow(
  /** Default: gen_random_uuid() */
  id: CustomerId,
  /** Points to [[user.UserRow.id]] */
  userId: Option[UserId],
  companyName: Option[String],
  creditLimit: Option[BigDecimal],
  /** Default: false */
  verified: Option[Boolean]
){
   def toUnsavedRow(id: Defaulted[CustomerId], verified: Defaulted[Option[Boolean]] = Defaulted.Provided(this.verified)): CustomerRowUnsaved =
     CustomerRowUnsaved(userId, companyName, creditLimit, id, verified)
 }

object CustomerRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[CustomerRow] = new JdbcDecoder[CustomerRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, CustomerRow) =
      columIndex + 4 ->
        CustomerRow(
          id = CustomerId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          userId = JdbcDecoder.optionDecoder(UserId.jdbcDecoder).unsafeDecode(columIndex + 1, rs)._2,
          companyName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 2, rs)._2,
          creditLimit = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 3, rs)._2,
          verified = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 4, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[CustomerRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(CustomerId.jsonDecoder))
    val userId = jsonObj.get("user_id").fold[Either[String, Option[UserId]]](Right(None))(_.as(JsonDecoder.option(using UserId.jsonDecoder)))
    val companyName = jsonObj.get("company_name").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val creditLimit = jsonObj.get("credit_limit").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.scalaBigDecimal)))
    val verified = jsonObj.get("verified").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.boolean)))
    if (id.isRight && userId.isRight && companyName.isRight && creditLimit.isRight && verified.isRight)
      Right(CustomerRow(id = id.toOption.get, userId = userId.toOption.get, companyName = companyName.toOption.get, creditLimit = creditLimit.toOption.get, verified = verified.toOption.get))
    else Left(List[Either[String, Any]](id, userId, companyName, creditLimit, verified).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[CustomerRow] = new JsonEncoder[CustomerRow] {
    override def unsafeEncode(a: CustomerRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      CustomerId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""user_id":""")
      JsonEncoder.option(using UserId.jsonEncoder).unsafeEncode(a.userId, indent, out)
      out.write(",")
      out.write(""""company_name":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.companyName, indent, out)
      out.write(",")
      out.write(""""credit_limit":""")
      JsonEncoder.option(using JsonEncoder.scalaBigDecimal).unsafeEncode(a.creditLimit, indent, out)
      out.write(",")
      out.write(""""verified":""")
      JsonEncoder.option(using JsonEncoder.boolean).unsafeEncode(a.verified, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[CustomerRow] = Text.instance[CustomerRow]{ (row, sb) =>
    CustomerId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.option(UserId.text).unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.companyName, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.creditLimit, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.booleanInstance).unsafeEncode(row.verified, sb)
  }
}
