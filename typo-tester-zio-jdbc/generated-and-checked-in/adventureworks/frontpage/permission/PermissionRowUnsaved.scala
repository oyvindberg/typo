/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package permission

import adventureworks.customtypes.Defaulted
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `frontpage.permission` which has not been persisted yet */
case class PermissionRowUnsaved(
  name: String,
  /** Default: gen_random_uuid() */
  id: Defaulted[PermissionId] = Defaulted.UseDefault
) {
  def toRow(idDefault: => PermissionId): PermissionRow =
    PermissionRow(
      name = name,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           }
    )
}
object PermissionRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[PermissionRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(JsonDecoder.string))
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(Defaulted.jsonDecoder(PermissionId.jsonDecoder)))
    if (name.isRight && id.isRight)
      Right(PermissionRowUnsaved(name = name.toOption.get, id = id.toOption.get))
    else Left(List[Either[String, Any]](name, id).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PermissionRowUnsaved] = new JsonEncoder[PermissionRowUnsaved] {
    override def unsafeEncode(a: PermissionRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.string.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""id":""")
      Defaulted.jsonEncoder(PermissionId.jsonEncoder).unsafeEncode(a.id, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[PermissionRowUnsaved] = Text.instance[PermissionRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(PermissionId.text).unsafeEncode(row.id, sb)
  }
}
