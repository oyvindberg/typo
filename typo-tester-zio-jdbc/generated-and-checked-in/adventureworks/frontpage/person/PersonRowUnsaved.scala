/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package person

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.address.AddressId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `frontpage.person` which has not been persisted yet */
case class PersonRowUnsaved(
  name: String,
  /** Points to [[address.AddressRow.id]] */
  addressId: Option[AddressId],
  /** Default: gen_random_uuid() */
  id: Defaulted[PersonId] = Defaulted.UseDefault,
  /** Default: now() */
  createdAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => PersonId, createdAtDefault: => Option[TypoLocalDateTime]): PersonRow =
    PersonRow(
      name = name,
      addressId = addressId,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      createdAt = createdAt match {
                    case Defaulted.UseDefault => createdAtDefault
                    case Defaulted.Provided(value) => value
                  }
    )
}
object PersonRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[PersonRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(JsonDecoder.string))
    val addressId = jsonObj.get("address_id").fold[Either[String, Option[AddressId]]](Right(None))(_.as(JsonDecoder.option(using AddressId.jsonDecoder)))
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(Defaulted.jsonDecoder(PersonId.jsonDecoder)))
    val createdAt = jsonObj.get("created_at").toRight("Missing field 'created_at'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.option(using TypoLocalDateTime.jsonDecoder))))
    if (name.isRight && addressId.isRight && id.isRight && createdAt.isRight)
      Right(PersonRowUnsaved(name = name.toOption.get, addressId = addressId.toOption.get, id = id.toOption.get, createdAt = createdAt.toOption.get))
    else Left(List[Either[String, Any]](name, addressId, id, createdAt).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[PersonRowUnsaved] = new JsonEncoder[PersonRowUnsaved] {
    override def unsafeEncode(a: PersonRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""name":""")
      JsonEncoder.string.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""address_id":""")
      JsonEncoder.option(using AddressId.jsonEncoder).unsafeEncode(a.addressId, indent, out)
      out.write(",")
      out.write(""""id":""")
      Defaulted.jsonEncoder(PersonId.jsonEncoder).unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""created_at":""")
      Defaulted.jsonEncoder(JsonEncoder.option(using TypoLocalDateTime.jsonEncoder)).unsafeEncode(a.createdAt, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[PersonRowUnsaved] = Text.instance[PersonRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(AddressId.text).unsafeEncode(row.addressId, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(PersonId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoLocalDateTime.text)).unsafeEncode(row.createdAt, sb)
  }
}
