/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package address

import adventureworks.customtypes.Defaulted
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: frontpage.address
    Primary key: id */
case class AddressRow(
  /** Default: gen_random_uuid() */
  id: AddressId,
  city: String,
  country: String
){
   def toUnsavedRow(id: Defaulted[AddressId]): AddressRowUnsaved =
     AddressRowUnsaved(city, country, id)
 }

object AddressRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[AddressRow] = new JdbcDecoder[AddressRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, AddressRow) =
      columIndex + 2 ->
        AddressRow(
          id = AddressId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          city = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          country = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[AddressRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(AddressId.jsonDecoder))
    val city = jsonObj.get("city").toRight("Missing field 'city'").flatMap(_.as(JsonDecoder.string))
    val country = jsonObj.get("country").toRight("Missing field 'country'").flatMap(_.as(JsonDecoder.string))
    if (id.isRight && city.isRight && country.isRight)
      Right(AddressRow(id = id.toOption.get, city = city.toOption.get, country = country.toOption.get))
    else Left(List[Either[String, Any]](id, city, country).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[AddressRow] = new JsonEncoder[AddressRow] {
    override def unsafeEncode(a: AddressRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      AddressId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""city":""")
      JsonEncoder.string.unsafeEncode(a.city, indent, out)
      out.write(",")
      out.write(""""country":""")
      JsonEncoder.string.unsafeEncode(a.country, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[AddressRow] = Text.instance[AddressRow]{ (row, sb) =>
    AddressId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.city, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.country, sb)
  }
}
