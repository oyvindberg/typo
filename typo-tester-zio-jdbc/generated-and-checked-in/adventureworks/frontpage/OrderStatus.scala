/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage

import java.sql.ResultSet
import java.sql.Types
import typo.dsl.PGType
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcDecoderError
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Enum `frontpage.order_status`
  *  - pending
  *  - active
  *  - shipped
  *  - cancelled
  */
sealed abstract class OrderStatus(val value: String)

object OrderStatus {
  def apply(str: String): Either[String, OrderStatus] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): OrderStatus =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object pending extends OrderStatus("pending")
  case object active extends OrderStatus("active")
  case object shipped extends OrderStatus("shipped")
  case object cancelled extends OrderStatus("cancelled")
  val All: List[OrderStatus] = List(pending, active, shipped, cancelled)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, OrderStatus] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayJdbcDecoder: JdbcDecoder[Array[OrderStatus]] = adventureworks.StringArrayDecoder.map(a => if (a == null) null else a.map(force))
  implicit lazy val arrayJdbcEncoder: JdbcEncoder[Array[OrderStatus]] = JdbcEncoder.singleParamEncoder(using arraySetter)
  implicit lazy val arraySetter: Setter[Array[OrderStatus]] = Setter.forSqlType[Array[OrderStatus]](
      (ps, i, v) => ps.setArray(i, ps.getConnection.createArrayOf("frontpage.order_status", v.map(x => x.value))),
      java.sql.Types.ARRAY
    )
  implicit lazy val jdbcDecoder: JdbcDecoder[OrderStatus] = JdbcDecoder.stringDecoder.flatMap { s =>
    new JdbcDecoder[OrderStatus] {
      override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, OrderStatus) = {
        def error(msg: String): JdbcDecoderError =
          JdbcDecoderError(
            message = s"Error decoding OrderStatus from ResultSet",
            cause = new RuntimeException(msg),
            metadata = rs.getMetaData,
            row = rs.getRow
          )
  
        OrderStatus.apply(s).fold(e => throw error(e), (columIndex, _))
      }
    }
  }
  implicit lazy val jdbcEncoder: JdbcEncoder[OrderStatus] = JdbcEncoder.stringEncoder.contramap(_.value)
  implicit lazy val jsonDecoder: JsonDecoder[OrderStatus] = JsonDecoder.string.mapOrFail(OrderStatus.apply)
  implicit lazy val jsonEncoder: JsonEncoder[OrderStatus] = JsonEncoder.string.contramap(_.value)
  implicit lazy val ordering: Ordering[OrderStatus] = Ordering.by(_.value)
  implicit lazy val pgType: PGType[OrderStatus] = PGType.instance[OrderStatus]("frontpage.order_status", Types.OTHER)
  implicit lazy val setter: Setter[OrderStatus] = Setter.stringSetter.contramap(_.value)
  implicit lazy val text: Text[OrderStatus] = new Text[OrderStatus] {
    override def unsafeEncode(v: OrderStatus, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: OrderStatus, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}
