/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package employee

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.person.PersonId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: frontpage.employee
    Primary key: id */
case class EmployeeRow(
  /** Default: gen_random_uuid() */
  id: EmployeeId,
  /** Points to [[person.PersonRow.id]] */
  personId: PersonId,
  salary: Option[BigDecimal]
){
   def toUnsavedRow(id: Defaulted[EmployeeId]): EmployeeRowUnsaved =
     EmployeeRowUnsaved(personId, salary, id)
 }

object EmployeeRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[EmployeeRow] = new JdbcDecoder[EmployeeRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, EmployeeRow) =
      columIndex + 2 ->
        EmployeeRow(
          id = EmployeeId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          personId = PersonId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          salary = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[EmployeeRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(EmployeeId.jsonDecoder))
    val personId = jsonObj.get("person_id").toRight("Missing field 'person_id'").flatMap(_.as(PersonId.jsonDecoder))
    val salary = jsonObj.get("salary").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.scalaBigDecimal)))
    if (id.isRight && personId.isRight && salary.isRight)
      Right(EmployeeRow(id = id.toOption.get, personId = personId.toOption.get, salary = salary.toOption.get))
    else Left(List[Either[String, Any]](id, personId, salary).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[EmployeeRow] = new JsonEncoder[EmployeeRow] {
    override def unsafeEncode(a: EmployeeRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      EmployeeId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""person_id":""")
      PersonId.jsonEncoder.unsafeEncode(a.personId, indent, out)
      out.write(",")
      out.write(""""salary":""")
      JsonEncoder.option(using JsonEncoder.scalaBigDecimal).unsafeEncode(a.salary, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[EmployeeRow] = Text.instance[EmployeeRow]{ (row, sb) =>
    EmployeeId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    PersonId.text.unsafeEncode(row.personId, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.salary, sb)
  }
}
