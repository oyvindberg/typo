/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package employee

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.person.PersonId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `frontpage.employee` which has not been persisted yet */
case class EmployeeRowUnsaved(
  /** Points to [[person.PersonRow.id]] */
  personId: PersonId,
  salary: Option[BigDecimal],
  /** Default: gen_random_uuid() */
  id: Defaulted[EmployeeId] = Defaulted.UseDefault
) {
  def toRow(idDefault: => EmployeeId): EmployeeRow =
    EmployeeRow(
      personId = personId,
      salary = salary,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           }
    )
}
object EmployeeRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[EmployeeRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val personId = jsonObj.get("person_id").toRight("Missing field 'person_id'").flatMap(_.as(PersonId.jsonDecoder))
    val salary = jsonObj.get("salary").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.scalaBigDecimal)))
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(Defaulted.jsonDecoder(EmployeeId.jsonDecoder)))
    if (personId.isRight && salary.isRight && id.isRight)
      Right(EmployeeRowUnsaved(personId = personId.toOption.get, salary = salary.toOption.get, id = id.toOption.get))
    else Left(List[Either[String, Any]](personId, salary, id).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[EmployeeRowUnsaved] = new JsonEncoder[EmployeeRowUnsaved] {
    override def unsafeEncode(a: EmployeeRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""person_id":""")
      PersonId.jsonEncoder.unsafeEncode(a.personId, indent, out)
      out.write(",")
      out.write(""""salary":""")
      JsonEncoder.option(using JsonEncoder.scalaBigDecimal).unsafeEncode(a.salary, indent, out)
      out.write(",")
      out.write(""""id":""")
      Defaulted.jsonEncoder(EmployeeId.jsonEncoder).unsafeEncode(a.id, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[EmployeeRowUnsaved] = Text.instance[EmployeeRowUnsaved]{ (row, sb) =>
    PersonId.text.unsafeEncode(row.personId, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.salary, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(EmployeeId.text).unsafeEncode(row.id, sb)
  }
}
