/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order

import adventureworks.customtypes.TypoUUID
import typo.dsl.Bijection
import typo.dsl.PGType
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Type for the primary key of table `frontpage.order` */
case class OrderId(value: TypoUUID) extends AnyVal
object OrderId {
  implicit lazy val arrayJdbcDecoder: JdbcDecoder[Array[OrderId]] = JdbcDecoder[Array[TypoUUID]].map(_.map(OrderId.apply))
  implicit lazy val arrayJdbcEncoder: JdbcEncoder[Array[OrderId]] = JdbcEncoder[Array[TypoUUID]].contramap(_.map(_.value))
  implicit lazy val arraySetter: Setter[Array[OrderId]] = TypoUUID.arraySetter.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[OrderId, TypoUUID] = Bijection[OrderId, TypoUUID](_.value)(OrderId.apply)
  implicit lazy val jdbcDecoder: JdbcDecoder[OrderId] = TypoUUID.jdbcDecoder.map(OrderId.apply)
  implicit lazy val jdbcEncoder: JdbcEncoder[OrderId] = TypoUUID.jdbcEncoder.contramap(_.value)
  implicit lazy val jsonDecoder: JsonDecoder[OrderId] = TypoUUID.jsonDecoder.map(OrderId.apply)
  implicit lazy val jsonEncoder: JsonEncoder[OrderId] = TypoUUID.jsonEncoder.contramap(_.value)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[OrderId] = Ordering.by(_.value)
  implicit lazy val pgType: PGType[OrderId] = TypoUUID.pgType.as
  implicit lazy val setter: Setter[OrderId] = TypoUUID.setter.contramap(_.value)
  implicit lazy val text: Text[OrderId] = new Text[OrderId] {
    override def unsafeEncode(v: OrderId, sb: StringBuilder) = TypoUUID.text.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: OrderId, sb: StringBuilder) = TypoUUID.text.unsafeArrayEncode(v.value, sb)
  }
}
