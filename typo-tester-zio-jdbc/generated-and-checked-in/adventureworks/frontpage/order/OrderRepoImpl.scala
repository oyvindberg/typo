/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.product.ProductId
import adventureworks.frontpage.user.UserId
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class OrderRepoImpl extends OrderRepo {
  override def delete: DeleteBuilder[OrderFields, OrderRow] = {
    DeleteBuilder(""""frontpage"."order"""", OrderFields.structure)
  }
  override def deleteById(id: OrderId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "frontpage"."order" where "id" = ${Segment.paramSegment(id)(OrderId.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(ids: Array[OrderId]): ZIO[ZConnection, Throwable, Long] = {
    sql"""delete from "frontpage"."order" where "id" = ANY(${ids})""".delete
  }
  override def insert(unsaved: OrderRow): ZIO[ZConnection, Throwable, OrderRow] = {
    sql"""insert into "frontpage"."order"("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")
          values (${Segment.paramSegment(unsaved.id)(OrderId.setter)}::uuid, ${Segment.paramSegment(unsaved.userId)(Setter.optionParamSetter(UserId.setter))}::uuid, ${Segment.paramSegment(unsaved.productId)(Setter.optionParamSetter(ProductId.setter))}::uuid, ${Segment.paramSegment(unsaved.status)(Setter.optionParamSetter(OrderStatus.setter))}::frontpage.order_status, ${Segment.paramSegment(unsaved.total)(Setter.bigDecimalScalaSetter)}::numeric, ${Segment.paramSegment(unsaved.createdAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp, ${Segment.paramSegment(unsaved.shippedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp)
          returning "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text
       """.insertReturning(using OrderRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insert(unsaved: OrderRowUnsaved): ZIO[ZConnection, Throwable, OrderRow] = {
    val fs = List(
      Some((sql""""user_id"""", sql"${Segment.paramSegment(unsaved.userId)(Setter.optionParamSetter(UserId.setter))}::uuid")),
      Some((sql""""product_id"""", sql"${Segment.paramSegment(unsaved.productId)(Setter.optionParamSetter(ProductId.setter))}::uuid")),
      Some((sql""""total"""", sql"${Segment.paramSegment(unsaved.total)(Setter.bigDecimalScalaSetter)}::numeric")),
      Some((sql""""shipped_at"""", sql"${Segment.paramSegment(unsaved.shippedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""id"""", sql"${Segment.paramSegment(value: OrderId)(OrderId.setter)}::uuid"))
      },
      unsaved.status match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""status"""", sql"${Segment.paramSegment(value: Option[OrderStatus])(Setter.optionParamSetter(OrderStatus.setter))}::frontpage.order_status"))
      },
      unsaved.createdAt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""created_at"""", sql"${Segment.paramSegment(value: Option[TypoLocalDateTime])(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."order" default values
            returning "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text
         """
    } else {
      val names  = fs.map { case (n, _) => n }.mkFragment(SqlFragment(", "))
      val values = fs.map { case (_, f) => f }.mkFragment(SqlFragment(", "))
      sql"""insert into "frontpage"."order"($names) values ($values) returning "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text"""
    }
    q.insertReturning(using OrderRow.jdbcDecoder).map(_.updatedKeys.head)
    
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, OrderRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."order"("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at") FROM STDIN""", batchSize, unsaved)(OrderRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: ZStream[ZConnection, Throwable, OrderRowUnsaved], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."order"("user_id", "product_id", "total", "shipped_at", "id", "status", "created_at") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""", batchSize, unsaved)(OrderRowUnsaved.text)
  }
  override def select: SelectBuilder[OrderFields, OrderRow] = {
    SelectBuilderSql(""""frontpage"."order"""", OrderFields.structure, OrderRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, OrderRow] = {
    sql"""select "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text from "frontpage"."order"""".query(using OrderRow.jdbcDecoder).selectStream()
  }
  override def selectById(id: OrderId): ZIO[ZConnection, Throwable, Option[OrderRow]] = {
    sql"""select "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text from "frontpage"."order" where "id" = ${Segment.paramSegment(id)(OrderId.setter)}""".query(using OrderRow.jdbcDecoder).selectOne
  }
  override def selectByIds(ids: Array[OrderId]): ZStream[ZConnection, Throwable, OrderRow] = {
    sql"""select "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text from "frontpage"."order" where "id" = ANY(${Segment.paramSegment(ids)(OrderId.arraySetter)})""".query(using OrderRow.jdbcDecoder).selectStream()
  }
  override def selectByIdsTracked(ids: Array[OrderId]): ZIO[ZConnection, Throwable, Map[OrderId, OrderRow]] = {
    selectByIds(ids).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[OrderFields, OrderRow] = {
    UpdateBuilder(""""frontpage"."order"""", OrderFields.structure, OrderRow.jdbcDecoder)
  }
  override def update(row: OrderRow): ZIO[ZConnection, Throwable, Boolean] = {
    val id = row.id
    sql"""update "frontpage"."order"
          set "user_id" = ${Segment.paramSegment(row.userId)(Setter.optionParamSetter(UserId.setter))}::uuid,
              "product_id" = ${Segment.paramSegment(row.productId)(Setter.optionParamSetter(ProductId.setter))}::uuid,
              "status" = ${Segment.paramSegment(row.status)(Setter.optionParamSetter(OrderStatus.setter))}::frontpage.order_status,
              "total" = ${Segment.paramSegment(row.total)(Setter.bigDecimalScalaSetter)}::numeric,
              "created_at" = ${Segment.paramSegment(row.createdAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp,
              "shipped_at" = ${Segment.paramSegment(row.shippedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp
          where "id" = ${Segment.paramSegment(id)(OrderId.setter)}""".update.map(_ > 0)
  }
  override def upsert(unsaved: OrderRow): ZIO[ZConnection, Throwable, UpdateResult[OrderRow]] = {
    sql"""insert into "frontpage"."order"("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")
          values (
            ${Segment.paramSegment(unsaved.id)(OrderId.setter)}::uuid,
            ${Segment.paramSegment(unsaved.userId)(Setter.optionParamSetter(UserId.setter))}::uuid,
            ${Segment.paramSegment(unsaved.productId)(Setter.optionParamSetter(ProductId.setter))}::uuid,
            ${Segment.paramSegment(unsaved.status)(Setter.optionParamSetter(OrderStatus.setter))}::frontpage.order_status,
            ${Segment.paramSegment(unsaved.total)(Setter.bigDecimalScalaSetter)}::numeric,
            ${Segment.paramSegment(unsaved.createdAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp,
            ${Segment.paramSegment(unsaved.shippedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp
          )
          on conflict ("id")
          do update set
            "user_id" = EXCLUDED."user_id",
            "product_id" = EXCLUDED."product_id",
            "status" = EXCLUDED."status",
            "total" = EXCLUDED."total",
            "created_at" = EXCLUDED."created_at",
            "shipped_at" = EXCLUDED."shipped_at"
          returning "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text""".insertReturning(using OrderRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, OrderRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table order_TEMP (like "frontpage"."order") on commit drop""".execute
    val copied = streamingInsert(s"""copy order_TEMP("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at") from stdin""", batchSize, unsaved)(OrderRow.text)
    val merged = sql"""insert into "frontpage"."order"("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")
                       select * from order_TEMP
                       on conflict ("id")
                       do update set
                         "user_id" = EXCLUDED."user_id",
                         "product_id" = EXCLUDED."product_id",
                         "status" = EXCLUDED."status",
                         "total" = EXCLUDED."total",
                         "created_at" = EXCLUDED."created_at",
                         "shipped_at" = EXCLUDED."shipped_at"
                       ;
                       drop table order_TEMP;""".update
    created *> copied *> merged
  }
}
