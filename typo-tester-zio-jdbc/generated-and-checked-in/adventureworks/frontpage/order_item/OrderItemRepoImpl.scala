/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order_item

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.order.OrderId
import adventureworks.frontpage.product.ProductId
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class OrderItemRepoImpl extends OrderItemRepo {
  override def delete: DeleteBuilder[OrderItemFields, OrderItemRow] = {
    DeleteBuilder(""""frontpage"."order_item"""", OrderItemFields.structure)
  }
  override def deleteById(id: OrderItemId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "frontpage"."order_item" where "id" = ${Segment.paramSegment(id)(OrderItemId.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(ids: Array[OrderItemId]): ZIO[ZConnection, Throwable, Long] = {
    sql"""delete from "frontpage"."order_item" where "id" = ANY(${ids})""".delete
  }
  override def insert(unsaved: OrderItemRow): ZIO[ZConnection, Throwable, OrderItemRow] = {
    sql"""insert into "frontpage"."order_item"("id", "order_id", "product_id", "quantity", "price", "shipped_at")
          values (${Segment.paramSegment(unsaved.id)(OrderItemId.setter)}::uuid, ${Segment.paramSegment(unsaved.orderId)(Setter.optionParamSetter(OrderId.setter))}::uuid, ${Segment.paramSegment(unsaved.productId)(Setter.optionParamSetter(ProductId.setter))}::uuid, ${Segment.paramSegment(unsaved.quantity)(Setter.intSetter)}::int4, ${Segment.paramSegment(unsaved.price)(Setter.bigDecimalScalaSetter)}::numeric, ${Segment.paramSegment(unsaved.shippedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp)
          returning "id", "order_id", "product_id", "quantity", "price", "shipped_at"::text
       """.insertReturning(using OrderItemRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insert(unsaved: OrderItemRowUnsaved): ZIO[ZConnection, Throwable, OrderItemRow] = {
    val fs = List(
      Some((sql""""order_id"""", sql"${Segment.paramSegment(unsaved.orderId)(Setter.optionParamSetter(OrderId.setter))}::uuid")),
      Some((sql""""product_id"""", sql"${Segment.paramSegment(unsaved.productId)(Setter.optionParamSetter(ProductId.setter))}::uuid")),
      Some((sql""""quantity"""", sql"${Segment.paramSegment(unsaved.quantity)(Setter.intSetter)}::int4")),
      Some((sql""""price"""", sql"${Segment.paramSegment(unsaved.price)(Setter.bigDecimalScalaSetter)}::numeric")),
      Some((sql""""shipped_at"""", sql"${Segment.paramSegment(unsaved.shippedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""id"""", sql"${Segment.paramSegment(value: OrderItemId)(OrderItemId.setter)}::uuid"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."order_item" default values
            returning "id", "order_id", "product_id", "quantity", "price", "shipped_at"::text
         """
    } else {
      val names  = fs.map { case (n, _) => n }.mkFragment(SqlFragment(", "))
      val values = fs.map { case (_, f) => f }.mkFragment(SqlFragment(", "))
      sql"""insert into "frontpage"."order_item"($names) values ($values) returning "id", "order_id", "product_id", "quantity", "price", "shipped_at"::text"""
    }
    q.insertReturning(using OrderItemRow.jdbcDecoder).map(_.updatedKeys.head)
    
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, OrderItemRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."order_item"("id", "order_id", "product_id", "quantity", "price", "shipped_at") FROM STDIN""", batchSize, unsaved)(OrderItemRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: ZStream[ZConnection, Throwable, OrderItemRowUnsaved], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."order_item"("order_id", "product_id", "quantity", "price", "shipped_at", "id") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""", batchSize, unsaved)(OrderItemRowUnsaved.text)
  }
  override def select: SelectBuilder[OrderItemFields, OrderItemRow] = {
    SelectBuilderSql(""""frontpage"."order_item"""", OrderItemFields.structure, OrderItemRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, OrderItemRow] = {
    sql"""select "id", "order_id", "product_id", "quantity", "price", "shipped_at"::text from "frontpage"."order_item"""".query(using OrderItemRow.jdbcDecoder).selectStream()
  }
  override def selectById(id: OrderItemId): ZIO[ZConnection, Throwable, Option[OrderItemRow]] = {
    sql"""select "id", "order_id", "product_id", "quantity", "price", "shipped_at"::text from "frontpage"."order_item" where "id" = ${Segment.paramSegment(id)(OrderItemId.setter)}""".query(using OrderItemRow.jdbcDecoder).selectOne
  }
  override def selectByIds(ids: Array[OrderItemId]): ZStream[ZConnection, Throwable, OrderItemRow] = {
    sql"""select "id", "order_id", "product_id", "quantity", "price", "shipped_at"::text from "frontpage"."order_item" where "id" = ANY(${Segment.paramSegment(ids)(OrderItemId.arraySetter)})""".query(using OrderItemRow.jdbcDecoder).selectStream()
  }
  override def selectByIdsTracked(ids: Array[OrderItemId]): ZIO[ZConnection, Throwable, Map[OrderItemId, OrderItemRow]] = {
    selectByIds(ids).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[OrderItemFields, OrderItemRow] = {
    UpdateBuilder(""""frontpage"."order_item"""", OrderItemFields.structure, OrderItemRow.jdbcDecoder)
  }
  override def update(row: OrderItemRow): ZIO[ZConnection, Throwable, Boolean] = {
    val id = row.id
    sql"""update "frontpage"."order_item"
          set "order_id" = ${Segment.paramSegment(row.orderId)(Setter.optionParamSetter(OrderId.setter))}::uuid,
              "product_id" = ${Segment.paramSegment(row.productId)(Setter.optionParamSetter(ProductId.setter))}::uuid,
              "quantity" = ${Segment.paramSegment(row.quantity)(Setter.intSetter)}::int4,
              "price" = ${Segment.paramSegment(row.price)(Setter.bigDecimalScalaSetter)}::numeric,
              "shipped_at" = ${Segment.paramSegment(row.shippedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp
          where "id" = ${Segment.paramSegment(id)(OrderItemId.setter)}""".update.map(_ > 0)
  }
  override def upsert(unsaved: OrderItemRow): ZIO[ZConnection, Throwable, UpdateResult[OrderItemRow]] = {
    sql"""insert into "frontpage"."order_item"("id", "order_id", "product_id", "quantity", "price", "shipped_at")
          values (
            ${Segment.paramSegment(unsaved.id)(OrderItemId.setter)}::uuid,
            ${Segment.paramSegment(unsaved.orderId)(Setter.optionParamSetter(OrderId.setter))}::uuid,
            ${Segment.paramSegment(unsaved.productId)(Setter.optionParamSetter(ProductId.setter))}::uuid,
            ${Segment.paramSegment(unsaved.quantity)(Setter.intSetter)}::int4,
            ${Segment.paramSegment(unsaved.price)(Setter.bigDecimalScalaSetter)}::numeric,
            ${Segment.paramSegment(unsaved.shippedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp
          )
          on conflict ("id")
          do update set
            "order_id" = EXCLUDED."order_id",
            "product_id" = EXCLUDED."product_id",
            "quantity" = EXCLUDED."quantity",
            "price" = EXCLUDED."price",
            "shipped_at" = EXCLUDED."shipped_at"
          returning "id", "order_id", "product_id", "quantity", "price", "shipped_at"::text""".insertReturning(using OrderItemRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, OrderItemRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table order_item_TEMP (like "frontpage"."order_item") on commit drop""".execute
    val copied = streamingInsert(s"""copy order_item_TEMP("id", "order_id", "product_id", "quantity", "price", "shipped_at") from stdin""", batchSize, unsaved)(OrderItemRow.text)
    val merged = sql"""insert into "frontpage"."order_item"("id", "order_id", "product_id", "quantity", "price", "shipped_at")
                       select * from order_item_TEMP
                       on conflict ("id")
                       do update set
                         "order_id" = EXCLUDED."order_id",
                         "product_id" = EXCLUDED."product_id",
                         "quantity" = EXCLUDED."quantity",
                         "price" = EXCLUDED."price",
                         "shipped_at" = EXCLUDED."shipped_at"
                       ;
                       drop table order_item_TEMP;""".update
    created *> copied *> merged
  }
}
