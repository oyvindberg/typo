/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order_item

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.order.OrderId
import adventureworks.frontpage.product.ProductId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `frontpage.order_item` which has not been persisted yet */
case class OrderItemRowUnsaved(
  /** Points to [[order.OrderRow.id]] */
  orderId: Option[OrderId],
  /** Points to [[product.ProductRow.id]] */
  productId: Option[ProductId],
  quantity: Int,
  price: BigDecimal,
  shippedAt: Option[TypoLocalDateTime],
  /** Default: gen_random_uuid() */
  id: Defaulted[OrderItemId] = Defaulted.UseDefault
) {
  def toRow(idDefault: => OrderItemId): OrderItemRow =
    OrderItemRow(
      orderId = orderId,
      productId = productId,
      quantity = quantity,
      price = price,
      shippedAt = shippedAt,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           }
    )
}
object OrderItemRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[OrderItemRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val orderId = jsonObj.get("order_id").fold[Either[String, Option[OrderId]]](Right(None))(_.as(JsonDecoder.option(using OrderId.jsonDecoder)))
    val productId = jsonObj.get("product_id").fold[Either[String, Option[ProductId]]](Right(None))(_.as(JsonDecoder.option(using ProductId.jsonDecoder)))
    val quantity = jsonObj.get("quantity").toRight("Missing field 'quantity'").flatMap(_.as(JsonDecoder.int))
    val price = jsonObj.get("price").toRight("Missing field 'price'").flatMap(_.as(JsonDecoder.scalaBigDecimal))
    val shippedAt = jsonObj.get("shipped_at").fold[Either[String, Option[TypoLocalDateTime]]](Right(None))(_.as(JsonDecoder.option(using TypoLocalDateTime.jsonDecoder)))
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(Defaulted.jsonDecoder(OrderItemId.jsonDecoder)))
    if (orderId.isRight && productId.isRight && quantity.isRight && price.isRight && shippedAt.isRight && id.isRight)
      Right(OrderItemRowUnsaved(orderId = orderId.toOption.get, productId = productId.toOption.get, quantity = quantity.toOption.get, price = price.toOption.get, shippedAt = shippedAt.toOption.get, id = id.toOption.get))
    else Left(List[Either[String, Any]](orderId, productId, quantity, price, shippedAt, id).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[OrderItemRowUnsaved] = new JsonEncoder[OrderItemRowUnsaved] {
    override def unsafeEncode(a: OrderItemRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""order_id":""")
      JsonEncoder.option(using OrderId.jsonEncoder).unsafeEncode(a.orderId, indent, out)
      out.write(",")
      out.write(""""product_id":""")
      JsonEncoder.option(using ProductId.jsonEncoder).unsafeEncode(a.productId, indent, out)
      out.write(",")
      out.write(""""quantity":""")
      JsonEncoder.int.unsafeEncode(a.quantity, indent, out)
      out.write(",")
      out.write(""""price":""")
      JsonEncoder.scalaBigDecimal.unsafeEncode(a.price, indent, out)
      out.write(",")
      out.write(""""shipped_at":""")
      JsonEncoder.option(using TypoLocalDateTime.jsonEncoder).unsafeEncode(a.shippedAt, indent, out)
      out.write(",")
      out.write(""""id":""")
      Defaulted.jsonEncoder(OrderItemId.jsonEncoder).unsafeEncode(a.id, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[OrderItemRowUnsaved] = Text.instance[OrderItemRowUnsaved]{ (row, sb) =>
    Text.option(OrderId.text).unsafeEncode(row.orderId, sb)
    sb.append(Text.DELIMETER)
    Text.option(ProductId.text).unsafeEncode(row.productId, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.quantity, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.price, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.shippedAt, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(OrderItemId.text).unsafeEncode(row.id, sb)
  }
}
