/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLocalDateTime
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class ProductRepoImpl extends ProductRepo {
  override def delete: DeleteBuilder[ProductFields, ProductRow] = {
    DeleteBuilder(""""frontpage"."product"""", ProductFields.structure)
  }
  override def deleteById(id: ProductId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "frontpage"."product" where "id" = ${Segment.paramSegment(id)(ProductId.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(ids: Array[ProductId]): ZIO[ZConnection, Throwable, Long] = {
    sql"""delete from "frontpage"."product" where "id" = ANY(${ids})""".delete
  }
  override def insert(unsaved: ProductRow): ZIO[ZConnection, Throwable, ProductRow] = {
    sql"""insert into "frontpage"."product"("id", "name", "price", "in_stock", "quantity", "last_restocked", "last_modified", "tags", "categories", "prices", "attributes")
          values (${Segment.paramSegment(unsaved.id)(ProductId.setter)}::uuid, ${Segment.paramSegment(unsaved.name)(Setter.stringSetter)}, ${Segment.paramSegment(unsaved.price)(Setter.bigDecimalScalaSetter)}::numeric, ${Segment.paramSegment(unsaved.inStock)(Setter.optionParamSetter(Setter.booleanSetter))}, ${Segment.paramSegment(unsaved.quantity)(Setter.optionParamSetter(Setter.intSetter))}::int4, ${Segment.paramSegment(unsaved.lastRestocked)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp, ${Segment.paramSegment(unsaved.lastModified)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp, ${Segment.paramSegment(unsaved.tags)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::text[], ${Segment.paramSegment(unsaved.categories)(Setter.optionParamSetter(adventureworks.IntArraySetter))}::int4[], ${Segment.paramSegment(unsaved.prices)(Setter.optionParamSetter(adventureworks.ScalaBigDecimalArraySetter))}::numeric[], ${Segment.paramSegment(unsaved.attributes)(Setter.optionParamSetter(TypoJsonb.arraySetter))}::jsonb[])
          returning "id", "name", "price", "in_stock", "quantity", "last_restocked"::text, "last_modified"::text, "tags", "categories", "prices", "attributes"
       """.insertReturning(using ProductRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insert(unsaved: ProductRowUnsaved): ZIO[ZConnection, Throwable, ProductRow] = {
    val fs = List(
      Some((sql""""name"""", sql"${Segment.paramSegment(unsaved.name)(Setter.stringSetter)}")),
      Some((sql""""price"""", sql"${Segment.paramSegment(unsaved.price)(Setter.bigDecimalScalaSetter)}::numeric")),
      Some((sql""""last_restocked"""", sql"${Segment.paramSegment(unsaved.lastRestocked)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""id"""", sql"${Segment.paramSegment(value: ProductId)(ProductId.setter)}::uuid"))
      },
      unsaved.inStock match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""in_stock"""", sql"${Segment.paramSegment(value: Option[Boolean])(Setter.optionParamSetter(Setter.booleanSetter))}"))
      },
      unsaved.quantity match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""quantity"""", sql"${Segment.paramSegment(value: Option[Int])(Setter.optionParamSetter(Setter.intSetter))}::int4"))
      },
      unsaved.lastModified match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""last_modified"""", sql"${Segment.paramSegment(value: Option[TypoLocalDateTime])(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp"))
      },
      unsaved.tags match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""tags"""", sql"${Segment.paramSegment(value: Option[Array[String]])(Setter.optionParamSetter(adventureworks.StringArraySetter))}::text[]"))
      },
      unsaved.categories match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""categories"""", sql"${Segment.paramSegment(value: Option[Array[Int]])(Setter.optionParamSetter(adventureworks.IntArraySetter))}::int4[]"))
      },
      unsaved.prices match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""prices"""", sql"${Segment.paramSegment(value: Option[Array[BigDecimal]])(Setter.optionParamSetter(adventureworks.ScalaBigDecimalArraySetter))}::numeric[]"))
      },
      unsaved.attributes match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""attributes"""", sql"${Segment.paramSegment(value: Option[Array[TypoJsonb]])(Setter.optionParamSetter(TypoJsonb.arraySetter))}::jsonb[]"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."product" default values
            returning "id", "name", "price", "in_stock", "quantity", "last_restocked"::text, "last_modified"::text, "tags", "categories", "prices", "attributes"
         """
    } else {
      val names  = fs.map { case (n, _) => n }.mkFragment(SqlFragment(", "))
      val values = fs.map { case (_, f) => f }.mkFragment(SqlFragment(", "))
      sql"""insert into "frontpage"."product"($names) values ($values) returning "id", "name", "price", "in_stock", "quantity", "last_restocked"::text, "last_modified"::text, "tags", "categories", "prices", "attributes""""
    }
    q.insertReturning(using ProductRow.jdbcDecoder).map(_.updatedKeys.head)
    
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, ProductRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."product"("id", "name", "price", "in_stock", "quantity", "last_restocked", "last_modified", "tags", "categories", "prices", "attributes") FROM STDIN""", batchSize, unsaved)(ProductRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: ZStream[ZConnection, Throwable, ProductRowUnsaved], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."product"("name", "price", "last_restocked", "id", "in_stock", "quantity", "last_modified", "tags", "categories", "prices", "attributes") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""", batchSize, unsaved)(ProductRowUnsaved.text)
  }
  override def select: SelectBuilder[ProductFields, ProductRow] = {
    SelectBuilderSql(""""frontpage"."product"""", ProductFields.structure, ProductRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, ProductRow] = {
    sql"""select "id", "name", "price", "in_stock", "quantity", "last_restocked"::text, "last_modified"::text, "tags", "categories", "prices", "attributes" from "frontpage"."product"""".query(using ProductRow.jdbcDecoder).selectStream()
  }
  override def selectById(id: ProductId): ZIO[ZConnection, Throwable, Option[ProductRow]] = {
    sql"""select "id", "name", "price", "in_stock", "quantity", "last_restocked"::text, "last_modified"::text, "tags", "categories", "prices", "attributes" from "frontpage"."product" where "id" = ${Segment.paramSegment(id)(ProductId.setter)}""".query(using ProductRow.jdbcDecoder).selectOne
  }
  override def selectByIds(ids: Array[ProductId]): ZStream[ZConnection, Throwable, ProductRow] = {
    sql"""select "id", "name", "price", "in_stock", "quantity", "last_restocked"::text, "last_modified"::text, "tags", "categories", "prices", "attributes" from "frontpage"."product" where "id" = ANY(${Segment.paramSegment(ids)(ProductId.arraySetter)})""".query(using ProductRow.jdbcDecoder).selectStream()
  }
  override def selectByIdsTracked(ids: Array[ProductId]): ZIO[ZConnection, Throwable, Map[ProductId, ProductRow]] = {
    selectByIds(ids).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[ProductFields, ProductRow] = {
    UpdateBuilder(""""frontpage"."product"""", ProductFields.structure, ProductRow.jdbcDecoder)
  }
  override def update(row: ProductRow): ZIO[ZConnection, Throwable, Boolean] = {
    val id = row.id
    sql"""update "frontpage"."product"
          set "name" = ${Segment.paramSegment(row.name)(Setter.stringSetter)},
              "price" = ${Segment.paramSegment(row.price)(Setter.bigDecimalScalaSetter)}::numeric,
              "in_stock" = ${Segment.paramSegment(row.inStock)(Setter.optionParamSetter(Setter.booleanSetter))},
              "quantity" = ${Segment.paramSegment(row.quantity)(Setter.optionParamSetter(Setter.intSetter))}::int4,
              "last_restocked" = ${Segment.paramSegment(row.lastRestocked)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp,
              "last_modified" = ${Segment.paramSegment(row.lastModified)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp,
              "tags" = ${Segment.paramSegment(row.tags)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::text[],
              "categories" = ${Segment.paramSegment(row.categories)(Setter.optionParamSetter(adventureworks.IntArraySetter))}::int4[],
              "prices" = ${Segment.paramSegment(row.prices)(Setter.optionParamSetter(adventureworks.ScalaBigDecimalArraySetter))}::numeric[],
              "attributes" = ${Segment.paramSegment(row.attributes)(Setter.optionParamSetter(TypoJsonb.arraySetter))}::jsonb[]
          where "id" = ${Segment.paramSegment(id)(ProductId.setter)}""".update.map(_ > 0)
  }
  override def upsert(unsaved: ProductRow): ZIO[ZConnection, Throwable, UpdateResult[ProductRow]] = {
    sql"""insert into "frontpage"."product"("id", "name", "price", "in_stock", "quantity", "last_restocked", "last_modified", "tags", "categories", "prices", "attributes")
          values (
            ${Segment.paramSegment(unsaved.id)(ProductId.setter)}::uuid,
            ${Segment.paramSegment(unsaved.name)(Setter.stringSetter)},
            ${Segment.paramSegment(unsaved.price)(Setter.bigDecimalScalaSetter)}::numeric,
            ${Segment.paramSegment(unsaved.inStock)(Setter.optionParamSetter(Setter.booleanSetter))},
            ${Segment.paramSegment(unsaved.quantity)(Setter.optionParamSetter(Setter.intSetter))}::int4,
            ${Segment.paramSegment(unsaved.lastRestocked)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp,
            ${Segment.paramSegment(unsaved.lastModified)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp,
            ${Segment.paramSegment(unsaved.tags)(Setter.optionParamSetter(adventureworks.StringArraySetter))}::text[],
            ${Segment.paramSegment(unsaved.categories)(Setter.optionParamSetter(adventureworks.IntArraySetter))}::int4[],
            ${Segment.paramSegment(unsaved.prices)(Setter.optionParamSetter(adventureworks.ScalaBigDecimalArraySetter))}::numeric[],
            ${Segment.paramSegment(unsaved.attributes)(Setter.optionParamSetter(TypoJsonb.arraySetter))}::jsonb[]
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name",
            "price" = EXCLUDED."price",
            "in_stock" = EXCLUDED."in_stock",
            "quantity" = EXCLUDED."quantity",
            "last_restocked" = EXCLUDED."last_restocked",
            "last_modified" = EXCLUDED."last_modified",
            "tags" = EXCLUDED."tags",
            "categories" = EXCLUDED."categories",
            "prices" = EXCLUDED."prices",
            "attributes" = EXCLUDED."attributes"
          returning "id", "name", "price", "in_stock", "quantity", "last_restocked"::text, "last_modified"::text, "tags", "categories", "prices", "attributes"""".insertReturning(using ProductRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, ProductRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table product_TEMP (like "frontpage"."product") on commit drop""".execute
    val copied = streamingInsert(s"""copy product_TEMP("id", "name", "price", "in_stock", "quantity", "last_restocked", "last_modified", "tags", "categories", "prices", "attributes") from stdin""", batchSize, unsaved)(ProductRow.text)
    val merged = sql"""insert into "frontpage"."product"("id", "name", "price", "in_stock", "quantity", "last_restocked", "last_modified", "tags", "categories", "prices", "attributes")
                       select * from product_TEMP
                       on conflict ("id")
                       do update set
                         "name" = EXCLUDED."name",
                         "price" = EXCLUDED."price",
                         "in_stock" = EXCLUDED."in_stock",
                         "quantity" = EXCLUDED."quantity",
                         "last_restocked" = EXCLUDED."last_restocked",
                         "last_modified" = EXCLUDED."last_modified",
                         "tags" = EXCLUDED."tags",
                         "categories" = EXCLUDED."categories",
                         "prices" = EXCLUDED."prices",
                         "attributes" = EXCLUDED."attributes"
                       ;
                       drop table product_TEMP;""".update
    created *> copied *> merged
  }
}
