/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.user.UserId
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class UserPermissionRepoImpl extends UserPermissionRepo {
  override def delete: DeleteBuilder[UserPermissionFields, UserPermissionRow] = {
    DeleteBuilder(""""frontpage"."user_permission"""", UserPermissionFields.structure)
  }
  override def deleteById(compositeId: UserPermissionId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "frontpage"."user_permission" where "user_id" = ${Segment.paramSegment(compositeId.userId)(UserId.setter)} AND "permission_id" = ${Segment.paramSegment(compositeId.permissionId)(PermissionId.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(compositeIds: Array[UserPermissionId]): ZIO[ZConnection, Throwable, Long] = {
    val userId = compositeIds.map(_.userId)
    val permissionId = compositeIds.map(_.permissionId)
    sql"""delete
          from "frontpage"."user_permission"
          where ("user_id", "permission_id")
          in (select unnest(${userId}), unnest(${permissionId}))
       """.delete
    
  }
  override def insert(unsaved: UserPermissionRow): ZIO[ZConnection, Throwable, UserPermissionRow] = {
    sql"""insert into "frontpage"."user_permission"("user_id", "permission_id", "granted_at")
          values (${Segment.paramSegment(unsaved.userId)(UserId.setter)}::uuid, ${Segment.paramSegment(unsaved.permissionId)(PermissionId.setter)}::uuid, ${Segment.paramSegment(unsaved.grantedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp)
          returning "user_id", "permission_id", "granted_at"::text
       """.insertReturning(using UserPermissionRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insert(unsaved: UserPermissionRowUnsaved): ZIO[ZConnection, Throwable, UserPermissionRow] = {
    val fs = List(
      Some((sql""""user_id"""", sql"${Segment.paramSegment(unsaved.userId)(UserId.setter)}::uuid")),
      Some((sql""""permission_id"""", sql"${Segment.paramSegment(unsaved.permissionId)(PermissionId.setter)}::uuid")),
      unsaved.grantedAt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""granted_at"""", sql"${Segment.paramSegment(value: Option[TypoLocalDateTime])(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."user_permission" default values
            returning "user_id", "permission_id", "granted_at"::text
         """
    } else {
      val names  = fs.map { case (n, _) => n }.mkFragment(SqlFragment(", "))
      val values = fs.map { case (_, f) => f }.mkFragment(SqlFragment(", "))
      sql"""insert into "frontpage"."user_permission"($names) values ($values) returning "user_id", "permission_id", "granted_at"::text"""
    }
    q.insertReturning(using UserPermissionRow.jdbcDecoder).map(_.updatedKeys.head)
    
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, UserPermissionRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."user_permission"("user_id", "permission_id", "granted_at") FROM STDIN""", batchSize, unsaved)(UserPermissionRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: ZStream[ZConnection, Throwable, UserPermissionRowUnsaved], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."user_permission"("user_id", "permission_id", "granted_at") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""", batchSize, unsaved)(UserPermissionRowUnsaved.text)
  }
  override def select: SelectBuilder[UserPermissionFields, UserPermissionRow] = {
    SelectBuilderSql(""""frontpage"."user_permission"""", UserPermissionFields.structure, UserPermissionRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, UserPermissionRow] = {
    sql"""select "user_id", "permission_id", "granted_at"::text from "frontpage"."user_permission"""".query(using UserPermissionRow.jdbcDecoder).selectStream()
  }
  override def selectById(compositeId: UserPermissionId): ZIO[ZConnection, Throwable, Option[UserPermissionRow]] = {
    sql"""select "user_id", "permission_id", "granted_at"::text from "frontpage"."user_permission" where "user_id" = ${Segment.paramSegment(compositeId.userId)(UserId.setter)} AND "permission_id" = ${Segment.paramSegment(compositeId.permissionId)(PermissionId.setter)}""".query(using UserPermissionRow.jdbcDecoder).selectOne
  }
  override def selectByIds(compositeIds: Array[UserPermissionId]): ZStream[ZConnection, Throwable, UserPermissionRow] = {
    val userId = compositeIds.map(_.userId)
    val permissionId = compositeIds.map(_.permissionId)
    sql"""select "user_id", "permission_id", "granted_at"::text
          from "frontpage"."user_permission"
          where ("user_id", "permission_id")
          in (select unnest(${userId}), unnest(${permissionId}))
       """.query(using UserPermissionRow.jdbcDecoder).selectStream()
    
  }
  override def selectByIdsTracked(compositeIds: Array[UserPermissionId]): ZIO[ZConnection, Throwable, Map[UserPermissionId, UserPermissionRow]] = {
    selectByIds(compositeIds).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.compositeId, x)).toMap
      compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[UserPermissionFields, UserPermissionRow] = {
    UpdateBuilder(""""frontpage"."user_permission"""", UserPermissionFields.structure, UserPermissionRow.jdbcDecoder)
  }
  override def update(row: UserPermissionRow): ZIO[ZConnection, Throwable, Boolean] = {
    val compositeId = row.compositeId
    sql"""update "frontpage"."user_permission"
          set "granted_at" = ${Segment.paramSegment(row.grantedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp
          where "user_id" = ${Segment.paramSegment(compositeId.userId)(UserId.setter)} AND "permission_id" = ${Segment.paramSegment(compositeId.permissionId)(PermissionId.setter)}""".update.map(_ > 0)
  }
  override def upsert(unsaved: UserPermissionRow): ZIO[ZConnection, Throwable, UpdateResult[UserPermissionRow]] = {
    sql"""insert into "frontpage"."user_permission"("user_id", "permission_id", "granted_at")
          values (
            ${Segment.paramSegment(unsaved.userId)(UserId.setter)}::uuid,
            ${Segment.paramSegment(unsaved.permissionId)(PermissionId.setter)}::uuid,
            ${Segment.paramSegment(unsaved.grantedAt)(Setter.optionParamSetter(TypoLocalDateTime.setter))}::timestamp
          )
          on conflict ("user_id", "permission_id")
          do update set
            "granted_at" = EXCLUDED."granted_at"
          returning "user_id", "permission_id", "granted_at"::text""".insertReturning(using UserPermissionRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, UserPermissionRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table user_permission_TEMP (like "frontpage"."user_permission") on commit drop""".execute
    val copied = streamingInsert(s"""copy user_permission_TEMP("user_id", "permission_id", "granted_at") from stdin""", batchSize, unsaved)(UserPermissionRow.text)
    val merged = sql"""insert into "frontpage"."user_permission"("user_id", "permission_id", "granted_at")
                       select * from user_permission_TEMP
                       on conflict ("user_id", "permission_id")
                       do update set
                         "granted_at" = EXCLUDED."granted_at"
                       ;
                       drop table user_permission_TEMP;""".update
    created *> copied *> merged
  }
}
