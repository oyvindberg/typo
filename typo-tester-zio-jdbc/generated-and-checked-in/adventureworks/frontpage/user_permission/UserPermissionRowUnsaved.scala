/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.user.UserId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `frontpage.user_permission` which has not been persisted yet */
case class UserPermissionRowUnsaved(
  /** Points to [[user.UserRow.id]] */
  userId: UserId,
  /** Points to [[permission.PermissionRow.id]] */
  permissionId: PermissionId,
  /** Default: now() */
  grantedAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.UseDefault
) {
  def toRow(grantedAtDefault: => Option[TypoLocalDateTime]): UserPermissionRow =
    UserPermissionRow(
      userId = userId,
      permissionId = permissionId,
      grantedAt = grantedAt match {
                    case Defaulted.UseDefault => grantedAtDefault
                    case Defaulted.Provided(value) => value
                  }
    )
}
object UserPermissionRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[UserPermissionRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val userId = jsonObj.get("user_id").toRight("Missing field 'user_id'").flatMap(_.as(UserId.jsonDecoder))
    val permissionId = jsonObj.get("permission_id").toRight("Missing field 'permission_id'").flatMap(_.as(PermissionId.jsonDecoder))
    val grantedAt = jsonObj.get("granted_at").toRight("Missing field 'granted_at'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.option(using TypoLocalDateTime.jsonDecoder))))
    if (userId.isRight && permissionId.isRight && grantedAt.isRight)
      Right(UserPermissionRowUnsaved(userId = userId.toOption.get, permissionId = permissionId.toOption.get, grantedAt = grantedAt.toOption.get))
    else Left(List[Either[String, Any]](userId, permissionId, grantedAt).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[UserPermissionRowUnsaved] = new JsonEncoder[UserPermissionRowUnsaved] {
    override def unsafeEncode(a: UserPermissionRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""user_id":""")
      UserId.jsonEncoder.unsafeEncode(a.userId, indent, out)
      out.write(",")
      out.write(""""permission_id":""")
      PermissionId.jsonEncoder.unsafeEncode(a.permissionId, indent, out)
      out.write(",")
      out.write(""""granted_at":""")
      Defaulted.jsonEncoder(JsonEncoder.option(using TypoLocalDateTime.jsonEncoder)).unsafeEncode(a.grantedAt, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[UserPermissionRowUnsaved] = Text.instance[UserPermissionRowUnsaved]{ (row, sb) =>
    UserId.text.unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    PermissionId.text.unsafeEncode(row.permissionId, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoLocalDateTime.text)).unsafeEncode(row.grantedAt, sb)
  }
}
