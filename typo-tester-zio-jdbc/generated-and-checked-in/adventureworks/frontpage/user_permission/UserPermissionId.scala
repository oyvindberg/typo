/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.user.UserId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `frontpage.user_permission` */
case class UserPermissionId(
  userId: UserId,
  permissionId: PermissionId
)
object UserPermissionId {
  implicit lazy val jsonDecoder: JsonDecoder[UserPermissionId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val userId = jsonObj.get("user_id").toRight("Missing field 'user_id'").flatMap(_.as(UserId.jsonDecoder))
    val permissionId = jsonObj.get("permission_id").toRight("Missing field 'permission_id'").flatMap(_.as(PermissionId.jsonDecoder))
    if (userId.isRight && permissionId.isRight)
      Right(UserPermissionId(userId = userId.toOption.get, permissionId = permissionId.toOption.get))
    else Left(List[Either[String, Any]](userId, permissionId).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[UserPermissionId] = new JsonEncoder[UserPermissionId] {
    override def unsafeEncode(a: UserPermissionId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""user_id":""")
      UserId.jsonEncoder.unsafeEncode(a.userId, indent, out)
      out.write(",")
      out.write(""""permission_id":""")
      PermissionId.jsonEncoder.unsafeEncode(a.permissionId, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[UserPermissionId] = Ordering.by(x => (x.userId, x.permissionId))
}
