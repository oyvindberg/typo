/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.user.UserId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: frontpage.user_permission
    Composite primary key: user_id, permission_id */
case class UserPermissionRow(
  /** Points to [[user.UserRow.id]] */
  userId: UserId,
  /** Points to [[permission.PermissionRow.id]] */
  permissionId: PermissionId,
  /** Default: now() */
  grantedAt: Option[TypoLocalDateTime]
){
   val compositeId: UserPermissionId = UserPermissionId(userId, permissionId)
   val id = compositeId
   def toUnsavedRow(grantedAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.Provided(this.grantedAt)): UserPermissionRowUnsaved =
     UserPermissionRowUnsaved(userId, permissionId, grantedAt)
 }

object UserPermissionRow {
  def apply(compositeId: UserPermissionId, grantedAt: Option[TypoLocalDateTime]) =
    new UserPermissionRow(compositeId.userId, compositeId.permissionId, grantedAt)
  implicit lazy val jdbcDecoder: JdbcDecoder[UserPermissionRow] = new JdbcDecoder[UserPermissionRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, UserPermissionRow) =
      columIndex + 2 ->
        UserPermissionRow(
          userId = UserId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          permissionId = PermissionId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          grantedAt = JdbcDecoder.optionDecoder(TypoLocalDateTime.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[UserPermissionRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val userId = jsonObj.get("user_id").toRight("Missing field 'user_id'").flatMap(_.as(UserId.jsonDecoder))
    val permissionId = jsonObj.get("permission_id").toRight("Missing field 'permission_id'").flatMap(_.as(PermissionId.jsonDecoder))
    val grantedAt = jsonObj.get("granted_at").fold[Either[String, Option[TypoLocalDateTime]]](Right(None))(_.as(JsonDecoder.option(using TypoLocalDateTime.jsonDecoder)))
    if (userId.isRight && permissionId.isRight && grantedAt.isRight)
      Right(UserPermissionRow(userId = userId.toOption.get, permissionId = permissionId.toOption.get, grantedAt = grantedAt.toOption.get))
    else Left(List[Either[String, Any]](userId, permissionId, grantedAt).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[UserPermissionRow] = new JsonEncoder[UserPermissionRow] {
    override def unsafeEncode(a: UserPermissionRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""user_id":""")
      UserId.jsonEncoder.unsafeEncode(a.userId, indent, out)
      out.write(",")
      out.write(""""permission_id":""")
      PermissionId.jsonEncoder.unsafeEncode(a.permissionId, indent, out)
      out.write(",")
      out.write(""""granted_at":""")
      JsonEncoder.option(using TypoLocalDateTime.jsonEncoder).unsafeEncode(a.grantedAt, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[UserPermissionRow] = Text.instance[UserPermissionRow]{ (row, sb) =>
    UserId.text.unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    PermissionId.text.unsafeEncode(row.permissionId, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.grantedAt, sb)
  }
}
