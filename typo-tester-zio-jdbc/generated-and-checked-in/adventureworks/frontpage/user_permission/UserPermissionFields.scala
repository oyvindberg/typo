/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.permission.PermissionFields
import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.permission.PermissionRow
import adventureworks.frontpage.user.UserFields
import adventureworks.frontpage.user.UserId
import adventureworks.frontpage.user.UserRow
import typo.dsl.ForeignKey
import typo.dsl.Path
import typo.dsl.Required
import typo.dsl.SqlExpr
import typo.dsl.SqlExpr.CompositeIn
import typo.dsl.SqlExpr.CompositeIn.TuplePart
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

trait UserPermissionFields {
  def userId: IdField[UserId, UserPermissionRow]
  def permissionId: IdField[PermissionId, UserPermissionRow]
  def grantedAt: OptField[TypoLocalDateTime, UserPermissionRow]
  def fkPermission: ForeignKey[PermissionFields, PermissionRow] =
    ForeignKey[PermissionFields, PermissionRow]("frontpage.user_permission_permission_id_fkey", Nil)
      .withColumnPair(permissionId, _.id)
  def fkUser: ForeignKey[UserFields, UserRow] =
    ForeignKey[UserFields, UserRow]("frontpage.user_permission_user_id_fkey", Nil)
      .withColumnPair(userId, _.id)
  def compositeIdIs(compositeId: UserPermissionId): SqlExpr[Boolean, Required] =
    userId.isEqual(compositeId.userId).and(permissionId.isEqual(compositeId.permissionId))
  def compositeIdIn(compositeIds: Array[UserPermissionId]): SqlExpr[Boolean, Required] =
    new CompositeIn(compositeIds)(TuplePart(userId)(_.userId), TuplePart(permissionId)(_.permissionId))
  
}

object UserPermissionFields {
  lazy val structure: Relation[UserPermissionFields, UserPermissionRow] =
    new Impl(Nil)
    
  private final class Impl(val _path: List[Path])
    extends Relation[UserPermissionFields, UserPermissionRow] {
  
    override lazy val fields: UserPermissionFields = new UserPermissionFields {
      override def userId = IdField[UserId, UserPermissionRow](_path, "user_id", None, Some("uuid"), x => x.userId, (row, value) => row.copy(userId = value))
      override def permissionId = IdField[PermissionId, UserPermissionRow](_path, "permission_id", None, Some("uuid"), x => x.permissionId, (row, value) => row.copy(permissionId = value))
      override def grantedAt = OptField[TypoLocalDateTime, UserPermissionRow](_path, "granted_at", Some("text"), Some("timestamp"), x => x.grantedAt, (row, value) => row.copy(grantedAt = value))
    }
  
    override lazy val columns: List[FieldLikeNoHkt[?, UserPermissionRow]] =
      List[FieldLikeNoHkt[?, UserPermissionRow]](fields.userId, fields.permissionId, fields.grantedAt)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
