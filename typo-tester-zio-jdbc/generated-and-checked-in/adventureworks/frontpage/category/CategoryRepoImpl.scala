/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package category

import adventureworks.customtypes.Defaulted
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.SqlFragment.Setter
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class CategoryRepoImpl extends CategoryRepo {
  override def delete: DeleteBuilder[CategoryFields, CategoryRow] = {
    DeleteBuilder(""""frontpage"."category"""", CategoryFields.structure)
  }
  override def deleteById(id: CategoryId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "frontpage"."category" where "id" = ${Segment.paramSegment(id)(CategoryId.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(ids: Array[CategoryId]): ZIO[ZConnection, Throwable, Long] = {
    sql"""delete from "frontpage"."category" where "id" = ANY(${ids})""".delete
  }
  override def insert(unsaved: CategoryRow): ZIO[ZConnection, Throwable, CategoryRow] = {
    sql"""insert into "frontpage"."category"("id", "name")
          values (${Segment.paramSegment(unsaved.id)(CategoryId.setter)}::uuid, ${Segment.paramSegment(unsaved.name)(Setter.stringSetter)})
          returning "id", "name"
       """.insertReturning(using CategoryRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insert(unsaved: CategoryRowUnsaved): ZIO[ZConnection, Throwable, CategoryRow] = {
    val fs = List(
      Some((sql""""name"""", sql"${Segment.paramSegment(unsaved.name)(Setter.stringSetter)}")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((sql""""id"""", sql"${Segment.paramSegment(value: CategoryId)(CategoryId.setter)}::uuid"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."category" default values
            returning "id", "name"
         """
    } else {
      val names  = fs.map { case (n, _) => n }.mkFragment(SqlFragment(", "))
      val values = fs.map { case (_, f) => f }.mkFragment(SqlFragment(", "))
      sql"""insert into "frontpage"."category"($names) values ($values) returning "id", "name""""
    }
    q.insertReturning(using CategoryRow.jdbcDecoder).map(_.updatedKeys.head)
    
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, CategoryRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."category"("id", "name") FROM STDIN""", batchSize, unsaved)(CategoryRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: ZStream[ZConnection, Throwable, CategoryRowUnsaved], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."category"("name", "id") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""", batchSize, unsaved)(CategoryRowUnsaved.text)
  }
  override def select: SelectBuilder[CategoryFields, CategoryRow] = {
    SelectBuilderSql(""""frontpage"."category"""", CategoryFields.structure, CategoryRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, CategoryRow] = {
    sql"""select "id", "name" from "frontpage"."category"""".query(using CategoryRow.jdbcDecoder).selectStream()
  }
  override def selectById(id: CategoryId): ZIO[ZConnection, Throwable, Option[CategoryRow]] = {
    sql"""select "id", "name" from "frontpage"."category" where "id" = ${Segment.paramSegment(id)(CategoryId.setter)}""".query(using CategoryRow.jdbcDecoder).selectOne
  }
  override def selectByIds(ids: Array[CategoryId]): ZStream[ZConnection, Throwable, CategoryRow] = {
    sql"""select "id", "name" from "frontpage"."category" where "id" = ANY(${Segment.paramSegment(ids)(CategoryId.arraySetter)})""".query(using CategoryRow.jdbcDecoder).selectStream()
  }
  override def selectByIdsTracked(ids: Array[CategoryId]): ZIO[ZConnection, Throwable, Map[CategoryId, CategoryRow]] = {
    selectByIds(ids).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[CategoryFields, CategoryRow] = {
    UpdateBuilder(""""frontpage"."category"""", CategoryFields.structure, CategoryRow.jdbcDecoder)
  }
  override def update(row: CategoryRow): ZIO[ZConnection, Throwable, Boolean] = {
    val id = row.id
    sql"""update "frontpage"."category"
          set "name" = ${Segment.paramSegment(row.name)(Setter.stringSetter)}
          where "id" = ${Segment.paramSegment(id)(CategoryId.setter)}""".update.map(_ > 0)
  }
  override def upsert(unsaved: CategoryRow): ZIO[ZConnection, Throwable, UpdateResult[CategoryRow]] = {
    sql"""insert into "frontpage"."category"("id", "name")
          values (
            ${Segment.paramSegment(unsaved.id)(CategoryId.setter)}::uuid,
            ${Segment.paramSegment(unsaved.name)(Setter.stringSetter)}
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name"
          returning "id", "name"""".insertReturning(using CategoryRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, CategoryRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table category_TEMP (like "frontpage"."category") on commit drop""".execute
    val copied = streamingInsert(s"""copy category_TEMP("id", "name") from stdin""", batchSize, unsaved)(CategoryRow.text)
    val merged = sql"""insert into "frontpage"."category"("id", "name")
                       select * from category_TEMP
                       on conflict ("id")
                       do update set
                         "name" = EXCLUDED."name"
                       ;
                       drop table category_TEMP;""".update
    created *> copied *> merged
  }
}
