/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package role

import adventureworks.customtypes.Defaulted
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: frontpage.role
    Primary key: id */
case class RoleRow(
  /** Default: gen_random_uuid() */
  id: RoleId,
  name: String
){
   def toUnsavedRow(id: Defaulted[RoleId]): RoleRowUnsaved =
     RoleRowUnsaved(name, id)
 }

object RoleRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[RoleRow] = new JdbcDecoder[RoleRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, RoleRow) =
      columIndex + 1 ->
        RoleRow(
          id = RoleId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          name = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[RoleRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(RoleId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(JsonDecoder.string))
    if (id.isRight && name.isRight)
      Right(RoleRow(id = id.toOption.get, name = name.toOption.get))
    else Left(List[Either[String, Any]](id, name).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[RoleRow] = new JsonEncoder[RoleRow] {
    override def unsafeEncode(a: RoleRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      RoleId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""name":""")
      JsonEncoder.string.unsafeEncode(a.name, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[RoleRow] = Text.instance[RoleRow]{ (row, sb) =>
    RoleId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
  }
}
