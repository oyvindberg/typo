/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package department

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.company.CompanyId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: frontpage.department
    Primary key: id */
case class DepartmentRow(
  /** Default: gen_random_uuid() */
  id: DepartmentId,
  name: String,
  budget: Option[BigDecimal],
  /** Points to [[company.CompanyRow.id]] */
  companyId: Option[CompanyId]
){
   def toUnsavedRow(id: Defaulted[DepartmentId]): DepartmentRowUnsaved =
     DepartmentRowUnsaved(name, budget, companyId, id)
 }

object DepartmentRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[DepartmentRow] = new JdbcDecoder[DepartmentRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, DepartmentRow) =
      columIndex + 3 ->
        DepartmentRow(
          id = DepartmentId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          name = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 1, rs)._2,
          budget = JdbcDecoder.optionDecoder(JdbcDecoder.bigDecimalDecoderScala).unsafeDecode(columIndex + 2, rs)._2,
          companyId = JdbcDecoder.optionDecoder(CompanyId.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[DepartmentRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(DepartmentId.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(JsonDecoder.string))
    val budget = jsonObj.get("budget").fold[Either[String, Option[BigDecimal]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.scalaBigDecimal)))
    val companyId = jsonObj.get("company_id").fold[Either[String, Option[CompanyId]]](Right(None))(_.as(JsonDecoder.option(using CompanyId.jsonDecoder)))
    if (id.isRight && name.isRight && budget.isRight && companyId.isRight)
      Right(DepartmentRow(id = id.toOption.get, name = name.toOption.get, budget = budget.toOption.get, companyId = companyId.toOption.get))
    else Left(List[Either[String, Any]](id, name, budget, companyId).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[DepartmentRow] = new JsonEncoder[DepartmentRow] {
    override def unsafeEncode(a: DepartmentRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      DepartmentId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""name":""")
      JsonEncoder.string.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""budget":""")
      JsonEncoder.option(using JsonEncoder.scalaBigDecimal).unsafeEncode(a.budget, indent, out)
      out.write(",")
      out.write(""""company_id":""")
      JsonEncoder.option(using CompanyId.jsonEncoder).unsafeEncode(a.companyId, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[DepartmentRow] = Text.instance[DepartmentRow]{ (row, sb) =>
    DepartmentId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.budget, sb)
    sb.append(Text.DELIMETER)
    Text.option(CompanyId.text).unsafeEncode(row.companyId, sb)
  }
}
