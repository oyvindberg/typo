/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.department.DepartmentId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: frontpage.user
    Primary key: id */
case class UserRow(
  /** Default: gen_random_uuid() */
  id: UserId,
  email: Email,
  name: String,
  /** Default: now() */
  createdAt: Option[TypoLocalDateTime],
  /** Points to [[department.DepartmentRow.id]] */
  departmentId: Option[DepartmentId],
  /** Default: 'active'::frontpage.user_status */
  status: Option[UserStatus],
  /** Default: false */
  verified: Option[Boolean],
  /** Points to [[UserRow.id]] */
  managerId: Option[UserId],
  /** Default: 'employee'::frontpage.user_role */
  role: Option[UserRole]
){
   def toUnsavedRow(id: Defaulted[UserId], createdAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.Provided(this.createdAt), status: Defaulted[Option[UserStatus]] = Defaulted.Provided(this.status), verified: Defaulted[Option[Boolean]] = Defaulted.Provided(this.verified), role: Defaulted[Option[UserRole]] = Defaulted.Provided(this.role)): UserRowUnsaved =
     UserRowUnsaved(email, name, departmentId, managerId, id, createdAt, status, verified, role)
 }

object UserRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[UserRow] = new JdbcDecoder[UserRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, UserRow) =
      columIndex + 8 ->
        UserRow(
          id = UserId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          email = Email.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2,
          name = JdbcDecoder.stringDecoder.unsafeDecode(columIndex + 2, rs)._2,
          createdAt = JdbcDecoder.optionDecoder(TypoLocalDateTime.jdbcDecoder).unsafeDecode(columIndex + 3, rs)._2,
          departmentId = JdbcDecoder.optionDecoder(DepartmentId.jdbcDecoder).unsafeDecode(columIndex + 4, rs)._2,
          status = JdbcDecoder.optionDecoder(UserStatus.jdbcDecoder).unsafeDecode(columIndex + 5, rs)._2,
          verified = JdbcDecoder.optionDecoder(JdbcDecoder.booleanDecoder).unsafeDecode(columIndex + 6, rs)._2,
          managerId = JdbcDecoder.optionDecoder(UserId.jdbcDecoder).unsafeDecode(columIndex + 7, rs)._2,
          role = JdbcDecoder.optionDecoder(UserRole.jdbcDecoder).unsafeDecode(columIndex + 8, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[UserRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(UserId.jsonDecoder))
    val email = jsonObj.get("email").toRight("Missing field 'email'").flatMap(_.as(Email.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(JsonDecoder.string))
    val createdAt = jsonObj.get("created_at").fold[Either[String, Option[TypoLocalDateTime]]](Right(None))(_.as(JsonDecoder.option(using TypoLocalDateTime.jsonDecoder)))
    val departmentId = jsonObj.get("department_id").fold[Either[String, Option[DepartmentId]]](Right(None))(_.as(JsonDecoder.option(using DepartmentId.jsonDecoder)))
    val status = jsonObj.get("status").fold[Either[String, Option[UserStatus]]](Right(None))(_.as(JsonDecoder.option(using UserStatus.jsonDecoder)))
    val verified = jsonObj.get("verified").fold[Either[String, Option[Boolean]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.boolean)))
    val managerId = jsonObj.get("manager_id").fold[Either[String, Option[UserId]]](Right(None))(_.as(JsonDecoder.option(using UserId.jsonDecoder)))
    val role = jsonObj.get("role").fold[Either[String, Option[UserRole]]](Right(None))(_.as(JsonDecoder.option(using UserRole.jsonDecoder)))
    if (id.isRight && email.isRight && name.isRight && createdAt.isRight && departmentId.isRight && status.isRight && verified.isRight && managerId.isRight && role.isRight)
      Right(UserRow(id = id.toOption.get, email = email.toOption.get, name = name.toOption.get, createdAt = createdAt.toOption.get, departmentId = departmentId.toOption.get, status = status.toOption.get, verified = verified.toOption.get, managerId = managerId.toOption.get, role = role.toOption.get))
    else Left(List[Either[String, Any]](id, email, name, createdAt, departmentId, status, verified, managerId, role).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[UserRow] = new JsonEncoder[UserRow] {
    override def unsafeEncode(a: UserRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""id":""")
      UserId.jsonEncoder.unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""email":""")
      Email.jsonEncoder.unsafeEncode(a.email, indent, out)
      out.write(",")
      out.write(""""name":""")
      JsonEncoder.string.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""created_at":""")
      JsonEncoder.option(using TypoLocalDateTime.jsonEncoder).unsafeEncode(a.createdAt, indent, out)
      out.write(",")
      out.write(""""department_id":""")
      JsonEncoder.option(using DepartmentId.jsonEncoder).unsafeEncode(a.departmentId, indent, out)
      out.write(",")
      out.write(""""status":""")
      JsonEncoder.option(using UserStatus.jsonEncoder).unsafeEncode(a.status, indent, out)
      out.write(",")
      out.write(""""verified":""")
      JsonEncoder.option(using JsonEncoder.boolean).unsafeEncode(a.verified, indent, out)
      out.write(",")
      out.write(""""manager_id":""")
      JsonEncoder.option(using UserId.jsonEncoder).unsafeEncode(a.managerId, indent, out)
      out.write(",")
      out.write(""""role":""")
      JsonEncoder.option(using UserRole.jsonEncoder).unsafeEncode(a.role, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[UserRow] = Text.instance[UserRow]{ (row, sb) =>
    UserId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Email.text.unsafeEncode(row.email, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.createdAt, sb)
    sb.append(Text.DELIMETER)
    Text.option(DepartmentId.text).unsafeEncode(row.departmentId, sb)
    sb.append(Text.DELIMETER)
    Text.option(UserStatus.text).unsafeEncode(row.status, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.booleanInstance).unsafeEncode(row.verified, sb)
    sb.append(Text.DELIMETER)
    Text.option(UserId.text).unsafeEncode(row.managerId, sb)
    sb.append(Text.DELIMETER)
    Text.option(UserRole.text).unsafeEncode(row.role, sb)
  }
}
