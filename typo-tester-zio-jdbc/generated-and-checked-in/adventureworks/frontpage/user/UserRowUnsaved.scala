/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.department.DepartmentId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** This class corresponds to a row in table `frontpage.user` which has not been persisted yet */
case class UserRowUnsaved(
  email: Email,
  name: String,
  /** Points to [[department.DepartmentRow.id]] */
  departmentId: Option[DepartmentId],
  /** Points to [[UserRow.id]] */
  managerId: Option[UserId],
  /** Default: gen_random_uuid() */
  id: Defaulted[UserId] = Defaulted.UseDefault,
  /** Default: now() */
  createdAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.UseDefault,
  /** Default: 'active'::frontpage.user_status */
  status: Defaulted[Option[UserStatus]] = Defaulted.UseDefault,
  /** Default: false */
  verified: Defaulted[Option[Boolean]] = Defaulted.UseDefault,
  /** Default: 'employee'::frontpage.user_role */
  role: Defaulted[Option[UserRole]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => UserId, createdAtDefault: => Option[TypoLocalDateTime], statusDefault: => Option[UserStatus], verifiedDefault: => Option[Boolean], roleDefault: => Option[UserRole]): UserRow =
    UserRow(
      email = email,
      name = name,
      departmentId = departmentId,
      managerId = managerId,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      createdAt = createdAt match {
                    case Defaulted.UseDefault => createdAtDefault
                    case Defaulted.Provided(value) => value
                  },
      status = status match {
                 case Defaulted.UseDefault => statusDefault
                 case Defaulted.Provided(value) => value
               },
      verified = verified match {
                   case Defaulted.UseDefault => verifiedDefault
                   case Defaulted.Provided(value) => value
                 },
      role = role match {
               case Defaulted.UseDefault => roleDefault
               case Defaulted.Provided(value) => value
             }
    )
}
object UserRowUnsaved {
  implicit lazy val jsonDecoder: JsonDecoder[UserRowUnsaved] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val email = jsonObj.get("email").toRight("Missing field 'email'").flatMap(_.as(Email.jsonDecoder))
    val name = jsonObj.get("name").toRight("Missing field 'name'").flatMap(_.as(JsonDecoder.string))
    val departmentId = jsonObj.get("department_id").fold[Either[String, Option[DepartmentId]]](Right(None))(_.as(JsonDecoder.option(using DepartmentId.jsonDecoder)))
    val managerId = jsonObj.get("manager_id").fold[Either[String, Option[UserId]]](Right(None))(_.as(JsonDecoder.option(using UserId.jsonDecoder)))
    val id = jsonObj.get("id").toRight("Missing field 'id'").flatMap(_.as(Defaulted.jsonDecoder(UserId.jsonDecoder)))
    val createdAt = jsonObj.get("created_at").toRight("Missing field 'created_at'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.option(using TypoLocalDateTime.jsonDecoder))))
    val status = jsonObj.get("status").toRight("Missing field 'status'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.option(using UserStatus.jsonDecoder))))
    val verified = jsonObj.get("verified").toRight("Missing field 'verified'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.option(using JsonDecoder.boolean))))
    val role = jsonObj.get("role").toRight("Missing field 'role'").flatMap(_.as(Defaulted.jsonDecoder(JsonDecoder.option(using UserRole.jsonDecoder))))
    if (email.isRight && name.isRight && departmentId.isRight && managerId.isRight && id.isRight && createdAt.isRight && status.isRight && verified.isRight && role.isRight)
      Right(UserRowUnsaved(email = email.toOption.get, name = name.toOption.get, departmentId = departmentId.toOption.get, managerId = managerId.toOption.get, id = id.toOption.get, createdAt = createdAt.toOption.get, status = status.toOption.get, verified = verified.toOption.get, role = role.toOption.get))
    else Left(List[Either[String, Any]](email, name, departmentId, managerId, id, createdAt, status, verified, role).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[UserRowUnsaved] = new JsonEncoder[UserRowUnsaved] {
    override def unsafeEncode(a: UserRowUnsaved, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""email":""")
      Email.jsonEncoder.unsafeEncode(a.email, indent, out)
      out.write(",")
      out.write(""""name":""")
      JsonEncoder.string.unsafeEncode(a.name, indent, out)
      out.write(",")
      out.write(""""department_id":""")
      JsonEncoder.option(using DepartmentId.jsonEncoder).unsafeEncode(a.departmentId, indent, out)
      out.write(",")
      out.write(""""manager_id":""")
      JsonEncoder.option(using UserId.jsonEncoder).unsafeEncode(a.managerId, indent, out)
      out.write(",")
      out.write(""""id":""")
      Defaulted.jsonEncoder(UserId.jsonEncoder).unsafeEncode(a.id, indent, out)
      out.write(",")
      out.write(""""created_at":""")
      Defaulted.jsonEncoder(JsonEncoder.option(using TypoLocalDateTime.jsonEncoder)).unsafeEncode(a.createdAt, indent, out)
      out.write(",")
      out.write(""""status":""")
      Defaulted.jsonEncoder(JsonEncoder.option(using UserStatus.jsonEncoder)).unsafeEncode(a.status, indent, out)
      out.write(",")
      out.write(""""verified":""")
      Defaulted.jsonEncoder(JsonEncoder.option(using JsonEncoder.boolean)).unsafeEncode(a.verified, indent, out)
      out.write(",")
      out.write(""""role":""")
      Defaulted.jsonEncoder(JsonEncoder.option(using UserRole.jsonEncoder)).unsafeEncode(a.role, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[UserRowUnsaved] = Text.instance[UserRowUnsaved]{ (row, sb) =>
    Email.text.unsafeEncode(row.email, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(DepartmentId.text).unsafeEncode(row.departmentId, sb)
    sb.append(Text.DELIMETER)
    Text.option(UserId.text).unsafeEncode(row.managerId, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(UserId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoLocalDateTime.text)).unsafeEncode(row.createdAt, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(UserStatus.text)).unsafeEncode(row.status, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.booleanInstance)).unsafeEncode(row.verified, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(UserRole.text)).unsafeEncode(row.role, sb)
  }
}
