/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product_category

import adventureworks.frontpage.category.CategoryId
import adventureworks.frontpage.product.ProductId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Table: frontpage.product_category
    Composite primary key: product_id, category_id */
case class ProductCategoryRow(
  /** Points to [[product.ProductRow.id]] */
  productId: ProductId,
  /** Points to [[category.CategoryRow.id]] */
  categoryId: CategoryId
){
   val compositeId: ProductCategoryId = ProductCategoryId(productId, categoryId)
   val id = compositeId
 }

object ProductCategoryRow {
  def apply(compositeId: ProductCategoryId) =
    new ProductCategoryRow(compositeId.productId, compositeId.categoryId)
  implicit lazy val jdbcDecoder: JdbcDecoder[ProductCategoryRow] = new JdbcDecoder[ProductCategoryRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, ProductCategoryRow) =
      columIndex + 1 ->
        ProductCategoryRow(
          productId = ProductId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          categoryId = CategoryId.jdbcDecoder.unsafeDecode(columIndex + 1, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[ProductCategoryRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val productId = jsonObj.get("product_id").toRight("Missing field 'product_id'").flatMap(_.as(ProductId.jsonDecoder))
    val categoryId = jsonObj.get("category_id").toRight("Missing field 'category_id'").flatMap(_.as(CategoryId.jsonDecoder))
    if (productId.isRight && categoryId.isRight)
      Right(ProductCategoryRow(productId = productId.toOption.get, categoryId = categoryId.toOption.get))
    else Left(List[Either[String, Any]](productId, categoryId).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ProductCategoryRow] = new JsonEncoder[ProductCategoryRow] {
    override def unsafeEncode(a: ProductCategoryRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""product_id":""")
      ProductId.jsonEncoder.unsafeEncode(a.productId, indent, out)
      out.write(",")
      out.write(""""category_id":""")
      CategoryId.jsonEncoder.unsafeEncode(a.categoryId, indent, out)
      out.write("}")
    }
  }
  implicit lazy val text: Text[ProductCategoryRow] = Text.instance[ProductCategoryRow]{ (row, sb) =>
    ProductId.text.unsafeEncode(row.productId, sb)
    sb.append(Text.DELIMETER)
    CategoryId.text.unsafeEncode(row.categoryId, sb)
  }
}
