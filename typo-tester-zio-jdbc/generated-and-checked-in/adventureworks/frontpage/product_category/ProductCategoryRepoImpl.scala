/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product_category

import adventureworks.frontpage.category.CategoryId
import adventureworks.frontpage.product.ProductId
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder
import zio.ZIO
import zio.jdbc.SqlFragment.Segment
import zio.jdbc.UpdateResult
import zio.jdbc.ZConnection
import zio.jdbc.sqlInterpolator
import zio.stream.ZStream

class ProductCategoryRepoImpl extends ProductCategoryRepo {
  override def delete: DeleteBuilder[ProductCategoryFields, ProductCategoryRow] = {
    DeleteBuilder(""""frontpage"."product_category"""", ProductCategoryFields.structure)
  }
  override def deleteById(compositeId: ProductCategoryId): ZIO[ZConnection, Throwable, Boolean] = {
    sql"""delete from "frontpage"."product_category" where "product_id" = ${Segment.paramSegment(compositeId.productId)(ProductId.setter)} AND "category_id" = ${Segment.paramSegment(compositeId.categoryId)(CategoryId.setter)}""".delete.map(_ > 0)
  }
  override def deleteByIds(compositeIds: Array[ProductCategoryId]): ZIO[ZConnection, Throwable, Long] = {
    val productId = compositeIds.map(_.productId)
    val categoryId = compositeIds.map(_.categoryId)
    sql"""delete
          from "frontpage"."product_category"
          where ("product_id", "category_id")
          in (select unnest(${productId}), unnest(${categoryId}))
       """.delete
    
  }
  override def insert(unsaved: ProductCategoryRow): ZIO[ZConnection, Throwable, ProductCategoryRow] = {
    sql"""insert into "frontpage"."product_category"("product_id", "category_id")
          values (${Segment.paramSegment(unsaved.productId)(ProductId.setter)}::uuid, ${Segment.paramSegment(unsaved.categoryId)(CategoryId.setter)}::uuid)
          returning "product_id", "category_id"
       """.insertReturning(using ProductCategoryRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  override def insertStreaming(unsaved: ZStream[ZConnection, Throwable, ProductCategoryRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    streamingInsert(s"""COPY "frontpage"."product_category"("product_id", "category_id") FROM STDIN""", batchSize, unsaved)(ProductCategoryRow.text)
  }
  override def select: SelectBuilder[ProductCategoryFields, ProductCategoryRow] = {
    SelectBuilderSql(""""frontpage"."product_category"""", ProductCategoryFields.structure, ProductCategoryRow.jdbcDecoder)
  }
  override def selectAll: ZStream[ZConnection, Throwable, ProductCategoryRow] = {
    sql"""select "product_id", "category_id" from "frontpage"."product_category"""".query(using ProductCategoryRow.jdbcDecoder).selectStream()
  }
  override def selectById(compositeId: ProductCategoryId): ZIO[ZConnection, Throwable, Option[ProductCategoryRow]] = {
    sql"""select "product_id", "category_id" from "frontpage"."product_category" where "product_id" = ${Segment.paramSegment(compositeId.productId)(ProductId.setter)} AND "category_id" = ${Segment.paramSegment(compositeId.categoryId)(CategoryId.setter)}""".query(using ProductCategoryRow.jdbcDecoder).selectOne
  }
  override def selectByIds(compositeIds: Array[ProductCategoryId]): ZStream[ZConnection, Throwable, ProductCategoryRow] = {
    val productId = compositeIds.map(_.productId)
    val categoryId = compositeIds.map(_.categoryId)
    sql"""select "product_id", "category_id"
          from "frontpage"."product_category"
          where ("product_id", "category_id")
          in (select unnest(${productId}), unnest(${categoryId}))
       """.query(using ProductCategoryRow.jdbcDecoder).selectStream()
    
  }
  override def selectByIdsTracked(compositeIds: Array[ProductCategoryId]): ZIO[ZConnection, Throwable, Map[ProductCategoryId, ProductCategoryRow]] = {
    selectByIds(compositeIds).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.compositeId, x)).toMap
      compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[ProductCategoryFields, ProductCategoryRow] = {
    UpdateBuilder(""""frontpage"."product_category"""", ProductCategoryFields.structure, ProductCategoryRow.jdbcDecoder)
  }
  override def upsert(unsaved: ProductCategoryRow): ZIO[ZConnection, Throwable, UpdateResult[ProductCategoryRow]] = {
    sql"""insert into "frontpage"."product_category"("product_id", "category_id")
          values (
            ${Segment.paramSegment(unsaved.productId)(ProductId.setter)}::uuid,
            ${Segment.paramSegment(unsaved.categoryId)(CategoryId.setter)}::uuid
          )
          on conflict ("product_id", "category_id")
          do update set "product_id" = EXCLUDED."product_id"
          returning "product_id", "category_id"""".insertReturning(using ProductCategoryRow.jdbcDecoder)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, ProductCategoryRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"""create temporary table product_category_TEMP (like "frontpage"."product_category") on commit drop""".execute
    val copied = streamingInsert(s"""copy product_category_TEMP("product_id", "category_id") from stdin""", batchSize, unsaved)(ProductCategoryRow.text)
    val merged = sql"""insert into "frontpage"."product_category"("product_id", "category_id")
                       select * from product_category_TEMP
                       on conflict ("product_id", "category_id")
                       do nothing
                       ;
                       drop table product_category_TEMP;""".update
    created *> copied *> merged
  }
}
