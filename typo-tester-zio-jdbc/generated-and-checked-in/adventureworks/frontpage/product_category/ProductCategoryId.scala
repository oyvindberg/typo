/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product_category

import adventureworks.frontpage.category.CategoryId
import adventureworks.frontpage.product.ProductId
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/** Type for the composite primary key of table `frontpage.product_category` */
case class ProductCategoryId(
  productId: ProductId,
  categoryId: CategoryId
)
object ProductCategoryId {
  implicit lazy val jsonDecoder: JsonDecoder[ProductCategoryId] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val productId = jsonObj.get("product_id").toRight("Missing field 'product_id'").flatMap(_.as(ProductId.jsonDecoder))
    val categoryId = jsonObj.get("category_id").toRight("Missing field 'category_id'").flatMap(_.as(CategoryId.jsonDecoder))
    if (productId.isRight && categoryId.isRight)
      Right(ProductCategoryId(productId = productId.toOption.get, categoryId = categoryId.toOption.get))
    else Left(List[Either[String, Any]](productId, categoryId).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[ProductCategoryId] = new JsonEncoder[ProductCategoryId] {
    override def unsafeEncode(a: ProductCategoryId, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""product_id":""")
      ProductId.jsonEncoder.unsafeEncode(a.productId, indent, out)
      out.write(",")
      out.write(""""category_id":""")
      CategoryId.jsonEncoder.unsafeEncode(a.categoryId, indent, out)
      out.write("}")
    }
  }
  implicit lazy val ordering: Ordering[ProductCategoryId] = Ordering.by(x => (x.productId, x.categoryId))
}
