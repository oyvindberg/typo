/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public

import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Domain `public.Flag`
  * No constraint
  */
case class Flag(value: Boolean) extends AnyVal
object Flag {
  implicit def ordering(implicit ev: Ordering[Boolean]): Ordering[Flag] = Ordering.by(_.value)
  implicit val encoder: Encoder[Flag] =
    Encoder[Boolean].contramap(_.value)
  implicit val decoder: Decoder[Flag] =
    Decoder[Boolean].map(Flag(_))
  implicit val metaArray: Meta[Array[Flag]] = Meta[Array[Boolean]].imap(_.map(Flag.apply))(_.map(_.value))
  implicit val meta: Meta[Flag] = Meta[Boolean].imap(Flag.apply)(_.value)
}
