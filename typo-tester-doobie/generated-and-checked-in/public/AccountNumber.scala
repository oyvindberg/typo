/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public

import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder

/** Domain `public.AccountNumber`
  * No constraint
  */
case class AccountNumber(value: String) extends AnyVal
object AccountNumber {
  implicit val arrayGet: Get[Array[AccountNumber]] = Get[Array[String]].map(_.map(AccountNumber.apply))
  implicit val arrayPut: Put[Array[AccountNumber]] = Put[Array[String]].contramap(_.map(_.value))
  implicit val decoder: Decoder[AccountNumber] = Decoder[String].map(AccountNumber.apply)
  implicit val encoder: Encoder[AccountNumber] = Encoder[String].contramap(_.value)
  implicit val get: Get[AccountNumber] = Get[String].map(AccountNumber.apply)
  implicit val ordering: Ordering[AccountNumber] = Ordering.by(_.value)
  implicit val put: Put[AccountNumber] = Put[String].contramap(_.value)
}
