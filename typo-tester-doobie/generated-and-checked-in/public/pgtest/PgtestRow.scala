/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtest

import adventureworks.TypoBox
import adventureworks.TypoCircle
import adventureworks.TypoHStore
import adventureworks.TypoInet
import adventureworks.TypoInterval
import adventureworks.TypoJson
import adventureworks.TypoJsonb
import adventureworks.TypoLine
import adventureworks.TypoLineSegment
import adventureworks.TypoLocalDate
import adventureworks.TypoLocalDateTime
import adventureworks.TypoLocalTime
import adventureworks.TypoMoney
import adventureworks.TypoOffsetDateTime
import adventureworks.TypoOffsetTime
import adventureworks.TypoPath
import adventureworks.TypoPoint
import adventureworks.TypoPolygon
import adventureworks.TypoXml
import doobie.enumerated.Nullability
import doobie.util.Read
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.util.UUID
import scala.util.Try

case class PgtestRow(
  box: TypoBox,
  circle: TypoCircle,
  line: TypoLine,
  lseg: TypoLineSegment,
  path: TypoPath,
  point: TypoPoint,
  polygon: TypoPolygon,
  interval: TypoInterval,
  money: TypoMoney,
  xml: TypoXml,
  json: TypoJson,
  jsonb: TypoJsonb,
  hstore: TypoHStore,
  inet: TypoInet,
  timestamp: TypoLocalDateTime,
  timestampz: TypoOffsetDateTime,
  time: TypoLocalTime,
  timez: TypoOffsetTime,
  date: TypoLocalDate,
  uuid: UUID,
  boxes: Array[TypoBox],
  circlees: Array[TypoCircle],
  linees: Array[TypoLine],
  lseges: Array[TypoLineSegment],
  pathes: Array[TypoPath],
  pointes: Array[TypoPoint],
  polygones: Array[TypoPolygon],
  intervales: Array[TypoInterval],
  moneyes: Array[TypoMoney],
  xmles: Array[TypoXml],
  jsones: Array[TypoJson],
  jsonbes: Array[TypoJsonb],
  hstores: Array[TypoHStore],
  inets: Array[TypoInet],
  timestamps: Array[TypoLocalDateTime],
  timestampzs: Array[TypoOffsetDateTime],
  times: Array[TypoLocalTime],
  timezs: Array[TypoOffsetTime],
  dates: Array[TypoLocalDate],
  uuids: Array[UUID]
)

object PgtestRow {
  implicit val decoder: Decoder[PgtestRow] = Decoder.instanceTry[PgtestRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      PgtestRow(
        box = orThrow(c.get("box")(TypoBox.decoder)),
        circle = orThrow(c.get("circle")(TypoCircle.decoder)),
        line = orThrow(c.get("line")(TypoLine.decoder)),
        lseg = orThrow(c.get("lseg")(TypoLineSegment.decoder)),
        path = orThrow(c.get("path")(TypoPath.decoder)),
        point = orThrow(c.get("point")(TypoPoint.decoder)),
        polygon = orThrow(c.get("polygon")(TypoPolygon.decoder)),
        interval = orThrow(c.get("interval")(TypoInterval.decoder)),
        money = orThrow(c.get("money")(TypoMoney.decoder)),
        xml = orThrow(c.get("xml")(TypoXml.decoder)),
        json = orThrow(c.get("json")(TypoJson.decoder)),
        jsonb = orThrow(c.get("jsonb")(TypoJsonb.decoder)),
        hstore = orThrow(c.get("hstore")(TypoHStore.decoder)),
        inet = orThrow(c.get("inet")(TypoInet.decoder)),
        timestamp = orThrow(c.get("timestamp")(TypoLocalDateTime.decoder)),
        timestampz = orThrow(c.get("timestampz")(TypoOffsetDateTime.decoder)),
        time = orThrow(c.get("time")(TypoLocalTime.decoder)),
        timez = orThrow(c.get("timez")(TypoOffsetTime.decoder)),
        date = orThrow(c.get("date")(TypoLocalDate.decoder)),
        uuid = orThrow(c.get("uuid")(Decoder.decodeUUID)),
        boxes = orThrow(c.get("boxes")(Decoder.decodeArray[TypoBox](TypoBox.decoder, implicitly))),
        circlees = orThrow(c.get("circlees")(Decoder.decodeArray[TypoCircle](TypoCircle.decoder, implicitly))),
        linees = orThrow(c.get("linees")(Decoder.decodeArray[TypoLine](TypoLine.decoder, implicitly))),
        lseges = orThrow(c.get("lseges")(Decoder.decodeArray[TypoLineSegment](TypoLineSegment.decoder, implicitly))),
        pathes = orThrow(c.get("pathes")(Decoder.decodeArray[TypoPath](TypoPath.decoder, implicitly))),
        pointes = orThrow(c.get("pointes")(Decoder.decodeArray[TypoPoint](TypoPoint.decoder, implicitly))),
        polygones = orThrow(c.get("polygones")(Decoder.decodeArray[TypoPolygon](TypoPolygon.decoder, implicitly))),
        intervales = orThrow(c.get("intervales")(Decoder.decodeArray[TypoInterval](TypoInterval.decoder, implicitly))),
        moneyes = orThrow(c.get("moneyes")(Decoder.decodeArray[TypoMoney](TypoMoney.decoder, implicitly))),
        xmles = orThrow(c.get("xmles")(Decoder.decodeArray[TypoXml](TypoXml.decoder, implicitly))),
        jsones = orThrow(c.get("jsones")(Decoder.decodeArray[TypoJson](TypoJson.decoder, implicitly))),
        jsonbes = orThrow(c.get("jsonbes")(Decoder.decodeArray[TypoJsonb](TypoJsonb.decoder, implicitly))),
        hstores = orThrow(c.get("hstores")(Decoder.decodeArray[TypoHStore](TypoHStore.decoder, implicitly))),
        inets = orThrow(c.get("inets")(Decoder.decodeArray[TypoInet](TypoInet.decoder, implicitly))),
        timestamps = orThrow(c.get("timestamps")(Decoder.decodeArray[TypoLocalDateTime](TypoLocalDateTime.decoder, implicitly))),
        timestampzs = orThrow(c.get("timestampzs")(Decoder.decodeArray[TypoOffsetDateTime](TypoOffsetDateTime.decoder, implicitly))),
        times = orThrow(c.get("times")(Decoder.decodeArray[TypoLocalTime](TypoLocalTime.decoder, implicitly))),
        timezs = orThrow(c.get("timezs")(Decoder.decodeArray[TypoOffsetTime](TypoOffsetTime.decoder, implicitly))),
        dates = orThrow(c.get("dates")(Decoder.decodeArray[TypoLocalDate](TypoLocalDate.decoder, implicitly))),
        uuids = orThrow(c.get("uuids")(Decoder.decodeArray[UUID](Decoder.decodeUUID, implicitly)))
      )
    }
  )
  implicit val encoder: Encoder[PgtestRow] = Encoder[PgtestRow](row =>
    Json.obj(
      "box" -> TypoBox.encoder.apply(row.box),
      "circle" -> TypoCircle.encoder.apply(row.circle),
      "line" -> TypoLine.encoder.apply(row.line),
      "lseg" -> TypoLineSegment.encoder.apply(row.lseg),
      "path" -> TypoPath.encoder.apply(row.path),
      "point" -> TypoPoint.encoder.apply(row.point),
      "polygon" -> TypoPolygon.encoder.apply(row.polygon),
      "interval" -> TypoInterval.encoder.apply(row.interval),
      "money" -> TypoMoney.encoder.apply(row.money),
      "xml" -> TypoXml.encoder.apply(row.xml),
      "json" -> TypoJson.encoder.apply(row.json),
      "jsonb" -> TypoJsonb.encoder.apply(row.jsonb),
      "hstore" -> TypoHStore.encoder.apply(row.hstore),
      "inet" -> TypoInet.encoder.apply(row.inet),
      "timestamp" -> TypoLocalDateTime.encoder.apply(row.timestamp),
      "timestampz" -> TypoOffsetDateTime.encoder.apply(row.timestampz),
      "time" -> TypoLocalTime.encoder.apply(row.time),
      "timez" -> TypoOffsetTime.encoder.apply(row.timez),
      "date" -> TypoLocalDate.encoder.apply(row.date),
      "uuid" -> Encoder.encodeUUID.apply(row.uuid),
      "boxes" -> Encoder.encodeIterable[TypoBox, Array](TypoBox.encoder, implicitly).apply(row.boxes),
      "circlees" -> Encoder.encodeIterable[TypoCircle, Array](TypoCircle.encoder, implicitly).apply(row.circlees),
      "linees" -> Encoder.encodeIterable[TypoLine, Array](TypoLine.encoder, implicitly).apply(row.linees),
      "lseges" -> Encoder.encodeIterable[TypoLineSegment, Array](TypoLineSegment.encoder, implicitly).apply(row.lseges),
      "pathes" -> Encoder.encodeIterable[TypoPath, Array](TypoPath.encoder, implicitly).apply(row.pathes),
      "pointes" -> Encoder.encodeIterable[TypoPoint, Array](TypoPoint.encoder, implicitly).apply(row.pointes),
      "polygones" -> Encoder.encodeIterable[TypoPolygon, Array](TypoPolygon.encoder, implicitly).apply(row.polygones),
      "intervales" -> Encoder.encodeIterable[TypoInterval, Array](TypoInterval.encoder, implicitly).apply(row.intervales),
      "moneyes" -> Encoder.encodeIterable[TypoMoney, Array](TypoMoney.encoder, implicitly).apply(row.moneyes),
      "xmles" -> Encoder.encodeIterable[TypoXml, Array](TypoXml.encoder, implicitly).apply(row.xmles),
      "jsones" -> Encoder.encodeIterable[TypoJson, Array](TypoJson.encoder, implicitly).apply(row.jsones),
      "jsonbes" -> Encoder.encodeIterable[TypoJsonb, Array](TypoJsonb.encoder, implicitly).apply(row.jsonbes),
      "hstores" -> Encoder.encodeIterable[TypoHStore, Array](TypoHStore.encoder, implicitly).apply(row.hstores),
      "inets" -> Encoder.encodeIterable[TypoInet, Array](TypoInet.encoder, implicitly).apply(row.inets),
      "timestamps" -> Encoder.encodeIterable[TypoLocalDateTime, Array](TypoLocalDateTime.encoder, implicitly).apply(row.timestamps),
      "timestampzs" -> Encoder.encodeIterable[TypoOffsetDateTime, Array](TypoOffsetDateTime.encoder, implicitly).apply(row.timestampzs),
      "times" -> Encoder.encodeIterable[TypoLocalTime, Array](TypoLocalTime.encoder, implicitly).apply(row.times),
      "timezs" -> Encoder.encodeIterable[TypoOffsetTime, Array](TypoOffsetTime.encoder, implicitly).apply(row.timezs),
      "dates" -> Encoder.encodeIterable[TypoLocalDate, Array](TypoLocalDate.encoder, implicitly).apply(row.dates),
      "uuids" -> Encoder.encodeIterable[UUID, Array](Encoder.encodeUUID, implicitly).apply(row.uuids)
    )
  )
  implicit val read: Read[PgtestRow] = new Read[PgtestRow](
    gets = List(
      (TypoBox.get, Nullability.NoNulls),
      (TypoCircle.get, Nullability.NoNulls),
      (TypoLine.get, Nullability.NoNulls),
      (TypoLineSegment.get, Nullability.NoNulls),
      (TypoPath.get, Nullability.NoNulls),
      (TypoPoint.get, Nullability.NoNulls),
      (TypoPolygon.get, Nullability.NoNulls),
      (TypoInterval.get, Nullability.NoNulls),
      (TypoMoney.get, Nullability.NoNulls),
      (TypoXml.get, Nullability.NoNulls),
      (TypoJson.get, Nullability.NoNulls),
      (TypoJsonb.get, Nullability.NoNulls),
      (TypoHStore.get, Nullability.NoNulls),
      (TypoInet.get, Nullability.NoNulls),
      (TypoLocalDateTime.get, Nullability.NoNulls),
      (TypoOffsetDateTime.get, Nullability.NoNulls),
      (TypoLocalTime.get, Nullability.NoNulls),
      (TypoOffsetTime.get, Nullability.NoNulls),
      (TypoLocalDate.get, Nullability.NoNulls),
      (adventureworks.UUIDMeta.get, Nullability.NoNulls),
      (TypoBox.arrayGet, Nullability.NoNulls),
      (TypoCircle.arrayGet, Nullability.NoNulls),
      (TypoLine.arrayGet, Nullability.NoNulls),
      (TypoLineSegment.arrayGet, Nullability.NoNulls),
      (TypoPath.arrayGet, Nullability.NoNulls),
      (TypoPoint.arrayGet, Nullability.NoNulls),
      (TypoPolygon.arrayGet, Nullability.NoNulls),
      (TypoInterval.arrayGet, Nullability.NoNulls),
      (TypoMoney.arrayGet, Nullability.NoNulls),
      (TypoXml.arrayGet, Nullability.NoNulls),
      (TypoJson.arrayGet, Nullability.NoNulls),
      (TypoJsonb.arrayGet, Nullability.NoNulls),
      (TypoHStore.arrayGet, Nullability.NoNulls),
      (TypoInet.arrayGet, Nullability.NoNulls),
      (TypoLocalDateTime.arrayGet, Nullability.NoNulls),
      (TypoOffsetDateTime.arrayGet, Nullability.NoNulls),
      (TypoLocalTime.arrayGet, Nullability.NoNulls),
      (TypoOffsetTime.arrayGet, Nullability.NoNulls),
      (TypoLocalDate.arrayGet, Nullability.NoNulls),
      (adventureworks.UUIDArrayMeta.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgtestRow(
      box = TypoBox.get.unsafeGetNonNullable(rs, i + 0),
      circle = TypoCircle.get.unsafeGetNonNullable(rs, i + 1),
      line = TypoLine.get.unsafeGetNonNullable(rs, i + 2),
      lseg = TypoLineSegment.get.unsafeGetNonNullable(rs, i + 3),
      path = TypoPath.get.unsafeGetNonNullable(rs, i + 4),
      point = TypoPoint.get.unsafeGetNonNullable(rs, i + 5),
      polygon = TypoPolygon.get.unsafeGetNonNullable(rs, i + 6),
      interval = TypoInterval.get.unsafeGetNonNullable(rs, i + 7),
      money = TypoMoney.get.unsafeGetNonNullable(rs, i + 8),
      xml = TypoXml.get.unsafeGetNonNullable(rs, i + 9),
      json = TypoJson.get.unsafeGetNonNullable(rs, i + 10),
      jsonb = TypoJsonb.get.unsafeGetNonNullable(rs, i + 11),
      hstore = TypoHStore.get.unsafeGetNonNullable(rs, i + 12),
      inet = TypoInet.get.unsafeGetNonNullable(rs, i + 13),
      timestamp = TypoLocalDateTime.get.unsafeGetNonNullable(rs, i + 14),
      timestampz = TypoOffsetDateTime.get.unsafeGetNonNullable(rs, i + 15),
      time = TypoLocalTime.get.unsafeGetNonNullable(rs, i + 16),
      timez = TypoOffsetTime.get.unsafeGetNonNullable(rs, i + 17),
      date = TypoLocalDate.get.unsafeGetNonNullable(rs, i + 18),
      uuid = adventureworks.UUIDMeta.get.unsafeGetNonNullable(rs, i + 19),
      boxes = TypoBox.arrayGet.unsafeGetNonNullable(rs, i + 20),
      circlees = TypoCircle.arrayGet.unsafeGetNonNullable(rs, i + 21),
      linees = TypoLine.arrayGet.unsafeGetNonNullable(rs, i + 22),
      lseges = TypoLineSegment.arrayGet.unsafeGetNonNullable(rs, i + 23),
      pathes = TypoPath.arrayGet.unsafeGetNonNullable(rs, i + 24),
      pointes = TypoPoint.arrayGet.unsafeGetNonNullable(rs, i + 25),
      polygones = TypoPolygon.arrayGet.unsafeGetNonNullable(rs, i + 26),
      intervales = TypoInterval.arrayGet.unsafeGetNonNullable(rs, i + 27),
      moneyes = TypoMoney.arrayGet.unsafeGetNonNullable(rs, i + 28),
      xmles = TypoXml.arrayGet.unsafeGetNonNullable(rs, i + 29),
      jsones = TypoJson.arrayGet.unsafeGetNonNullable(rs, i + 30),
      jsonbes = TypoJsonb.arrayGet.unsafeGetNonNullable(rs, i + 31),
      hstores = TypoHStore.arrayGet.unsafeGetNonNullable(rs, i + 32),
      inets = TypoInet.arrayGet.unsafeGetNonNullable(rs, i + 33),
      timestamps = TypoLocalDateTime.arrayGet.unsafeGetNonNullable(rs, i + 34),
      timestampzs = TypoOffsetDateTime.arrayGet.unsafeGetNonNullable(rs, i + 35),
      times = TypoLocalTime.arrayGet.unsafeGetNonNullable(rs, i + 36),
      timezs = TypoOffsetTime.arrayGet.unsafeGetNonNullable(rs, i + 37),
      dates = TypoLocalDate.arrayGet.unsafeGetNonNullable(rs, i + 38),
      uuids = adventureworks.UUIDArrayMeta.get.unsafeGetNonNullable(rs, i + 39)
    )
  )
}
