/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public

import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder

/** Domain `public.Name`
  * No constraint
  */
case class Name(value: String) extends AnyVal
object Name {
  implicit val arrayGet: Get[Array[Name]] = Get[Array[String]].map(_.map(Name.apply))
  implicit val arrayPut: Put[Array[Name]] = Put[Array[String]].contramap(_.map(_.value))
  implicit val decoder: Decoder[Name] = Decoder[String].map(Name.apply)
  implicit val encoder: Encoder[Name] = Encoder[String].contramap(_.value)
  implicit val get: Get[Name] = Get[String].map(Name.apply)
  implicit val ordering: Ordering[Name] = Ordering.by(_.value)
  implicit val put: Put[Name] = Put[String].contramap(_.value)
}
