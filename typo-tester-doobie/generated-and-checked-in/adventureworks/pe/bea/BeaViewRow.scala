/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package bea

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.person.address.AddressId
import adventureworks.person.addresstype.AddresstypeId
import adventureworks.person.businessentity.BusinessentityId
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder

/** View: pe.bea */
case class BeaViewRow(
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.businessentityid]] */
  id: BusinessentityId,
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.addressid]] */
  addressid: AddressId,
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.addresstypeid]] */
  addresstypeid: AddresstypeId,
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object BeaViewRow {
  implicit lazy val decoder: Decoder[BeaViewRow] = Decoder.forProduct6[BeaViewRow, BusinessentityId, BusinessentityId, AddressId, AddresstypeId, TypoUUID, TypoLocalDateTime]("id", "businessentityid", "addressid", "addresstypeid", "rowguid", "modifieddate")(BeaViewRow.apply)(BusinessentityId.decoder, BusinessentityId.decoder, AddressId.decoder, AddresstypeId.decoder, TypoUUID.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[BeaViewRow] = Encoder.forProduct6[BeaViewRow, BusinessentityId, BusinessentityId, AddressId, AddresstypeId, TypoUUID, TypoLocalDateTime]("id", "businessentityid", "addressid", "addresstypeid", "rowguid", "modifieddate")(x => (x.id, x.businessentityid, x.addressid, x.addresstypeid, x.rowguid, x.modifieddate))(BusinessentityId.encoder, BusinessentityId.encoder, AddressId.encoder, AddresstypeId.encoder, TypoUUID.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[BeaViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(AddressId.get).asInstanceOf[Read[Any]],
      new Read.Single(AddresstypeId.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoUUID.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    BeaViewRow(
      id = arr(0).asInstanceOf[BusinessentityId],
          businessentityid = arr(1).asInstanceOf[BusinessentityId],
          addressid = arr(2).asInstanceOf[AddressId],
          addresstypeid = arr(3).asInstanceOf[AddresstypeId],
          rowguid = arr(4).asInstanceOf[TypoUUID],
          modifieddate = arr(5).asInstanceOf[TypoLocalDateTime]
    )
  }
}
