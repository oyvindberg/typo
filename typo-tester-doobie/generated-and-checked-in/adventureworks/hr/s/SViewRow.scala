/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package s

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.humanresources.shift.ShiftId
import adventureworks.public.Name
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder

/** View: hr.s */
case class SViewRow(
  /** Points to [[humanresources.shift.ShiftRow.shiftid]] */
  id: ShiftId,
  /** Points to [[humanresources.shift.ShiftRow.shiftid]] */
  shiftid: ShiftId,
  /** Points to [[humanresources.shift.ShiftRow.name]] */
  name: Name,
  /** Points to [[humanresources.shift.ShiftRow.starttime]] */
  starttime: TypoLocalTime,
  /** Points to [[humanresources.shift.ShiftRow.endtime]] */
  endtime: TypoLocalTime,
  /** Points to [[humanresources.shift.ShiftRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object SViewRow {
  implicit lazy val decoder: Decoder[SViewRow] = Decoder.forProduct6[SViewRow, ShiftId, ShiftId, Name, TypoLocalTime, TypoLocalTime, TypoLocalDateTime]("id", "shiftid", "name", "starttime", "endtime", "modifieddate")(SViewRow.apply)(ShiftId.decoder, ShiftId.decoder, Name.decoder, TypoLocalTime.decoder, TypoLocalTime.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[SViewRow] = Encoder.forProduct6[SViewRow, ShiftId, ShiftId, Name, TypoLocalTime, TypoLocalTime, TypoLocalDateTime]("id", "shiftid", "name", "starttime", "endtime", "modifieddate")(x => (x.id, x.shiftid, x.name, x.starttime, x.endtime, x.modifieddate))(ShiftId.encoder, ShiftId.encoder, Name.encoder, TypoLocalTime.encoder, TypoLocalTime.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[SViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(ShiftId.get).asInstanceOf[Read[Any]],
      new Read.Single(ShiftId.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    SViewRow(
      id = arr(0).asInstanceOf[ShiftId],
          shiftid = arr(1).asInstanceOf[ShiftId],
          name = arr(2).asInstanceOf[Name],
          starttime = arr(3).asInstanceOf[TypoLocalTime],
          endtime = arr(4).asInstanceOf[TypoLocalTime],
          modifieddate = arr(5).asInstanceOf[TypoLocalDateTime]
    )
  }
}
