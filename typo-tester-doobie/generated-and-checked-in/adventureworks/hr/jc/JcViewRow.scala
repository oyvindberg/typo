/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package jc

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoXml
import adventureworks.humanresources.jobcandidate.JobcandidateId
import adventureworks.person.businessentity.BusinessentityId
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder

/** View: hr.jc */
case class JcViewRow(
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.jobcandidateid]] */
  id: JobcandidateId,
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: JobcandidateId,
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.resume]] */
  resume: Option[TypoXml],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object JcViewRow {
  implicit lazy val decoder: Decoder[JcViewRow] = Decoder.forProduct5[JcViewRow, JobcandidateId, JobcandidateId, Option[BusinessentityId], Option[TypoXml], TypoLocalDateTime]("id", "jobcandidateid", "businessentityid", "resume", "modifieddate")(JcViewRow.apply)(JobcandidateId.decoder, JobcandidateId.decoder, Decoder.decodeOption(BusinessentityId.decoder), Decoder.decodeOption(TypoXml.decoder), TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[JcViewRow] = Encoder.forProduct5[JcViewRow, JobcandidateId, JobcandidateId, Option[BusinessentityId], Option[TypoXml], TypoLocalDateTime]("id", "jobcandidateid", "businessentityid", "resume", "modifieddate")(x => (x.id, x.jobcandidateid, x.businessentityid, x.resume, x.modifieddate))(JobcandidateId.encoder, JobcandidateId.encoder, Encoder.encodeOption(BusinessentityId.encoder), Encoder.encodeOption(TypoXml.encoder), TypoLocalDateTime.encoder)
  implicit lazy val read: Read[JcViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(JobcandidateId.get).asInstanceOf[Read[Any]],
      new Read.Single(JobcandidateId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoXml.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    JcViewRow(
      id = arr(0).asInstanceOf[JobcandidateId],
          jobcandidateid = arr(1).asInstanceOf[JobcandidateId],
          businessentityid = arr(2).asInstanceOf[Option[BusinessentityId]],
          resume = arr(3).asInstanceOf[Option[TypoXml]],
          modifieddate = arr(4).asInstanceOf[TypoLocalDateTime]
    )
  }
}
