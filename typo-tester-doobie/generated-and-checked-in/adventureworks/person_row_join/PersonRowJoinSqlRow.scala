/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person_row_join

import adventureworks.customtypes.TypoRecord
import adventureworks.person.businessentity.BusinessentityId
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder

/** SQL file: person_row_join.sql */
case class PersonRowJoinSqlRow(
  /** Points to [[sales.salesperson.SalespersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  email: /* nullability unknown */ Option[Array[TypoRecord]],
  emails: /* nullability unknown */ Option[Array[TypoRecord]]
)

object PersonRowJoinSqlRow {
  implicit lazy val decoder: Decoder[PersonRowJoinSqlRow] = Decoder.forProduct3[PersonRowJoinSqlRow, BusinessentityId, /* nullability unknown */ Option[Array[TypoRecord]], /* nullability unknown */ Option[Array[TypoRecord]]]("businessentityid", "email", "emails")(PersonRowJoinSqlRow.apply)(BusinessentityId.decoder, Decoder.decodeOption(Decoder.decodeArray[TypoRecord](TypoRecord.decoder, implicitly)), Decoder.decodeOption(Decoder.decodeArray[TypoRecord](TypoRecord.decoder, implicitly)))
  implicit lazy val encoder: Encoder[PersonRowJoinSqlRow] = Encoder.forProduct3[PersonRowJoinSqlRow, BusinessentityId, /* nullability unknown */ Option[Array[TypoRecord]], /* nullability unknown */ Option[Array[TypoRecord]]]("businessentityid", "email", "emails")(x => (x.businessentityid, x.email, x.emails))(BusinessentityId.encoder, Encoder.encodeOption(Encoder.encodeIterable[TypoRecord, Array](TypoRecord.encoder, implicitly)), Encoder.encodeOption(Encoder.encodeIterable[TypoRecord, Array](TypoRecord.encoder, implicitly)))
  implicit lazy val read: Read[PersonRowJoinSqlRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoRecord.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoRecord.arrayGet).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PersonRowJoinSqlRow(
      businessentityid = arr(0).asInstanceOf[BusinessentityId],
          email = arr(1).asInstanceOf[/* nullability unknown */ Option[Array[TypoRecord]]],
          emails = arr(2).asInstanceOf[/* nullability unknown */ Option[Array[TypoRecord]]]
    )
  }
}
