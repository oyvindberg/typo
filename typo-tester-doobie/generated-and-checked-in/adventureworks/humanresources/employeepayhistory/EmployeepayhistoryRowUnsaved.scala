/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeepayhistory

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.person.businessentity.BusinessentityId
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `humanresources.employeepayhistory` which has not been persisted yet */
case class EmployeepayhistoryRowUnsaved(
  /** Employee identification number. Foreign key to Employee.BusinessEntityID.
      Points to [[employee.EmployeeRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Date the change in pay is effective */
  ratechangedate: TypoLocalDateTime,
  /** Salary hourly rate.
      Constraint CK_EmployeePayHistory_Rate affecting columns "rate":  (((rate >= 6.50) AND (rate <= 200.00))) */
  rate: BigDecimal,
  /** 1 = Salary received monthly, 2 = Salary received biweekly
      Constraint CK_EmployeePayHistory_PayFrequency affecting columns "payfrequency":  ((payfrequency = ANY (ARRAY[1, 2]))) */
  payfrequency: TypoShort,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(modifieddateDefault: => TypoLocalDateTime): EmployeepayhistoryRow =
    EmployeepayhistoryRow(
      businessentityid = businessentityid,
      ratechangedate = ratechangedate,
      rate = rate,
      payfrequency = payfrequency,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object EmployeepayhistoryRowUnsaved {
  implicit lazy val decoder: Decoder[EmployeepayhistoryRowUnsaved] = Decoder.forProduct5[EmployeepayhistoryRowUnsaved, BusinessentityId, TypoLocalDateTime, BigDecimal, TypoShort, Defaulted[TypoLocalDateTime]]("businessentityid", "ratechangedate", "rate", "payfrequency", "modifieddate")(EmployeepayhistoryRowUnsaved.apply)(BusinessentityId.decoder, TypoLocalDateTime.decoder, Decoder.decodeBigDecimal, TypoShort.decoder, Defaulted.decoder(TypoLocalDateTime.decoder))
  implicit lazy val encoder: Encoder[EmployeepayhistoryRowUnsaved] = Encoder.forProduct5[EmployeepayhistoryRowUnsaved, BusinessentityId, TypoLocalDateTime, BigDecimal, TypoShort, Defaulted[TypoLocalDateTime]]("businessentityid", "ratechangedate", "rate", "payfrequency", "modifieddate")(x => (x.businessentityid, x.ratechangedate, x.rate, x.payfrequency, x.modifieddate))(BusinessentityId.encoder, TypoLocalDateTime.encoder, Encoder.encodeBigDecimal, TypoShort.encoder, Defaulted.encoder(TypoLocalDateTime.encoder))
  implicit lazy val text: Text[EmployeepayhistoryRowUnsaved] = Text.instance[EmployeepayhistoryRowUnsaved]{ (row, sb) =>
    BusinessentityId.text.unsafeEncode(row.businessentityid, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.ratechangedate, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.rate, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.payfrequency, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(TypoLocalDateTime.text).unsafeEncode(row.modifieddate, sb)
  }
}
