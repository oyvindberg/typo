/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package shift

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.public.Name
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class ShiftRepoImpl extends ShiftRepo {
  override def delete: DeleteBuilder[ShiftFields, ShiftRow] = {
    DeleteBuilder("humanresources.shift", ShiftFields.structure)
  }
  override def deleteById(shiftid: ShiftId): ConnectionIO[Boolean] = {
    sql"""delete from humanresources.shift where "shiftid" = ${fromWrite(shiftid)(Write.fromPut(ShiftId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(shiftids: Array[ShiftId]): ConnectionIO[Int] = {
    sql"""delete from humanresources.shift where "shiftid" = ANY(${shiftids})""".update.run
  }
  override def insert(unsaved: ShiftRow): ConnectionIO[ShiftRow] = {
    sql"""insert into humanresources.shift("shiftid", "name", "starttime", "endtime", "modifieddate")
          values (${fromWrite(unsaved.shiftid)(Write.fromPut(ShiftId.put))}::int4, ${fromWrite(unsaved.name)(Write.fromPut(Name.put))}::varchar, ${fromWrite(unsaved.starttime)(Write.fromPut(TypoLocalTime.put))}::time, ${fromWrite(unsaved.endtime)(Write.fromPut(TypoLocalTime.put))}::time, ${fromWrite(unsaved.modifieddate)(Write.fromPut(TypoLocalDateTime.put))}::timestamp)
          returning "shiftid", "name", "starttime"::text, "endtime"::text, "modifieddate"::text
       """.query(using ShiftRow.read).unique
  }
  override def insert(unsaved: ShiftRowUnsaved): ConnectionIO[ShiftRow] = {
    val fs = List(
      Some((Fragment.const0(s""""name""""), fr"${fromWrite(unsaved.name)(Write.fromPut(Name.put))}::varchar")),
      Some((Fragment.const0(s""""starttime""""), fr"${fromWrite(unsaved.starttime)(Write.fromPut(TypoLocalTime.put))}::time")),
      Some((Fragment.const0(s""""endtime""""), fr"${fromWrite(unsaved.endtime)(Write.fromPut(TypoLocalTime.put))}::time")),
      unsaved.shiftid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""shiftid""""), fr"${fromWrite(value: ShiftId)(Write.fromPut(ShiftId.put))}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""modifieddate""""), fr"${fromWrite(value: TypoLocalDateTime)(Write.fromPut(TypoLocalDateTime.put))}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into humanresources.shift default values
            returning "shiftid", "name", "starttime"::text, "endtime"::text, "modifieddate"::text
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into humanresources.shift(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "shiftid", "name", "starttime"::text, "endtime"::text, "modifieddate"::text
         """
    }
    q.query(using ShiftRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, ShiftRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY humanresources.shift("shiftid", "name", "starttime", "endtime", "modifieddate") FROM STDIN""").copyIn(unsaved, batchSize)(using ShiftRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, ShiftRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY humanresources.shift("name", "starttime", "endtime", "shiftid", "modifieddate") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using ShiftRowUnsaved.text)
  }
  override def select: SelectBuilder[ShiftFields, ShiftRow] = {
    SelectBuilderSql("humanresources.shift", ShiftFields.structure, ShiftRow.read)
  }
  override def selectAll: Stream[ConnectionIO, ShiftRow] = {
    sql"""select "shiftid", "name", "starttime"::text, "endtime"::text, "modifieddate"::text from humanresources.shift""".query(using ShiftRow.read).stream
  }
  override def selectById(shiftid: ShiftId): ConnectionIO[Option[ShiftRow]] = {
    sql"""select "shiftid", "name", "starttime"::text, "endtime"::text, "modifieddate"::text from humanresources.shift where "shiftid" = ${fromWrite(shiftid)(Write.fromPut(ShiftId.put))}""".query(using ShiftRow.read).option
  }
  override def selectByIds(shiftids: Array[ShiftId]): Stream[ConnectionIO, ShiftRow] = {
    sql"""select "shiftid", "name", "starttime"::text, "endtime"::text, "modifieddate"::text from humanresources.shift where "shiftid" = ANY(${shiftids})""".query(using ShiftRow.read).stream
  }
  override def selectByIdsTracked(shiftids: Array[ShiftId]): ConnectionIO[Map[ShiftId, ShiftRow]] = {
    selectByIds(shiftids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.shiftid, x)).toMap
      shiftids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[ShiftFields, ShiftRow] = {
    UpdateBuilder("humanresources.shift", ShiftFields.structure, ShiftRow.read)
  }
  override def update(row: ShiftRow): ConnectionIO[Boolean] = {
    val shiftid = row.shiftid
    sql"""update humanresources.shift
          set "name" = ${fromWrite(row.name)(Write.fromPut(Name.put))}::varchar,
              "starttime" = ${fromWrite(row.starttime)(Write.fromPut(TypoLocalTime.put))}::time,
              "endtime" = ${fromWrite(row.endtime)(Write.fromPut(TypoLocalTime.put))}::time,
              "modifieddate" = ${fromWrite(row.modifieddate)(Write.fromPut(TypoLocalDateTime.put))}::timestamp
          where "shiftid" = ${fromWrite(shiftid)(Write.fromPut(ShiftId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: ShiftRow): ConnectionIO[ShiftRow] = {
    sql"""insert into humanresources.shift("shiftid", "name", "starttime", "endtime", "modifieddate")
          values (
            ${fromWrite(unsaved.shiftid)(Write.fromPut(ShiftId.put))}::int4,
            ${fromWrite(unsaved.name)(Write.fromPut(Name.put))}::varchar,
            ${fromWrite(unsaved.starttime)(Write.fromPut(TypoLocalTime.put))}::time,
            ${fromWrite(unsaved.endtime)(Write.fromPut(TypoLocalTime.put))}::time,
            ${fromWrite(unsaved.modifieddate)(Write.fromPut(TypoLocalDateTime.put))}::timestamp
          )
          on conflict ("shiftid")
          do update set
            "name" = EXCLUDED."name",
            "starttime" = EXCLUDED."starttime",
            "endtime" = EXCLUDED."endtime",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "shiftid", "name", "starttime"::text, "endtime"::text, "modifieddate"::text
       """.query(using ShiftRow.read).unique
  }
  override def upsertBatch(unsaved: List[ShiftRow]): Stream[ConnectionIO, ShiftRow] = {
    Update[ShiftRow](
      s"""insert into humanresources.shift("shiftid", "name", "starttime", "endtime", "modifieddate")
          values (?::int4,?::varchar,?::time,?::time,?::timestamp)
          on conflict ("shiftid")
          do update set
            "name" = EXCLUDED."name",
            "starttime" = EXCLUDED."starttime",
            "endtime" = EXCLUDED."endtime",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "shiftid", "name", "starttime"::text, "endtime"::text, "modifieddate"::text"""
    )(using ShiftRow.write)
    .updateManyWithGeneratedKeys[ShiftRow]("shiftid", "name", "starttime", "endtime", "modifieddate")(unsaved)(using catsStdInstancesForList, ShiftRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, ShiftRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"create temporary table shift_TEMP (like humanresources.shift) on commit drop".update.run
      _ <- new FragmentOps(sql"""copy shift_TEMP("shiftid", "name", "starttime", "endtime", "modifieddate") from stdin""").copyIn(unsaved, batchSize)(using ShiftRow.text)
      res <- sql"""insert into humanresources.shift("shiftid", "name", "starttime", "endtime", "modifieddate")
                   select * from shift_TEMP
                   on conflict ("shiftid")
                   do update set
                     "name" = EXCLUDED."name",
                     "starttime" = EXCLUDED."starttime",
                     "endtime" = EXCLUDED."endtime",
                     "modifieddate" = EXCLUDED."modifieddate"
                   ;
                   drop table shift_TEMP;""".update.run
    } yield res
  }
}
