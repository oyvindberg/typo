/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package shift

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.public.Name
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import io.circe.Decoder
import io.circe.Encoder

/** Table: humanresources.shift
    Work shift lookup table.
    Primary key: shiftid */
case class ShiftRow(
  /** Primary key for Shift records.
      Default: nextval('humanresources.shift_shiftid_seq'::regclass) */
  shiftid: ShiftId,
  /** Shift description. */
  name: Name,
  /** Shift start time. */
  starttime: TypoLocalTime,
  /** Shift end time. */
  endtime: TypoLocalTime,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val id = shiftid
   def toUnsavedRow(shiftid: Defaulted[ShiftId], modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): ShiftRowUnsaved =
     ShiftRowUnsaved(name, starttime, endtime, shiftid, modifieddate)
 }

object ShiftRow {
  implicit lazy val decoder: Decoder[ShiftRow] = Decoder.forProduct5[ShiftRow, ShiftId, Name, TypoLocalTime, TypoLocalTime, TypoLocalDateTime]("shiftid", "name", "starttime", "endtime", "modifieddate")(ShiftRow.apply)(ShiftId.decoder, Name.decoder, TypoLocalTime.decoder, TypoLocalTime.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[ShiftRow] = Encoder.forProduct5[ShiftRow, ShiftId, Name, TypoLocalTime, TypoLocalTime, TypoLocalDateTime]("shiftid", "name", "starttime", "endtime", "modifieddate")(x => (x.shiftid, x.name, x.starttime, x.endtime, x.modifieddate))(ShiftId.encoder, Name.encoder, TypoLocalTime.encoder, TypoLocalTime.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[ShiftRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(ShiftId.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    ShiftRow(
      shiftid = arr(0).asInstanceOf[ShiftId],
          name = arr(1).asInstanceOf[Name],
          starttime = arr(2).asInstanceOf[TypoLocalTime],
          endtime = arr(3).asInstanceOf[TypoLocalTime],
          modifieddate = arr(4).asInstanceOf[TypoLocalDateTime]
    )
  }
  implicit lazy val text: Text[ShiftRow] = Text.instance[ShiftRow]{ (row, sb) =>
    ShiftId.text.unsafeEncode(row.shiftid, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    TypoLocalTime.text.unsafeEncode(row.starttime, sb)
    sb.append(Text.DELIMETER)
    TypoLocalTime.text.unsafeEncode(row.endtime, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val write: Write[ShiftRow] = new Write.Composite[ShiftRow](
    List(new Write.Single(ShiftId.put),
         new Write.Single(Name.put),
         new Write.Single(TypoLocalTime.put),
         new Write.Single(TypoLocalTime.put),
         new Write.Single(TypoLocalDateTime.put)),
    a => List(a.shiftid, a.name, a.starttime, a.endtime, a.modifieddate)
  )
}
