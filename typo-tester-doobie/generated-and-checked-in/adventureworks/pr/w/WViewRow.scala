/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package w

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.production.product.ProductId
import adventureworks.production.scrapreason.ScrapreasonId
import adventureworks.production.workorder.WorkorderId
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** View: pr.w */
case class WViewRow(
  /** Points to [[production.workorder.WorkorderRow.workorderid]] */
  id: WorkorderId,
  /** Points to [[production.workorder.WorkorderRow.workorderid]] */
  workorderid: WorkorderId,
  /** Points to [[production.workorder.WorkorderRow.productid]] */
  productid: ProductId,
  /** Points to [[production.workorder.WorkorderRow.orderqty]] */
  orderqty: Int,
  /** Points to [[production.workorder.WorkorderRow.scrappedqty]] */
  scrappedqty: TypoShort,
  /** Points to [[production.workorder.WorkorderRow.startdate]] */
  startdate: TypoLocalDateTime,
  /** Points to [[production.workorder.WorkorderRow.enddate]] */
  enddate: Option[TypoLocalDateTime],
  /** Points to [[production.workorder.WorkorderRow.duedate]] */
  duedate: TypoLocalDateTime,
  /** Points to [[production.workorder.WorkorderRow.scrapreasonid]] */
  scrapreasonid: Option[ScrapreasonId],
  /** Points to [[production.workorder.WorkorderRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object WViewRow {
  implicit lazy val decoder: Decoder[WViewRow] = Decoder.forProduct10[WViewRow, WorkorderId, WorkorderId, ProductId, Int, TypoShort, TypoLocalDateTime, Option[TypoLocalDateTime], TypoLocalDateTime, Option[ScrapreasonId], TypoLocalDateTime]("id", "workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate")(WViewRow.apply)(WorkorderId.decoder, WorkorderId.decoder, ProductId.decoder, Decoder.decodeInt, TypoShort.decoder, TypoLocalDateTime.decoder, Decoder.decodeOption(TypoLocalDateTime.decoder), TypoLocalDateTime.decoder, Decoder.decodeOption(ScrapreasonId.decoder), TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[WViewRow] = Encoder.forProduct10[WViewRow, WorkorderId, WorkorderId, ProductId, Int, TypoShort, TypoLocalDateTime, Option[TypoLocalDateTime], TypoLocalDateTime, Option[ScrapreasonId], TypoLocalDateTime]("id", "workorderid", "productid", "orderqty", "scrappedqty", "startdate", "enddate", "duedate", "scrapreasonid", "modifieddate")(x => (x.id, x.workorderid, x.productid, x.orderqty, x.scrappedqty, x.startdate, x.enddate, x.duedate, x.scrapreasonid, x.modifieddate))(WorkorderId.encoder, WorkorderId.encoder, ProductId.encoder, Encoder.encodeInt, TypoShort.encoder, TypoLocalDateTime.encoder, Encoder.encodeOption(TypoLocalDateTime.encoder), TypoLocalDateTime.encoder, Encoder.encodeOption(ScrapreasonId.encoder), TypoLocalDateTime.encoder)
  implicit lazy val read: Read[WViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(WorkorderId.get).asInstanceOf[Read[Any]],
      new Read.Single(WorkorderId.get).asInstanceOf[Read[Any]],
      new Read.Single(ProductId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoShort.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(ScrapreasonId.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    WViewRow(
      id = arr(0).asInstanceOf[WorkorderId],
          workorderid = arr(1).asInstanceOf[WorkorderId],
          productid = arr(2).asInstanceOf[ProductId],
          orderqty = arr(3).asInstanceOf[Int],
          scrappedqty = arr(4).asInstanceOf[TypoShort],
          startdate = arr(5).asInstanceOf[TypoLocalDateTime],
          enddate = arr(6).asInstanceOf[Option[TypoLocalDateTime]],
          duedate = arr(7).asInstanceOf[TypoLocalDateTime],
          scrapreasonid = arr(8).asInstanceOf[Option[ScrapreasonId]],
          modifieddate = arr(9).asInstanceOf[TypoLocalDateTime]
    )
  }
}
