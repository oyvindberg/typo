/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package th

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.production.transactionhistory.TransactionhistoryId
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** View: pr.th */
case class ThViewRow(
  /** Points to [[production.transactionhistory.TransactionhistoryRow.transactionid]] */
  id: TransactionhistoryId,
  /** Points to [[production.transactionhistory.TransactionhistoryRow.transactionid]] */
  transactionid: TransactionhistoryId,
  /** Points to [[production.transactionhistory.TransactionhistoryRow.productid]] */
  productid: ProductId,
  /** Points to [[production.transactionhistory.TransactionhistoryRow.referenceorderid]] */
  referenceorderid: Int,
  /** Points to [[production.transactionhistory.TransactionhistoryRow.referenceorderlineid]] */
  referenceorderlineid: Int,
  /** Points to [[production.transactionhistory.TransactionhistoryRow.transactiondate]] */
  transactiondate: TypoLocalDateTime,
  /** Points to [[production.transactionhistory.TransactionhistoryRow.transactiontype]] */
  transactiontype: /* bpchar, max 1 chars */ String,
  /** Points to [[production.transactionhistory.TransactionhistoryRow.quantity]] */
  quantity: Int,
  /** Points to [[production.transactionhistory.TransactionhistoryRow.actualcost]] */
  actualcost: BigDecimal,
  /** Points to [[production.transactionhistory.TransactionhistoryRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object ThViewRow {
  implicit lazy val decoder: Decoder[ThViewRow] = Decoder.forProduct10[ThViewRow, TransactionhistoryId, TransactionhistoryId, ProductId, Int, Int, TypoLocalDateTime, /* bpchar, max 1 chars */ String, Int, BigDecimal, TypoLocalDateTime]("id", "transactionid", "productid", "referenceorderid", "referenceorderlineid", "transactiondate", "transactiontype", "quantity", "actualcost", "modifieddate")(ThViewRow.apply)(TransactionhistoryId.decoder, TransactionhistoryId.decoder, ProductId.decoder, Decoder.decodeInt, Decoder.decodeInt, TypoLocalDateTime.decoder, Decoder.decodeString, Decoder.decodeInt, Decoder.decodeBigDecimal, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[ThViewRow] = Encoder.forProduct10[ThViewRow, TransactionhistoryId, TransactionhistoryId, ProductId, Int, Int, TypoLocalDateTime, /* bpchar, max 1 chars */ String, Int, BigDecimal, TypoLocalDateTime]("id", "transactionid", "productid", "referenceorderid", "referenceorderlineid", "transactiondate", "transactiontype", "quantity", "actualcost", "modifieddate")(x => (x.id, x.transactionid, x.productid, x.referenceorderid, x.referenceorderlineid, x.transactiondate, x.transactiontype, x.quantity, x.actualcost, x.modifieddate))(TransactionhistoryId.encoder, TransactionhistoryId.encoder, ProductId.encoder, Encoder.encodeInt, Encoder.encodeInt, TypoLocalDateTime.encoder, Encoder.encodeString, Encoder.encodeInt, Encoder.encodeBigDecimal, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[ThViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(TransactionhistoryId.get).asInstanceOf[Read[Any]],
      new Read.Single(TransactionhistoryId.get).asInstanceOf[Read[Any]],
      new Read.Single(ProductId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    ThViewRow(
      id = arr(0).asInstanceOf[TransactionhistoryId],
          transactionid = arr(1).asInstanceOf[TransactionhistoryId],
          productid = arr(2).asInstanceOf[ProductId],
          referenceorderid = arr(3).asInstanceOf[Int],
          referenceorderlineid = arr(4).asInstanceOf[Int],
          transactiondate = arr(5).asInstanceOf[TypoLocalDateTime],
          transactiontype = arr(6).asInstanceOf[/* bpchar, max 1 chars */ String],
          quantity = arr(7).asInstanceOf[Int],
          actualcost = arr(8).asInstanceOf[BigDecimal],
          modifieddate = arr(9).asInstanceOf[TypoLocalDateTime]
    )
  }
}
