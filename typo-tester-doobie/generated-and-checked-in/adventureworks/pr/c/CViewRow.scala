/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package c

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.culture.CultureId
import adventureworks.public.Name
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder

/** View: pr.c */
case class CViewRow(
  /** Points to [[production.culture.CultureRow.cultureid]] */
  id: CultureId,
  /** Points to [[production.culture.CultureRow.cultureid]] */
  cultureid: CultureId,
  /** Points to [[production.culture.CultureRow.name]] */
  name: Name,
  /** Points to [[production.culture.CultureRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object CViewRow {
  implicit lazy val decoder: Decoder[CViewRow] = Decoder.forProduct4[CViewRow, CultureId, CultureId, Name, TypoLocalDateTime]("id", "cultureid", "name", "modifieddate")(CViewRow.apply)(CultureId.decoder, CultureId.decoder, Name.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[CViewRow] = Encoder.forProduct4[CViewRow, CultureId, CultureId, Name, TypoLocalDateTime]("id", "cultureid", "name", "modifieddate")(x => (x.id, x.cultureid, x.name, x.modifieddate))(CultureId.encoder, CultureId.encoder, Name.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[CViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(CultureId.get).asInstanceOf[Read[Any]],
      new Read.Single(CultureId.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    CViewRow(
      id = arr(0).asInstanceOf[CultureId],
          cultureid = arr(1).asInstanceOf[CultureId],
          name = arr(2).asInstanceOf[Name],
          modifieddate = arr(3).asInstanceOf[TypoLocalDateTime]
    )
  }
}
