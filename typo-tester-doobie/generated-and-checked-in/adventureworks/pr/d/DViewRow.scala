/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package d

import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.document.DocumentId
import adventureworks.public.Flag
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** View: pr.d */
case class DViewRow(
  /** Points to [[production.document.DocumentRow.title]] */
  title: /* max 50 chars */ String,
  /** Points to [[production.document.DocumentRow.owner]] */
  owner: BusinessentityId,
  /** Points to [[production.document.DocumentRow.folderflag]] */
  folderflag: Flag,
  /** Points to [[production.document.DocumentRow.filename]] */
  filename: /* max 400 chars */ String,
  /** Points to [[production.document.DocumentRow.fileextension]] */
  fileextension: Option[/* max 8 chars */ String],
  /** Points to [[production.document.DocumentRow.revision]] */
  revision: /* bpchar, max 5 chars */ String,
  /** Points to [[production.document.DocumentRow.changenumber]] */
  changenumber: Int,
  /** Points to [[production.document.DocumentRow.status]] */
  status: TypoShort,
  /** Points to [[production.document.DocumentRow.documentsummary]] */
  documentsummary: Option[String],
  /** Points to [[production.document.DocumentRow.document]] */
  document: Option[TypoBytea],
  /** Points to [[production.document.DocumentRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[production.document.DocumentRow.modifieddate]] */
  modifieddate: TypoLocalDateTime,
  /** Points to [[production.document.DocumentRow.documentnode]] */
  documentnode: DocumentId
)

object DViewRow {
  implicit lazy val decoder: Decoder[DViewRow] = Decoder.forProduct13[DViewRow, /* max 50 chars */ String, BusinessentityId, Flag, /* max 400 chars */ String, Option[/* max 8 chars */ String], /* bpchar, max 5 chars */ String, Int, TypoShort, Option[String], Option[TypoBytea], TypoUUID, TypoLocalDateTime, DocumentId]("title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate", "documentnode")(DViewRow.apply)(Decoder.decodeString, BusinessentityId.decoder, Flag.decoder, Decoder.decodeString, Decoder.decodeOption(Decoder.decodeString), Decoder.decodeString, Decoder.decodeInt, TypoShort.decoder, Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(TypoBytea.decoder), TypoUUID.decoder, TypoLocalDateTime.decoder, DocumentId.decoder)
  implicit lazy val encoder: Encoder[DViewRow] = Encoder.forProduct13[DViewRow, /* max 50 chars */ String, BusinessentityId, Flag, /* max 400 chars */ String, Option[/* max 8 chars */ String], /* bpchar, max 5 chars */ String, Int, TypoShort, Option[String], Option[TypoBytea], TypoUUID, TypoLocalDateTime, DocumentId]("title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate", "documentnode")(x => (x.title, x.owner, x.folderflag, x.filename, x.fileextension, x.revision, x.changenumber, x.status, x.documentsummary, x.document, x.rowguid, x.modifieddate, x.documentnode))(Encoder.encodeString, BusinessentityId.encoder, Flag.encoder, Encoder.encodeString, Encoder.encodeOption(Encoder.encodeString), Encoder.encodeString, Encoder.encodeInt, TypoShort.encoder, Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(TypoBytea.encoder), TypoUUID.encoder, TypoLocalDateTime.encoder, DocumentId.encoder)
  implicit lazy val read: Read[DViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(Flag.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoShort.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoBytea.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoUUID.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.Single(DocumentId.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    DViewRow(
      title = arr(0).asInstanceOf[/* max 50 chars */ String],
          owner = arr(1).asInstanceOf[BusinessentityId],
          folderflag = arr(2).asInstanceOf[Flag],
          filename = arr(3).asInstanceOf[/* max 400 chars */ String],
          fileextension = arr(4).asInstanceOf[Option[/* max 8 chars */ String]],
          revision = arr(5).asInstanceOf[/* bpchar, max 5 chars */ String],
          changenumber = arr(6).asInstanceOf[Int],
          status = arr(7).asInstanceOf[TypoShort],
          documentsummary = arr(8).asInstanceOf[Option[String]],
          document = arr(9).asInstanceOf[Option[TypoBytea]],
          rowguid = arr(10).asInstanceOf[TypoUUID],
          modifieddate = arr(11).asInstanceOf[TypoLocalDateTime],
          documentnode = arr(12).asInstanceOf[DocumentId]
    )
  }
}
