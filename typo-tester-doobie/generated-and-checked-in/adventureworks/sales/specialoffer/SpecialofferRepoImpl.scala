/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialoffer

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class SpecialofferRepoImpl extends SpecialofferRepo {
  override def delete: DeleteBuilder[SpecialofferFields, SpecialofferRow] = {
    DeleteBuilder(""""sales"."specialoffer"""", SpecialofferFields.structure)
  }
  override def deleteById(specialofferid: SpecialofferId): ConnectionIO[Boolean] = {
    sql"""delete from "sales"."specialoffer" where "specialofferid" = ${fromWrite(specialofferid)(new Write.Single(SpecialofferId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(specialofferids: Array[SpecialofferId]): ConnectionIO[Int] = {
    sql"""delete from "sales"."specialoffer" where "specialofferid" = ANY(${specialofferids})""".update.run
  }
  override def insert(unsaved: SpecialofferRow): ConnectionIO[SpecialofferRow] = {
    sql"""insert into "sales"."specialoffer"("specialofferid", "description", "discountpct", "type", "category", "startdate", "enddate", "minqty", "maxqty", "rowguid", "modifieddate")
          values (${fromWrite(unsaved.specialofferid)(new Write.Single(SpecialofferId.put))}::int4, ${fromWrite(unsaved.description)(new Write.Single(Meta.StringMeta.put))}, ${fromWrite(unsaved.discountpct)(new Write.Single(Meta.ScalaBigDecimalMeta.put))}::numeric, ${fromWrite(unsaved.`type`)(new Write.Single(Meta.StringMeta.put))}, ${fromWrite(unsaved.category)(new Write.Single(Meta.StringMeta.put))}, ${fromWrite(unsaved.startdate)(new Write.Single(TypoLocalDateTime.put))}::timestamp, ${fromWrite(unsaved.enddate)(new Write.Single(TypoLocalDateTime.put))}::timestamp, ${fromWrite(unsaved.minqty)(new Write.Single(Meta.IntMeta.put))}::int4, ${fromWrite(unsaved.maxqty)(new Write.SingleOpt(Meta.IntMeta.put))}::int4, ${fromWrite(unsaved.rowguid)(new Write.Single(TypoUUID.put))}::uuid, ${fromWrite(unsaved.modifieddate)(new Write.Single(TypoLocalDateTime.put))}::timestamp)
          returning "specialofferid", "description", "discountpct", "type", "category", "startdate"::text, "enddate"::text, "minqty", "maxqty", "rowguid", "modifieddate"::text
       """.query(using SpecialofferRow.read).unique
  }
  override def insert(unsaved: SpecialofferRowUnsaved): ConnectionIO[SpecialofferRow] = {
    val fs = List(
      Some((Fragment.const0(s""""description""""), fr"${fromWrite(unsaved.description)(new Write.Single(Meta.StringMeta.put))}")),
      Some((Fragment.const0(s""""type""""), fr"${fromWrite(unsaved.`type`)(new Write.Single(Meta.StringMeta.put))}")),
      Some((Fragment.const0(s""""category""""), fr"${fromWrite(unsaved.category)(new Write.Single(Meta.StringMeta.put))}")),
      Some((Fragment.const0(s""""startdate""""), fr"${fromWrite(unsaved.startdate)(new Write.Single(TypoLocalDateTime.put))}::timestamp")),
      Some((Fragment.const0(s""""enddate""""), fr"${fromWrite(unsaved.enddate)(new Write.Single(TypoLocalDateTime.put))}::timestamp")),
      Some((Fragment.const0(s""""maxqty""""), fr"${fromWrite(unsaved.maxqty)(new Write.SingleOpt(Meta.IntMeta.put))}::int4")),
      unsaved.specialofferid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""specialofferid""""), fr"${fromWrite(value: SpecialofferId)(new Write.Single(SpecialofferId.put))}::int4"))
      },
      unsaved.discountpct match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""discountpct""""), fr"${fromWrite(value: BigDecimal)(new Write.Single(Meta.ScalaBigDecimalMeta.put))}::numeric"))
      },
      unsaved.minqty match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""minqty""""), fr"${fromWrite(value: Int)(new Write.Single(Meta.IntMeta.put))}::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""rowguid""""), fr"${fromWrite(value: TypoUUID)(new Write.Single(TypoUUID.put))}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""modifieddate""""), fr"${fromWrite(value: TypoLocalDateTime)(new Write.Single(TypoLocalDateTime.put))}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "sales"."specialoffer" default values
            returning "specialofferid", "description", "discountpct", "type", "category", "startdate"::text, "enddate"::text, "minqty", "maxqty", "rowguid", "modifieddate"::text
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into "sales"."specialoffer"(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "specialofferid", "description", "discountpct", "type", "category", "startdate"::text, "enddate"::text, "minqty", "maxqty", "rowguid", "modifieddate"::text
         """
    }
    q.query(using SpecialofferRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, SpecialofferRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "sales"."specialoffer"("specialofferid", "description", "discountpct", "type", "category", "startdate", "enddate", "minqty", "maxqty", "rowguid", "modifieddate") FROM STDIN""").copyIn(unsaved, batchSize)(using SpecialofferRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, SpecialofferRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "sales"."specialoffer"("description", "type", "category", "startdate", "enddate", "maxqty", "specialofferid", "discountpct", "minqty", "rowguid", "modifieddate") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using SpecialofferRowUnsaved.text)
  }
  override def select: SelectBuilder[SpecialofferFields, SpecialofferRow] = {
    SelectBuilderSql(""""sales"."specialoffer"""", SpecialofferFields.structure, SpecialofferRow.read)
  }
  override def selectAll: Stream[ConnectionIO, SpecialofferRow] = {
    sql"""select "specialofferid", "description", "discountpct", "type", "category", "startdate"::text, "enddate"::text, "minqty", "maxqty", "rowguid", "modifieddate"::text from "sales"."specialoffer"""".query(using SpecialofferRow.read).stream
  }
  override def selectById(specialofferid: SpecialofferId): ConnectionIO[Option[SpecialofferRow]] = {
    sql"""select "specialofferid", "description", "discountpct", "type", "category", "startdate"::text, "enddate"::text, "minqty", "maxqty", "rowguid", "modifieddate"::text from "sales"."specialoffer" where "specialofferid" = ${fromWrite(specialofferid)(new Write.Single(SpecialofferId.put))}""".query(using SpecialofferRow.read).option
  }
  override def selectByIds(specialofferids: Array[SpecialofferId]): Stream[ConnectionIO, SpecialofferRow] = {
    sql"""select "specialofferid", "description", "discountpct", "type", "category", "startdate"::text, "enddate"::text, "minqty", "maxqty", "rowguid", "modifieddate"::text from "sales"."specialoffer" where "specialofferid" = ANY(${specialofferids})""".query(using SpecialofferRow.read).stream
  }
  override def selectByIdsTracked(specialofferids: Array[SpecialofferId]): ConnectionIO[Map[SpecialofferId, SpecialofferRow]] = {
    selectByIds(specialofferids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.specialofferid, x)).toMap
      specialofferids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[SpecialofferFields, SpecialofferRow] = {
    UpdateBuilder(""""sales"."specialoffer"""", SpecialofferFields.structure, SpecialofferRow.read)
  }
  override def update(row: SpecialofferRow): ConnectionIO[Option[SpecialofferRow]] = {
    val specialofferid = row.specialofferid
    sql"""update "sales"."specialoffer"
          set "description" = ${fromWrite(row.description)(new Write.Single(Meta.StringMeta.put))},
              "discountpct" = ${fromWrite(row.discountpct)(new Write.Single(Meta.ScalaBigDecimalMeta.put))}::numeric,
              "type" = ${fromWrite(row.`type`)(new Write.Single(Meta.StringMeta.put))},
              "category" = ${fromWrite(row.category)(new Write.Single(Meta.StringMeta.put))},
              "startdate" = ${fromWrite(row.startdate)(new Write.Single(TypoLocalDateTime.put))}::timestamp,
              "enddate" = ${fromWrite(row.enddate)(new Write.Single(TypoLocalDateTime.put))}::timestamp,
              "minqty" = ${fromWrite(row.minqty)(new Write.Single(Meta.IntMeta.put))}::int4,
              "maxqty" = ${fromWrite(row.maxqty)(new Write.SingleOpt(Meta.IntMeta.put))}::int4,
              "rowguid" = ${fromWrite(row.rowguid)(new Write.Single(TypoUUID.put))}::uuid,
              "modifieddate" = ${fromWrite(row.modifieddate)(new Write.Single(TypoLocalDateTime.put))}::timestamp
          where "specialofferid" = ${fromWrite(specialofferid)(new Write.Single(SpecialofferId.put))}
          returning "specialofferid", "description", "discountpct", "type", "category", "startdate"::text, "enddate"::text, "minqty", "maxqty", "rowguid", "modifieddate"::text""".query(using SpecialofferRow.read).option
  }
  override def upsert(unsaved: SpecialofferRow): ConnectionIO[SpecialofferRow] = {
    sql"""insert into "sales"."specialoffer"("specialofferid", "description", "discountpct", "type", "category", "startdate", "enddate", "minqty", "maxqty", "rowguid", "modifieddate")
          values (
            ${fromWrite(unsaved.specialofferid)(new Write.Single(SpecialofferId.put))}::int4,
            ${fromWrite(unsaved.description)(new Write.Single(Meta.StringMeta.put))},
            ${fromWrite(unsaved.discountpct)(new Write.Single(Meta.ScalaBigDecimalMeta.put))}::numeric,
            ${fromWrite(unsaved.`type`)(new Write.Single(Meta.StringMeta.put))},
            ${fromWrite(unsaved.category)(new Write.Single(Meta.StringMeta.put))},
            ${fromWrite(unsaved.startdate)(new Write.Single(TypoLocalDateTime.put))}::timestamp,
            ${fromWrite(unsaved.enddate)(new Write.Single(TypoLocalDateTime.put))}::timestamp,
            ${fromWrite(unsaved.minqty)(new Write.Single(Meta.IntMeta.put))}::int4,
            ${fromWrite(unsaved.maxqty)(new Write.SingleOpt(Meta.IntMeta.put))}::int4,
            ${fromWrite(unsaved.rowguid)(new Write.Single(TypoUUID.put))}::uuid,
            ${fromWrite(unsaved.modifieddate)(new Write.Single(TypoLocalDateTime.put))}::timestamp
          )
          on conflict ("specialofferid")
          do update set
            "description" = EXCLUDED."description",
            "discountpct" = EXCLUDED."discountpct",
            "type" = EXCLUDED."type",
            "category" = EXCLUDED."category",
            "startdate" = EXCLUDED."startdate",
            "enddate" = EXCLUDED."enddate",
            "minqty" = EXCLUDED."minqty",
            "maxqty" = EXCLUDED."maxqty",
            "rowguid" = EXCLUDED."rowguid",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "specialofferid", "description", "discountpct", "type", "category", "startdate"::text, "enddate"::text, "minqty", "maxqty", "rowguid", "modifieddate"::text
       """.query(using SpecialofferRow.read).unique
  }
  override def upsertBatch(unsaved: List[SpecialofferRow]): Stream[ConnectionIO, SpecialofferRow] = {
    Update[SpecialofferRow](
      s"""insert into "sales"."specialoffer"("specialofferid", "description", "discountpct", "type", "category", "startdate", "enddate", "minqty", "maxqty", "rowguid", "modifieddate")
          values (?::int4,?,?::numeric,?,?,?::timestamp,?::timestamp,?::int4,?::int4,?::uuid,?::timestamp)
          on conflict ("specialofferid")
          do update set
            "description" = EXCLUDED."description",
            "discountpct" = EXCLUDED."discountpct",
            "type" = EXCLUDED."type",
            "category" = EXCLUDED."category",
            "startdate" = EXCLUDED."startdate",
            "enddate" = EXCLUDED."enddate",
            "minqty" = EXCLUDED."minqty",
            "maxqty" = EXCLUDED."maxqty",
            "rowguid" = EXCLUDED."rowguid",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "specialofferid", "description", "discountpct", "type", "category", "startdate"::text, "enddate"::text, "minqty", "maxqty", "rowguid", "modifieddate"::text"""
    )(using SpecialofferRow.write)
    .updateManyWithGeneratedKeys[SpecialofferRow]("specialofferid", "description", "discountpct", "type", "category", "startdate", "enddate", "minqty", "maxqty", "rowguid", "modifieddate")(unsaved)(using catsStdInstancesForList, SpecialofferRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, SpecialofferRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table specialoffer_TEMP (like "sales"."specialoffer") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy specialoffer_TEMP("specialofferid", "description", "discountpct", "type", "category", "startdate", "enddate", "minqty", "maxqty", "rowguid", "modifieddate") from stdin""").copyIn(unsaved, batchSize)(using SpecialofferRow.text)
      res <- sql"""insert into "sales"."specialoffer"("specialofferid", "description", "discountpct", "type", "category", "startdate", "enddate", "minqty", "maxqty", "rowguid", "modifieddate")
                   select * from specialoffer_TEMP
                   on conflict ("specialofferid")
                   do update set
                     "description" = EXCLUDED."description",
                     "discountpct" = EXCLUDED."discountpct",
                     "type" = EXCLUDED."type",
                     "category" = EXCLUDED."category",
                     "startdate" = EXCLUDED."startdate",
                     "enddate" = EXCLUDED."enddate",
                     "minqty" = EXCLUDED."minqty",
                     "maxqty" = EXCLUDED."maxqty",
                     "rowguid" = EXCLUDED."rowguid",
                     "modifieddate" = EXCLUDED."modifieddate"
                   ;
                   drop table specialoffer_TEMP;""".update.run
    } yield res
  }
}
