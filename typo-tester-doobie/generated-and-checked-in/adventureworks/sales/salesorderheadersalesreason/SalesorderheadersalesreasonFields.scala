/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheadersalesreason

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.sales.salesorderheader.SalesorderheaderFields
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.salesorderheader.SalesorderheaderRow
import adventureworks.sales.salesreason.SalesreasonFields
import adventureworks.sales.salesreason.SalesreasonId
import adventureworks.sales.salesreason.SalesreasonRow
import typo.dsl.ForeignKey
import typo.dsl.Path
import typo.dsl.Required
import typo.dsl.SqlExpr
import typo.dsl.SqlExpr.CompositeIn
import typo.dsl.SqlExpr.CompositeIn.TuplePart
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

trait SalesorderheadersalesreasonFields {
  def salesorderid: IdField[SalesorderheaderId, SalesorderheadersalesreasonRow]
  def salesreasonid: IdField[SalesreasonId, SalesorderheadersalesreasonRow]
  def modifieddate: Field[TypoLocalDateTime, SalesorderheadersalesreasonRow]
  def fkSalesreason: ForeignKey[SalesreasonFields, SalesreasonRow] =
    ForeignKey[SalesreasonFields, SalesreasonRow]("sales.FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", Nil)
      .withColumnPair(salesreasonid, _.salesreasonid)
  def fkSalesorderheader: ForeignKey[SalesorderheaderFields, SalesorderheaderRow] =
    ForeignKey[SalesorderheaderFields, SalesorderheaderRow]("sales.FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID", Nil)
      .withColumnPair(salesorderid, _.salesorderid)
  def compositeIdIs(compositeId: SalesorderheadersalesreasonId): SqlExpr[Boolean, Required] =
    salesorderid.isEqual(compositeId.salesorderid).and(salesreasonid.isEqual(compositeId.salesreasonid))
  def compositeIdIn(compositeIds: Array[SalesorderheadersalesreasonId]): SqlExpr[Boolean, Required] =
    new CompositeIn(compositeIds)(TuplePart(salesorderid)(_.salesorderid), TuplePart(salesreasonid)(_.salesreasonid))
  
}

object SalesorderheadersalesreasonFields {
  lazy val structure: Relation[SalesorderheadersalesreasonFields, SalesorderheadersalesreasonRow] =
    new Impl(Nil)
    
  private final class Impl(val _path: List[Path])
    extends Relation[SalesorderheadersalesreasonFields, SalesorderheadersalesreasonRow] {
  
    override lazy val fields: SalesorderheadersalesreasonFields = new SalesorderheadersalesreasonFields {
      override def salesorderid = IdField[SalesorderheaderId, SalesorderheadersalesreasonRow](_path, "salesorderid", None, Some("int4"), x => x.salesorderid, (row, value) => row.copy(salesorderid = value))
      override def salesreasonid = IdField[SalesreasonId, SalesorderheadersalesreasonRow](_path, "salesreasonid", None, Some("int4"), x => x.salesreasonid, (row, value) => row.copy(salesreasonid = value))
      override def modifieddate = Field[TypoLocalDateTime, SalesorderheadersalesreasonRow](_path, "modifieddate", Some("text"), Some("timestamp"), x => x.modifieddate, (row, value) => row.copy(modifieddate = value))
    }
  
    override lazy val columns: List[FieldLikeNoHkt[?, SalesorderheadersalesreasonRow]] =
      List[FieldLikeNoHkt[?, SalesorderheadersalesreasonRow]](fields.salesorderid, fields.salesreasonid, fields.modifieddate)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
