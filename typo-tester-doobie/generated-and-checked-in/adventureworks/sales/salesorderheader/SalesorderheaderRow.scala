/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheader

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.person.address.AddressId
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.OrderNumber
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.salesterritory.SalesterritoryId
import adventureworks.userdefined.CustomCreditcardId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import scala.util.Try

/** Table: sales.salesorderheader
    General sales order information.
    Primary key: salesorderid */
case class SalesorderheaderRow(
  /** Primary key.
      Default: nextval('sales.salesorderheader_salesorderid_seq'::regclass) */
  salesorderid: SalesorderheaderId,
  /** Incremental number to track changes to the sales order over time.
      Default: 0 */
  revisionnumber: TypoShort,
  /** Dates the sales order was created.
      Default: now()
      Constraint CK_SalesOrderHeader_DueDate affecting columns duedate, orderdate: ((duedate >= orderdate))
      Constraint CK_SalesOrderHeader_ShipDate affecting columns orderdate, shipdate: (((shipdate >= orderdate) OR (shipdate IS NULL))) */
  orderdate: TypoLocalDateTime,
  /** Date the order is due to the customer.
      Constraint CK_SalesOrderHeader_DueDate affecting columns duedate, orderdate: ((duedate >= orderdate)) */
  duedate: TypoLocalDateTime,
  /** Date the order was shipped to the customer.
      Constraint CK_SalesOrderHeader_ShipDate affecting columns orderdate, shipdate: (((shipdate >= orderdate) OR (shipdate IS NULL))) */
  shipdate: Option[TypoLocalDateTime],
  /** Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
      Default: 1
      Constraint CK_SalesOrderHeader_Status affecting columns status: (((status >= 0) AND (status <= 8))) */
  status: TypoShort,
  /** 0 = Order placed by sales person. 1 = Order placed online by customer.
      Default: true */
  onlineorderflag: Flag,
  /** Customer purchase order number reference. */
  purchaseordernumber: Option[OrderNumber],
  /** Financial accounting number reference. */
  accountnumber: Option[AccountNumber],
  /** Customer identification number. Foreign key to Customer.BusinessEntityID.
      Points to [[customer.CustomerRow.customerid]] */
  customerid: CustomerId,
  /** Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
      Points to [[salesperson.SalespersonRow.businessentityid]] */
  salespersonid: Option[BusinessentityId],
  /** Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Customer billing address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  billtoaddressid: AddressId,
  /** Customer shipping address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  shiptoaddressid: AddressId,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
      Points to [[purchasing.shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: ShipmethodId,
  /** Credit card identification number. Foreign key to CreditCard.CreditCardID.
      Points to [[creditcard.CreditcardRow.creditcardid]] */
  creditcardid: Option[/* user-picked */ CustomCreditcardId],
  /** Approval code provided by the credit card company. */
  creditcardapprovalcode: Option[/* max 15 chars */ String],
  /** Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
      Points to [[currencyrate.CurrencyrateRow.currencyrateid]] */
  currencyrateid: Option[CurrencyrateId],
  /** Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
      Default: 0.00
      Constraint CK_SalesOrderHeader_SubTotal affecting columns subtotal: ((subtotal >= 0.00)) */
  subtotal: BigDecimal,
  /** Tax amount.
      Default: 0.00
      Constraint CK_SalesOrderHeader_TaxAmt affecting columns taxamt: ((taxamt >= 0.00)) */
  taxamt: BigDecimal,
  /** Shipping cost.
      Default: 0.00
      Constraint CK_SalesOrderHeader_Freight affecting columns freight: ((freight >= 0.00)) */
  freight: BigDecimal,
  /** Total due from customer. Computed as Subtotal + TaxAmt + Freight. */
  totaldue: Option[BigDecimal],
  /** Sales representative comments. */
  comment: Option[/* max 128 chars */ String],
  /** Default: uuid_generate_v1() */
  rowguid: TypoUUID,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val id = salesorderid
   def toUnsavedRow(salesorderid: Defaulted[SalesorderheaderId], revisionnumber: Defaulted[TypoShort] = Defaulted.Provided(this.revisionnumber), orderdate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.orderdate), status: Defaulted[TypoShort] = Defaulted.Provided(this.status), onlineorderflag: Defaulted[Flag] = Defaulted.Provided(this.onlineorderflag), subtotal: Defaulted[BigDecimal] = Defaulted.Provided(this.subtotal), taxamt: Defaulted[BigDecimal] = Defaulted.Provided(this.taxamt), freight: Defaulted[BigDecimal] = Defaulted.Provided(this.freight), rowguid: Defaulted[TypoUUID] = Defaulted.Provided(this.rowguid), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): SalesorderheaderRowUnsaved =
     SalesorderheaderRowUnsaved(duedate, shipdate, purchaseordernumber, accountnumber, customerid, salespersonid, territoryid, billtoaddressid, shiptoaddressid, shipmethodid, creditcardid, creditcardapprovalcode, currencyrateid, totaldue, comment, salesorderid, revisionnumber, orderdate, status, onlineorderflag, subtotal, taxamt, freight, rowguid, modifieddate)
 }

object SalesorderheaderRow {
  implicit lazy val decoder: Decoder[SalesorderheaderRow] = Decoder.instanceTry[SalesorderheaderRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      SalesorderheaderRow(
        salesorderid = orThrow(c.get("salesorderid")(SalesorderheaderId.decoder)),
        revisionnumber = orThrow(c.get("revisionnumber")(TypoShort.decoder)),
        orderdate = orThrow(c.get("orderdate")(TypoLocalDateTime.decoder)),
        duedate = orThrow(c.get("duedate")(TypoLocalDateTime.decoder)),
        shipdate = orThrow(c.get("shipdate")(Decoder.decodeOption(TypoLocalDateTime.decoder))),
        status = orThrow(c.get("status")(TypoShort.decoder)),
        onlineorderflag = orThrow(c.get("onlineorderflag")(Flag.decoder)),
        purchaseordernumber = orThrow(c.get("purchaseordernumber")(Decoder.decodeOption(OrderNumber.decoder))),
        accountnumber = orThrow(c.get("accountnumber")(Decoder.decodeOption(AccountNumber.decoder))),
        customerid = orThrow(c.get("customerid")(CustomerId.decoder)),
        salespersonid = orThrow(c.get("salespersonid")(Decoder.decodeOption(BusinessentityId.decoder))),
        territoryid = orThrow(c.get("territoryid")(Decoder.decodeOption(SalesterritoryId.decoder))),
        billtoaddressid = orThrow(c.get("billtoaddressid")(AddressId.decoder)),
        shiptoaddressid = orThrow(c.get("shiptoaddressid")(AddressId.decoder)),
        shipmethodid = orThrow(c.get("shipmethodid")(ShipmethodId.decoder)),
        creditcardid = orThrow(c.get("creditcardid")(Decoder.decodeOption(CustomCreditcardId.decoder))),
        creditcardapprovalcode = orThrow(c.get("creditcardapprovalcode")(Decoder.decodeOption(Decoder.decodeString))),
        currencyrateid = orThrow(c.get("currencyrateid")(Decoder.decodeOption(CurrencyrateId.decoder))),
        subtotal = orThrow(c.get("subtotal")(Decoder.decodeBigDecimal)),
        taxamt = orThrow(c.get("taxamt")(Decoder.decodeBigDecimal)),
        freight = orThrow(c.get("freight")(Decoder.decodeBigDecimal)),
        totaldue = orThrow(c.get("totaldue")(Decoder.decodeOption(Decoder.decodeBigDecimal))),
        comment = orThrow(c.get("comment")(Decoder.decodeOption(Decoder.decodeString))),
        rowguid = orThrow(c.get("rowguid")(TypoUUID.decoder)),
        modifieddate = orThrow(c.get("modifieddate")(TypoLocalDateTime.decoder))
      )
    }
  )
  implicit lazy val encoder: Encoder[SalesorderheaderRow] = Encoder[SalesorderheaderRow](row =>
    Json.obj(
      "salesorderid" -> SalesorderheaderId.encoder.apply(row.salesorderid),
      "revisionnumber" -> TypoShort.encoder.apply(row.revisionnumber),
      "orderdate" -> TypoLocalDateTime.encoder.apply(row.orderdate),
      "duedate" -> TypoLocalDateTime.encoder.apply(row.duedate),
      "shipdate" -> Encoder.encodeOption(TypoLocalDateTime.encoder).apply(row.shipdate),
      "status" -> TypoShort.encoder.apply(row.status),
      "onlineorderflag" -> Flag.encoder.apply(row.onlineorderflag),
      "purchaseordernumber" -> Encoder.encodeOption(OrderNumber.encoder).apply(row.purchaseordernumber),
      "accountnumber" -> Encoder.encodeOption(AccountNumber.encoder).apply(row.accountnumber),
      "customerid" -> CustomerId.encoder.apply(row.customerid),
      "salespersonid" -> Encoder.encodeOption(BusinessentityId.encoder).apply(row.salespersonid),
      "territoryid" -> Encoder.encodeOption(SalesterritoryId.encoder).apply(row.territoryid),
      "billtoaddressid" -> AddressId.encoder.apply(row.billtoaddressid),
      "shiptoaddressid" -> AddressId.encoder.apply(row.shiptoaddressid),
      "shipmethodid" -> ShipmethodId.encoder.apply(row.shipmethodid),
      "creditcardid" -> Encoder.encodeOption(CustomCreditcardId.encoder).apply(row.creditcardid),
      "creditcardapprovalcode" -> Encoder.encodeOption(Encoder.encodeString).apply(row.creditcardapprovalcode),
      "currencyrateid" -> Encoder.encodeOption(CurrencyrateId.encoder).apply(row.currencyrateid),
      "subtotal" -> Encoder.encodeBigDecimal.apply(row.subtotal),
      "taxamt" -> Encoder.encodeBigDecimal.apply(row.taxamt),
      "freight" -> Encoder.encodeBigDecimal.apply(row.freight),
      "totaldue" -> Encoder.encodeOption(Encoder.encodeBigDecimal).apply(row.totaldue),
      "comment" -> Encoder.encodeOption(Encoder.encodeString).apply(row.comment),
      "rowguid" -> TypoUUID.encoder.apply(row.rowguid),
      "modifieddate" -> TypoLocalDateTime.encoder.apply(row.modifieddate)
    )
  )
  implicit lazy val read: Read[SalesorderheaderRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(SalesorderheaderId.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoShort.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoShort.get).asInstanceOf[Read[Any]],
      new Read.Single(Flag.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(OrderNumber.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(AccountNumber.get).asInstanceOf[Read[Any]],
      new Read.Single(CustomerId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(SalesterritoryId.get).asInstanceOf[Read[Any]],
      new Read.Single(AddressId.get).asInstanceOf[Read[Any]],
      new Read.Single(AddressId.get).asInstanceOf[Read[Any]],
      new Read.Single(ShipmethodId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(/* user-picked */ CustomCreditcardId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(CurrencyrateId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoUUID.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    SalesorderheaderRow(
      salesorderid = arr(0).asInstanceOf[SalesorderheaderId],
          revisionnumber = arr(1).asInstanceOf[TypoShort],
          orderdate = arr(2).asInstanceOf[TypoLocalDateTime],
          duedate = arr(3).asInstanceOf[TypoLocalDateTime],
          shipdate = arr(4).asInstanceOf[Option[TypoLocalDateTime]],
          status = arr(5).asInstanceOf[TypoShort],
          onlineorderflag = arr(6).asInstanceOf[Flag],
          purchaseordernumber = arr(7).asInstanceOf[Option[OrderNumber]],
          accountnumber = arr(8).asInstanceOf[Option[AccountNumber]],
          customerid = arr(9).asInstanceOf[CustomerId],
          salespersonid = arr(10).asInstanceOf[Option[BusinessentityId]],
          territoryid = arr(11).asInstanceOf[Option[SalesterritoryId]],
          billtoaddressid = arr(12).asInstanceOf[AddressId],
          shiptoaddressid = arr(13).asInstanceOf[AddressId],
          shipmethodid = arr(14).asInstanceOf[ShipmethodId],
          creditcardid = arr(15).asInstanceOf[Option[/* user-picked */ CustomCreditcardId]],
          creditcardapprovalcode = arr(16).asInstanceOf[Option[/* max 15 chars */ String]],
          currencyrateid = arr(17).asInstanceOf[Option[CurrencyrateId]],
          subtotal = arr(18).asInstanceOf[BigDecimal],
          taxamt = arr(19).asInstanceOf[BigDecimal],
          freight = arr(20).asInstanceOf[BigDecimal],
          totaldue = arr(21).asInstanceOf[Option[BigDecimal]],
          comment = arr(22).asInstanceOf[Option[/* max 128 chars */ String]],
          rowguid = arr(23).asInstanceOf[TypoUUID],
          modifieddate = arr(24).asInstanceOf[TypoLocalDateTime]
    )
  }
  implicit lazy val text: Text[SalesorderheaderRow] = Text.instance[SalesorderheaderRow]{ (row, sb) =>
    SalesorderheaderId.text.unsafeEncode(row.salesorderid, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.revisionnumber, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.orderdate, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.duedate, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.shipdate, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.status, sb)
    sb.append(Text.DELIMETER)
    Flag.text.unsafeEncode(row.onlineorderflag, sb)
    sb.append(Text.DELIMETER)
    Text.option(OrderNumber.text).unsafeEncode(row.purchaseordernumber, sb)
    sb.append(Text.DELIMETER)
    Text.option(AccountNumber.text).unsafeEncode(row.accountnumber, sb)
    sb.append(Text.DELIMETER)
    CustomerId.text.unsafeEncode(row.customerid, sb)
    sb.append(Text.DELIMETER)
    Text.option(BusinessentityId.text).unsafeEncode(row.salespersonid, sb)
    sb.append(Text.DELIMETER)
    Text.option(SalesterritoryId.text).unsafeEncode(row.territoryid, sb)
    sb.append(Text.DELIMETER)
    AddressId.text.unsafeEncode(row.billtoaddressid, sb)
    sb.append(Text.DELIMETER)
    AddressId.text.unsafeEncode(row.shiptoaddressid, sb)
    sb.append(Text.DELIMETER)
    ShipmethodId.text.unsafeEncode(row.shipmethodid, sb)
    sb.append(Text.DELIMETER)
    Text.option(CustomCreditcardId.text).unsafeEncode(row.creditcardid, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.creditcardapprovalcode, sb)
    sb.append(Text.DELIMETER)
    Text.option(CurrencyrateId.text).unsafeEncode(row.currencyrateid, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.subtotal, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.taxamt, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.freight, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.totaldue, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.comment, sb)
    sb.append(Text.DELIMETER)
    TypoUUID.text.unsafeEncode(row.rowguid, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val write: Write[SalesorderheaderRow] = new Write.Composite[SalesorderheaderRow](
    List(new Write.Single(SalesorderheaderId.put),
         new Write.Single(TypoShort.put),
         new Write.Single(TypoLocalDateTime.put),
         new Write.Single(TypoLocalDateTime.put),
         new Write.Single(TypoLocalDateTime.put).toOpt,
         new Write.Single(TypoShort.put),
         new Write.Single(Flag.put),
         new Write.Single(OrderNumber.put).toOpt,
         new Write.Single(AccountNumber.put).toOpt,
         new Write.Single(CustomerId.put),
         new Write.Single(BusinessentityId.put).toOpt,
         new Write.Single(SalesterritoryId.put).toOpt,
         new Write.Single(AddressId.put),
         new Write.Single(AddressId.put),
         new Write.Single(ShipmethodId.put),
         new Write.Single(/* user-picked */ CustomCreditcardId.put).toOpt,
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(CurrencyrateId.put).toOpt,
         new Write.Single(Meta.ScalaBigDecimalMeta.put),
         new Write.Single(Meta.ScalaBigDecimalMeta.put),
         new Write.Single(Meta.ScalaBigDecimalMeta.put),
         new Write.Single(Meta.ScalaBigDecimalMeta.put).toOpt,
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(TypoUUID.put),
         new Write.Single(TypoLocalDateTime.put)),
    a => List(a.salesorderid, a.revisionnumber, a.orderdate, a.duedate, a.shipdate, a.status, a.onlineorderflag, a.purchaseordernumber, a.accountnumber, a.customerid, a.salespersonid, a.territoryid, a.billtoaddressid, a.shiptoaddressid, a.shipmethodid, a.creditcardid, a.creditcardapprovalcode, a.currencyrateid, a.subtotal, a.taxamt, a.freight, a.totaldue, a.comment, a.rowguid, a.modifieddate)
  )
}
