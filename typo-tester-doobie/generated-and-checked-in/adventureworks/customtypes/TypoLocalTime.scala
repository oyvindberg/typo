/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import cats.data.NonEmptyList
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import java.time.LocalTime
import java.time.temporal.ChronoUnit
import typo.dsl.Bijection

/** This is `java.time.LocalTime`, but with microsecond precision and transferred to and from postgres as strings. The reason is that postgres driver and db libs are broken */
case class TypoLocalTime(value: LocalTime)

object TypoLocalTime {
  def apply(value: LocalTime): TypoLocalTime = new TypoLocalTime(value.truncatedTo(ChronoUnit.MICROS))
  def apply(str: String): TypoLocalTime = apply(LocalTime.parse(str))
  def now: TypoLocalTime = TypoLocalTime(LocalTime.now)
  implicit lazy val arrayGet: Get[Array[TypoLocalTime]] = Get.Advanced.array[AnyRef](NonEmptyList.one("time[]"))
    .map(_.map(v => TypoLocalTime(LocalTime.parse(v.asInstanceOf[String]))))
  implicit lazy val arrayPut: Put[Array[TypoLocalTime]] = Put.Advanced.array[AnyRef](NonEmptyList.one("time[]"), "time")
    .contramap(_.map(v => v.value.toString))
  implicit lazy val bijection: Bijection[TypoLocalTime, LocalTime] = Bijection[TypoLocalTime, LocalTime](_.value)(TypoLocalTime.apply)
  implicit lazy val decoder: Decoder[TypoLocalTime] = Decoder.decodeLocalTime.map(TypoLocalTime.apply)
  implicit lazy val encoder: Encoder[TypoLocalTime] = Encoder.encodeLocalTime.contramap(_.value)
  implicit lazy val get: Get[TypoLocalTime] = Get.Advanced.other[String](NonEmptyList.one("time"))
    .map(v => TypoLocalTime(LocalTime.parse(v)))
  implicit lazy val ordering: Ordering[TypoLocalTime] = Ordering.by(_.value)
  implicit lazy val put: Put[TypoLocalTime] = Put.Advanced.other[String](NonEmptyList.one("time")).contramap(v => v.value.toString)
  implicit lazy val text: Text[TypoLocalTime] = new Text[TypoLocalTime] {
    override def unsafeEncode(v: TypoLocalTime, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value.toString, sb)
    override def unsafeArrayEncode(v: TypoLocalTime, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value.toString, sb)
  }
}
