/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import cats.data.NonEmptyList
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import org.postgresql.geometric.PGline

/** This implements a line represented by the linear equation Ax + By + C = 0 */
case class TypoLine(a: Double, b: Double, c: Double)

object TypoLine {
  implicit lazy val arrayGet: Get[Array[TypoLine]] = Get.Advanced.array[AnyRef](NonEmptyList.one("_line"))
    .map(_.map(v => TypoLine(v.asInstanceOf[PGline].a, v.asInstanceOf[PGline].b, v.asInstanceOf[PGline].c)))
  implicit lazy val arrayPut: Put[Array[TypoLine]] = Put.Advanced.array[AnyRef](NonEmptyList.one("_line"), "line")
    .contramap(_.map(v => new PGline(v.a, v.b, v.c)))
  implicit lazy val decoder: Decoder[TypoLine] = Decoder.forProduct3[TypoLine, Double, Double, Double]("a", "b", "c")(TypoLine.apply)(Decoder.decodeDouble, Decoder.decodeDouble, Decoder.decodeDouble)
  implicit lazy val encoder: Encoder[TypoLine] = Encoder.forProduct3[TypoLine, Double, Double, Double]("a", "b", "c")(x => (x.a, x.b, x.c))(Encoder.encodeDouble, Encoder.encodeDouble, Encoder.encodeDouble)
  implicit lazy val get: Get[TypoLine] = Get.Advanced.other[PGline](NonEmptyList.one("line"))
    .map(v => TypoLine(v.a, v.b, v.c))
  implicit lazy val ordering: Ordering[TypoLine] = Ordering.by(x => (x.a, x.b, x.c))
  implicit lazy val put: Put[TypoLine] = Put.Advanced.other[PGline](NonEmptyList.one("line")).contramap(v => new PGline(v.a, v.b, v.c))
  implicit lazy val text: Text[TypoLine] = new Text[TypoLine] {
    override def unsafeEncode(v: TypoLine, sb: StringBuilder) = Text.stringInstance.unsafeEncode(s"{${v.a},${v.b},${v.c}}", sb)
    override def unsafeArrayEncode(v: TypoLine, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(s"{${v.a},${v.b},${v.c}}", sb)
  }
}
