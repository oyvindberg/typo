/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import cats.data.NonEmptyList
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import org.postgresql.util.PGobject
import typo.dsl.Bijection

/** inet (via PGObject) */
case class TypoInet(value: String)

object TypoInet {
  implicit lazy val arrayGet: Get[Array[TypoInet]] = Get.Advanced.array[AnyRef](NonEmptyList.one("inet[]"))
    .map(_.map(v => TypoInet(v.asInstanceOf[PGobject].getValue)))
  implicit lazy val arrayPut: Put[Array[TypoInet]] = Put.Advanced.array[AnyRef](NonEmptyList.one("inet[]"), "inet")
    .contramap(_.map(v => {
                            val obj = new PGobject
                            obj.setType("inet")
                            obj.setValue(v.value)
                            obj
                          }))
  implicit lazy val bijection: Bijection[TypoInet, String] = Bijection[TypoInet, String](_.value)(TypoInet.apply)
  implicit lazy val decoder: Decoder[TypoInet] = Decoder.decodeString.map(TypoInet.apply)
  implicit lazy val encoder: Encoder[TypoInet] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[TypoInet] = Get.Advanced.other[PGobject](NonEmptyList.one("inet"))
    .map(v => TypoInet(v.getValue))
  implicit lazy val ordering: Ordering[TypoInet] = Ordering.by(_.value)
  implicit lazy val put: Put[TypoInet] = Put.Advanced.other[PGobject](NonEmptyList.one("inet")).contramap(v => {
                                                                          val obj = new PGobject
                                                                          obj.setType("inet")
                                                                          obj.setValue(v.value)
                                                                          obj
                                                                        })
  implicit lazy val text: Text[TypoInet] = new Text[TypoInet] {
    override def unsafeEncode(v: TypoInet, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: TypoInet, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}
