/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import cats.data.NonEmptyList
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import org.postgresql.util.PGobject
import typo.dsl.Bijection

/** json (via PGObject) */
case class TypoJson(value: String)

object TypoJson {
  implicit lazy val arrayGet: Get[Array[TypoJson]] = Get.Advanced.array[AnyRef](NonEmptyList.one("json[]"))
    .map(_.map(v => TypoJson(v.asInstanceOf[String])))
  implicit lazy val arrayPut: Put[Array[TypoJson]] = Put.Advanced.array[AnyRef](NonEmptyList.one("json[]"), "json")
    .contramap(_.map(v => {
                            val obj = new PGobject
                            obj.setType("json")
                            obj.setValue(v.value)
                            obj
                          }))
  implicit lazy val bijection: Bijection[TypoJson, String] = Bijection[TypoJson, String](_.value)(TypoJson.apply)
  implicit lazy val decoder: Decoder[TypoJson] = Decoder.decodeString.map(TypoJson.apply)
  implicit lazy val encoder: Encoder[TypoJson] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[TypoJson] = Get.Advanced.other[PGobject](NonEmptyList.one("json"))
    .map(v => TypoJson(v.getValue))
  implicit lazy val ordering: Ordering[TypoJson] = Ordering.by(_.value)
  implicit lazy val put: Put[TypoJson] = Put.Advanced.other[PGobject](NonEmptyList.one("json")).contramap(v => {
                                                                          val obj = new PGobject
                                                                          obj.setType("json")
                                                                          obj.setValue(v.value)
                                                                          obj
                                                                        })
  implicit lazy val text: Text[TypoJson] = new Text[TypoJson] {
    override def unsafeEncode(v: TypoJson, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: TypoJson, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}
