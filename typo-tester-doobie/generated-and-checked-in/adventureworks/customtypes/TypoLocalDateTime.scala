/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import cats.data.NonEmptyList
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.format.DateTimeFormatterBuilder
import java.time.temporal.ChronoField
import java.time.temporal.ChronoUnit
import typo.dsl.Bijection

/** This is `java.time.LocalDateTime`, but with microsecond precision and transferred to and from postgres as strings. The reason is that postgres driver and db libs are broken */
case class TypoLocalDateTime(value: LocalDateTime)

object TypoLocalDateTime {
  val parser: DateTimeFormatter = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm:ss").appendFraction(ChronoField.MICRO_OF_SECOND, 0, 6, true).toFormatter
  def apply(value: LocalDateTime): TypoLocalDateTime = new TypoLocalDateTime(value.truncatedTo(ChronoUnit.MICROS))
  def apply(str: String): TypoLocalDateTime = apply(LocalDateTime.parse(str, parser))
  def now = TypoLocalDateTime(LocalDateTime.now)
  implicit lazy val arrayGet: Get[Array[TypoLocalDateTime]] = Get.Advanced.array[AnyRef](NonEmptyList.one("_timestamp"))
    .map(_.map(v => TypoLocalDateTime(LocalDateTime.parse(v.asInstanceOf[String], parser))))
  implicit lazy val arrayPut: Put[Array[TypoLocalDateTime]] = Put.Advanced.array[AnyRef](NonEmptyList.one("_timestamp"), "timestamp")
    .contramap(_.map(v => v.value.toString))
  implicit lazy val bijection: Bijection[TypoLocalDateTime, LocalDateTime] = Bijection[TypoLocalDateTime, LocalDateTime](_.value)(TypoLocalDateTime.apply)
  implicit lazy val decoder: Decoder[TypoLocalDateTime] = Decoder.decodeLocalDateTime.map(TypoLocalDateTime.apply)
  implicit lazy val encoder: Encoder[TypoLocalDateTime] = Encoder.encodeLocalDateTime.contramap(_.value)
  implicit lazy val get: Get[TypoLocalDateTime] = Get.Advanced.other[String](NonEmptyList.one("timestamp"))
    .map(v => TypoLocalDateTime(LocalDateTime.parse(v, parser)))
  implicit lazy val ordering: Ordering[TypoLocalDateTime] = Ordering.by(_.value)
  implicit lazy val put: Put[TypoLocalDateTime] = Put.Advanced.other[String](NonEmptyList.one("timestamp")).contramap(v => v.value.toString)
  implicit lazy val text: Text[TypoLocalDateTime] = new Text[TypoLocalDateTime] {
    override def unsafeEncode(v: TypoLocalDateTime, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value.toString, sb)
    override def unsafeArrayEncode(v: TypoLocalDateTime, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value.toString, sb)
  }
}
