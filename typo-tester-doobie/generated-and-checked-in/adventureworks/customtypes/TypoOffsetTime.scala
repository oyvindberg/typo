/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import cats.data.NonEmptyList
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import java.time.OffsetTime
import java.time.format.DateTimeFormatter
import java.time.format.DateTimeFormatterBuilder
import java.time.temporal.ChronoField
import java.time.temporal.ChronoUnit
import typo.dsl.Bijection

/** This is `java.time.OffsetTime`, but with microsecond precision and transferred to and from postgres as strings. The reason is that postgres driver and db libs are broken */
case class TypoOffsetTime(value: OffsetTime)

object TypoOffsetTime {
  val parser: DateTimeFormatter = new DateTimeFormatterBuilder().appendPattern("HH:mm:ss").appendFraction(ChronoField.MICRO_OF_SECOND, 0, 6, true).appendPattern("X").toFormatter
  def apply(value: OffsetTime): TypoOffsetTime = new TypoOffsetTime(value.truncatedTo(ChronoUnit.MICROS))
  def apply(str: String): TypoOffsetTime = apply(OffsetTime.parse(str, parser))
  def now = TypoOffsetTime(OffsetTime.now)
  implicit lazy val arrayGet: Get[Array[TypoOffsetTime]] = Get.Advanced.array[AnyRef](NonEmptyList.one("_timetz"))
    .map(_.map(v => TypoOffsetTime(OffsetTime.parse(v.asInstanceOf[String], parser))))
  implicit lazy val arrayPut: Put[Array[TypoOffsetTime]] = Put.Advanced.array[AnyRef](NonEmptyList.one("_timetz"), "timetz")
    .contramap(_.map(v => v.value.toString))
  implicit lazy val bijection: Bijection[TypoOffsetTime, OffsetTime] = Bijection[TypoOffsetTime, OffsetTime](_.value)(TypoOffsetTime.apply)
  implicit lazy val decoder: Decoder[TypoOffsetTime] = Decoder.decodeOffsetTime.map(TypoOffsetTime.apply)
  implicit lazy val encoder: Encoder[TypoOffsetTime] = Encoder.encodeOffsetTime.contramap(_.value)
  implicit lazy val get: Get[TypoOffsetTime] = Get.Advanced.other[String](NonEmptyList.one("timetz"))
    .map(v => TypoOffsetTime(OffsetTime.parse(v, parser)))
  implicit def ordering(implicit O0: Ordering[OffsetTime]): Ordering[TypoOffsetTime] = Ordering.by(_.value)
  implicit lazy val put: Put[TypoOffsetTime] = Put.Advanced.other[String](NonEmptyList.one("timetz")).contramap(v => v.value.toString)
  implicit lazy val text: Text[TypoOffsetTime] = new Text[TypoOffsetTime] {
    override def unsafeEncode(v: TypoOffsetTime, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value.toString, sb)
    override def unsafeArrayEncode(v: TypoOffsetTime, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value.toString, sb)
  }
}
