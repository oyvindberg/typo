/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder
import io.circe.Json


/**
 * This signals a value where if you don't provide it, postgres will generate it for you
 */
sealed trait Defaulted[+T]

object Defaulted {
  case class Provided[T](value: T) extends Defaulted[T]
  case object UseDefault extends Defaulted[Nothing]
  implicit def decoder[T](implicit T: Decoder[T]): Decoder[Defaulted[T]] = c => c.as[String].flatMap {
      case "defaulted" => Right(UseDefault)
      case _           => c.downField("provided").as[T].map(Provided.apply)
    }
  implicit def encoder[T](implicit T: Encoder[T]): Encoder[Defaulted[T]] = Encoder.instance {
    case Provided(value) => Json.obj("provided" -> Encoder[T].apply(value))
    case UseDefault      => Json.fromString("defaulted")
  }
  val DEFAULT_VALUE = "__DEFAULT_VALUE__"
  implicit def textEncoder[T: Text]: Text[Defaulted[T]] =
    Text.instance { (t, s) => {
        val encoded = t match {
          case Defaulted.Provided(value) => implicitly[Text[T]].encode(value)
          case Defaulted.UseDefault      => DEFAULT_VALUE
        }
        s.append(encoded)
        ()
      }
    }
}
