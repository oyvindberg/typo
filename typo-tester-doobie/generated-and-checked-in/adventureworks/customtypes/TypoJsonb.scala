/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package customtypes

import cats.data.NonEmptyList
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import org.postgresql.util.PGobject
import typo.dsl.Bijection

/** jsonb (via PGObject) */
case class TypoJsonb(value: String)

object TypoJsonb {
  implicit lazy val arrayGet: Get[Array[TypoJsonb]] = Get.Advanced.array[AnyRef](NonEmptyList.one("jsonb[]"))
    .map(_.map(v => TypoJsonb(v.asInstanceOf[String])))
  implicit lazy val arrayPut: Put[Array[TypoJsonb]] = Put.Advanced.array[AnyRef](NonEmptyList.one("jsonb[]"), "jsonb")
    .contramap(_.map(v => {
                            val obj = new PGobject
                            obj.setType("jsonb")
                            obj.setValue(v.value)
                            obj
                          }))
  implicit lazy val bijection: Bijection[TypoJsonb, String] = Bijection[TypoJsonb, String](_.value)(TypoJsonb.apply)
  implicit lazy val decoder: Decoder[TypoJsonb] = Decoder.decodeString.map(TypoJsonb.apply)
  implicit lazy val encoder: Encoder[TypoJsonb] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[TypoJsonb] = Get.Advanced.other[PGobject](NonEmptyList.one("jsonb"))
    .map(v => TypoJsonb(v.getValue))
  implicit lazy val ordering: Ordering[TypoJsonb] = Ordering.by(_.value)
  implicit lazy val put: Put[TypoJsonb] = Put.Advanced.other[PGobject](NonEmptyList.one("jsonb")).contramap(v => {
                                                                           val obj = new PGobject
                                                                           obj.setType("jsonb")
                                                                           obj.setValue(v.value)
                                                                           obj
                                                                         })
  implicit lazy val text: Text[TypoJsonb] = new Text[TypoJsonb] {
    override def unsafeEncode(v: TypoJsonb, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: TypoJsonb, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}
