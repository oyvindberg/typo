/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package v

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoShort
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** View: pu.v */
case class VViewRow(
  /** Points to [[purchasing.vendor.VendorRow.businessentityid]] */
  id: BusinessentityId,
  /** Points to [[purchasing.vendor.VendorRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[purchasing.vendor.VendorRow.accountnumber]] */
  accountnumber: AccountNumber,
  /** Points to [[purchasing.vendor.VendorRow.name]] */
  name: Name,
  /** Points to [[purchasing.vendor.VendorRow.creditrating]] */
  creditrating: TypoShort,
  /** Points to [[purchasing.vendor.VendorRow.preferredvendorstatus]] */
  preferredvendorstatus: Flag,
  /** Points to [[purchasing.vendor.VendorRow.activeflag]] */
  activeflag: Flag,
  /** Points to [[purchasing.vendor.VendorRow.purchasingwebserviceurl]] */
  purchasingwebserviceurl: Option[/* max 1024 chars */ String],
  /** Points to [[purchasing.vendor.VendorRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object VViewRow {
  implicit lazy val decoder: Decoder[VViewRow] = Decoder.forProduct9[VViewRow, BusinessentityId, BusinessentityId, AccountNumber, Name, TypoShort, Flag, Flag, Option[/* max 1024 chars */ String], TypoLocalDateTime]("id", "businessentityid", "accountnumber", "name", "creditrating", "preferredvendorstatus", "activeflag", "purchasingwebserviceurl", "modifieddate")(VViewRow.apply)(BusinessentityId.decoder, BusinessentityId.decoder, AccountNumber.decoder, Name.decoder, TypoShort.decoder, Flag.decoder, Flag.decoder, Decoder.decodeOption(Decoder.decodeString), TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[VViewRow] = Encoder.forProduct9[VViewRow, BusinessentityId, BusinessentityId, AccountNumber, Name, TypoShort, Flag, Flag, Option[/* max 1024 chars */ String], TypoLocalDateTime]("id", "businessentityid", "accountnumber", "name", "creditrating", "preferredvendorstatus", "activeflag", "purchasingwebserviceurl", "modifieddate")(x => (x.id, x.businessentityid, x.accountnumber, x.name, x.creditrating, x.preferredvendorstatus, x.activeflag, x.purchasingwebserviceurl, x.modifieddate))(BusinessentityId.encoder, BusinessentityId.encoder, AccountNumber.encoder, Name.encoder, TypoShort.encoder, Flag.encoder, Flag.encoder, Encoder.encodeOption(Encoder.encodeString), TypoLocalDateTime.encoder)
  implicit lazy val read: Read[VViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(AccountNumber.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoShort.get).asInstanceOf[Read[Any]],
      new Read.Single(Flag.get).asInstanceOf[Read[Any]],
      new Read.Single(Flag.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    VViewRow(
      id = arr(0).asInstanceOf[BusinessentityId],
          businessentityid = arr(1).asInstanceOf[BusinessentityId],
          accountnumber = arr(2).asInstanceOf[AccountNumber],
          name = arr(3).asInstanceOf[Name],
          creditrating = arr(4).asInstanceOf[TypoShort],
          preferredvendorstatus = arr(5).asInstanceOf[Flag],
          activeflag = arr(6).asInstanceOf[Flag],
          purchasingwebserviceurl = arr(7).asInstanceOf[Option[/* max 1024 chars */ String]],
          modifieddate = arr(8).asInstanceOf[TypoLocalDateTime]
    )
  }
}
