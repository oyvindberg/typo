/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package pv

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** View: pu.pv */
case class PvViewRow(
  /** Points to [[purchasing.productvendor.ProductvendorRow.productid]] */
  id: ProductId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.productid]] */
  productid: ProductId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.averageleadtime]] */
  averageleadtime: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.standardprice]] */
  standardprice: BigDecimal,
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptcost]] */
  lastreceiptcost: Option[BigDecimal],
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptdate]] */
  lastreceiptdate: Option[TypoLocalDateTime],
  /** Points to [[purchasing.productvendor.ProductvendorRow.minorderqty]] */
  minorderqty: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.maxorderqty]] */
  maxorderqty: Int,
  /** Points to [[purchasing.productvendor.ProductvendorRow.onorderqty]] */
  onorderqty: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.unitmeasurecode]] */
  unitmeasurecode: UnitmeasureId,
  /** Points to [[purchasing.productvendor.ProductvendorRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object PvViewRow {
  implicit lazy val decoder: Decoder[PvViewRow] = Decoder.forProduct12[PvViewRow, ProductId, ProductId, BusinessentityId, Int, BigDecimal, Option[BigDecimal], Option[TypoLocalDateTime], Int, Int, Option[Int], UnitmeasureId, TypoLocalDateTime]("id", "productid", "businessentityid", "averageleadtime", "standardprice", "lastreceiptcost", "lastreceiptdate", "minorderqty", "maxorderqty", "onorderqty", "unitmeasurecode", "modifieddate")(PvViewRow.apply)(ProductId.decoder, ProductId.decoder, BusinessentityId.decoder, Decoder.decodeInt, Decoder.decodeBigDecimal, Decoder.decodeOption(Decoder.decodeBigDecimal), Decoder.decodeOption(TypoLocalDateTime.decoder), Decoder.decodeInt, Decoder.decodeInt, Decoder.decodeOption(Decoder.decodeInt), UnitmeasureId.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[PvViewRow] = Encoder.forProduct12[PvViewRow, ProductId, ProductId, BusinessentityId, Int, BigDecimal, Option[BigDecimal], Option[TypoLocalDateTime], Int, Int, Option[Int], UnitmeasureId, TypoLocalDateTime]("id", "productid", "businessentityid", "averageleadtime", "standardprice", "lastreceiptcost", "lastreceiptdate", "minorderqty", "maxorderqty", "onorderqty", "unitmeasurecode", "modifieddate")(x => (x.id, x.productid, x.businessentityid, x.averageleadtime, x.standardprice, x.lastreceiptcost, x.lastreceiptdate, x.minorderqty, x.maxorderqty, x.onorderqty, x.unitmeasurecode, x.modifieddate))(ProductId.encoder, ProductId.encoder, BusinessentityId.encoder, Encoder.encodeInt, Encoder.encodeBigDecimal, Encoder.encodeOption(Encoder.encodeBigDecimal), Encoder.encodeOption(TypoLocalDateTime.encoder), Encoder.encodeInt, Encoder.encodeInt, Encoder.encodeOption(Encoder.encodeInt), UnitmeasureId.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[PvViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(ProductId.get).asInstanceOf[Read[Any]],
      new Read.Single(ProductId.get).asInstanceOf[Read[Any]],
      new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(UnitmeasureId.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PvViewRow(
      id = arr(0).asInstanceOf[ProductId],
          productid = arr(1).asInstanceOf[ProductId],
          businessentityid = arr(2).asInstanceOf[BusinessentityId],
          averageleadtime = arr(3).asInstanceOf[Int],
          standardprice = arr(4).asInstanceOf[BigDecimal],
          lastreceiptcost = arr(5).asInstanceOf[Option[BigDecimal]],
          lastreceiptdate = arr(6).asInstanceOf[Option[TypoLocalDateTime]],
          minorderqty = arr(7).asInstanceOf[Int],
          maxorderqty = arr(8).asInstanceOf[Int],
          onorderqty = arr(9).asInstanceOf[Option[Int]],
          unitmeasurecode = arr(10).asInstanceOf[UnitmeasureId],
          modifieddate = arr(11).asInstanceOf[TypoLocalDateTime]
    )
  }
}
