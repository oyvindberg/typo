/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.public.Name
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import io.circe.Decoder
import io.circe.Encoder

/** Table: production.culture
    Lookup table containing the languages in which some AdventureWorks data is stored.
    Primary key: cultureid */
case class CultureRow(
  /** Primary key for Culture records. */
  cultureid: CultureId,
  /** Culture description. */
  name: Name,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val id = cultureid
   def toUnsavedRow(modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): CultureRowUnsaved =
     CultureRowUnsaved(cultureid, name, modifieddate)
 }

object CultureRow {
  implicit lazy val decoder: Decoder[CultureRow] = Decoder.forProduct3[CultureRow, CultureId, Name, TypoLocalDateTime]("cultureid", "name", "modifieddate")(CultureRow.apply)(CultureId.decoder, Name.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[CultureRow] = Encoder.forProduct3[CultureRow, CultureId, Name, TypoLocalDateTime]("cultureid", "name", "modifieddate")(x => (x.cultureid, x.name, x.modifieddate))(CultureId.encoder, Name.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[CultureRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(CultureId.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    CultureRow(
      cultureid = arr(0).asInstanceOf[CultureId],
          name = arr(1).asInstanceOf[Name],
          modifieddate = arr(2).asInstanceOf[TypoLocalDateTime]
    )
  }
  implicit lazy val text: Text[CultureRow] = Text.instance[CultureRow]{ (row, sb) =>
    CultureId.text.unsafeEncode(row.cultureid, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val write: Write[CultureRow] = new Write.Composite[CultureRow](
    List(new Write.Single(CultureId.put),
         new Write.Single(Name.put),
         new Write.Single(TypoLocalDateTime.put)),
    a => List(a.cultureid, a.name, a.modifieddate)
  )
}
