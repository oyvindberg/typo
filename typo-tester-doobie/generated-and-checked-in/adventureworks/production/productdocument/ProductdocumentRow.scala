/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productdocument

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.document.DocumentId
import adventureworks.production.product.ProductId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import io.circe.Decoder
import io.circe.Encoder

/** Table: production.productdocument
    Cross-reference table mapping products to related product documents.
    Composite primary key: productid, documentnode */
case class ProductdocumentRow(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Default: now() */
  modifieddate: TypoLocalDateTime,
  /** Document identification number. Foreign key to Document.DocumentNode.
      Default: '/'::character varying
      Points to [[document.DocumentRow.documentnode]] */
  documentnode: DocumentId
){
   val compositeId: ProductdocumentId = ProductdocumentId(productid, documentnode)
   val id = compositeId
   def toUnsavedRow(documentnode: Defaulted[DocumentId], modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): ProductdocumentRowUnsaved =
     ProductdocumentRowUnsaved(productid, modifieddate, documentnode)
 }

object ProductdocumentRow {
  def apply(compositeId: ProductdocumentId, modifieddate: TypoLocalDateTime) =
    new ProductdocumentRow(compositeId.productid, modifieddate, compositeId.documentnode)
  implicit lazy val decoder: Decoder[ProductdocumentRow] = Decoder.forProduct3[ProductdocumentRow, ProductId, TypoLocalDateTime, DocumentId]("productid", "modifieddate", "documentnode")(ProductdocumentRow.apply)(ProductId.decoder, TypoLocalDateTime.decoder, DocumentId.decoder)
  implicit lazy val encoder: Encoder[ProductdocumentRow] = Encoder.forProduct3[ProductdocumentRow, ProductId, TypoLocalDateTime, DocumentId]("productid", "modifieddate", "documentnode")(x => (x.productid, x.modifieddate, x.documentnode))(ProductId.encoder, TypoLocalDateTime.encoder, DocumentId.encoder)
  implicit lazy val read: Read[ProductdocumentRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(ProductId.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.Single(DocumentId.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    ProductdocumentRow(
      productid = arr(0).asInstanceOf[ProductId],
          modifieddate = arr(1).asInstanceOf[TypoLocalDateTime],
          documentnode = arr(2).asInstanceOf[DocumentId]
    )
  }
  implicit lazy val text: Text[ProductdocumentRow] = Text.instance[ProductdocumentRow]{ (row, sb) =>
    ProductId.text.unsafeEncode(row.productid, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
    sb.append(Text.DELIMETER)
    DocumentId.text.unsafeEncode(row.documentnode, sb)
  }
  implicit lazy val write: Write[ProductdocumentRow] = new Write.Composite[ProductdocumentRow](
    List(new Write.Single(ProductId.put),
         new Write.Single(TypoLocalDateTime.put),
         new Write.Single(DocumentId.put)),
    a => List(a.productid, a.modifieddate, a.documentnode)
  )
}
