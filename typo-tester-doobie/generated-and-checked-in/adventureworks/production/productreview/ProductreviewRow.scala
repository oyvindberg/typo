/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productreview

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.public.Name
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: production.productreview
    Customer reviews of products they have purchased.
    Primary key: productreviewid */
case class ProductreviewRow(
  /** Primary key for ProductReview records.
      Default: nextval('production.productreview_productreviewid_seq'::regclass) */
  productreviewid: ProductreviewId,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Name of the reviewer. */
  reviewername: Name,
  /** Date review was submitted.
      Default: now() */
  reviewdate: TypoLocalDateTime,
  /** Reviewer's e-mail address. */
  emailaddress: /* max 50 chars */ String,
  /** Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.
      Constraint CK_ProductReview_Rating affecting columns rating: (((rating >= 1) AND (rating <= 5))) */
  rating: Int,
  /** Reviewer's comments */
  comments: Option[/* max 3850 chars */ String],
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val id = productreviewid
   def toUnsavedRow(productreviewid: Defaulted[ProductreviewId], reviewdate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.reviewdate), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): ProductreviewRowUnsaved =
     ProductreviewRowUnsaved(productid, reviewername, emailaddress, rating, comments, productreviewid, reviewdate, modifieddate)
 }

object ProductreviewRow {
  implicit lazy val decoder: Decoder[ProductreviewRow] = Decoder.forProduct8[ProductreviewRow, ProductreviewId, ProductId, Name, TypoLocalDateTime, /* max 50 chars */ String, Int, Option[/* max 3850 chars */ String], TypoLocalDateTime]("productreviewid", "productid", "reviewername", "reviewdate", "emailaddress", "rating", "comments", "modifieddate")(ProductreviewRow.apply)(ProductreviewId.decoder, ProductId.decoder, Name.decoder, TypoLocalDateTime.decoder, Decoder.decodeString, Decoder.decodeInt, Decoder.decodeOption(Decoder.decodeString), TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[ProductreviewRow] = Encoder.forProduct8[ProductreviewRow, ProductreviewId, ProductId, Name, TypoLocalDateTime, /* max 50 chars */ String, Int, Option[/* max 3850 chars */ String], TypoLocalDateTime]("productreviewid", "productid", "reviewername", "reviewdate", "emailaddress", "rating", "comments", "modifieddate")(x => (x.productreviewid, x.productid, x.reviewername, x.reviewdate, x.emailaddress, x.rating, x.comments, x.modifieddate))(ProductreviewId.encoder, ProductId.encoder, Name.encoder, TypoLocalDateTime.encoder, Encoder.encodeString, Encoder.encodeInt, Encoder.encodeOption(Encoder.encodeString), TypoLocalDateTime.encoder)
  implicit lazy val read: Read[ProductreviewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(ProductreviewId.get).asInstanceOf[Read[Any]],
      new Read.Single(ProductId.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    ProductreviewRow(
      productreviewid = arr(0).asInstanceOf[ProductreviewId],
          productid = arr(1).asInstanceOf[ProductId],
          reviewername = arr(2).asInstanceOf[Name],
          reviewdate = arr(3).asInstanceOf[TypoLocalDateTime],
          emailaddress = arr(4).asInstanceOf[/* max 50 chars */ String],
          rating = arr(5).asInstanceOf[Int],
          comments = arr(6).asInstanceOf[Option[/* max 3850 chars */ String]],
          modifieddate = arr(7).asInstanceOf[TypoLocalDateTime]
    )
  }
  implicit lazy val text: Text[ProductreviewRow] = Text.instance[ProductreviewRow]{ (row, sb) =>
    ProductreviewId.text.unsafeEncode(row.productreviewid, sb)
    sb.append(Text.DELIMETER)
    ProductId.text.unsafeEncode(row.productid, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.reviewername, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.reviewdate, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.emailaddress, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.rating, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.comments, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val write: Write[ProductreviewRow] = new Write.Composite[ProductreviewRow](
    List(new Write.Single(ProductreviewId.put),
         new Write.Single(ProductId.put),
         new Write.Single(Name.put),
         new Write.Single(TypoLocalDateTime.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.IntMeta.put),
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(TypoLocalDateTime.put)),
    a => List(a.productreviewid, a.productid, a.reviewername, a.reviewdate, a.emailaddress, a.rating, a.comments, a.modifieddate)
  )
}
