/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package location

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.public.Name
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: production.location
    Product inventory and manufacturing locations.
    Primary key: locationid */
case class LocationRow(
  /** Primary key for Location records.
      Default: nextval('production.location_locationid_seq'::regclass) */
  locationid: LocationId,
  /** Location description. */
  name: Name,
  /** Standard hourly cost of the manufacturing location.
      Default: 0.00
      Constraint CK_Location_CostRate affecting columns costrate: ((costrate >= 0.00)) */
  costrate: BigDecimal,
  /** Work capacity (in hours) of the manufacturing location.
      Default: 0.00
      Constraint CK_Location_Availability affecting columns availability: ((availability >= 0.00)) */
  availability: BigDecimal,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val id = locationid
   def toUnsavedRow(locationid: Defaulted[LocationId], costrate: Defaulted[BigDecimal] = Defaulted.Provided(this.costrate), availability: Defaulted[BigDecimal] = Defaulted.Provided(this.availability), modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): LocationRowUnsaved =
     LocationRowUnsaved(name, locationid, costrate, availability, modifieddate)
 }

object LocationRow {
  implicit lazy val decoder: Decoder[LocationRow] = Decoder.forProduct5[LocationRow, LocationId, Name, BigDecimal, BigDecimal, TypoLocalDateTime]("locationid", "name", "costrate", "availability", "modifieddate")(LocationRow.apply)(LocationId.decoder, Name.decoder, Decoder.decodeBigDecimal, Decoder.decodeBigDecimal, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[LocationRow] = Encoder.forProduct5[LocationRow, LocationId, Name, BigDecimal, BigDecimal, TypoLocalDateTime]("locationid", "name", "costrate", "availability", "modifieddate")(x => (x.locationid, x.name, x.costrate, x.availability, x.modifieddate))(LocationId.encoder, Name.encoder, Encoder.encodeBigDecimal, Encoder.encodeBigDecimal, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[LocationRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(LocationId.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    LocationRow(
      locationid = arr(0).asInstanceOf[LocationId],
          name = arr(1).asInstanceOf[Name],
          costrate = arr(2).asInstanceOf[BigDecimal],
          availability = arr(3).asInstanceOf[BigDecimal],
          modifieddate = arr(4).asInstanceOf[TypoLocalDateTime]
    )
  }
  implicit lazy val text: Text[LocationRow] = Text.instance[LocationRow]{ (row, sb) =>
    LocationId.text.unsafeEncode(row.locationid, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.costrate, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.availability, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val write: Write[LocationRow] = new Write.Composite[LocationRow](
    List(new Write.Single(LocationId.put),
         new Write.Single(Name.put),
         new Write.Single(Meta.ScalaBigDecimalMeta.put),
         new Write.Single(Meta.ScalaBigDecimalMeta.put),
         new Write.Single(TypoLocalDateTime.put)),
    a => List(a.locationid, a.name, a.costrate, a.availability, a.modifieddate)
  )
}
