/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package illustration

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoXml
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import io.circe.Decoder
import io.circe.Encoder

/** Table: production.illustration
    Bicycle assembly diagrams.
    Primary key: illustrationid */
case class IllustrationRow(
  /** Primary key for Illustration records.
      Default: nextval('production.illustration_illustrationid_seq'::regclass) */
  illustrationid: IllustrationId,
  /** Illustrations used in manufacturing instructions. Stored as XML. */
  diagram: Option[TypoXml],
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val id = illustrationid
   def toUnsavedRow(illustrationid: Defaulted[IllustrationId], modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): IllustrationRowUnsaved =
     IllustrationRowUnsaved(diagram, illustrationid, modifieddate)
 }

object IllustrationRow {
  implicit lazy val decoder: Decoder[IllustrationRow] = Decoder.forProduct3[IllustrationRow, IllustrationId, Option[TypoXml], TypoLocalDateTime]("illustrationid", "diagram", "modifieddate")(IllustrationRow.apply)(IllustrationId.decoder, Decoder.decodeOption(TypoXml.decoder), TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[IllustrationRow] = Encoder.forProduct3[IllustrationRow, IllustrationId, Option[TypoXml], TypoLocalDateTime]("illustrationid", "diagram", "modifieddate")(x => (x.illustrationid, x.diagram, x.modifieddate))(IllustrationId.encoder, Encoder.encodeOption(TypoXml.encoder), TypoLocalDateTime.encoder)
  implicit lazy val read: Read[IllustrationRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(IllustrationId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoXml.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    IllustrationRow(
      illustrationid = arr(0).asInstanceOf[IllustrationId],
          diagram = arr(1).asInstanceOf[Option[TypoXml]],
          modifieddate = arr(2).asInstanceOf[TypoLocalDateTime]
    )
  }
  implicit lazy val text: Text[IllustrationRow] = Text.instance[IllustrationRow]{ (row, sb) =>
    IllustrationId.text.unsafeEncode(row.illustrationid, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoXml.text).unsafeEncode(row.diagram, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val write: Write[IllustrationRow] = new Write.Composite[IllustrationRow](
    List(new Write.Single(IllustrationId.put),
         new Write.Single(TypoXml.put).toOpt,
         new Write.Single(TypoLocalDateTime.put)),
    a => List(a.illustrationid, a.diagram, a.modifieddate)
  )
}
