/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package unitmeasure

import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import typo.dsl.Bijection

/** Type for the primary key of table `production.unitmeasure` */
case class UnitmeasureId(value: /* bpchar, max 3 chars */ String) extends AnyVal
object UnitmeasureId {
  implicit lazy val arrayGet: Get[Array[UnitmeasureId]] = adventureworks.StringArrayMeta.get.map(_.map(UnitmeasureId.apply))
  implicit lazy val arrayPut: Put[Array[UnitmeasureId]] = adventureworks.StringArrayMeta.put.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[UnitmeasureId, /* bpchar, max 3 chars */ String] = Bijection[UnitmeasureId, /* bpchar, max 3 chars */ String](_.value)(UnitmeasureId.apply)
  implicit lazy val decoder: Decoder[UnitmeasureId] = Decoder.decodeString.map(UnitmeasureId.apply)
  implicit lazy val encoder: Encoder[UnitmeasureId] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[UnitmeasureId] = Meta.StringMeta.get.map(UnitmeasureId.apply)
  implicit lazy val ordering: Ordering[UnitmeasureId] = Ordering.by(_.value)
  implicit lazy val put: Put[UnitmeasureId] = Meta.StringMeta.put.contramap(_.value)
  implicit lazy val text: Text[UnitmeasureId] = new Text[UnitmeasureId] {
    override def unsafeEncode(v: UnitmeasureId, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: UnitmeasureId, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}
