/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage

import cats.data.NonEmptyList
import doobie.enumerated.JdbcType
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Enum `frontpage.user_role`
  *  - admin
  *  - manager
  *  - employee
  */
sealed abstract class UserRole(val value: String)

object UserRole {
  def apply(str: String): Either[String, UserRole] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): UserRole =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object admin extends UserRole("admin")
  case object manager extends UserRole("manager")
  case object employee extends UserRole("employee")
  val All: List[UserRole] = List(admin, manager, employee)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, UserRole] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayGet: Get[Array[UserRole]] = adventureworks.StringArrayMeta.get.map(_.map(force))
  implicit lazy val arrayPut: Put[Array[UserRole]] = Put.Advanced.array[AnyRef](NonEmptyList.one("frontpage.user_role[]"), "frontpage.user_role").contramap(_.map(_.value))
  implicit lazy val decoder: Decoder[UserRole] = Decoder.decodeString.emap(UserRole.apply)
  implicit lazy val encoder: Encoder[UserRole] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[UserRole] = Meta.StringMeta.get.temap(UserRole.apply)
  implicit lazy val ordering: Ordering[UserRole] = Ordering.by(_.value)
  implicit lazy val put: Put[UserRole] = Put.Advanced.one[UserRole](JdbcType.Other, NonEmptyList.one("frontpage.user_role"), (ps, i, a) => ps.setString(i, a.value), (rs, i, a) => rs.updateString(i, a.value))
  implicit lazy val read: Read[UserRole] = new Read.Single(get)
  implicit lazy val text: Text[UserRole] = new Text[UserRole] {
    override def unsafeEncode(v: UserRole, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: UserRole, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val write: Write[UserRole] = new Write.Single(put)
}
