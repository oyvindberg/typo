/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage

import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import typo.dsl.Bijection

/** Domain `frontpage.email`
  * Constraint: CHECK ((VALUE ~ '^[^@]+@[^@]+\.[^@]+$'::text))
  */
case class Email(value: String)
object Email {
  implicit lazy val arrayGet: Get[Array[Email]] = adventureworks.StringArrayMeta.get.map(_.map(Email.apply))
  implicit lazy val arrayPut: Put[Array[Email]] = adventureworks.StringArrayMeta.put.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[Email, String] = Bijection[Email, String](_.value)(Email.apply)
  implicit lazy val decoder: Decoder[Email] = Decoder.decodeString.map(Email.apply)
  implicit lazy val encoder: Encoder[Email] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[Email] = Meta.StringMeta.get.map(Email.apply)
  implicit lazy val ordering: Ordering[Email] = Ordering.by(_.value)
  implicit lazy val put: Put[Email] = Meta.StringMeta.put.contramap(_.value)
  implicit lazy val text: Text[Email] = new Text[Email] {
    override def unsafeEncode(v: Email, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: Email, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}