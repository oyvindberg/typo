/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package category

import adventureworks.customtypes.Defaulted
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `frontpage.category` which has not been persisted yet */
case class CategoryRowUnsaved(
  name: String,
  /** Default: gen_random_uuid() */
  id: Defaulted[CategoryId] = Defaulted.UseDefault
) {
  def toRow(idDefault: => CategoryId): CategoryRow =
    CategoryRow(
      name = name,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           }
    )
}
object CategoryRowUnsaved {
  implicit lazy val decoder: Decoder[CategoryRowUnsaved] = Decoder.forProduct2[CategoryRowUnsaved, String, Defaulted[CategoryId]]("name", "id")(CategoryRowUnsaved.apply)(Decoder.decodeString, Defaulted.decoder(CategoryId.decoder))
  implicit lazy val encoder: Encoder[CategoryRowUnsaved] = Encoder.forProduct2[CategoryRowUnsaved, String, Defaulted[CategoryId]]("name", "id")(x => (x.name, x.id))(Encoder.encodeString, Defaulted.encoder(CategoryId.encoder))
  implicit lazy val text: Text[CategoryRowUnsaved] = Text.instance[CategoryRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(CategoryId.text).unsafeEncode(row.id, sb)
  }
}
