/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package category

import adventureworks.customtypes.TypoUUID
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import typo.dsl.Bijection

/** Type for the primary key of table `frontpage.category` */
case class CategoryId(value: TypoUUID) extends AnyVal
object CategoryId {
  implicit lazy val arrayGet: Get[Array[CategoryId]] = TypoUUID.arrayGet.map(_.map(CategoryId.apply))
  implicit lazy val arrayPut: Put[Array[CategoryId]] = TypoUUID.arrayPut.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[CategoryId, TypoUUID] = Bijection[CategoryId, TypoUUID](_.value)(CategoryId.apply)
  implicit lazy val decoder: Decoder[CategoryId] = TypoUUID.decoder.map(CategoryId.apply)
  implicit lazy val encoder: Encoder[CategoryId] = TypoUUID.encoder.contramap(_.value)
  implicit lazy val get: Get[CategoryId] = TypoUUID.get.map(CategoryId.apply)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[CategoryId] = Ordering.by(_.value)
  implicit lazy val put: Put[CategoryId] = TypoUUID.put.contramap(_.value)
  implicit lazy val text: Text[CategoryId] = new Text[CategoryId] {
    override def unsafeEncode(v: CategoryId, sb: StringBuilder) = TypoUUID.text.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: CategoryId, sb: StringBuilder) = TypoUUID.text.unsafeArrayEncode(v.value, sb)
  }
}
