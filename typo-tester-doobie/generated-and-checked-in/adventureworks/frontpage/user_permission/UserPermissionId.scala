/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.user.UserId
import io.circe.Decoder
import io.circe.Encoder

/** Type for the composite primary key of table `frontpage.user_permission` */
case class UserPermissionId(
  userId: UserId,
  permissionId: PermissionId
)
object UserPermissionId {
  implicit lazy val decoder: Decoder[UserPermissionId] = Decoder.forProduct2[UserPermissionId, UserId, PermissionId]("user_id", "permission_id")(UserPermissionId.apply)(UserId.decoder, PermissionId.decoder)
  implicit lazy val encoder: Encoder[UserPermissionId] = Encoder.forProduct2[UserPermissionId, UserId, PermissionId]("user_id", "permission_id")(x => (x.userId, x.permissionId))(UserId.encoder, PermissionId.encoder)
  implicit lazy val ordering: Ordering[UserPermissionId] = Ordering.by(x => (x.userId, x.permissionId))
}
