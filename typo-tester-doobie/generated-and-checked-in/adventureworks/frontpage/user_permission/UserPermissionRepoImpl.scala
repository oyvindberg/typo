/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.user.UserId
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class UserPermissionRepoImpl extends UserPermissionRepo {
  override def delete: DeleteBuilder[UserPermissionFields, UserPermissionRow] = {
    DeleteBuilder(""""frontpage"."user_permission"""", UserPermissionFields.structure)
  }
  override def deleteById(compositeId: UserPermissionId): ConnectionIO[Boolean] = {
    sql"""delete from "frontpage"."user_permission" where "user_id" = ${fromWrite(compositeId.userId)(new Write.Single(UserId.put))} AND "permission_id" = ${fromWrite(compositeId.permissionId)(new Write.Single(PermissionId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(compositeIds: Array[UserPermissionId]): ConnectionIO[Int] = {
    val userId = compositeIds.map(_.userId)
    val permissionId = compositeIds.map(_.permissionId)
    sql"""delete
          from "frontpage"."user_permission"
          where ("user_id", "permission_id")
          in (select unnest(${userId}), unnest(${permissionId}))
       """.update.run
    
  }
  override def insert(unsaved: UserPermissionRow): ConnectionIO[UserPermissionRow] = {
    sql"""insert into "frontpage"."user_permission"("user_id", "permission_id", "granted_at")
          values (${fromWrite(unsaved.userId)(new Write.Single(UserId.put))}::uuid, ${fromWrite(unsaved.permissionId)(new Write.Single(PermissionId.put))}::uuid, ${fromWrite(unsaved.grantedAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp)
          returning "user_id", "permission_id", "granted_at"::text
       """.query(using UserPermissionRow.read).unique
  }
  override def insert(unsaved: UserPermissionRowUnsaved): ConnectionIO[UserPermissionRow] = {
    val fs = List(
      Some((Fragment.const0(s""""user_id""""), fr"${fromWrite(unsaved.userId)(new Write.Single(UserId.put))}::uuid")),
      Some((Fragment.const0(s""""permission_id""""), fr"${fromWrite(unsaved.permissionId)(new Write.Single(PermissionId.put))}::uuid")),
      unsaved.grantedAt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""granted_at""""), fr"${fromWrite(value: Option[TypoLocalDateTime])(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."user_permission" default values
            returning "user_id", "permission_id", "granted_at"::text
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into "frontpage"."user_permission"(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "user_id", "permission_id", "granted_at"::text
         """
    }
    q.query(using UserPermissionRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, UserPermissionRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."user_permission"("user_id", "permission_id", "granted_at") FROM STDIN""").copyIn(unsaved, batchSize)(using UserPermissionRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, UserPermissionRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."user_permission"("user_id", "permission_id", "granted_at") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using UserPermissionRowUnsaved.text)
  }
  override def select: SelectBuilder[UserPermissionFields, UserPermissionRow] = {
    SelectBuilderSql(""""frontpage"."user_permission"""", UserPermissionFields.structure, UserPermissionRow.read)
  }
  override def selectAll: Stream[ConnectionIO, UserPermissionRow] = {
    sql"""select "user_id", "permission_id", "granted_at"::text from "frontpage"."user_permission"""".query(using UserPermissionRow.read).stream
  }
  override def selectById(compositeId: UserPermissionId): ConnectionIO[Option[UserPermissionRow]] = {
    sql"""select "user_id", "permission_id", "granted_at"::text from "frontpage"."user_permission" where "user_id" = ${fromWrite(compositeId.userId)(new Write.Single(UserId.put))} AND "permission_id" = ${fromWrite(compositeId.permissionId)(new Write.Single(PermissionId.put))}""".query(using UserPermissionRow.read).option
  }
  override def selectByIds(compositeIds: Array[UserPermissionId]): Stream[ConnectionIO, UserPermissionRow] = {
    val userId = compositeIds.map(_.userId)
    val permissionId = compositeIds.map(_.permissionId)
    sql"""select "user_id", "permission_id", "granted_at"::text
          from "frontpage"."user_permission"
          where ("user_id", "permission_id")
          in (select unnest(${userId}), unnest(${permissionId}))
       """.query(using UserPermissionRow.read).stream
    
  }
  override def selectByIdsTracked(compositeIds: Array[UserPermissionId]): ConnectionIO[Map[UserPermissionId, UserPermissionRow]] = {
    selectByIds(compositeIds).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.compositeId, x)).toMap
      compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[UserPermissionFields, UserPermissionRow] = {
    UpdateBuilder(""""frontpage"."user_permission"""", UserPermissionFields.structure, UserPermissionRow.read)
  }
  override def update(row: UserPermissionRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update "frontpage"."user_permission"
          set "granted_at" = ${fromWrite(row.grantedAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp
          where "user_id" = ${fromWrite(compositeId.userId)(new Write.Single(UserId.put))} AND "permission_id" = ${fromWrite(compositeId.permissionId)(new Write.Single(PermissionId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: UserPermissionRow): ConnectionIO[UserPermissionRow] = {
    sql"""insert into "frontpage"."user_permission"("user_id", "permission_id", "granted_at")
          values (
            ${fromWrite(unsaved.userId)(new Write.Single(UserId.put))}::uuid,
            ${fromWrite(unsaved.permissionId)(new Write.Single(PermissionId.put))}::uuid,
            ${fromWrite(unsaved.grantedAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp
          )
          on conflict ("user_id", "permission_id")
          do update set
            "granted_at" = EXCLUDED."granted_at"
          returning "user_id", "permission_id", "granted_at"::text
       """.query(using UserPermissionRow.read).unique
  }
  override def upsertBatch(unsaved: List[UserPermissionRow]): Stream[ConnectionIO, UserPermissionRow] = {
    Update[UserPermissionRow](
      s"""insert into "frontpage"."user_permission"("user_id", "permission_id", "granted_at")
          values (?::uuid,?::uuid,?::timestamp)
          on conflict ("user_id", "permission_id")
          do update set
            "granted_at" = EXCLUDED."granted_at"
          returning "user_id", "permission_id", "granted_at"::text"""
    )(using UserPermissionRow.write)
    .updateManyWithGeneratedKeys[UserPermissionRow]("user_id", "permission_id", "granted_at")(unsaved)(using catsStdInstancesForList, UserPermissionRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, UserPermissionRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table user_permission_TEMP (like "frontpage"."user_permission") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy user_permission_TEMP("user_id", "permission_id", "granted_at") from stdin""").copyIn(unsaved, batchSize)(using UserPermissionRow.text)
      res <- sql"""insert into "frontpage"."user_permission"("user_id", "permission_id", "granted_at")
                   select * from user_permission_TEMP
                   on conflict ("user_id", "permission_id")
                   do update set
                     "granted_at" = EXCLUDED."granted_at"
                   ;
                   drop table user_permission_TEMP;""".update.run
    } yield res
  }
}
