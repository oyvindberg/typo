/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.user.UserId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.user_permission
    Composite primary key: user_id, permission_id */
case class UserPermissionRow(
  /** Points to [[user.UserRow.id]] */
  userId: UserId,
  /** Points to [[permission.PermissionRow.id]] */
  permissionId: PermissionId,
  /** Default: now() */
  grantedAt: Option[TypoLocalDateTime]
){
   val compositeId: UserPermissionId = UserPermissionId(userId, permissionId)
   val id = compositeId
   def toUnsavedRow(grantedAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.Provided(this.grantedAt)): UserPermissionRowUnsaved =
     UserPermissionRowUnsaved(userId, permissionId, grantedAt)
 }

object UserPermissionRow {
  def apply(compositeId: UserPermissionId, grantedAt: Option[TypoLocalDateTime]) =
    new UserPermissionRow(compositeId.userId, compositeId.permissionId, grantedAt)
  implicit lazy val decoder: Decoder[UserPermissionRow] = Decoder.forProduct3[UserPermissionRow, UserId, PermissionId, Option[TypoLocalDateTime]]("user_id", "permission_id", "granted_at")(UserPermissionRow.apply)(UserId.decoder, PermissionId.decoder, Decoder.decodeOption(TypoLocalDateTime.decoder))
  implicit lazy val encoder: Encoder[UserPermissionRow] = Encoder.forProduct3[UserPermissionRow, UserId, PermissionId, Option[TypoLocalDateTime]]("user_id", "permission_id", "granted_at")(x => (x.userId, x.permissionId, x.grantedAt))(UserId.encoder, PermissionId.encoder, Encoder.encodeOption(TypoLocalDateTime.encoder))
  implicit lazy val read: Read[UserPermissionRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(UserId.get).asInstanceOf[Read[Any]],
      new Read.Single(PermissionId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    UserPermissionRow(
      userId = arr(0).asInstanceOf[UserId],
          permissionId = arr(1).asInstanceOf[PermissionId],
          grantedAt = arr(2).asInstanceOf[Option[TypoLocalDateTime]]
    )
  }
  implicit lazy val text: Text[UserPermissionRow] = Text.instance[UserPermissionRow]{ (row, sb) =>
    UserId.text.unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    PermissionId.text.unsafeEncode(row.permissionId, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.grantedAt, sb)
  }
  implicit lazy val write: Write[UserPermissionRow] = new Write.Composite[UserPermissionRow](
    List(new Write.Single(UserId.put),
         new Write.Single(PermissionId.put),
         new Write.Single(TypoLocalDateTime.put).toOpt),
    a => List(a.userId, a.permissionId, a.grantedAt)
  )
}
