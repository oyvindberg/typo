/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user_permission

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.permission.PermissionId
import adventureworks.frontpage.user.UserId
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `frontpage.user_permission` which has not been persisted yet */
case class UserPermissionRowUnsaved(
  /** Points to [[user.UserRow.id]] */
  userId: UserId,
  /** Points to [[permission.PermissionRow.id]] */
  permissionId: PermissionId,
  /** Default: now() */
  grantedAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.UseDefault
) {
  def toRow(grantedAtDefault: => Option[TypoLocalDateTime]): UserPermissionRow =
    UserPermissionRow(
      userId = userId,
      permissionId = permissionId,
      grantedAt = grantedAt match {
                    case Defaulted.UseDefault => grantedAtDefault
                    case Defaulted.Provided(value) => value
                  }
    )
}
object UserPermissionRowUnsaved {
  implicit lazy val decoder: Decoder[UserPermissionRowUnsaved] = Decoder.forProduct3[UserPermissionRowUnsaved, UserId, PermissionId, Defaulted[Option[TypoLocalDateTime]]]("user_id", "permission_id", "granted_at")(UserPermissionRowUnsaved.apply)(UserId.decoder, PermissionId.decoder, Defaulted.decoder(Decoder.decodeOption(TypoLocalDateTime.decoder)))
  implicit lazy val encoder: Encoder[UserPermissionRowUnsaved] = Encoder.forProduct3[UserPermissionRowUnsaved, UserId, PermissionId, Defaulted[Option[TypoLocalDateTime]]]("user_id", "permission_id", "granted_at")(x => (x.userId, x.permissionId, x.grantedAt))(UserId.encoder, PermissionId.encoder, Defaulted.encoder(Encoder.encodeOption(TypoLocalDateTime.encoder)))
  implicit lazy val text: Text[UserPermissionRowUnsaved] = Text.instance[UserPermissionRowUnsaved]{ (row, sb) =>
    UserId.text.unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    PermissionId.text.unsafeEncode(row.permissionId, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoLocalDateTime.text)).unsafeEncode(row.grantedAt, sb)
  }
}
