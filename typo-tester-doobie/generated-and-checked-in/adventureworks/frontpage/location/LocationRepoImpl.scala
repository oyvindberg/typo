/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package location

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class LocationRepoImpl extends LocationRepo {
  override def delete: DeleteBuilder[LocationFields, LocationRow] = {
    DeleteBuilder(""""frontpage"."location"""", LocationFields.structure)
  }
  override def deleteById(id: LocationId): ConnectionIO[Boolean] = {
    sql"""delete from "frontpage"."location" where "id" = ${fromWrite(id)(new Write.Single(LocationId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(ids: Array[LocationId]): ConnectionIO[Int] = {
    sql"""delete from "frontpage"."location" where "id" = ANY(${ids})""".update.run
  }
  override def insert(unsaved: LocationRow): ConnectionIO[LocationRow] = {
    sql"""insert into "frontpage"."location"("id", "name", "position", "area", "ip_range", "metadata")
          values (${fromWrite(unsaved.id)(new Write.Single(LocationId.put))}::uuid, ${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))}, ${fromWrite(unsaved.position)(new Write.SingleOpt(TypoPoint.put))}::point, ${fromWrite(unsaved.area)(new Write.SingleOpt(TypoPolygon.put))}::polygon, ${fromWrite(unsaved.ipRange)(new Write.SingleOpt(TypoInet.put))}::inet, ${fromWrite(unsaved.metadata)(new Write.SingleOpt(TypoJsonb.put))}::jsonb)
          returning "id", "name", "position", "area", "ip_range", "metadata"
       """.query(using LocationRow.read).unique
  }
  override def insert(unsaved: LocationRowUnsaved): ConnectionIO[LocationRow] = {
    val fs = List(
      Some((Fragment.const0(s""""name""""), fr"${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))}")),
      Some((Fragment.const0(s""""position""""), fr"${fromWrite(unsaved.position)(new Write.SingleOpt(TypoPoint.put))}::point")),
      Some((Fragment.const0(s""""area""""), fr"${fromWrite(unsaved.area)(new Write.SingleOpt(TypoPolygon.put))}::polygon")),
      Some((Fragment.const0(s""""ip_range""""), fr"${fromWrite(unsaved.ipRange)(new Write.SingleOpt(TypoInet.put))}::inet")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""id""""), fr"${fromWrite(value: LocationId)(new Write.Single(LocationId.put))}::uuid"))
      },
      unsaved.metadata match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""metadata""""), fr"${fromWrite(value: Option[TypoJsonb])(new Write.SingleOpt(TypoJsonb.put))}::jsonb"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."location" default values
            returning "id", "name", "position", "area", "ip_range", "metadata"
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into "frontpage"."location"(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "id", "name", "position", "area", "ip_range", "metadata"
         """
    }
    q.query(using LocationRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, LocationRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."location"("id", "name", "position", "area", "ip_range", "metadata") FROM STDIN""").copyIn(unsaved, batchSize)(using LocationRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, LocationRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."location"("name", "position", "area", "ip_range", "id", "metadata") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using LocationRowUnsaved.text)
  }
  override def select: SelectBuilder[LocationFields, LocationRow] = {
    SelectBuilderSql(""""frontpage"."location"""", LocationFields.structure, LocationRow.read)
  }
  override def selectAll: Stream[ConnectionIO, LocationRow] = {
    sql"""select "id", "name", "position", "area", "ip_range", "metadata" from "frontpage"."location"""".query(using LocationRow.read).stream
  }
  override def selectById(id: LocationId): ConnectionIO[Option[LocationRow]] = {
    sql"""select "id", "name", "position", "area", "ip_range", "metadata" from "frontpage"."location" where "id" = ${fromWrite(id)(new Write.Single(LocationId.put))}""".query(using LocationRow.read).option
  }
  override def selectByIds(ids: Array[LocationId]): Stream[ConnectionIO, LocationRow] = {
    sql"""select "id", "name", "position", "area", "ip_range", "metadata" from "frontpage"."location" where "id" = ANY(${ids})""".query(using LocationRow.read).stream
  }
  override def selectByIdsTracked(ids: Array[LocationId]): ConnectionIO[Map[LocationId, LocationRow]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[LocationFields, LocationRow] = {
    UpdateBuilder(""""frontpage"."location"""", LocationFields.structure, LocationRow.read)
  }
  override def update(row: LocationRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update "frontpage"."location"
          set "name" = ${fromWrite(row.name)(new Write.Single(Meta.StringMeta.put))},
              "position" = ${fromWrite(row.position)(new Write.SingleOpt(TypoPoint.put))}::point,
              "area" = ${fromWrite(row.area)(new Write.SingleOpt(TypoPolygon.put))}::polygon,
              "ip_range" = ${fromWrite(row.ipRange)(new Write.SingleOpt(TypoInet.put))}::inet,
              "metadata" = ${fromWrite(row.metadata)(new Write.SingleOpt(TypoJsonb.put))}::jsonb
          where "id" = ${fromWrite(id)(new Write.Single(LocationId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: LocationRow): ConnectionIO[LocationRow] = {
    sql"""insert into "frontpage"."location"("id", "name", "position", "area", "ip_range", "metadata")
          values (
            ${fromWrite(unsaved.id)(new Write.Single(LocationId.put))}::uuid,
            ${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))},
            ${fromWrite(unsaved.position)(new Write.SingleOpt(TypoPoint.put))}::point,
            ${fromWrite(unsaved.area)(new Write.SingleOpt(TypoPolygon.put))}::polygon,
            ${fromWrite(unsaved.ipRange)(new Write.SingleOpt(TypoInet.put))}::inet,
            ${fromWrite(unsaved.metadata)(new Write.SingleOpt(TypoJsonb.put))}::jsonb
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name",
            "position" = EXCLUDED."position",
            "area" = EXCLUDED."area",
            "ip_range" = EXCLUDED."ip_range",
            "metadata" = EXCLUDED."metadata"
          returning "id", "name", "position", "area", "ip_range", "metadata"
       """.query(using LocationRow.read).unique
  }
  override def upsertBatch(unsaved: List[LocationRow]): Stream[ConnectionIO, LocationRow] = {
    Update[LocationRow](
      s"""insert into "frontpage"."location"("id", "name", "position", "area", "ip_range", "metadata")
          values (?::uuid,?,?::point,?::polygon,?::inet,?::jsonb)
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name",
            "position" = EXCLUDED."position",
            "area" = EXCLUDED."area",
            "ip_range" = EXCLUDED."ip_range",
            "metadata" = EXCLUDED."metadata"
          returning "id", "name", "position", "area", "ip_range", "metadata""""
    )(using LocationRow.write)
    .updateManyWithGeneratedKeys[LocationRow]("id", "name", "position", "area", "ip_range", "metadata")(unsaved)(using catsStdInstancesForList, LocationRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, LocationRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table location_TEMP (like "frontpage"."location") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy location_TEMP("id", "name", "position", "area", "ip_range", "metadata") from stdin""").copyIn(unsaved, batchSize)(using LocationRow.text)
      res <- sql"""insert into "frontpage"."location"("id", "name", "position", "area", "ip_range", "metadata")
                   select * from location_TEMP
                   on conflict ("id")
                   do update set
                     "name" = EXCLUDED."name",
                     "position" = EXCLUDED."position",
                     "area" = EXCLUDED."area",
                     "ip_range" = EXCLUDED."ip_range",
                     "metadata" = EXCLUDED."metadata"
                   ;
                   drop table location_TEMP;""".update.run
    } yield res
  }
}
