/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package location

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.location
    Primary key: id */
case class LocationRow(
  /** Default: gen_random_uuid() */
  id: LocationId,
  name: String,
  position: Option[TypoPoint],
  area: Option[TypoPolygon],
  ipRange: Option[TypoInet],
  /** Default: '{}'::jsonb */
  metadata: Option[TypoJsonb]
){
   def toUnsavedRow(id: Defaulted[LocationId], metadata: Defaulted[Option[TypoJsonb]] = Defaulted.Provided(this.metadata)): LocationRowUnsaved =
     LocationRowUnsaved(name, position, area, ipRange, id, metadata)
 }

object LocationRow {
  implicit lazy val decoder: Decoder[LocationRow] = Decoder.forProduct6[LocationRow, LocationId, String, Option[TypoPoint], Option[TypoPolygon], Option[TypoInet], Option[TypoJsonb]]("id", "name", "position", "area", "ip_range", "metadata")(LocationRow.apply)(LocationId.decoder, Decoder.decodeString, Decoder.decodeOption(TypoPoint.decoder), Decoder.decodeOption(TypoPolygon.decoder), Decoder.decodeOption(TypoInet.decoder), Decoder.decodeOption(TypoJsonb.decoder))
  implicit lazy val encoder: Encoder[LocationRow] = Encoder.forProduct6[LocationRow, LocationId, String, Option[TypoPoint], Option[TypoPolygon], Option[TypoInet], Option[TypoJsonb]]("id", "name", "position", "area", "ip_range", "metadata")(x => (x.id, x.name, x.position, x.area, x.ipRange, x.metadata))(LocationId.encoder, Encoder.encodeString, Encoder.encodeOption(TypoPoint.encoder), Encoder.encodeOption(TypoPolygon.encoder), Encoder.encodeOption(TypoInet.encoder), Encoder.encodeOption(TypoJsonb.encoder))
  implicit lazy val read: Read[LocationRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(LocationId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoPoint.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoPolygon.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInet.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoJsonb.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    LocationRow(
      id = arr(0).asInstanceOf[LocationId],
          name = arr(1).asInstanceOf[String],
          position = arr(2).asInstanceOf[Option[TypoPoint]],
          area = arr(3).asInstanceOf[Option[TypoPolygon]],
          ipRange = arr(4).asInstanceOf[Option[TypoInet]],
          metadata = arr(5).asInstanceOf[Option[TypoJsonb]]
    )
  }
  implicit lazy val text: Text[LocationRow] = Text.instance[LocationRow]{ (row, sb) =>
    LocationId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPoint.text).unsafeEncode(row.position, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPolygon.text).unsafeEncode(row.area, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInet.text).unsafeEncode(row.ipRange, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoJsonb.text).unsafeEncode(row.metadata, sb)
  }
  implicit lazy val write: Write[LocationRow] = new Write.Composite[LocationRow](
    List(new Write.Single(LocationId.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(TypoPoint.put).toOpt,
         new Write.Single(TypoPolygon.put).toOpt,
         new Write.Single(TypoInet.put).toOpt,
         new Write.Single(TypoJsonb.put).toOpt),
    a => List(a.id, a.name, a.position, a.area, a.ipRange, a.metadata)
  )
}
