/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage

import cats.data.NonEmptyList
import doobie.enumerated.JdbcType
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Enum `frontpage.order_status`
  *  - pending
  *  - active
  *  - shipped
  *  - cancelled
  */
sealed abstract class OrderStatus(val value: String)

object OrderStatus {
  def apply(str: String): Either[String, OrderStatus] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): OrderStatus =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object pending extends OrderStatus("pending")
  case object active extends OrderStatus("active")
  case object shipped extends OrderStatus("shipped")
  case object cancelled extends OrderStatus("cancelled")
  val All: List[OrderStatus] = List(pending, active, shipped, cancelled)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, OrderStatus] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayGet: Get[Array[OrderStatus]] = adventureworks.StringArrayMeta.get.map(_.map(force))
  implicit lazy val arrayPut: Put[Array[OrderStatus]] = Put.Advanced.array[AnyRef](NonEmptyList.one("frontpage.order_status[]"), "frontpage.order_status").contramap(_.map(_.value))
  implicit lazy val decoder: Decoder[OrderStatus] = Decoder.decodeString.emap(OrderStatus.apply)
  implicit lazy val encoder: Encoder[OrderStatus] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[OrderStatus] = Meta.StringMeta.get.temap(OrderStatus.apply)
  implicit lazy val ordering: Ordering[OrderStatus] = Ordering.by(_.value)
  implicit lazy val put: Put[OrderStatus] = Put.Advanced.one[OrderStatus](JdbcType.Other, NonEmptyList.one("frontpage.order_status"), (ps, i, a) => ps.setString(i, a.value), (rs, i, a) => rs.updateString(i, a.value))
  implicit lazy val read: Read[OrderStatus] = new Read.Single(get)
  implicit lazy val text: Text[OrderStatus] = new Text[OrderStatus] {
    override def unsafeEncode(v: OrderStatus, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: OrderStatus, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val write: Write[OrderStatus] = new Write.Single(put)
}
