/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product_category

import adventureworks.frontpage.category.CategoryId
import adventureworks.frontpage.product.ProductId
import io.circe.Decoder
import io.circe.Encoder

/** Type for the composite primary key of table `frontpage.product_category` */
case class ProductCategoryId(
  productId: ProductId,
  categoryId: CategoryId
)
object ProductCategoryId {
  implicit lazy val decoder: Decoder[ProductCategoryId] = Decoder.forProduct2[ProductCategoryId, ProductId, CategoryId]("product_id", "category_id")(ProductCategoryId.apply)(ProductId.decoder, CategoryId.decoder)
  implicit lazy val encoder: Encoder[ProductCategoryId] = Encoder.forProduct2[ProductCategoryId, ProductId, CategoryId]("product_id", "category_id")(x => (x.productId, x.categoryId))(ProductId.encoder, CategoryId.encoder)
  implicit lazy val ordering: Ordering[ProductCategoryId] = Ordering.by(x => (x.productId, x.categoryId))
}
