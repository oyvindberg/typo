/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product_category

import adventureworks.frontpage.category.CategoryId
import adventureworks.frontpage.product.ProductId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.product_category
    Composite primary key: product_id, category_id */
case class ProductCategoryRow(
  /** Points to [[product.ProductRow.id]] */
  productId: ProductId,
  /** Points to [[category.CategoryRow.id]] */
  categoryId: CategoryId
){
   val compositeId: ProductCategoryId = ProductCategoryId(productId, categoryId)
   val id = compositeId
 }

object ProductCategoryRow {
  def apply(compositeId: ProductCategoryId) =
    new ProductCategoryRow(compositeId.productId, compositeId.categoryId)
  implicit lazy val decoder: Decoder[ProductCategoryRow] = Decoder.forProduct2[ProductCategoryRow, ProductId, CategoryId]("product_id", "category_id")(ProductCategoryRow.apply)(ProductId.decoder, CategoryId.decoder)
  implicit lazy val encoder: Encoder[ProductCategoryRow] = Encoder.forProduct2[ProductCategoryRow, ProductId, CategoryId]("product_id", "category_id")(x => (x.productId, x.categoryId))(ProductId.encoder, CategoryId.encoder)
  implicit lazy val read: Read[ProductCategoryRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(ProductId.get).asInstanceOf[Read[Any]],
      new Read.Single(CategoryId.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    ProductCategoryRow(
      productId = arr(0).asInstanceOf[ProductId],
          categoryId = arr(1).asInstanceOf[CategoryId]
    )
  }
  implicit lazy val text: Text[ProductCategoryRow] = Text.instance[ProductCategoryRow]{ (row, sb) =>
    ProductId.text.unsafeEncode(row.productId, sb)
    sb.append(Text.DELIMETER)
    CategoryId.text.unsafeEncode(row.categoryId, sb)
  }
  implicit lazy val write: Write[ProductCategoryRow] = new Write.Composite[ProductCategoryRow](
    List(new Write.Single(ProductId.put),
         new Write.Single(CategoryId.put)),
    a => List(a.productId, a.categoryId)
  )
}
