/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package product_category

import adventureworks.frontpage.category.CategoryId
import adventureworks.frontpage.product.ProductId
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class ProductCategoryRepoImpl extends ProductCategoryRepo {
  override def delete: DeleteBuilder[ProductCategoryFields, ProductCategoryRow] = {
    DeleteBuilder(""""frontpage"."product_category"""", ProductCategoryFields.structure)
  }
  override def deleteById(compositeId: ProductCategoryId): ConnectionIO[Boolean] = {
    sql"""delete from "frontpage"."product_category" where "product_id" = ${fromWrite(compositeId.productId)(new Write.Single(ProductId.put))} AND "category_id" = ${fromWrite(compositeId.categoryId)(new Write.Single(CategoryId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(compositeIds: Array[ProductCategoryId]): ConnectionIO[Int] = {
    val productId = compositeIds.map(_.productId)
    val categoryId = compositeIds.map(_.categoryId)
    sql"""delete
          from "frontpage"."product_category"
          where ("product_id", "category_id")
          in (select unnest(${productId}), unnest(${categoryId}))
       """.update.run
    
  }
  override def insert(unsaved: ProductCategoryRow): ConnectionIO[ProductCategoryRow] = {
    sql"""insert into "frontpage"."product_category"("product_id", "category_id")
          values (${fromWrite(unsaved.productId)(new Write.Single(ProductId.put))}::uuid, ${fromWrite(unsaved.categoryId)(new Write.Single(CategoryId.put))}::uuid)
          returning "product_id", "category_id"
       """.query(using ProductCategoryRow.read).unique
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, ProductCategoryRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."product_category"("product_id", "category_id") FROM STDIN""").copyIn(unsaved, batchSize)(using ProductCategoryRow.text)
  }
  override def select: SelectBuilder[ProductCategoryFields, ProductCategoryRow] = {
    SelectBuilderSql(""""frontpage"."product_category"""", ProductCategoryFields.structure, ProductCategoryRow.read)
  }
  override def selectAll: Stream[ConnectionIO, ProductCategoryRow] = {
    sql"""select "product_id", "category_id" from "frontpage"."product_category"""".query(using ProductCategoryRow.read).stream
  }
  override def selectById(compositeId: ProductCategoryId): ConnectionIO[Option[ProductCategoryRow]] = {
    sql"""select "product_id", "category_id" from "frontpage"."product_category" where "product_id" = ${fromWrite(compositeId.productId)(new Write.Single(ProductId.put))} AND "category_id" = ${fromWrite(compositeId.categoryId)(new Write.Single(CategoryId.put))}""".query(using ProductCategoryRow.read).option
  }
  override def selectByIds(compositeIds: Array[ProductCategoryId]): Stream[ConnectionIO, ProductCategoryRow] = {
    val productId = compositeIds.map(_.productId)
    val categoryId = compositeIds.map(_.categoryId)
    sql"""select "product_id", "category_id"
          from "frontpage"."product_category"
          where ("product_id", "category_id")
          in (select unnest(${productId}), unnest(${categoryId}))
       """.query(using ProductCategoryRow.read).stream
    
  }
  override def selectByIdsTracked(compositeIds: Array[ProductCategoryId]): ConnectionIO[Map[ProductCategoryId, ProductCategoryRow]] = {
    selectByIds(compositeIds).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.compositeId, x)).toMap
      compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[ProductCategoryFields, ProductCategoryRow] = {
    UpdateBuilder(""""frontpage"."product_category"""", ProductCategoryFields.structure, ProductCategoryRow.read)
  }
  override def upsert(unsaved: ProductCategoryRow): ConnectionIO[ProductCategoryRow] = {
    sql"""insert into "frontpage"."product_category"("product_id", "category_id")
          values (
            ${fromWrite(unsaved.productId)(new Write.Single(ProductId.put))}::uuid,
            ${fromWrite(unsaved.categoryId)(new Write.Single(CategoryId.put))}::uuid
          )
          on conflict ("product_id", "category_id")
          do update set "product_id" = EXCLUDED."product_id"
          returning "product_id", "category_id"
       """.query(using ProductCategoryRow.read).unique
  }
  override def upsertBatch(unsaved: List[ProductCategoryRow]): Stream[ConnectionIO, ProductCategoryRow] = {
    Update[ProductCategoryRow](
      s"""insert into "frontpage"."product_category"("product_id", "category_id")
          values (?::uuid,?::uuid)
          on conflict ("product_id", "category_id")
          do nothing
          returning "product_id", "category_id""""
    )(using ProductCategoryRow.write)
    .updateManyWithGeneratedKeys[ProductCategoryRow]("product_id", "category_id")(unsaved)(using catsStdInstancesForList, ProductCategoryRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, ProductCategoryRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table product_category_TEMP (like "frontpage"."product_category") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy product_category_TEMP("product_id", "category_id") from stdin""").copyIn(unsaved, batchSize)(using ProductCategoryRow.text)
      res <- sql"""insert into "frontpage"."product_category"("product_id", "category_id")
                   select * from product_category_TEMP
                   on conflict ("product_id", "category_id")
                   do nothing
                   ;
                   drop table product_category_TEMP;""".update.run
    } yield res
  }
}
