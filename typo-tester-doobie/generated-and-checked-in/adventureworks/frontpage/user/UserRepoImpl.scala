/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package user

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.department.DepartmentId
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class UserRepoImpl extends UserRepo {
  override def delete: DeleteBuilder[UserFields, UserRow] = {
    DeleteBuilder(""""frontpage"."user"""", UserFields.structure)
  }
  override def deleteById(id: UserId): ConnectionIO[Boolean] = {
    sql"""delete from "frontpage"."user" where "id" = ${fromWrite(id)(new Write.Single(UserId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(ids: Array[UserId]): ConnectionIO[Int] = {
    sql"""delete from "frontpage"."user" where "id" = ANY(${ids})""".update.run
  }
  override def insert(unsaved: UserRow): ConnectionIO[UserRow] = {
    sql"""insert into "frontpage"."user"("id", "email", "name", "created_at", "department_id", "status", "verified", "manager_id", "role")
          values (${fromWrite(unsaved.id)(new Write.Single(UserId.put))}::uuid, ${fromWrite(unsaved.email)(new Write.Single(Email.put))}::text, ${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))}, ${fromWrite(unsaved.createdAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp, ${fromWrite(unsaved.departmentId)(new Write.SingleOpt(DepartmentId.put))}::uuid, ${fromWrite(unsaved.status)(new Write.SingleOpt(UserStatus.put))}::frontpage.user_status, ${fromWrite(unsaved.verified)(new Write.SingleOpt(Meta.BooleanMeta.put))}, ${fromWrite(unsaved.managerId)(new Write.SingleOpt(UserId.put))}::uuid, ${fromWrite(unsaved.role)(new Write.SingleOpt(UserRole.put))}::frontpage.user_role)
          returning "id", "email", "name", "created_at"::text, "department_id", "status", "verified", "manager_id", "role"
       """.query(using UserRow.read).unique
  }
  override def insert(unsaved: UserRowUnsaved): ConnectionIO[UserRow] = {
    val fs = List(
      Some((Fragment.const0(s""""email""""), fr"${fromWrite(unsaved.email)(new Write.Single(Email.put))}::text")),
      Some((Fragment.const0(s""""name""""), fr"${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))}")),
      Some((Fragment.const0(s""""department_id""""), fr"${fromWrite(unsaved.departmentId)(new Write.SingleOpt(DepartmentId.put))}::uuid")),
      Some((Fragment.const0(s""""manager_id""""), fr"${fromWrite(unsaved.managerId)(new Write.SingleOpt(UserId.put))}::uuid")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""id""""), fr"${fromWrite(value: UserId)(new Write.Single(UserId.put))}::uuid"))
      },
      unsaved.createdAt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""created_at""""), fr"${fromWrite(value: Option[TypoLocalDateTime])(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp"))
      },
      unsaved.status match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""status""""), fr"${fromWrite(value: Option[UserStatus])(new Write.SingleOpt(UserStatus.put))}::frontpage.user_status"))
      },
      unsaved.verified match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""verified""""), fr"${fromWrite(value: Option[Boolean])(new Write.SingleOpt(Meta.BooleanMeta.put))}"))
      },
      unsaved.role match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""role""""), fr"${fromWrite(value: Option[UserRole])(new Write.SingleOpt(UserRole.put))}::frontpage.user_role"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."user" default values
            returning "id", "email", "name", "created_at"::text, "department_id", "status", "verified", "manager_id", "role"
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into "frontpage"."user"(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "id", "email", "name", "created_at"::text, "department_id", "status", "verified", "manager_id", "role"
         """
    }
    q.query(using UserRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, UserRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."user"("id", "email", "name", "created_at", "department_id", "status", "verified", "manager_id", "role") FROM STDIN""").copyIn(unsaved, batchSize)(using UserRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, UserRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."user"("email", "name", "department_id", "manager_id", "id", "created_at", "status", "verified", "role") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using UserRowUnsaved.text)
  }
  override def select: SelectBuilder[UserFields, UserRow] = {
    SelectBuilderSql(""""frontpage"."user"""", UserFields.structure, UserRow.read)
  }
  override def selectAll: Stream[ConnectionIO, UserRow] = {
    sql"""select "id", "email", "name", "created_at"::text, "department_id", "status", "verified", "manager_id", "role" from "frontpage"."user"""".query(using UserRow.read).stream
  }
  override def selectById(id: UserId): ConnectionIO[Option[UserRow]] = {
    sql"""select "id", "email", "name", "created_at"::text, "department_id", "status", "verified", "manager_id", "role" from "frontpage"."user" where "id" = ${fromWrite(id)(new Write.Single(UserId.put))}""".query(using UserRow.read).option
  }
  override def selectByIds(ids: Array[UserId]): Stream[ConnectionIO, UserRow] = {
    sql"""select "id", "email", "name", "created_at"::text, "department_id", "status", "verified", "manager_id", "role" from "frontpage"."user" where "id" = ANY(${ids})""".query(using UserRow.read).stream
  }
  override def selectByIdsTracked(ids: Array[UserId]): ConnectionIO[Map[UserId, UserRow]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def selectByUniqueEmail(email: Email): ConnectionIO[Option[UserRow]] = {
    sql"""select "id", "email", "name", "created_at"::text, "department_id", "status", "verified", "manager_id", "role"
          from "frontpage"."user"
          where "email" = ${fromWrite(email)(new Write.Single(Email.put))}
       """.query(using UserRow.read).option
  }
  override def update: UpdateBuilder[UserFields, UserRow] = {
    UpdateBuilder(""""frontpage"."user"""", UserFields.structure, UserRow.read)
  }
  override def update(row: UserRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update "frontpage"."user"
          set "email" = ${fromWrite(row.email)(new Write.Single(Email.put))}::text,
              "name" = ${fromWrite(row.name)(new Write.Single(Meta.StringMeta.put))},
              "created_at" = ${fromWrite(row.createdAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp,
              "department_id" = ${fromWrite(row.departmentId)(new Write.SingleOpt(DepartmentId.put))}::uuid,
              "status" = ${fromWrite(row.status)(new Write.SingleOpt(UserStatus.put))}::frontpage.user_status,
              "verified" = ${fromWrite(row.verified)(new Write.SingleOpt(Meta.BooleanMeta.put))},
              "manager_id" = ${fromWrite(row.managerId)(new Write.SingleOpt(UserId.put))}::uuid,
              "role" = ${fromWrite(row.role)(new Write.SingleOpt(UserRole.put))}::frontpage.user_role
          where "id" = ${fromWrite(id)(new Write.Single(UserId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: UserRow): ConnectionIO[UserRow] = {
    sql"""insert into "frontpage"."user"("id", "email", "name", "created_at", "department_id", "status", "verified", "manager_id", "role")
          values (
            ${fromWrite(unsaved.id)(new Write.Single(UserId.put))}::uuid,
            ${fromWrite(unsaved.email)(new Write.Single(Email.put))}::text,
            ${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))},
            ${fromWrite(unsaved.createdAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp,
            ${fromWrite(unsaved.departmentId)(new Write.SingleOpt(DepartmentId.put))}::uuid,
            ${fromWrite(unsaved.status)(new Write.SingleOpt(UserStatus.put))}::frontpage.user_status,
            ${fromWrite(unsaved.verified)(new Write.SingleOpt(Meta.BooleanMeta.put))},
            ${fromWrite(unsaved.managerId)(new Write.SingleOpt(UserId.put))}::uuid,
            ${fromWrite(unsaved.role)(new Write.SingleOpt(UserRole.put))}::frontpage.user_role
          )
          on conflict ("id")
          do update set
            "email" = EXCLUDED."email",
            "name" = EXCLUDED."name",
            "created_at" = EXCLUDED."created_at",
            "department_id" = EXCLUDED."department_id",
            "status" = EXCLUDED."status",
            "verified" = EXCLUDED."verified",
            "manager_id" = EXCLUDED."manager_id",
            "role" = EXCLUDED."role"
          returning "id", "email", "name", "created_at"::text, "department_id", "status", "verified", "manager_id", "role"
       """.query(using UserRow.read).unique
  }
  override def upsertBatch(unsaved: List[UserRow]): Stream[ConnectionIO, UserRow] = {
    Update[UserRow](
      s"""insert into "frontpage"."user"("id", "email", "name", "created_at", "department_id", "status", "verified", "manager_id", "role")
          values (?::uuid,?::text,?,?::timestamp,?::uuid,?::frontpage.user_status,?,?::uuid,?::frontpage.user_role)
          on conflict ("id")
          do update set
            "email" = EXCLUDED."email",
            "name" = EXCLUDED."name",
            "created_at" = EXCLUDED."created_at",
            "department_id" = EXCLUDED."department_id",
            "status" = EXCLUDED."status",
            "verified" = EXCLUDED."verified",
            "manager_id" = EXCLUDED."manager_id",
            "role" = EXCLUDED."role"
          returning "id", "email", "name", "created_at"::text, "department_id", "status", "verified", "manager_id", "role""""
    )(using UserRow.write)
    .updateManyWithGeneratedKeys[UserRow]("id", "email", "name", "created_at", "department_id", "status", "verified", "manager_id", "role")(unsaved)(using catsStdInstancesForList, UserRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, UserRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table user_TEMP (like "frontpage"."user") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy user_TEMP("id", "email", "name", "created_at", "department_id", "status", "verified", "manager_id", "role") from stdin""").copyIn(unsaved, batchSize)(using UserRow.text)
      res <- sql"""insert into "frontpage"."user"("id", "email", "name", "created_at", "department_id", "status", "verified", "manager_id", "role")
                   select * from user_TEMP
                   on conflict ("id")
                   do update set
                     "email" = EXCLUDED."email",
                     "name" = EXCLUDED."name",
                     "created_at" = EXCLUDED."created_at",
                     "department_id" = EXCLUDED."department_id",
                     "status" = EXCLUDED."status",
                     "verified" = EXCLUDED."verified",
                     "manager_id" = EXCLUDED."manager_id",
                     "role" = EXCLUDED."role"
                   ;
                   drop table user_TEMP;""".update.run
    } yield res
  }
}
