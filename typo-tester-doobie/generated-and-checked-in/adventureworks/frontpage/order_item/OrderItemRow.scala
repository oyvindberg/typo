/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order_item

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.order.OrderId
import adventureworks.frontpage.product.ProductId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.order_item
    Primary key: id */
case class OrderItemRow(
  /** Default: gen_random_uuid() */
  id: OrderItemId,
  /** Points to [[order.OrderRow.id]] */
  orderId: Option[OrderId],
  /** Points to [[product.ProductRow.id]] */
  productId: Option[ProductId],
  quantity: Int,
  price: BigDecimal,
  shippedAt: Option[TypoLocalDateTime]
){
   def toUnsavedRow(id: Defaulted[OrderItemId]): OrderItemRowUnsaved =
     OrderItemRowUnsaved(orderId, productId, quantity, price, shippedAt, id)
 }

object OrderItemRow {
  implicit lazy val decoder: Decoder[OrderItemRow] = Decoder.forProduct6[OrderItemRow, OrderItemId, Option[OrderId], Option[ProductId], Int, BigDecimal, Option[TypoLocalDateTime]]("id", "order_id", "product_id", "quantity", "price", "shipped_at")(OrderItemRow.apply)(OrderItemId.decoder, Decoder.decodeOption(OrderId.decoder), Decoder.decodeOption(ProductId.decoder), Decoder.decodeInt, Decoder.decodeBigDecimal, Decoder.decodeOption(TypoLocalDateTime.decoder))
  implicit lazy val encoder: Encoder[OrderItemRow] = Encoder.forProduct6[OrderItemRow, OrderItemId, Option[OrderId], Option[ProductId], Int, BigDecimal, Option[TypoLocalDateTime]]("id", "order_id", "product_id", "quantity", "price", "shipped_at")(x => (x.id, x.orderId, x.productId, x.quantity, x.price, x.shippedAt))(OrderItemId.encoder, Encoder.encodeOption(OrderId.encoder), Encoder.encodeOption(ProductId.encoder), Encoder.encodeInt, Encoder.encodeBigDecimal, Encoder.encodeOption(TypoLocalDateTime.encoder))
  implicit lazy val read: Read[OrderItemRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(OrderItemId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(OrderId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(ProductId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    OrderItemRow(
      id = arr(0).asInstanceOf[OrderItemId],
          orderId = arr(1).asInstanceOf[Option[OrderId]],
          productId = arr(2).asInstanceOf[Option[ProductId]],
          quantity = arr(3).asInstanceOf[Int],
          price = arr(4).asInstanceOf[BigDecimal],
          shippedAt = arr(5).asInstanceOf[Option[TypoLocalDateTime]]
    )
  }
  implicit lazy val text: Text[OrderItemRow] = Text.instance[OrderItemRow]{ (row, sb) =>
    OrderItemId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.option(OrderId.text).unsafeEncode(row.orderId, sb)
    sb.append(Text.DELIMETER)
    Text.option(ProductId.text).unsafeEncode(row.productId, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.quantity, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.price, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.shippedAt, sb)
  }
  implicit lazy val write: Write[OrderItemRow] = new Write.Composite[OrderItemRow](
    List(new Write.Single(OrderItemId.put),
         new Write.Single(OrderId.put).toOpt,
         new Write.Single(ProductId.put).toOpt,
         new Write.Single(Meta.IntMeta.put),
         new Write.Single(Meta.ScalaBigDecimalMeta.put),
         new Write.Single(TypoLocalDateTime.put).toOpt),
    a => List(a.id, a.orderId, a.productId, a.quantity, a.price, a.shippedAt)
  )
}
