/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order_item

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream
import scala.annotation.nowarn
import typo.dsl.DeleteBuilder
import typo.dsl.DeleteBuilder.DeleteBuilderMock
import typo.dsl.DeleteParams
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderMock
import typo.dsl.SelectParams
import typo.dsl.UpdateBuilder
import typo.dsl.UpdateBuilder.UpdateBuilderMock
import typo.dsl.UpdateParams

class OrderItemRepoMock(toRow: Function1[OrderItemRowUnsaved, OrderItemRow],
                        map: scala.collection.mutable.Map[OrderItemId, OrderItemRow] = scala.collection.mutable.Map.empty) extends OrderItemRepo {
  override def delete: DeleteBuilder[OrderItemFields, OrderItemRow] = {
    DeleteBuilderMock(DeleteParams.empty, OrderItemFields.structure, map)
  }
  override def deleteById(id: OrderItemId): ConnectionIO[Boolean] = {
    delay(map.remove(id).isDefined)
  }
  override def deleteByIds(ids: Array[OrderItemId]): ConnectionIO[Int] = {
    delay(ids.map(id => map.remove(id)).count(_.isDefined))
  }
  override def insert(unsaved: OrderItemRow): ConnectionIO[OrderItemRow] = {
    delay {
      val _ = if (map.contains(unsaved.id))
        sys.error(s"id ${unsaved.id} already exists")
      else
        map.put(unsaved.id, unsaved)
    
      unsaved
    }
  }
  override def insert(unsaved: OrderItemRowUnsaved): ConnectionIO[OrderItemRow] = {
    insert(toRow(unsaved))
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, OrderItemRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    unsaved.compile.toList.map { rows =>
      var num = 0L
      rows.foreach { row =>
        map += (row.id -> row)
        num += 1
      }
      num
    }
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, OrderItemRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    unsaved.compile.toList.map { unsavedRows =>
      var num = 0L
      unsavedRows.foreach { unsavedRow =>
        val row = toRow(unsavedRow)
        map += (row.id -> row)
        num += 1
      }
      num
    }
  }
  override def select: SelectBuilder[OrderItemFields, OrderItemRow] = {
    SelectBuilderMock(OrderItemFields.structure, delay(map.values.toList), SelectParams.empty)
  }
  override def selectAll: Stream[ConnectionIO, OrderItemRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(id: OrderItemId): ConnectionIO[Option[OrderItemRow]] = {
    delay(map.get(id))
  }
  override def selectByIds(ids: Array[OrderItemId]): Stream[ConnectionIO, OrderItemRow] = {
    Stream.emits(ids.flatMap(map.get).toList)
  }
  override def selectByIdsTracked(ids: Array[OrderItemId]): ConnectionIO[Map[OrderItemId, OrderItemRow]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[OrderItemFields, OrderItemRow] = {
    UpdateBuilderMock(UpdateParams.empty, OrderItemFields.structure, map)
  }
  override def update(row: OrderItemRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.id) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.id, row): @nowarn
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: OrderItemRow): ConnectionIO[OrderItemRow] = {
    delay {
      map.put(unsaved.id, unsaved): @nowarn
      unsaved
    }
  }
  override def upsertBatch(unsaved: List[OrderItemRow]): Stream[ConnectionIO, OrderItemRow] = {
    Stream.emits {
      unsaved.map { row =>
        map += (row.id -> row)
        row
      }
    }
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, OrderItemRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    unsaved.compile.toList.map { rows =>
      var num = 0
      rows.foreach { row =>
        map += (row.id -> row)
        num += 1
      }
      num
    }
  }
}
