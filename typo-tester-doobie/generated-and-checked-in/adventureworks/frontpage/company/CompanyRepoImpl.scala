/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package company

import adventureworks.customtypes.Defaulted
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class CompanyRepoImpl extends CompanyRepo {
  override def delete: DeleteBuilder[CompanyFields, CompanyRow] = {
    DeleteBuilder(""""frontpage"."company"""", CompanyFields.structure)
  }
  override def deleteById(id: CompanyId): ConnectionIO[Boolean] = {
    sql"""delete from "frontpage"."company" where "id" = ${fromWrite(id)(new Write.Single(CompanyId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(ids: Array[CompanyId]): ConnectionIO[Int] = {
    sql"""delete from "frontpage"."company" where "id" = ANY(${ids})""".update.run
  }
  override def insert(unsaved: CompanyRow): ConnectionIO[CompanyRow] = {
    sql"""insert into "frontpage"."company"("id", "name")
          values (${fromWrite(unsaved.id)(new Write.Single(CompanyId.put))}::uuid, ${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))})
          returning "id", "name"
       """.query(using CompanyRow.read).unique
  }
  override def insert(unsaved: CompanyRowUnsaved): ConnectionIO[CompanyRow] = {
    val fs = List(
      Some((Fragment.const0(s""""name""""), fr"${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))}")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""id""""), fr"${fromWrite(value: CompanyId)(new Write.Single(CompanyId.put))}::uuid"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."company" default values
            returning "id", "name"
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into "frontpage"."company"(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "id", "name"
         """
    }
    q.query(using CompanyRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, CompanyRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."company"("id", "name") FROM STDIN""").copyIn(unsaved, batchSize)(using CompanyRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, CompanyRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."company"("name", "id") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using CompanyRowUnsaved.text)
  }
  override def select: SelectBuilder[CompanyFields, CompanyRow] = {
    SelectBuilderSql(""""frontpage"."company"""", CompanyFields.structure, CompanyRow.read)
  }
  override def selectAll: Stream[ConnectionIO, CompanyRow] = {
    sql"""select "id", "name" from "frontpage"."company"""".query(using CompanyRow.read).stream
  }
  override def selectById(id: CompanyId): ConnectionIO[Option[CompanyRow]] = {
    sql"""select "id", "name" from "frontpage"."company" where "id" = ${fromWrite(id)(new Write.Single(CompanyId.put))}""".query(using CompanyRow.read).option
  }
  override def selectByIds(ids: Array[CompanyId]): Stream[ConnectionIO, CompanyRow] = {
    sql"""select "id", "name" from "frontpage"."company" where "id" = ANY(${ids})""".query(using CompanyRow.read).stream
  }
  override def selectByIdsTracked(ids: Array[CompanyId]): ConnectionIO[Map[CompanyId, CompanyRow]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[CompanyFields, CompanyRow] = {
    UpdateBuilder(""""frontpage"."company"""", CompanyFields.structure, CompanyRow.read)
  }
  override def update(row: CompanyRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update "frontpage"."company"
          set "name" = ${fromWrite(row.name)(new Write.Single(Meta.StringMeta.put))}
          where "id" = ${fromWrite(id)(new Write.Single(CompanyId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: CompanyRow): ConnectionIO[CompanyRow] = {
    sql"""insert into "frontpage"."company"("id", "name")
          values (
            ${fromWrite(unsaved.id)(new Write.Single(CompanyId.put))}::uuid,
            ${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))}
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name"
          returning "id", "name"
       """.query(using CompanyRow.read).unique
  }
  override def upsertBatch(unsaved: List[CompanyRow]): Stream[ConnectionIO, CompanyRow] = {
    Update[CompanyRow](
      s"""insert into "frontpage"."company"("id", "name")
          values (?::uuid,?)
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name"
          returning "id", "name""""
    )(using CompanyRow.write)
    .updateManyWithGeneratedKeys[CompanyRow]("id", "name")(unsaved)(using catsStdInstancesForList, CompanyRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, CompanyRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table company_TEMP (like "frontpage"."company") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy company_TEMP("id", "name") from stdin""").copyIn(unsaved, batchSize)(using CompanyRow.text)
      res <- sql"""insert into "frontpage"."company"("id", "name")
                   select * from company_TEMP
                   on conflict ("id")
                   do update set
                     "name" = EXCLUDED."name"
                   ;
                   drop table company_TEMP;""".update.run
    } yield res
  }
}
