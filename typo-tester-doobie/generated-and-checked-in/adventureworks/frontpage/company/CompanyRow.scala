/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package company

import adventureworks.customtypes.Defaulted
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.company
    Primary key: id */
case class CompanyRow(
  /** Default: gen_random_uuid() */
  id: CompanyId,
  name: String
){
   def toUnsavedRow(id: Defaulted[CompanyId]): CompanyRowUnsaved =
     CompanyRowUnsaved(name, id)
 }

object CompanyRow {
  implicit lazy val decoder: Decoder[CompanyRow] = Decoder.forProduct2[CompanyRow, CompanyId, String]("id", "name")(CompanyRow.apply)(CompanyId.decoder, Decoder.decodeString)
  implicit lazy val encoder: Encoder[CompanyRow] = Encoder.forProduct2[CompanyRow, CompanyId, String]("id", "name")(x => (x.id, x.name))(CompanyId.encoder, Encoder.encodeString)
  implicit lazy val read: Read[CompanyRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(CompanyId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    CompanyRow(
      id = arr(0).asInstanceOf[CompanyId],
          name = arr(1).asInstanceOf[String]
    )
  }
  implicit lazy val text: Text[CompanyRow] = Text.instance[CompanyRow]{ (row, sb) =>
    CompanyId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
  }
  implicit lazy val write: Write[CompanyRow] = new Write.Composite[CompanyRow](
    List(new Write.Single(CompanyId.put),
         new Write.Single(Meta.StringMeta.put)),
    a => List(a.id, a.name)
  )
}
