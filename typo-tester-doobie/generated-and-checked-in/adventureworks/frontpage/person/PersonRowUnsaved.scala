/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package person

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.address.AddressId
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `frontpage.person` which has not been persisted yet */
case class PersonRowUnsaved(
  name: String,
  /** Points to [[address.AddressRow.id]] */
  addressId: Option[AddressId],
  /** Default: gen_random_uuid() */
  id: Defaulted[PersonId] = Defaulted.UseDefault,
  /** Default: now() */
  createdAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => PersonId, createdAtDefault: => Option[TypoLocalDateTime]): PersonRow =
    PersonRow(
      name = name,
      addressId = addressId,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      createdAt = createdAt match {
                    case Defaulted.UseDefault => createdAtDefault
                    case Defaulted.Provided(value) => value
                  }
    )
}
object PersonRowUnsaved {
  implicit lazy val decoder: Decoder[PersonRowUnsaved] = Decoder.forProduct4[PersonRowUnsaved, String, Option[AddressId], Defaulted[PersonId], Defaulted[Option[TypoLocalDateTime]]]("name", "address_id", "id", "created_at")(PersonRowUnsaved.apply)(Decoder.decodeString, Decoder.decodeOption(AddressId.decoder), Defaulted.decoder(PersonId.decoder), Defaulted.decoder(Decoder.decodeOption(TypoLocalDateTime.decoder)))
  implicit lazy val encoder: Encoder[PersonRowUnsaved] = Encoder.forProduct4[PersonRowUnsaved, String, Option[AddressId], Defaulted[PersonId], Defaulted[Option[TypoLocalDateTime]]]("name", "address_id", "id", "created_at")(x => (x.name, x.addressId, x.id, x.createdAt))(Encoder.encodeString, Encoder.encodeOption(AddressId.encoder), Defaulted.encoder(PersonId.encoder), Defaulted.encoder(Encoder.encodeOption(TypoLocalDateTime.encoder)))
  implicit lazy val text: Text[PersonRowUnsaved] = Text.instance[PersonRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(AddressId.text).unsafeEncode(row.addressId, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(PersonId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoLocalDateTime.text)).unsafeEncode(row.createdAt, sb)
  }
}
