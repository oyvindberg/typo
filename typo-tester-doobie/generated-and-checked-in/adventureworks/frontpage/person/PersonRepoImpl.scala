/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package person

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.address.AddressId
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class PersonRepoImpl extends PersonRepo {
  override def delete: DeleteBuilder[PersonFields, PersonRow] = {
    DeleteBuilder(""""frontpage"."person"""", PersonFields.structure)
  }
  override def deleteById(id: PersonId): ConnectionIO[Boolean] = {
    sql"""delete from "frontpage"."person" where "id" = ${fromWrite(id)(new Write.Single(PersonId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(ids: Array[PersonId]): ConnectionIO[Int] = {
    sql"""delete from "frontpage"."person" where "id" = ANY(${ids})""".update.run
  }
  override def insert(unsaved: PersonRow): ConnectionIO[PersonRow] = {
    sql"""insert into "frontpage"."person"("id", "name", "address_id", "created_at")
          values (${fromWrite(unsaved.id)(new Write.Single(PersonId.put))}::uuid, ${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))}, ${fromWrite(unsaved.addressId)(new Write.SingleOpt(AddressId.put))}::uuid, ${fromWrite(unsaved.createdAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp)
          returning "id", "name", "address_id", "created_at"::text
       """.query(using PersonRow.read).unique
  }
  override def insert(unsaved: PersonRowUnsaved): ConnectionIO[PersonRow] = {
    val fs = List(
      Some((Fragment.const0(s""""name""""), fr"${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))}")),
      Some((Fragment.const0(s""""address_id""""), fr"${fromWrite(unsaved.addressId)(new Write.SingleOpt(AddressId.put))}::uuid")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""id""""), fr"${fromWrite(value: PersonId)(new Write.Single(PersonId.put))}::uuid"))
      },
      unsaved.createdAt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""created_at""""), fr"${fromWrite(value: Option[TypoLocalDateTime])(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."person" default values
            returning "id", "name", "address_id", "created_at"::text
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into "frontpage"."person"(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "id", "name", "address_id", "created_at"::text
         """
    }
    q.query(using PersonRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, PersonRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."person"("id", "name", "address_id", "created_at") FROM STDIN""").copyIn(unsaved, batchSize)(using PersonRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, PersonRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."person"("name", "address_id", "id", "created_at") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using PersonRowUnsaved.text)
  }
  override def select: SelectBuilder[PersonFields, PersonRow] = {
    SelectBuilderSql(""""frontpage"."person"""", PersonFields.structure, PersonRow.read)
  }
  override def selectAll: Stream[ConnectionIO, PersonRow] = {
    sql"""select "id", "name", "address_id", "created_at"::text from "frontpage"."person"""".query(using PersonRow.read).stream
  }
  override def selectById(id: PersonId): ConnectionIO[Option[PersonRow]] = {
    sql"""select "id", "name", "address_id", "created_at"::text from "frontpage"."person" where "id" = ${fromWrite(id)(new Write.Single(PersonId.put))}""".query(using PersonRow.read).option
  }
  override def selectByIds(ids: Array[PersonId]): Stream[ConnectionIO, PersonRow] = {
    sql"""select "id", "name", "address_id", "created_at"::text from "frontpage"."person" where "id" = ANY(${ids})""".query(using PersonRow.read).stream
  }
  override def selectByIdsTracked(ids: Array[PersonId]): ConnectionIO[Map[PersonId, PersonRow]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[PersonFields, PersonRow] = {
    UpdateBuilder(""""frontpage"."person"""", PersonFields.structure, PersonRow.read)
  }
  override def update(row: PersonRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update "frontpage"."person"
          set "name" = ${fromWrite(row.name)(new Write.Single(Meta.StringMeta.put))},
              "address_id" = ${fromWrite(row.addressId)(new Write.SingleOpt(AddressId.put))}::uuid,
              "created_at" = ${fromWrite(row.createdAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp
          where "id" = ${fromWrite(id)(new Write.Single(PersonId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PersonRow): ConnectionIO[PersonRow] = {
    sql"""insert into "frontpage"."person"("id", "name", "address_id", "created_at")
          values (
            ${fromWrite(unsaved.id)(new Write.Single(PersonId.put))}::uuid,
            ${fromWrite(unsaved.name)(new Write.Single(Meta.StringMeta.put))},
            ${fromWrite(unsaved.addressId)(new Write.SingleOpt(AddressId.put))}::uuid,
            ${fromWrite(unsaved.createdAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name",
            "address_id" = EXCLUDED."address_id",
            "created_at" = EXCLUDED."created_at"
          returning "id", "name", "address_id", "created_at"::text
       """.query(using PersonRow.read).unique
  }
  override def upsertBatch(unsaved: List[PersonRow]): Stream[ConnectionIO, PersonRow] = {
    Update[PersonRow](
      s"""insert into "frontpage"."person"("id", "name", "address_id", "created_at")
          values (?::uuid,?,?::uuid,?::timestamp)
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name",
            "address_id" = EXCLUDED."address_id",
            "created_at" = EXCLUDED."created_at"
          returning "id", "name", "address_id", "created_at"::text"""
    )(using PersonRow.write)
    .updateManyWithGeneratedKeys[PersonRow]("id", "name", "address_id", "created_at")(unsaved)(using catsStdInstancesForList, PersonRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, PersonRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table person_TEMP (like "frontpage"."person") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy person_TEMP("id", "name", "address_id", "created_at") from stdin""").copyIn(unsaved, batchSize)(using PersonRow.text)
      res <- sql"""insert into "frontpage"."person"("id", "name", "address_id", "created_at")
                   select * from person_TEMP
                   on conflict ("id")
                   do update set
                     "name" = EXCLUDED."name",
                     "address_id" = EXCLUDED."address_id",
                     "created_at" = EXCLUDED."created_at"
                   ;
                   drop table person_TEMP;""".update.run
    } yield res
  }
}
