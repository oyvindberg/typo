/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package person

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.address.AddressId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.person
    Primary key: id */
case class PersonRow(
  /** Default: gen_random_uuid() */
  id: PersonId,
  name: String,
  /** Points to [[address.AddressRow.id]] */
  addressId: Option[AddressId],
  /** Default: now() */
  createdAt: Option[TypoLocalDateTime]
){
   def toUnsavedRow(id: Defaulted[PersonId], createdAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.Provided(this.createdAt)): PersonRowUnsaved =
     PersonRowUnsaved(name, addressId, id, createdAt)
 }

object PersonRow {
  implicit lazy val decoder: Decoder[PersonRow] = Decoder.forProduct4[PersonRow, PersonId, String, Option[AddressId], Option[TypoLocalDateTime]]("id", "name", "address_id", "created_at")(PersonRow.apply)(PersonId.decoder, Decoder.decodeString, Decoder.decodeOption(AddressId.decoder), Decoder.decodeOption(TypoLocalDateTime.decoder))
  implicit lazy val encoder: Encoder[PersonRow] = Encoder.forProduct4[PersonRow, PersonId, String, Option[AddressId], Option[TypoLocalDateTime]]("id", "name", "address_id", "created_at")(x => (x.id, x.name, x.addressId, x.createdAt))(PersonId.encoder, Encoder.encodeString, Encoder.encodeOption(AddressId.encoder), Encoder.encodeOption(TypoLocalDateTime.encoder))
  implicit lazy val read: Read[PersonRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(PersonId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(AddressId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PersonRow(
      id = arr(0).asInstanceOf[PersonId],
          name = arr(1).asInstanceOf[String],
          addressId = arr(2).asInstanceOf[Option[AddressId]],
          createdAt = arr(3).asInstanceOf[Option[TypoLocalDateTime]]
    )
  }
  implicit lazy val text: Text[PersonRow] = Text.instance[PersonRow]{ (row, sb) =>
    PersonId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(AddressId.text).unsafeEncode(row.addressId, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.createdAt, sb)
  }
  implicit lazy val write: Write[PersonRow] = new Write.Composite[PersonRow](
    List(new Write.Single(PersonId.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(AddressId.put).toOpt,
         new Write.Single(TypoLocalDateTime.put).toOpt),
    a => List(a.id, a.name, a.addressId, a.createdAt)
  )
}
