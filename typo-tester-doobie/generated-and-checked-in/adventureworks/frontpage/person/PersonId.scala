/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package person

import adventureworks.customtypes.TypoUUID
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import typo.dsl.Bijection

/** Type for the primary key of table `frontpage.person` */
case class PersonId(value: TypoUUID) extends AnyVal
object PersonId {
  implicit lazy val arrayGet: Get[Array[PersonId]] = TypoUUID.arrayGet.map(_.map(PersonId.apply))
  implicit lazy val arrayPut: Put[Array[PersonId]] = TypoUUID.arrayPut.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[PersonId, TypoUUID] = Bijection[PersonId, TypoUUID](_.value)(PersonId.apply)
  implicit lazy val decoder: Decoder[PersonId] = TypoUUID.decoder.map(PersonId.apply)
  implicit lazy val encoder: Encoder[PersonId] = TypoUUID.encoder.contramap(_.value)
  implicit lazy val get: Get[PersonId] = TypoUUID.get.map(PersonId.apply)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[PersonId] = Ordering.by(_.value)
  implicit lazy val put: Put[PersonId] = TypoUUID.put.contramap(_.value)
  implicit lazy val text: Text[PersonId] = new Text[PersonId] {
    override def unsafeEncode(v: PersonId, sb: StringBuilder) = TypoUUID.text.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: PersonId, sb: StringBuilder) = TypoUUID.text.unsafeArrayEncode(v.value, sb)
  }
}
