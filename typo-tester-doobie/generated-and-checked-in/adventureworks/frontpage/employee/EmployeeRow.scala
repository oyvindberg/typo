/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package employee

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.person.PersonId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.employee
    Primary key: id */
case class EmployeeRow(
  /** Default: gen_random_uuid() */
  id: EmployeeId,
  /** Points to [[person.PersonRow.id]] */
  personId: PersonId,
  salary: Option[BigDecimal]
){
   def toUnsavedRow(id: Defaulted[EmployeeId]): EmployeeRowUnsaved =
     EmployeeRowUnsaved(personId, salary, id)
 }

object EmployeeRow {
  implicit lazy val decoder: Decoder[EmployeeRow] = Decoder.forProduct3[EmployeeRow, EmployeeId, PersonId, Option[BigDecimal]]("id", "person_id", "salary")(EmployeeRow.apply)(EmployeeId.decoder, PersonId.decoder, Decoder.decodeOption(Decoder.decodeBigDecimal))
  implicit lazy val encoder: Encoder[EmployeeRow] = Encoder.forProduct3[EmployeeRow, EmployeeId, PersonId, Option[BigDecimal]]("id", "person_id", "salary")(x => (x.id, x.personId, x.salary))(EmployeeId.encoder, PersonId.encoder, Encoder.encodeOption(Encoder.encodeBigDecimal))
  implicit lazy val read: Read[EmployeeRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(EmployeeId.get).asInstanceOf[Read[Any]],
      new Read.Single(PersonId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    EmployeeRow(
      id = arr(0).asInstanceOf[EmployeeId],
          personId = arr(1).asInstanceOf[PersonId],
          salary = arr(2).asInstanceOf[Option[BigDecimal]]
    )
  }
  implicit lazy val text: Text[EmployeeRow] = Text.instance[EmployeeRow]{ (row, sb) =>
    EmployeeId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    PersonId.text.unsafeEncode(row.personId, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.salary, sb)
  }
  implicit lazy val write: Write[EmployeeRow] = new Write.Composite[EmployeeRow](
    List(new Write.Single(EmployeeId.put),
         new Write.Single(PersonId.put),
         new Write.Single(Meta.ScalaBigDecimalMeta.put).toOpt),
    a => List(a.id, a.personId, a.salary)
  )
}
