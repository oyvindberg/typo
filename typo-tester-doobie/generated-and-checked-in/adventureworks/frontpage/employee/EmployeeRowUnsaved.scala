/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package employee

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.person.PersonId
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `frontpage.employee` which has not been persisted yet */
case class EmployeeRowUnsaved(
  /** Points to [[person.PersonRow.id]] */
  personId: PersonId,
  salary: Option[BigDecimal],
  /** Default: gen_random_uuid() */
  id: Defaulted[EmployeeId] = Defaulted.UseDefault
) {
  def toRow(idDefault: => EmployeeId): EmployeeRow =
    EmployeeRow(
      personId = personId,
      salary = salary,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           }
    )
}
object EmployeeRowUnsaved {
  implicit lazy val decoder: Decoder[EmployeeRowUnsaved] = Decoder.forProduct3[EmployeeRowUnsaved, PersonId, Option[BigDecimal], Defaulted[EmployeeId]]("person_id", "salary", "id")(EmployeeRowUnsaved.apply)(PersonId.decoder, Decoder.decodeOption(Decoder.decodeBigDecimal), Defaulted.decoder(EmployeeId.decoder))
  implicit lazy val encoder: Encoder[EmployeeRowUnsaved] = Encoder.forProduct3[EmployeeRowUnsaved, PersonId, Option[BigDecimal], Defaulted[EmployeeId]]("person_id", "salary", "id")(x => (x.personId, x.salary, x.id))(PersonId.encoder, Encoder.encodeOption(Encoder.encodeBigDecimal), Defaulted.encoder(EmployeeId.encoder))
  implicit lazy val text: Text[EmployeeRowUnsaved] = Text.instance[EmployeeRowUnsaved]{ (row, sb) =>
    PersonId.text.unsafeEncode(row.personId, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.salary, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(EmployeeId.text).unsafeEncode(row.id, sb)
  }
}
