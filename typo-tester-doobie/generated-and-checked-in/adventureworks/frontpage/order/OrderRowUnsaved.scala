/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.product.ProductId
import adventureworks.frontpage.user.UserId
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `frontpage.order` which has not been persisted yet */
case class OrderRowUnsaved(
  /** Points to [[user.UserRow.id]] */
  userId: Option[UserId],
  /** Points to [[product.ProductRow.id]] */
  productId: Option[ProductId],
  total: BigDecimal,
  shippedAt: Option[TypoLocalDateTime],
  /** Default: gen_random_uuid() */
  id: Defaulted[OrderId] = Defaulted.UseDefault,
  /** Default: 'pending'::frontpage.order_status */
  status: Defaulted[Option[OrderStatus]] = Defaulted.UseDefault,
  /** Default: now() */
  createdAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => OrderId, statusDefault: => Option[OrderStatus], createdAtDefault: => Option[TypoLocalDateTime]): OrderRow =
    OrderRow(
      userId = userId,
      productId = productId,
      total = total,
      shippedAt = shippedAt,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      status = status match {
                 case Defaulted.UseDefault => statusDefault
                 case Defaulted.Provided(value) => value
               },
      createdAt = createdAt match {
                    case Defaulted.UseDefault => createdAtDefault
                    case Defaulted.Provided(value) => value
                  }
    )
}
object OrderRowUnsaved {
  implicit lazy val decoder: Decoder[OrderRowUnsaved] = Decoder.forProduct7[OrderRowUnsaved, Option[UserId], Option[ProductId], BigDecimal, Option[TypoLocalDateTime], Defaulted[OrderId], Defaulted[Option[OrderStatus]], Defaulted[Option[TypoLocalDateTime]]]("user_id", "product_id", "total", "shipped_at", "id", "status", "created_at")(OrderRowUnsaved.apply)(Decoder.decodeOption(UserId.decoder), Decoder.decodeOption(ProductId.decoder), Decoder.decodeBigDecimal, Decoder.decodeOption(TypoLocalDateTime.decoder), Defaulted.decoder(OrderId.decoder), Defaulted.decoder(Decoder.decodeOption(OrderStatus.decoder)), Defaulted.decoder(Decoder.decodeOption(TypoLocalDateTime.decoder)))
  implicit lazy val encoder: Encoder[OrderRowUnsaved] = Encoder.forProduct7[OrderRowUnsaved, Option[UserId], Option[ProductId], BigDecimal, Option[TypoLocalDateTime], Defaulted[OrderId], Defaulted[Option[OrderStatus]], Defaulted[Option[TypoLocalDateTime]]]("user_id", "product_id", "total", "shipped_at", "id", "status", "created_at")(x => (x.userId, x.productId, x.total, x.shippedAt, x.id, x.status, x.createdAt))(Encoder.encodeOption(UserId.encoder), Encoder.encodeOption(ProductId.encoder), Encoder.encodeBigDecimal, Encoder.encodeOption(TypoLocalDateTime.encoder), Defaulted.encoder(OrderId.encoder), Defaulted.encoder(Encoder.encodeOption(OrderStatus.encoder)), Defaulted.encoder(Encoder.encodeOption(TypoLocalDateTime.encoder)))
  implicit lazy val text: Text[OrderRowUnsaved] = Text.instance[OrderRowUnsaved]{ (row, sb) =>
    Text.option(UserId.text).unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    Text.option(ProductId.text).unsafeEncode(row.productId, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.total, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.shippedAt, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(OrderId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(OrderStatus.text)).unsafeEncode(row.status, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(TypoLocalDateTime.text)).unsafeEncode(row.createdAt, sb)
  }
}
