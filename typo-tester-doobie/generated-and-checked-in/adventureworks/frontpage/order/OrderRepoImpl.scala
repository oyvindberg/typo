/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.product.ProductId
import adventureworks.frontpage.user.UserId
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class OrderRepoImpl extends OrderRepo {
  override def delete: DeleteBuilder[OrderFields, OrderRow] = {
    DeleteBuilder(""""frontpage"."order"""", OrderFields.structure)
  }
  override def deleteById(id: OrderId): ConnectionIO[Boolean] = {
    sql"""delete from "frontpage"."order" where "id" = ${fromWrite(id)(new Write.Single(OrderId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(ids: Array[OrderId]): ConnectionIO[Int] = {
    sql"""delete from "frontpage"."order" where "id" = ANY(${ids})""".update.run
  }
  override def insert(unsaved: OrderRow): ConnectionIO[OrderRow] = {
    sql"""insert into "frontpage"."order"("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")
          values (${fromWrite(unsaved.id)(new Write.Single(OrderId.put))}::uuid, ${fromWrite(unsaved.userId)(new Write.SingleOpt(UserId.put))}::uuid, ${fromWrite(unsaved.productId)(new Write.SingleOpt(ProductId.put))}::uuid, ${fromWrite(unsaved.status)(new Write.SingleOpt(OrderStatus.put))}::frontpage.order_status, ${fromWrite(unsaved.total)(new Write.Single(Meta.ScalaBigDecimalMeta.put))}::numeric, ${fromWrite(unsaved.createdAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp, ${fromWrite(unsaved.shippedAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp)
          returning "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text
       """.query(using OrderRow.read).unique
  }
  override def insert(unsaved: OrderRowUnsaved): ConnectionIO[OrderRow] = {
    val fs = List(
      Some((Fragment.const0(s""""user_id""""), fr"${fromWrite(unsaved.userId)(new Write.SingleOpt(UserId.put))}::uuid")),
      Some((Fragment.const0(s""""product_id""""), fr"${fromWrite(unsaved.productId)(new Write.SingleOpt(ProductId.put))}::uuid")),
      Some((Fragment.const0(s""""total""""), fr"${fromWrite(unsaved.total)(new Write.Single(Meta.ScalaBigDecimalMeta.put))}::numeric")),
      Some((Fragment.const0(s""""shipped_at""""), fr"${fromWrite(unsaved.shippedAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""id""""), fr"${fromWrite(value: OrderId)(new Write.Single(OrderId.put))}::uuid"))
      },
      unsaved.status match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""status""""), fr"${fromWrite(value: Option[OrderStatus])(new Write.SingleOpt(OrderStatus.put))}::frontpage.order_status"))
      },
      unsaved.createdAt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""created_at""""), fr"${fromWrite(value: Option[TypoLocalDateTime])(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."order" default values
            returning "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into "frontpage"."order"(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text
         """
    }
    q.query(using OrderRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, OrderRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."order"("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at") FROM STDIN""").copyIn(unsaved, batchSize)(using OrderRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, OrderRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."order"("user_id", "product_id", "total", "shipped_at", "id", "status", "created_at") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using OrderRowUnsaved.text)
  }
  override def select: SelectBuilder[OrderFields, OrderRow] = {
    SelectBuilderSql(""""frontpage"."order"""", OrderFields.structure, OrderRow.read)
  }
  override def selectAll: Stream[ConnectionIO, OrderRow] = {
    sql"""select "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text from "frontpage"."order"""".query(using OrderRow.read).stream
  }
  override def selectById(id: OrderId): ConnectionIO[Option[OrderRow]] = {
    sql"""select "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text from "frontpage"."order" where "id" = ${fromWrite(id)(new Write.Single(OrderId.put))}""".query(using OrderRow.read).option
  }
  override def selectByIds(ids: Array[OrderId]): Stream[ConnectionIO, OrderRow] = {
    sql"""select "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text from "frontpage"."order" where "id" = ANY(${ids})""".query(using OrderRow.read).stream
  }
  override def selectByIdsTracked(ids: Array[OrderId]): ConnectionIO[Map[OrderId, OrderRow]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[OrderFields, OrderRow] = {
    UpdateBuilder(""""frontpage"."order"""", OrderFields.structure, OrderRow.read)
  }
  override def update(row: OrderRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update "frontpage"."order"
          set "user_id" = ${fromWrite(row.userId)(new Write.SingleOpt(UserId.put))}::uuid,
              "product_id" = ${fromWrite(row.productId)(new Write.SingleOpt(ProductId.put))}::uuid,
              "status" = ${fromWrite(row.status)(new Write.SingleOpt(OrderStatus.put))}::frontpage.order_status,
              "total" = ${fromWrite(row.total)(new Write.Single(Meta.ScalaBigDecimalMeta.put))}::numeric,
              "created_at" = ${fromWrite(row.createdAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp,
              "shipped_at" = ${fromWrite(row.shippedAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp
          where "id" = ${fromWrite(id)(new Write.Single(OrderId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: OrderRow): ConnectionIO[OrderRow] = {
    sql"""insert into "frontpage"."order"("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")
          values (
            ${fromWrite(unsaved.id)(new Write.Single(OrderId.put))}::uuid,
            ${fromWrite(unsaved.userId)(new Write.SingleOpt(UserId.put))}::uuid,
            ${fromWrite(unsaved.productId)(new Write.SingleOpt(ProductId.put))}::uuid,
            ${fromWrite(unsaved.status)(new Write.SingleOpt(OrderStatus.put))}::frontpage.order_status,
            ${fromWrite(unsaved.total)(new Write.Single(Meta.ScalaBigDecimalMeta.put))}::numeric,
            ${fromWrite(unsaved.createdAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp,
            ${fromWrite(unsaved.shippedAt)(new Write.SingleOpt(TypoLocalDateTime.put))}::timestamp
          )
          on conflict ("id")
          do update set
            "user_id" = EXCLUDED."user_id",
            "product_id" = EXCLUDED."product_id",
            "status" = EXCLUDED."status",
            "total" = EXCLUDED."total",
            "created_at" = EXCLUDED."created_at",
            "shipped_at" = EXCLUDED."shipped_at"
          returning "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text
       """.query(using OrderRow.read).unique
  }
  override def upsertBatch(unsaved: List[OrderRow]): Stream[ConnectionIO, OrderRow] = {
    Update[OrderRow](
      s"""insert into "frontpage"."order"("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")
          values (?::uuid,?::uuid,?::uuid,?::frontpage.order_status,?::numeric,?::timestamp,?::timestamp)
          on conflict ("id")
          do update set
            "user_id" = EXCLUDED."user_id",
            "product_id" = EXCLUDED."product_id",
            "status" = EXCLUDED."status",
            "total" = EXCLUDED."total",
            "created_at" = EXCLUDED."created_at",
            "shipped_at" = EXCLUDED."shipped_at"
          returning "id", "user_id", "product_id", "status", "total", "created_at"::text, "shipped_at"::text"""
    )(using OrderRow.write)
    .updateManyWithGeneratedKeys[OrderRow]("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")(unsaved)(using catsStdInstancesForList, OrderRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, OrderRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table order_TEMP (like "frontpage"."order") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy order_TEMP("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at") from stdin""").copyIn(unsaved, batchSize)(using OrderRow.text)
      res <- sql"""insert into "frontpage"."order"("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")
                   select * from order_TEMP
                   on conflict ("id")
                   do update set
                     "user_id" = EXCLUDED."user_id",
                     "product_id" = EXCLUDED."product_id",
                     "status" = EXCLUDED."status",
                     "total" = EXCLUDED."total",
                     "created_at" = EXCLUDED."created_at",
                     "shipped_at" = EXCLUDED."shipped_at"
                   ;
                   drop table order_TEMP;""".update.run
    } yield res
  }
}
