/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package order

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.frontpage.product.ProductId
import adventureworks.frontpage.user.UserId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.order
    Primary key: id */
case class OrderRow(
  /** Default: gen_random_uuid() */
  id: OrderId,
  /** Points to [[user.UserRow.id]] */
  userId: Option[UserId],
  /** Points to [[product.ProductRow.id]] */
  productId: Option[ProductId],
  /** Default: 'pending'::frontpage.order_status */
  status: Option[OrderStatus],
  total: BigDecimal,
  /** Default: now() */
  createdAt: Option[TypoLocalDateTime],
  shippedAt: Option[TypoLocalDateTime]
){
   def toUnsavedRow(id: Defaulted[OrderId], status: Defaulted[Option[OrderStatus]] = Defaulted.Provided(this.status), createdAt: Defaulted[Option[TypoLocalDateTime]] = Defaulted.Provided(this.createdAt)): OrderRowUnsaved =
     OrderRowUnsaved(userId, productId, total, shippedAt, id, status, createdAt)
 }

object OrderRow {
  implicit lazy val decoder: Decoder[OrderRow] = Decoder.forProduct7[OrderRow, OrderId, Option[UserId], Option[ProductId], Option[OrderStatus], BigDecimal, Option[TypoLocalDateTime], Option[TypoLocalDateTime]]("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")(OrderRow.apply)(OrderId.decoder, Decoder.decodeOption(UserId.decoder), Decoder.decodeOption(ProductId.decoder), Decoder.decodeOption(OrderStatus.decoder), Decoder.decodeBigDecimal, Decoder.decodeOption(TypoLocalDateTime.decoder), Decoder.decodeOption(TypoLocalDateTime.decoder))
  implicit lazy val encoder: Encoder[OrderRow] = Encoder.forProduct7[OrderRow, OrderId, Option[UserId], Option[ProductId], Option[OrderStatus], BigDecimal, Option[TypoLocalDateTime], Option[TypoLocalDateTime]]("id", "user_id", "product_id", "status", "total", "created_at", "shipped_at")(x => (x.id, x.userId, x.productId, x.status, x.total, x.createdAt, x.shippedAt))(OrderId.encoder, Encoder.encodeOption(UserId.encoder), Encoder.encodeOption(ProductId.encoder), Encoder.encodeOption(OrderStatus.encoder), Encoder.encodeBigDecimal, Encoder.encodeOption(TypoLocalDateTime.encoder), Encoder.encodeOption(TypoLocalDateTime.encoder))
  implicit lazy val read: Read[OrderRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(OrderId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(UserId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(ProductId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(OrderStatus.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    OrderRow(
      id = arr(0).asInstanceOf[OrderId],
          userId = arr(1).asInstanceOf[Option[UserId]],
          productId = arr(2).asInstanceOf[Option[ProductId]],
          status = arr(3).asInstanceOf[Option[OrderStatus]],
          total = arr(4).asInstanceOf[BigDecimal],
          createdAt = arr(5).asInstanceOf[Option[TypoLocalDateTime]],
          shippedAt = arr(6).asInstanceOf[Option[TypoLocalDateTime]]
    )
  }
  implicit lazy val text: Text[OrderRow] = Text.instance[OrderRow]{ (row, sb) =>
    OrderId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.option(UserId.text).unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    Text.option(ProductId.text).unsafeEncode(row.productId, sb)
    sb.append(Text.DELIMETER)
    Text.option(OrderStatus.text).unsafeEncode(row.status, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.total, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.createdAt, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.shippedAt, sb)
  }
  implicit lazy val write: Write[OrderRow] = new Write.Composite[OrderRow](
    List(new Write.Single(OrderId.put),
         new Write.Single(UserId.put).toOpt,
         new Write.Single(ProductId.put).toOpt,
         new Write.Single(OrderStatus.put).toOpt,
         new Write.Single(Meta.ScalaBigDecimalMeta.put),
         new Write.Single(TypoLocalDateTime.put).toOpt,
         new Write.Single(TypoLocalDateTime.put).toOpt),
    a => List(a.id, a.userId, a.productId, a.status, a.total, a.createdAt, a.shippedAt)
  )
}
