/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage

import cats.data.NonEmptyList
import doobie.enumerated.JdbcType
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Enum `frontpage.user_status`
  *  - active
  *  - inactive
  *  - suspended
  */
sealed abstract class UserStatus(val value: String)

object UserStatus {
  def apply(str: String): Either[String, UserStatus] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): UserStatus =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object active extends UserStatus("active")
  case object inactive extends UserStatus("inactive")
  case object suspended extends UserStatus("suspended")
  val All: List[UserStatus] = List(active, inactive, suspended)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, UserStatus] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayGet: Get[Array[UserStatus]] = adventureworks.StringArrayMeta.get.map(_.map(force))
  implicit lazy val arrayPut: Put[Array[UserStatus]] = Put.Advanced.array[AnyRef](NonEmptyList.one("frontpage.user_status[]"), "frontpage.user_status").contramap(_.map(_.value))
  implicit lazy val decoder: Decoder[UserStatus] = Decoder.decodeString.emap(UserStatus.apply)
  implicit lazy val encoder: Encoder[UserStatus] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[UserStatus] = Meta.StringMeta.get.temap(UserStatus.apply)
  implicit lazy val ordering: Ordering[UserStatus] = Ordering.by(_.value)
  implicit lazy val put: Put[UserStatus] = Put.Advanced.one[UserStatus](JdbcType.Other, NonEmptyList.one("frontpage.user_status"), (ps, i, a) => ps.setString(i, a.value), (rs, i, a) => rs.updateString(i, a.value))
  implicit lazy val read: Read[UserStatus] = new Read.Single(get)
  implicit lazy val text: Text[UserStatus] = new Text[UserStatus] {
    override def unsafeEncode(v: UserStatus, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: UserStatus, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val write: Write[UserStatus] = new Write.Single(put)
}
