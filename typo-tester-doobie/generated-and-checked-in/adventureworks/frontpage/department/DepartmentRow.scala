/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package department

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.company.CompanyId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.department
    Primary key: id */
case class DepartmentRow(
  /** Default: gen_random_uuid() */
  id: DepartmentId,
  name: String,
  budget: Option[BigDecimal],
  /** Points to [[company.CompanyRow.id]] */
  companyId: Option[CompanyId]
){
   def toUnsavedRow(id: Defaulted[DepartmentId]): DepartmentRowUnsaved =
     DepartmentRowUnsaved(name, budget, companyId, id)
 }

object DepartmentRow {
  implicit lazy val decoder: Decoder[DepartmentRow] = Decoder.forProduct4[DepartmentRow, DepartmentId, String, Option[BigDecimal], Option[CompanyId]]("id", "name", "budget", "company_id")(DepartmentRow.apply)(DepartmentId.decoder, Decoder.decodeString, Decoder.decodeOption(Decoder.decodeBigDecimal), Decoder.decodeOption(CompanyId.decoder))
  implicit lazy val encoder: Encoder[DepartmentRow] = Encoder.forProduct4[DepartmentRow, DepartmentId, String, Option[BigDecimal], Option[CompanyId]]("id", "name", "budget", "company_id")(x => (x.id, x.name, x.budget, x.companyId))(DepartmentId.encoder, Encoder.encodeString, Encoder.encodeOption(Encoder.encodeBigDecimal), Encoder.encodeOption(CompanyId.encoder))
  implicit lazy val read: Read[DepartmentRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(DepartmentId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(CompanyId.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    DepartmentRow(
      id = arr(0).asInstanceOf[DepartmentId],
          name = arr(1).asInstanceOf[String],
          budget = arr(2).asInstanceOf[Option[BigDecimal]],
          companyId = arr(3).asInstanceOf[Option[CompanyId]]
    )
  }
  implicit lazy val text: Text[DepartmentRow] = Text.instance[DepartmentRow]{ (row, sb) =>
    DepartmentId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.budget, sb)
    sb.append(Text.DELIMETER)
    Text.option(CompanyId.text).unsafeEncode(row.companyId, sb)
  }
  implicit lazy val write: Write[DepartmentRow] = new Write.Composite[DepartmentRow](
    List(new Write.Single(DepartmentId.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.ScalaBigDecimalMeta.put).toOpt,
         new Write.Single(CompanyId.put).toOpt),
    a => List(a.id, a.name, a.budget, a.companyId)
  )
}
