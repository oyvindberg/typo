/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package department

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.company.CompanyId
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `frontpage.department` which has not been persisted yet */
case class DepartmentRowUnsaved(
  name: String,
  budget: Option[BigDecimal],
  /** Points to [[company.CompanyRow.id]] */
  companyId: Option[CompanyId],
  /** Default: gen_random_uuid() */
  id: Defaulted[DepartmentId] = Defaulted.UseDefault
) {
  def toRow(idDefault: => DepartmentId): DepartmentRow =
    DepartmentRow(
      name = name,
      budget = budget,
      companyId = companyId,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           }
    )
}
object DepartmentRowUnsaved {
  implicit lazy val decoder: Decoder[DepartmentRowUnsaved] = Decoder.forProduct4[DepartmentRowUnsaved, String, Option[BigDecimal], Option[CompanyId], Defaulted[DepartmentId]]("name", "budget", "company_id", "id")(DepartmentRowUnsaved.apply)(Decoder.decodeString, Decoder.decodeOption(Decoder.decodeBigDecimal), Decoder.decodeOption(CompanyId.decoder), Defaulted.decoder(DepartmentId.decoder))
  implicit lazy val encoder: Encoder[DepartmentRowUnsaved] = Encoder.forProduct4[DepartmentRowUnsaved, String, Option[BigDecimal], Option[CompanyId], Defaulted[DepartmentId]]("name", "budget", "company_id", "id")(x => (x.name, x.budget, x.companyId, x.id))(Encoder.encodeString, Encoder.encodeOption(Encoder.encodeBigDecimal), Encoder.encodeOption(CompanyId.encoder), Defaulted.encoder(DepartmentId.encoder))
  implicit lazy val text: Text[DepartmentRowUnsaved] = Text.instance[DepartmentRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.budget, sb)
    sb.append(Text.DELIMETER)
    Text.option(CompanyId.text).unsafeEncode(row.companyId, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(DepartmentId.text).unsafeEncode(row.id, sb)
  }
}
