/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package address

import adventureworks.customtypes.Defaulted
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.address
    Primary key: id */
case class AddressRow(
  /** Default: gen_random_uuid() */
  id: AddressId,
  city: String,
  country: String
){
   def toUnsavedRow(id: Defaulted[AddressId]): AddressRowUnsaved =
     AddressRowUnsaved(city, country, id)
 }

object AddressRow {
  implicit lazy val decoder: Decoder[AddressRow] = Decoder.forProduct3[AddressRow, AddressId, String, String]("id", "city", "country")(AddressRow.apply)(AddressId.decoder, Decoder.decodeString, Decoder.decodeString)
  implicit lazy val encoder: Encoder[AddressRow] = Encoder.forProduct3[AddressRow, AddressId, String, String]("id", "city", "country")(x => (x.id, x.city, x.country))(AddressId.encoder, Encoder.encodeString, Encoder.encodeString)
  implicit lazy val read: Read[AddressRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(AddressId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    AddressRow(
      id = arr(0).asInstanceOf[AddressId],
          city = arr(1).asInstanceOf[String],
          country = arr(2).asInstanceOf[String]
    )
  }
  implicit lazy val text: Text[AddressRow] = Text.instance[AddressRow]{ (row, sb) =>
    AddressId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.city, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.country, sb)
  }
  implicit lazy val write: Write[AddressRow] = new Write.Composite[AddressRow](
    List(new Write.Single(AddressId.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.StringMeta.put)),
    a => List(a.id, a.city, a.country)
  )
}
