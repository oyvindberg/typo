/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package address

import adventureworks.customtypes.Defaulted
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `frontpage.address` which has not been persisted yet */
case class AddressRowUnsaved(
  city: String,
  country: String,
  /** Default: gen_random_uuid() */
  id: Defaulted[AddressId] = Defaulted.UseDefault
) {
  def toRow(idDefault: => AddressId): AddressRow =
    AddressRow(
      city = city,
      country = country,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           }
    )
}
object AddressRowUnsaved {
  implicit lazy val decoder: Decoder[AddressRowUnsaved] = Decoder.forProduct3[AddressRowUnsaved, String, String, Defaulted[AddressId]]("city", "country", "id")(AddressRowUnsaved.apply)(Decoder.decodeString, Decoder.decodeString, Defaulted.decoder(AddressId.decoder))
  implicit lazy val encoder: Encoder[AddressRowUnsaved] = Encoder.forProduct3[AddressRowUnsaved, String, String, Defaulted[AddressId]]("city", "country", "id")(x => (x.city, x.country, x.id))(Encoder.encodeString, Encoder.encodeString, Defaulted.encoder(AddressId.encoder))
  implicit lazy val text: Text[AddressRowUnsaved] = Text.instance[AddressRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.city, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.country, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(AddressId.text).unsafeEncode(row.id, sb)
  }
}
