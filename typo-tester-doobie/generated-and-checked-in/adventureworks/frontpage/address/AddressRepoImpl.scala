/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package address

import adventureworks.customtypes.Defaulted
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class AddressRepoImpl extends AddressRepo {
  override def delete: DeleteBuilder[AddressFields, AddressRow] = {
    DeleteBuilder(""""frontpage"."address"""", AddressFields.structure)
  }
  override def deleteById(id: AddressId): ConnectionIO[Boolean] = {
    sql"""delete from "frontpage"."address" where "id" = ${fromWrite(id)(new Write.Single(AddressId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(ids: Array[AddressId]): ConnectionIO[Int] = {
    sql"""delete from "frontpage"."address" where "id" = ANY(${ids})""".update.run
  }
  override def insert(unsaved: AddressRow): ConnectionIO[AddressRow] = {
    sql"""insert into "frontpage"."address"("id", "city", "country")
          values (${fromWrite(unsaved.id)(new Write.Single(AddressId.put))}::uuid, ${fromWrite(unsaved.city)(new Write.Single(Meta.StringMeta.put))}, ${fromWrite(unsaved.country)(new Write.Single(Meta.StringMeta.put))})
          returning "id", "city", "country"
       """.query(using AddressRow.read).unique
  }
  override def insert(unsaved: AddressRowUnsaved): ConnectionIO[AddressRow] = {
    val fs = List(
      Some((Fragment.const0(s""""city""""), fr"${fromWrite(unsaved.city)(new Write.Single(Meta.StringMeta.put))}")),
      Some((Fragment.const0(s""""country""""), fr"${fromWrite(unsaved.country)(new Write.Single(Meta.StringMeta.put))}")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""id""""), fr"${fromWrite(value: AddressId)(new Write.Single(AddressId.put))}::uuid"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."address" default values
            returning "id", "city", "country"
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into "frontpage"."address"(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "id", "city", "country"
         """
    }
    q.query(using AddressRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, AddressRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."address"("id", "city", "country") FROM STDIN""").copyIn(unsaved, batchSize)(using AddressRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, AddressRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."address"("city", "country", "id") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using AddressRowUnsaved.text)
  }
  override def select: SelectBuilder[AddressFields, AddressRow] = {
    SelectBuilderSql(""""frontpage"."address"""", AddressFields.structure, AddressRow.read)
  }
  override def selectAll: Stream[ConnectionIO, AddressRow] = {
    sql"""select "id", "city", "country" from "frontpage"."address"""".query(using AddressRow.read).stream
  }
  override def selectById(id: AddressId): ConnectionIO[Option[AddressRow]] = {
    sql"""select "id", "city", "country" from "frontpage"."address" where "id" = ${fromWrite(id)(new Write.Single(AddressId.put))}""".query(using AddressRow.read).option
  }
  override def selectByIds(ids: Array[AddressId]): Stream[ConnectionIO, AddressRow] = {
    sql"""select "id", "city", "country" from "frontpage"."address" where "id" = ANY(${ids})""".query(using AddressRow.read).stream
  }
  override def selectByIdsTracked(ids: Array[AddressId]): ConnectionIO[Map[AddressId, AddressRow]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[AddressFields, AddressRow] = {
    UpdateBuilder(""""frontpage"."address"""", AddressFields.structure, AddressRow.read)
  }
  override def update(row: AddressRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update "frontpage"."address"
          set "city" = ${fromWrite(row.city)(new Write.Single(Meta.StringMeta.put))},
              "country" = ${fromWrite(row.country)(new Write.Single(Meta.StringMeta.put))}
          where "id" = ${fromWrite(id)(new Write.Single(AddressId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: AddressRow): ConnectionIO[AddressRow] = {
    sql"""insert into "frontpage"."address"("id", "city", "country")
          values (
            ${fromWrite(unsaved.id)(new Write.Single(AddressId.put))}::uuid,
            ${fromWrite(unsaved.city)(new Write.Single(Meta.StringMeta.put))},
            ${fromWrite(unsaved.country)(new Write.Single(Meta.StringMeta.put))}
          )
          on conflict ("id")
          do update set
            "city" = EXCLUDED."city",
            "country" = EXCLUDED."country"
          returning "id", "city", "country"
       """.query(using AddressRow.read).unique
  }
  override def upsertBatch(unsaved: List[AddressRow]): Stream[ConnectionIO, AddressRow] = {
    Update[AddressRow](
      s"""insert into "frontpage"."address"("id", "city", "country")
          values (?::uuid,?,?)
          on conflict ("id")
          do update set
            "city" = EXCLUDED."city",
            "country" = EXCLUDED."country"
          returning "id", "city", "country""""
    )(using AddressRow.write)
    .updateManyWithGeneratedKeys[AddressRow]("id", "city", "country")(unsaved)(using catsStdInstancesForList, AddressRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, AddressRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table address_TEMP (like "frontpage"."address") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy address_TEMP("id", "city", "country") from stdin""").copyIn(unsaved, batchSize)(using AddressRow.text)
      res <- sql"""insert into "frontpage"."address"("id", "city", "country")
                   select * from address_TEMP
                   on conflict ("id")
                   do update set
                     "city" = EXCLUDED."city",
                     "country" = EXCLUDED."country"
                   ;
                   drop table address_TEMP;""".update.run
    } yield res
  }
}
