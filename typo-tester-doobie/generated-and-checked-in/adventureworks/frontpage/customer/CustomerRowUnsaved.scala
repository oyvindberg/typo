/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package customer

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.user.UserId
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `frontpage.customer` which has not been persisted yet */
case class CustomerRowUnsaved(
  /** Points to [[user.UserRow.id]] */
  userId: Option[UserId],
  companyName: Option[String],
  creditLimit: Option[BigDecimal],
  /** Default: gen_random_uuid() */
  id: Defaulted[CustomerId] = Defaulted.UseDefault,
  /** Default: false */
  verified: Defaulted[Option[Boolean]] = Defaulted.UseDefault
) {
  def toRow(idDefault: => CustomerId, verifiedDefault: => Option[Boolean]): CustomerRow =
    CustomerRow(
      userId = userId,
      companyName = companyName,
      creditLimit = creditLimit,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      verified = verified match {
                   case Defaulted.UseDefault => verifiedDefault
                   case Defaulted.Provided(value) => value
                 }
    )
}
object CustomerRowUnsaved {
  implicit lazy val decoder: Decoder[CustomerRowUnsaved] = Decoder.forProduct5[CustomerRowUnsaved, Option[UserId], Option[String], Option[BigDecimal], Defaulted[CustomerId], Defaulted[Option[Boolean]]]("user_id", "company_name", "credit_limit", "id", "verified")(CustomerRowUnsaved.apply)(Decoder.decodeOption(UserId.decoder), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeBigDecimal), Defaulted.decoder(CustomerId.decoder), Defaulted.decoder(Decoder.decodeOption(Decoder.decodeBoolean)))
  implicit lazy val encoder: Encoder[CustomerRowUnsaved] = Encoder.forProduct5[CustomerRowUnsaved, Option[UserId], Option[String], Option[BigDecimal], Defaulted[CustomerId], Defaulted[Option[Boolean]]]("user_id", "company_name", "credit_limit", "id", "verified")(x => (x.userId, x.companyName, x.creditLimit, x.id, x.verified))(Encoder.encodeOption(UserId.encoder), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeBigDecimal), Defaulted.encoder(CustomerId.encoder), Defaulted.encoder(Encoder.encodeOption(Encoder.encodeBoolean)))
  implicit lazy val text: Text[CustomerRowUnsaved] = Text.instance[CustomerRowUnsaved]{ (row, sb) =>
    Text.option(UserId.text).unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.companyName, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.creditLimit, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(CustomerId.text).unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.booleanInstance)).unsafeEncode(row.verified, sb)
  }
}
