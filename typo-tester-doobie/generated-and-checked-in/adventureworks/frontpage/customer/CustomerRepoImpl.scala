/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package customer

import adventureworks.customtypes.Defaulted
import adventureworks.frontpage.user.UserId
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class CustomerRepoImpl extends CustomerRepo {
  override def delete: DeleteBuilder[CustomerFields, CustomerRow] = {
    DeleteBuilder(""""frontpage"."customer"""", CustomerFields.structure)
  }
  override def deleteById(id: CustomerId): ConnectionIO[Boolean] = {
    sql"""delete from "frontpage"."customer" where "id" = ${fromWrite(id)(new Write.Single(CustomerId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(ids: Array[CustomerId]): ConnectionIO[Int] = {
    sql"""delete from "frontpage"."customer" where "id" = ANY(${ids})""".update.run
  }
  override def insert(unsaved: CustomerRow): ConnectionIO[CustomerRow] = {
    sql"""insert into "frontpage"."customer"("id", "user_id", "company_name", "credit_limit", "verified")
          values (${fromWrite(unsaved.id)(new Write.Single(CustomerId.put))}::uuid, ${fromWrite(unsaved.userId)(new Write.SingleOpt(UserId.put))}::uuid, ${fromWrite(unsaved.companyName)(new Write.SingleOpt(Meta.StringMeta.put))}, ${fromWrite(unsaved.creditLimit)(new Write.SingleOpt(Meta.ScalaBigDecimalMeta.put))}::numeric, ${fromWrite(unsaved.verified)(new Write.SingleOpt(Meta.BooleanMeta.put))})
          returning "id", "user_id", "company_name", "credit_limit", "verified"
       """.query(using CustomerRow.read).unique
  }
  override def insert(unsaved: CustomerRowUnsaved): ConnectionIO[CustomerRow] = {
    val fs = List(
      Some((Fragment.const0(s""""user_id""""), fr"${fromWrite(unsaved.userId)(new Write.SingleOpt(UserId.put))}::uuid")),
      Some((Fragment.const0(s""""company_name""""), fr"${fromWrite(unsaved.companyName)(new Write.SingleOpt(Meta.StringMeta.put))}")),
      Some((Fragment.const0(s""""credit_limit""""), fr"${fromWrite(unsaved.creditLimit)(new Write.SingleOpt(Meta.ScalaBigDecimalMeta.put))}::numeric")),
      unsaved.id match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""id""""), fr"${fromWrite(value: CustomerId)(new Write.Single(CustomerId.put))}::uuid"))
      },
      unsaved.verified match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const0(s""""verified""""), fr"${fromWrite(value: Option[Boolean])(new Write.SingleOpt(Meta.BooleanMeta.put))}"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into "frontpage"."customer" default values
            returning "id", "user_id", "company_name", "credit_limit", "verified"
         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into "frontpage"."customer"(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
            returning "id", "user_id", "company_name", "credit_limit", "verified"
         """
    }
    q.query(using CustomerRow.read).unique
    
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, CustomerRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."customer"("id", "user_id", "company_name", "credit_limit", "verified") FROM STDIN""").copyIn(unsaved, batchSize)(using CustomerRow.text)
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, CustomerRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "frontpage"."customer"("user_id", "company_name", "credit_limit", "id", "verified") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using CustomerRowUnsaved.text)
  }
  override def select: SelectBuilder[CustomerFields, CustomerRow] = {
    SelectBuilderSql(""""frontpage"."customer"""", CustomerFields.structure, CustomerRow.read)
  }
  override def selectAll: Stream[ConnectionIO, CustomerRow] = {
    sql"""select "id", "user_id", "company_name", "credit_limit", "verified" from "frontpage"."customer"""".query(using CustomerRow.read).stream
  }
  override def selectById(id: CustomerId): ConnectionIO[Option[CustomerRow]] = {
    sql"""select "id", "user_id", "company_name", "credit_limit", "verified" from "frontpage"."customer" where "id" = ${fromWrite(id)(new Write.Single(CustomerId.put))}""".query(using CustomerRow.read).option
  }
  override def selectByIds(ids: Array[CustomerId]): Stream[ConnectionIO, CustomerRow] = {
    sql"""select "id", "user_id", "company_name", "credit_limit", "verified" from "frontpage"."customer" where "id" = ANY(${ids})""".query(using CustomerRow.read).stream
  }
  override def selectByIdsTracked(ids: Array[CustomerId]): ConnectionIO[Map[CustomerId, CustomerRow]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[CustomerFields, CustomerRow] = {
    UpdateBuilder(""""frontpage"."customer"""", CustomerFields.structure, CustomerRow.read)
  }
  override def update(row: CustomerRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update "frontpage"."customer"
          set "user_id" = ${fromWrite(row.userId)(new Write.SingleOpt(UserId.put))}::uuid,
              "company_name" = ${fromWrite(row.companyName)(new Write.SingleOpt(Meta.StringMeta.put))},
              "credit_limit" = ${fromWrite(row.creditLimit)(new Write.SingleOpt(Meta.ScalaBigDecimalMeta.put))}::numeric,
              "verified" = ${fromWrite(row.verified)(new Write.SingleOpt(Meta.BooleanMeta.put))}
          where "id" = ${fromWrite(id)(new Write.Single(CustomerId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: CustomerRow): ConnectionIO[CustomerRow] = {
    sql"""insert into "frontpage"."customer"("id", "user_id", "company_name", "credit_limit", "verified")
          values (
            ${fromWrite(unsaved.id)(new Write.Single(CustomerId.put))}::uuid,
            ${fromWrite(unsaved.userId)(new Write.SingleOpt(UserId.put))}::uuid,
            ${fromWrite(unsaved.companyName)(new Write.SingleOpt(Meta.StringMeta.put))},
            ${fromWrite(unsaved.creditLimit)(new Write.SingleOpt(Meta.ScalaBigDecimalMeta.put))}::numeric,
            ${fromWrite(unsaved.verified)(new Write.SingleOpt(Meta.BooleanMeta.put))}
          )
          on conflict ("id")
          do update set
            "user_id" = EXCLUDED."user_id",
            "company_name" = EXCLUDED."company_name",
            "credit_limit" = EXCLUDED."credit_limit",
            "verified" = EXCLUDED."verified"
          returning "id", "user_id", "company_name", "credit_limit", "verified"
       """.query(using CustomerRow.read).unique
  }
  override def upsertBatch(unsaved: List[CustomerRow]): Stream[ConnectionIO, CustomerRow] = {
    Update[CustomerRow](
      s"""insert into "frontpage"."customer"("id", "user_id", "company_name", "credit_limit", "verified")
          values (?::uuid,?::uuid,?,?::numeric,?)
          on conflict ("id")
          do update set
            "user_id" = EXCLUDED."user_id",
            "company_name" = EXCLUDED."company_name",
            "credit_limit" = EXCLUDED."credit_limit",
            "verified" = EXCLUDED."verified"
          returning "id", "user_id", "company_name", "credit_limit", "verified""""
    )(using CustomerRow.write)
    .updateManyWithGeneratedKeys[CustomerRow]("id", "user_id", "company_name", "credit_limit", "verified")(unsaved)(using catsStdInstancesForList, CustomerRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, CustomerRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table customer_TEMP (like "frontpage"."customer") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy customer_TEMP("id", "user_id", "company_name", "credit_limit", "verified") from stdin""").copyIn(unsaved, batchSize)(using CustomerRow.text)
      res <- sql"""insert into "frontpage"."customer"("id", "user_id", "company_name", "credit_limit", "verified")
                   select * from customer_TEMP
                   on conflict ("id")
                   do update set
                     "user_id" = EXCLUDED."user_id",
                     "company_name" = EXCLUDED."company_name",
                     "credit_limit" = EXCLUDED."credit_limit",
                     "verified" = EXCLUDED."verified"
                   ;
                   drop table customer_TEMP;""".update.run
    } yield res
  }
}
