/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package permission

import adventureworks.customtypes.Defaulted
import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `frontpage.permission` which has not been persisted yet */
case class PermissionRowUnsaved(
  name: String,
  /** Default: gen_random_uuid() */
  id: Defaulted[PermissionId] = Defaulted.UseDefault
) {
  def toRow(idDefault: => PermissionId): PermissionRow =
    PermissionRow(
      name = name,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           }
    )
}
object PermissionRowUnsaved {
  implicit lazy val decoder: Decoder[PermissionRowUnsaved] = Decoder.forProduct2[PermissionRowUnsaved, String, Defaulted[PermissionId]]("name", "id")(PermissionRowUnsaved.apply)(Decoder.decodeString, Defaulted.decoder(PermissionId.decoder))
  implicit lazy val encoder: Encoder[PermissionRowUnsaved] = Encoder.forProduct2[PermissionRowUnsaved, String, Defaulted[PermissionId]]("name", "id")(x => (x.name, x.id))(Encoder.encodeString, Defaulted.encoder(PermissionId.encoder))
  implicit lazy val text: Text[PermissionRowUnsaved] = Text.instance[PermissionRowUnsaved]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(PermissionId.text).unsafeEncode(row.id, sb)
  }
}
