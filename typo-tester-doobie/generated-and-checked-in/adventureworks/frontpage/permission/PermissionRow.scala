/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package permission

import adventureworks.customtypes.Defaulted
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: frontpage.permission
    Primary key: id */
case class PermissionRow(
  /** Default: gen_random_uuid() */
  id: PermissionId,
  name: String
){
   def toUnsavedRow(id: Defaulted[PermissionId]): PermissionRowUnsaved =
     PermissionRowUnsaved(name, id)
 }

object PermissionRow {
  implicit lazy val decoder: Decoder[PermissionRow] = Decoder.forProduct2[PermissionRow, PermissionId, String]("id", "name")(PermissionRow.apply)(PermissionId.decoder, Decoder.decodeString)
  implicit lazy val encoder: Encoder[PermissionRow] = Encoder.forProduct2[PermissionRow, PermissionId, String]("id", "name")(x => (x.id, x.name))(PermissionId.encoder, Encoder.encodeString)
  implicit lazy val read: Read[PermissionRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(PermissionId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PermissionRow(
      id = arr(0).asInstanceOf[PermissionId],
          name = arr(1).asInstanceOf[String]
    )
  }
  implicit lazy val text: Text[PermissionRow] = Text.instance[PermissionRow]{ (row, sb) =>
    PermissionId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
  }
  implicit lazy val write: Write[PermissionRow] = new Write.Composite[PermissionRow](
    List(new Write.Single(PermissionId.put),
         new Write.Single(Meta.StringMeta.put)),
    a => List(a.id, a.name)
  )
}
