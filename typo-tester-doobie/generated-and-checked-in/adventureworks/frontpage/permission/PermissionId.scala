/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package frontpage
package permission

import adventureworks.customtypes.TypoUUID
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import typo.dsl.Bijection

/** Type for the primary key of table `frontpage.permission` */
case class PermissionId(value: TypoUUID) extends AnyVal
object PermissionId {
  implicit lazy val arrayGet: Get[Array[PermissionId]] = TypoUUID.arrayGet.map(_.map(PermissionId.apply))
  implicit lazy val arrayPut: Put[Array[PermissionId]] = TypoUUID.arrayPut.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[PermissionId, TypoUUID] = Bijection[PermissionId, TypoUUID](_.value)(PermissionId.apply)
  implicit lazy val decoder: Decoder[PermissionId] = TypoUUID.decoder.map(PermissionId.apply)
  implicit lazy val encoder: Encoder[PermissionId] = TypoUUID.encoder.contramap(_.value)
  implicit lazy val get: Get[PermissionId] = TypoUUID.get.map(PermissionId.apply)
  implicit def ordering(implicit O0: Ordering[TypoUUID]): Ordering[PermissionId] = Ordering.by(_.value)
  implicit lazy val put: Put[PermissionId] = TypoUUID.put.contramap(_.value)
  implicit lazy val text: Text[PermissionId] = new Text[PermissionId] {
    override def unsafeEncode(v: PermissionId, sb: StringBuilder) = TypoUUID.text.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: PermissionId, sb: StringBuilder) = TypoUUID.text.unsafeArrayEncode(v.value, sb)
  }
}
