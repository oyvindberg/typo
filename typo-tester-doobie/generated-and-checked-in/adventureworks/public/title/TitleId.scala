/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package title

import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Type for the primary key of table `public.title`. It has some known values: 
  *  - dr
  *  - mr
  *  - ms
  *  - phd
  */
sealed abstract class TitleId(val value: String)

object TitleId {
  def apply(underlying: String): TitleId =
    ByName.getOrElse(underlying, Unknown(underlying))
  case object dr extends TitleId("dr")
  case object mr extends TitleId("mr")
  case object ms extends TitleId("ms")
  case object phd extends TitleId("phd")
  case class Unknown(override val value: String) extends TitleId(value)
  val All: List[TitleId] = List(dr, mr, ms, phd)
  val ByName: Map[String, TitleId] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayGet: Get[Array[TitleId]] = adventureworks.StringArrayMeta.get.map(_.map(TitleId.apply))
  implicit lazy val arrayPut: Put[Array[TitleId]] = adventureworks.StringArrayMeta.put.contramap(_.map(_.value))
  implicit lazy val decoder: Decoder[TitleId] = Decoder.decodeString.map(TitleId.apply)
  implicit lazy val encoder: Encoder[TitleId] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[TitleId] = Meta.StringMeta.get.map(TitleId.apply)
  implicit lazy val ordering: Ordering[TitleId] = Ordering.by(_.value)
  implicit lazy val put: Put[TitleId] = Meta.StringMeta.put.contramap(_.value)
  implicit lazy val read: Read[TitleId] = Read.fromGet(get)
  implicit lazy val text: Text[TitleId] = new Text[TitleId] {
    override def unsafeEncode(v: TitleId, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: TitleId, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val write: Write[TitleId] = Write.fromPut(put)
}
