/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package only_pk_columns

import doobie.enumerated.Nullability
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

/** Table: public.only_pk_columns
    Composite primary key: key_column_1, key_column_2 */
case class OnlyPkColumnsRow(
  keyColumn1: String,
  keyColumn2: Int
){
   val compositeId: OnlyPkColumnsId = OnlyPkColumnsId(keyColumn1, keyColumn2)
   val id = compositeId
 }

object OnlyPkColumnsRow {
  def apply(compositeId: OnlyPkColumnsId) =
    new OnlyPkColumnsRow(compositeId.keyColumn1, compositeId.keyColumn2)
  implicit lazy val decoder: Decoder[OnlyPkColumnsRow] = Decoder.forProduct2[OnlyPkColumnsRow, String, Int]("key_column_1", "key_column_2")(OnlyPkColumnsRow.apply)(Decoder.decodeString, Decoder.decodeInt)
  implicit lazy val encoder: Encoder[OnlyPkColumnsRow] = Encoder.forProduct2[OnlyPkColumnsRow, String, Int]("key_column_1", "key_column_2")(x => (x.keyColumn1, x.keyColumn2))(Encoder.encodeString, Encoder.encodeInt)
  implicit lazy val read: Read[OnlyPkColumnsRow] = new Read[OnlyPkColumnsRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => OnlyPkColumnsRow(
      keyColumn1 = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 0),
      keyColumn2 = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 1)
    )
  )
  implicit lazy val text: Text[OnlyPkColumnsRow] = Text.instance[OnlyPkColumnsRow]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.keyColumn1, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.keyColumn2, sb)
  }
  implicit lazy val write: Write[OnlyPkColumnsRow] = new Write[OnlyPkColumnsRow](
    puts = List((Meta.StringMeta.put, Nullability.NoNulls),
                (Meta.IntMeta.put, Nullability.NoNulls)),
    toList = x => List(x.keyColumn1, x.keyColumn2),
    unsafeSet = (rs, i, a) => {
                  Meta.StringMeta.put.unsafeSetNonNullable(rs, i + 0, a.keyColumn1)
                  Meta.IntMeta.put.unsafeSetNonNullable(rs, i + 1, a.keyColumn2)
                },
    unsafeUpdate = (ps, i, a) => {
                     Meta.StringMeta.put.unsafeUpdateNonNullable(ps, i + 0, a.keyColumn1)
                     Meta.IntMeta.put.unsafeUpdateNonNullable(ps, i + 1, a.keyColumn2)
                   }
  )
}
