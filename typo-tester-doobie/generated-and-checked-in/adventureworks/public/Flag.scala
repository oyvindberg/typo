/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public

import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import typo.dsl.Bijection

/** Domain `public.Flag`
  * No constraint
  */
case class Flag(value: Boolean) extends AnyVal
object Flag {
  implicit lazy val arrayGet: Get[Array[Flag]] = adventureworks.BooleanArrayMeta.get.map(_.map(Flag.apply))
  implicit lazy val arrayPut: Put[Array[Flag]] = adventureworks.BooleanArrayMeta.put.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[Flag, Boolean] = Bijection[Flag, Boolean](_.value)(Flag.apply)
  implicit lazy val decoder: Decoder[Flag] = Decoder.decodeBoolean.map(Flag.apply)
  implicit lazy val encoder: Encoder[Flag] = Encoder.encodeBoolean.contramap(_.value)
  implicit lazy val get: Get[Flag] = Meta.BooleanMeta.get.map(Flag.apply)
  implicit lazy val ordering: Ordering[Flag] = Ordering.by(_.value)
  implicit lazy val put: Put[Flag] = Meta.BooleanMeta.put.contramap(_.value)
  implicit lazy val text: Text[Flag] = new Text[Flag] {
    override def unsafeEncode(v: Flag, sb: StringBuilder) = Text.booleanInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: Flag, sb: StringBuilder) = Text.booleanInstance.unsafeArrayEncode(v.value, sb)
  }
}