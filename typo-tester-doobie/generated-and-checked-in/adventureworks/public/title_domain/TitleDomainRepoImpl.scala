/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package title_domain

import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class TitleDomainRepoImpl extends TitleDomainRepo {
  override def delete: DeleteBuilder[TitleDomainFields, TitleDomainRow] = {
    DeleteBuilder(""""public"."title_domain"""", TitleDomainFields.structure)
  }
  override def deleteById(code: TitleDomainId): ConnectionIO[Boolean] = {
    sql"""delete from "public"."title_domain" where "code" = ${fromWrite(code)(Write.fromPut(TitleDomainId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(codes: Array[TitleDomainId]): ConnectionIO[Int] = {
    sql"""delete from "public"."title_domain" where "code" = ANY(${codes})""".update.run
  }
  override def insert(unsaved: TitleDomainRow): ConnectionIO[TitleDomainRow] = {
    sql"""insert into "public"."title_domain"("code")
          values (${fromWrite(unsaved.code)(Write.fromPut(TitleDomainId.put))}::text)
          returning "code"
       """.query(using TitleDomainRow.read).unique
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, TitleDomainRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "public"."title_domain"("code") FROM STDIN""").copyIn(unsaved, batchSize)(using TitleDomainRow.text)
  }
  override def select: SelectBuilder[TitleDomainFields, TitleDomainRow] = {
    SelectBuilderSql(""""public"."title_domain"""", TitleDomainFields.structure, TitleDomainRow.read)
  }
  override def selectAll: Stream[ConnectionIO, TitleDomainRow] = {
    sql"""select "code" from "public"."title_domain"""".query(using TitleDomainRow.read).stream
  }
  override def selectById(code: TitleDomainId): ConnectionIO[Option[TitleDomainRow]] = {
    sql"""select "code" from "public"."title_domain" where "code" = ${fromWrite(code)(Write.fromPut(TitleDomainId.put))}""".query(using TitleDomainRow.read).option
  }
  override def selectByIds(codes: Array[TitleDomainId]): Stream[ConnectionIO, TitleDomainRow] = {
    sql"""select "code" from "public"."title_domain" where "code" = ANY(${codes})""".query(using TitleDomainRow.read).stream
  }
  override def selectByIdsTracked(codes: Array[TitleDomainId]): ConnectionIO[Map[TitleDomainId, TitleDomainRow]] = {
    selectByIds(codes).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.code, x)).toMap
      codes.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[TitleDomainFields, TitleDomainRow] = {
    UpdateBuilder(""""public"."title_domain"""", TitleDomainFields.structure, TitleDomainRow.read)
  }
  override def upsert(unsaved: TitleDomainRow): ConnectionIO[TitleDomainRow] = {
    sql"""insert into "public"."title_domain"("code")
          values (
            ${fromWrite(unsaved.code)(Write.fromPut(TitleDomainId.put))}::text
          )
          on conflict ("code")
          do nothing
          returning "code"
       """.query(using TitleDomainRow.read).unique
  }
  override def upsertBatch(unsaved: List[TitleDomainRow]): Stream[ConnectionIO, TitleDomainRow] = {
    Update[TitleDomainRow](
      s"""insert into "public"."title_domain"("code")
          values (?::text)
          on conflict ("code")
          do nothing
          returning "code""""
    )(using TitleDomainRow.write)
    .updateManyWithGeneratedKeys[TitleDomainRow]("code")(unsaved)(using catsStdInstancesForList, TitleDomainRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, TitleDomainRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table title_domain_TEMP (like "public"."title_domain") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy title_domain_TEMP("code") from stdin""").copyIn(unsaved, batchSize)(using TitleDomainRow.text)
      res <- sql"""insert into "public"."title_domain"("code")
                   select * from title_domain_TEMP
                   on conflict ("code")
                   do nothing
                   ;
                   drop table title_domain_TEMP;""".update.run
    } yield res
  }
}
