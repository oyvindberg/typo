/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package title_domain

import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import io.circe.Decoder
import io.circe.Encoder

/** Table: public.title_domain
    Primary key: code */
case class TitleDomainRow(
  code: TitleDomainId
){
   val id = code
 }

object TitleDomainRow {
  implicit lazy val decoder: Decoder[TitleDomainRow] = Decoder.forProduct1[TitleDomainRow, TitleDomainId]("code")(TitleDomainRow.apply)(TitleDomainId.decoder)
  implicit lazy val encoder: Encoder[TitleDomainRow] = Encoder.forProduct1[TitleDomainRow, TitleDomainId]("code")(x => (x.code))(TitleDomainId.encoder)
  implicit lazy val read: Read[TitleDomainRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(TitleDomainId.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    TitleDomainRow(
      code = arr(0).asInstanceOf[TitleDomainId]
    )
  }
  implicit lazy val text: Text[TitleDomainRow] = Text.instance[TitleDomainRow]{ (row, sb) =>
    TitleDomainId.text.unsafeEncode(row.code, sb)
  }
  implicit lazy val write: Write[TitleDomainRow] = new Write.Composite[TitleDomainRow](
    List(new Write.Single(TitleDomainId.put)),
    a => List(a.code)
  )
}
