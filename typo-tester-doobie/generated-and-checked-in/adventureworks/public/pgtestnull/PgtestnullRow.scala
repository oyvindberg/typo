/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtestnull

import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXml
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import scala.util.Try

case class PgtestnullRow(
  box: Option[TypoBox],
  circle: Option[TypoCircle],
  line: Option[TypoLine],
  lseg: Option[TypoLineSegment],
  path: Option[TypoPath],
  point: Option[TypoPoint],
  polygon: Option[TypoPolygon],
  interval: Option[TypoInterval],
  money: Option[TypoMoney],
  xml: Option[TypoXml],
  json: Option[TypoJson],
  jsonb: Option[TypoJsonb],
  hstore: Option[TypoHStore],
  inet: Option[TypoInet],
  timestamp: Option[TypoLocalDateTime],
  timestampz: Option[TypoInstant],
  time: Option[TypoLocalTime],
  timez: Option[TypoOffsetTime],
  date: Option[TypoLocalDate],
  uuid: Option[TypoUUID],
  numeric: Option[BigDecimal],
  vector: Option[TypoVector],
  boxes: Option[Array[TypoBox]],
  circlees: Option[Array[TypoCircle]],
  linees: Option[Array[TypoLine]],
  lseges: Option[Array[TypoLineSegment]],
  pathes: Option[Array[TypoPath]],
  pointes: Option[Array[TypoPoint]],
  polygones: Option[Array[TypoPolygon]],
  intervales: Option[Array[TypoInterval]],
  moneyes: Option[Array[TypoMoney]],
  xmles: Option[Array[TypoXml]],
  jsones: Option[Array[TypoJson]],
  jsonbes: Option[Array[TypoJsonb]],
  inets: Option[Array[TypoInet]],
  timestamps: Option[Array[TypoLocalDateTime]],
  timestampzs: Option[Array[TypoInstant]],
  times: Option[Array[TypoLocalTime]],
  timezs: Option[Array[TypoOffsetTime]],
  dates: Option[Array[TypoLocalDate]],
  uuids: Option[Array[TypoUUID]],
  numerics: Option[Array[BigDecimal]]
)

object PgtestnullRow {
  implicit lazy val decoder: Decoder[PgtestnullRow] = Decoder.instanceTry[PgtestnullRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      PgtestnullRow(
        box = orThrow(c.get("box")(Decoder.decodeOption(TypoBox.decoder))),
        circle = orThrow(c.get("circle")(Decoder.decodeOption(TypoCircle.decoder))),
        line = orThrow(c.get("line")(Decoder.decodeOption(TypoLine.decoder))),
        lseg = orThrow(c.get("lseg")(Decoder.decodeOption(TypoLineSegment.decoder))),
        path = orThrow(c.get("path")(Decoder.decodeOption(TypoPath.decoder))),
        point = orThrow(c.get("point")(Decoder.decodeOption(TypoPoint.decoder))),
        polygon = orThrow(c.get("polygon")(Decoder.decodeOption(TypoPolygon.decoder))),
        interval = orThrow(c.get("interval")(Decoder.decodeOption(TypoInterval.decoder))),
        money = orThrow(c.get("money")(Decoder.decodeOption(TypoMoney.decoder))),
        xml = orThrow(c.get("xml")(Decoder.decodeOption(TypoXml.decoder))),
        json = orThrow(c.get("json")(Decoder.decodeOption(TypoJson.decoder))),
        jsonb = orThrow(c.get("jsonb")(Decoder.decodeOption(TypoJsonb.decoder))),
        hstore = orThrow(c.get("hstore")(Decoder.decodeOption(TypoHStore.decoder))),
        inet = orThrow(c.get("inet")(Decoder.decodeOption(TypoInet.decoder))),
        timestamp = orThrow(c.get("timestamp")(Decoder.decodeOption(TypoLocalDateTime.decoder))),
        timestampz = orThrow(c.get("timestampz")(Decoder.decodeOption(TypoInstant.decoder))),
        time = orThrow(c.get("time")(Decoder.decodeOption(TypoLocalTime.decoder))),
        timez = orThrow(c.get("timez")(Decoder.decodeOption(TypoOffsetTime.decoder))),
        date = orThrow(c.get("date")(Decoder.decodeOption(TypoLocalDate.decoder))),
        uuid = orThrow(c.get("uuid")(Decoder.decodeOption(TypoUUID.decoder))),
        numeric = orThrow(c.get("numeric")(Decoder.decodeOption(Decoder.decodeBigDecimal))),
        vector = orThrow(c.get("vector")(Decoder.decodeOption(TypoVector.decoder))),
        boxes = orThrow(c.get("boxes")(Decoder.decodeOption(Decoder.decodeArray[TypoBox](TypoBox.decoder, implicitly)))),
        circlees = orThrow(c.get("circlees")(Decoder.decodeOption(Decoder.decodeArray[TypoCircle](TypoCircle.decoder, implicitly)))),
        linees = orThrow(c.get("linees")(Decoder.decodeOption(Decoder.decodeArray[TypoLine](TypoLine.decoder, implicitly)))),
        lseges = orThrow(c.get("lseges")(Decoder.decodeOption(Decoder.decodeArray[TypoLineSegment](TypoLineSegment.decoder, implicitly)))),
        pathes = orThrow(c.get("pathes")(Decoder.decodeOption(Decoder.decodeArray[TypoPath](TypoPath.decoder, implicitly)))),
        pointes = orThrow(c.get("pointes")(Decoder.decodeOption(Decoder.decodeArray[TypoPoint](TypoPoint.decoder, implicitly)))),
        polygones = orThrow(c.get("polygones")(Decoder.decodeOption(Decoder.decodeArray[TypoPolygon](TypoPolygon.decoder, implicitly)))),
        intervales = orThrow(c.get("intervales")(Decoder.decodeOption(Decoder.decodeArray[TypoInterval](TypoInterval.decoder, implicitly)))),
        moneyes = orThrow(c.get("moneyes")(Decoder.decodeOption(Decoder.decodeArray[TypoMoney](TypoMoney.decoder, implicitly)))),
        xmles = orThrow(c.get("xmles")(Decoder.decodeOption(Decoder.decodeArray[TypoXml](TypoXml.decoder, implicitly)))),
        jsones = orThrow(c.get("jsones")(Decoder.decodeOption(Decoder.decodeArray[TypoJson](TypoJson.decoder, implicitly)))),
        jsonbes = orThrow(c.get("jsonbes")(Decoder.decodeOption(Decoder.decodeArray[TypoJsonb](TypoJsonb.decoder, implicitly)))),
        inets = orThrow(c.get("inets")(Decoder.decodeOption(Decoder.decodeArray[TypoInet](TypoInet.decoder, implicitly)))),
        timestamps = orThrow(c.get("timestamps")(Decoder.decodeOption(Decoder.decodeArray[TypoLocalDateTime](TypoLocalDateTime.decoder, implicitly)))),
        timestampzs = orThrow(c.get("timestampzs")(Decoder.decodeOption(Decoder.decodeArray[TypoInstant](TypoInstant.decoder, implicitly)))),
        times = orThrow(c.get("times")(Decoder.decodeOption(Decoder.decodeArray[TypoLocalTime](TypoLocalTime.decoder, implicitly)))),
        timezs = orThrow(c.get("timezs")(Decoder.decodeOption(Decoder.decodeArray[TypoOffsetTime](TypoOffsetTime.decoder, implicitly)))),
        dates = orThrow(c.get("dates")(Decoder.decodeOption(Decoder.decodeArray[TypoLocalDate](TypoLocalDate.decoder, implicitly)))),
        uuids = orThrow(c.get("uuids")(Decoder.decodeOption(Decoder.decodeArray[TypoUUID](TypoUUID.decoder, implicitly)))),
        numerics = orThrow(c.get("numerics")(Decoder.decodeOption(Decoder.decodeArray[BigDecimal](Decoder.decodeBigDecimal, implicitly))))
      )
    }
  )
  implicit lazy val encoder: Encoder[PgtestnullRow] = Encoder[PgtestnullRow](row =>
    Json.obj(
      "box" -> Encoder.encodeOption(TypoBox.encoder).apply(row.box),
      "circle" -> Encoder.encodeOption(TypoCircle.encoder).apply(row.circle),
      "line" -> Encoder.encodeOption(TypoLine.encoder).apply(row.line),
      "lseg" -> Encoder.encodeOption(TypoLineSegment.encoder).apply(row.lseg),
      "path" -> Encoder.encodeOption(TypoPath.encoder).apply(row.path),
      "point" -> Encoder.encodeOption(TypoPoint.encoder).apply(row.point),
      "polygon" -> Encoder.encodeOption(TypoPolygon.encoder).apply(row.polygon),
      "interval" -> Encoder.encodeOption(TypoInterval.encoder).apply(row.interval),
      "money" -> Encoder.encodeOption(TypoMoney.encoder).apply(row.money),
      "xml" -> Encoder.encodeOption(TypoXml.encoder).apply(row.xml),
      "json" -> Encoder.encodeOption(TypoJson.encoder).apply(row.json),
      "jsonb" -> Encoder.encodeOption(TypoJsonb.encoder).apply(row.jsonb),
      "hstore" -> Encoder.encodeOption(TypoHStore.encoder).apply(row.hstore),
      "inet" -> Encoder.encodeOption(TypoInet.encoder).apply(row.inet),
      "timestamp" -> Encoder.encodeOption(TypoLocalDateTime.encoder).apply(row.timestamp),
      "timestampz" -> Encoder.encodeOption(TypoInstant.encoder).apply(row.timestampz),
      "time" -> Encoder.encodeOption(TypoLocalTime.encoder).apply(row.time),
      "timez" -> Encoder.encodeOption(TypoOffsetTime.encoder).apply(row.timez),
      "date" -> Encoder.encodeOption(TypoLocalDate.encoder).apply(row.date),
      "uuid" -> Encoder.encodeOption(TypoUUID.encoder).apply(row.uuid),
      "numeric" -> Encoder.encodeOption(Encoder.encodeBigDecimal).apply(row.numeric),
      "vector" -> Encoder.encodeOption(TypoVector.encoder).apply(row.vector),
      "boxes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoBox, Array](TypoBox.encoder, implicitly)).apply(row.boxes),
      "circlees" -> Encoder.encodeOption(Encoder.encodeIterable[TypoCircle, Array](TypoCircle.encoder, implicitly)).apply(row.circlees),
      "linees" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLine, Array](TypoLine.encoder, implicitly)).apply(row.linees),
      "lseges" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLineSegment, Array](TypoLineSegment.encoder, implicitly)).apply(row.lseges),
      "pathes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoPath, Array](TypoPath.encoder, implicitly)).apply(row.pathes),
      "pointes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoPoint, Array](TypoPoint.encoder, implicitly)).apply(row.pointes),
      "polygones" -> Encoder.encodeOption(Encoder.encodeIterable[TypoPolygon, Array](TypoPolygon.encoder, implicitly)).apply(row.polygones),
      "intervales" -> Encoder.encodeOption(Encoder.encodeIterable[TypoInterval, Array](TypoInterval.encoder, implicitly)).apply(row.intervales),
      "moneyes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoMoney, Array](TypoMoney.encoder, implicitly)).apply(row.moneyes),
      "xmles" -> Encoder.encodeOption(Encoder.encodeIterable[TypoXml, Array](TypoXml.encoder, implicitly)).apply(row.xmles),
      "jsones" -> Encoder.encodeOption(Encoder.encodeIterable[TypoJson, Array](TypoJson.encoder, implicitly)).apply(row.jsones),
      "jsonbes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoJsonb, Array](TypoJsonb.encoder, implicitly)).apply(row.jsonbes),
      "inets" -> Encoder.encodeOption(Encoder.encodeIterable[TypoInet, Array](TypoInet.encoder, implicitly)).apply(row.inets),
      "timestamps" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLocalDateTime, Array](TypoLocalDateTime.encoder, implicitly)).apply(row.timestamps),
      "timestampzs" -> Encoder.encodeOption(Encoder.encodeIterable[TypoInstant, Array](TypoInstant.encoder, implicitly)).apply(row.timestampzs),
      "times" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLocalTime, Array](TypoLocalTime.encoder, implicitly)).apply(row.times),
      "timezs" -> Encoder.encodeOption(Encoder.encodeIterable[TypoOffsetTime, Array](TypoOffsetTime.encoder, implicitly)).apply(row.timezs),
      "dates" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLocalDate, Array](TypoLocalDate.encoder, implicitly)).apply(row.dates),
      "uuids" -> Encoder.encodeOption(Encoder.encodeIterable[TypoUUID, Array](TypoUUID.encoder, implicitly)).apply(row.uuids),
      "numerics" -> Encoder.encodeOption(Encoder.encodeIterable[BigDecimal, Array](Encoder.encodeBigDecimal, implicitly)).apply(row.numerics)
    )
  )
  implicit lazy val read: Read[PgtestnullRow] = new Read[PgtestnullRow](
    gets = List(
      (TypoBox.get, Nullability.Nullable),
      (TypoCircle.get, Nullability.Nullable),
      (TypoLine.get, Nullability.Nullable),
      (TypoLineSegment.get, Nullability.Nullable),
      (TypoPath.get, Nullability.Nullable),
      (TypoPoint.get, Nullability.Nullable),
      (TypoPolygon.get, Nullability.Nullable),
      (TypoInterval.get, Nullability.Nullable),
      (TypoMoney.get, Nullability.Nullable),
      (TypoXml.get, Nullability.Nullable),
      (TypoJson.get, Nullability.Nullable),
      (TypoJsonb.get, Nullability.Nullable),
      (TypoHStore.get, Nullability.Nullable),
      (TypoInet.get, Nullability.Nullable),
      (TypoLocalDateTime.get, Nullability.Nullable),
      (TypoInstant.get, Nullability.Nullable),
      (TypoLocalTime.get, Nullability.Nullable),
      (TypoOffsetTime.get, Nullability.Nullable),
      (TypoLocalDate.get, Nullability.Nullable),
      (TypoUUID.get, Nullability.Nullable),
      (Meta.ScalaBigDecimalMeta.get, Nullability.Nullable),
      (TypoVector.get, Nullability.Nullable),
      (TypoBox.arrayGet, Nullability.Nullable),
      (TypoCircle.arrayGet, Nullability.Nullable),
      (TypoLine.arrayGet, Nullability.Nullable),
      (TypoLineSegment.arrayGet, Nullability.Nullable),
      (TypoPath.arrayGet, Nullability.Nullable),
      (TypoPoint.arrayGet, Nullability.Nullable),
      (TypoPolygon.arrayGet, Nullability.Nullable),
      (TypoInterval.arrayGet, Nullability.Nullable),
      (TypoMoney.arrayGet, Nullability.Nullable),
      (TypoXml.arrayGet, Nullability.Nullable),
      (TypoJson.arrayGet, Nullability.Nullable),
      (TypoJsonb.arrayGet, Nullability.Nullable),
      (TypoInet.arrayGet, Nullability.Nullable),
      (TypoLocalDateTime.arrayGet, Nullability.Nullable),
      (TypoInstant.arrayGet, Nullability.Nullable),
      (TypoLocalTime.arrayGet, Nullability.Nullable),
      (TypoOffsetTime.arrayGet, Nullability.Nullable),
      (TypoLocalDate.arrayGet, Nullability.Nullable),
      (TypoUUID.arrayGet, Nullability.Nullable),
      (adventureworks.BigDecimalMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgtestnullRow(
      box = TypoBox.get.unsafeGetNullable(rs, i + 0),
      circle = TypoCircle.get.unsafeGetNullable(rs, i + 1),
      line = TypoLine.get.unsafeGetNullable(rs, i + 2),
      lseg = TypoLineSegment.get.unsafeGetNullable(rs, i + 3),
      path = TypoPath.get.unsafeGetNullable(rs, i + 4),
      point = TypoPoint.get.unsafeGetNullable(rs, i + 5),
      polygon = TypoPolygon.get.unsafeGetNullable(rs, i + 6),
      interval = TypoInterval.get.unsafeGetNullable(rs, i + 7),
      money = TypoMoney.get.unsafeGetNullable(rs, i + 8),
      xml = TypoXml.get.unsafeGetNullable(rs, i + 9),
      json = TypoJson.get.unsafeGetNullable(rs, i + 10),
      jsonb = TypoJsonb.get.unsafeGetNullable(rs, i + 11),
      hstore = TypoHStore.get.unsafeGetNullable(rs, i + 12),
      inet = TypoInet.get.unsafeGetNullable(rs, i + 13),
      timestamp = TypoLocalDateTime.get.unsafeGetNullable(rs, i + 14),
      timestampz = TypoInstant.get.unsafeGetNullable(rs, i + 15),
      time = TypoLocalTime.get.unsafeGetNullable(rs, i + 16),
      timez = TypoOffsetTime.get.unsafeGetNullable(rs, i + 17),
      date = TypoLocalDate.get.unsafeGetNullable(rs, i + 18),
      uuid = TypoUUID.get.unsafeGetNullable(rs, i + 19),
      numeric = Meta.ScalaBigDecimalMeta.get.unsafeGetNullable(rs, i + 20),
      vector = TypoVector.get.unsafeGetNullable(rs, i + 21),
      boxes = TypoBox.arrayGet.unsafeGetNullable(rs, i + 22),
      circlees = TypoCircle.arrayGet.unsafeGetNullable(rs, i + 23),
      linees = TypoLine.arrayGet.unsafeGetNullable(rs, i + 24),
      lseges = TypoLineSegment.arrayGet.unsafeGetNullable(rs, i + 25),
      pathes = TypoPath.arrayGet.unsafeGetNullable(rs, i + 26),
      pointes = TypoPoint.arrayGet.unsafeGetNullable(rs, i + 27),
      polygones = TypoPolygon.arrayGet.unsafeGetNullable(rs, i + 28),
      intervales = TypoInterval.arrayGet.unsafeGetNullable(rs, i + 29),
      moneyes = TypoMoney.arrayGet.unsafeGetNullable(rs, i + 30),
      xmles = TypoXml.arrayGet.unsafeGetNullable(rs, i + 31),
      jsones = TypoJson.arrayGet.unsafeGetNullable(rs, i + 32),
      jsonbes = TypoJsonb.arrayGet.unsafeGetNullable(rs, i + 33),
      inets = TypoInet.arrayGet.unsafeGetNullable(rs, i + 34),
      timestamps = TypoLocalDateTime.arrayGet.unsafeGetNullable(rs, i + 35),
      timestampzs = TypoInstant.arrayGet.unsafeGetNullable(rs, i + 36),
      times = TypoLocalTime.arrayGet.unsafeGetNullable(rs, i + 37),
      timezs = TypoOffsetTime.arrayGet.unsafeGetNullable(rs, i + 38),
      dates = TypoLocalDate.arrayGet.unsafeGetNullable(rs, i + 39),
      uuids = TypoUUID.arrayGet.unsafeGetNullable(rs, i + 40),
      numerics = adventureworks.BigDecimalMeta.get.unsafeGetNullable(rs, i + 41)
    )
  )
}
