/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtestnull

import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXml
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import scala.util.Try

/** Table: public.pgtestnull */
case class PgtestnullRow(
  bool: Option[Boolean],
  box: Option[TypoBox],
  bpchar: Option[/* bpchar, max 3 chars */ String],
  bytea: Option[TypoBytea],
  char: Option[/* bpchar, max 1 chars */ String],
  circle: Option[TypoCircle],
  date: Option[TypoLocalDate],
  float4: Option[Float],
  float8: Option[Double],
  hstore: Option[TypoHStore],
  inet: Option[TypoInet],
  int2: Option[TypoShort],
  int2vector: Option[TypoInt2Vector],
  int4: Option[Int],
  int8: Option[Long],
  interval: Option[TypoInterval],
  json: Option[TypoJson],
  jsonb: Option[TypoJsonb],
  line: Option[TypoLine],
  lseg: Option[TypoLineSegment],
  money: Option[TypoMoney],
  mydomain: Option[Mydomain],
  myenum: Option[Myenum],
  name: Option[String],
  numeric: Option[BigDecimal],
  path: Option[TypoPath],
  point: Option[TypoPoint],
  polygon: Option[TypoPolygon],
  text: Option[String],
  time: Option[TypoLocalTime],
  timestamp: Option[TypoLocalDateTime],
  timestampz: Option[TypoInstant],
  timez: Option[TypoOffsetTime],
  uuid: Option[TypoUUID],
  varchar: Option[String],
  vector: Option[TypoVector],
  xml: Option[TypoXml],
  boxes: Option[Array[TypoBox]],
  bpchares: Option[Array[/* bpchar */ String]],
  chares: Option[Array[/* bpchar */ String]],
  circlees: Option[Array[TypoCircle]],
  datees: Option[Array[TypoLocalDate]],
  float4es: Option[Array[Float]],
  float8es: Option[Array[Double]],
  inetes: Option[Array[TypoInet]],
  int2es: Option[Array[TypoShort]],
  int2vectores: Option[Array[TypoInt2Vector]],
  int4es: Option[Array[Int]],
  int8es: Option[Array[Long]],
  intervales: Option[Array[TypoInterval]],
  jsones: Option[Array[TypoJson]],
  jsonbes: Option[Array[TypoJsonb]],
  linees: Option[Array[TypoLine]],
  lseges: Option[Array[TypoLineSegment]],
  moneyes: Option[Array[TypoMoney]],
  mydomaines: Option[Array[Mydomain]],
  myenumes: Option[Array[Myenum]],
  namees: Option[Array[String]],
  numerices: Option[Array[BigDecimal]],
  pathes: Option[Array[TypoPath]],
  pointes: Option[Array[TypoPoint]],
  polygones: Option[Array[TypoPolygon]],
  textes: Option[Array[String]],
  timees: Option[Array[TypoLocalTime]],
  timestampes: Option[Array[TypoLocalDateTime]],
  timestampzes: Option[Array[TypoInstant]],
  timezes: Option[Array[TypoOffsetTime]],
  uuides: Option[Array[TypoUUID]],
  varchares: Option[Array[String]],
  xmles: Option[Array[TypoXml]]
)

object PgtestnullRow {
  implicit lazy val decoder: Decoder[PgtestnullRow] = Decoder.instanceTry[PgtestnullRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      PgtestnullRow(
        bool = orThrow(c.get("bool")(Decoder.decodeOption(Decoder.decodeBoolean))),
        box = orThrow(c.get("box")(Decoder.decodeOption(TypoBox.decoder))),
        bpchar = orThrow(c.get("bpchar")(Decoder.decodeOption(Decoder.decodeString))),
        bytea = orThrow(c.get("bytea")(Decoder.decodeOption(TypoBytea.decoder))),
        char = orThrow(c.get("char")(Decoder.decodeOption(Decoder.decodeString))),
        circle = orThrow(c.get("circle")(Decoder.decodeOption(TypoCircle.decoder))),
        date = orThrow(c.get("date")(Decoder.decodeOption(TypoLocalDate.decoder))),
        float4 = orThrow(c.get("float4")(Decoder.decodeOption(Decoder.decodeFloat))),
        float8 = orThrow(c.get("float8")(Decoder.decodeOption(Decoder.decodeDouble))),
        hstore = orThrow(c.get("hstore")(Decoder.decodeOption(TypoHStore.decoder))),
        inet = orThrow(c.get("inet")(Decoder.decodeOption(TypoInet.decoder))),
        int2 = orThrow(c.get("int2")(Decoder.decodeOption(TypoShort.decoder))),
        int2vector = orThrow(c.get("int2vector")(Decoder.decodeOption(TypoInt2Vector.decoder))),
        int4 = orThrow(c.get("int4")(Decoder.decodeOption(Decoder.decodeInt))),
        int8 = orThrow(c.get("int8")(Decoder.decodeOption(Decoder.decodeLong))),
        interval = orThrow(c.get("interval")(Decoder.decodeOption(TypoInterval.decoder))),
        json = orThrow(c.get("json")(Decoder.decodeOption(TypoJson.decoder))),
        jsonb = orThrow(c.get("jsonb")(Decoder.decodeOption(TypoJsonb.decoder))),
        line = orThrow(c.get("line")(Decoder.decodeOption(TypoLine.decoder))),
        lseg = orThrow(c.get("lseg")(Decoder.decodeOption(TypoLineSegment.decoder))),
        money = orThrow(c.get("money")(Decoder.decodeOption(TypoMoney.decoder))),
        mydomain = orThrow(c.get("mydomain")(Decoder.decodeOption(Mydomain.decoder))),
        myenum = orThrow(c.get("myenum")(Decoder.decodeOption(Myenum.decoder))),
        name = orThrow(c.get("name")(Decoder.decodeOption(Decoder.decodeString))),
        numeric = orThrow(c.get("numeric")(Decoder.decodeOption(Decoder.decodeBigDecimal))),
        path = orThrow(c.get("path")(Decoder.decodeOption(TypoPath.decoder))),
        point = orThrow(c.get("point")(Decoder.decodeOption(TypoPoint.decoder))),
        polygon = orThrow(c.get("polygon")(Decoder.decodeOption(TypoPolygon.decoder))),
        text = orThrow(c.get("text")(Decoder.decodeOption(Decoder.decodeString))),
        time = orThrow(c.get("time")(Decoder.decodeOption(TypoLocalTime.decoder))),
        timestamp = orThrow(c.get("timestamp")(Decoder.decodeOption(TypoLocalDateTime.decoder))),
        timestampz = orThrow(c.get("timestampz")(Decoder.decodeOption(TypoInstant.decoder))),
        timez = orThrow(c.get("timez")(Decoder.decodeOption(TypoOffsetTime.decoder))),
        uuid = orThrow(c.get("uuid")(Decoder.decodeOption(TypoUUID.decoder))),
        varchar = orThrow(c.get("varchar")(Decoder.decodeOption(Decoder.decodeString))),
        vector = orThrow(c.get("vector")(Decoder.decodeOption(TypoVector.decoder))),
        xml = orThrow(c.get("xml")(Decoder.decodeOption(TypoXml.decoder))),
        boxes = orThrow(c.get("boxes")(Decoder.decodeOption(Decoder.decodeArray[TypoBox](TypoBox.decoder, implicitly)))),
        bpchares = orThrow(c.get("bpchares")(Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)))),
        chares = orThrow(c.get("chares")(Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)))),
        circlees = orThrow(c.get("circlees")(Decoder.decodeOption(Decoder.decodeArray[TypoCircle](TypoCircle.decoder, implicitly)))),
        datees = orThrow(c.get("datees")(Decoder.decodeOption(Decoder.decodeArray[TypoLocalDate](TypoLocalDate.decoder, implicitly)))),
        float4es = orThrow(c.get("float4es")(Decoder.decodeOption(Decoder.decodeArray[Float](Decoder.decodeFloat, implicitly)))),
        float8es = orThrow(c.get("float8es")(Decoder.decodeOption(Decoder.decodeArray[Double](Decoder.decodeDouble, implicitly)))),
        inetes = orThrow(c.get("inetes")(Decoder.decodeOption(Decoder.decodeArray[TypoInet](TypoInet.decoder, implicitly)))),
        int2es = orThrow(c.get("int2es")(Decoder.decodeOption(Decoder.decodeArray[TypoShort](TypoShort.decoder, implicitly)))),
        int2vectores = orThrow(c.get("int2vectores")(Decoder.decodeOption(Decoder.decodeArray[TypoInt2Vector](TypoInt2Vector.decoder, implicitly)))),
        int4es = orThrow(c.get("int4es")(Decoder.decodeOption(Decoder.decodeArray[Int](Decoder.decodeInt, implicitly)))),
        int8es = orThrow(c.get("int8es")(Decoder.decodeOption(Decoder.decodeArray[Long](Decoder.decodeLong, implicitly)))),
        intervales = orThrow(c.get("intervales")(Decoder.decodeOption(Decoder.decodeArray[TypoInterval](TypoInterval.decoder, implicitly)))),
        jsones = orThrow(c.get("jsones")(Decoder.decodeOption(Decoder.decodeArray[TypoJson](TypoJson.decoder, implicitly)))),
        jsonbes = orThrow(c.get("jsonbes")(Decoder.decodeOption(Decoder.decodeArray[TypoJsonb](TypoJsonb.decoder, implicitly)))),
        linees = orThrow(c.get("linees")(Decoder.decodeOption(Decoder.decodeArray[TypoLine](TypoLine.decoder, implicitly)))),
        lseges = orThrow(c.get("lseges")(Decoder.decodeOption(Decoder.decodeArray[TypoLineSegment](TypoLineSegment.decoder, implicitly)))),
        moneyes = orThrow(c.get("moneyes")(Decoder.decodeOption(Decoder.decodeArray[TypoMoney](TypoMoney.decoder, implicitly)))),
        mydomaines = orThrow(c.get("mydomaines")(Decoder.decodeOption(Decoder.decodeArray[Mydomain](Mydomain.decoder, implicitly)))),
        myenumes = orThrow(c.get("myenumes")(Decoder.decodeOption(Decoder.decodeArray[Myenum](Myenum.decoder, implicitly)))),
        namees = orThrow(c.get("namees")(Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)))),
        numerices = orThrow(c.get("numerices")(Decoder.decodeOption(Decoder.decodeArray[BigDecimal](Decoder.decodeBigDecimal, implicitly)))),
        pathes = orThrow(c.get("pathes")(Decoder.decodeOption(Decoder.decodeArray[TypoPath](TypoPath.decoder, implicitly)))),
        pointes = orThrow(c.get("pointes")(Decoder.decodeOption(Decoder.decodeArray[TypoPoint](TypoPoint.decoder, implicitly)))),
        polygones = orThrow(c.get("polygones")(Decoder.decodeOption(Decoder.decodeArray[TypoPolygon](TypoPolygon.decoder, implicitly)))),
        textes = orThrow(c.get("textes")(Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)))),
        timees = orThrow(c.get("timees")(Decoder.decodeOption(Decoder.decodeArray[TypoLocalTime](TypoLocalTime.decoder, implicitly)))),
        timestampes = orThrow(c.get("timestampes")(Decoder.decodeOption(Decoder.decodeArray[TypoLocalDateTime](TypoLocalDateTime.decoder, implicitly)))),
        timestampzes = orThrow(c.get("timestampzes")(Decoder.decodeOption(Decoder.decodeArray[TypoInstant](TypoInstant.decoder, implicitly)))),
        timezes = orThrow(c.get("timezes")(Decoder.decodeOption(Decoder.decodeArray[TypoOffsetTime](TypoOffsetTime.decoder, implicitly)))),
        uuides = orThrow(c.get("uuides")(Decoder.decodeOption(Decoder.decodeArray[TypoUUID](TypoUUID.decoder, implicitly)))),
        varchares = orThrow(c.get("varchares")(Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)))),
        xmles = orThrow(c.get("xmles")(Decoder.decodeOption(Decoder.decodeArray[TypoXml](TypoXml.decoder, implicitly))))
      )
    }
  )
  implicit lazy val encoder: Encoder[PgtestnullRow] = Encoder[PgtestnullRow](row =>
    Json.obj(
      "bool" -> Encoder.encodeOption(Encoder.encodeBoolean).apply(row.bool),
      "box" -> Encoder.encodeOption(TypoBox.encoder).apply(row.box),
      "bpchar" -> Encoder.encodeOption(Encoder.encodeString).apply(row.bpchar),
      "bytea" -> Encoder.encodeOption(TypoBytea.encoder).apply(row.bytea),
      "char" -> Encoder.encodeOption(Encoder.encodeString).apply(row.char),
      "circle" -> Encoder.encodeOption(TypoCircle.encoder).apply(row.circle),
      "date" -> Encoder.encodeOption(TypoLocalDate.encoder).apply(row.date),
      "float4" -> Encoder.encodeOption(Encoder.encodeFloat).apply(row.float4),
      "float8" -> Encoder.encodeOption(Encoder.encodeDouble).apply(row.float8),
      "hstore" -> Encoder.encodeOption(TypoHStore.encoder).apply(row.hstore),
      "inet" -> Encoder.encodeOption(TypoInet.encoder).apply(row.inet),
      "int2" -> Encoder.encodeOption(TypoShort.encoder).apply(row.int2),
      "int2vector" -> Encoder.encodeOption(TypoInt2Vector.encoder).apply(row.int2vector),
      "int4" -> Encoder.encodeOption(Encoder.encodeInt).apply(row.int4),
      "int8" -> Encoder.encodeOption(Encoder.encodeLong).apply(row.int8),
      "interval" -> Encoder.encodeOption(TypoInterval.encoder).apply(row.interval),
      "json" -> Encoder.encodeOption(TypoJson.encoder).apply(row.json),
      "jsonb" -> Encoder.encodeOption(TypoJsonb.encoder).apply(row.jsonb),
      "line" -> Encoder.encodeOption(TypoLine.encoder).apply(row.line),
      "lseg" -> Encoder.encodeOption(TypoLineSegment.encoder).apply(row.lseg),
      "money" -> Encoder.encodeOption(TypoMoney.encoder).apply(row.money),
      "mydomain" -> Encoder.encodeOption(Mydomain.encoder).apply(row.mydomain),
      "myenum" -> Encoder.encodeOption(Myenum.encoder).apply(row.myenum),
      "name" -> Encoder.encodeOption(Encoder.encodeString).apply(row.name),
      "numeric" -> Encoder.encodeOption(Encoder.encodeBigDecimal).apply(row.numeric),
      "path" -> Encoder.encodeOption(TypoPath.encoder).apply(row.path),
      "point" -> Encoder.encodeOption(TypoPoint.encoder).apply(row.point),
      "polygon" -> Encoder.encodeOption(TypoPolygon.encoder).apply(row.polygon),
      "text" -> Encoder.encodeOption(Encoder.encodeString).apply(row.text),
      "time" -> Encoder.encodeOption(TypoLocalTime.encoder).apply(row.time),
      "timestamp" -> Encoder.encodeOption(TypoLocalDateTime.encoder).apply(row.timestamp),
      "timestampz" -> Encoder.encodeOption(TypoInstant.encoder).apply(row.timestampz),
      "timez" -> Encoder.encodeOption(TypoOffsetTime.encoder).apply(row.timez),
      "uuid" -> Encoder.encodeOption(TypoUUID.encoder).apply(row.uuid),
      "varchar" -> Encoder.encodeOption(Encoder.encodeString).apply(row.varchar),
      "vector" -> Encoder.encodeOption(TypoVector.encoder).apply(row.vector),
      "xml" -> Encoder.encodeOption(TypoXml.encoder).apply(row.xml),
      "boxes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoBox, Array](TypoBox.encoder, implicitly)).apply(row.boxes),
      "bpchares" -> Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)).apply(row.bpchares),
      "chares" -> Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)).apply(row.chares),
      "circlees" -> Encoder.encodeOption(Encoder.encodeIterable[TypoCircle, Array](TypoCircle.encoder, implicitly)).apply(row.circlees),
      "datees" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLocalDate, Array](TypoLocalDate.encoder, implicitly)).apply(row.datees),
      "float4es" -> Encoder.encodeOption(Encoder.encodeIterable[Float, Array](Encoder.encodeFloat, implicitly)).apply(row.float4es),
      "float8es" -> Encoder.encodeOption(Encoder.encodeIterable[Double, Array](Encoder.encodeDouble, implicitly)).apply(row.float8es),
      "inetes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoInet, Array](TypoInet.encoder, implicitly)).apply(row.inetes),
      "int2es" -> Encoder.encodeOption(Encoder.encodeIterable[TypoShort, Array](TypoShort.encoder, implicitly)).apply(row.int2es),
      "int2vectores" -> Encoder.encodeOption(Encoder.encodeIterable[TypoInt2Vector, Array](TypoInt2Vector.encoder, implicitly)).apply(row.int2vectores),
      "int4es" -> Encoder.encodeOption(Encoder.encodeIterable[Int, Array](Encoder.encodeInt, implicitly)).apply(row.int4es),
      "int8es" -> Encoder.encodeOption(Encoder.encodeIterable[Long, Array](Encoder.encodeLong, implicitly)).apply(row.int8es),
      "intervales" -> Encoder.encodeOption(Encoder.encodeIterable[TypoInterval, Array](TypoInterval.encoder, implicitly)).apply(row.intervales),
      "jsones" -> Encoder.encodeOption(Encoder.encodeIterable[TypoJson, Array](TypoJson.encoder, implicitly)).apply(row.jsones),
      "jsonbes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoJsonb, Array](TypoJsonb.encoder, implicitly)).apply(row.jsonbes),
      "linees" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLine, Array](TypoLine.encoder, implicitly)).apply(row.linees),
      "lseges" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLineSegment, Array](TypoLineSegment.encoder, implicitly)).apply(row.lseges),
      "moneyes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoMoney, Array](TypoMoney.encoder, implicitly)).apply(row.moneyes),
      "mydomaines" -> Encoder.encodeOption(Encoder.encodeIterable[Mydomain, Array](Mydomain.encoder, implicitly)).apply(row.mydomaines),
      "myenumes" -> Encoder.encodeOption(Encoder.encodeIterable[Myenum, Array](Myenum.encoder, implicitly)).apply(row.myenumes),
      "namees" -> Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)).apply(row.namees),
      "numerices" -> Encoder.encodeOption(Encoder.encodeIterable[BigDecimal, Array](Encoder.encodeBigDecimal, implicitly)).apply(row.numerices),
      "pathes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoPath, Array](TypoPath.encoder, implicitly)).apply(row.pathes),
      "pointes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoPoint, Array](TypoPoint.encoder, implicitly)).apply(row.pointes),
      "polygones" -> Encoder.encodeOption(Encoder.encodeIterable[TypoPolygon, Array](TypoPolygon.encoder, implicitly)).apply(row.polygones),
      "textes" -> Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)).apply(row.textes),
      "timees" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLocalTime, Array](TypoLocalTime.encoder, implicitly)).apply(row.timees),
      "timestampes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoLocalDateTime, Array](TypoLocalDateTime.encoder, implicitly)).apply(row.timestampes),
      "timestampzes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoInstant, Array](TypoInstant.encoder, implicitly)).apply(row.timestampzes),
      "timezes" -> Encoder.encodeOption(Encoder.encodeIterable[TypoOffsetTime, Array](TypoOffsetTime.encoder, implicitly)).apply(row.timezes),
      "uuides" -> Encoder.encodeOption(Encoder.encodeIterable[TypoUUID, Array](TypoUUID.encoder, implicitly)).apply(row.uuides),
      "varchares" -> Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)).apply(row.varchares),
      "xmles" -> Encoder.encodeOption(Encoder.encodeIterable[TypoXml, Array](TypoXml.encoder, implicitly)).apply(row.xmles)
    )
  )
  implicit lazy val read: Read[PgtestnullRow] = new Read.CompositeOfInstances(Array(
    new Read.SingleOpt(Meta.BooleanMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoBox.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoBytea.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoCircle.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDate.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.FloatMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.DoubleMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoHStore.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInet.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoShort.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInt2Vector.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.LongMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInterval.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoJson.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoJsonb.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLine.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLineSegment.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoMoney.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Mydomain.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Myenum.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoPath.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoPoint.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoPolygon.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalTime.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInstant.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoOffsetTime.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoUUID.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoVector.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoXml.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoBox.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoCircle.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDate.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.FloatArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.DoubleArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInet.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoShort.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInt2Vector.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.IntegerArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.LongArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInterval.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoJson.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoJsonb.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLine.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLineSegment.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoMoney.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Mydomain.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Myenum.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.BigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoPath.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoPoint.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoPolygon.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalTime.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoLocalDateTime.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInstant.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoOffsetTime.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoUUID.arrayGet).asInstanceOf[Read[Any]],
      new Read.SingleOpt(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoXml.arrayGet).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PgtestnullRow(
      bool = arr(0).asInstanceOf[Option[Boolean]],
          box = arr(1).asInstanceOf[Option[TypoBox]],
          bpchar = arr(2).asInstanceOf[Option[/* bpchar, max 3 chars */ String]],
          bytea = arr(3).asInstanceOf[Option[TypoBytea]],
          char = arr(4).asInstanceOf[Option[/* bpchar, max 1 chars */ String]],
          circle = arr(5).asInstanceOf[Option[TypoCircle]],
          date = arr(6).asInstanceOf[Option[TypoLocalDate]],
          float4 = arr(7).asInstanceOf[Option[Float]],
          float8 = arr(8).asInstanceOf[Option[Double]],
          hstore = arr(9).asInstanceOf[Option[TypoHStore]],
          inet = arr(10).asInstanceOf[Option[TypoInet]],
          int2 = arr(11).asInstanceOf[Option[TypoShort]],
          int2vector = arr(12).asInstanceOf[Option[TypoInt2Vector]],
          int4 = arr(13).asInstanceOf[Option[Int]],
          int8 = arr(14).asInstanceOf[Option[Long]],
          interval = arr(15).asInstanceOf[Option[TypoInterval]],
          json = arr(16).asInstanceOf[Option[TypoJson]],
          jsonb = arr(17).asInstanceOf[Option[TypoJsonb]],
          line = arr(18).asInstanceOf[Option[TypoLine]],
          lseg = arr(19).asInstanceOf[Option[TypoLineSegment]],
          money = arr(20).asInstanceOf[Option[TypoMoney]],
          mydomain = arr(21).asInstanceOf[Option[Mydomain]],
          myenum = arr(22).asInstanceOf[Option[Myenum]],
          name = arr(23).asInstanceOf[Option[String]],
          numeric = arr(24).asInstanceOf[Option[BigDecimal]],
          path = arr(25).asInstanceOf[Option[TypoPath]],
          point = arr(26).asInstanceOf[Option[TypoPoint]],
          polygon = arr(27).asInstanceOf[Option[TypoPolygon]],
          text = arr(28).asInstanceOf[Option[String]],
          time = arr(29).asInstanceOf[Option[TypoLocalTime]],
          timestamp = arr(30).asInstanceOf[Option[TypoLocalDateTime]],
          timestampz = arr(31).asInstanceOf[Option[TypoInstant]],
          timez = arr(32).asInstanceOf[Option[TypoOffsetTime]],
          uuid = arr(33).asInstanceOf[Option[TypoUUID]],
          varchar = arr(34).asInstanceOf[Option[String]],
          vector = arr(35).asInstanceOf[Option[TypoVector]],
          xml = arr(36).asInstanceOf[Option[TypoXml]],
          boxes = arr(37).asInstanceOf[Option[Array[TypoBox]]],
          bpchares = arr(38).asInstanceOf[Option[Array[/* bpchar */ String]]],
          chares = arr(39).asInstanceOf[Option[Array[/* bpchar */ String]]],
          circlees = arr(40).asInstanceOf[Option[Array[TypoCircle]]],
          datees = arr(41).asInstanceOf[Option[Array[TypoLocalDate]]],
          float4es = arr(42).asInstanceOf[Option[Array[Float]]],
          float8es = arr(43).asInstanceOf[Option[Array[Double]]],
          inetes = arr(44).asInstanceOf[Option[Array[TypoInet]]],
          int2es = arr(45).asInstanceOf[Option[Array[TypoShort]]],
          int2vectores = arr(46).asInstanceOf[Option[Array[TypoInt2Vector]]],
          int4es = arr(47).asInstanceOf[Option[Array[Int]]],
          int8es = arr(48).asInstanceOf[Option[Array[Long]]],
          intervales = arr(49).asInstanceOf[Option[Array[TypoInterval]]],
          jsones = arr(50).asInstanceOf[Option[Array[TypoJson]]],
          jsonbes = arr(51).asInstanceOf[Option[Array[TypoJsonb]]],
          linees = arr(52).asInstanceOf[Option[Array[TypoLine]]],
          lseges = arr(53).asInstanceOf[Option[Array[TypoLineSegment]]],
          moneyes = arr(54).asInstanceOf[Option[Array[TypoMoney]]],
          mydomaines = arr(55).asInstanceOf[Option[Array[Mydomain]]],
          myenumes = arr(56).asInstanceOf[Option[Array[Myenum]]],
          namees = arr(57).asInstanceOf[Option[Array[String]]],
          numerices = arr(58).asInstanceOf[Option[Array[BigDecimal]]],
          pathes = arr(59).asInstanceOf[Option[Array[TypoPath]]],
          pointes = arr(60).asInstanceOf[Option[Array[TypoPoint]]],
          polygones = arr(61).asInstanceOf[Option[Array[TypoPolygon]]],
          textes = arr(62).asInstanceOf[Option[Array[String]]],
          timees = arr(63).asInstanceOf[Option[Array[TypoLocalTime]]],
          timestampes = arr(64).asInstanceOf[Option[Array[TypoLocalDateTime]]],
          timestampzes = arr(65).asInstanceOf[Option[Array[TypoInstant]]],
          timezes = arr(66).asInstanceOf[Option[Array[TypoOffsetTime]]],
          uuides = arr(67).asInstanceOf[Option[Array[TypoUUID]]],
          varchares = arr(68).asInstanceOf[Option[Array[String]]],
          xmles = arr(69).asInstanceOf[Option[Array[TypoXml]]]
    )
  }
  implicit lazy val text: Text[PgtestnullRow] = Text.instance[PgtestnullRow]{ (row, sb) =>
    Text.option(Text.booleanInstance).unsafeEncode(row.bool, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoBox.text).unsafeEncode(row.box, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.bpchar, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoBytea.text).unsafeEncode(row.bytea, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.char, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoCircle.text).unsafeEncode(row.circle, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDate.text).unsafeEncode(row.date, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.floatInstance).unsafeEncode(row.float4, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.doubleInstance).unsafeEncode(row.float8, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoHStore.text).unsafeEncode(row.hstore, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInet.text).unsafeEncode(row.inet, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoShort.text).unsafeEncode(row.int2, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInt2Vector.text).unsafeEncode(row.int2vector, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.intInstance).unsafeEncode(row.int4, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.longInstance).unsafeEncode(row.int8, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInterval.text).unsafeEncode(row.interval, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoJson.text).unsafeEncode(row.json, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoJsonb.text).unsafeEncode(row.jsonb, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLine.text).unsafeEncode(row.line, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLineSegment.text).unsafeEncode(row.lseg, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoMoney.text).unsafeEncode(row.money, sb)
    sb.append(Text.DELIMETER)
    Text.option(Mydomain.text).unsafeEncode(row.mydomain, sb)
    sb.append(Text.DELIMETER)
    Text.option(Myenum.text).unsafeEncode(row.myenum, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.bigDecimalInstance).unsafeEncode(row.numeric, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPath.text).unsafeEncode(row.path, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPoint.text).unsafeEncode(row.point, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoPolygon.text).unsafeEncode(row.polygon, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.text, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalTime.text).unsafeEncode(row.time, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoLocalDateTime.text).unsafeEncode(row.timestamp, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInstant.text).unsafeEncode(row.timestampz, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoOffsetTime.text).unsafeEncode(row.timez, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoUUID.text).unsafeEncode(row.uuid, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.varchar, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoVector.text).unsafeEncode(row.vector, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoXml.text).unsafeEncode(row.xml, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoBox](TypoBox.text, implicitly)).unsafeEncode(row.boxes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.bpchares, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.chares, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoCircle](TypoCircle.text, implicitly)).unsafeEncode(row.circlees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLocalDate](TypoLocalDate.text, implicitly)).unsafeEncode(row.datees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Float]]).unsafeEncode(row.float4es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Double]]).unsafeEncode(row.float8es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInet](TypoInet.text, implicitly)).unsafeEncode(row.inetes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoShort](TypoShort.text, implicitly)).unsafeEncode(row.int2es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInt2Vector](TypoInt2Vector.text, implicitly)).unsafeEncode(row.int2vectores, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Int]]).unsafeEncode(row.int4es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[Long]]).unsafeEncode(row.int8es, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInterval](TypoInterval.text, implicitly)).unsafeEncode(row.intervales, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoJson](TypoJson.text, implicitly)).unsafeEncode(row.jsones, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoJsonb](TypoJsonb.text, implicitly)).unsafeEncode(row.jsonbes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLine](TypoLine.text, implicitly)).unsafeEncode(row.linees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLineSegment](TypoLineSegment.text, implicitly)).unsafeEncode(row.lseges, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoMoney](TypoMoney.text, implicitly)).unsafeEncode(row.moneyes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, Mydomain](Mydomain.text, implicitly)).unsafeEncode(row.mydomaines, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, Myenum](Myenum.text, implicitly)).unsafeEncode(row.myenumes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.namees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[BigDecimal]]).unsafeEncode(row.numerices, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoPath](TypoPath.text, implicitly)).unsafeEncode(row.pathes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoPoint](TypoPoint.text, implicitly)).unsafeEncode(row.pointes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoPolygon](TypoPolygon.text, implicitly)).unsafeEncode(row.polygones, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.textes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLocalTime](TypoLocalTime.text, implicitly)).unsafeEncode(row.timees, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoLocalDateTime](TypoLocalDateTime.text, implicitly)).unsafeEncode(row.timestampes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoInstant](TypoInstant.text, implicitly)).unsafeEncode(row.timestampzes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoOffsetTime](TypoOffsetTime.text, implicitly)).unsafeEncode(row.timezes, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoUUID](TypoUUID.text, implicitly)).unsafeEncode(row.uuides, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text[Array[String]]).unsafeEncode(row.varchares, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoXml](TypoXml.text, implicitly)).unsafeEncode(row.xmles, sb)
  }
  implicit lazy val write: Write[PgtestnullRow] = new Write.Composite[PgtestnullRow](
    List(new Write.Single(Meta.BooleanMeta.put).toOpt,
         new Write.Single(TypoBox.put).toOpt,
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(TypoBytea.put).toOpt,
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(TypoCircle.put).toOpt,
         new Write.Single(TypoLocalDate.put).toOpt,
         new Write.Single(Meta.FloatMeta.put).toOpt,
         new Write.Single(Meta.DoubleMeta.put).toOpt,
         new Write.Single(TypoHStore.put).toOpt,
         new Write.Single(TypoInet.put).toOpt,
         new Write.Single(TypoShort.put).toOpt,
         new Write.Single(TypoInt2Vector.put).toOpt,
         new Write.Single(Meta.IntMeta.put).toOpt,
         new Write.Single(Meta.LongMeta.put).toOpt,
         new Write.Single(TypoInterval.put).toOpt,
         new Write.Single(TypoJson.put).toOpt,
         new Write.Single(TypoJsonb.put).toOpt,
         new Write.Single(TypoLine.put).toOpt,
         new Write.Single(TypoLineSegment.put).toOpt,
         new Write.Single(TypoMoney.put).toOpt,
         new Write.Single(Mydomain.put).toOpt,
         new Write.Single(Myenum.put).toOpt,
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(Meta.ScalaBigDecimalMeta.put).toOpt,
         new Write.Single(TypoPath.put).toOpt,
         new Write.Single(TypoPoint.put).toOpt,
         new Write.Single(TypoPolygon.put).toOpt,
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(TypoLocalTime.put).toOpt,
         new Write.Single(TypoLocalDateTime.put).toOpt,
         new Write.Single(TypoInstant.put).toOpt,
         new Write.Single(TypoOffsetTime.put).toOpt,
         new Write.Single(TypoUUID.put).toOpt,
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(TypoVector.put).toOpt,
         new Write.Single(TypoXml.put).toOpt,
         new Write.Single(TypoBox.arrayPut).toOpt,
         new Write.Single(adventureworks.StringArrayMeta.put).toOpt,
         new Write.Single(adventureworks.StringArrayMeta.put).toOpt,
         new Write.Single(TypoCircle.arrayPut).toOpt,
         new Write.Single(TypoLocalDate.arrayPut).toOpt,
         new Write.Single(adventureworks.FloatArrayMeta.put).toOpt,
         new Write.Single(adventureworks.DoubleArrayMeta.put).toOpt,
         new Write.Single(TypoInet.arrayPut).toOpt,
         new Write.Single(TypoShort.arrayPut).toOpt,
         new Write.Single(TypoInt2Vector.arrayPut).toOpt,
         new Write.Single(adventureworks.IntegerArrayMeta.put).toOpt,
         new Write.Single(adventureworks.LongArrayMeta.put).toOpt,
         new Write.Single(TypoInterval.arrayPut).toOpt,
         new Write.Single(TypoJson.arrayPut).toOpt,
         new Write.Single(TypoJsonb.arrayPut).toOpt,
         new Write.Single(TypoLine.arrayPut).toOpt,
         new Write.Single(TypoLineSegment.arrayPut).toOpt,
         new Write.Single(TypoMoney.arrayPut).toOpt,
         new Write.Single(Mydomain.arrayPut).toOpt,
         new Write.Single(Myenum.arrayPut).toOpt,
         new Write.Single(adventureworks.StringArrayMeta.put).toOpt,
         new Write.Single(adventureworks.BigDecimalMeta.put).toOpt,
         new Write.Single(TypoPath.arrayPut).toOpt,
         new Write.Single(TypoPoint.arrayPut).toOpt,
         new Write.Single(TypoPolygon.arrayPut).toOpt,
         new Write.Single(adventureworks.StringArrayMeta.put).toOpt,
         new Write.Single(TypoLocalTime.arrayPut).toOpt,
         new Write.Single(TypoLocalDateTime.arrayPut).toOpt,
         new Write.Single(TypoInstant.arrayPut).toOpt,
         new Write.Single(TypoOffsetTime.arrayPut).toOpt,
         new Write.Single(TypoUUID.arrayPut).toOpt,
         new Write.Single(adventureworks.StringArrayMeta.put).toOpt,
         new Write.Single(TypoXml.arrayPut).toOpt),
    a => List(a.bool, a.box, a.bpchar, a.bytea, a.char, a.circle, a.date, a.float4, a.float8, a.hstore, a.inet, a.int2, a.int2vector, a.int4, a.int8, a.interval, a.json, a.jsonb, a.line, a.lseg, a.money, a.mydomain, a.myenum, a.name, a.numeric, a.path, a.point, a.polygon, a.text, a.time, a.timestamp, a.timestampz, a.timez, a.uuid, a.varchar, a.vector, a.xml, a.boxes, a.bpchares, a.chares, a.circlees, a.datees, a.float4es, a.float8es, a.inetes, a.int2es, a.int2vectores, a.int4es, a.int8es, a.intervales, a.jsones, a.jsonbes, a.linees, a.lseges, a.moneyes, a.mydomaines, a.myenumes, a.namees, a.numerices, a.pathes, a.pointes, a.polygones, a.textes, a.timees, a.timestampes, a.timestampzes, a.timezes, a.uuides, a.varchares, a.xmles)
  )
}
