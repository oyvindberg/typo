/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_utdanningstilbud

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class TestUtdanningstilbudRepoImpl extends TestUtdanningstilbudRepo {
  override def delete: DeleteBuilder[TestUtdanningstilbudFields, TestUtdanningstilbudRow] = {
    DeleteBuilder(""""public"."test_utdanningstilbud"""", TestUtdanningstilbudFields.structure)
  }
  override def deleteById(compositeId: TestUtdanningstilbudId): ConnectionIO[Boolean] = {
    sql"""delete from "public"."test_utdanningstilbud" where "organisasjonskode" = ${fromWrite(compositeId.organisasjonskode)(Write.fromPut(TestOrganisasjonId.put))} AND "utdanningsmulighet_kode" = ${fromWrite(compositeId.utdanningsmulighetKode)(Write.fromPut(Meta.StringMeta.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(compositeIds: Array[TestUtdanningstilbudId]): ConnectionIO[Int] = {
    val organisasjonskode = compositeIds.map(_.organisasjonskode)
    val utdanningsmulighetKode = compositeIds.map(_.utdanningsmulighetKode)
    sql"""delete
          from "public"."test_utdanningstilbud"
          where ("organisasjonskode", "utdanningsmulighet_kode")
          in (select unnest(${organisasjonskode}), unnest(${utdanningsmulighetKode}))
       """.update.run
    
  }
  override def insert(unsaved: TestUtdanningstilbudRow): ConnectionIO[TestUtdanningstilbudRow] = {
    sql"""insert into "public"."test_utdanningstilbud"("organisasjonskode", "utdanningsmulighet_kode")
          values (${fromWrite(unsaved.organisasjonskode)(Write.fromPut(TestOrganisasjonId.put))}, ${fromWrite(unsaved.utdanningsmulighetKode)(Write.fromPut(Meta.StringMeta.put))})
          returning "organisasjonskode", "utdanningsmulighet_kode"
       """.query(using TestUtdanningstilbudRow.read).unique
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, TestUtdanningstilbudRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "public"."test_utdanningstilbud"("organisasjonskode", "utdanningsmulighet_kode") FROM STDIN""").copyIn(unsaved, batchSize)(using TestUtdanningstilbudRow.text)
  }
  override def select: SelectBuilder[TestUtdanningstilbudFields, TestUtdanningstilbudRow] = {
    SelectBuilderSql(""""public"."test_utdanningstilbud"""", TestUtdanningstilbudFields.structure, TestUtdanningstilbudRow.read)
  }
  override def selectAll: Stream[ConnectionIO, TestUtdanningstilbudRow] = {
    sql"""select "organisasjonskode", "utdanningsmulighet_kode" from "public"."test_utdanningstilbud"""".query(using TestUtdanningstilbudRow.read).stream
  }
  override def selectById(compositeId: TestUtdanningstilbudId): ConnectionIO[Option[TestUtdanningstilbudRow]] = {
    sql"""select "organisasjonskode", "utdanningsmulighet_kode" from "public"."test_utdanningstilbud" where "organisasjonskode" = ${fromWrite(compositeId.organisasjonskode)(Write.fromPut(TestOrganisasjonId.put))} AND "utdanningsmulighet_kode" = ${fromWrite(compositeId.utdanningsmulighetKode)(Write.fromPut(Meta.StringMeta.put))}""".query(using TestUtdanningstilbudRow.read).option
  }
  override def selectByIds(compositeIds: Array[TestUtdanningstilbudId]): Stream[ConnectionIO, TestUtdanningstilbudRow] = {
    val organisasjonskode = compositeIds.map(_.organisasjonskode)
    val utdanningsmulighetKode = compositeIds.map(_.utdanningsmulighetKode)
    sql"""select "organisasjonskode", "utdanningsmulighet_kode"
          from "public"."test_utdanningstilbud"
          where ("organisasjonskode", "utdanningsmulighet_kode")
          in (select unnest(${organisasjonskode}), unnest(${utdanningsmulighetKode}))
       """.query(using TestUtdanningstilbudRow.read).stream
    
  }
  override def selectByIdsTracked(compositeIds: Array[TestUtdanningstilbudId]): ConnectionIO[Map[TestUtdanningstilbudId, TestUtdanningstilbudRow]] = {
    selectByIds(compositeIds).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.compositeId, x)).toMap
      compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[TestUtdanningstilbudFields, TestUtdanningstilbudRow] = {
    UpdateBuilder(""""public"."test_utdanningstilbud"""", TestUtdanningstilbudFields.structure, TestUtdanningstilbudRow.read)
  }
  override def upsert(unsaved: TestUtdanningstilbudRow): ConnectionIO[TestUtdanningstilbudRow] = {
    sql"""insert into "public"."test_utdanningstilbud"("organisasjonskode", "utdanningsmulighet_kode")
          values (
            ${fromWrite(unsaved.organisasjonskode)(Write.fromPut(TestOrganisasjonId.put))},
            ${fromWrite(unsaved.utdanningsmulighetKode)(Write.fromPut(Meta.StringMeta.put))}
          )
          on conflict ("organisasjonskode", "utdanningsmulighet_kode")
          do update set "organisasjonskode" = EXCLUDED."organisasjonskode"
          returning "organisasjonskode", "utdanningsmulighet_kode"
       """.query(using TestUtdanningstilbudRow.read).unique
  }
  override def upsertBatch(unsaved: List[TestUtdanningstilbudRow]): Stream[ConnectionIO, TestUtdanningstilbudRow] = {
    Update[TestUtdanningstilbudRow](
      s"""insert into "public"."test_utdanningstilbud"("organisasjonskode", "utdanningsmulighet_kode")
          values (?,?)
          on conflict ("organisasjonskode", "utdanningsmulighet_kode")
          do nothing
          returning "organisasjonskode", "utdanningsmulighet_kode""""
    )(using TestUtdanningstilbudRow.write)
    .updateManyWithGeneratedKeys[TestUtdanningstilbudRow]("organisasjonskode", "utdanningsmulighet_kode")(unsaved)(using catsStdInstancesForList, TestUtdanningstilbudRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, TestUtdanningstilbudRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table test_utdanningstilbud_TEMP (like "public"."test_utdanningstilbud") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy test_utdanningstilbud_TEMP("organisasjonskode", "utdanningsmulighet_kode") from stdin""").copyIn(unsaved, batchSize)(using TestUtdanningstilbudRow.text)
      res <- sql"""insert into "public"."test_utdanningstilbud"("organisasjonskode", "utdanningsmulighet_kode")
                   select * from test_utdanningstilbud_TEMP
                   on conflict ("organisasjonskode", "utdanningsmulighet_kode")
                   do nothing
                   ;
                   drop table test_utdanningstilbud_TEMP;""".update.run
    } yield res
  }
}
