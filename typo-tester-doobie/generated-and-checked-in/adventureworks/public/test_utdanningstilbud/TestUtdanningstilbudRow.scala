/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_utdanningstilbud

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: public.test_utdanningstilbud
    Composite primary key: organisasjonskode, utdanningsmulighet_kode */
case class TestUtdanningstilbudRow(
  /** Points to [[test_organisasjon.TestOrganisasjonRow.organisasjonskode]] */
  organisasjonskode: TestOrganisasjonId,
  utdanningsmulighetKode: String
){
   val compositeId: TestUtdanningstilbudId = TestUtdanningstilbudId(organisasjonskode, utdanningsmulighetKode)
   val id = compositeId
 }

object TestUtdanningstilbudRow {
  def apply(compositeId: TestUtdanningstilbudId) =
    new TestUtdanningstilbudRow(compositeId.organisasjonskode, compositeId.utdanningsmulighetKode)
  implicit lazy val decoder: Decoder[TestUtdanningstilbudRow] = Decoder.forProduct2[TestUtdanningstilbudRow, TestOrganisasjonId, String]("organisasjonskode", "utdanningsmulighet_kode")(TestUtdanningstilbudRow.apply)(TestOrganisasjonId.decoder, Decoder.decodeString)
  implicit lazy val encoder: Encoder[TestUtdanningstilbudRow] = Encoder.forProduct2[TestUtdanningstilbudRow, TestOrganisasjonId, String]("organisasjonskode", "utdanningsmulighet_kode")(x => (x.organisasjonskode, x.utdanningsmulighetKode))(TestOrganisasjonId.encoder, Encoder.encodeString)
  implicit lazy val read: Read[TestUtdanningstilbudRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(TestOrganisasjonId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    TestUtdanningstilbudRow(
      organisasjonskode = arr(0).asInstanceOf[TestOrganisasjonId],
          utdanningsmulighetKode = arr(1).asInstanceOf[String]
    )
  }
  implicit lazy val text: Text[TestUtdanningstilbudRow] = Text.instance[TestUtdanningstilbudRow]{ (row, sb) =>
    TestOrganisasjonId.text.unsafeEncode(row.organisasjonskode, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.utdanningsmulighetKode, sb)
  }
  implicit lazy val write: Write[TestUtdanningstilbudRow] = new Write.Composite[TestUtdanningstilbudRow](
    List(new Write.Single(TestOrganisasjonId.put),
         new Write.Single(Meta.StringMeta.put)),
    a => List(a.organisasjonskode, a.utdanningsmulighetKode)
  )
}
