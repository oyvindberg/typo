/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package flaff

import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: public.flaff
    Composite primary key: code, another_code, some_number, specifier */
case class FlaffRow(
  /** Points to [[FlaffRow.code]] */
  code: ShortText,
  /** Points to [[FlaffRow.anotherCode]] */
  anotherCode: /* max 20 chars */ String,
  /** Points to [[FlaffRow.someNumber]] */
  someNumber: Int,
  specifier: ShortText,
  /** Points to [[FlaffRow.specifier]] */
  parentspecifier: Option[ShortText]
){
   val compositeId: FlaffId = FlaffId(code, anotherCode, someNumber, specifier)
   val id = compositeId
 }

object FlaffRow {
  def apply(compositeId: FlaffId, parentspecifier: Option[ShortText]) =
    new FlaffRow(compositeId.code, compositeId.anotherCode, compositeId.someNumber, compositeId.specifier, parentspecifier)
  implicit lazy val decoder: Decoder[FlaffRow] = Decoder.forProduct5[FlaffRow, ShortText, /* max 20 chars */ String, Int, ShortText, Option[ShortText]]("code", "another_code", "some_number", "specifier", "parentspecifier")(FlaffRow.apply)(ShortText.decoder, Decoder.decodeString, Decoder.decodeInt, ShortText.decoder, Decoder.decodeOption(ShortText.decoder))
  implicit lazy val encoder: Encoder[FlaffRow] = Encoder.forProduct5[FlaffRow, ShortText, /* max 20 chars */ String, Int, ShortText, Option[ShortText]]("code", "another_code", "some_number", "specifier", "parentspecifier")(x => (x.code, x.anotherCode, x.someNumber, x.specifier, x.parentspecifier))(ShortText.encoder, Encoder.encodeString, Encoder.encodeInt, ShortText.encoder, Encoder.encodeOption(ShortText.encoder))
  implicit lazy val read: Read[FlaffRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(ShortText.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(ShortText.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(ShortText.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    FlaffRow(
      code = arr(0).asInstanceOf[ShortText],
          anotherCode = arr(1).asInstanceOf[/* max 20 chars */ String],
          someNumber = arr(2).asInstanceOf[Int],
          specifier = arr(3).asInstanceOf[ShortText],
          parentspecifier = arr(4).asInstanceOf[Option[ShortText]]
    )
  }
  implicit lazy val text: Text[FlaffRow] = Text.instance[FlaffRow]{ (row, sb) =>
    ShortText.text.unsafeEncode(row.code, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.anotherCode, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.someNumber, sb)
    sb.append(Text.DELIMETER)
    ShortText.text.unsafeEncode(row.specifier, sb)
    sb.append(Text.DELIMETER)
    Text.option(ShortText.text).unsafeEncode(row.parentspecifier, sb)
  }
  implicit lazy val write: Write[FlaffRow] = new Write.Composite[FlaffRow](
    List(new Write.Single(ShortText.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.IntMeta.put),
         new Write.Single(ShortText.put),
         new Write.Single(ShortText.put).toOpt),
    a => List(a.code, a.anotherCode, a.someNumber, a.specifier, a.parentspecifier)
  )
}
