/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package pgtest

import adventureworks.customtypes.TypoBox
import adventureworks.customtypes.TypoBytea
import adventureworks.customtypes.TypoCircle
import adventureworks.customtypes.TypoHStore
import adventureworks.customtypes.TypoInet
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoInt2Vector
import adventureworks.customtypes.TypoInterval
import adventureworks.customtypes.TypoJson
import adventureworks.customtypes.TypoJsonb
import adventureworks.customtypes.TypoLine
import adventureworks.customtypes.TypoLineSegment
import adventureworks.customtypes.TypoLocalDate
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoLocalTime
import adventureworks.customtypes.TypoMoney
import adventureworks.customtypes.TypoOffsetTime
import adventureworks.customtypes.TypoPath
import adventureworks.customtypes.TypoPoint
import adventureworks.customtypes.TypoPolygon
import adventureworks.customtypes.TypoShort
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoVector
import adventureworks.customtypes.TypoXml
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import scala.util.Try

/** Table: public.pgtest */
case class PgtestRow(
  bool: Boolean,
  box: TypoBox,
  bpchar: /* bpchar, max 3 chars */ String,
  bytea: TypoBytea,
  char: /* bpchar, max 1 chars */ String,
  circle: TypoCircle,
  date: TypoLocalDate,
  float4: Float,
  float8: Double,
  hstore: TypoHStore,
  inet: TypoInet,
  int2: TypoShort,
  int2vector: TypoInt2Vector,
  int4: Int,
  int8: Long,
  interval: TypoInterval,
  json: TypoJson,
  jsonb: TypoJsonb,
  line: TypoLine,
  lseg: TypoLineSegment,
  money: TypoMoney,
  mydomain: Mydomain,
  myenum: Myenum,
  name: String,
  numeric: BigDecimal,
  path: TypoPath,
  point: TypoPoint,
  polygon: TypoPolygon,
  text: String,
  time: TypoLocalTime,
  timestamp: TypoLocalDateTime,
  timestampz: TypoInstant,
  timez: TypoOffsetTime,
  uuid: TypoUUID,
  varchar: String,
  vector: TypoVector,
  xml: TypoXml,
  boxes: Array[TypoBox],
  bpchares: Array[/* bpchar */ String],
  chares: Array[/* bpchar */ String],
  circlees: Array[TypoCircle],
  datees: Array[TypoLocalDate],
  float4es: Array[Float],
  float8es: Array[Double],
  inetes: Array[TypoInet],
  int2es: Array[TypoShort],
  int2vectores: Array[TypoInt2Vector],
  int4es: Array[Int],
  int8es: Array[Long],
  intervales: Array[TypoInterval],
  jsones: Array[TypoJson],
  jsonbes: Array[TypoJsonb],
  linees: Array[TypoLine],
  lseges: Array[TypoLineSegment],
  moneyes: Array[TypoMoney],
  mydomaines: Array[Mydomain],
  myenumes: Array[Myenum],
  namees: Array[String],
  numerices: Array[BigDecimal],
  pathes: Array[TypoPath],
  pointes: Array[TypoPoint],
  polygones: Array[TypoPolygon],
  textes: Array[String],
  timees: Array[TypoLocalTime],
  timestampes: Array[TypoLocalDateTime],
  timestampzes: Array[TypoInstant],
  timezes: Array[TypoOffsetTime],
  uuides: Array[TypoUUID],
  varchares: Array[String],
  xmles: Array[TypoXml]
)

object PgtestRow {
  implicit lazy val decoder: Decoder[PgtestRow] = Decoder.instanceTry[PgtestRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      PgtestRow(
        bool = orThrow(c.get("bool")(Decoder.decodeBoolean)),
        box = orThrow(c.get("box")(TypoBox.decoder)),
        bpchar = orThrow(c.get("bpchar")(Decoder.decodeString)),
        bytea = orThrow(c.get("bytea")(TypoBytea.decoder)),
        char = orThrow(c.get("char")(Decoder.decodeString)),
        circle = orThrow(c.get("circle")(TypoCircle.decoder)),
        date = orThrow(c.get("date")(TypoLocalDate.decoder)),
        float4 = orThrow(c.get("float4")(Decoder.decodeFloat)),
        float8 = orThrow(c.get("float8")(Decoder.decodeDouble)),
        hstore = orThrow(c.get("hstore")(TypoHStore.decoder)),
        inet = orThrow(c.get("inet")(TypoInet.decoder)),
        int2 = orThrow(c.get("int2")(TypoShort.decoder)),
        int2vector = orThrow(c.get("int2vector")(TypoInt2Vector.decoder)),
        int4 = orThrow(c.get("int4")(Decoder.decodeInt)),
        int8 = orThrow(c.get("int8")(Decoder.decodeLong)),
        interval = orThrow(c.get("interval")(TypoInterval.decoder)),
        json = orThrow(c.get("json")(TypoJson.decoder)),
        jsonb = orThrow(c.get("jsonb")(TypoJsonb.decoder)),
        line = orThrow(c.get("line")(TypoLine.decoder)),
        lseg = orThrow(c.get("lseg")(TypoLineSegment.decoder)),
        money = orThrow(c.get("money")(TypoMoney.decoder)),
        mydomain = orThrow(c.get("mydomain")(Mydomain.decoder)),
        myenum = orThrow(c.get("myenum")(Myenum.decoder)),
        name = orThrow(c.get("name")(Decoder.decodeString)),
        numeric = orThrow(c.get("numeric")(Decoder.decodeBigDecimal)),
        path = orThrow(c.get("path")(TypoPath.decoder)),
        point = orThrow(c.get("point")(TypoPoint.decoder)),
        polygon = orThrow(c.get("polygon")(TypoPolygon.decoder)),
        text = orThrow(c.get("text")(Decoder.decodeString)),
        time = orThrow(c.get("time")(TypoLocalTime.decoder)),
        timestamp = orThrow(c.get("timestamp")(TypoLocalDateTime.decoder)),
        timestampz = orThrow(c.get("timestampz")(TypoInstant.decoder)),
        timez = orThrow(c.get("timez")(TypoOffsetTime.decoder)),
        uuid = orThrow(c.get("uuid")(TypoUUID.decoder)),
        varchar = orThrow(c.get("varchar")(Decoder.decodeString)),
        vector = orThrow(c.get("vector")(TypoVector.decoder)),
        xml = orThrow(c.get("xml")(TypoXml.decoder)),
        boxes = orThrow(c.get("boxes")(Decoder.decodeArray[TypoBox](TypoBox.decoder, implicitly))),
        bpchares = orThrow(c.get("bpchares")(Decoder.decodeArray[String](Decoder.decodeString, implicitly))),
        chares = orThrow(c.get("chares")(Decoder.decodeArray[String](Decoder.decodeString, implicitly))),
        circlees = orThrow(c.get("circlees")(Decoder.decodeArray[TypoCircle](TypoCircle.decoder, implicitly))),
        datees = orThrow(c.get("datees")(Decoder.decodeArray[TypoLocalDate](TypoLocalDate.decoder, implicitly))),
        float4es = orThrow(c.get("float4es")(Decoder.decodeArray[Float](Decoder.decodeFloat, implicitly))),
        float8es = orThrow(c.get("float8es")(Decoder.decodeArray[Double](Decoder.decodeDouble, implicitly))),
        inetes = orThrow(c.get("inetes")(Decoder.decodeArray[TypoInet](TypoInet.decoder, implicitly))),
        int2es = orThrow(c.get("int2es")(Decoder.decodeArray[TypoShort](TypoShort.decoder, implicitly))),
        int2vectores = orThrow(c.get("int2vectores")(Decoder.decodeArray[TypoInt2Vector](TypoInt2Vector.decoder, implicitly))),
        int4es = orThrow(c.get("int4es")(Decoder.decodeArray[Int](Decoder.decodeInt, implicitly))),
        int8es = orThrow(c.get("int8es")(Decoder.decodeArray[Long](Decoder.decodeLong, implicitly))),
        intervales = orThrow(c.get("intervales")(Decoder.decodeArray[TypoInterval](TypoInterval.decoder, implicitly))),
        jsones = orThrow(c.get("jsones")(Decoder.decodeArray[TypoJson](TypoJson.decoder, implicitly))),
        jsonbes = orThrow(c.get("jsonbes")(Decoder.decodeArray[TypoJsonb](TypoJsonb.decoder, implicitly))),
        linees = orThrow(c.get("linees")(Decoder.decodeArray[TypoLine](TypoLine.decoder, implicitly))),
        lseges = orThrow(c.get("lseges")(Decoder.decodeArray[TypoLineSegment](TypoLineSegment.decoder, implicitly))),
        moneyes = orThrow(c.get("moneyes")(Decoder.decodeArray[TypoMoney](TypoMoney.decoder, implicitly))),
        mydomaines = orThrow(c.get("mydomaines")(Decoder.decodeArray[Mydomain](Mydomain.decoder, implicitly))),
        myenumes = orThrow(c.get("myenumes")(Decoder.decodeArray[Myenum](Myenum.decoder, implicitly))),
        namees = orThrow(c.get("namees")(Decoder.decodeArray[String](Decoder.decodeString, implicitly))),
        numerices = orThrow(c.get("numerices")(Decoder.decodeArray[BigDecimal](Decoder.decodeBigDecimal, implicitly))),
        pathes = orThrow(c.get("pathes")(Decoder.decodeArray[TypoPath](TypoPath.decoder, implicitly))),
        pointes = orThrow(c.get("pointes")(Decoder.decodeArray[TypoPoint](TypoPoint.decoder, implicitly))),
        polygones = orThrow(c.get("polygones")(Decoder.decodeArray[TypoPolygon](TypoPolygon.decoder, implicitly))),
        textes = orThrow(c.get("textes")(Decoder.decodeArray[String](Decoder.decodeString, implicitly))),
        timees = orThrow(c.get("timees")(Decoder.decodeArray[TypoLocalTime](TypoLocalTime.decoder, implicitly))),
        timestampes = orThrow(c.get("timestampes")(Decoder.decodeArray[TypoLocalDateTime](TypoLocalDateTime.decoder, implicitly))),
        timestampzes = orThrow(c.get("timestampzes")(Decoder.decodeArray[TypoInstant](TypoInstant.decoder, implicitly))),
        timezes = orThrow(c.get("timezes")(Decoder.decodeArray[TypoOffsetTime](TypoOffsetTime.decoder, implicitly))),
        uuides = orThrow(c.get("uuides")(Decoder.decodeArray[TypoUUID](TypoUUID.decoder, implicitly))),
        varchares = orThrow(c.get("varchares")(Decoder.decodeArray[String](Decoder.decodeString, implicitly))),
        xmles = orThrow(c.get("xmles")(Decoder.decodeArray[TypoXml](TypoXml.decoder, implicitly)))
      )
    }
  )
  implicit lazy val encoder: Encoder[PgtestRow] = Encoder[PgtestRow](row =>
    Json.obj(
      "bool" -> Encoder.encodeBoolean.apply(row.bool),
      "box" -> TypoBox.encoder.apply(row.box),
      "bpchar" -> Encoder.encodeString.apply(row.bpchar),
      "bytea" -> TypoBytea.encoder.apply(row.bytea),
      "char" -> Encoder.encodeString.apply(row.char),
      "circle" -> TypoCircle.encoder.apply(row.circle),
      "date" -> TypoLocalDate.encoder.apply(row.date),
      "float4" -> Encoder.encodeFloat.apply(row.float4),
      "float8" -> Encoder.encodeDouble.apply(row.float8),
      "hstore" -> TypoHStore.encoder.apply(row.hstore),
      "inet" -> TypoInet.encoder.apply(row.inet),
      "int2" -> TypoShort.encoder.apply(row.int2),
      "int2vector" -> TypoInt2Vector.encoder.apply(row.int2vector),
      "int4" -> Encoder.encodeInt.apply(row.int4),
      "int8" -> Encoder.encodeLong.apply(row.int8),
      "interval" -> TypoInterval.encoder.apply(row.interval),
      "json" -> TypoJson.encoder.apply(row.json),
      "jsonb" -> TypoJsonb.encoder.apply(row.jsonb),
      "line" -> TypoLine.encoder.apply(row.line),
      "lseg" -> TypoLineSegment.encoder.apply(row.lseg),
      "money" -> TypoMoney.encoder.apply(row.money),
      "mydomain" -> Mydomain.encoder.apply(row.mydomain),
      "myenum" -> Myenum.encoder.apply(row.myenum),
      "name" -> Encoder.encodeString.apply(row.name),
      "numeric" -> Encoder.encodeBigDecimal.apply(row.numeric),
      "path" -> TypoPath.encoder.apply(row.path),
      "point" -> TypoPoint.encoder.apply(row.point),
      "polygon" -> TypoPolygon.encoder.apply(row.polygon),
      "text" -> Encoder.encodeString.apply(row.text),
      "time" -> TypoLocalTime.encoder.apply(row.time),
      "timestamp" -> TypoLocalDateTime.encoder.apply(row.timestamp),
      "timestampz" -> TypoInstant.encoder.apply(row.timestampz),
      "timez" -> TypoOffsetTime.encoder.apply(row.timez),
      "uuid" -> TypoUUID.encoder.apply(row.uuid),
      "varchar" -> Encoder.encodeString.apply(row.varchar),
      "vector" -> TypoVector.encoder.apply(row.vector),
      "xml" -> TypoXml.encoder.apply(row.xml),
      "boxes" -> Encoder.encodeIterable[TypoBox, Array](TypoBox.encoder, implicitly).apply(row.boxes),
      "bpchares" -> Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly).apply(row.bpchares),
      "chares" -> Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly).apply(row.chares),
      "circlees" -> Encoder.encodeIterable[TypoCircle, Array](TypoCircle.encoder, implicitly).apply(row.circlees),
      "datees" -> Encoder.encodeIterable[TypoLocalDate, Array](TypoLocalDate.encoder, implicitly).apply(row.datees),
      "float4es" -> Encoder.encodeIterable[Float, Array](Encoder.encodeFloat, implicitly).apply(row.float4es),
      "float8es" -> Encoder.encodeIterable[Double, Array](Encoder.encodeDouble, implicitly).apply(row.float8es),
      "inetes" -> Encoder.encodeIterable[TypoInet, Array](TypoInet.encoder, implicitly).apply(row.inetes),
      "int2es" -> Encoder.encodeIterable[TypoShort, Array](TypoShort.encoder, implicitly).apply(row.int2es),
      "int2vectores" -> Encoder.encodeIterable[TypoInt2Vector, Array](TypoInt2Vector.encoder, implicitly).apply(row.int2vectores),
      "int4es" -> Encoder.encodeIterable[Int, Array](Encoder.encodeInt, implicitly).apply(row.int4es),
      "int8es" -> Encoder.encodeIterable[Long, Array](Encoder.encodeLong, implicitly).apply(row.int8es),
      "intervales" -> Encoder.encodeIterable[TypoInterval, Array](TypoInterval.encoder, implicitly).apply(row.intervales),
      "jsones" -> Encoder.encodeIterable[TypoJson, Array](TypoJson.encoder, implicitly).apply(row.jsones),
      "jsonbes" -> Encoder.encodeIterable[TypoJsonb, Array](TypoJsonb.encoder, implicitly).apply(row.jsonbes),
      "linees" -> Encoder.encodeIterable[TypoLine, Array](TypoLine.encoder, implicitly).apply(row.linees),
      "lseges" -> Encoder.encodeIterable[TypoLineSegment, Array](TypoLineSegment.encoder, implicitly).apply(row.lseges),
      "moneyes" -> Encoder.encodeIterable[TypoMoney, Array](TypoMoney.encoder, implicitly).apply(row.moneyes),
      "mydomaines" -> Encoder.encodeIterable[Mydomain, Array](Mydomain.encoder, implicitly).apply(row.mydomaines),
      "myenumes" -> Encoder.encodeIterable[Myenum, Array](Myenum.encoder, implicitly).apply(row.myenumes),
      "namees" -> Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly).apply(row.namees),
      "numerices" -> Encoder.encodeIterable[BigDecimal, Array](Encoder.encodeBigDecimal, implicitly).apply(row.numerices),
      "pathes" -> Encoder.encodeIterable[TypoPath, Array](TypoPath.encoder, implicitly).apply(row.pathes),
      "pointes" -> Encoder.encodeIterable[TypoPoint, Array](TypoPoint.encoder, implicitly).apply(row.pointes),
      "polygones" -> Encoder.encodeIterable[TypoPolygon, Array](TypoPolygon.encoder, implicitly).apply(row.polygones),
      "textes" -> Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly).apply(row.textes),
      "timees" -> Encoder.encodeIterable[TypoLocalTime, Array](TypoLocalTime.encoder, implicitly).apply(row.timees),
      "timestampes" -> Encoder.encodeIterable[TypoLocalDateTime, Array](TypoLocalDateTime.encoder, implicitly).apply(row.timestampes),
      "timestampzes" -> Encoder.encodeIterable[TypoInstant, Array](TypoInstant.encoder, implicitly).apply(row.timestampzes),
      "timezes" -> Encoder.encodeIterable[TypoOffsetTime, Array](TypoOffsetTime.encoder, implicitly).apply(row.timezes),
      "uuides" -> Encoder.encodeIterable[TypoUUID, Array](TypoUUID.encoder, implicitly).apply(row.uuides),
      "varchares" -> Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly).apply(row.varchares),
      "xmles" -> Encoder.encodeIterable[TypoXml, Array](TypoXml.encoder, implicitly).apply(row.xmles)
    )
  )
  implicit lazy val read: Read[PgtestRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(Meta.BooleanMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoBox.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoBytea.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoCircle.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDate.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.FloatMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.DoubleMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoHStore.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoInet.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoShort.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoInt2Vector.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.IntMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.LongMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoInterval.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoJson.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoJsonb.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLine.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLineSegment.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoMoney.get).asInstanceOf[Read[Any]],
      new Read.Single(Mydomain.get).asInstanceOf[Read[Any]],
      new Read.Single(Myenum.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.ScalaBigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoPath.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoPoint.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoPolygon.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoInstant.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoOffsetTime.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoUUID.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoVector.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoXml.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoBox.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoCircle.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDate.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.FloatArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.DoubleArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoInet.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoShort.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoInt2Vector.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.IntegerArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.LongArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoInterval.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoJson.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoJsonb.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoLine.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoLineSegment.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoMoney.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(Mydomain.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(Myenum.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.BigDecimalMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoPath.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoPoint.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoPolygon.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalTime.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoInstant.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoOffsetTime.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(TypoUUID.arrayGet).asInstanceOf[Read[Any]],
      new Read.Single(adventureworks.StringArrayMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoXml.arrayGet).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PgtestRow(
      bool = arr(0).asInstanceOf[Boolean],
          box = arr(1).asInstanceOf[TypoBox],
          bpchar = arr(2).asInstanceOf[/* bpchar, max 3 chars */ String],
          bytea = arr(3).asInstanceOf[TypoBytea],
          char = arr(4).asInstanceOf[/* bpchar, max 1 chars */ String],
          circle = arr(5).asInstanceOf[TypoCircle],
          date = arr(6).asInstanceOf[TypoLocalDate],
          float4 = arr(7).asInstanceOf[Float],
          float8 = arr(8).asInstanceOf[Double],
          hstore = arr(9).asInstanceOf[TypoHStore],
          inet = arr(10).asInstanceOf[TypoInet],
          int2 = arr(11).asInstanceOf[TypoShort],
          int2vector = arr(12).asInstanceOf[TypoInt2Vector],
          int4 = arr(13).asInstanceOf[Int],
          int8 = arr(14).asInstanceOf[Long],
          interval = arr(15).asInstanceOf[TypoInterval],
          json = arr(16).asInstanceOf[TypoJson],
          jsonb = arr(17).asInstanceOf[TypoJsonb],
          line = arr(18).asInstanceOf[TypoLine],
          lseg = arr(19).asInstanceOf[TypoLineSegment],
          money = arr(20).asInstanceOf[TypoMoney],
          mydomain = arr(21).asInstanceOf[Mydomain],
          myenum = arr(22).asInstanceOf[Myenum],
          name = arr(23).asInstanceOf[String],
          numeric = arr(24).asInstanceOf[BigDecimal],
          path = arr(25).asInstanceOf[TypoPath],
          point = arr(26).asInstanceOf[TypoPoint],
          polygon = arr(27).asInstanceOf[TypoPolygon],
          text = arr(28).asInstanceOf[String],
          time = arr(29).asInstanceOf[TypoLocalTime],
          timestamp = arr(30).asInstanceOf[TypoLocalDateTime],
          timestampz = arr(31).asInstanceOf[TypoInstant],
          timez = arr(32).asInstanceOf[TypoOffsetTime],
          uuid = arr(33).asInstanceOf[TypoUUID],
          varchar = arr(34).asInstanceOf[String],
          vector = arr(35).asInstanceOf[TypoVector],
          xml = arr(36).asInstanceOf[TypoXml],
          boxes = arr(37).asInstanceOf[Array[TypoBox]],
          bpchares = arr(38).asInstanceOf[Array[/* bpchar */ String]],
          chares = arr(39).asInstanceOf[Array[/* bpchar */ String]],
          circlees = arr(40).asInstanceOf[Array[TypoCircle]],
          datees = arr(41).asInstanceOf[Array[TypoLocalDate]],
          float4es = arr(42).asInstanceOf[Array[Float]],
          float8es = arr(43).asInstanceOf[Array[Double]],
          inetes = arr(44).asInstanceOf[Array[TypoInet]],
          int2es = arr(45).asInstanceOf[Array[TypoShort]],
          int2vectores = arr(46).asInstanceOf[Array[TypoInt2Vector]],
          int4es = arr(47).asInstanceOf[Array[Int]],
          int8es = arr(48).asInstanceOf[Array[Long]],
          intervales = arr(49).asInstanceOf[Array[TypoInterval]],
          jsones = arr(50).asInstanceOf[Array[TypoJson]],
          jsonbes = arr(51).asInstanceOf[Array[TypoJsonb]],
          linees = arr(52).asInstanceOf[Array[TypoLine]],
          lseges = arr(53).asInstanceOf[Array[TypoLineSegment]],
          moneyes = arr(54).asInstanceOf[Array[TypoMoney]],
          mydomaines = arr(55).asInstanceOf[Array[Mydomain]],
          myenumes = arr(56).asInstanceOf[Array[Myenum]],
          namees = arr(57).asInstanceOf[Array[String]],
          numerices = arr(58).asInstanceOf[Array[BigDecimal]],
          pathes = arr(59).asInstanceOf[Array[TypoPath]],
          pointes = arr(60).asInstanceOf[Array[TypoPoint]],
          polygones = arr(61).asInstanceOf[Array[TypoPolygon]],
          textes = arr(62).asInstanceOf[Array[String]],
          timees = arr(63).asInstanceOf[Array[TypoLocalTime]],
          timestampes = arr(64).asInstanceOf[Array[TypoLocalDateTime]],
          timestampzes = arr(65).asInstanceOf[Array[TypoInstant]],
          timezes = arr(66).asInstanceOf[Array[TypoOffsetTime]],
          uuides = arr(67).asInstanceOf[Array[TypoUUID]],
          varchares = arr(68).asInstanceOf[Array[String]],
          xmles = arr(69).asInstanceOf[Array[TypoXml]]
    )
  }
  implicit lazy val text: Text[PgtestRow] = Text.instance[PgtestRow]{ (row, sb) =>
    Text.booleanInstance.unsafeEncode(row.bool, sb)
    sb.append(Text.DELIMETER)
    TypoBox.text.unsafeEncode(row.box, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.bpchar, sb)
    sb.append(Text.DELIMETER)
    TypoBytea.text.unsafeEncode(row.bytea, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.char, sb)
    sb.append(Text.DELIMETER)
    TypoCircle.text.unsafeEncode(row.circle, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDate.text.unsafeEncode(row.date, sb)
    sb.append(Text.DELIMETER)
    Text.floatInstance.unsafeEncode(row.float4, sb)
    sb.append(Text.DELIMETER)
    Text.doubleInstance.unsafeEncode(row.float8, sb)
    sb.append(Text.DELIMETER)
    TypoHStore.text.unsafeEncode(row.hstore, sb)
    sb.append(Text.DELIMETER)
    TypoInet.text.unsafeEncode(row.inet, sb)
    sb.append(Text.DELIMETER)
    TypoShort.text.unsafeEncode(row.int2, sb)
    sb.append(Text.DELIMETER)
    TypoInt2Vector.text.unsafeEncode(row.int2vector, sb)
    sb.append(Text.DELIMETER)
    Text.intInstance.unsafeEncode(row.int4, sb)
    sb.append(Text.DELIMETER)
    Text.longInstance.unsafeEncode(row.int8, sb)
    sb.append(Text.DELIMETER)
    TypoInterval.text.unsafeEncode(row.interval, sb)
    sb.append(Text.DELIMETER)
    TypoJson.text.unsafeEncode(row.json, sb)
    sb.append(Text.DELIMETER)
    TypoJsonb.text.unsafeEncode(row.jsonb, sb)
    sb.append(Text.DELIMETER)
    TypoLine.text.unsafeEncode(row.line, sb)
    sb.append(Text.DELIMETER)
    TypoLineSegment.text.unsafeEncode(row.lseg, sb)
    sb.append(Text.DELIMETER)
    TypoMoney.text.unsafeEncode(row.money, sb)
    sb.append(Text.DELIMETER)
    Mydomain.text.unsafeEncode(row.mydomain, sb)
    sb.append(Text.DELIMETER)
    Myenum.text.unsafeEncode(row.myenum, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.bigDecimalInstance.unsafeEncode(row.numeric, sb)
    sb.append(Text.DELIMETER)
    TypoPath.text.unsafeEncode(row.path, sb)
    sb.append(Text.DELIMETER)
    TypoPoint.text.unsafeEncode(row.point, sb)
    sb.append(Text.DELIMETER)
    TypoPolygon.text.unsafeEncode(row.polygon, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.text, sb)
    sb.append(Text.DELIMETER)
    TypoLocalTime.text.unsafeEncode(row.time, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.timestamp, sb)
    sb.append(Text.DELIMETER)
    TypoInstant.text.unsafeEncode(row.timestampz, sb)
    sb.append(Text.DELIMETER)
    TypoOffsetTime.text.unsafeEncode(row.timez, sb)
    sb.append(Text.DELIMETER)
    TypoUUID.text.unsafeEncode(row.uuid, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.varchar, sb)
    sb.append(Text.DELIMETER)
    TypoVector.text.unsafeEncode(row.vector, sb)
    sb.append(Text.DELIMETER)
    TypoXml.text.unsafeEncode(row.xml, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoBox](TypoBox.text, implicitly).unsafeEncode(row.boxes, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.bpchares, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.chares, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoCircle](TypoCircle.text, implicitly).unsafeEncode(row.circlees, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLocalDate](TypoLocalDate.text, implicitly).unsafeEncode(row.datees, sb)
    sb.append(Text.DELIMETER)
    Text[Array[Float]].unsafeEncode(row.float4es, sb)
    sb.append(Text.DELIMETER)
    Text[Array[Double]].unsafeEncode(row.float8es, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoInet](TypoInet.text, implicitly).unsafeEncode(row.inetes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoShort](TypoShort.text, implicitly).unsafeEncode(row.int2es, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoInt2Vector](TypoInt2Vector.text, implicitly).unsafeEncode(row.int2vectores, sb)
    sb.append(Text.DELIMETER)
    Text[Array[Int]].unsafeEncode(row.int4es, sb)
    sb.append(Text.DELIMETER)
    Text[Array[Long]].unsafeEncode(row.int8es, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoInterval](TypoInterval.text, implicitly).unsafeEncode(row.intervales, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoJson](TypoJson.text, implicitly).unsafeEncode(row.jsones, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoJsonb](TypoJsonb.text, implicitly).unsafeEncode(row.jsonbes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLine](TypoLine.text, implicitly).unsafeEncode(row.linees, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLineSegment](TypoLineSegment.text, implicitly).unsafeEncode(row.lseges, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoMoney](TypoMoney.text, implicitly).unsafeEncode(row.moneyes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, Mydomain](Mydomain.text, implicitly).unsafeEncode(row.mydomaines, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, Myenum](Myenum.text, implicitly).unsafeEncode(row.myenumes, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.namees, sb)
    sb.append(Text.DELIMETER)
    Text[Array[BigDecimal]].unsafeEncode(row.numerices, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoPath](TypoPath.text, implicitly).unsafeEncode(row.pathes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoPoint](TypoPoint.text, implicitly).unsafeEncode(row.pointes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoPolygon](TypoPolygon.text, implicitly).unsafeEncode(row.polygones, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.textes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLocalTime](TypoLocalTime.text, implicitly).unsafeEncode(row.timees, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoLocalDateTime](TypoLocalDateTime.text, implicitly).unsafeEncode(row.timestampes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoInstant](TypoInstant.text, implicitly).unsafeEncode(row.timestampzes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoOffsetTime](TypoOffsetTime.text, implicitly).unsafeEncode(row.timezes, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoUUID](TypoUUID.text, implicitly).unsafeEncode(row.uuides, sb)
    sb.append(Text.DELIMETER)
    Text[Array[String]].unsafeEncode(row.varchares, sb)
    sb.append(Text.DELIMETER)
    Text.iterableInstance[Array, TypoXml](TypoXml.text, implicitly).unsafeEncode(row.xmles, sb)
  }
  implicit lazy val write: Write[PgtestRow] = new Write.Composite[PgtestRow](
    List(new Write.Single(Meta.BooleanMeta.put),
         new Write.Single(TypoBox.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(TypoBytea.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(TypoCircle.put),
         new Write.Single(TypoLocalDate.put),
         new Write.Single(Meta.FloatMeta.put),
         new Write.Single(Meta.DoubleMeta.put),
         new Write.Single(TypoHStore.put),
         new Write.Single(TypoInet.put),
         new Write.Single(TypoShort.put),
         new Write.Single(TypoInt2Vector.put),
         new Write.Single(Meta.IntMeta.put),
         new Write.Single(Meta.LongMeta.put),
         new Write.Single(TypoInterval.put),
         new Write.Single(TypoJson.put),
         new Write.Single(TypoJsonb.put),
         new Write.Single(TypoLine.put),
         new Write.Single(TypoLineSegment.put),
         new Write.Single(TypoMoney.put),
         new Write.Single(Mydomain.put),
         new Write.Single(Myenum.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.ScalaBigDecimalMeta.put),
         new Write.Single(TypoPath.put),
         new Write.Single(TypoPoint.put),
         new Write.Single(TypoPolygon.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(TypoLocalTime.put),
         new Write.Single(TypoLocalDateTime.put),
         new Write.Single(TypoInstant.put),
         new Write.Single(TypoOffsetTime.put),
         new Write.Single(TypoUUID.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(TypoVector.put),
         new Write.Single(TypoXml.put),
         new Write.Single(TypoBox.arrayPut),
         new Write.Single(adventureworks.StringArrayMeta.put),
         new Write.Single(adventureworks.StringArrayMeta.put),
         new Write.Single(TypoCircle.arrayPut),
         new Write.Single(TypoLocalDate.arrayPut),
         new Write.Single(adventureworks.FloatArrayMeta.put),
         new Write.Single(adventureworks.DoubleArrayMeta.put),
         new Write.Single(TypoInet.arrayPut),
         new Write.Single(TypoShort.arrayPut),
         new Write.Single(TypoInt2Vector.arrayPut),
         new Write.Single(adventureworks.IntegerArrayMeta.put),
         new Write.Single(adventureworks.LongArrayMeta.put),
         new Write.Single(TypoInterval.arrayPut),
         new Write.Single(TypoJson.arrayPut),
         new Write.Single(TypoJsonb.arrayPut),
         new Write.Single(TypoLine.arrayPut),
         new Write.Single(TypoLineSegment.arrayPut),
         new Write.Single(TypoMoney.arrayPut),
         new Write.Single(Mydomain.arrayPut),
         new Write.Single(Myenum.arrayPut),
         new Write.Single(adventureworks.StringArrayMeta.put),
         new Write.Single(adventureworks.BigDecimalMeta.put),
         new Write.Single(TypoPath.arrayPut),
         new Write.Single(TypoPoint.arrayPut),
         new Write.Single(TypoPolygon.arrayPut),
         new Write.Single(adventureworks.StringArrayMeta.put),
         new Write.Single(TypoLocalTime.arrayPut),
         new Write.Single(TypoLocalDateTime.arrayPut),
         new Write.Single(TypoInstant.arrayPut),
         new Write.Single(TypoOffsetTime.arrayPut),
         new Write.Single(TypoUUID.arrayPut),
         new Write.Single(adventureworks.StringArrayMeta.put),
         new Write.Single(TypoXml.arrayPut)),
    a => List(a.bool, a.box, a.bpchar, a.bytea, a.char, a.circle, a.date, a.float4, a.float8, a.hstore, a.inet, a.int2, a.int2vector, a.int4, a.int8, a.interval, a.json, a.jsonb, a.line, a.lseg, a.money, a.mydomain, a.myenum, a.name, a.numeric, a.path, a.point, a.polygon, a.text, a.time, a.timestamp, a.timestampz, a.timez, a.uuid, a.varchar, a.vector, a.xml, a.boxes, a.bpchares, a.chares, a.circlees, a.datees, a.float4es, a.float8es, a.inetes, a.int2es, a.int2vectores, a.int4es, a.int8es, a.intervales, a.jsones, a.jsonbes, a.linees, a.lseges, a.moneyes, a.mydomaines, a.myenumes, a.namees, a.numerices, a.pathes, a.pointes, a.polygones, a.textes, a.timees, a.timestampes, a.timestampzes, a.timezes, a.uuides, a.varchares, a.xmles)
  )
}
