/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_sak_soknadsalternativ

import adventureworks.public.test_utdanningstilbud.TestUtdanningstilbudId
import io.circe.Decoder
import io.circe.Encoder

/** Type for the composite primary key of table `public.test_sak_soknadsalternativ` */
case class TestSakSoknadsalternativId(
  organisasjonskodeSaksbehandler: String,
  utdanningsmulighetKode: String
)
object TestSakSoknadsalternativId {
  implicit lazy val decoder: Decoder[TestSakSoknadsalternativId] = Decoder.forProduct2[TestSakSoknadsalternativId, String, String]("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")(TestSakSoknadsalternativId.apply)(Decoder.decodeString, Decoder.decodeString)
  implicit lazy val encoder: Encoder[TestSakSoknadsalternativId] = Encoder.forProduct2[TestSakSoknadsalternativId, String, String]("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")(x => (x.organisasjonskodeSaksbehandler, x.utdanningsmulighetKode))(Encoder.encodeString, Encoder.encodeString)
  def from(TestUtdanningstilbudId: TestUtdanningstilbudId, organisasjonskodeSaksbehandler: String): TestSakSoknadsalternativId = TestSakSoknadsalternativId(
    organisasjonskodeSaksbehandler = organisasjonskodeSaksbehandler,
    utdanningsmulighetKode = TestUtdanningstilbudId.organisasjonskode
  )
  implicit lazy val ordering: Ordering[TestSakSoknadsalternativId] = Ordering.by(x => (x.organisasjonskodeSaksbehandler, x.utdanningsmulighetKode))
}
