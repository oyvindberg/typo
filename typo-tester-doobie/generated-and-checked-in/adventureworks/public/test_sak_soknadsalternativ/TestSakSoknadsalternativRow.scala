/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_sak_soknadsalternativ

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import adventureworks.public.test_utdanningstilbud.TestUtdanningstilbudId
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: public.test_sak_soknadsalternativ
    Composite primary key: organisasjonskode_saksbehandler, utdanningsmulighet_kode */
case class TestSakSoknadsalternativRow(
  organisasjonskodeSaksbehandler: String,
  /** Points to [[test_utdanningstilbud.TestUtdanningstilbudRow.utdanningsmulighetKode]] */
  utdanningsmulighetKode: String,
  /** Points to [[test_utdanningstilbud.TestUtdanningstilbudRow.organisasjonskode]] */
  organisasjonskodeTilbyder: TestOrganisasjonId
){
   val compositeId: TestSakSoknadsalternativId = TestSakSoknadsalternativId(organisasjonskodeSaksbehandler, utdanningsmulighetKode)
   val id = compositeId
   val extractTestUtdanningstilbudId: TestUtdanningstilbudId = TestUtdanningstilbudId(
     organisasjonskode = organisasjonskodeTilbyder,
     utdanningsmulighetKode = utdanningsmulighetKode
   )
 }

object TestSakSoknadsalternativRow {
  def apply(compositeId: TestSakSoknadsalternativId, organisasjonskodeTilbyder: TestOrganisasjonId) =
    new TestSakSoknadsalternativRow(compositeId.organisasjonskodeSaksbehandler, compositeId.utdanningsmulighetKode, organisasjonskodeTilbyder)
  implicit lazy val decoder: Decoder[TestSakSoknadsalternativRow] = Decoder.forProduct3[TestSakSoknadsalternativRow, String, String, TestOrganisasjonId]("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")(TestSakSoknadsalternativRow.apply)(Decoder.decodeString, Decoder.decodeString, TestOrganisasjonId.decoder)
  implicit lazy val encoder: Encoder[TestSakSoknadsalternativRow] = Encoder.forProduct3[TestSakSoknadsalternativRow, String, String, TestOrganisasjonId]("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")(x => (x.organisasjonskodeSaksbehandler, x.utdanningsmulighetKode, x.organisasjonskodeTilbyder))(Encoder.encodeString, Encoder.encodeString, TestOrganisasjonId.encoder)
  implicit lazy val read: Read[TestSakSoknadsalternativRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TestOrganisasjonId.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    TestSakSoknadsalternativRow(
      organisasjonskodeSaksbehandler = arr(0).asInstanceOf[String],
          utdanningsmulighetKode = arr(1).asInstanceOf[String],
          organisasjonskodeTilbyder = arr(2).asInstanceOf[TestOrganisasjonId]
    )
  }
  implicit lazy val text: Text[TestSakSoknadsalternativRow] = Text.instance[TestSakSoknadsalternativRow]{ (row, sb) =>
    Text.stringInstance.unsafeEncode(row.organisasjonskodeSaksbehandler, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.utdanningsmulighetKode, sb)
    sb.append(Text.DELIMETER)
    TestOrganisasjonId.text.unsafeEncode(row.organisasjonskodeTilbyder, sb)
  }
  implicit lazy val write: Write[TestSakSoknadsalternativRow] = new Write.Composite[TestSakSoknadsalternativRow](
    List(new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(TestOrganisasjonId.put)),
    a => List(a.organisasjonskodeSaksbehandler, a.utdanningsmulighetKode, a.organisasjonskodeTilbyder)
  )
}
