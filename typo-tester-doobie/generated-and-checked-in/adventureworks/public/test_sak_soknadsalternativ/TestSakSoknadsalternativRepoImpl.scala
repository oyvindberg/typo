/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_sak_soknadsalternativ

import adventureworks.public.test_organisasjon.TestOrganisasjonId
import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.meta.Meta
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class TestSakSoknadsalternativRepoImpl extends TestSakSoknadsalternativRepo {
  override def delete: DeleteBuilder[TestSakSoknadsalternativFields, TestSakSoknadsalternativRow] = {
    DeleteBuilder(""""public"."test_sak_soknadsalternativ"""", TestSakSoknadsalternativFields.structure)
  }
  override def deleteById(compositeId: TestSakSoknadsalternativId): ConnectionIO[Boolean] = {
    sql"""delete from "public"."test_sak_soknadsalternativ" where "organisasjonskode_saksbehandler" = ${fromWrite(compositeId.organisasjonskodeSaksbehandler)(new Write.Single(Meta.StringMeta.put))} AND "utdanningsmulighet_kode" = ${fromWrite(compositeId.utdanningsmulighetKode)(new Write.Single(Meta.StringMeta.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(compositeIds: Array[TestSakSoknadsalternativId]): ConnectionIO[Int] = {
    val organisasjonskodeSaksbehandler = compositeIds.map(_.organisasjonskodeSaksbehandler)
    val utdanningsmulighetKode = compositeIds.map(_.utdanningsmulighetKode)
    sql"""delete
          from "public"."test_sak_soknadsalternativ"
          where ("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")
          in (select unnest(${organisasjonskodeSaksbehandler}), unnest(${utdanningsmulighetKode}))
       """.update.run
    
  }
  override def insert(unsaved: TestSakSoknadsalternativRow): ConnectionIO[TestSakSoknadsalternativRow] = {
    sql"""insert into "public"."test_sak_soknadsalternativ"("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")
          values (${fromWrite(unsaved.organisasjonskodeSaksbehandler)(new Write.Single(Meta.StringMeta.put))}, ${fromWrite(unsaved.utdanningsmulighetKode)(new Write.Single(Meta.StringMeta.put))}, ${fromWrite(unsaved.organisasjonskodeTilbyder)(new Write.Single(TestOrganisasjonId.put))})
          returning "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder"
       """.query(using TestSakSoknadsalternativRow.read).unique
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, TestSakSoknadsalternativRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "public"."test_sak_soknadsalternativ"("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder") FROM STDIN""").copyIn(unsaved, batchSize)(using TestSakSoknadsalternativRow.text)
  }
  override def select: SelectBuilder[TestSakSoknadsalternativFields, TestSakSoknadsalternativRow] = {
    SelectBuilderSql(""""public"."test_sak_soknadsalternativ"""", TestSakSoknadsalternativFields.structure, TestSakSoknadsalternativRow.read)
  }
  override def selectAll: Stream[ConnectionIO, TestSakSoknadsalternativRow] = {
    sql"""select "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder" from "public"."test_sak_soknadsalternativ"""".query(using TestSakSoknadsalternativRow.read).stream
  }
  override def selectById(compositeId: TestSakSoknadsalternativId): ConnectionIO[Option[TestSakSoknadsalternativRow]] = {
    sql"""select "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder" from "public"."test_sak_soknadsalternativ" where "organisasjonskode_saksbehandler" = ${fromWrite(compositeId.organisasjonskodeSaksbehandler)(new Write.Single(Meta.StringMeta.put))} AND "utdanningsmulighet_kode" = ${fromWrite(compositeId.utdanningsmulighetKode)(new Write.Single(Meta.StringMeta.put))}""".query(using TestSakSoknadsalternativRow.read).option
  }
  override def selectByIds(compositeIds: Array[TestSakSoknadsalternativId]): Stream[ConnectionIO, TestSakSoknadsalternativRow] = {
    val organisasjonskodeSaksbehandler = compositeIds.map(_.organisasjonskodeSaksbehandler)
    val utdanningsmulighetKode = compositeIds.map(_.utdanningsmulighetKode)
    sql"""select "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder"
          from "public"."test_sak_soknadsalternativ"
          where ("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")
          in (select unnest(${organisasjonskodeSaksbehandler}), unnest(${utdanningsmulighetKode}))
       """.query(using TestSakSoknadsalternativRow.read).stream
    
  }
  override def selectByIdsTracked(compositeIds: Array[TestSakSoknadsalternativId]): ConnectionIO[Map[TestSakSoknadsalternativId, TestSakSoknadsalternativRow]] = {
    selectByIds(compositeIds).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.compositeId, x)).toMap
      compositeIds.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[TestSakSoknadsalternativFields, TestSakSoknadsalternativRow] = {
    UpdateBuilder(""""public"."test_sak_soknadsalternativ"""", TestSakSoknadsalternativFields.structure, TestSakSoknadsalternativRow.read)
  }
  override def update(row: TestSakSoknadsalternativRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update "public"."test_sak_soknadsalternativ"
          set "organisasjonskode_tilbyder" = ${fromWrite(row.organisasjonskodeTilbyder)(new Write.Single(TestOrganisasjonId.put))}
          where "organisasjonskode_saksbehandler" = ${fromWrite(compositeId.organisasjonskodeSaksbehandler)(new Write.Single(Meta.StringMeta.put))} AND "utdanningsmulighet_kode" = ${fromWrite(compositeId.utdanningsmulighetKode)(new Write.Single(Meta.StringMeta.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: TestSakSoknadsalternativRow): ConnectionIO[TestSakSoknadsalternativRow] = {
    sql"""insert into "public"."test_sak_soknadsalternativ"("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")
          values (
            ${fromWrite(unsaved.organisasjonskodeSaksbehandler)(new Write.Single(Meta.StringMeta.put))},
            ${fromWrite(unsaved.utdanningsmulighetKode)(new Write.Single(Meta.StringMeta.put))},
            ${fromWrite(unsaved.organisasjonskodeTilbyder)(new Write.Single(TestOrganisasjonId.put))}
          )
          on conflict ("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")
          do update set
            "organisasjonskode_tilbyder" = EXCLUDED."organisasjonskode_tilbyder"
          returning "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder"
       """.query(using TestSakSoknadsalternativRow.read).unique
  }
  override def upsertBatch(unsaved: List[TestSakSoknadsalternativRow]): Stream[ConnectionIO, TestSakSoknadsalternativRow] = {
    Update[TestSakSoknadsalternativRow](
      s"""insert into "public"."test_sak_soknadsalternativ"("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")
          values (?,?,?)
          on conflict ("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")
          do update set
            "organisasjonskode_tilbyder" = EXCLUDED."organisasjonskode_tilbyder"
          returning "organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder""""
    )(using TestSakSoknadsalternativRow.write)
    .updateManyWithGeneratedKeys[TestSakSoknadsalternativRow]("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")(unsaved)(using catsStdInstancesForList, TestSakSoknadsalternativRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, TestSakSoknadsalternativRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table test_sak_soknadsalternativ_TEMP (like "public"."test_sak_soknadsalternativ") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy test_sak_soknadsalternativ_TEMP("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder") from stdin""").copyIn(unsaved, batchSize)(using TestSakSoknadsalternativRow.text)
      res <- sql"""insert into "public"."test_sak_soknadsalternativ"("organisasjonskode_saksbehandler", "utdanningsmulighet_kode", "organisasjonskode_tilbyder")
                   select * from test_sak_soknadsalternativ_TEMP
                   on conflict ("organisasjonskode_saksbehandler", "utdanningsmulighet_kode")
                   do update set
                     "organisasjonskode_tilbyder" = EXCLUDED."organisasjonskode_tilbyder"
                   ;
                   drop table test_sak_soknadsalternativ_TEMP;""".update.run
    } yield res
  }
}
