/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public

import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import typo.dsl.Bijection

/** Domain `public.AccountNumber`
  * No constraint
  */
case class AccountNumber(value: String) extends AnyVal
object AccountNumber {
  implicit lazy val arrayGet: Get[Array[AccountNumber]] = adventureworks.StringArrayMeta.get.map(_.map(AccountNumber.apply))
  implicit lazy val arrayPut: Put[Array[AccountNumber]] = adventureworks.StringArrayMeta.put.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[AccountNumber, String] = Bijection[AccountNumber, String](_.value)(AccountNumber.apply)
  implicit lazy val decoder: Decoder[AccountNumber] = Decoder.decodeString.map(AccountNumber.apply)
  implicit lazy val encoder: Encoder[AccountNumber] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[AccountNumber] = Meta.StringMeta.get.map(AccountNumber.apply)
  implicit lazy val ordering: Ordering[AccountNumber] = Ordering.by(_.value)
  implicit lazy val put: Put[AccountNumber] = Meta.StringMeta.put.contramap(_.value)
  implicit lazy val text: Text[AccountNumber] = new Text[AccountNumber] {
    override def unsafeEncode(v: AccountNumber, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: AccountNumber, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}