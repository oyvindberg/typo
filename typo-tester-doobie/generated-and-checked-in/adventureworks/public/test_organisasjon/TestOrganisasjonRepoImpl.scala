/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package test_organisasjon

import cats.instances.list.catsStdInstancesForList
import doobie.free.connection.ConnectionIO
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.update.Update
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class TestOrganisasjonRepoImpl extends TestOrganisasjonRepo {
  override def delete: DeleteBuilder[TestOrganisasjonFields, TestOrganisasjonRow] = {
    DeleteBuilder(""""public"."test_organisasjon"""", TestOrganisasjonFields.structure)
  }
  override def deleteById(organisasjonskode: TestOrganisasjonId): ConnectionIO[Boolean] = {
    sql"""delete from "public"."test_organisasjon" where "organisasjonskode" = ${fromWrite(organisasjonskode)(Write.fromPut(TestOrganisasjonId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(organisasjonskodes: Array[TestOrganisasjonId]): ConnectionIO[Int] = {
    sql"""delete from "public"."test_organisasjon" where "organisasjonskode" = ANY(${organisasjonskodes})""".update.run
  }
  override def insert(unsaved: TestOrganisasjonRow): ConnectionIO[TestOrganisasjonRow] = {
    sql"""insert into "public"."test_organisasjon"("organisasjonskode")
          values (${fromWrite(unsaved.organisasjonskode)(Write.fromPut(TestOrganisasjonId.put))})
          returning "organisasjonskode"
       """.query(using TestOrganisasjonRow.read).unique
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, TestOrganisasjonRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY "public"."test_organisasjon"("organisasjonskode") FROM STDIN""").copyIn(unsaved, batchSize)(using TestOrganisasjonRow.text)
  }
  override def select: SelectBuilder[TestOrganisasjonFields, TestOrganisasjonRow] = {
    SelectBuilderSql(""""public"."test_organisasjon"""", TestOrganisasjonFields.structure, TestOrganisasjonRow.read)
  }
  override def selectAll: Stream[ConnectionIO, TestOrganisasjonRow] = {
    sql"""select "organisasjonskode" from "public"."test_organisasjon"""".query(using TestOrganisasjonRow.read).stream
  }
  override def selectById(organisasjonskode: TestOrganisasjonId): ConnectionIO[Option[TestOrganisasjonRow]] = {
    sql"""select "organisasjonskode" from "public"."test_organisasjon" where "organisasjonskode" = ${fromWrite(organisasjonskode)(Write.fromPut(TestOrganisasjonId.put))}""".query(using TestOrganisasjonRow.read).option
  }
  override def selectByIds(organisasjonskodes: Array[TestOrganisasjonId]): Stream[ConnectionIO, TestOrganisasjonRow] = {
    sql"""select "organisasjonskode" from "public"."test_organisasjon" where "organisasjonskode" = ANY(${organisasjonskodes})""".query(using TestOrganisasjonRow.read).stream
  }
  override def selectByIdsTracked(organisasjonskodes: Array[TestOrganisasjonId]): ConnectionIO[Map[TestOrganisasjonId, TestOrganisasjonRow]] = {
    selectByIds(organisasjonskodes).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.organisasjonskode, x)).toMap
      organisasjonskodes.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  override def update: UpdateBuilder[TestOrganisasjonFields, TestOrganisasjonRow] = {
    UpdateBuilder(""""public"."test_organisasjon"""", TestOrganisasjonFields.structure, TestOrganisasjonRow.read)
  }
  override def upsert(unsaved: TestOrganisasjonRow): ConnectionIO[TestOrganisasjonRow] = {
    sql"""insert into "public"."test_organisasjon"("organisasjonskode")
          values (
            ${fromWrite(unsaved.organisasjonskode)(Write.fromPut(TestOrganisasjonId.put))}
          )
          on conflict ("organisasjonskode")
          do update set "organisasjonskode" = EXCLUDED."organisasjonskode"
          returning "organisasjonskode"
       """.query(using TestOrganisasjonRow.read).unique
  }
  override def upsertBatch(unsaved: List[TestOrganisasjonRow]): Stream[ConnectionIO, TestOrganisasjonRow] = {
    Update[TestOrganisasjonRow](
      s"""insert into "public"."test_organisasjon"("organisasjonskode")
          values (?)
          on conflict ("organisasjonskode")
          do nothing
          returning "organisasjonskode""""
    )(using TestOrganisasjonRow.write)
    .updateManyWithGeneratedKeys[TestOrganisasjonRow]("organisasjonskode")(unsaved)(using catsStdInstancesForList, TestOrganisasjonRow.read)
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Stream[ConnectionIO, TestOrganisasjonRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"""create temporary table test_organisasjon_TEMP (like "public"."test_organisasjon") on commit drop""".update.run
      _ <- new FragmentOps(sql"""copy test_organisasjon_TEMP("organisasjonskode") from stdin""").copyIn(unsaved, batchSize)(using TestOrganisasjonRow.text)
      res <- sql"""insert into "public"."test_organisasjon"("organisasjonskode")
                   select * from test_organisasjon_TEMP
                   on conflict ("organisasjonskode")
                   do nothing
                   ;
                   drop table test_organisasjon_TEMP;""".update.run
    } yield res
  }
}
