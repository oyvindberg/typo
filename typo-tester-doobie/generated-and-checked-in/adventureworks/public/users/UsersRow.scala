/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package public
package users

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoInstant
import adventureworks.customtypes.TypoUnknownCitext
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: public.users
    Primary key: user_id */
case class UsersRow(
  userId: UsersId,
  name: String,
  lastName: Option[String],
  email: TypoUnknownCitext,
  password: String,
  /** Default: now() */
  createdAt: TypoInstant,
  verifiedOn: Option[TypoInstant]
){
   val id = userId
   def toUnsavedRow(createdAt: Defaulted[TypoInstant] = Defaulted.Provided(this.createdAt)): UsersRowUnsaved =
     UsersRowUnsaved(userId, name, lastName, email, password, verifiedOn, createdAt)
 }

object UsersRow {
  implicit lazy val decoder: Decoder[UsersRow] = Decoder.forProduct7[UsersRow, UsersId, String, Option[String], TypoUnknownCitext, String, TypoInstant, Option[TypoInstant]]("user_id", "name", "last_name", "email", "password", "created_at", "verified_on")(UsersRow.apply)(UsersId.decoder, Decoder.decodeString, Decoder.decodeOption(Decoder.decodeString), TypoUnknownCitext.decoder, Decoder.decodeString, TypoInstant.decoder, Decoder.decodeOption(TypoInstant.decoder))
  implicit lazy val encoder: Encoder[UsersRow] = Encoder.forProduct7[UsersRow, UsersId, String, Option[String], TypoUnknownCitext, String, TypoInstant, Option[TypoInstant]]("user_id", "name", "last_name", "email", "password", "created_at", "verified_on")(x => (x.userId, x.name, x.lastName, x.email, x.password, x.createdAt, x.verifiedOn))(UsersId.encoder, Encoder.encodeString, Encoder.encodeOption(Encoder.encodeString), TypoUnknownCitext.encoder, Encoder.encodeString, TypoInstant.encoder, Encoder.encodeOption(TypoInstant.encoder))
  implicit lazy val read: Read[UsersRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(UsersId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoUnknownCitext.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoInstant.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoInstant.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    UsersRow(
      userId = arr(0).asInstanceOf[UsersId],
          name = arr(1).asInstanceOf[String],
          lastName = arr(2).asInstanceOf[Option[String]],
          email = arr(3).asInstanceOf[TypoUnknownCitext],
          password = arr(4).asInstanceOf[String],
          createdAt = arr(5).asInstanceOf[TypoInstant],
          verifiedOn = arr(6).asInstanceOf[Option[TypoInstant]]
    )
  }
  implicit lazy val text: Text[UsersRow] = Text.instance[UsersRow]{ (row, sb) =>
    UsersId.text.unsafeEncode(row.userId, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.lastName, sb)
    sb.append(Text.DELIMETER)
    TypoUnknownCitext.text.unsafeEncode(row.email, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.password, sb)
    sb.append(Text.DELIMETER)
    TypoInstant.text.unsafeEncode(row.createdAt, sb)
    sb.append(Text.DELIMETER)
    Text.option(TypoInstant.text).unsafeEncode(row.verifiedOn, sb)
  }
  implicit lazy val write: Write[UsersRow] = new Write.Composite[UsersRow](
    List(new Write.Single(UsersId.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(TypoUnknownCitext.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(TypoInstant.put),
         new Write.Single(TypoInstant.put).toOpt),
    a => List(a.userId, a.name, a.lastName, a.email, a.password, a.createdAt, a.verifiedOn)
  )
}
