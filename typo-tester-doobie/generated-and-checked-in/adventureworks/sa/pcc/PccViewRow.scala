/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package pcc

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.userdefined.CustomCreditcardId
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder

/** View: sa.pcc */
case class PccViewRow(
  /** Points to [[sales.personcreditcard.PersoncreditcardRow.businessentityid]] */
  id: BusinessentityId,
  /** Points to [[sales.personcreditcard.PersoncreditcardRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[sales.personcreditcard.PersoncreditcardRow.creditcardid]] */
  creditcardid: /* user-picked */ CustomCreditcardId,
  /** Points to [[sales.personcreditcard.PersoncreditcardRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object PccViewRow {
  implicit lazy val decoder: Decoder[PccViewRow] = Decoder.forProduct4[PccViewRow, BusinessentityId, BusinessentityId, /* user-picked */ CustomCreditcardId, TypoLocalDateTime]("id", "businessentityid", "creditcardid", "modifieddate")(PccViewRow.apply)(BusinessentityId.decoder, BusinessentityId.decoder, CustomCreditcardId.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[PccViewRow] = Encoder.forProduct4[PccViewRow, BusinessentityId, BusinessentityId, /* user-picked */ CustomCreditcardId, TypoLocalDateTime]("id", "businessentityid", "creditcardid", "modifieddate")(x => (x.id, x.businessentityid, x.creditcardid, x.modifieddate))(BusinessentityId.encoder, BusinessentityId.encoder, CustomCreditcardId.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[PccViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(/* user-picked */ CustomCreditcardId.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PccViewRow(
      id = arr(0).asInstanceOf[BusinessentityId],
          businessentityid = arr(1).asInstanceOf[BusinessentityId],
          creditcardid = arr(2).asInstanceOf[/* user-picked */ CustomCreditcardId],
          modifieddate = arr(3).asInstanceOf[TypoLocalDateTime]
    )
  }
}
