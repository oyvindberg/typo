/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package s

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.customtypes.TypoXml
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder

/** View: sa.s */
case class SViewRow(
  /** Points to [[sales.store.StoreRow.businessentityid]] */
  id: BusinessentityId,
  /** Points to [[sales.store.StoreRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Points to [[sales.store.StoreRow.name]] */
  name: Name,
  /** Points to [[sales.store.StoreRow.salespersonid]] */
  salespersonid: Option[BusinessentityId],
  /** Points to [[sales.store.StoreRow.demographics]] */
  demographics: Option[TypoXml],
  /** Points to [[sales.store.StoreRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[sales.store.StoreRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object SViewRow {
  implicit lazy val decoder: Decoder[SViewRow] = Decoder.forProduct7[SViewRow, BusinessentityId, BusinessentityId, Name, Option[BusinessentityId], Option[TypoXml], TypoUUID, TypoLocalDateTime]("id", "businessentityid", "name", "salespersonid", "demographics", "rowguid", "modifieddate")(SViewRow.apply)(BusinessentityId.decoder, BusinessentityId.decoder, Name.decoder, Decoder.decodeOption(BusinessentityId.decoder), Decoder.decodeOption(TypoXml.decoder), TypoUUID.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[SViewRow] = Encoder.forProduct7[SViewRow, BusinessentityId, BusinessentityId, Name, Option[BusinessentityId], Option[TypoXml], TypoUUID, TypoLocalDateTime]("id", "businessentityid", "name", "salespersonid", "demographics", "rowguid", "modifieddate")(x => (x.id, x.businessentityid, x.name, x.salespersonid, x.demographics, x.rowguid, x.modifieddate))(BusinessentityId.encoder, BusinessentityId.encoder, Name.encoder, Encoder.encodeOption(BusinessentityId.encoder), Encoder.encodeOption(TypoXml.encoder), TypoUUID.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[SViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(TypoXml.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoUUID.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    SViewRow(
      id = arr(0).asInstanceOf[BusinessentityId],
          businessentityid = arr(1).asInstanceOf[BusinessentityId],
          name = arr(2).asInstanceOf[Name],
          salespersonid = arr(3).asInstanceOf[Option[BusinessentityId]],
          demographics = arr(4).asInstanceOf[Option[TypoXml]],
          rowguid = arr(5).asInstanceOf[TypoUUID],
          modifieddate = arr(6).asInstanceOf[TypoLocalDateTime]
    )
  }
}
