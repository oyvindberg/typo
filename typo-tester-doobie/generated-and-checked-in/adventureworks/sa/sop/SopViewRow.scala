/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sop

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.customtypes.TypoUUID
import adventureworks.production.product.ProductId
import adventureworks.sales.specialoffer.SpecialofferId
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder

/** View: sa.sop */
case class SopViewRow(
  /** Points to [[sales.specialofferproduct.SpecialofferproductRow.specialofferid]] */
  id: SpecialofferId,
  /** Points to [[sales.specialofferproduct.SpecialofferproductRow.specialofferid]] */
  specialofferid: SpecialofferId,
  /** Points to [[sales.specialofferproduct.SpecialofferproductRow.productid]] */
  productid: ProductId,
  /** Points to [[sales.specialofferproduct.SpecialofferproductRow.rowguid]] */
  rowguid: TypoUUID,
  /** Points to [[sales.specialofferproduct.SpecialofferproductRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object SopViewRow {
  implicit lazy val decoder: Decoder[SopViewRow] = Decoder.forProduct5[SopViewRow, SpecialofferId, SpecialofferId, ProductId, TypoUUID, TypoLocalDateTime]("id", "specialofferid", "productid", "rowguid", "modifieddate")(SopViewRow.apply)(SpecialofferId.decoder, SpecialofferId.decoder, ProductId.decoder, TypoUUID.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[SopViewRow] = Encoder.forProduct5[SopViewRow, SpecialofferId, SpecialofferId, ProductId, TypoUUID, TypoLocalDateTime]("id", "specialofferid", "productid", "rowguid", "modifieddate")(x => (x.id, x.specialofferid, x.productid, x.rowguid, x.modifieddate))(SpecialofferId.encoder, SpecialofferId.encoder, ProductId.encoder, TypoUUID.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[SopViewRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(SpecialofferId.get).asInstanceOf[Read[Any]],
      new Read.Single(SpecialofferId.get).asInstanceOf[Read[Any]],
      new Read.Single(ProductId.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoUUID.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    SopViewRow(
      id = arr(0).asInstanceOf[SpecialofferId],
          specialofferid = arr(1).asInstanceOf[SpecialofferId],
          productid = arr(2).asInstanceOf[ProductId],
          rowguid = arr(3).asInstanceOf[TypoUUID],
          modifieddate = arr(4).asInstanceOf[TypoLocalDateTime]
    )
  }
}
