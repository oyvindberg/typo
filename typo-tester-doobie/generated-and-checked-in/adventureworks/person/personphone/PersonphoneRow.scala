/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package personphone

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.phonenumbertype.PhonenumbertypeId
import adventureworks.public.Phone
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import io.circe.Decoder
import io.circe.Encoder

/** Table: person.personphone
    Telephone number and type of a person.
    Composite primary key: businessentityid, phonenumber, phonenumbertypeid */
case class PersonphoneRow(
  /** Business entity identification number. Foreign key to Person.BusinessEntityID.
      Points to [[person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Telephone number identification number. */
  phonenumber: Phone,
  /** Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.
      Points to [[phonenumbertype.PhonenumbertypeRow.phonenumbertypeid]] */
  phonenumbertypeid: PhonenumbertypeId,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val compositeId: PersonphoneId = PersonphoneId(businessentityid, phonenumber, phonenumbertypeid)
   val id = compositeId
   def toUnsavedRow(modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): PersonphoneRowUnsaved =
     PersonphoneRowUnsaved(businessentityid, phonenumber, phonenumbertypeid, modifieddate)
 }

object PersonphoneRow {
  def apply(compositeId: PersonphoneId, modifieddate: TypoLocalDateTime) =
    new PersonphoneRow(compositeId.businessentityid, compositeId.phonenumber, compositeId.phonenumbertypeid, modifieddate)
  implicit lazy val decoder: Decoder[PersonphoneRow] = Decoder.forProduct4[PersonphoneRow, BusinessentityId, Phone, PhonenumbertypeId, TypoLocalDateTime]("businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate")(PersonphoneRow.apply)(BusinessentityId.decoder, Phone.decoder, PhonenumbertypeId.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[PersonphoneRow] = Encoder.forProduct4[PersonphoneRow, BusinessentityId, Phone, PhonenumbertypeId, TypoLocalDateTime]("businessentityid", "phonenumber", "phonenumbertypeid", "modifieddate")(x => (x.businessentityid, x.phonenumber, x.phonenumbertypeid, x.modifieddate))(BusinessentityId.encoder, Phone.encoder, PhonenumbertypeId.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[PersonphoneRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(BusinessentityId.get).asInstanceOf[Read[Any]],
      new Read.Single(Phone.get).asInstanceOf[Read[Any]],
      new Read.Single(PhonenumbertypeId.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PersonphoneRow(
      businessentityid = arr(0).asInstanceOf[BusinessentityId],
          phonenumber = arr(1).asInstanceOf[Phone],
          phonenumbertypeid = arr(2).asInstanceOf[PhonenumbertypeId],
          modifieddate = arr(3).asInstanceOf[TypoLocalDateTime]
    )
  }
  implicit lazy val text: Text[PersonphoneRow] = Text.instance[PersonphoneRow]{ (row, sb) =>
    BusinessentityId.text.unsafeEncode(row.businessentityid, sb)
    sb.append(Text.DELIMETER)
    Phone.text.unsafeEncode(row.phonenumber, sb)
    sb.append(Text.DELIMETER)
    PhonenumbertypeId.text.unsafeEncode(row.phonenumbertypeid, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val write: Write[PersonphoneRow] = new Write.Composite[PersonphoneRow](
    List(new Write.Single(BusinessentityId.put),
         new Write.Single(Phone.put),
         new Write.Single(PhonenumbertypeId.put),
         new Write.Single(TypoLocalDateTime.put)),
    a => List(a.businessentityid, a.phonenumber, a.phonenumbertypeid, a.modifieddate)
  )
}
