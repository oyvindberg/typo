/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package vstateprovincecountryregion

import adventureworks.person.countryregion.CountryregionId
import adventureworks.person.stateprovince.StateprovinceId
import adventureworks.public.Flag
import adventureworks.public.Name
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Materialized View: person.vstateprovincecountryregion */
case class VstateprovincecountryregionMVRow(
  /** Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: StateprovinceId,
  /** Points to [[stateprovince.StateprovinceRow.stateprovincecode]] */
  stateprovincecode: /* bpchar, max 3 chars */ String,
  /** Points to [[stateprovince.StateprovinceRow.isonlystateprovinceflag]] */
  isonlystateprovinceflag: Flag,
  /** Points to [[stateprovince.StateprovinceRow.name]] */
  stateprovincename: Name,
  /** Points to [[stateprovince.StateprovinceRow.territoryid]] */
  territoryid: SalesterritoryId,
  /** Points to [[countryregion.CountryregionRow.countryregioncode]] */
  countryregioncode: CountryregionId,
  /** Points to [[countryregion.CountryregionRow.name]] */
  countryregionname: Name
)

object VstateprovincecountryregionMVRow {
  implicit lazy val decoder: Decoder[VstateprovincecountryregionMVRow] = Decoder.forProduct7[VstateprovincecountryregionMVRow, StateprovinceId, /* bpchar, max 3 chars */ String, Flag, Name, SalesterritoryId, CountryregionId, Name]("stateprovinceid", "stateprovincecode", "isonlystateprovinceflag", "stateprovincename", "territoryid", "countryregioncode", "countryregionname")(VstateprovincecountryregionMVRow.apply)(StateprovinceId.decoder, Decoder.decodeString, Flag.decoder, Name.decoder, SalesterritoryId.decoder, CountryregionId.decoder, Name.decoder)
  implicit lazy val encoder: Encoder[VstateprovincecountryregionMVRow] = Encoder.forProduct7[VstateprovincecountryregionMVRow, StateprovinceId, /* bpchar, max 3 chars */ String, Flag, Name, SalesterritoryId, CountryregionId, Name]("stateprovinceid", "stateprovincecode", "isonlystateprovinceflag", "stateprovincename", "territoryid", "countryregioncode", "countryregionname")(x => (x.stateprovinceid, x.stateprovincecode, x.isonlystateprovinceflag, x.stateprovincename, x.territoryid, x.countryregioncode, x.countryregionname))(StateprovinceId.encoder, Encoder.encodeString, Flag.encoder, Name.encoder, SalesterritoryId.encoder, CountryregionId.encoder, Name.encoder)
  implicit lazy val read: Read[VstateprovincecountryregionMVRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(StateprovinceId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Flag.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.Single(SalesterritoryId.get).asInstanceOf[Read[Any]],
      new Read.Single(CountryregionId.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    VstateprovincecountryregionMVRow(
      stateprovinceid = arr(0).asInstanceOf[StateprovinceId],
          stateprovincecode = arr(1).asInstanceOf[/* bpchar, max 3 chars */ String],
          isonlystateprovinceflag = arr(2).asInstanceOf[Flag],
          stateprovincename = arr(3).asInstanceOf[Name],
          territoryid = arr(4).asInstanceOf[SalesterritoryId],
          countryregioncode = arr(5).asInstanceOf[CountryregionId],
          countryregionname = arr(6).asInstanceOf[Name]
    )
  }
}
