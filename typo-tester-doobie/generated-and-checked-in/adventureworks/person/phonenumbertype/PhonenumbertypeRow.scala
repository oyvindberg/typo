/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package phonenumbertype

import adventureworks.customtypes.Defaulted
import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.public.Name
import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import io.circe.Decoder
import io.circe.Encoder

/** Table: person.phonenumbertype
    Type of phone number of a person.
    Primary key: phonenumbertypeid */
case class PhonenumbertypeRow(
  /** Primary key for telephone number type records.
      Default: nextval('person.phonenumbertype_phonenumbertypeid_seq'::regclass) */
  phonenumbertypeid: PhonenumbertypeId,
  /** Name of the telephone number type */
  name: Name,
  /** Default: now() */
  modifieddate: TypoLocalDateTime
){
   val id = phonenumbertypeid
   def toUnsavedRow(phonenumbertypeid: Defaulted[PhonenumbertypeId], modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.Provided(this.modifieddate)): PhonenumbertypeRowUnsaved =
     PhonenumbertypeRowUnsaved(name, phonenumbertypeid, modifieddate)
 }

object PhonenumbertypeRow {
  implicit lazy val decoder: Decoder[PhonenumbertypeRow] = Decoder.forProduct3[PhonenumbertypeRow, PhonenumbertypeId, Name, TypoLocalDateTime]("phonenumbertypeid", "name", "modifieddate")(PhonenumbertypeRow.apply)(PhonenumbertypeId.decoder, Name.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[PhonenumbertypeRow] = Encoder.forProduct3[PhonenumbertypeRow, PhonenumbertypeId, Name, TypoLocalDateTime]("phonenumbertypeid", "name", "modifieddate")(x => (x.phonenumbertypeid, x.name, x.modifieddate))(PhonenumbertypeId.encoder, Name.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[PhonenumbertypeRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(PhonenumbertypeId.get).asInstanceOf[Read[Any]],
      new Read.Single(Name.get).asInstanceOf[Read[Any]],
      new Read.Single(TypoLocalDateTime.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PhonenumbertypeRow(
      phonenumbertypeid = arr(0).asInstanceOf[PhonenumbertypeId],
          name = arr(1).asInstanceOf[Name],
          modifieddate = arr(2).asInstanceOf[TypoLocalDateTime]
    )
  }
  implicit lazy val text: Text[PhonenumbertypeRow] = Text.instance[PhonenumbertypeRow]{ (row, sb) =>
    PhonenumbertypeId.text.unsafeEncode(row.phonenumbertypeid, sb)
    sb.append(Text.DELIMETER)
    Name.text.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    TypoLocalDateTime.text.unsafeEncode(row.modifieddate, sb)
  }
  implicit lazy val write: Write[PhonenumbertypeRow] = new Write.Composite[PhonenumbertypeRow](
    List(new Write.Single(PhonenumbertypeId.put),
         new Write.Single(Name.put),
         new Write.Single(TypoLocalDateTime.put)),
    a => List(a.phonenumbertypeid, a.name, a.modifieddate)
  )
}
