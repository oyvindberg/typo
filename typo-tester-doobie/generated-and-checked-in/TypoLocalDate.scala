/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import cats.data.NonEmptyList
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import java.time.LocalDate

/** This is `java.time.LocalDate`, but transferred to and from postgres as strings. The reason is that postgres driver and db libs are broken */
case class TypoLocalDate(value: LocalDate)

object TypoLocalDate {
  def now = TypoLocalDate(LocalDate.now)
  implicit val arrayGet: Get[Array[TypoLocalDate]] = Get.Advanced.array[AnyRef](NonEmptyList.one("_text"))
    .map(_.map(v => TypoLocalDate(LocalDate.parse(v.asInstanceOf[String]))))
  implicit val arrayPut: Put[Array[TypoLocalDate]] = Put.Advanced.array[AnyRef](NonEmptyList.one("_text"), "text")
    .contramap(_.map(v => v.value.toString))
  implicit val decoder: Decoder[TypoLocalDate] = Decoder.forProduct1[TypoLocalDate, LocalDate]("value")(TypoLocalDate.apply)(Decoder.decodeLocalDate)
  implicit val encoder: Encoder[TypoLocalDate] = Encoder.forProduct1[TypoLocalDate, LocalDate]("value")(x => (x.value))(Encoder.encodeLocalDate)
  implicit val get: Get[TypoLocalDate] = Get.Advanced.other[String](NonEmptyList.one("text"))
    .map(v => TypoLocalDate(LocalDate.parse(v)))
  implicit val put: Put[TypoLocalDate] = Put.Advanced.other[String](NonEmptyList.one("text")).contramap(v => v.value.toString)
}
