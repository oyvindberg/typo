/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package stateprovince

import adventureworks.Defaulted
import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Flag
import adventureworks.public.Name
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object StateprovinceRepoImpl extends StateprovinceRepo {
  override def delete(stateprovinceid: StateprovinceId): ConnectionIO[Boolean] = {
    sql"delete from person.stateprovince where stateprovinceid = $stateprovinceid".update.run.map(_ > 0)
  }
  override def insert(unsaved: StateprovinceRow): ConnectionIO[StateprovinceRow] = {
    sql"""insert into person.stateprovince(stateprovinceid, stateprovincecode, countryregioncode, isonlystateprovinceflag, "name", territoryid, rowguid, modifieddate)
          values (${unsaved.stateprovinceid}::int4, ${unsaved.stateprovincecode}::bpchar, ${unsaved.countryregioncode}, ${unsaved.isonlystateprovinceflag}::"public"."Flag", ${unsaved.name}::"public"."Name", ${unsaved.territoryid}::int4, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning stateprovinceid, stateprovincecode, countryregioncode, isonlystateprovinceflag, "name", territoryid, rowguid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: StateprovinceRowUnsaved): ConnectionIO[StateprovinceRow] = {
    val fs = List(
      Some((Fragment.const(s"stateprovincecode"), fr"${unsaved.stateprovincecode}::bpchar")),
      Some((Fragment.const(s"countryregioncode"), fr"${unsaved.countryregioncode}")),
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      Some((Fragment.const(s"territoryid"), fr"${unsaved.territoryid}::int4")),
      unsaved.stateprovinceid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"stateprovinceid"), fr"${value: StateprovinceId}::int4"))
      },
      unsaved.isonlystateprovinceflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"isonlystateprovinceflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into person.stateprovince default values
            returning stateprovinceid, stateprovincecode, countryregioncode, isonlystateprovinceflag, "name", territoryid, rowguid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into person.stateprovince(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning stateprovinceid, stateprovincecode, countryregioncode, isonlystateprovinceflag, "name", territoryid, rowguid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, StateprovinceRow] = {
    sql"""select stateprovinceid, stateprovincecode, countryregioncode, isonlystateprovinceflag, "name", territoryid, rowguid, modifieddate from person.stateprovince""".query[StateprovinceRow].stream
  }
  override def selectByFieldValues(fieldValues: List[StateprovinceFieldOrIdValue[_]]): Stream[ConnectionIO, StateprovinceRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case StateprovinceFieldValue.stateprovinceid(value) => fr"stateprovinceid = $value"
        case StateprovinceFieldValue.stateprovincecode(value) => fr"stateprovincecode = $value"
        case StateprovinceFieldValue.countryregioncode(value) => fr"countryregioncode = $value"
        case StateprovinceFieldValue.isonlystateprovinceflag(value) => fr"isonlystateprovinceflag = $value"
        case StateprovinceFieldValue.name(value) => fr""""name" = $value"""
        case StateprovinceFieldValue.territoryid(value) => fr"territoryid = $value"
        case StateprovinceFieldValue.rowguid(value) => fr"rowguid = $value"
        case StateprovinceFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from person.stateprovince $where".query[StateprovinceRow].stream
  
  }
  override def selectById(stateprovinceid: StateprovinceId): ConnectionIO[Option[StateprovinceRow]] = {
    sql"""select stateprovinceid, stateprovincecode, countryregioncode, isonlystateprovinceflag, "name", territoryid, rowguid, modifieddate from person.stateprovince where stateprovinceid = $stateprovinceid""".query[StateprovinceRow].option
  }
  override def selectByIds(stateprovinceids: Array[StateprovinceId]): Stream[ConnectionIO, StateprovinceRow] = {
    sql"""select stateprovinceid, stateprovincecode, countryregioncode, isonlystateprovinceflag, "name", territoryid, rowguid, modifieddate from person.stateprovince where stateprovinceid = ANY($stateprovinceids)""".query[StateprovinceRow].stream
  }
  override def update(row: StateprovinceRow): ConnectionIO[Boolean] = {
    val stateprovinceid = row.stateprovinceid
    sql"""update person.stateprovince
          set stateprovincecode = ${row.stateprovincecode}::bpchar,
              countryregioncode = ${row.countryregioncode},
              isonlystateprovinceflag = ${row.isonlystateprovinceflag}::"public"."Flag",
              "name" = ${row.name}::"public"."Name",
              territoryid = ${row.territoryid}::int4,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where stateprovinceid = $stateprovinceid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(stateprovinceid: StateprovinceId, fieldValues: List[StateprovinceFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case StateprovinceFieldValue.stateprovincecode(value) => fr"stateprovincecode = $value"
            case StateprovinceFieldValue.countryregioncode(value) => fr"countryregioncode = $value"
            case StateprovinceFieldValue.isonlystateprovinceflag(value) => fr"isonlystateprovinceflag = $value"
            case StateprovinceFieldValue.name(value) => fr""""name" = $value"""
            case StateprovinceFieldValue.territoryid(value) => fr"territoryid = $value"
            case StateprovinceFieldValue.rowguid(value) => fr"rowguid = $value"
            case StateprovinceFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update person.stateprovince
              $updates
              where stateprovinceid = $stateprovinceid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: StateprovinceRow): ConnectionIO[StateprovinceRow] = {
    sql"""insert into person.stateprovince(stateprovinceid, stateprovincecode, countryregioncode, isonlystateprovinceflag, "name", territoryid, rowguid, modifieddate)
          values (
            ${unsaved.stateprovinceid}::int4,
            ${unsaved.stateprovincecode}::bpchar,
            ${unsaved.countryregioncode},
            ${unsaved.isonlystateprovinceflag}::"public"."Flag",
            ${unsaved.name}::"public"."Name",
            ${unsaved.territoryid}::int4,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (stateprovinceid)
          do update set
            stateprovincecode = EXCLUDED.stateprovincecode,
            countryregioncode = EXCLUDED.countryregioncode,
            isonlystateprovinceflag = EXCLUDED.isonlystateprovinceflag,
            "name" = EXCLUDED."name",
            territoryid = EXCLUDED.territoryid,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning stateprovinceid, stateprovincecode, countryregioncode, isonlystateprovinceflag, "name", territoryid, rowguid, modifieddate
       """.query.unique
  }
  implicit val read: Read[StateprovinceRow] =
    new Read[StateprovinceRow](
      gets = List(
        (Get[StateprovinceId], Nullability.NoNulls),
        (Get[/* bpchar */ String], Nullability.NoNulls),
        (Get[CountryregionId], Nullability.NoNulls),
        (Get[Flag], Nullability.NoNulls),
        (Get[Name], Nullability.NoNulls),
        (Get[SalesterritoryId], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => StateprovinceRow(
        stateprovinceid = Get[StateprovinceId].unsafeGetNonNullable(rs, i + 0),
        stateprovincecode = Get[/* bpchar */ String].unsafeGetNonNullable(rs, i + 1),
        countryregioncode = Get[CountryregionId].unsafeGetNonNullable(rs, i + 2),
        isonlystateprovinceflag = Get[Flag].unsafeGetNonNullable(rs, i + 3),
        name = Get[Name].unsafeGetNonNullable(rs, i + 4),
        territoryid = Get[SalesterritoryId].unsafeGetNonNullable(rs, i + 5),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 6),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 7)
      )
    )
  

}
