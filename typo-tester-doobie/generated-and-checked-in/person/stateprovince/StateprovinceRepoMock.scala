/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package stateprovince

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class StateprovinceRepoMock(toRow: Function1[StateprovinceRowUnsaved, StateprovinceRow],
                            map: scala.collection.mutable.Map[StateprovinceId, StateprovinceRow] = scala.collection.mutable.Map.empty) extends StateprovinceRepo {
  override def delete(stateprovinceid: StateprovinceId): ConnectionIO[Boolean] = {
    delay(map.remove(stateprovinceid).isDefined)
  }
  override def insert(unsaved: StateprovinceRow): ConnectionIO[StateprovinceRow] = {
    delay {
      if (map.contains(unsaved.stateprovinceid))
        sys.error(s"id ${unsaved.stateprovinceid} already exists")
      else
        map.put(unsaved.stateprovinceid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: StateprovinceRowUnsaved): ConnectionIO[StateprovinceRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, StateprovinceRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(stateprovinceid: StateprovinceId): ConnectionIO[Option[StateprovinceRow]] = {
    delay(map.get(stateprovinceid))
  }
  override def selectByIds(stateprovinceids: Array[StateprovinceId]): Stream[ConnectionIO, StateprovinceRow] = {
    Stream.emits(stateprovinceids.flatMap(map.get).toList)
  }
  override def update(row: StateprovinceRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.stateprovinceid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.stateprovinceid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: StateprovinceRow): ConnectionIO[StateprovinceRow] = {
    delay {
      map.put(unsaved.stateprovinceid, unsaved)
      unsaved
    }
  }
}
