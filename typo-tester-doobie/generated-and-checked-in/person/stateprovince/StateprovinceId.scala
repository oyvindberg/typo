/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package stateprovince

import doobie.util.Get
import doobie.util.Put
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import typo.dsl.Bijection

/** Type for the primary key of table `person.stateprovince` */
case class StateprovinceId(value: Int) extends AnyVal
object StateprovinceId {
  implicit val arrayGet: Get[Array[StateprovinceId]] = adventureworks.IntegerArrayMeta.get.map(_.map(StateprovinceId.apply))
  implicit val arrayPut: Put[Array[StateprovinceId]] = adventureworks.IntegerArrayMeta.put.contramap(_.map(_.value))
  implicit val bijection: Bijection[StateprovinceId, Int] = Bijection[StateprovinceId, Int](_.value)(StateprovinceId.apply)
  implicit val decoder: Decoder[StateprovinceId] = Decoder.decodeInt.map(StateprovinceId.apply)
  implicit val encoder: Encoder[StateprovinceId] = Encoder.encodeInt.contramap(_.value)
  implicit val get: Get[StateprovinceId] = Meta.IntMeta.get.map(StateprovinceId.apply)
  implicit val ordering: Ordering[StateprovinceId] = Ordering.by(_.value)
  implicit val put: Put[StateprovinceId] = Meta.IntMeta.put.contramap(_.value)
}
