/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package address

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class AddressRepoMock(toRow: Function1[AddressRowUnsaved, AddressRow],
                      map: scala.collection.mutable.Map[AddressId, AddressRow] = scala.collection.mutable.Map.empty) extends AddressRepo {
  override def delete(addressid: AddressId): ConnectionIO[Boolean] = {
    delay(map.remove(addressid).isDefined)
  }
  override def insert(unsaved: AddressRow): ConnectionIO[AddressRow] = {
    delay {
      if (map.contains(unsaved.addressid))
        sys.error(s"id ${unsaved.addressid} already exists")
      else
        map.put(unsaved.addressid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: AddressRowUnsaved): ConnectionIO[AddressRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, AddressRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[AddressFieldOrIdValue[_]]): Stream[ConnectionIO, AddressRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, AddressFieldValue.addressid(value)) => acc.filter(_.addressid == value)
        case (acc, AddressFieldValue.addressline1(value)) => acc.filter(_.addressline1 == value)
        case (acc, AddressFieldValue.addressline2(value)) => acc.filter(_.addressline2 == value)
        case (acc, AddressFieldValue.city(value)) => acc.filter(_.city == value)
        case (acc, AddressFieldValue.stateprovinceid(value)) => acc.filter(_.stateprovinceid == value)
        case (acc, AddressFieldValue.postalcode(value)) => acc.filter(_.postalcode == value)
        case (acc, AddressFieldValue.spatiallocation(value)) => acc.filter(_.spatiallocation == value)
        case (acc, AddressFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
        case (acc, AddressFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(addressid: AddressId): ConnectionIO[Option[AddressRow]] = {
    delay(map.get(addressid))
  }
  override def selectByIds(addressids: Array[AddressId]): Stream[ConnectionIO, AddressRow] = {
    Stream.emits(addressids.flatMap(map.get).toList)
  }
  override def update(row: AddressRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.addressid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.addressid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(addressid: AddressId, fieldValues: List[AddressFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(addressid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, AddressFieldValue.addressline1(value)) => acc.copy(addressline1 = value)
            case (acc, AddressFieldValue.addressline2(value)) => acc.copy(addressline2 = value)
            case (acc, AddressFieldValue.city(value)) => acc.copy(city = value)
            case (acc, AddressFieldValue.stateprovinceid(value)) => acc.copy(stateprovinceid = value)
            case (acc, AddressFieldValue.postalcode(value)) => acc.copy(postalcode = value)
            case (acc, AddressFieldValue.spatiallocation(value)) => acc.copy(spatiallocation = value)
            case (acc, AddressFieldValue.rowguid(value)) => acc.copy(rowguid = value)
            case (acc, AddressFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(addressid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: AddressRow): ConnectionIO[AddressRow] = {
    delay {
      map.put(unsaved.addressid, unsaved)
      unsaved
    }
  }
}
