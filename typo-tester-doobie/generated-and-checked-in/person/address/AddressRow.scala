/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package address

import adventureworks.TypoLocalDateTime
import adventureworks.person.stateprovince.StateprovinceId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class AddressRow(
  /** Primary key for Address records. */
  addressid: AddressId,
  /** First street address line. */
  addressline1: /* max 60 chars */ String,
  /** Second street address line. */
  addressline2: Option[/* max 60 chars */ String],
  /** Name of the city. */
  city: /* max 30 chars */ String,
  /** Unique identification number for the state or province. Foreign key to StateProvince table.
      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: StateprovinceId,
  /** Postal code for the street address. */
  postalcode: /* max 15 chars */ String,
  /** Latitude and longitude of this address. */
  spatiallocation: Option[Array[Byte]],
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object AddressRow {
  implicit val decoder: Decoder[AddressRow] = Decoder.forProduct9[AddressRow, AddressId, /* max 60 chars */ String, Option[/* max 60 chars */ String], /* max 30 chars */ String, StateprovinceId, /* max 15 chars */ String, Option[Array[Byte]], UUID, TypoLocalDateTime]("addressid", "addressline1", "addressline2", "city", "stateprovinceid", "postalcode", "spatiallocation", "rowguid", "modifieddate")(AddressRow.apply)
  implicit val encoder: Encoder[AddressRow] = Encoder.forProduct9[AddressRow, AddressId, /* max 60 chars */ String, Option[/* max 60 chars */ String], /* max 30 chars */ String, StateprovinceId, /* max 15 chars */ String, Option[Array[Byte]], UUID, TypoLocalDateTime]("addressid", "addressline1", "addressline2", "city", "stateprovinceid", "postalcode", "spatiallocation", "rowguid", "modifieddate")(x => (x.addressid, x.addressline1, x.addressline2, x.city, x.stateprovinceid, x.postalcode, x.spatiallocation, x.rowguid, x.modifieddate))
  implicit val read: Read[AddressRow] = new Read[AddressRow](
    gets = List(
      (Get[AddressId], Nullability.NoNulls),
      (Get[/* max 60 chars */ String], Nullability.NoNulls),
      (Get[/* max 60 chars */ String], Nullability.Nullable),
      (Get[/* max 30 chars */ String], Nullability.NoNulls),
      (Get[StateprovinceId], Nullability.NoNulls),
      (Get[/* max 15 chars */ String], Nullability.NoNulls),
      (Get[Array[Byte]], Nullability.Nullable),
      (Get[UUID], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => AddressRow(
      addressid = Get[AddressId].unsafeGetNonNullable(rs, i + 0),
      addressline1 = Get[/* max 60 chars */ String].unsafeGetNonNullable(rs, i + 1),
      addressline2 = Get[/* max 60 chars */ String].unsafeGetNullable(rs, i + 2),
      city = Get[/* max 30 chars */ String].unsafeGetNonNullable(rs, i + 3),
      stateprovinceid = Get[StateprovinceId].unsafeGetNonNullable(rs, i + 4),
      postalcode = Get[/* max 15 chars */ String].unsafeGetNonNullable(rs, i + 5),
      spatiallocation = Get[Array[Byte]].unsafeGetNullable(rs, i + 6),
      rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 7),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 8)
    )
  )
}
