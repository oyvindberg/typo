/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package contacttype

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class ContacttypeRepoMock(toRow: Function1[ContacttypeRowUnsaved, ContacttypeRow],
                          map: scala.collection.mutable.Map[ContacttypeId, ContacttypeRow] = scala.collection.mutable.Map.empty) extends ContacttypeRepo {
  override def delete(contacttypeid: ContacttypeId): ConnectionIO[Boolean] = {
    delay(map.remove(contacttypeid).isDefined)
  }
  override def insert(unsaved: ContacttypeRow): ConnectionIO[ContacttypeRow] = {
    delay {
      if (map.contains(unsaved.contacttypeid))
        sys.error(s"id ${unsaved.contacttypeid} already exists")
      else
        map.put(unsaved.contacttypeid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: ContacttypeRowUnsaved): ConnectionIO[ContacttypeRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, ContacttypeRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(contacttypeid: ContacttypeId): ConnectionIO[Option[ContacttypeRow]] = {
    delay(map.get(contacttypeid))
  }
  override def selectByIds(contacttypeids: Array[ContacttypeId]): Stream[ConnectionIO, ContacttypeRow] = {
    Stream.emits(contacttypeids.flatMap(map.get).toList)
  }
  override def update(row: ContacttypeRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.contacttypeid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.contacttypeid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: ContacttypeRow): ConnectionIO[ContacttypeRow] = {
    delay {
      map.put(unsaved.contacttypeid, unsaved)
      unsaved
    }
  }
}
