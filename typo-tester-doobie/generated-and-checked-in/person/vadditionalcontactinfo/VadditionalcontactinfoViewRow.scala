/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package vadditionalcontactinfo

import adventureworks.TypoXml
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

case class VadditionalcontactinfoViewRow(
  /** Points to [[person.PersonRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[person.PersonRow.firstname]] */
  firstname: Option[Name],
  /** Points to [[person.PersonRow.middlename]] */
  middlename: Option[Name],
  /** Points to [[person.PersonRow.lastname]] */
  lastname: Option[Name],
  telephonenumber: Option[TypoXml],
  telephonespecialinstructions: Option[String],
  street: Option[TypoXml],
  city: Option[TypoXml],
  stateprovince: Option[TypoXml],
  postalcode: Option[TypoXml],
  countryregion: Option[TypoXml],
  homeaddressspecialinstructions: Option[TypoXml],
  emailaddress: Option[TypoXml],
  emailspecialinstructions: Option[String],
  emailtelephonenumber: Option[TypoXml],
  /** Points to [[person.PersonRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[person.PersonRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object VadditionalcontactinfoViewRow {
  implicit val decoder: Decoder[VadditionalcontactinfoViewRow] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[Option[BusinessentityId]]
        firstname <- c.downField("firstname").as[Option[Name]]
        middlename <- c.downField("middlename").as[Option[Name]]
        lastname <- c.downField("lastname").as[Option[Name]]
        telephonenumber <- c.downField("telephonenumber").as[Option[TypoXml]]
        telephonespecialinstructions <- c.downField("telephonespecialinstructions").as[Option[String]]
        street <- c.downField("street").as[Option[TypoXml]]
        city <- c.downField("city").as[Option[TypoXml]]
        stateprovince <- c.downField("stateprovince").as[Option[TypoXml]]
        postalcode <- c.downField("postalcode").as[Option[TypoXml]]
        countryregion <- c.downField("countryregion").as[Option[TypoXml]]
        homeaddressspecialinstructions <- c.downField("homeaddressspecialinstructions").as[Option[TypoXml]]
        emailaddress <- c.downField("emailaddress").as[Option[TypoXml]]
        emailspecialinstructions <- c.downField("emailspecialinstructions").as[Option[String]]
        emailtelephonenumber <- c.downField("emailtelephonenumber").as[Option[TypoXml]]
        rowguid <- c.downField("rowguid").as[Option[UUID]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield VadditionalcontactinfoViewRow(businessentityid, firstname, middlename, lastname, telephonenumber, telephonespecialinstructions, street, city, stateprovince, postalcode, countryregion, homeaddressspecialinstructions, emailaddress, emailspecialinstructions, emailtelephonenumber, rowguid, modifieddate)
  implicit val encoder: Encoder[VadditionalcontactinfoViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "firstname" := row.firstname,
        "middlename" := row.middlename,
        "lastname" := row.lastname,
        "telephonenumber" := row.telephonenumber,
        "telephonespecialinstructions" := row.telephonespecialinstructions,
        "street" := row.street,
        "city" := row.city,
        "stateprovince" := row.stateprovince,
        "postalcode" := row.postalcode,
        "countryregion" := row.countryregion,
        "homeaddressspecialinstructions" := row.homeaddressspecialinstructions,
        "emailaddress" := row.emailaddress,
        "emailspecialinstructions" := row.emailspecialinstructions,
        "emailtelephonenumber" := row.emailtelephonenumber,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
