/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package phonenumbertype

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class PhonenumbertypeRepoMock(toRow: Function1[PhonenumbertypeRowUnsaved, PhonenumbertypeRow],
                              map: scala.collection.mutable.Map[PhonenumbertypeId, PhonenumbertypeRow] = scala.collection.mutable.Map.empty) extends PhonenumbertypeRepo {
  override def delete(phonenumbertypeid: PhonenumbertypeId): ConnectionIO[Boolean] = {
    delay(map.remove(phonenumbertypeid).isDefined)
  }
  override def insert(unsaved: PhonenumbertypeRow): ConnectionIO[PhonenumbertypeRow] = {
    delay {
      if (map.contains(unsaved.phonenumbertypeid))
        sys.error(s"id ${unsaved.phonenumbertypeid} already exists")
      else
        map.put(unsaved.phonenumbertypeid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: PhonenumbertypeRowUnsaved): ConnectionIO[PhonenumbertypeRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, PhonenumbertypeRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(phonenumbertypeid: PhonenumbertypeId): ConnectionIO[Option[PhonenumbertypeRow]] = {
    delay(map.get(phonenumbertypeid))
  }
  override def selectByIds(phonenumbertypeids: Array[PhonenumbertypeId]): Stream[ConnectionIO, PhonenumbertypeRow] = {
    Stream.emits(phonenumbertypeids.flatMap(map.get).toList)
  }
  override def update(row: PhonenumbertypeRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.phonenumbertypeid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.phonenumbertypeid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: PhonenumbertypeRow): ConnectionIO[PhonenumbertypeRow] = {
    delay {
      map.put(unsaved.phonenumbertypeid, unsaved)
      unsaved
    }
  }
}
