/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package addresstype

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class AddresstypeRepoMock(toRow: Function1[AddresstypeRowUnsaved, AddresstypeRow],
                          map: scala.collection.mutable.Map[AddresstypeId, AddresstypeRow] = scala.collection.mutable.Map.empty) extends AddresstypeRepo {
  override def delete(addresstypeid: AddresstypeId): ConnectionIO[Boolean] = {
    delay(map.remove(addresstypeid).isDefined)
  }
  override def insert(unsaved: AddresstypeRow): ConnectionIO[AddresstypeRow] = {
    delay {
      if (map.contains(unsaved.addresstypeid))
        sys.error(s"id ${unsaved.addresstypeid} already exists")
      else
        map.put(unsaved.addresstypeid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: AddresstypeRowUnsaved): ConnectionIO[AddresstypeRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, AddresstypeRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(addresstypeid: AddresstypeId): ConnectionIO[Option[AddresstypeRow]] = {
    delay(map.get(addresstypeid))
  }
  override def selectByIds(addresstypeids: Array[AddresstypeId]): Stream[ConnectionIO, AddresstypeRow] = {
    Stream.emits(addresstypeids.flatMap(map.get).toList)
  }
  override def update(row: AddresstypeRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.addresstypeid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.addresstypeid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: AddresstypeRow): ConnectionIO[AddresstypeRow] = {
    delay {
      map.put(unsaved.addresstypeid, unsaved)
      unsaved
    }
  }
}
