/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package addresstype

import adventureworks.Defaulted
import adventureworks.public.Name
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object AddresstypeRepoImpl extends AddresstypeRepo {
  override def delete(addresstypeid: AddresstypeId): ConnectionIO[Boolean] = {
    sql"delete from person.addresstype where addresstypeid = $addresstypeid".update.run.map(_ > 0)
  }
  override def insert(unsaved: AddresstypeRow): ConnectionIO[AddresstypeRow] = {
    sql"""insert into person.addresstype(addresstypeid, "name", rowguid, modifieddate)
          values (${unsaved.addresstypeid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning addresstypeid, "name", rowguid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: AddresstypeRowUnsaved): ConnectionIO[AddresstypeRow] = {
    val fs = List(
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      unsaved.addresstypeid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"addresstypeid"), fr"${value: AddresstypeId}::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into person.addresstype default values
            returning addresstypeid, "name", rowguid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into person.addresstype(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning addresstypeid, "name", rowguid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, AddresstypeRow] = {
    sql"""select addresstypeid, "name", rowguid, modifieddate from person.addresstype""".query[AddresstypeRow].stream
  }
  override def selectByFieldValues(fieldValues: List[AddresstypeFieldOrIdValue[_]]): Stream[ConnectionIO, AddresstypeRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case AddresstypeFieldValue.addresstypeid(value) => fr"addresstypeid = $value"
        case AddresstypeFieldValue.name(value) => fr""""name" = $value"""
        case AddresstypeFieldValue.rowguid(value) => fr"rowguid = $value"
        case AddresstypeFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from person.addresstype $where".query[AddresstypeRow].stream
  
  }
  override def selectById(addresstypeid: AddresstypeId): ConnectionIO[Option[AddresstypeRow]] = {
    sql"""select addresstypeid, "name", rowguid, modifieddate from person.addresstype where addresstypeid = $addresstypeid""".query[AddresstypeRow].option
  }
  override def selectByIds(addresstypeids: Array[AddresstypeId]): Stream[ConnectionIO, AddresstypeRow] = {
    sql"""select addresstypeid, "name", rowguid, modifieddate from person.addresstype where addresstypeid = ANY($addresstypeids)""".query[AddresstypeRow].stream
  }
  override def update(row: AddresstypeRow): ConnectionIO[Boolean] = {
    val addresstypeid = row.addresstypeid
    sql"""update person.addresstype
          set "name" = ${row.name}::"public"."Name",
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where addresstypeid = $addresstypeid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(addresstypeid: AddresstypeId, fieldValues: List[AddresstypeFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case AddresstypeFieldValue.name(value) => fr""""name" = $value"""
            case AddresstypeFieldValue.rowguid(value) => fr"rowguid = $value"
            case AddresstypeFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update person.addresstype
              $updates
              where addresstypeid = $addresstypeid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: AddresstypeRow): ConnectionIO[AddresstypeRow] = {
    sql"""insert into person.addresstype(addresstypeid, "name", rowguid, modifieddate)
          values (
            ${unsaved.addresstypeid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (addresstypeid)
          do update set
            "name" = EXCLUDED."name",
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning addresstypeid, "name", rowguid, modifieddate
       """.query.unique
  }
  implicit val read: Read[AddresstypeRow] =
    new Read[AddresstypeRow](
      gets = List(
        (Get[AddresstypeId], Nullability.NoNulls),
        (Get[Name], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => AddresstypeRow(
        addresstypeid = Get[AddresstypeId].unsafeGetNonNullable(rs, i + 0),
        name = Get[Name].unsafeGetNonNullable(rs, i + 1),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 2),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 3)
      )
    )
  

}
