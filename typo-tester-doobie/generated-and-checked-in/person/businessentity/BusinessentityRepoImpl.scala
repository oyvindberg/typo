/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package businessentity

import adventureworks.Defaulted
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object BusinessentityRepoImpl extends BusinessentityRepo {
  override def delete(businessentityid: BusinessentityId): ConnectionIO[Boolean] = {
    sql"delete from person.businessentity where businessentityid = $businessentityid".update.run.map(_ > 0)
  }
  override def insert(unsaved: BusinessentityRow): ConnectionIO[BusinessentityRow] = {
    sql"""insert into person.businessentity(businessentityid, rowguid, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, rowguid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: BusinessentityRowUnsaved): ConnectionIO[BusinessentityRow] = {
    val fs = List(
      unsaved.businessentityid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"businessentityid"), fr"${value: BusinessentityId}::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into person.businessentity default values
            returning businessentityid, rowguid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into person.businessentity(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, rowguid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, BusinessentityRow] = {
    sql"select businessentityid, rowguid, modifieddate from person.businessentity".query[BusinessentityRow].stream
  }
  override def selectByFieldValues(fieldValues: List[BusinessentityFieldOrIdValue[_]]): Stream[ConnectionIO, BusinessentityRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case BusinessentityFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case BusinessentityFieldValue.rowguid(value) => fr"rowguid = $value"
        case BusinessentityFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from person.businessentity $where".query[BusinessentityRow].stream
  
  }
  override def selectById(businessentityid: BusinessentityId): ConnectionIO[Option[BusinessentityRow]] = {
    sql"select businessentityid, rowguid, modifieddate from person.businessentity where businessentityid = $businessentityid".query[BusinessentityRow].option
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): Stream[ConnectionIO, BusinessentityRow] = {
    sql"select businessentityid, rowguid, modifieddate from person.businessentity where businessentityid = ANY($businessentityids)".query[BusinessentityRow].stream
  }
  override def update(row: BusinessentityRow): ConnectionIO[Boolean] = {
    val businessentityid = row.businessentityid
    sql"""update person.businessentity
          set rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = $businessentityid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(businessentityid: BusinessentityId, fieldValues: List[BusinessentityFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case BusinessentityFieldValue.rowguid(value) => fr"rowguid = $value"
            case BusinessentityFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update person.businessentity
              $updates
              where businessentityid = $businessentityid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: BusinessentityRow): ConnectionIO[BusinessentityRow] = {
    sql"""insert into person.businessentity(businessentityid, rowguid, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid)
          do update set
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, rowguid, modifieddate
       """.query.unique
  }
  implicit val read: Read[BusinessentityRow] =
    new Read[BusinessentityRow](
      gets = List(
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => BusinessentityRow(
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 1),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 2)
      )
    )
  

}
