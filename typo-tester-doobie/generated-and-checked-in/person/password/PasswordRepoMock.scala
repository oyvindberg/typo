/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package password

import adventureworks.person.businessentity.BusinessentityId
import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class PasswordRepoMock(toRow: Function1[PasswordRowUnsaved, PasswordRow],
                       map: scala.collection.mutable.Map[BusinessentityId, PasswordRow] = scala.collection.mutable.Map.empty) extends PasswordRepo {
  override def delete(businessentityid: BusinessentityId): ConnectionIO[Boolean] = {
    delay(map.remove(businessentityid).isDefined)
  }
  override def insert(unsaved: PasswordRow): ConnectionIO[PasswordRow] = {
    delay {
      if (map.contains(unsaved.businessentityid))
        sys.error(s"id ${unsaved.businessentityid} already exists")
      else
        map.put(unsaved.businessentityid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: PasswordRowUnsaved): ConnectionIO[PasswordRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, PasswordRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[PasswordFieldOrIdValue[_]]): Stream[ConnectionIO, PasswordRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, PasswordFieldValue.businessentityid(value)) => acc.filter(_.businessentityid == value)
        case (acc, PasswordFieldValue.passwordhash(value)) => acc.filter(_.passwordhash == value)
        case (acc, PasswordFieldValue.passwordsalt(value)) => acc.filter(_.passwordsalt == value)
        case (acc, PasswordFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
        case (acc, PasswordFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(businessentityid: BusinessentityId): ConnectionIO[Option[PasswordRow]] = {
    delay(map.get(businessentityid))
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): Stream[ConnectionIO, PasswordRow] = {
    Stream.emits(businessentityids.flatMap(map.get).toList)
  }
  override def update(row: PasswordRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.businessentityid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.businessentityid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(businessentityid: BusinessentityId, fieldValues: List[PasswordFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(businessentityid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, PasswordFieldValue.passwordhash(value)) => acc.copy(passwordhash = value)
            case (acc, PasswordFieldValue.passwordsalt(value)) => acc.copy(passwordsalt = value)
            case (acc, PasswordFieldValue.rowguid(value)) => acc.copy(rowguid = value)
            case (acc, PasswordFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(businessentityid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: PasswordRow): ConnectionIO[PasswordRow] = {
    delay {
      map.put(unsaved.businessentityid, unsaved)
      unsaved
    }
  }
}
