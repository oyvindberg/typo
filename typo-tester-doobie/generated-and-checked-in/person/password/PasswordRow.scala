/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package password

import adventureworks.person.businessentity.BusinessentityId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

case class PasswordRow(
  /** Points to [[person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Password for the e-mail account. */
  passwordhash: String,
  /** Random value concatenated with the password string before the password is hashed. */
  passwordsalt: String,
  rowguid: UUID,
  modifieddate: LocalDateTime
)

object PasswordRow {
  implicit val decoder: Decoder[PasswordRow] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[BusinessentityId]
        passwordhash <- c.downField("passwordhash").as[String]
        passwordsalt <- c.downField("passwordsalt").as[String]
        rowguid <- c.downField("rowguid").as[UUID]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield PasswordRow(businessentityid, passwordhash, passwordsalt, rowguid, modifieddate)
  implicit val encoder: Encoder[PasswordRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "passwordhash" := row.passwordhash,
        "passwordsalt" := row.passwordsalt,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
