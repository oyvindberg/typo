/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import cats.data.NonEmptyList
import doobie.Get
import doobie.Put
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import org.postgresql.geometric.PGpoint
import org.postgresql.geometric.PGpolygon

/** Polygon datatype in PostgreSQL */
case class TypoPolygon(points: List[TypoPoint])
object TypoPolygon {
  implicit val decoder: Decoder[TypoPolygon] =
    (c: HCursor) =>
      for {
        points <- c.downField("points").as[List[TypoPoint]]
      } yield TypoPolygon(points)
  implicit val encoder: Encoder[TypoPolygon] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "points" := row.points
      )}
  implicit val TypoPolygonGet: Get[TypoPolygon] =
    Get.Advanced.other[PGpolygon](cats.data.NonEmptyList.one("polygon"))
      .map(v => TypoPolygon(v.points.map(p => TypoPoint(p.x, p.y)).toList))
  
  implicit val TypoPolygonPut: Put[TypoPolygon] =
    Put.Advanced.other[PGpolygon](NonEmptyList.one("polygon"))
      .contramap(v => new PGpolygon(v.points.map(p => new PGpoint(p.x, p.y)).toArray))
  
  implicit val TypoPolygonGetArray: Get[Array[TypoPolygon]] =
    Get.Advanced.array[AnyRef](NonEmptyList.one("_polygon"))
      .map(_.map(v => TypoPolygon(v.asInstanceOf[PGpolygon].points.map(p => TypoPoint(p.x, p.y)).toList)))
  
  implicit val TypoPolygonPutArray: Put[Array[TypoPolygon]] =
    Put.Advanced.array[AnyRef](NonEmptyList.one("_polygon"), "polygon")
      .contramap(_.map(v => new PGpolygon(v.points.map(p => new PGpoint(p.x, p.y)).toArray)))

}
