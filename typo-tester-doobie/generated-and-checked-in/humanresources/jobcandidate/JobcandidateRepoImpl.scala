/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package jobcandidate

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import org.postgresql.jdbc.PgSQLXML

object JobcandidateRepoImpl extends JobcandidateRepo {
  override def delete(jobcandidateid: JobcandidateId): ConnectionIO[Boolean] = {
    sql"delete from humanresources.jobcandidate where jobcandidateid = $jobcandidateid".update.run.map(_ > 0)
  }
  override def insert(unsaved: JobcandidateRow): ConnectionIO[JobcandidateRow] = {
    sql"""insert into humanresources.jobcandidate(jobcandidateid, businessentityid, resume, modifieddate)
          values (${unsaved.jobcandidateid}::int4, ${unsaved.businessentityid}::int4, ${unsaved.resume}::xml, ${unsaved.modifieddate}::timestamp)
          returning jobcandidateid, businessentityid, resume, modifieddate
       """.query.unique
  }
  override def insert(unsaved: JobcandidateRowUnsaved): ConnectionIO[JobcandidateRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"resume"), fr"${unsaved.resume}::xml")),
      unsaved.jobcandidateid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"jobcandidateid"), fr"${value: JobcandidateId}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into humanresources.jobcandidate default values
            returning jobcandidateid, businessentityid, resume, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into humanresources.jobcandidate(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning jobcandidateid, businessentityid, resume, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, JobcandidateRow] = {
    sql"select jobcandidateid, businessentityid, resume, modifieddate from humanresources.jobcandidate".query[JobcandidateRow].stream
  }
  override def selectByFieldValues(fieldValues: List[JobcandidateFieldOrIdValue[_]]): Stream[ConnectionIO, JobcandidateRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case JobcandidateFieldValue.jobcandidateid(value) => fr"jobcandidateid = $value"
        case JobcandidateFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case JobcandidateFieldValue.resume(value) => fr"resume = $value"
        case JobcandidateFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from humanresources.jobcandidate $where".query[JobcandidateRow].stream
  
  }
  override def selectById(jobcandidateid: JobcandidateId): ConnectionIO[Option[JobcandidateRow]] = {
    sql"select jobcandidateid, businessentityid, resume, modifieddate from humanresources.jobcandidate where jobcandidateid = $jobcandidateid".query[JobcandidateRow].option
  }
  override def selectByIds(jobcandidateids: Array[JobcandidateId]): Stream[ConnectionIO, JobcandidateRow] = {
    sql"select jobcandidateid, businessentityid, resume, modifieddate from humanresources.jobcandidate where jobcandidateid = ANY($jobcandidateids)".query[JobcandidateRow].stream
  }
  override def update(row: JobcandidateRow): ConnectionIO[Boolean] = {
    val jobcandidateid = row.jobcandidateid
    sql"""update humanresources.jobcandidate
          set businessentityid = ${row.businessentityid}::int4,
              resume = ${row.resume}::xml,
              modifieddate = ${row.modifieddate}::timestamp
          where jobcandidateid = $jobcandidateid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(jobcandidateid: JobcandidateId, fieldValues: List[JobcandidateFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case JobcandidateFieldValue.businessentityid(value) => fr"businessentityid = $value"
            case JobcandidateFieldValue.resume(value) => fr"resume = $value"
            case JobcandidateFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update humanresources.jobcandidate
              $updates
              where jobcandidateid = $jobcandidateid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: JobcandidateRow): ConnectionIO[JobcandidateRow] = {
    sql"""insert into humanresources.jobcandidate(jobcandidateid, businessentityid, resume, modifieddate)
          values (
            ${unsaved.jobcandidateid}::int4,
            ${unsaved.businessentityid}::int4,
            ${unsaved.resume}::xml,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (jobcandidateid)
          do update set
            businessentityid = EXCLUDED.businessentityid,
            resume = EXCLUDED.resume,
            modifieddate = EXCLUDED.modifieddate
          returning jobcandidateid, businessentityid, resume, modifieddate
       """.query.unique
  }
  implicit val read: Read[JobcandidateRow] =
    new Read[JobcandidateRow](
      gets = List(
        (Get[JobcandidateId], Nullability.NoNulls),
        (Get[BusinessentityId], Nullability.Nullable),
        (Get[PgSQLXML], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => JobcandidateRow(
        jobcandidateid = Get[JobcandidateId].unsafeGetNonNullable(rs, i + 0),
        businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 1),
        resume = Get[PgSQLXML].unsafeGetNullable(rs, i + 2),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 3)
      )
    )
  

}
