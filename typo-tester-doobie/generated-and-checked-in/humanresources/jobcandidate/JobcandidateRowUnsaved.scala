/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package jobcandidate

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import org.postgresql.jdbc.PgSQLXML

/** This class corresponds to a row in table `humanresources.jobcandidate` which has not been persisted yet */
case class JobcandidateRowUnsaved(
  /** Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.
      Points to [[employee.EmployeeRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** RÃ©sumÃ© in XML format. */
  resume: Option[PgSQLXML],
  /** Default: nextval('humanresources.jobcandidate_jobcandidateid_seq'::regclass)
      Primary key for JobCandidate records. */
  jobcandidateid: Defaulted[JobcandidateId] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(jobcandidateidDefault: => JobcandidateId, modifieddateDefault: => LocalDateTime): JobcandidateRow =
    JobcandidateRow(
      businessentityid = businessentityid,
      resume = resume,
      jobcandidateid = jobcandidateid match {
                         case Defaulted.UseDefault => jobcandidateidDefault
                         case Defaulted.Provided(value) => value
                       },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object JobcandidateRowUnsaved {
  implicit val decoder: Decoder[JobcandidateRowUnsaved] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[Option[BusinessentityId]]
        resume <- c.downField("resume").as[Option[PgSQLXML]]
        jobcandidateid <- c.downField("jobcandidateid").as[Defaulted[JobcandidateId]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield JobcandidateRowUnsaved(businessentityid, resume, jobcandidateid, modifieddate)
  implicit val encoder: Encoder[JobcandidateRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "resume" := row.resume,
        "jobcandidateid" := row.jobcandidateid,
        "modifieddate" := row.modifieddate
      )}
}
