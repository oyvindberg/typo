/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package department

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream

object DepartmentRepoImpl extends DepartmentRepo {
  override def delete(departmentid: DepartmentId): ConnectionIO[Boolean] = {
    sql"delete from humanresources.department where departmentid = ${departmentid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: DepartmentRow): ConnectionIO[DepartmentRow] = {
    sql"""insert into humanresources.department(departmentid, "name", groupname, modifieddate)
          values (${unsaved.departmentid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.groupname}::"public"."Name", ${unsaved.modifieddate}::timestamp)
          returning departmentid, "name", groupname, modifieddate::text
       """.query[DepartmentRow].unique
  }
  override def insert(unsaved: DepartmentRowUnsaved): ConnectionIO[DepartmentRow] = {
    val fs = List(
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      Some((Fragment.const(s"groupname"), fr"""${unsaved.groupname}::"public"."Name"""")),
      unsaved.departmentid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"departmentid"), fr"${value: DepartmentId}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into humanresources.department default values
            returning departmentid, "name", groupname, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into humanresources.department(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning departmentid, "name", groupname, modifieddate::text
         """
    }
    q.query[DepartmentRow].unique
  
  }
  override def selectAll: Stream[ConnectionIO, DepartmentRow] = {
    sql"""select departmentid, "name", groupname, modifieddate::text from humanresources.department""".query[DepartmentRow].stream
  }
  override def selectById(departmentid: DepartmentId): ConnectionIO[Option[DepartmentRow]] = {
    sql"""select departmentid, "name", groupname, modifieddate::text from humanresources.department where departmentid = ${departmentid}""".query[DepartmentRow].option
  }
  override def selectByIds(departmentids: Array[DepartmentId]): Stream[ConnectionIO, DepartmentRow] = {
    sql"""select departmentid, "name", groupname, modifieddate::text from humanresources.department where departmentid = ANY(${departmentids})""".query[DepartmentRow].stream
  }
  override def update(row: DepartmentRow): ConnectionIO[Boolean] = {
    val departmentid = row.departmentid
    sql"""update humanresources.department
          set "name" = ${row.name}::"public"."Name",
              groupname = ${row.groupname}::"public"."Name",
              modifieddate = ${row.modifieddate}::timestamp
          where departmentid = ${departmentid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: DepartmentRow): ConnectionIO[DepartmentRow] = {
    sql"""insert into humanresources.department(departmentid, "name", groupname, modifieddate)
          values (
            ${unsaved.departmentid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.groupname}::"public"."Name",
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (departmentid)
          do update set
            "name" = EXCLUDED."name",
            groupname = EXCLUDED.groupname,
            modifieddate = EXCLUDED.modifieddate
          returning departmentid, "name", groupname, modifieddate::text
       """.query[DepartmentRow].unique
  }
}
