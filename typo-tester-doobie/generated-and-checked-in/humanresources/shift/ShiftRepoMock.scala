/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package shift

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class ShiftRepoMock(toRow: Function1[ShiftRowUnsaved, ShiftRow],
                    map: scala.collection.mutable.Map[ShiftId, ShiftRow] = scala.collection.mutable.Map.empty) extends ShiftRepo {
  override def delete(shiftid: ShiftId): ConnectionIO[Boolean] = {
    delay(map.remove(shiftid).isDefined)
  }
  override def insert(unsaved: ShiftRow): ConnectionIO[ShiftRow] = {
    delay {
      if (map.contains(unsaved.shiftid))
        sys.error(s"id ${unsaved.shiftid} already exists")
      else
        map.put(unsaved.shiftid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: ShiftRowUnsaved): ConnectionIO[ShiftRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, ShiftRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[ShiftFieldOrIdValue[_]]): Stream[ConnectionIO, ShiftRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, ShiftFieldValue.shiftid(value)) => acc.filter(_.shiftid == value)
        case (acc, ShiftFieldValue.name(value)) => acc.filter(_.name == value)
        case (acc, ShiftFieldValue.starttime(value)) => acc.filter(_.starttime == value)
        case (acc, ShiftFieldValue.endtime(value)) => acc.filter(_.endtime == value)
        case (acc, ShiftFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(shiftid: ShiftId): ConnectionIO[Option[ShiftRow]] = {
    delay(map.get(shiftid))
  }
  override def selectByIds(shiftids: Array[ShiftId]): Stream[ConnectionIO, ShiftRow] = {
    Stream.emits(shiftids.flatMap(map.get).toList)
  }
  override def update(row: ShiftRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.shiftid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.shiftid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(shiftid: ShiftId, fieldValues: List[ShiftFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(shiftid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, ShiftFieldValue.name(value)) => acc.copy(name = value)
            case (acc, ShiftFieldValue.starttime(value)) => acc.copy(starttime = value)
            case (acc, ShiftFieldValue.endtime(value)) => acc.copy(endtime = value)
            case (acc, ShiftFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(shiftid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: ShiftRow): ConnectionIO[ShiftRow] = {
    delay {
      map.put(unsaved.shiftid, unsaved)
      unsaved
    }
  }
}
