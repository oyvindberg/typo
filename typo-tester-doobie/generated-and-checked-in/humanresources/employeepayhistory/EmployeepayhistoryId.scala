/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeepayhistory

import adventureworks.person.businessentity.BusinessentityId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** Type for the composite primary key of table `humanresources.employeepayhistory` */
case class EmployeepayhistoryId(businessentityid: BusinessentityId, ratechangedate: LocalDateTime)
object EmployeepayhistoryId {
  implicit def ordering(implicit O0: Ordering[LocalDateTime]): Ordering[EmployeepayhistoryId] = Ordering.by(x => (x.businessentityid, x.ratechangedate))
  implicit val decoder: Decoder[EmployeepayhistoryId] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[BusinessentityId]
        ratechangedate <- c.downField("ratechangedate").as[LocalDateTime]
      } yield EmployeepayhistoryId(businessentityid, ratechangedate)
  implicit val encoder: Encoder[EmployeepayhistoryId] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "ratechangedate" := row.ratechangedate
      )}
}
