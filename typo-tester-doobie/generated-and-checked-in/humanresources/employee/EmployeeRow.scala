/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employee

import adventureworks.TypoLocalDate
import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class EmployeeRow(
  /** Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.
      Points to [[person.person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Unique national identification number such as a social security number. */
  nationalidnumber: /* max 15 chars */ String,
  /** Network login. */
  loginid: /* max 256 chars */ String,
  /** Work title such as Buyer or Sales Representative. */
  jobtitle: /* max 50 chars */ String,
  /** Date of birth. */
  birthdate: TypoLocalDate,
  /** M = Married, S = Single */
  maritalstatus: /* bpchar */ String,
  /** M = Male, F = Female */
  gender: /* bpchar */ String,
  /** Employee hired on this date. */
  hiredate: TypoLocalDate,
  /** Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining. */
  salariedflag: Flag,
  /** Number of available vacation hours. */
  vacationhours: Int,
  /** Number of available sick leave hours. */
  sickleavehours: Int,
  /** 0 = Inactive, 1 = Active */
  currentflag: Flag,
  rowguid: UUID,
  modifieddate: TypoLocalDateTime,
  /** Where the employee is located in corporate hierarchy. */
  organizationnode: Option[String]
)

object EmployeeRow {
  implicit val decoder: Decoder[EmployeeRow] = Decoder.forProduct15[EmployeeRow, BusinessentityId, /* max 15 chars */ String, /* max 256 chars */ String, /* max 50 chars */ String, TypoLocalDate, /* bpchar */ String, /* bpchar */ String, TypoLocalDate, Flag, Int, Int, Flag, UUID, TypoLocalDateTime, Option[String]]("businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate", "maritalstatus", "gender", "hiredate", "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate", "organizationnode")(EmployeeRow.apply)
  implicit val encoder: Encoder[EmployeeRow] = Encoder.forProduct15[EmployeeRow, BusinessentityId, /* max 15 chars */ String, /* max 256 chars */ String, /* max 50 chars */ String, TypoLocalDate, /* bpchar */ String, /* bpchar */ String, TypoLocalDate, Flag, Int, Int, Flag, UUID, TypoLocalDateTime, Option[String]]("businessentityid", "nationalidnumber", "loginid", "jobtitle", "birthdate", "maritalstatus", "gender", "hiredate", "salariedflag", "vacationhours", "sickleavehours", "currentflag", "rowguid", "modifieddate", "organizationnode")(x => (x.businessentityid, x.nationalidnumber, x.loginid, x.jobtitle, x.birthdate, x.maritalstatus, x.gender, x.hiredate, x.salariedflag, x.vacationhours, x.sickleavehours, x.currentflag, x.rowguid, x.modifieddate, x.organizationnode))
  implicit val read: Read[EmployeeRow] = new Read[EmployeeRow](
    gets = List(
      (Get[BusinessentityId], Nullability.NoNulls),
      (Get[/* max 15 chars */ String], Nullability.NoNulls),
      (Get[/* max 256 chars */ String], Nullability.NoNulls),
      (Get[/* max 50 chars */ String], Nullability.NoNulls),
      (Get[TypoLocalDate], Nullability.NoNulls),
      (Get[/* bpchar */ String], Nullability.NoNulls),
      (Get[/* bpchar */ String], Nullability.NoNulls),
      (Get[TypoLocalDate], Nullability.NoNulls),
      (Get[Flag], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[Flag], Nullability.NoNulls),
      (Get[UUID], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls),
      (Get[String], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => EmployeeRow(
      businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
      nationalidnumber = Get[/* max 15 chars */ String].unsafeGetNonNullable(rs, i + 1),
      loginid = Get[/* max 256 chars */ String].unsafeGetNonNullable(rs, i + 2),
      jobtitle = Get[/* max 50 chars */ String].unsafeGetNonNullable(rs, i + 3),
      birthdate = Get[TypoLocalDate].unsafeGetNonNullable(rs, i + 4),
      maritalstatus = Get[/* bpchar */ String].unsafeGetNonNullable(rs, i + 5),
      gender = Get[/* bpchar */ String].unsafeGetNonNullable(rs, i + 6),
      hiredate = Get[TypoLocalDate].unsafeGetNonNullable(rs, i + 7),
      salariedflag = Get[Flag].unsafeGetNonNullable(rs, i + 8),
      vacationhours = Get[Int].unsafeGetNonNullable(rs, i + 9),
      sickleavehours = Get[Int].unsafeGetNonNullable(rs, i + 10),
      currentflag = Get[Flag].unsafeGetNonNullable(rs, i + 11),
      rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 12),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 13),
      organizationnode = Get[String].unsafeGetNullable(rs, i + 14)
    )
  )
}
