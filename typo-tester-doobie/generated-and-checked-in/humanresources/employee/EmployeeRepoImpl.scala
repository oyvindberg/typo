/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employee

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.UUID

object EmployeeRepoImpl extends EmployeeRepo {
  override def delete(businessentityid: BusinessentityId): ConnectionIO[Boolean] = {
    sql"delete from humanresources.employee where businessentityid = $businessentityid".update.run.map(_ > 0)
  }
  override def insert(unsaved: EmployeeRow): ConnectionIO[EmployeeRow] = {
    sql"""insert into humanresources.employee(businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode)
          values (${unsaved.businessentityid}::int4, ${unsaved.nationalidnumber}, ${unsaved.loginid}, ${unsaved.jobtitle}, ${unsaved.birthdate}::date, ${unsaved.maritalstatus}::bpchar, ${unsaved.gender}::bpchar, ${unsaved.hiredate}::date, ${unsaved.salariedflag}::"public"."Flag", ${unsaved.vacationhours}::int2, ${unsaved.sickleavehours}::int2, ${unsaved.currentflag}::"public"."Flag", ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp, ${unsaved.organizationnode})
          returning businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode
       """.query.unique
  }
  override def insert(unsaved: EmployeeRowUnsaved): ConnectionIO[EmployeeRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"nationalidnumber"), fr"${unsaved.nationalidnumber}")),
      Some((Fragment.const(s"loginid"), fr"${unsaved.loginid}")),
      Some((Fragment.const(s"jobtitle"), fr"${unsaved.jobtitle}")),
      Some((Fragment.const(s"birthdate"), fr"${unsaved.birthdate}::date")),
      Some((Fragment.const(s"maritalstatus"), fr"${unsaved.maritalstatus}::bpchar")),
      Some((Fragment.const(s"gender"), fr"${unsaved.gender}::bpchar")),
      Some((Fragment.const(s"hiredate"), fr"${unsaved.hiredate}::date")),
      unsaved.salariedflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"salariedflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.vacationhours match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"vacationhours"), fr"${value: Int}::int2"))
      },
      unsaved.sickleavehours match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"sickleavehours"), fr"${value: Int}::int2"))
      },
      unsaved.currentflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"currentflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      },
      unsaved.organizationnode match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"organizationnode"), fr"${value: Option[String]}"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into humanresources.employee default values
            returning businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into humanresources.employee(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, EmployeeRow] = {
    sql"select businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode from humanresources.employee".query[EmployeeRow].stream
  }
  override def selectByFieldValues(fieldValues: List[EmployeeFieldOrIdValue[_]]): Stream[ConnectionIO, EmployeeRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case EmployeeFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case EmployeeFieldValue.nationalidnumber(value) => fr"nationalidnumber = $value"
        case EmployeeFieldValue.loginid(value) => fr"loginid = $value"
        case EmployeeFieldValue.jobtitle(value) => fr"jobtitle = $value"
        case EmployeeFieldValue.birthdate(value) => fr"birthdate = $value"
        case EmployeeFieldValue.maritalstatus(value) => fr"maritalstatus = $value"
        case EmployeeFieldValue.gender(value) => fr"gender = $value"
        case EmployeeFieldValue.hiredate(value) => fr"hiredate = $value"
        case EmployeeFieldValue.salariedflag(value) => fr"salariedflag = $value"
        case EmployeeFieldValue.vacationhours(value) => fr"vacationhours = $value"
        case EmployeeFieldValue.sickleavehours(value) => fr"sickleavehours = $value"
        case EmployeeFieldValue.currentflag(value) => fr"currentflag = $value"
        case EmployeeFieldValue.rowguid(value) => fr"rowguid = $value"
        case EmployeeFieldValue.modifieddate(value) => fr"modifieddate = $value"
        case EmployeeFieldValue.organizationnode(value) => fr"organizationnode = $value"
      } :_*
    )
    sql"select * from humanresources.employee $where".query[EmployeeRow].stream
  
  }
  override def selectById(businessentityid: BusinessentityId): ConnectionIO[Option[EmployeeRow]] = {
    sql"select businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode from humanresources.employee where businessentityid = $businessentityid".query[EmployeeRow].option
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): Stream[ConnectionIO, EmployeeRow] = {
    sql"select businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode from humanresources.employee where businessentityid = ANY($businessentityids)".query[EmployeeRow].stream
  }
  override def update(row: EmployeeRow): ConnectionIO[Boolean] = {
    val businessentityid = row.businessentityid
    sql"""update humanresources.employee
          set nationalidnumber = ${row.nationalidnumber},
              loginid = ${row.loginid},
              jobtitle = ${row.jobtitle},
              birthdate = ${row.birthdate}::date,
              maritalstatus = ${row.maritalstatus}::bpchar,
              gender = ${row.gender}::bpchar,
              hiredate = ${row.hiredate}::date,
              salariedflag = ${row.salariedflag}::"public"."Flag",
              vacationhours = ${row.vacationhours}::int2,
              sickleavehours = ${row.sickleavehours}::int2,
              currentflag = ${row.currentflag}::"public"."Flag",
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp,
              organizationnode = ${row.organizationnode}
          where businessentityid = $businessentityid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(businessentityid: BusinessentityId, fieldValues: List[EmployeeFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case EmployeeFieldValue.nationalidnumber(value) => fr"nationalidnumber = $value"
            case EmployeeFieldValue.loginid(value) => fr"loginid = $value"
            case EmployeeFieldValue.jobtitle(value) => fr"jobtitle = $value"
            case EmployeeFieldValue.birthdate(value) => fr"birthdate = $value"
            case EmployeeFieldValue.maritalstatus(value) => fr"maritalstatus = $value"
            case EmployeeFieldValue.gender(value) => fr"gender = $value"
            case EmployeeFieldValue.hiredate(value) => fr"hiredate = $value"
            case EmployeeFieldValue.salariedflag(value) => fr"salariedflag = $value"
            case EmployeeFieldValue.vacationhours(value) => fr"vacationhours = $value"
            case EmployeeFieldValue.sickleavehours(value) => fr"sickleavehours = $value"
            case EmployeeFieldValue.currentflag(value) => fr"currentflag = $value"
            case EmployeeFieldValue.rowguid(value) => fr"rowguid = $value"
            case EmployeeFieldValue.modifieddate(value) => fr"modifieddate = $value"
            case EmployeeFieldValue.organizationnode(value) => fr"organizationnode = $value"
          } :_*
        )
        sql"""update humanresources.employee
              $updates
              where businessentityid = $businessentityid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: EmployeeRow): ConnectionIO[EmployeeRow] = {
    sql"""insert into humanresources.employee(businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.nationalidnumber},
            ${unsaved.loginid},
            ${unsaved.jobtitle},
            ${unsaved.birthdate}::date,
            ${unsaved.maritalstatus}::bpchar,
            ${unsaved.gender}::bpchar,
            ${unsaved.hiredate}::date,
            ${unsaved.salariedflag}::"public"."Flag",
            ${unsaved.vacationhours}::int2,
            ${unsaved.sickleavehours}::int2,
            ${unsaved.currentflag}::"public"."Flag",
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp,
            ${unsaved.organizationnode}
          )
          on conflict (businessentityid)
          do update set
            nationalidnumber = EXCLUDED.nationalidnumber,
            loginid = EXCLUDED.loginid,
            jobtitle = EXCLUDED.jobtitle,
            birthdate = EXCLUDED.birthdate,
            maritalstatus = EXCLUDED.maritalstatus,
            gender = EXCLUDED.gender,
            hiredate = EXCLUDED.hiredate,
            salariedflag = EXCLUDED.salariedflag,
            vacationhours = EXCLUDED.vacationhours,
            sickleavehours = EXCLUDED.sickleavehours,
            currentflag = EXCLUDED.currentflag,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate,
            organizationnode = EXCLUDED.organizationnode
          returning businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode
       """.query.unique
  }
  implicit val read: Read[EmployeeRow] =
    new Read[EmployeeRow](
      gets = List(
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[LocalDate], Nullability.NoNulls),
        (Get[/* bpchar */ String], Nullability.NoNulls),
        (Get[/* bpchar */ String], Nullability.NoNulls),
        (Get[LocalDate], Nullability.NoNulls),
        (Get[Flag], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Flag], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[String], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => EmployeeRow(
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
        nationalidnumber = Get[String].unsafeGetNonNullable(rs, i + 1),
        loginid = Get[String].unsafeGetNonNullable(rs, i + 2),
        jobtitle = Get[String].unsafeGetNonNullable(rs, i + 3),
        birthdate = Get[LocalDate].unsafeGetNonNullable(rs, i + 4),
        maritalstatus = Get[/* bpchar */ String].unsafeGetNonNullable(rs, i + 5),
        gender = Get[/* bpchar */ String].unsafeGetNonNullable(rs, i + 6),
        hiredate = Get[LocalDate].unsafeGetNonNullable(rs, i + 7),
        salariedflag = Get[Flag].unsafeGetNonNullable(rs, i + 8),
        vacationhours = Get[Int].unsafeGetNonNullable(rs, i + 9),
        sickleavehours = Get[Int].unsafeGetNonNullable(rs, i + 10),
        currentflag = Get[Flag].unsafeGetNonNullable(rs, i + 11),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 12),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 13),
        organizationnode = Get[String].unsafeGetNullable(rs, i + 14)
      )
    )
  

}
