/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employee

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream
import java.util.UUID

object EmployeeRepoImpl extends EmployeeRepo {
  override def delete(businessentityid: BusinessentityId): ConnectionIO[Boolean] = {
    sql"delete from humanresources.employee where businessentityid = ${businessentityid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: EmployeeRow): ConnectionIO[EmployeeRow] = {
    sql"""insert into humanresources.employee(businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode)
          values (${unsaved.businessentityid}::int4, ${unsaved.nationalidnumber}, ${unsaved.loginid}, ${unsaved.jobtitle}, ${unsaved.birthdate}::date, ${unsaved.maritalstatus}::bpchar, ${unsaved.gender}::bpchar, ${unsaved.hiredate}::date, ${unsaved.salariedflag}::"public"."Flag", ${unsaved.vacationhours}::int2, ${unsaved.sickleavehours}::int2, ${unsaved.currentflag}::"public"."Flag", ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp, ${unsaved.organizationnode})
          returning businessentityid, nationalidnumber, loginid, jobtitle, birthdate::text, maritalstatus, gender, hiredate::text, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate::text, organizationnode
       """.query[EmployeeRow].unique
  }
  override def insert(unsaved: EmployeeRowUnsaved): ConnectionIO[EmployeeRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"nationalidnumber"), fr"${unsaved.nationalidnumber}")),
      Some((Fragment.const(s"loginid"), fr"${unsaved.loginid}")),
      Some((Fragment.const(s"jobtitle"), fr"${unsaved.jobtitle}")),
      Some((Fragment.const(s"birthdate"), fr"${unsaved.birthdate}::date")),
      Some((Fragment.const(s"maritalstatus"), fr"${unsaved.maritalstatus}::bpchar")),
      Some((Fragment.const(s"gender"), fr"${unsaved.gender}::bpchar")),
      Some((Fragment.const(s"hiredate"), fr"${unsaved.hiredate}::date")),
      unsaved.salariedflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"salariedflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.vacationhours match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"vacationhours"), fr"${value: Int}::int2"))
      },
      unsaved.sickleavehours match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"sickleavehours"), fr"${value: Int}::int2"))
      },
      unsaved.currentflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"currentflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      },
      unsaved.organizationnode match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"organizationnode"), fr"${value: Option[String]}"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into humanresources.employee default values
            returning businessentityid, nationalidnumber, loginid, jobtitle, birthdate::text, maritalstatus, gender, hiredate::text, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate::text, organizationnode
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into humanresources.employee(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, nationalidnumber, loginid, jobtitle, birthdate::text, maritalstatus, gender, hiredate::text, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate::text, organizationnode
         """
    }
    q.query[EmployeeRow].unique
  
  }
  override def selectAll: Stream[ConnectionIO, EmployeeRow] = {
    sql"select businessentityid, nationalidnumber, loginid, jobtitle, birthdate::text, maritalstatus, gender, hiredate::text, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate::text, organizationnode from humanresources.employee".query[EmployeeRow].stream
  }
  override def selectById(businessentityid: BusinessentityId): ConnectionIO[Option[EmployeeRow]] = {
    sql"select businessentityid, nationalidnumber, loginid, jobtitle, birthdate::text, maritalstatus, gender, hiredate::text, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate::text, organizationnode from humanresources.employee where businessentityid = ${businessentityid}".query[EmployeeRow].option
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): Stream[ConnectionIO, EmployeeRow] = {
    sql"select businessentityid, nationalidnumber, loginid, jobtitle, birthdate::text, maritalstatus, gender, hiredate::text, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate::text, organizationnode from humanresources.employee where businessentityid = ANY(${businessentityids})".query[EmployeeRow].stream
  }
  override def update(row: EmployeeRow): ConnectionIO[Boolean] = {
    val businessentityid = row.businessentityid
    sql"""update humanresources.employee
          set nationalidnumber = ${row.nationalidnumber},
              loginid = ${row.loginid},
              jobtitle = ${row.jobtitle},
              birthdate = ${row.birthdate}::date,
              maritalstatus = ${row.maritalstatus}::bpchar,
              gender = ${row.gender}::bpchar,
              hiredate = ${row.hiredate}::date,
              salariedflag = ${row.salariedflag}::"public"."Flag",
              vacationhours = ${row.vacationhours}::int2,
              sickleavehours = ${row.sickleavehours}::int2,
              currentflag = ${row.currentflag}::"public"."Flag",
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp,
              organizationnode = ${row.organizationnode}
          where businessentityid = ${businessentityid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: EmployeeRow): ConnectionIO[EmployeeRow] = {
    sql"""insert into humanresources.employee(businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate, organizationnode)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.nationalidnumber},
            ${unsaved.loginid},
            ${unsaved.jobtitle},
            ${unsaved.birthdate}::date,
            ${unsaved.maritalstatus}::bpchar,
            ${unsaved.gender}::bpchar,
            ${unsaved.hiredate}::date,
            ${unsaved.salariedflag}::"public"."Flag",
            ${unsaved.vacationhours}::int2,
            ${unsaved.sickleavehours}::int2,
            ${unsaved.currentflag}::"public"."Flag",
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp,
            ${unsaved.organizationnode}
          )
          on conflict (businessentityid)
          do update set
            nationalidnumber = EXCLUDED.nationalidnumber,
            loginid = EXCLUDED.loginid,
            jobtitle = EXCLUDED.jobtitle,
            birthdate = EXCLUDED.birthdate,
            maritalstatus = EXCLUDED.maritalstatus,
            gender = EXCLUDED.gender,
            hiredate = EXCLUDED.hiredate,
            salariedflag = EXCLUDED.salariedflag,
            vacationhours = EXCLUDED.vacationhours,
            sickleavehours = EXCLUDED.sickleavehours,
            currentflag = EXCLUDED.currentflag,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate,
            organizationnode = EXCLUDED.organizationnode
          returning businessentityid, nationalidnumber, loginid, jobtitle, birthdate::text, maritalstatus, gender, hiredate::text, salariedflag, vacationhours, sickleavehours, currentflag, rowguid, modifieddate::text, organizationnode
       """.query[EmployeeRow].unique
  }
}
