/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vemployeedepartmenthistory

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDate

object VemployeedepartmenthistoryViewRepoImpl extends VemployeedepartmenthistoryViewRepo {
  override def selectAll: Stream[ConnectionIO, VemployeedepartmenthistoryViewRow] = {
    sql"select businessentityid, title, firstname, middlename, lastname, suffix, shift, department, groupname, startdate, enddate from humanresources.vemployeedepartmenthistory".query[VemployeedepartmenthistoryViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[VemployeedepartmenthistoryViewFieldOrIdValue[_]]): Stream[ConnectionIO, VemployeedepartmenthistoryViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case VemployeedepartmenthistoryViewFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case VemployeedepartmenthistoryViewFieldValue.title(value) => fr"title = $value"
        case VemployeedepartmenthistoryViewFieldValue.firstname(value) => fr"firstname = $value"
        case VemployeedepartmenthistoryViewFieldValue.middlename(value) => fr"middlename = $value"
        case VemployeedepartmenthistoryViewFieldValue.lastname(value) => fr"lastname = $value"
        case VemployeedepartmenthistoryViewFieldValue.suffix(value) => fr"suffix = $value"
        case VemployeedepartmenthistoryViewFieldValue.shift(value) => fr"shift = $value"
        case VemployeedepartmenthistoryViewFieldValue.department(value) => fr"department = $value"
        case VemployeedepartmenthistoryViewFieldValue.groupname(value) => fr"groupname = $value"
        case VemployeedepartmenthistoryViewFieldValue.startdate(value) => fr"startdate = $value"
        case VemployeedepartmenthistoryViewFieldValue.enddate(value) => fr"enddate = $value"
      } :_*
    )
    sql"select * from humanresources.vemployeedepartmenthistory $where".query[VemployeedepartmenthistoryViewRow].stream
  
  }
  implicit val read: Read[VemployeedepartmenthistoryViewRow] =
    new Read[VemployeedepartmenthistoryViewRow](
      gets = List(
        (Get[BusinessentityId], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[LocalDate], Nullability.Nullable),
        (Get[LocalDate], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => VemployeedepartmenthistoryViewRow(
        businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 0),
        title = Get[String].unsafeGetNullable(rs, i + 1),
        firstname = Get[Name].unsafeGetNullable(rs, i + 2),
        middlename = Get[Name].unsafeGetNullable(rs, i + 3),
        lastname = Get[Name].unsafeGetNullable(rs, i + 4),
        suffix = Get[String].unsafeGetNullable(rs, i + 5),
        shift = Get[Name].unsafeGetNullable(rs, i + 6),
        department = Get[Name].unsafeGetNullable(rs, i + 7),
        groupname = Get[Name].unsafeGetNullable(rs, i + 8),
        startdate = Get[LocalDate].unsafeGetNullable(rs, i + 9),
        enddate = Get[LocalDate].unsafeGetNullable(rs, i + 10)
      )
    )
  

}
