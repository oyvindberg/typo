/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeedepartmenthistory

import adventureworks.TypoLocalDate
import adventureworks.TypoLocalDateTime
import adventureworks.humanresources.department.DepartmentId
import adventureworks.humanresources.shift.ShiftId
import adventureworks.person.businessentity.BusinessentityId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class EmployeedepartmenthistoryRow(
  /** Employee identification number. Foreign key to Employee.BusinessEntityID.
      Points to [[employee.EmployeeRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Department in which the employee worked including currently. Foreign key to Department.DepartmentID.
      Points to [[department.DepartmentRow.departmentid]] */
  departmentid: DepartmentId,
  /** Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.
      Points to [[shift.ShiftRow.shiftid]] */
  shiftid: ShiftId,
  /** Date the employee started work in the department. */
  startdate: TypoLocalDate,
  /** Date the employee left the department. NULL = Current department. */
  enddate: Option[TypoLocalDate],
  modifieddate: TypoLocalDateTime
){
   val compositeId: EmployeedepartmenthistoryId = EmployeedepartmenthistoryId(businessentityid, startdate, departmentid, shiftid)
 }

object EmployeedepartmenthistoryRow {
  implicit val decoder: Decoder[EmployeedepartmenthistoryRow] = Decoder.forProduct6[EmployeedepartmenthistoryRow, BusinessentityId, DepartmentId, ShiftId, TypoLocalDate, Option[TypoLocalDate], TypoLocalDateTime]("businessentityid", "departmentid", "shiftid", "startdate", "enddate", "modifieddate")(EmployeedepartmenthistoryRow.apply)
  implicit val encoder: Encoder[EmployeedepartmenthistoryRow] = Encoder.forProduct6[EmployeedepartmenthistoryRow, BusinessentityId, DepartmentId, ShiftId, TypoLocalDate, Option[TypoLocalDate], TypoLocalDateTime]("businessentityid", "departmentid", "shiftid", "startdate", "enddate", "modifieddate")(x => (x.businessentityid, x.departmentid, x.shiftid, x.startdate, x.enddate, x.modifieddate))
  implicit val read: Read[EmployeedepartmenthistoryRow] = new Read[EmployeedepartmenthistoryRow](
    gets = List(
      (Get[BusinessentityId], Nullability.NoNulls),
      (Get[DepartmentId], Nullability.NoNulls),
      (Get[ShiftId], Nullability.NoNulls),
      (Get[TypoLocalDate], Nullability.NoNulls),
      (Get[TypoLocalDate], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => EmployeedepartmenthistoryRow(
      businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
      departmentid = Get[DepartmentId].unsafeGetNonNullable(rs, i + 1),
      shiftid = Get[ShiftId].unsafeGetNonNullable(rs, i + 2),
      startdate = Get[TypoLocalDate].unsafeGetNonNullable(rs, i + 3),
      enddate = Get[TypoLocalDate].unsafeGetNullable(rs, i + 4),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 5)
    )
  )
}
