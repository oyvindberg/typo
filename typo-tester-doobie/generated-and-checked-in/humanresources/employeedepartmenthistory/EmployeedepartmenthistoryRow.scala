/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeedepartmenthistory

import adventureworks.humanresources.department.DepartmentId
import adventureworks.humanresources.shift.ShiftId
import adventureworks.person.businessentity.BusinessentityId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDate
import java.time.LocalDateTime

case class EmployeedepartmenthistoryRow(
  /** Employee identification number. Foreign key to Employee.BusinessEntityID.
      Points to [[employee.EmployeeRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Department in which the employee worked including currently. Foreign key to Department.DepartmentID.
      Points to [[department.DepartmentRow.departmentid]] */
  departmentid: DepartmentId,
  /** Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.
      Points to [[shift.ShiftRow.shiftid]] */
  shiftid: ShiftId,
  /** Date the employee started work in the department. */
  startdate: LocalDate,
  /** Date the employee left the department. NULL = Current department. */
  enddate: Option[LocalDate],
  modifieddate: LocalDateTime
){
   val compositeId: EmployeedepartmenthistoryId = EmployeedepartmenthistoryId(businessentityid, startdate, departmentid, shiftid)
 }

object EmployeedepartmenthistoryRow {
  implicit val decoder: Decoder[EmployeedepartmenthistoryRow] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[BusinessentityId]
        departmentid <- c.downField("departmentid").as[DepartmentId]
        shiftid <- c.downField("shiftid").as[ShiftId]
        startdate <- c.downField("startdate").as[LocalDate]
        enddate <- c.downField("enddate").as[Option[LocalDate]]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield EmployeedepartmenthistoryRow(businessentityid, departmentid, shiftid, startdate, enddate, modifieddate)
  implicit val encoder: Encoder[EmployeedepartmenthistoryRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "departmentid" := row.departmentid,
        "shiftid" := row.shiftid,
        "startdate" := row.startdate,
        "enddate" := row.enddate,
        "modifieddate" := row.modifieddate
      )}
}
