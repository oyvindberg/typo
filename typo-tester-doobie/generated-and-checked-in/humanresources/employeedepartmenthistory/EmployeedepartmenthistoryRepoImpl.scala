/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeedepartmenthistory

import adventureworks.Defaulted
import adventureworks.humanresources.department.DepartmentId
import adventureworks.humanresources.shift.ShiftId
import adventureworks.person.businessentity.BusinessentityId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDate
import java.time.LocalDateTime

object EmployeedepartmenthistoryRepoImpl extends EmployeedepartmenthistoryRepo {
  override def delete(compositeId: EmployeedepartmenthistoryId): ConnectionIO[Boolean] = {
    sql"delete from humanresources.employeedepartmenthistory where businessentityid = ${compositeId.businessentityid} AND startdate = ${compositeId.startdate} AND departmentid = ${compositeId.departmentid} AND shiftid = ${compositeId.shiftid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: EmployeedepartmenthistoryRow): ConnectionIO[EmployeedepartmenthistoryRow] = {
    sql"""insert into humanresources.employeedepartmenthistory(businessentityid, departmentid, shiftid, startdate, enddate, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.departmentid}::int2, ${unsaved.shiftid}::int2, ${unsaved.startdate}::date, ${unsaved.enddate}::date, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, departmentid, shiftid, startdate, enddate, modifieddate
       """.query.unique
  }
  override def insert(unsaved: EmployeedepartmenthistoryRowUnsaved): ConnectionIO[EmployeedepartmenthistoryRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"departmentid"), fr"${unsaved.departmentid}::int2")),
      Some((Fragment.const(s"shiftid"), fr"${unsaved.shiftid}::int2")),
      Some((Fragment.const(s"startdate"), fr"${unsaved.startdate}::date")),
      Some((Fragment.const(s"enddate"), fr"${unsaved.enddate}::date")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into humanresources.employeedepartmenthistory default values
            returning businessentityid, departmentid, shiftid, startdate, enddate, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into humanresources.employeedepartmenthistory(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, departmentid, shiftid, startdate, enddate, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, EmployeedepartmenthistoryRow] = {
    sql"select businessentityid, departmentid, shiftid, startdate, enddate, modifieddate from humanresources.employeedepartmenthistory".query[EmployeedepartmenthistoryRow].stream
  }
  override def selectByFieldValues(fieldValues: List[EmployeedepartmenthistoryFieldOrIdValue[_]]): Stream[ConnectionIO, EmployeedepartmenthistoryRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case EmployeedepartmenthistoryFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case EmployeedepartmenthistoryFieldValue.departmentid(value) => fr"departmentid = $value"
        case EmployeedepartmenthistoryFieldValue.shiftid(value) => fr"shiftid = $value"
        case EmployeedepartmenthistoryFieldValue.startdate(value) => fr"startdate = $value"
        case EmployeedepartmenthistoryFieldValue.enddate(value) => fr"enddate = $value"
        case EmployeedepartmenthistoryFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from humanresources.employeedepartmenthistory $where".query[EmployeedepartmenthistoryRow].stream
  
  }
  override def selectById(compositeId: EmployeedepartmenthistoryId): ConnectionIO[Option[EmployeedepartmenthistoryRow]] = {
    sql"select businessentityid, departmentid, shiftid, startdate, enddate, modifieddate from humanresources.employeedepartmenthistory where businessentityid = ${compositeId.businessentityid} AND startdate = ${compositeId.startdate} AND departmentid = ${compositeId.departmentid} AND shiftid = ${compositeId.shiftid}".query[EmployeedepartmenthistoryRow].option
  }
  override def update(row: EmployeedepartmenthistoryRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update humanresources.employeedepartmenthistory
          set enddate = ${row.enddate}::date,
              modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = ${compositeId.businessentityid} AND startdate = ${compositeId.startdate} AND departmentid = ${compositeId.departmentid} AND shiftid = ${compositeId.shiftid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(compositeId: EmployeedepartmenthistoryId, fieldValues: List[EmployeedepartmenthistoryFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case EmployeedepartmenthistoryFieldValue.enddate(value) => fr"enddate = $value"
            case EmployeedepartmenthistoryFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update humanresources.employeedepartmenthistory
              $updates
              where businessentityid = ${compositeId.businessentityid} AND startdate = ${compositeId.startdate} AND departmentid = ${compositeId.departmentid} AND shiftid = ${compositeId.shiftid}
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: EmployeedepartmenthistoryRow): ConnectionIO[EmployeedepartmenthistoryRow] = {
    sql"""insert into humanresources.employeedepartmenthistory(businessentityid, departmentid, shiftid, startdate, enddate, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.departmentid}::int2,
            ${unsaved.shiftid}::int2,
            ${unsaved.startdate}::date,
            ${unsaved.enddate}::date,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid, startdate, departmentid, shiftid)
          do update set
            enddate = EXCLUDED.enddate,
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, departmentid, shiftid, startdate, enddate, modifieddate
       """.query.unique
  }
  implicit val read: Read[EmployeedepartmenthistoryRow] =
    new Read[EmployeedepartmenthistoryRow](
      gets = List(
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[DepartmentId], Nullability.NoNulls),
        (Get[ShiftId], Nullability.NoNulls),
        (Get[LocalDate], Nullability.NoNulls),
        (Get[LocalDate], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => EmployeedepartmenthistoryRow(
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
        departmentid = Get[DepartmentId].unsafeGetNonNullable(rs, i + 1),
        shiftid = Get[ShiftId].unsafeGetNonNullable(rs, i + 2),
        startdate = Get[LocalDate].unsafeGetNonNullable(rs, i + 3),
        enddate = Get[LocalDate].unsafeGetNullable(rs, i + 4),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 5)
      )
    )
  

}
