/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package column_udt_usage

import adventureworks.information_schema.SqlIdentifier
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class ColumnUdtUsageViewRow(
  udtCatalog: Option[SqlIdentifier],
  udtSchema: Option[SqlIdentifier],
  udtName: Option[SqlIdentifier],
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  columnName: Option[SqlIdentifier]
)

object ColumnUdtUsageViewRow {
  implicit val decoder: Decoder[ColumnUdtUsageViewRow] =
    (c: HCursor) =>
      for {
        udtCatalog <- c.downField("udt_catalog").as[Option[SqlIdentifier]]
        udtSchema <- c.downField("udt_schema").as[Option[SqlIdentifier]]
        udtName <- c.downField("udt_name").as[Option[SqlIdentifier]]
        tableCatalog <- c.downField("table_catalog").as[Option[SqlIdentifier]]
        tableSchema <- c.downField("table_schema").as[Option[SqlIdentifier]]
        tableName <- c.downField("table_name").as[Option[SqlIdentifier]]
        columnName <- c.downField("column_name").as[Option[SqlIdentifier]]
      } yield ColumnUdtUsageViewRow(udtCatalog, udtSchema, udtName, tableCatalog, tableSchema, tableName, columnName)
  implicit val encoder: Encoder[ColumnUdtUsageViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "udt_catalog" := row.udtCatalog,
        "udt_schema" := row.udtSchema,
        "udt_name" := row.udtName,
        "table_catalog" := row.tableCatalog,
        "table_schema" := row.tableSchema,
        "table_name" := row.tableName,
        "column_name" := row.columnName
      )}
  implicit val read: Read[ColumnUdtUsageViewRow] =
    new Read[ColumnUdtUsageViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ColumnUdtUsageViewRow(
        udtCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        udtSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        udtName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        tableCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        tableSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
        tableName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
        columnName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 6)
      )
    )
  

}
