/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package key_column_usage

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.SqlIdentifier
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class KeyColumnUsageViewRow(
  constraintCatalog: Option[SqlIdentifier],
  constraintSchema: Option[SqlIdentifier],
  constraintName: Option[SqlIdentifier],
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  columnName: Option[SqlIdentifier],
  ordinalPosition: Option[CardinalNumber],
  positionInUniqueConstraint: Option[CardinalNumber]
)

object KeyColumnUsageViewRow {
  implicit val decoder: Decoder[KeyColumnUsageViewRow] =
    (c: HCursor) =>
      for {
        constraintCatalog <- c.downField("constraint_catalog").as[Option[SqlIdentifier]]
        constraintSchema <- c.downField("constraint_schema").as[Option[SqlIdentifier]]
        constraintName <- c.downField("constraint_name").as[Option[SqlIdentifier]]
        tableCatalog <- c.downField("table_catalog").as[Option[SqlIdentifier]]
        tableSchema <- c.downField("table_schema").as[Option[SqlIdentifier]]
        tableName <- c.downField("table_name").as[Option[SqlIdentifier]]
        columnName <- c.downField("column_name").as[Option[SqlIdentifier]]
        ordinalPosition <- c.downField("ordinal_position").as[Option[CardinalNumber]]
        positionInUniqueConstraint <- c.downField("position_in_unique_constraint").as[Option[CardinalNumber]]
      } yield KeyColumnUsageViewRow(constraintCatalog, constraintSchema, constraintName, tableCatalog, tableSchema, tableName, columnName, ordinalPosition, positionInUniqueConstraint)
  implicit val encoder: Encoder[KeyColumnUsageViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "constraint_catalog" := row.constraintCatalog,
        "constraint_schema" := row.constraintSchema,
        "constraint_name" := row.constraintName,
        "table_catalog" := row.tableCatalog,
        "table_schema" := row.tableSchema,
        "table_name" := row.tableName,
        "column_name" := row.columnName,
        "ordinal_position" := row.ordinalPosition,
        "position_in_unique_constraint" := row.positionInUniqueConstraint
      )}
  implicit val read: Read[KeyColumnUsageViewRow] =
    new Read[KeyColumnUsageViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => KeyColumnUsageViewRow(
        constraintCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        constraintSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        constraintName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        tableCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        tableSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
        tableName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
        columnName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 6),
        ordinalPosition = Get[CardinalNumber].unsafeGetNullable(rs, i + 7),
        positionInUniqueConstraint = Get[CardinalNumber].unsafeGetNullable(rs, i + 8)
      )
    )
  

}
