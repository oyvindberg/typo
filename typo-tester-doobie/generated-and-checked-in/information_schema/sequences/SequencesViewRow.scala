/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sequences

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class SequencesViewRow(
  sequenceCatalog: Option[SqlIdentifier],
  sequenceSchema: Option[SqlIdentifier],
  sequenceName: Option[SqlIdentifier],
  dataType: Option[CharacterData],
  numericPrecision: Option[CardinalNumber],
  numericPrecisionRadix: Option[CardinalNumber],
  numericScale: Option[CardinalNumber],
  startValue: Option[CharacterData],
  minimumValue: Option[CharacterData],
  maximumValue: Option[CharacterData],
  increment: Option[CharacterData],
  cycleOption: Option[YesOrNo]
)

object SequencesViewRow {
  implicit val decoder: Decoder[SequencesViewRow] =
    (c: HCursor) =>
      for {
        sequenceCatalog <- c.downField("sequence_catalog").as[Option[SqlIdentifier]]
        sequenceSchema <- c.downField("sequence_schema").as[Option[SqlIdentifier]]
        sequenceName <- c.downField("sequence_name").as[Option[SqlIdentifier]]
        dataType <- c.downField("data_type").as[Option[CharacterData]]
        numericPrecision <- c.downField("numeric_precision").as[Option[CardinalNumber]]
        numericPrecisionRadix <- c.downField("numeric_precision_radix").as[Option[CardinalNumber]]
        numericScale <- c.downField("numeric_scale").as[Option[CardinalNumber]]
        startValue <- c.downField("start_value").as[Option[CharacterData]]
        minimumValue <- c.downField("minimum_value").as[Option[CharacterData]]
        maximumValue <- c.downField("maximum_value").as[Option[CharacterData]]
        increment <- c.downField("increment").as[Option[CharacterData]]
        cycleOption <- c.downField("cycle_option").as[Option[YesOrNo]]
      } yield SequencesViewRow(sequenceCatalog, sequenceSchema, sequenceName, dataType, numericPrecision, numericPrecisionRadix, numericScale, startValue, minimumValue, maximumValue, increment, cycleOption)
  implicit val encoder: Encoder[SequencesViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "sequence_catalog" := row.sequenceCatalog,
        "sequence_schema" := row.sequenceSchema,
        "sequence_name" := row.sequenceName,
        "data_type" := row.dataType,
        "numeric_precision" := row.numericPrecision,
        "numeric_precision_radix" := row.numericPrecisionRadix,
        "numeric_scale" := row.numericScale,
        "start_value" := row.startValue,
        "minimum_value" := row.minimumValue,
        "maximum_value" := row.maximumValue,
        "increment" := row.increment,
        "cycle_option" := row.cycleOption
      )}
  implicit val read: Read[SequencesViewRow] =
    new Read[SequencesViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SequencesViewRow(
        sequenceCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        sequenceSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        sequenceName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        dataType = Get[CharacterData].unsafeGetNullable(rs, i + 3),
        numericPrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 4),
        numericPrecisionRadix = Get[CardinalNumber].unsafeGetNullable(rs, i + 5),
        numericScale = Get[CardinalNumber].unsafeGetNullable(rs, i + 6),
        startValue = Get[CharacterData].unsafeGetNullable(rs, i + 7),
        minimumValue = Get[CharacterData].unsafeGetNullable(rs, i + 8),
        maximumValue = Get[CharacterData].unsafeGetNullable(rs, i + 9),
        increment = Get[CharacterData].unsafeGetNullable(rs, i + 10),
        cycleOption = Get[YesOrNo].unsafeGetNullable(rs, i + 11)
      )
    )
  

}
