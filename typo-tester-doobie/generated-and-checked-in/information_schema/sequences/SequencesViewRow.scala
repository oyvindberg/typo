/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sequences

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class SequencesViewRow(
  sequenceCatalog: Option[SqlIdentifier],
  sequenceSchema: Option[SqlIdentifier],
  sequenceName: Option[SqlIdentifier],
  dataType: Option[CharacterData],
  numericPrecision: Option[CardinalNumber],
  numericPrecisionRadix: Option[CardinalNumber],
  numericScale: Option[CardinalNumber],
  startValue: Option[CharacterData],
  minimumValue: Option[CharacterData],
  maximumValue: Option[CharacterData],
  increment: Option[CharacterData],
  cycleOption: Option[YesOrNo]
)

object SequencesViewRow {
  implicit val decoder: Decoder[SequencesViewRow] = Decoder.forProduct12[SequencesViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CardinalNumber], Option[CardinalNumber], Option[CardinalNumber], Option[CharacterData], Option[CharacterData], Option[CharacterData], Option[CharacterData], Option[YesOrNo]]("sequence_catalog", "sequence_schema", "sequence_name", "data_type", "numeric_precision", "numeric_precision_radix", "numeric_scale", "start_value", "minimum_value", "maximum_value", "increment", "cycle_option")(SequencesViewRow.apply)(Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(CharacterData.decoder), Decoder.decodeOption(CardinalNumber.decoder), Decoder.decodeOption(CardinalNumber.decoder), Decoder.decodeOption(CardinalNumber.decoder), Decoder.decodeOption(CharacterData.decoder), Decoder.decodeOption(CharacterData.decoder), Decoder.decodeOption(CharacterData.decoder), Decoder.decodeOption(CharacterData.decoder), Decoder.decodeOption(YesOrNo.decoder))
  implicit val encoder: Encoder[SequencesViewRow] = Encoder.forProduct12[SequencesViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CardinalNumber], Option[CardinalNumber], Option[CardinalNumber], Option[CharacterData], Option[CharacterData], Option[CharacterData], Option[CharacterData], Option[YesOrNo]]("sequence_catalog", "sequence_schema", "sequence_name", "data_type", "numeric_precision", "numeric_precision_radix", "numeric_scale", "start_value", "minimum_value", "maximum_value", "increment", "cycle_option")(x => (x.sequenceCatalog, x.sequenceSchema, x.sequenceName, x.dataType, x.numericPrecision, x.numericPrecisionRadix, x.numericScale, x.startValue, x.minimumValue, x.maximumValue, x.increment, x.cycleOption))(Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(CharacterData.encoder), Encoder.encodeOption(CardinalNumber.encoder), Encoder.encodeOption(CardinalNumber.encoder), Encoder.encodeOption(CardinalNumber.encoder), Encoder.encodeOption(CharacterData.encoder), Encoder.encodeOption(CharacterData.encoder), Encoder.encodeOption(CharacterData.encoder), Encoder.encodeOption(CharacterData.encoder), Encoder.encodeOption(YesOrNo.encoder))
  implicit val read: Read[SequencesViewRow] = new Read[SequencesViewRow](
    gets = List(
      (SqlIdentifier.get, Nullability.Nullable),
      (SqlIdentifier.get, Nullability.Nullable),
      (SqlIdentifier.get, Nullability.Nullable),
      (CharacterData.get, Nullability.Nullable),
      (CardinalNumber.get, Nullability.Nullable),
      (CardinalNumber.get, Nullability.Nullable),
      (CardinalNumber.get, Nullability.Nullable),
      (CharacterData.get, Nullability.Nullable),
      (CharacterData.get, Nullability.Nullable),
      (CharacterData.get, Nullability.Nullable),
      (CharacterData.get, Nullability.Nullable),
      (YesOrNo.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SequencesViewRow(
      sequenceCatalog = SqlIdentifier.get.unsafeGetNullable(rs, i + 0),
      sequenceSchema = SqlIdentifier.get.unsafeGetNullable(rs, i + 1),
      sequenceName = SqlIdentifier.get.unsafeGetNullable(rs, i + 2),
      dataType = CharacterData.get.unsafeGetNullable(rs, i + 3),
      numericPrecision = CardinalNumber.get.unsafeGetNullable(rs, i + 4),
      numericPrecisionRadix = CardinalNumber.get.unsafeGetNullable(rs, i + 5),
      numericScale = CardinalNumber.get.unsafeGetNullable(rs, i + 6),
      startValue = CharacterData.get.unsafeGetNullable(rs, i + 7),
      minimumValue = CharacterData.get.unsafeGetNullable(rs, i + 8),
      maximumValue = CharacterData.get.unsafeGetNullable(rs, i + 9),
      increment = CharacterData.get.unsafeGetNullable(rs, i + 10),
      cycleOption = YesOrNo.get.unsafeGetNullable(rs, i + 11)
    )
  )
}
