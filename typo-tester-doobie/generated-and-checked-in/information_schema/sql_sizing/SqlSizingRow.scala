/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sql_sizing

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class SqlSizingRow(
  sizingId: Option[CardinalNumber],
  sizingName: Option[CharacterData],
  supportedValue: Option[CardinalNumber],
  comments: Option[CharacterData]
)

object SqlSizingRow {
  implicit val decoder: Decoder[SqlSizingRow] =
    (c: HCursor) =>
      for {
        sizingId <- c.downField("sizing_id").as[Option[CardinalNumber]]
        sizingName <- c.downField("sizing_name").as[Option[CharacterData]]
        supportedValue <- c.downField("supported_value").as[Option[CardinalNumber]]
        comments <- c.downField("comments").as[Option[CharacterData]]
      } yield SqlSizingRow(sizingId, sizingName, supportedValue, comments)
  implicit val encoder: Encoder[SqlSizingRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "sizing_id" := row.sizingId,
        "sizing_name" := row.sizingName,
        "supported_value" := row.supportedValue,
        "comments" := row.comments
      )}
  implicit val read: Read[SqlSizingRow] =
    new Read[SqlSizingRow](
      gets = List(
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SqlSizingRow(
        sizingId = Get[CardinalNumber].unsafeGetNullable(rs, i + 0),
        sizingName = Get[CharacterData].unsafeGetNullable(rs, i + 1),
        supportedValue = Get[CardinalNumber].unsafeGetNullable(rs, i + 2),
        comments = Get[CharacterData].unsafeGetNullable(rs, i + 3)
      )
    )
  

}
