/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_data_wrappers`

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgForeignDataWrappersViewRow(
  oid: Option[/* oid */ Long],
  fdwowner: Option[/* oid */ Long],
  fdwoptions: Option[Array[String]],
  foreignDataWrapperCatalog: Option[SqlIdentifier],
  foreignDataWrapperName: Option[SqlIdentifier],
  authorizationIdentifier: Option[SqlIdentifier],
  foreignDataWrapperLanguage: Option[CharacterData]
)

object PgForeignDataWrappersViewRow {
  implicit val decoder: Decoder[PgForeignDataWrappersViewRow] =
    (c: HCursor) =>
      for {
        oid <- c.downField("oid").as[Option[/* oid */ Long]]
        fdwowner <- c.downField("fdwowner").as[Option[/* oid */ Long]]
        fdwoptions <- c.downField("fdwoptions").as[Option[Array[String]]]
        foreignDataWrapperCatalog <- c.downField("foreign_data_wrapper_catalog").as[Option[SqlIdentifier]]
        foreignDataWrapperName <- c.downField("foreign_data_wrapper_name").as[Option[SqlIdentifier]]
        authorizationIdentifier <- c.downField("authorization_identifier").as[Option[SqlIdentifier]]
        foreignDataWrapperLanguage <- c.downField("foreign_data_wrapper_language").as[Option[CharacterData]]
      } yield PgForeignDataWrappersViewRow(oid, fdwowner, fdwoptions, foreignDataWrapperCatalog, foreignDataWrapperName, authorizationIdentifier, foreignDataWrapperLanguage)
  implicit val encoder: Encoder[PgForeignDataWrappersViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "oid" := row.oid,
        "fdwowner" := row.fdwowner,
        "fdwoptions" := row.fdwoptions,
        "foreign_data_wrapper_catalog" := row.foreignDataWrapperCatalog,
        "foreign_data_wrapper_name" := row.foreignDataWrapperName,
        "authorization_identifier" := row.authorizationIdentifier,
        "foreign_data_wrapper_language" := row.foreignDataWrapperLanguage
      )}
  implicit val read: Read[PgForeignDataWrappersViewRow] =
    new Read[PgForeignDataWrappersViewRow](
      gets = List(
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[Array[String]], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgForeignDataWrappersViewRow(
        oid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 0),
        fdwowner = Get[/* oid */ Long].unsafeGetNullable(rs, i + 1),
        fdwoptions = Get[Array[String]].unsafeGetNullable(rs, i + 2),
        foreignDataWrapperCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        foreignDataWrapperName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
        authorizationIdentifier = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
        foreignDataWrapperLanguage = Get[CharacterData].unsafeGetNullable(rs, i + 6)
      )
    )
  

}
