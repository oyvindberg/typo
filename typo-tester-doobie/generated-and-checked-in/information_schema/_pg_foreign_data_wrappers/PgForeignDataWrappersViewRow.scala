/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_data_wrappers`

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgForeignDataWrappersViewRow(
  oid: Option[/* oid */ Long],
  fdwowner: Option[/* oid */ Long],
  fdwoptions: Option[Array[String]],
  foreignDataWrapperCatalog: Option[SqlIdentifier],
  foreignDataWrapperName: Option[SqlIdentifier],
  authorizationIdentifier: Option[SqlIdentifier],
  foreignDataWrapperLanguage: Option[CharacterData]
)

object PgForeignDataWrappersViewRow {
  implicit val decoder: Decoder[PgForeignDataWrappersViewRow] = Decoder.forProduct7[PgForeignDataWrappersViewRow, Option[/* oid */ Long], Option[/* oid */ Long], Option[Array[String]], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData]]("oid", "fdwowner", "fdwoptions", "foreign_data_wrapper_catalog", "foreign_data_wrapper_name", "authorization_identifier", "foreign_data_wrapper_language")(PgForeignDataWrappersViewRow.apply)(Decoder.decodeOption(Decoder.decodeLong), Decoder.decodeOption(Decoder.decodeLong), Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)), Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(CharacterData.decoder))
  implicit val encoder: Encoder[PgForeignDataWrappersViewRow] = Encoder.forProduct7[PgForeignDataWrappersViewRow, Option[/* oid */ Long], Option[/* oid */ Long], Option[Array[String]], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData]]("oid", "fdwowner", "fdwoptions", "foreign_data_wrapper_catalog", "foreign_data_wrapper_name", "authorization_identifier", "foreign_data_wrapper_language")(x => (x.oid, x.fdwowner, x.fdwoptions, x.foreignDataWrapperCatalog, x.foreignDataWrapperName, x.authorizationIdentifier, x.foreignDataWrapperLanguage))(Encoder.encodeOption(Encoder.encodeLong), Encoder.encodeOption(Encoder.encodeLong), Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)), Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(CharacterData.encoder))
  implicit val read: Read[PgForeignDataWrappersViewRow] = new Read[PgForeignDataWrappersViewRow](
    gets = List(
      (Meta.LongMeta.get, Nullability.Nullable),
      (Meta.LongMeta.get, Nullability.Nullable),
      (adventureworks.StringArrayMeta.get, Nullability.Nullable),
      (SqlIdentifier.get, Nullability.Nullable),
      (SqlIdentifier.get, Nullability.Nullable),
      (SqlIdentifier.get, Nullability.Nullable),
      (CharacterData.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgForeignDataWrappersViewRow(
      oid = Meta.LongMeta.get.unsafeGetNullable(rs, i + 0),
      fdwowner = Meta.LongMeta.get.unsafeGetNullable(rs, i + 1),
      fdwoptions = adventureworks.StringArrayMeta.get.unsafeGetNullable(rs, i + 2),
      foreignDataWrapperCatalog = SqlIdentifier.get.unsafeGetNullable(rs, i + 3),
      foreignDataWrapperName = SqlIdentifier.get.unsafeGetNullable(rs, i + 4),
      authorizationIdentifier = SqlIdentifier.get.unsafeGetNullable(rs, i + 5),
      foreignDataWrapperLanguage = CharacterData.get.unsafeGetNullable(rs, i + 6)
    )
  )
}
