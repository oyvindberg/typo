/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.time.OffsetDateTime

/** Domain `information_schema.time_stamp`
  * No constraint
  */
case class TimeStamp(value: OffsetDateTime) extends AnyVal
object TimeStamp {
  implicit def ordering(implicit ev: Ordering[OffsetDateTime]): Ordering[TimeStamp] = Ordering.by(_.value)
  implicit val encoder: Encoder[TimeStamp] =
    Encoder[OffsetDateTime].contramap(_.value)
  implicit val decoder: Decoder[TimeStamp] =
    Decoder[OffsetDateTime].map(TimeStamp(_))
  implicit val meta: Meta[TimeStamp] = Meta[OffsetDateTime].imap(TimeStamp.apply)(_.value)
//  implicit val metaArray: Meta[Array[TimeStamp]] = Meta[Array[OffsetDateTime]].imap(_.map(TimeStamp.apply))(_.map(_.value))
}
