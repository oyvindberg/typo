/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package domain_constraints

import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class DomainConstraintsViewRow(
  constraintCatalog: Option[SqlIdentifier],
  constraintSchema: Option[SqlIdentifier],
  constraintName: Option[SqlIdentifier],
  domainCatalog: Option[SqlIdentifier],
  domainSchema: Option[SqlIdentifier],
  domainName: Option[SqlIdentifier],
  isDeferrable: Option[YesOrNo],
  initiallyDeferred: Option[YesOrNo]
)

object DomainConstraintsViewRow {
  implicit val decoder: Decoder[DomainConstraintsViewRow] =
    (c: HCursor) =>
      for {
        constraintCatalog <- c.downField("constraint_catalog").as[Option[SqlIdentifier]]
        constraintSchema <- c.downField("constraint_schema").as[Option[SqlIdentifier]]
        constraintName <- c.downField("constraint_name").as[Option[SqlIdentifier]]
        domainCatalog <- c.downField("domain_catalog").as[Option[SqlIdentifier]]
        domainSchema <- c.downField("domain_schema").as[Option[SqlIdentifier]]
        domainName <- c.downField("domain_name").as[Option[SqlIdentifier]]
        isDeferrable <- c.downField("is_deferrable").as[Option[YesOrNo]]
        initiallyDeferred <- c.downField("initially_deferred").as[Option[YesOrNo]]
      } yield DomainConstraintsViewRow(constraintCatalog, constraintSchema, constraintName, domainCatalog, domainSchema, domainName, isDeferrable, initiallyDeferred)
  implicit val encoder: Encoder[DomainConstraintsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "constraint_catalog" := row.constraintCatalog,
        "constraint_schema" := row.constraintSchema,
        "constraint_name" := row.constraintName,
        "domain_catalog" := row.domainCatalog,
        "domain_schema" := row.domainSchema,
        "domain_name" := row.domainName,
        "is_deferrable" := row.isDeferrable,
        "initially_deferred" := row.initiallyDeferred
      )}
  implicit val read: Read[DomainConstraintsViewRow] =
    new Read[DomainConstraintsViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => DomainConstraintsViewRow(
        constraintCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        constraintSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        constraintName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        domainCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        domainSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
        domainName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
        isDeferrable = Get[YesOrNo].unsafeGetNullable(rs, i + 6),
        initiallyDeferred = Get[YesOrNo].unsafeGetNullable(rs, i + 7)
      )
    )
  

}
