/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Domain `information_schema.yes_or_no`
  * Constraint: CHECK (((VALUE)::text = ANY ((ARRAY['YES'::character varying, 'NO'::character varying])::text[])))
  */
case class YesOrNo(value: String) extends AnyVal
object YesOrNo {
  implicit def ordering(implicit ev: Ordering[String]): Ordering[YesOrNo] = Ordering.by(_.value)
  implicit val encoder: Encoder[YesOrNo] =
    Encoder[String].contramap(_.value)
  implicit val decoder: Decoder[YesOrNo] =
    Decoder[String].map(YesOrNo(_))
  implicit val meta: Meta[YesOrNo] = Meta[String].imap(YesOrNo.apply)(_.value)
  implicit val metaArray: Meta[Array[YesOrNo]] = Meta[Array[String]].imap(_.map(YesOrNo.apply))(_.map(_.value))
}
