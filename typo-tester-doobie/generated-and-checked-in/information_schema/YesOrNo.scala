/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder

/** Domain `information_schema.yes_or_no`
  * Constraint: CHECK (((VALUE)::text = ANY ((ARRAY['YES'::character varying, 'NO'::character varying])::text[])))
  */
case class YesOrNo(value: String) extends AnyVal
object YesOrNo {
  implicit val arrayGet: Get[Array[YesOrNo]] = Get[Array[String]].map(_.map(YesOrNo.apply))
  implicit val arrayPut: Put[Array[YesOrNo]] = Put[Array[String]].contramap(_.map(_.value))
  implicit val decoder: Decoder[YesOrNo] = Decoder[String].map(YesOrNo.apply)
  implicit val encoder: Encoder[YesOrNo] = Encoder[String].contramap(_.value)
  implicit val get: Get[YesOrNo] = Get[String].map(YesOrNo.apply)
  implicit val ordering: Ordering[YesOrNo] = Ordering.by(_.value)
  implicit val put: Put[YesOrNo] = Put[String].contramap(_.value)
}
