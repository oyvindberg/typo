/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_tables

import adventureworks.information_schema.SqlIdentifier
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class ForeignTablesViewRow(
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableCatalog]] */
  foreignTableCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableSchema]] */
  foreignTableSchema: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignTableName]] */
  foreignTableName: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignServerCatalog]] */
  foreignServerCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_tables`.PgForeignTablesViewRow.foreignServerName]] */
  foreignServerName: Option[SqlIdentifier]
)

object ForeignTablesViewRow {
  implicit val decoder: Decoder[ForeignTablesViewRow] =
    (c: HCursor) =>
      for {
        foreignTableCatalog <- c.downField("foreign_table_catalog").as[Option[SqlIdentifier]]
        foreignTableSchema <- c.downField("foreign_table_schema").as[Option[SqlIdentifier]]
        foreignTableName <- c.downField("foreign_table_name").as[Option[SqlIdentifier]]
        foreignServerCatalog <- c.downField("foreign_server_catalog").as[Option[SqlIdentifier]]
        foreignServerName <- c.downField("foreign_server_name").as[Option[SqlIdentifier]]
      } yield ForeignTablesViewRow(foreignTableCatalog, foreignTableSchema, foreignTableName, foreignServerCatalog, foreignServerName)
  implicit val encoder: Encoder[ForeignTablesViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "foreign_table_catalog" := row.foreignTableCatalog,
        "foreign_table_schema" := row.foreignTableSchema,
        "foreign_table_name" := row.foreignTableName,
        "foreign_server_catalog" := row.foreignServerCatalog,
        "foreign_server_name" := row.foreignServerName
      )}
  implicit val read: Read[ForeignTablesViewRow] =
    new Read[ForeignTablesViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ForeignTablesViewRow(
        foreignTableCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        foreignTableSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        foreignTableName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        foreignServerCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        foreignServerName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4)
      )
    )
  

}
