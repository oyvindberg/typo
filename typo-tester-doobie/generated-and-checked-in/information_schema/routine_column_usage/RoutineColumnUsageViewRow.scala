/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package routine_column_usage

import adventureworks.information_schema.SqlIdentifier
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class RoutineColumnUsageViewRow(
  specificCatalog: Option[SqlIdentifier],
  specificSchema: Option[SqlIdentifier],
  specificName: Option[SqlIdentifier],
  routineCatalog: Option[SqlIdentifier],
  routineSchema: Option[SqlIdentifier],
  routineName: Option[SqlIdentifier],
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  columnName: Option[SqlIdentifier]
)

object RoutineColumnUsageViewRow {
  implicit val decoder: Decoder[RoutineColumnUsageViewRow] =
    (c: HCursor) =>
      for {
        specificCatalog <- c.downField("specific_catalog").as[Option[SqlIdentifier]]
        specificSchema <- c.downField("specific_schema").as[Option[SqlIdentifier]]
        specificName <- c.downField("specific_name").as[Option[SqlIdentifier]]
        routineCatalog <- c.downField("routine_catalog").as[Option[SqlIdentifier]]
        routineSchema <- c.downField("routine_schema").as[Option[SqlIdentifier]]
        routineName <- c.downField("routine_name").as[Option[SqlIdentifier]]
        tableCatalog <- c.downField("table_catalog").as[Option[SqlIdentifier]]
        tableSchema <- c.downField("table_schema").as[Option[SqlIdentifier]]
        tableName <- c.downField("table_name").as[Option[SqlIdentifier]]
        columnName <- c.downField("column_name").as[Option[SqlIdentifier]]
      } yield RoutineColumnUsageViewRow(specificCatalog, specificSchema, specificName, routineCatalog, routineSchema, routineName, tableCatalog, tableSchema, tableName, columnName)
  implicit val encoder: Encoder[RoutineColumnUsageViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "specific_catalog" := row.specificCatalog,
        "specific_schema" := row.specificSchema,
        "specific_name" := row.specificName,
        "routine_catalog" := row.routineCatalog,
        "routine_schema" := row.routineSchema,
        "routine_name" := row.routineName,
        "table_catalog" := row.tableCatalog,
        "table_schema" := row.tableSchema,
        "table_name" := row.tableName,
        "column_name" := row.columnName
      )}
  implicit val read: Read[RoutineColumnUsageViewRow] =
    new Read[RoutineColumnUsageViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => RoutineColumnUsageViewRow(
        specificCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        specificSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        specificName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        routineCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        routineSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
        routineName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
        tableCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 6),
        tableSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 7),
        tableName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 8),
        columnName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 9)
      )
    )
  

}
