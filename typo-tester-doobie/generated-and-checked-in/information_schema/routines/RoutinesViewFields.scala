/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package routines

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.TimeStamp
import adventureworks.information_schema.YesOrNo
import typo.dsl.SqlExpr.OptField

trait RoutinesViewFields[Row] {
  val specificCatalog: OptField[SqlIdentifier, Row]
  val specificSchema: OptField[SqlIdentifier, Row]
  val specificName: OptField[SqlIdentifier, Row]
  val routineCatalog: OptField[SqlIdentifier, Row]
  val routineSchema: OptField[SqlIdentifier, Row]
  val routineName: OptField[SqlIdentifier, Row]
  val routineType: OptField[CharacterData, Row]
  val moduleCatalog: OptField[SqlIdentifier, Row]
  val moduleSchema: OptField[SqlIdentifier, Row]
  val moduleName: OptField[SqlIdentifier, Row]
  val udtCatalog: OptField[SqlIdentifier, Row]
  val udtSchema: OptField[SqlIdentifier, Row]
  val udtName: OptField[SqlIdentifier, Row]
  val dataType: OptField[CharacterData, Row]
  val characterMaximumLength: OptField[CardinalNumber, Row]
  val characterOctetLength: OptField[CardinalNumber, Row]
  val characterSetCatalog: OptField[SqlIdentifier, Row]
  val characterSetSchema: OptField[SqlIdentifier, Row]
  val characterSetName: OptField[SqlIdentifier, Row]
  val collationCatalog: OptField[SqlIdentifier, Row]
  val collationSchema: OptField[SqlIdentifier, Row]
  val collationName: OptField[SqlIdentifier, Row]
  val numericPrecision: OptField[CardinalNumber, Row]
  val numericPrecisionRadix: OptField[CardinalNumber, Row]
  val numericScale: OptField[CardinalNumber, Row]
  val datetimePrecision: OptField[CardinalNumber, Row]
  val intervalType: OptField[CharacterData, Row]
  val intervalPrecision: OptField[CardinalNumber, Row]
  val typeUdtCatalog: OptField[SqlIdentifier, Row]
  val typeUdtSchema: OptField[SqlIdentifier, Row]
  val typeUdtName: OptField[SqlIdentifier, Row]
  val scopeCatalog: OptField[SqlIdentifier, Row]
  val scopeSchema: OptField[SqlIdentifier, Row]
  val scopeName: OptField[SqlIdentifier, Row]
  val maximumCardinality: OptField[CardinalNumber, Row]
  val dtdIdentifier: OptField[SqlIdentifier, Row]
  val routineBody: OptField[CharacterData, Row]
  val routineDefinition: OptField[CharacterData, Row]
  val externalName: OptField[CharacterData, Row]
  val externalLanguage: OptField[CharacterData, Row]
  val parameterStyle: OptField[CharacterData, Row]
  val isDeterministic: OptField[YesOrNo, Row]
  val sqlDataAccess: OptField[CharacterData, Row]
  val isNullCall: OptField[YesOrNo, Row]
  val sqlPath: OptField[CharacterData, Row]
  val schemaLevelRoutine: OptField[YesOrNo, Row]
  val maxDynamicResultSets: OptField[CardinalNumber, Row]
  val isUserDefinedCast: OptField[YesOrNo, Row]
  val isImplicitlyInvocable: OptField[YesOrNo, Row]
  val securityType: OptField[CharacterData, Row]
  val toSqlSpecificCatalog: OptField[SqlIdentifier, Row]
  val toSqlSpecificSchema: OptField[SqlIdentifier, Row]
  val toSqlSpecificName: OptField[SqlIdentifier, Row]
  val asLocator: OptField[YesOrNo, Row]
  val created: OptField[TimeStamp, Row]
  val lastAltered: OptField[TimeStamp, Row]
  val newSavepointLevel: OptField[YesOrNo, Row]
  val isUdtDependent: OptField[YesOrNo, Row]
  val resultCastFromDataType: OptField[CharacterData, Row]
  val resultCastAsLocator: OptField[YesOrNo, Row]
  val resultCastCharMaxLength: OptField[CardinalNumber, Row]
  val resultCastCharOctetLength: OptField[CardinalNumber, Row]
  val resultCastCharSetCatalog: OptField[SqlIdentifier, Row]
  val resultCastCharSetSchema: OptField[SqlIdentifier, Row]
  val resultCastCharSetName: OptField[SqlIdentifier, Row]
  val resultCastCollationCatalog: OptField[SqlIdentifier, Row]
  val resultCastCollationSchema: OptField[SqlIdentifier, Row]
  val resultCastCollationName: OptField[SqlIdentifier, Row]
  val resultCastNumericPrecision: OptField[CardinalNumber, Row]
  val resultCastNumericPrecisionRadix: OptField[CardinalNumber, Row]
  val resultCastNumericScale: OptField[CardinalNumber, Row]
  val resultCastDatetimePrecision: OptField[CardinalNumber, Row]
  val resultCastIntervalType: OptField[CharacterData, Row]
  val resultCastIntervalPrecision: OptField[CardinalNumber, Row]
  val resultCastTypeUdtCatalog: OptField[SqlIdentifier, Row]
  val resultCastTypeUdtSchema: OptField[SqlIdentifier, Row]
  val resultCastTypeUdtName: OptField[SqlIdentifier, Row]
  val resultCastScopeCatalog: OptField[SqlIdentifier, Row]
  val resultCastScopeSchema: OptField[SqlIdentifier, Row]
  val resultCastScopeName: OptField[SqlIdentifier, Row]
  val resultCastMaximumCardinality: OptField[CardinalNumber, Row]
  val resultCastDtdIdentifier: OptField[SqlIdentifier, Row]
}
object RoutinesViewFields extends RoutinesViewStructure[RoutinesViewRow](None, identity, (_, x) => x)

