/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package data_type_privileges

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class DataTypePrivilegesViewRow(
  objectCatalog: Option[SqlIdentifier],
  objectSchema: Option[SqlIdentifier],
  objectName: Option[SqlIdentifier],
  objectType: Option[CharacterData],
  /** Points to [[attributes.AttributesViewRow.dtdIdentifier]] */
  dtdIdentifier: Option[SqlIdentifier]
)

object DataTypePrivilegesViewRow {
  implicit val decoder: Decoder[DataTypePrivilegesViewRow] =
    (c: HCursor) =>
      for {
        objectCatalog <- c.downField("object_catalog").as[Option[SqlIdentifier]]
        objectSchema <- c.downField("object_schema").as[Option[SqlIdentifier]]
        objectName <- c.downField("object_name").as[Option[SqlIdentifier]]
        objectType <- c.downField("object_type").as[Option[CharacterData]]
        dtdIdentifier <- c.downField("dtd_identifier").as[Option[SqlIdentifier]]
      } yield DataTypePrivilegesViewRow(objectCatalog, objectSchema, objectName, objectType, dtdIdentifier)
  implicit val encoder: Encoder[DataTypePrivilegesViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "object_catalog" := row.objectCatalog,
        "object_schema" := row.objectSchema,
        "object_name" := row.objectName,
        "object_type" := row.objectType,
        "dtd_identifier" := row.dtdIdentifier
      )}
  implicit val read: Read[DataTypePrivilegesViewRow] =
    new Read[DataTypePrivilegesViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => DataTypePrivilegesViewRow(
        objectCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        objectSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        objectName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        objectType = Get[CharacterData].unsafeGetNullable(rs, i + 3),
        dtdIdentifier = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4)
      )
    )
  

}
