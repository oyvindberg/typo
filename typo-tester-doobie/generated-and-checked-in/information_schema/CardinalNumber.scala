/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Domain `information_schema.cardinal_number`
  * Constraint: CHECK ((VALUE >= 0))
  */
case class CardinalNumber(value: Int) extends AnyVal
object CardinalNumber {
  implicit def ordering(implicit ev: Ordering[Int]): Ordering[CardinalNumber] = Ordering.by(_.value)
  implicit val encoder: Encoder[CardinalNumber] =
    Encoder[Int].contramap(_.value)
  implicit val decoder: Decoder[CardinalNumber] =
    Decoder[Int].map(CardinalNumber(_))
  implicit val meta: Meta[CardinalNumber] = Meta[Int].imap(CardinalNumber.apply)(_.value)
  implicit val metaArray: Meta[Array[CardinalNumber]] = Meta[Array[Int]].imap(_.map(CardinalNumber.apply))(_.map(_.value))
}
