/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package routine_privileges

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class RoutinePrivilegesViewRow(
  grantor: Option[SqlIdentifier],
  grantee: Option[SqlIdentifier],
  specificCatalog: Option[SqlIdentifier],
  specificSchema: Option[SqlIdentifier],
  specificName: Option[SqlIdentifier],
  routineCatalog: Option[SqlIdentifier],
  routineSchema: Option[SqlIdentifier],
  routineName: Option[SqlIdentifier],
  privilegeType: Option[CharacterData],
  isGrantable: Option[YesOrNo]
)

object RoutinePrivilegesViewRow {
  implicit val decoder: Decoder[RoutinePrivilegesViewRow] = Decoder.forProduct10[RoutinePrivilegesViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[YesOrNo]]("grantor", "grantee", "specific_catalog", "specific_schema", "specific_name", "routine_catalog", "routine_schema", "routine_name", "privilege_type", "is_grantable")(RoutinePrivilegesViewRow.apply)
  implicit val encoder: Encoder[RoutinePrivilegesViewRow] = Encoder.forProduct10[RoutinePrivilegesViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[YesOrNo]]("grantor", "grantee", "specific_catalog", "specific_schema", "specific_name", "routine_catalog", "routine_schema", "routine_name", "privilege_type", "is_grantable")(x => (x.grantor, x.grantee, x.specificCatalog, x.specificSchema, x.specificName, x.routineCatalog, x.routineSchema, x.routineName, x.privilegeType, x.isGrantable))
  implicit val read: Read[RoutinePrivilegesViewRow] = new Read[RoutinePrivilegesViewRow](
    gets = List(
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => RoutinePrivilegesViewRow(
      grantor = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
      grantee = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
      specificCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
      specificSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
      specificName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
      routineCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
      routineSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 6),
      routineName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 7),
      privilegeType = Get[CharacterData].unsafeGetNullable(rs, i + 8),
      isGrantable = Get[YesOrNo].unsafeGetNullable(rs, i + 9)
    )
  )
}
