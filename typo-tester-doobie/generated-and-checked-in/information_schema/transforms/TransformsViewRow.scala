/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package transforms

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class TransformsViewRow(
  udtCatalog: Option[SqlIdentifier],
  udtSchema: Option[SqlIdentifier],
  udtName: Option[SqlIdentifier],
  specificCatalog: Option[SqlIdentifier],
  specificSchema: Option[SqlIdentifier],
  specificName: Option[SqlIdentifier],
  groupName: Option[SqlIdentifier],
  transformType: Option[CharacterData]
)

object TransformsViewRow {
  implicit val decoder: Decoder[TransformsViewRow] =
    (c: HCursor) =>
      for {
        udtCatalog <- c.downField("udt_catalog").as[Option[SqlIdentifier]]
        udtSchema <- c.downField("udt_schema").as[Option[SqlIdentifier]]
        udtName <- c.downField("udt_name").as[Option[SqlIdentifier]]
        specificCatalog <- c.downField("specific_catalog").as[Option[SqlIdentifier]]
        specificSchema <- c.downField("specific_schema").as[Option[SqlIdentifier]]
        specificName <- c.downField("specific_name").as[Option[SqlIdentifier]]
        groupName <- c.downField("group_name").as[Option[SqlIdentifier]]
        transformType <- c.downField("transform_type").as[Option[CharacterData]]
      } yield TransformsViewRow(udtCatalog, udtSchema, udtName, specificCatalog, specificSchema, specificName, groupName, transformType)
  implicit val encoder: Encoder[TransformsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "udt_catalog" := row.udtCatalog,
        "udt_schema" := row.udtSchema,
        "udt_name" := row.udtName,
        "specific_catalog" := row.specificCatalog,
        "specific_schema" := row.specificSchema,
        "specific_name" := row.specificName,
        "group_name" := row.groupName,
        "transform_type" := row.transformType
      )}
  implicit val read: Read[TransformsViewRow] =
    new Read[TransformsViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => TransformsViewRow(
        udtCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        udtSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        udtName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        specificCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        specificSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
        specificName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
        groupName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 6),
        transformType = Get[CharacterData].unsafeGetNullable(rs, i + 7)
      )
    )
  

}
