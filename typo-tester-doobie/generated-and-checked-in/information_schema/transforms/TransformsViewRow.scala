/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package transforms

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class TransformsViewRow(
  udtCatalog: Option[SqlIdentifier],
  udtSchema: Option[SqlIdentifier],
  udtName: Option[SqlIdentifier],
  specificCatalog: Option[SqlIdentifier],
  specificSchema: Option[SqlIdentifier],
  specificName: Option[SqlIdentifier],
  groupName: Option[SqlIdentifier],
  transformType: Option[CharacterData]
)

object TransformsViewRow {
  implicit val decoder: Decoder[TransformsViewRow] = Decoder.forProduct8[TransformsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData]]("udt_catalog", "udt_schema", "udt_name", "specific_catalog", "specific_schema", "specific_name", "group_name", "transform_type")(TransformsViewRow.apply)
  implicit val encoder: Encoder[TransformsViewRow] = Encoder.forProduct8[TransformsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData]]("udt_catalog", "udt_schema", "udt_name", "specific_catalog", "specific_schema", "specific_name", "group_name", "transform_type")(x => (x.udtCatalog, x.udtSchema, x.udtName, x.specificCatalog, x.specificSchema, x.specificName, x.groupName, x.transformType))
  implicit val read: Read[TransformsViewRow] = new Read[TransformsViewRow](
    gets = List(
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => TransformsViewRow(
      udtCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
      udtSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
      udtName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
      specificCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
      specificSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
      specificName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
      groupName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 6),
      transformType = Get[CharacterData].unsafeGetNullable(rs, i + 7)
    )
  )
}
