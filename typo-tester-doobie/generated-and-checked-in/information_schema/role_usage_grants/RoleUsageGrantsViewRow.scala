/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package role_usage_grants

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class RoleUsageGrantsViewRow(
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.grantor]] */
  grantor: Option[SqlIdentifier],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.grantee]] */
  grantee: Option[SqlIdentifier],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.objectCatalog]] */
  objectCatalog: Option[SqlIdentifier],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.objectSchema]] */
  objectSchema: Option[SqlIdentifier],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.objectName]] */
  objectName: Option[SqlIdentifier],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.objectType]] */
  objectType: Option[CharacterData],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.privilegeType]] */
  privilegeType: Option[CharacterData],
  /** Points to [[usage_privileges.UsagePrivilegesViewRow.isGrantable]] */
  isGrantable: Option[YesOrNo]
)

object RoleUsageGrantsViewRow {
  implicit val decoder: Decoder[RoleUsageGrantsViewRow] = Decoder.forProduct8[RoleUsageGrantsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CharacterData], Option[YesOrNo]]("grantor", "grantee", "object_catalog", "object_schema", "object_name", "object_type", "privilege_type", "is_grantable")(RoleUsageGrantsViewRow.apply)
  implicit val encoder: Encoder[RoleUsageGrantsViewRow] = Encoder.forProduct8[RoleUsageGrantsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CharacterData], Option[YesOrNo]]("grantor", "grantee", "object_catalog", "object_schema", "object_name", "object_type", "privilege_type", "is_grantable")(x => (x.grantor, x.grantee, x.objectCatalog, x.objectSchema, x.objectName, x.objectType, x.privilegeType, x.isGrantable))
  implicit val read: Read[RoleUsageGrantsViewRow] = new Read[RoleUsageGrantsViewRow](
    gets = List(
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => RoleUsageGrantsViewRow(
      grantor = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
      grantee = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
      objectCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
      objectSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
      objectName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
      objectType = Get[CharacterData].unsafeGetNullable(rs, i + 5),
      privilegeType = Get[CharacterData].unsafeGetNullable(rs, i + 6),
      isGrantable = Get[YesOrNo].unsafeGetNullable(rs, i + 7)
    )
  )
}
