/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import scala.util.Try

case class UserDefinedTypesViewRow(
  userDefinedTypeCatalog: Option[SqlIdentifier],
  userDefinedTypeSchema: Option[SqlIdentifier],
  userDefinedTypeName: Option[SqlIdentifier],
  userDefinedTypeCategory: Option[CharacterData],
  isInstantiable: Option[YesOrNo],
  isFinal: Option[YesOrNo],
  orderingForm: Option[CharacterData],
  orderingCategory: Option[CharacterData],
  orderingRoutineCatalog: Option[SqlIdentifier],
  orderingRoutineSchema: Option[SqlIdentifier],
  orderingRoutineName: Option[SqlIdentifier],
  referenceType: Option[CharacterData],
  dataType: Option[CharacterData],
  characterMaximumLength: Option[CardinalNumber],
  characterOctetLength: Option[CardinalNumber],
  characterSetCatalog: Option[SqlIdentifier],
  characterSetSchema: Option[SqlIdentifier],
  characterSetName: Option[SqlIdentifier],
  collationCatalog: Option[SqlIdentifier],
  collationSchema: Option[SqlIdentifier],
  collationName: Option[SqlIdentifier],
  numericPrecision: Option[CardinalNumber],
  numericPrecisionRadix: Option[CardinalNumber],
  numericScale: Option[CardinalNumber],
  datetimePrecision: Option[CardinalNumber],
  intervalType: Option[CharacterData],
  intervalPrecision: Option[CardinalNumber],
  sourceDtdIdentifier: Option[SqlIdentifier],
  refDtdIdentifier: Option[SqlIdentifier]
)

object UserDefinedTypesViewRow {
  implicit val decoder: Decoder[UserDefinedTypesViewRow] = Decoder.instanceTry[UserDefinedTypesViewRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      UserDefinedTypesViewRow(
        userDefinedTypeCatalog = orThrow(c.get("user_defined_type_catalog")(Decoder[Option[SqlIdentifier]])),
        userDefinedTypeSchema = orThrow(c.get("user_defined_type_schema")(Decoder[Option[SqlIdentifier]])),
        userDefinedTypeName = orThrow(c.get("user_defined_type_name")(Decoder[Option[SqlIdentifier]])),
        userDefinedTypeCategory = orThrow(c.get("user_defined_type_category")(Decoder[Option[CharacterData]])),
        isInstantiable = orThrow(c.get("is_instantiable")(Decoder[Option[YesOrNo]])),
        isFinal = orThrow(c.get("is_final")(Decoder[Option[YesOrNo]])),
        orderingForm = orThrow(c.get("ordering_form")(Decoder[Option[CharacterData]])),
        orderingCategory = orThrow(c.get("ordering_category")(Decoder[Option[CharacterData]])),
        orderingRoutineCatalog = orThrow(c.get("ordering_routine_catalog")(Decoder[Option[SqlIdentifier]])),
        orderingRoutineSchema = orThrow(c.get("ordering_routine_schema")(Decoder[Option[SqlIdentifier]])),
        orderingRoutineName = orThrow(c.get("ordering_routine_name")(Decoder[Option[SqlIdentifier]])),
        referenceType = orThrow(c.get("reference_type")(Decoder[Option[CharacterData]])),
        dataType = orThrow(c.get("data_type")(Decoder[Option[CharacterData]])),
        characterMaximumLength = orThrow(c.get("character_maximum_length")(Decoder[Option[CardinalNumber]])),
        characterOctetLength = orThrow(c.get("character_octet_length")(Decoder[Option[CardinalNumber]])),
        characterSetCatalog = orThrow(c.get("character_set_catalog")(Decoder[Option[SqlIdentifier]])),
        characterSetSchema = orThrow(c.get("character_set_schema")(Decoder[Option[SqlIdentifier]])),
        characterSetName = orThrow(c.get("character_set_name")(Decoder[Option[SqlIdentifier]])),
        collationCatalog = orThrow(c.get("collation_catalog")(Decoder[Option[SqlIdentifier]])),
        collationSchema = orThrow(c.get("collation_schema")(Decoder[Option[SqlIdentifier]])),
        collationName = orThrow(c.get("collation_name")(Decoder[Option[SqlIdentifier]])),
        numericPrecision = orThrow(c.get("numeric_precision")(Decoder[Option[CardinalNumber]])),
        numericPrecisionRadix = orThrow(c.get("numeric_precision_radix")(Decoder[Option[CardinalNumber]])),
        numericScale = orThrow(c.get("numeric_scale")(Decoder[Option[CardinalNumber]])),
        datetimePrecision = orThrow(c.get("datetime_precision")(Decoder[Option[CardinalNumber]])),
        intervalType = orThrow(c.get("interval_type")(Decoder[Option[CharacterData]])),
        intervalPrecision = orThrow(c.get("interval_precision")(Decoder[Option[CardinalNumber]])),
        sourceDtdIdentifier = orThrow(c.get("source_dtd_identifier")(Decoder[Option[SqlIdentifier]])),
        refDtdIdentifier = orThrow(c.get("ref_dtd_identifier")(Decoder[Option[SqlIdentifier]]))
      )
    }
  )
  implicit val encoder: Encoder[UserDefinedTypesViewRow] = Encoder[UserDefinedTypesViewRow](row =>
    Json.obj(
      "user_defined_type_catalog" -> Encoder[Option[SqlIdentifier]].apply(row.userDefinedTypeCatalog),
      "user_defined_type_schema" -> Encoder[Option[SqlIdentifier]].apply(row.userDefinedTypeSchema),
      "user_defined_type_name" -> Encoder[Option[SqlIdentifier]].apply(row.userDefinedTypeName),
      "user_defined_type_category" -> Encoder[Option[CharacterData]].apply(row.userDefinedTypeCategory),
      "is_instantiable" -> Encoder[Option[YesOrNo]].apply(row.isInstantiable),
      "is_final" -> Encoder[Option[YesOrNo]].apply(row.isFinal),
      "ordering_form" -> Encoder[Option[CharacterData]].apply(row.orderingForm),
      "ordering_category" -> Encoder[Option[CharacterData]].apply(row.orderingCategory),
      "ordering_routine_catalog" -> Encoder[Option[SqlIdentifier]].apply(row.orderingRoutineCatalog),
      "ordering_routine_schema" -> Encoder[Option[SqlIdentifier]].apply(row.orderingRoutineSchema),
      "ordering_routine_name" -> Encoder[Option[SqlIdentifier]].apply(row.orderingRoutineName),
      "reference_type" -> Encoder[Option[CharacterData]].apply(row.referenceType),
      "data_type" -> Encoder[Option[CharacterData]].apply(row.dataType),
      "character_maximum_length" -> Encoder[Option[CardinalNumber]].apply(row.characterMaximumLength),
      "character_octet_length" -> Encoder[Option[CardinalNumber]].apply(row.characterOctetLength),
      "character_set_catalog" -> Encoder[Option[SqlIdentifier]].apply(row.characterSetCatalog),
      "character_set_schema" -> Encoder[Option[SqlIdentifier]].apply(row.characterSetSchema),
      "character_set_name" -> Encoder[Option[SqlIdentifier]].apply(row.characterSetName),
      "collation_catalog" -> Encoder[Option[SqlIdentifier]].apply(row.collationCatalog),
      "collation_schema" -> Encoder[Option[SqlIdentifier]].apply(row.collationSchema),
      "collation_name" -> Encoder[Option[SqlIdentifier]].apply(row.collationName),
      "numeric_precision" -> Encoder[Option[CardinalNumber]].apply(row.numericPrecision),
      "numeric_precision_radix" -> Encoder[Option[CardinalNumber]].apply(row.numericPrecisionRadix),
      "numeric_scale" -> Encoder[Option[CardinalNumber]].apply(row.numericScale),
      "datetime_precision" -> Encoder[Option[CardinalNumber]].apply(row.datetimePrecision),
      "interval_type" -> Encoder[Option[CharacterData]].apply(row.intervalType),
      "interval_precision" -> Encoder[Option[CardinalNumber]].apply(row.intervalPrecision),
      "source_dtd_identifier" -> Encoder[Option[SqlIdentifier]].apply(row.sourceDtdIdentifier),
      "ref_dtd_identifier" -> Encoder[Option[SqlIdentifier]].apply(row.refDtdIdentifier)
    )
  )
  implicit val read: Read[UserDefinedTypesViewRow] = new Read[UserDefinedTypesViewRow](
    gets = List(
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[CardinalNumber], Nullability.Nullable),
      (Get[CardinalNumber], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CardinalNumber], Nullability.Nullable),
      (Get[CardinalNumber], Nullability.Nullable),
      (Get[CardinalNumber], Nullability.Nullable),
      (Get[CardinalNumber], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[CardinalNumber], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => UserDefinedTypesViewRow(
      userDefinedTypeCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
      userDefinedTypeSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
      userDefinedTypeName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
      userDefinedTypeCategory = Get[CharacterData].unsafeGetNullable(rs, i + 3),
      isInstantiable = Get[YesOrNo].unsafeGetNullable(rs, i + 4),
      isFinal = Get[YesOrNo].unsafeGetNullable(rs, i + 5),
      orderingForm = Get[CharacterData].unsafeGetNullable(rs, i + 6),
      orderingCategory = Get[CharacterData].unsafeGetNullable(rs, i + 7),
      orderingRoutineCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 8),
      orderingRoutineSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 9),
      orderingRoutineName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 10),
      referenceType = Get[CharacterData].unsafeGetNullable(rs, i + 11),
      dataType = Get[CharacterData].unsafeGetNullable(rs, i + 12),
      characterMaximumLength = Get[CardinalNumber].unsafeGetNullable(rs, i + 13),
      characterOctetLength = Get[CardinalNumber].unsafeGetNullable(rs, i + 14),
      characterSetCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 15),
      characterSetSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 16),
      characterSetName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 17),
      collationCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 18),
      collationSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 19),
      collationName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 20),
      numericPrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 21),
      numericPrecisionRadix = Get[CardinalNumber].unsafeGetNullable(rs, i + 22),
      numericScale = Get[CardinalNumber].unsafeGetNullable(rs, i + 23),
      datetimePrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 24),
      intervalType = Get[CharacterData].unsafeGetNullable(rs, i + 25),
      intervalPrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 26),
      sourceDtdIdentifier = Get[SqlIdentifier].unsafeGetNullable(rs, i + 27),
      refDtdIdentifier = Get[SqlIdentifier].unsafeGetNullable(rs, i + 28)
    )
  )
}
