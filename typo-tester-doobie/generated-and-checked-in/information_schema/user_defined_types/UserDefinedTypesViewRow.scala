/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package user_defined_types

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class UserDefinedTypesViewRow(
  userDefinedTypeCatalog: Option[SqlIdentifier],
  userDefinedTypeSchema: Option[SqlIdentifier],
  userDefinedTypeName: Option[SqlIdentifier],
  userDefinedTypeCategory: Option[CharacterData],
  isInstantiable: Option[YesOrNo],
  isFinal: Option[YesOrNo],
  orderingForm: Option[CharacterData],
  orderingCategory: Option[CharacterData],
  orderingRoutineCatalog: Option[SqlIdentifier],
  orderingRoutineSchema: Option[SqlIdentifier],
  orderingRoutineName: Option[SqlIdentifier],
  referenceType: Option[CharacterData],
  dataType: Option[CharacterData],
  characterMaximumLength: Option[CardinalNumber],
  characterOctetLength: Option[CardinalNumber],
  characterSetCatalog: Option[SqlIdentifier],
  characterSetSchema: Option[SqlIdentifier],
  characterSetName: Option[SqlIdentifier],
  collationCatalog: Option[SqlIdentifier],
  collationSchema: Option[SqlIdentifier],
  collationName: Option[SqlIdentifier],
  numericPrecision: Option[CardinalNumber],
  numericPrecisionRadix: Option[CardinalNumber],
  numericScale: Option[CardinalNumber],
  datetimePrecision: Option[CardinalNumber],
  intervalType: Option[CharacterData],
  intervalPrecision: Option[CardinalNumber],
  sourceDtdIdentifier: Option[SqlIdentifier],
  refDtdIdentifier: Option[SqlIdentifier]
)

object UserDefinedTypesViewRow {
  implicit val decoder: Decoder[UserDefinedTypesViewRow] =
    (c: HCursor) =>
      for {
        userDefinedTypeCatalog <- c.downField("user_defined_type_catalog").as[Option[SqlIdentifier]]
        userDefinedTypeSchema <- c.downField("user_defined_type_schema").as[Option[SqlIdentifier]]
        userDefinedTypeName <- c.downField("user_defined_type_name").as[Option[SqlIdentifier]]
        userDefinedTypeCategory <- c.downField("user_defined_type_category").as[Option[CharacterData]]
        isInstantiable <- c.downField("is_instantiable").as[Option[YesOrNo]]
        isFinal <- c.downField("is_final").as[Option[YesOrNo]]
        orderingForm <- c.downField("ordering_form").as[Option[CharacterData]]
        orderingCategory <- c.downField("ordering_category").as[Option[CharacterData]]
        orderingRoutineCatalog <- c.downField("ordering_routine_catalog").as[Option[SqlIdentifier]]
        orderingRoutineSchema <- c.downField("ordering_routine_schema").as[Option[SqlIdentifier]]
        orderingRoutineName <- c.downField("ordering_routine_name").as[Option[SqlIdentifier]]
        referenceType <- c.downField("reference_type").as[Option[CharacterData]]
        dataType <- c.downField("data_type").as[Option[CharacterData]]
        characterMaximumLength <- c.downField("character_maximum_length").as[Option[CardinalNumber]]
        characterOctetLength <- c.downField("character_octet_length").as[Option[CardinalNumber]]
        characterSetCatalog <- c.downField("character_set_catalog").as[Option[SqlIdentifier]]
        characterSetSchema <- c.downField("character_set_schema").as[Option[SqlIdentifier]]
        characterSetName <- c.downField("character_set_name").as[Option[SqlIdentifier]]
        collationCatalog <- c.downField("collation_catalog").as[Option[SqlIdentifier]]
        collationSchema <- c.downField("collation_schema").as[Option[SqlIdentifier]]
        collationName <- c.downField("collation_name").as[Option[SqlIdentifier]]
        numericPrecision <- c.downField("numeric_precision").as[Option[CardinalNumber]]
        numericPrecisionRadix <- c.downField("numeric_precision_radix").as[Option[CardinalNumber]]
        numericScale <- c.downField("numeric_scale").as[Option[CardinalNumber]]
        datetimePrecision <- c.downField("datetime_precision").as[Option[CardinalNumber]]
        intervalType <- c.downField("interval_type").as[Option[CharacterData]]
        intervalPrecision <- c.downField("interval_precision").as[Option[CardinalNumber]]
        sourceDtdIdentifier <- c.downField("source_dtd_identifier").as[Option[SqlIdentifier]]
        refDtdIdentifier <- c.downField("ref_dtd_identifier").as[Option[SqlIdentifier]]
      } yield UserDefinedTypesViewRow(userDefinedTypeCatalog, userDefinedTypeSchema, userDefinedTypeName, userDefinedTypeCategory, isInstantiable, isFinal, orderingForm, orderingCategory, orderingRoutineCatalog, orderingRoutineSchema, orderingRoutineName, referenceType, dataType, characterMaximumLength, characterOctetLength, characterSetCatalog, characterSetSchema, characterSetName, collationCatalog, collationSchema, collationName, numericPrecision, numericPrecisionRadix, numericScale, datetimePrecision, intervalType, intervalPrecision, sourceDtdIdentifier, refDtdIdentifier)
  implicit val encoder: Encoder[UserDefinedTypesViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "user_defined_type_catalog" := row.userDefinedTypeCatalog,
        "user_defined_type_schema" := row.userDefinedTypeSchema,
        "user_defined_type_name" := row.userDefinedTypeName,
        "user_defined_type_category" := row.userDefinedTypeCategory,
        "is_instantiable" := row.isInstantiable,
        "is_final" := row.isFinal,
        "ordering_form" := row.orderingForm,
        "ordering_category" := row.orderingCategory,
        "ordering_routine_catalog" := row.orderingRoutineCatalog,
        "ordering_routine_schema" := row.orderingRoutineSchema,
        "ordering_routine_name" := row.orderingRoutineName,
        "reference_type" := row.referenceType,
        "data_type" := row.dataType,
        "character_maximum_length" := row.characterMaximumLength,
        "character_octet_length" := row.characterOctetLength,
        "character_set_catalog" := row.characterSetCatalog,
        "character_set_schema" := row.characterSetSchema,
        "character_set_name" := row.characterSetName,
        "collation_catalog" := row.collationCatalog,
        "collation_schema" := row.collationSchema,
        "collation_name" := row.collationName,
        "numeric_precision" := row.numericPrecision,
        "numeric_precision_radix" := row.numericPrecisionRadix,
        "numeric_scale" := row.numericScale,
        "datetime_precision" := row.datetimePrecision,
        "interval_type" := row.intervalType,
        "interval_precision" := row.intervalPrecision,
        "source_dtd_identifier" := row.sourceDtdIdentifier,
        "ref_dtd_identifier" := row.refDtdIdentifier
      )}
  implicit val read: Read[UserDefinedTypesViewRow] =
    new Read[UserDefinedTypesViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => UserDefinedTypesViewRow(
        userDefinedTypeCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        userDefinedTypeSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        userDefinedTypeName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        userDefinedTypeCategory = Get[CharacterData].unsafeGetNullable(rs, i + 3),
        isInstantiable = Get[YesOrNo].unsafeGetNullable(rs, i + 4),
        isFinal = Get[YesOrNo].unsafeGetNullable(rs, i + 5),
        orderingForm = Get[CharacterData].unsafeGetNullable(rs, i + 6),
        orderingCategory = Get[CharacterData].unsafeGetNullable(rs, i + 7),
        orderingRoutineCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 8),
        orderingRoutineSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 9),
        orderingRoutineName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 10),
        referenceType = Get[CharacterData].unsafeGetNullable(rs, i + 11),
        dataType = Get[CharacterData].unsafeGetNullable(rs, i + 12),
        characterMaximumLength = Get[CardinalNumber].unsafeGetNullable(rs, i + 13),
        characterOctetLength = Get[CardinalNumber].unsafeGetNullable(rs, i + 14),
        characterSetCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 15),
        characterSetSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 16),
        characterSetName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 17),
        collationCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 18),
        collationSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 19),
        collationName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 20),
        numericPrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 21),
        numericPrecisionRadix = Get[CardinalNumber].unsafeGetNullable(rs, i + 22),
        numericScale = Get[CardinalNumber].unsafeGetNullable(rs, i + 23),
        datetimePrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 24),
        intervalType = Get[CharacterData].unsafeGetNullable(rs, i + 25),
        intervalPrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 26),
        sourceDtdIdentifier = Get[SqlIdentifier].unsafeGetNullable(rs, i + 27),
        refDtdIdentifier = Get[SqlIdentifier].unsafeGetNullable(rs, i + 28)
      )
    )
  

}
