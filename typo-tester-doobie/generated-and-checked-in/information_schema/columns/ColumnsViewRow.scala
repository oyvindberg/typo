/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package columns

import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class ColumnsViewRow(
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  columnName: Option[SqlIdentifier],
  ordinalPosition: Option[CardinalNumber],
  columnDefault: Option[CharacterData],
  isNullable: Option[YesOrNo],
  dataType: Option[CharacterData],
  characterMaximumLength: Option[CardinalNumber],
  characterOctetLength: Option[CardinalNumber],
  numericPrecision: Option[CardinalNumber],
  numericPrecisionRadix: Option[CardinalNumber],
  numericScale: Option[CardinalNumber],
  datetimePrecision: Option[CardinalNumber],
  intervalType: Option[CharacterData],
  intervalPrecision: Option[CardinalNumber],
  characterSetCatalog: Option[SqlIdentifier],
  characterSetSchema: Option[SqlIdentifier],
  characterSetName: Option[SqlIdentifier],
  collationCatalog: Option[SqlIdentifier],
  collationSchema: Option[SqlIdentifier],
  collationName: Option[SqlIdentifier],
  domainCatalog: Option[SqlIdentifier],
  domainSchema: Option[SqlIdentifier],
  domainName: Option[SqlIdentifier],
  udtCatalog: Option[SqlIdentifier],
  udtSchema: Option[SqlIdentifier],
  udtName: Option[SqlIdentifier],
  scopeCatalog: Option[SqlIdentifier],
  scopeSchema: Option[SqlIdentifier],
  scopeName: Option[SqlIdentifier],
  maximumCardinality: Option[CardinalNumber],
  dtdIdentifier: Option[SqlIdentifier],
  isSelfReferencing: Option[YesOrNo],
  isIdentity: Option[YesOrNo],
  identityGeneration: Option[CharacterData],
  identityStart: Option[CharacterData],
  identityIncrement: Option[CharacterData],
  identityMaximum: Option[CharacterData],
  identityMinimum: Option[CharacterData],
  identityCycle: Option[YesOrNo],
  isGenerated: Option[CharacterData],
  generationExpression: Option[CharacterData],
  isUpdatable: Option[YesOrNo]
)

object ColumnsViewRow {
  implicit val decoder: Decoder[ColumnsViewRow] =
    (c: HCursor) =>
      for {
        tableCatalog <- c.downField("table_catalog").as[Option[SqlIdentifier]]
        tableSchema <- c.downField("table_schema").as[Option[SqlIdentifier]]
        tableName <- c.downField("table_name").as[Option[SqlIdentifier]]
        columnName <- c.downField("column_name").as[Option[SqlIdentifier]]
        ordinalPosition <- c.downField("ordinal_position").as[Option[CardinalNumber]]
        columnDefault <- c.downField("column_default").as[Option[CharacterData]]
        isNullable <- c.downField("is_nullable").as[Option[YesOrNo]]
        dataType <- c.downField("data_type").as[Option[CharacterData]]
        characterMaximumLength <- c.downField("character_maximum_length").as[Option[CardinalNumber]]
        characterOctetLength <- c.downField("character_octet_length").as[Option[CardinalNumber]]
        numericPrecision <- c.downField("numeric_precision").as[Option[CardinalNumber]]
        numericPrecisionRadix <- c.downField("numeric_precision_radix").as[Option[CardinalNumber]]
        numericScale <- c.downField("numeric_scale").as[Option[CardinalNumber]]
        datetimePrecision <- c.downField("datetime_precision").as[Option[CardinalNumber]]
        intervalType <- c.downField("interval_type").as[Option[CharacterData]]
        intervalPrecision <- c.downField("interval_precision").as[Option[CardinalNumber]]
        characterSetCatalog <- c.downField("character_set_catalog").as[Option[SqlIdentifier]]
        characterSetSchema <- c.downField("character_set_schema").as[Option[SqlIdentifier]]
        characterSetName <- c.downField("character_set_name").as[Option[SqlIdentifier]]
        collationCatalog <- c.downField("collation_catalog").as[Option[SqlIdentifier]]
        collationSchema <- c.downField("collation_schema").as[Option[SqlIdentifier]]
        collationName <- c.downField("collation_name").as[Option[SqlIdentifier]]
        domainCatalog <- c.downField("domain_catalog").as[Option[SqlIdentifier]]
        domainSchema <- c.downField("domain_schema").as[Option[SqlIdentifier]]
        domainName <- c.downField("domain_name").as[Option[SqlIdentifier]]
        udtCatalog <- c.downField("udt_catalog").as[Option[SqlIdentifier]]
        udtSchema <- c.downField("udt_schema").as[Option[SqlIdentifier]]
        udtName <- c.downField("udt_name").as[Option[SqlIdentifier]]
        scopeCatalog <- c.downField("scope_catalog").as[Option[SqlIdentifier]]
        scopeSchema <- c.downField("scope_schema").as[Option[SqlIdentifier]]
        scopeName <- c.downField("scope_name").as[Option[SqlIdentifier]]
        maximumCardinality <- c.downField("maximum_cardinality").as[Option[CardinalNumber]]
        dtdIdentifier <- c.downField("dtd_identifier").as[Option[SqlIdentifier]]
        isSelfReferencing <- c.downField("is_self_referencing").as[Option[YesOrNo]]
        isIdentity <- c.downField("is_identity").as[Option[YesOrNo]]
        identityGeneration <- c.downField("identity_generation").as[Option[CharacterData]]
        identityStart <- c.downField("identity_start").as[Option[CharacterData]]
        identityIncrement <- c.downField("identity_increment").as[Option[CharacterData]]
        identityMaximum <- c.downField("identity_maximum").as[Option[CharacterData]]
        identityMinimum <- c.downField("identity_minimum").as[Option[CharacterData]]
        identityCycle <- c.downField("identity_cycle").as[Option[YesOrNo]]
        isGenerated <- c.downField("is_generated").as[Option[CharacterData]]
        generationExpression <- c.downField("generation_expression").as[Option[CharacterData]]
        isUpdatable <- c.downField("is_updatable").as[Option[YesOrNo]]
      } yield ColumnsViewRow(tableCatalog, tableSchema, tableName, columnName, ordinalPosition, columnDefault, isNullable, dataType, characterMaximumLength, characterOctetLength, numericPrecision, numericPrecisionRadix, numericScale, datetimePrecision, intervalType, intervalPrecision, characterSetCatalog, characterSetSchema, characterSetName, collationCatalog, collationSchema, collationName, domainCatalog, domainSchema, domainName, udtCatalog, udtSchema, udtName, scopeCatalog, scopeSchema, scopeName, maximumCardinality, dtdIdentifier, isSelfReferencing, isIdentity, identityGeneration, identityStart, identityIncrement, identityMaximum, identityMinimum, identityCycle, isGenerated, generationExpression, isUpdatable)
  implicit val encoder: Encoder[ColumnsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "table_catalog" := row.tableCatalog,
        "table_schema" := row.tableSchema,
        "table_name" := row.tableName,
        "column_name" := row.columnName,
        "ordinal_position" := row.ordinalPosition,
        "column_default" := row.columnDefault,
        "is_nullable" := row.isNullable,
        "data_type" := row.dataType,
        "character_maximum_length" := row.characterMaximumLength,
        "character_octet_length" := row.characterOctetLength,
        "numeric_precision" := row.numericPrecision,
        "numeric_precision_radix" := row.numericPrecisionRadix,
        "numeric_scale" := row.numericScale,
        "datetime_precision" := row.datetimePrecision,
        "interval_type" := row.intervalType,
        "interval_precision" := row.intervalPrecision,
        "character_set_catalog" := row.characterSetCatalog,
        "character_set_schema" := row.characterSetSchema,
        "character_set_name" := row.characterSetName,
        "collation_catalog" := row.collationCatalog,
        "collation_schema" := row.collationSchema,
        "collation_name" := row.collationName,
        "domain_catalog" := row.domainCatalog,
        "domain_schema" := row.domainSchema,
        "domain_name" := row.domainName,
        "udt_catalog" := row.udtCatalog,
        "udt_schema" := row.udtSchema,
        "udt_name" := row.udtName,
        "scope_catalog" := row.scopeCatalog,
        "scope_schema" := row.scopeSchema,
        "scope_name" := row.scopeName,
        "maximum_cardinality" := row.maximumCardinality,
        "dtd_identifier" := row.dtdIdentifier,
        "is_self_referencing" := row.isSelfReferencing,
        "is_identity" := row.isIdentity,
        "identity_generation" := row.identityGeneration,
        "identity_start" := row.identityStart,
        "identity_increment" := row.identityIncrement,
        "identity_maximum" := row.identityMaximum,
        "identity_minimum" := row.identityMinimum,
        "identity_cycle" := row.identityCycle,
        "is_generated" := row.isGenerated,
        "generation_expression" := row.generationExpression,
        "is_updatable" := row.isUpdatable
      )}
  implicit val read: Read[ColumnsViewRow] =
    new Read[ColumnsViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CardinalNumber], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ColumnsViewRow(
        tableCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        tableSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        tableName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        columnName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        ordinalPosition = Get[CardinalNumber].unsafeGetNullable(rs, i + 4),
        columnDefault = Get[CharacterData].unsafeGetNullable(rs, i + 5),
        isNullable = Get[YesOrNo].unsafeGetNullable(rs, i + 6),
        dataType = Get[CharacterData].unsafeGetNullable(rs, i + 7),
        characterMaximumLength = Get[CardinalNumber].unsafeGetNullable(rs, i + 8),
        characterOctetLength = Get[CardinalNumber].unsafeGetNullable(rs, i + 9),
        numericPrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 10),
        numericPrecisionRadix = Get[CardinalNumber].unsafeGetNullable(rs, i + 11),
        numericScale = Get[CardinalNumber].unsafeGetNullable(rs, i + 12),
        datetimePrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 13),
        intervalType = Get[CharacterData].unsafeGetNullable(rs, i + 14),
        intervalPrecision = Get[CardinalNumber].unsafeGetNullable(rs, i + 15),
        characterSetCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 16),
        characterSetSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 17),
        characterSetName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 18),
        collationCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 19),
        collationSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 20),
        collationName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 21),
        domainCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 22),
        domainSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 23),
        domainName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 24),
        udtCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 25),
        udtSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 26),
        udtName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 27),
        scopeCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 28),
        scopeSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 29),
        scopeName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 30),
        maximumCardinality = Get[CardinalNumber].unsafeGetNullable(rs, i + 31),
        dtdIdentifier = Get[SqlIdentifier].unsafeGetNullable(rs, i + 32),
        isSelfReferencing = Get[YesOrNo].unsafeGetNullable(rs, i + 33),
        isIdentity = Get[YesOrNo].unsafeGetNullable(rs, i + 34),
        identityGeneration = Get[CharacterData].unsafeGetNullable(rs, i + 35),
        identityStart = Get[CharacterData].unsafeGetNullable(rs, i + 36),
        identityIncrement = Get[CharacterData].unsafeGetNullable(rs, i + 37),
        identityMaximum = Get[CharacterData].unsafeGetNullable(rs, i + 38),
        identityMinimum = Get[CharacterData].unsafeGetNullable(rs, i + 39),
        identityCycle = Get[YesOrNo].unsafeGetNullable(rs, i + 40),
        isGenerated = Get[CharacterData].unsafeGetNullable(rs, i + 41),
        generationExpression = Get[CharacterData].unsafeGetNullable(rs, i + 42),
        isUpdatable = Get[YesOrNo].unsafeGetNullable(rs, i + 43)
      )
    )
  

}
