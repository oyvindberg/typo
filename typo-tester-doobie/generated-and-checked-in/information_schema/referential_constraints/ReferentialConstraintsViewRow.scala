/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package referential_constraints

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class ReferentialConstraintsViewRow(
  constraintCatalog: Option[SqlIdentifier],
  constraintSchema: Option[SqlIdentifier],
  constraintName: Option[SqlIdentifier],
  uniqueConstraintCatalog: Option[SqlIdentifier],
  uniqueConstraintSchema: Option[SqlIdentifier],
  uniqueConstraintName: Option[SqlIdentifier],
  matchOption: Option[CharacterData],
  updateRule: Option[CharacterData],
  deleteRule: Option[CharacterData]
)

object ReferentialConstraintsViewRow {
  implicit val decoder: Decoder[ReferentialConstraintsViewRow] =
    (c: HCursor) =>
      for {
        constraintCatalog <- c.downField("constraint_catalog").as[Option[SqlIdentifier]]
        constraintSchema <- c.downField("constraint_schema").as[Option[SqlIdentifier]]
        constraintName <- c.downField("constraint_name").as[Option[SqlIdentifier]]
        uniqueConstraintCatalog <- c.downField("unique_constraint_catalog").as[Option[SqlIdentifier]]
        uniqueConstraintSchema <- c.downField("unique_constraint_schema").as[Option[SqlIdentifier]]
        uniqueConstraintName <- c.downField("unique_constraint_name").as[Option[SqlIdentifier]]
        matchOption <- c.downField("match_option").as[Option[CharacterData]]
        updateRule <- c.downField("update_rule").as[Option[CharacterData]]
        deleteRule <- c.downField("delete_rule").as[Option[CharacterData]]
      } yield ReferentialConstraintsViewRow(constraintCatalog, constraintSchema, constraintName, uniqueConstraintCatalog, uniqueConstraintSchema, uniqueConstraintName, matchOption, updateRule, deleteRule)
  implicit val encoder: Encoder[ReferentialConstraintsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "constraint_catalog" := row.constraintCatalog,
        "constraint_schema" := row.constraintSchema,
        "constraint_name" := row.constraintName,
        "unique_constraint_catalog" := row.uniqueConstraintCatalog,
        "unique_constraint_schema" := row.uniqueConstraintSchema,
        "unique_constraint_name" := row.uniqueConstraintName,
        "match_option" := row.matchOption,
        "update_rule" := row.updateRule,
        "delete_rule" := row.deleteRule
      )}
  implicit val read: Read[ReferentialConstraintsViewRow] =
    new Read[ReferentialConstraintsViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ReferentialConstraintsViewRow(
        constraintCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        constraintSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        constraintName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        uniqueConstraintCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        uniqueConstraintSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
        uniqueConstraintName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
        matchOption = Get[CharacterData].unsafeGetNullable(rs, i + 6),
        updateRule = Get[CharacterData].unsafeGetNullable(rs, i + 7),
        deleteRule = Get[CharacterData].unsafeGetNullable(rs, i + 8)
      )
    )
  

}
