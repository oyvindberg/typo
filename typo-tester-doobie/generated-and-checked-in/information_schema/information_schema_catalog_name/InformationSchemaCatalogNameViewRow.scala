/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package information_schema_catalog_name

import adventureworks.information_schema.SqlIdentifier
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class InformationSchemaCatalogNameViewRow(
  catalogName: Option[SqlIdentifier]
)

object InformationSchemaCatalogNameViewRow {
  implicit val decoder: Decoder[InformationSchemaCatalogNameViewRow] =
    (c: HCursor) =>
      for {
        catalogName <- c.downField("catalog_name").as[Option[SqlIdentifier]]
      } yield InformationSchemaCatalogNameViewRow(catalogName)
  implicit val encoder: Encoder[InformationSchemaCatalogNameViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "catalog_name" := row.catalogName
      )}
  implicit val read: Read[InformationSchemaCatalogNameViewRow] =
    new Read[InformationSchemaCatalogNameViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => InformationSchemaCatalogNameViewRow(
        catalogName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0)
      )
    )
  

}
