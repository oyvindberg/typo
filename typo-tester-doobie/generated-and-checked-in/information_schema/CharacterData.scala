/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder

/** Domain `information_schema.character_data`
  * No constraint
  */
case class CharacterData(value: String) extends AnyVal
object CharacterData {
  implicit val arrayGet: Get[Array[CharacterData]] = Get[Array[String]].map(_.map(CharacterData.apply))
  implicit val arrayPut: Put[Array[CharacterData]] = Put[Array[String]].contramap(_.map(_.value))
  implicit val decoder: Decoder[CharacterData] = Decoder[String].map(CharacterData.apply)
  implicit val encoder: Encoder[CharacterData] = Encoder[String].contramap(_.value)
  implicit val get: Get[CharacterData] = Get[String].map(CharacterData.apply)
  implicit val ordering: Ordering[CharacterData] = Ordering.by(_.value)
  implicit val put: Put[CharacterData] = Put[String].contramap(_.value)
}
