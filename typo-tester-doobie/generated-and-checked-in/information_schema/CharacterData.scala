/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Domain `information_schema.character_data`
  * No constraint
  */
case class CharacterData(value: String) extends AnyVal
object CharacterData {
  implicit def ordering(implicit ev: Ordering[String]): Ordering[CharacterData] = Ordering.by(_.value)
  implicit val encoder: Encoder[CharacterData] =
    Encoder[String].contramap(_.value)
  implicit val decoder: Decoder[CharacterData] =
    Decoder[String].map(CharacterData(_))
  implicit val meta: Meta[CharacterData] = Meta[String].imap(CharacterData.apply)(_.value)
  implicit val metaArray: Meta[Array[CharacterData]] = Meta[Array[String]].imap(_.map(CharacterData.apply))(_.map(_.value))
}
