/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package sql_parts

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class SqlPartsRow(
  featureId: Option[CharacterData],
  featureName: Option[CharacterData],
  isSupported: Option[YesOrNo],
  isVerifiedBy: Option[CharacterData],
  comments: Option[CharacterData]
)

object SqlPartsRow {
  implicit val decoder: Decoder[SqlPartsRow] = Decoder.forProduct5[SqlPartsRow, Option[CharacterData], Option[CharacterData], Option[YesOrNo], Option[CharacterData], Option[CharacterData]]("feature_id", "feature_name", "is_supported", "is_verified_by", "comments")(SqlPartsRow.apply)
  implicit val encoder: Encoder[SqlPartsRow] = Encoder.forProduct5[SqlPartsRow, Option[CharacterData], Option[CharacterData], Option[YesOrNo], Option[CharacterData], Option[CharacterData]]("feature_id", "feature_name", "is_supported", "is_verified_by", "comments")(x => (x.featureId, x.featureName, x.isSupported, x.isVerifiedBy, x.comments))
  implicit val read: Read[SqlPartsRow] = new Read[SqlPartsRow](
    gets = List(
      (Get[CharacterData], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SqlPartsRow(
      featureId = Get[CharacterData].unsafeGetNullable(rs, i + 0),
      featureName = Get[CharacterData].unsafeGetNullable(rs, i + 1),
      isSupported = Get[YesOrNo].unsafeGetNullable(rs, i + 2),
      isVerifiedBy = Get[CharacterData].unsafeGetNullable(rs, i + 3),
      comments = Get[CharacterData].unsafeGetNullable(rs, i + 4)
    )
  )
}
