/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package enabled_roles

import adventureworks.information_schema.SqlIdentifier
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class EnabledRolesViewRow(
  roleName: Option[SqlIdentifier]
)

object EnabledRolesViewRow {
  implicit val decoder: Decoder[EnabledRolesViewRow] = Decoder.forProduct1[EnabledRolesViewRow, Option[SqlIdentifier]]("role_name")(EnabledRolesViewRow.apply)
  implicit val encoder: Encoder[EnabledRolesViewRow] = Encoder.forProduct1[EnabledRolesViewRow, Option[SqlIdentifier]]("role_name")(x => (x.roleName))
  implicit val read: Read[EnabledRolesViewRow] = new Read[EnabledRolesViewRow](
    gets = List(
      (Get[SqlIdentifier], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => EnabledRolesViewRow(
      roleName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0)
    )
  )
}
