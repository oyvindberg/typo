/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package `_pg_foreign_servers`

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgForeignServersViewRow(
  oid: Option[/* oid */ Long],
  srvoptions: Option[Array[String]],
  foreignServerCatalog: Option[SqlIdentifier],
  foreignServerName: Option[SqlIdentifier],
  foreignDataWrapperCatalog: Option[SqlIdentifier],
  foreignDataWrapperName: Option[SqlIdentifier],
  foreignServerType: Option[CharacterData],
  foreignServerVersion: Option[CharacterData],
  authorizationIdentifier: Option[SqlIdentifier]
)

object PgForeignServersViewRow {
  implicit val decoder: Decoder[PgForeignServersViewRow] = Decoder.forProduct9[PgForeignServersViewRow, Option[/* oid */ Long], Option[Array[String]], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CharacterData], Option[SqlIdentifier]]("oid", "srvoptions", "foreign_server_catalog", "foreign_server_name", "foreign_data_wrapper_catalog", "foreign_data_wrapper_name", "foreign_server_type", "foreign_server_version", "authorization_identifier")(PgForeignServersViewRow.apply)
  implicit val encoder: Encoder[PgForeignServersViewRow] = Encoder.forProduct9[PgForeignServersViewRow, Option[/* oid */ Long], Option[Array[String]], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CharacterData], Option[SqlIdentifier]]("oid", "srvoptions", "foreign_server_catalog", "foreign_server_name", "foreign_data_wrapper_catalog", "foreign_data_wrapper_name", "foreign_server_type", "foreign_server_version", "authorization_identifier")(x => (x.oid, x.srvoptions, x.foreignServerCatalog, x.foreignServerName, x.foreignDataWrapperCatalog, x.foreignDataWrapperName, x.foreignServerType, x.foreignServerVersion, x.authorizationIdentifier))
  implicit val read: Read[PgForeignServersViewRow] = new Read[PgForeignServersViewRow](
    gets = List(
      (Get[/* oid */ Long], Nullability.Nullable),
      (Get[Array[String]], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgForeignServersViewRow(
      oid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 0),
      srvoptions = Get[Array[String]].unsafeGetNullable(rs, i + 1),
      foreignServerCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
      foreignServerName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
      foreignDataWrapperCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
      foreignDataWrapperName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 5),
      foreignServerType = Get[CharacterData].unsafeGetNullable(rs, i + 6),
      foreignServerVersion = Get[CharacterData].unsafeGetNullable(rs, i + 7),
      authorizationIdentifier = Get[SqlIdentifier].unsafeGetNullable(rs, i + 8)
    )
  )
}
