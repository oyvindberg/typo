/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package role_table_grants

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class RoleTableGrantsViewRow(
  /** Points to [[table_privileges.TablePrivilegesViewRow.grantor]] */
  grantor: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.grantee]] */
  grantee: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.tableCatalog]] */
  tableCatalog: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.tableSchema]] */
  tableSchema: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.tableName]] */
  tableName: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.privilegeType]] */
  privilegeType: Option[CharacterData],
  /** Points to [[table_privileges.TablePrivilegesViewRow.isGrantable]] */
  isGrantable: Option[YesOrNo],
  /** Points to [[table_privileges.TablePrivilegesViewRow.withHierarchy]] */
  withHierarchy: Option[YesOrNo]
)

object RoleTableGrantsViewRow {
  implicit val decoder: Decoder[RoleTableGrantsViewRow] =
    (c: HCursor) =>
      for {
        grantor <- c.downField("grantor").as[Option[SqlIdentifier]]
        grantee <- c.downField("grantee").as[Option[SqlIdentifier]]
        tableCatalog <- c.downField("table_catalog").as[Option[SqlIdentifier]]
        tableSchema <- c.downField("table_schema").as[Option[SqlIdentifier]]
        tableName <- c.downField("table_name").as[Option[SqlIdentifier]]
        privilegeType <- c.downField("privilege_type").as[Option[CharacterData]]
        isGrantable <- c.downField("is_grantable").as[Option[YesOrNo]]
        withHierarchy <- c.downField("with_hierarchy").as[Option[YesOrNo]]
      } yield RoleTableGrantsViewRow(grantor, grantee, tableCatalog, tableSchema, tableName, privilegeType, isGrantable, withHierarchy)
  implicit val encoder: Encoder[RoleTableGrantsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "grantor" := row.grantor,
        "grantee" := row.grantee,
        "table_catalog" := row.tableCatalog,
        "table_schema" := row.tableSchema,
        "table_name" := row.tableName,
        "privilege_type" := row.privilegeType,
        "is_grantable" := row.isGrantable,
        "with_hierarchy" := row.withHierarchy
      )}
  implicit val read: Read[RoleTableGrantsViewRow] =
    new Read[RoleTableGrantsViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => RoleTableGrantsViewRow(
        grantor = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        grantee = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        tableCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        tableSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
        tableName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
        privilegeType = Get[CharacterData].unsafeGetNullable(rs, i + 5),
        isGrantable = Get[YesOrNo].unsafeGetNullable(rs, i + 6),
        withHierarchy = Get[YesOrNo].unsafeGetNullable(rs, i + 7)
      )
    )
  

}
