/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package role_table_grants

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class RoleTableGrantsViewRow(
  /** Points to [[table_privileges.TablePrivilegesViewRow.grantor]] */
  grantor: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.grantee]] */
  grantee: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.tableCatalog]] */
  tableCatalog: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.tableSchema]] */
  tableSchema: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.tableName]] */
  tableName: Option[SqlIdentifier],
  /** Points to [[table_privileges.TablePrivilegesViewRow.privilegeType]] */
  privilegeType: Option[CharacterData],
  /** Points to [[table_privileges.TablePrivilegesViewRow.isGrantable]] */
  isGrantable: Option[YesOrNo],
  /** Points to [[table_privileges.TablePrivilegesViewRow.withHierarchy]] */
  withHierarchy: Option[YesOrNo]
)

object RoleTableGrantsViewRow {
  implicit val decoder: Decoder[RoleTableGrantsViewRow] = Decoder.forProduct8[RoleTableGrantsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[YesOrNo], Option[YesOrNo]]("grantor", "grantee", "table_catalog", "table_schema", "table_name", "privilege_type", "is_grantable", "with_hierarchy")(RoleTableGrantsViewRow.apply)(Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(SqlIdentifier.decoder), Decoder.decodeOption(CharacterData.decoder), Decoder.decodeOption(YesOrNo.decoder), Decoder.decodeOption(YesOrNo.decoder))
  implicit val encoder: Encoder[RoleTableGrantsViewRow] = Encoder.forProduct8[RoleTableGrantsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[YesOrNo], Option[YesOrNo]]("grantor", "grantee", "table_catalog", "table_schema", "table_name", "privilege_type", "is_grantable", "with_hierarchy")(x => (x.grantor, x.grantee, x.tableCatalog, x.tableSchema, x.tableName, x.privilegeType, x.isGrantable, x.withHierarchy))(Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(SqlIdentifier.encoder), Encoder.encodeOption(CharacterData.encoder), Encoder.encodeOption(YesOrNo.encoder), Encoder.encodeOption(YesOrNo.encoder))
  implicit val read: Read[RoleTableGrantsViewRow] = new Read[RoleTableGrantsViewRow](
    gets = List(
      (SqlIdentifier.get, Nullability.Nullable),
      (SqlIdentifier.get, Nullability.Nullable),
      (SqlIdentifier.get, Nullability.Nullable),
      (SqlIdentifier.get, Nullability.Nullable),
      (SqlIdentifier.get, Nullability.Nullable),
      (CharacterData.get, Nullability.Nullable),
      (YesOrNo.get, Nullability.Nullable),
      (YesOrNo.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => RoleTableGrantsViewRow(
      grantor = SqlIdentifier.get.unsafeGetNullable(rs, i + 0),
      grantee = SqlIdentifier.get.unsafeGetNullable(rs, i + 1),
      tableCatalog = SqlIdentifier.get.unsafeGetNullable(rs, i + 2),
      tableSchema = SqlIdentifier.get.unsafeGetNullable(rs, i + 3),
      tableName = SqlIdentifier.get.unsafeGetNullable(rs, i + 4),
      privilegeType = CharacterData.get.unsafeGetNullable(rs, i + 5),
      isGrantable = YesOrNo.get.unsafeGetNullable(rs, i + 6),
      withHierarchy = YesOrNo.get.unsafeGetNullable(rs, i + 7)
    )
  )
}
