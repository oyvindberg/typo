/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema

import doobie.util.Get
import doobie.util.Put
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Domain `information_schema.sql_identifier`
  * No constraint
  */
case class SqlIdentifier(value: String) extends AnyVal
object SqlIdentifier {
  implicit val arrayGet: Get[Array[SqlIdentifier]] = adventureworks.StringArrayMeta.get.map(_.map(SqlIdentifier.apply))
  implicit val arrayPut: Put[Array[SqlIdentifier]] = adventureworks.StringArrayMeta.put.contramap(_.map(_.value))
  implicit val decoder: Decoder[SqlIdentifier] = Decoder.decodeString.map(SqlIdentifier.apply)
  implicit val encoder: Encoder[SqlIdentifier] = Encoder.encodeString.contramap(_.value)
  implicit val get: Get[SqlIdentifier] = Meta.StringMeta.get.map(SqlIdentifier.apply)
  implicit val ordering: Ordering[SqlIdentifier] = Ordering.by(_.value)
  implicit val put: Put[SqlIdentifier] = Meta.StringMeta.put.contramap(_.value)
}
