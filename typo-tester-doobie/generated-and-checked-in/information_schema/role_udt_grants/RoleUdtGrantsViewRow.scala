/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package role_udt_grants

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class RoleUdtGrantsViewRow(
  /** Points to [[udt_privileges.UdtPrivilegesViewRow.grantor]] */
  grantor: Option[SqlIdentifier],
  /** Points to [[udt_privileges.UdtPrivilegesViewRow.grantee]] */
  grantee: Option[SqlIdentifier],
  /** Points to [[udt_privileges.UdtPrivilegesViewRow.udtCatalog]] */
  udtCatalog: Option[SqlIdentifier],
  /** Points to [[udt_privileges.UdtPrivilegesViewRow.udtSchema]] */
  udtSchema: Option[SqlIdentifier],
  /** Points to [[udt_privileges.UdtPrivilegesViewRow.udtName]] */
  udtName: Option[SqlIdentifier],
  /** Points to [[udt_privileges.UdtPrivilegesViewRow.privilegeType]] */
  privilegeType: Option[CharacterData],
  /** Points to [[udt_privileges.UdtPrivilegesViewRow.isGrantable]] */
  isGrantable: Option[YesOrNo]
)

object RoleUdtGrantsViewRow {
  implicit val decoder: Decoder[RoleUdtGrantsViewRow] = Decoder.forProduct7[RoleUdtGrantsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[YesOrNo]]("grantor", "grantee", "udt_catalog", "udt_schema", "udt_name", "privilege_type", "is_grantable")(RoleUdtGrantsViewRow.apply)
  implicit val encoder: Encoder[RoleUdtGrantsViewRow] = Encoder.forProduct7[RoleUdtGrantsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[YesOrNo]]("grantor", "grantee", "udt_catalog", "udt_schema", "udt_name", "privilege_type", "is_grantable")(x => (x.grantor, x.grantee, x.udtCatalog, x.udtSchema, x.udtName, x.privilegeType, x.isGrantable))
  implicit val read: Read[RoleUdtGrantsViewRow] = new Read[RoleUdtGrantsViewRow](
    gets = List(
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => RoleUdtGrantsViewRow(
      grantor = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
      grantee = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
      udtCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
      udtSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 3),
      udtName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 4),
      privilegeType = Get[CharacterData].unsafeGetNullable(rs, i + 5),
      isGrantable = Get[YesOrNo].unsafeGetNullable(rs, i + 6)
    )
  )
}
