/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package views

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class ViewsViewRow(
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  viewDefinition: Option[CharacterData],
  checkOption: Option[CharacterData],
  isUpdatable: Option[YesOrNo],
  isInsertableInto: Option[YesOrNo],
  isTriggerUpdatable: Option[YesOrNo],
  isTriggerDeletable: Option[YesOrNo],
  isTriggerInsertableInto: Option[YesOrNo]
)

object ViewsViewRow {
  implicit val decoder: Decoder[ViewsViewRow] =
    (c: HCursor) =>
      for {
        tableCatalog <- c.downField("table_catalog").as[Option[SqlIdentifier]]
        tableSchema <- c.downField("table_schema").as[Option[SqlIdentifier]]
        tableName <- c.downField("table_name").as[Option[SqlIdentifier]]
        viewDefinition <- c.downField("view_definition").as[Option[CharacterData]]
        checkOption <- c.downField("check_option").as[Option[CharacterData]]
        isUpdatable <- c.downField("is_updatable").as[Option[YesOrNo]]
        isInsertableInto <- c.downField("is_insertable_into").as[Option[YesOrNo]]
        isTriggerUpdatable <- c.downField("is_trigger_updatable").as[Option[YesOrNo]]
        isTriggerDeletable <- c.downField("is_trigger_deletable").as[Option[YesOrNo]]
        isTriggerInsertableInto <- c.downField("is_trigger_insertable_into").as[Option[YesOrNo]]
      } yield ViewsViewRow(tableCatalog, tableSchema, tableName, viewDefinition, checkOption, isUpdatable, isInsertableInto, isTriggerUpdatable, isTriggerDeletable, isTriggerInsertableInto)
  implicit val encoder: Encoder[ViewsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "table_catalog" := row.tableCatalog,
        "table_schema" := row.tableSchema,
        "table_name" := row.tableName,
        "view_definition" := row.viewDefinition,
        "check_option" := row.checkOption,
        "is_updatable" := row.isUpdatable,
        "is_insertable_into" := row.isInsertableInto,
        "is_trigger_updatable" := row.isTriggerUpdatable,
        "is_trigger_deletable" := row.isTriggerDeletable,
        "is_trigger_insertable_into" := row.isTriggerInsertableInto
      )}
  implicit val read: Read[ViewsViewRow] =
    new Read[ViewsViewRow](
      gets = List(
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[SqlIdentifier], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[CharacterData], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable),
        (Get[YesOrNo], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ViewsViewRow(
        tableCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
        tableSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
        tableName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
        viewDefinition = Get[CharacterData].unsafeGetNullable(rs, i + 3),
        checkOption = Get[CharacterData].unsafeGetNullable(rs, i + 4),
        isUpdatable = Get[YesOrNo].unsafeGetNullable(rs, i + 5),
        isInsertableInto = Get[YesOrNo].unsafeGetNullable(rs, i + 6),
        isTriggerUpdatable = Get[YesOrNo].unsafeGetNullable(rs, i + 7),
        isTriggerDeletable = Get[YesOrNo].unsafeGetNullable(rs, i + 8),
        isTriggerInsertableInto = Get[YesOrNo].unsafeGetNullable(rs, i + 9)
      )
    )
  

}
