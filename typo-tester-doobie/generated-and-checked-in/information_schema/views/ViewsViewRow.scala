/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package views

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import adventureworks.information_schema.YesOrNo
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class ViewsViewRow(
  tableCatalog: Option[SqlIdentifier],
  tableSchema: Option[SqlIdentifier],
  tableName: Option[SqlIdentifier],
  viewDefinition: Option[CharacterData],
  checkOption: Option[CharacterData],
  isUpdatable: Option[YesOrNo],
  isInsertableInto: Option[YesOrNo],
  isTriggerUpdatable: Option[YesOrNo],
  isTriggerDeletable: Option[YesOrNo],
  isTriggerInsertableInto: Option[YesOrNo]
)

object ViewsViewRow {
  implicit val decoder: Decoder[ViewsViewRow] = Decoder.forProduct10[ViewsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CharacterData], Option[YesOrNo], Option[YesOrNo], Option[YesOrNo], Option[YesOrNo], Option[YesOrNo]]("table_catalog", "table_schema", "table_name", "view_definition", "check_option", "is_updatable", "is_insertable_into", "is_trigger_updatable", "is_trigger_deletable", "is_trigger_insertable_into")(ViewsViewRow.apply)
  implicit val encoder: Encoder[ViewsViewRow] = Encoder.forProduct10[ViewsViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CharacterData], Option[YesOrNo], Option[YesOrNo], Option[YesOrNo], Option[YesOrNo], Option[YesOrNo]]("table_catalog", "table_schema", "table_name", "view_definition", "check_option", "is_updatable", "is_insertable_into", "is_trigger_updatable", "is_trigger_deletable", "is_trigger_insertable_into")(x => (x.tableCatalog, x.tableSchema, x.tableName, x.viewDefinition, x.checkOption, x.isUpdatable, x.isInsertableInto, x.isTriggerUpdatable, x.isTriggerDeletable, x.isTriggerInsertableInto))
  implicit val read: Read[ViewsViewRow] = new Read[ViewsViewRow](
    gets = List(
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable),
      (Get[YesOrNo], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => ViewsViewRow(
      tableCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
      tableSchema = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
      tableName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
      viewDefinition = Get[CharacterData].unsafeGetNullable(rs, i + 3),
      checkOption = Get[CharacterData].unsafeGetNullable(rs, i + 4),
      isUpdatable = Get[YesOrNo].unsafeGetNullable(rs, i + 5),
      isInsertableInto = Get[YesOrNo].unsafeGetNullable(rs, i + 6),
      isTriggerUpdatable = Get[YesOrNo].unsafeGetNullable(rs, i + 7),
      isTriggerDeletable = Get[YesOrNo].unsafeGetNullable(rs, i + 8),
      isTriggerInsertableInto = Get[YesOrNo].unsafeGetNullable(rs, i + 9)
    )
  )
}
