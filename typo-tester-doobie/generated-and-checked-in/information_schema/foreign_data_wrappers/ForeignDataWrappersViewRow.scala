/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package information_schema
package foreign_data_wrappers

import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.SqlIdentifier
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class ForeignDataWrappersViewRow(
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperCatalog]] */
  foreignDataWrapperCatalog: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperName]] */
  foreignDataWrapperName: Option[SqlIdentifier],
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.authorizationIdentifier]] */
  authorizationIdentifier: Option[SqlIdentifier],
  libraryName: Option[CharacterData],
  /** Points to [[`_pg_foreign_data_wrappers`.PgForeignDataWrappersViewRow.foreignDataWrapperLanguage]] */
  foreignDataWrapperLanguage: Option[CharacterData]
)

object ForeignDataWrappersViewRow {
  implicit val decoder: Decoder[ForeignDataWrappersViewRow] = Decoder.forProduct5[ForeignDataWrappersViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CharacterData]]("foreign_data_wrapper_catalog", "foreign_data_wrapper_name", "authorization_identifier", "library_name", "foreign_data_wrapper_language")(ForeignDataWrappersViewRow.apply)
  implicit val encoder: Encoder[ForeignDataWrappersViewRow] = Encoder.forProduct5[ForeignDataWrappersViewRow, Option[SqlIdentifier], Option[SqlIdentifier], Option[SqlIdentifier], Option[CharacterData], Option[CharacterData]]("foreign_data_wrapper_catalog", "foreign_data_wrapper_name", "authorization_identifier", "library_name", "foreign_data_wrapper_language")(x => (x.foreignDataWrapperCatalog, x.foreignDataWrapperName, x.authorizationIdentifier, x.libraryName, x.foreignDataWrapperLanguage))
  implicit val read: Read[ForeignDataWrappersViewRow] = new Read[ForeignDataWrappersViewRow](
    gets = List(
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[SqlIdentifier], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable),
      (Get[CharacterData], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => ForeignDataWrappersViewRow(
      foreignDataWrapperCatalog = Get[SqlIdentifier].unsafeGetNullable(rs, i + 0),
      foreignDataWrapperName = Get[SqlIdentifier].unsafeGetNullable(rs, i + 1),
      authorizationIdentifier = Get[SqlIdentifier].unsafeGetNullable(rs, i + 2),
      libraryName = Get[CharacterData].unsafeGetNullable(rs, i + 3),
      foreignDataWrapperLanguage = Get[CharacterData].unsafeGetNullable(rs, i + 4)
    )
  )
}
