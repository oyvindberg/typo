/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import cats.data.NonEmptyList
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import org.postgresql.util.PGobject

/** xid (via PGObject) */
case class TypoXid(value: String)

object TypoXid {
  implicit val arrayGet: Get[Array[TypoXid]] = Get.Advanced.array[AnyRef](NonEmptyList.one("_xid"))
    .map(_.map(v => TypoXid(v.asInstanceOf[String])))
  implicit val arrayPut: Put[Array[TypoXid]] = Put.Advanced.array[AnyRef](NonEmptyList.one("_xid"), "xid")
    .contramap(_.map(v => {
                            val obj = new PGobject
                            obj.setType("xid")
                            obj.setValue(v.value)
                            obj
                          }))
  implicit val decoder: Decoder[TypoXid] = Decoder.forProduct1[TypoXid, String]("value")(TypoXid.apply)
  implicit val encoder: Encoder[TypoXid] = Encoder.forProduct1[TypoXid, String]("value")(x => (x.value))
  implicit val get: Get[TypoXid] = Get.Advanced.other[PGobject](NonEmptyList.one("xid"))
    .map(v => TypoXid(v.getValue))
  implicit val put: Put[TypoXid] = Put.Advanced.other[PGobject](NonEmptyList.one("xid")).contramap(v => {
                                                                         val obj = new PGobject
                                                                         obj.setType("xid")
                                                                         obj.setValue(v.value)
                                                                         obj
                                                                       })
}
