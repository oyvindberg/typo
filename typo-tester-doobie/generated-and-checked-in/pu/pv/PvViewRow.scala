/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pu
package pv

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PvViewRow(
  id: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.productid]] */
  productid: Option[ProductId],
  /** Points to [[purchasing.productvendor.ProductvendorRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[purchasing.productvendor.ProductvendorRow.averageleadtime]] */
  averageleadtime: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.standardprice]] */
  standardprice: Option[BigDecimal],
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptcost]] */
  lastreceiptcost: Option[BigDecimal],
  /** Points to [[purchasing.productvendor.ProductvendorRow.lastreceiptdate]] */
  lastreceiptdate: Option[TypoLocalDateTime],
  /** Points to [[purchasing.productvendor.ProductvendorRow.minorderqty]] */
  minorderqty: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.maxorderqty]] */
  maxorderqty: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.onorderqty]] */
  onorderqty: Option[Int],
  /** Points to [[purchasing.productvendor.ProductvendorRow.unitmeasurecode]] */
  unitmeasurecode: Option[UnitmeasureId],
  /** Points to [[purchasing.productvendor.ProductvendorRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object PvViewRow {
  implicit val decoder: Decoder[PvViewRow] = Decoder.forProduct12[PvViewRow, Option[Int], Option[ProductId], Option[BusinessentityId], Option[Int], Option[BigDecimal], Option[BigDecimal], Option[TypoLocalDateTime], Option[Int], Option[Int], Option[Int], Option[UnitmeasureId], Option[TypoLocalDateTime]]("id", "productid", "businessentityid", "averageleadtime", "standardprice", "lastreceiptcost", "lastreceiptdate", "minorderqty", "maxorderqty", "onorderqty", "unitmeasurecode", "modifieddate")(PvViewRow.apply)
  implicit val encoder: Encoder[PvViewRow] = Encoder.forProduct12[PvViewRow, Option[Int], Option[ProductId], Option[BusinessentityId], Option[Int], Option[BigDecimal], Option[BigDecimal], Option[TypoLocalDateTime], Option[Int], Option[Int], Option[Int], Option[UnitmeasureId], Option[TypoLocalDateTime]]("id", "productid", "businessentityid", "averageleadtime", "standardprice", "lastreceiptcost", "lastreceiptdate", "minorderqty", "maxorderqty", "onorderqty", "unitmeasurecode", "modifieddate")(x => (x.id, x.productid, x.businessentityid, x.averageleadtime, x.standardprice, x.lastreceiptcost, x.lastreceiptdate, x.minorderqty, x.maxorderqty, x.onorderqty, x.unitmeasurecode, x.modifieddate))
  implicit val read: Read[PvViewRow] = new Read[PvViewRow](
    gets = List(
      (Get[Int], Nullability.Nullable),
      (Get[ProductId], Nullability.Nullable),
      (Get[BusinessentityId], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[UnitmeasureId], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PvViewRow(
      id = Get[Int].unsafeGetNullable(rs, i + 0),
      productid = Get[ProductId].unsafeGetNullable(rs, i + 1),
      businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 2),
      averageleadtime = Get[Int].unsafeGetNullable(rs, i + 3),
      standardprice = Get[BigDecimal].unsafeGetNullable(rs, i + 4),
      lastreceiptcost = Get[BigDecimal].unsafeGetNullable(rs, i + 5),
      lastreceiptdate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 6),
      minorderqty = Get[Int].unsafeGetNullable(rs, i + 7),
      maxorderqty = Get[Int].unsafeGetNullable(rs, i + 8),
      onorderqty = Get[Int].unsafeGetNullable(rs, i + 9),
      unitmeasurecode = Get[UnitmeasureId].unsafeGetNullable(rs, i + 10),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 11)
    )
  )
}
