/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salestaxrate

import adventureworks.Defaulted
import adventureworks.person.stateprovince.StateprovinceId
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

/** This class corresponds to a row in table `sales.salestaxrate` which has not been persisted yet */
case class SalestaxrateRowUnsaved(
  /** State, province, or country/region the sales tax applies to.
      Points to [[person.stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: StateprovinceId,
  /** 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions. */
  taxtype: Int,
  /** Tax rate description. */
  name: Name,
  /** Default: nextval('sales.salestaxrate_salestaxrateid_seq'::regclass)
      Primary key for SalesTaxRate records. */
  salestaxrateid: Defaulted[SalestaxrateId] = Defaulted.UseDefault,
  /** Default: 0.00
      Tax rate amount. */
  taxrate: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(salestaxrateidDefault: => SalestaxrateId, taxrateDefault: => BigDecimal, rowguidDefault: => UUID, modifieddateDefault: => LocalDateTime): SalestaxrateRow =
    SalestaxrateRow(
      stateprovinceid = stateprovinceid,
      taxtype = taxtype,
      name = name,
      salestaxrateid = salestaxrateid match {
                         case Defaulted.UseDefault => salestaxrateidDefault
                         case Defaulted.Provided(value) => value
                       },
      taxrate = taxrate match {
                  case Defaulted.UseDefault => taxrateDefault
                  case Defaulted.Provided(value) => value
                },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object SalestaxrateRowUnsaved {
  implicit val decoder: Decoder[SalestaxrateRowUnsaved] =
    (c: HCursor) =>
      for {
        stateprovinceid <- c.downField("stateprovinceid").as[StateprovinceId]
        taxtype <- c.downField("taxtype").as[Int]
        name <- c.downField("name").as[Name]
        salestaxrateid <- c.downField("salestaxrateid").as[Defaulted[SalestaxrateId]]
        taxrate <- c.downField("taxrate").as[Defaulted[BigDecimal]]
        rowguid <- c.downField("rowguid").as[Defaulted[UUID]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield SalestaxrateRowUnsaved(stateprovinceid, taxtype, name, salestaxrateid, taxrate, rowguid, modifieddate)
  implicit val encoder: Encoder[SalestaxrateRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "stateprovinceid" := row.stateprovinceid,
        "taxtype" := row.taxtype,
        "name" := row.name,
        "salestaxrateid" := row.salestaxrateid,
        "taxrate" := row.taxrate,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
