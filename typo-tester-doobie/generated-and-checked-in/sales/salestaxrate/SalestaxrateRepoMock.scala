/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salestaxrate

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class SalestaxrateRepoMock(toRow: Function1[SalestaxrateRowUnsaved, SalestaxrateRow],
                           map: scala.collection.mutable.Map[SalestaxrateId, SalestaxrateRow] = scala.collection.mutable.Map.empty) extends SalestaxrateRepo {
  override def delete(salestaxrateid: SalestaxrateId): ConnectionIO[Boolean] = {
    delay(map.remove(salestaxrateid).isDefined)
  }
  override def insert(unsaved: SalestaxrateRow): ConnectionIO[SalestaxrateRow] = {
    delay {
      if (map.contains(unsaved.salestaxrateid))
        sys.error(s"id ${unsaved.salestaxrateid} already exists")
      else
        map.put(unsaved.salestaxrateid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: SalestaxrateRowUnsaved): ConnectionIO[SalestaxrateRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, SalestaxrateRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(salestaxrateid: SalestaxrateId): ConnectionIO[Option[SalestaxrateRow]] = {
    delay(map.get(salestaxrateid))
  }
  override def selectByIds(salestaxrateids: Array[SalestaxrateId]): Stream[ConnectionIO, SalestaxrateRow] = {
    Stream.emits(salestaxrateids.flatMap(map.get).toList)
  }
  override def update(row: SalestaxrateRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.salestaxrateid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.salestaxrateid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: SalestaxrateRow): ConnectionIO[SalestaxrateRow] = {
    delay {
      map.put(unsaved.salestaxrateid, unsaved)
      unsaved
    }
  }
}
