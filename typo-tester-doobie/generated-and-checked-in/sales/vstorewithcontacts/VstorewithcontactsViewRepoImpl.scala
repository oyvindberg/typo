/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vstorewithcontacts

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import adventureworks.public.Phone
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet

object VstorewithcontactsViewRepoImpl extends VstorewithcontactsViewRepo {
  override def selectAll: Stream[ConnectionIO, VstorewithcontactsViewRow] = {
    sql"""select businessentityid, "name", contacttype, title, firstname, middlename, lastname, suffix, phonenumber, phonenumbertype, emailaddress, emailpromotion from sales.vstorewithcontacts""".query[VstorewithcontactsViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[VstorewithcontactsViewFieldOrIdValue[_]]): Stream[ConnectionIO, VstorewithcontactsViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case VstorewithcontactsViewFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case VstorewithcontactsViewFieldValue.name(value) => fr""""name" = $value"""
        case VstorewithcontactsViewFieldValue.contacttype(value) => fr"contacttype = $value"
        case VstorewithcontactsViewFieldValue.title(value) => fr"title = $value"
        case VstorewithcontactsViewFieldValue.firstname(value) => fr"firstname = $value"
        case VstorewithcontactsViewFieldValue.middlename(value) => fr"middlename = $value"
        case VstorewithcontactsViewFieldValue.lastname(value) => fr"lastname = $value"
        case VstorewithcontactsViewFieldValue.suffix(value) => fr"suffix = $value"
        case VstorewithcontactsViewFieldValue.phonenumber(value) => fr"phonenumber = $value"
        case VstorewithcontactsViewFieldValue.phonenumbertype(value) => fr"phonenumbertype = $value"
        case VstorewithcontactsViewFieldValue.emailaddress(value) => fr"emailaddress = $value"
        case VstorewithcontactsViewFieldValue.emailpromotion(value) => fr"emailpromotion = $value"
      } :_*
    )
    sql"select * from sales.vstorewithcontacts $where".query[VstorewithcontactsViewRow].stream
  
  }
  implicit val read: Read[VstorewithcontactsViewRow] =
    new Read[VstorewithcontactsViewRow](
      gets = List(
        (Get[BusinessentityId], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Phone], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => VstorewithcontactsViewRow(
        businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 0),
        name = Get[Name].unsafeGetNullable(rs, i + 1),
        contacttype = Get[Name].unsafeGetNullable(rs, i + 2),
        title = Get[String].unsafeGetNullable(rs, i + 3),
        firstname = Get[Name].unsafeGetNullable(rs, i + 4),
        middlename = Get[Name].unsafeGetNullable(rs, i + 5),
        lastname = Get[Name].unsafeGetNullable(rs, i + 6),
        suffix = Get[String].unsafeGetNullable(rs, i + 7),
        phonenumber = Get[Phone].unsafeGetNullable(rs, i + 8),
        phonenumbertype = Get[Name].unsafeGetNullable(rs, i + 9),
        emailaddress = Get[String].unsafeGetNullable(rs, i + 10),
        emailpromotion = Get[Int].unsafeGetNullable(rs, i + 11)
      )
    )
  

}
