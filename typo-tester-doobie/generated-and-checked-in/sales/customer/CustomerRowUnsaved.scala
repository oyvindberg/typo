/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package customer

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

/** This class corresponds to a row in table `sales.customer` which has not been persisted yet */
case class CustomerRowUnsaved(
  /** Foreign key to Person.BusinessEntityID
      Points to [[person.person.PersonRow.businessentityid]] */
  personid: Option[BusinessentityId],
  /** Foreign key to Store.BusinessEntityID
      Points to [[store.StoreRow.businessentityid]] */
  storeid: Option[BusinessentityId],
  /** ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Default: nextval('sales.customer_customerid_seq'::regclass)
      Primary key. */
  customerid: Defaulted[CustomerId] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(customeridDefault: => CustomerId, rowguidDefault: => UUID, modifieddateDefault: => LocalDateTime): CustomerRow =
    CustomerRow(
      personid = personid,
      storeid = storeid,
      territoryid = territoryid,
      customerid = customerid match {
                     case Defaulted.UseDefault => customeridDefault
                     case Defaulted.Provided(value) => value
                   },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object CustomerRowUnsaved {
  implicit val decoder: Decoder[CustomerRowUnsaved] =
    (c: HCursor) =>
      for {
        personid <- c.downField("personid").as[Option[BusinessentityId]]
        storeid <- c.downField("storeid").as[Option[BusinessentityId]]
        territoryid <- c.downField("territoryid").as[Option[SalesterritoryId]]
        customerid <- c.downField("customerid").as[Defaulted[CustomerId]]
        rowguid <- c.downField("rowguid").as[Defaulted[UUID]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield CustomerRowUnsaved(personid, storeid, territoryid, customerid, rowguid, modifieddate)
  implicit val encoder: Encoder[CustomerRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "personid" := row.personid,
        "storeid" := row.storeid,
        "territoryid" := row.territoryid,
        "customerid" := row.customerid,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
