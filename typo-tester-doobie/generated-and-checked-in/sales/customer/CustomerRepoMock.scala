/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package customer

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class CustomerRepoMock(toRow: Function1[CustomerRowUnsaved, CustomerRow],
                       map: scala.collection.mutable.Map[CustomerId, CustomerRow] = scala.collection.mutable.Map.empty) extends CustomerRepo {
  override def delete(customerid: CustomerId): ConnectionIO[Boolean] = {
    delay(map.remove(customerid).isDefined)
  }
  override def insert(unsaved: CustomerRow): ConnectionIO[CustomerRow] = {
    delay {
      if (map.contains(unsaved.customerid))
        sys.error(s"id ${unsaved.customerid} already exists")
      else
        map.put(unsaved.customerid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: CustomerRowUnsaved): ConnectionIO[CustomerRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, CustomerRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[CustomerFieldOrIdValue[_]]): Stream[ConnectionIO, CustomerRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, CustomerFieldValue.customerid(value)) => acc.filter(_.customerid == value)
        case (acc, CustomerFieldValue.personid(value)) => acc.filter(_.personid == value)
        case (acc, CustomerFieldValue.storeid(value)) => acc.filter(_.storeid == value)
        case (acc, CustomerFieldValue.territoryid(value)) => acc.filter(_.territoryid == value)
        case (acc, CustomerFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
        case (acc, CustomerFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(customerid: CustomerId): ConnectionIO[Option[CustomerRow]] = {
    delay(map.get(customerid))
  }
  override def selectByIds(customerids: Array[CustomerId]): Stream[ConnectionIO, CustomerRow] = {
    Stream.emits(customerids.flatMap(map.get).toList)
  }
  override def update(row: CustomerRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.customerid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.customerid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(customerid: CustomerId, fieldValues: List[CustomerFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(customerid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, CustomerFieldValue.personid(value)) => acc.copy(personid = value)
            case (acc, CustomerFieldValue.storeid(value)) => acc.copy(storeid = value)
            case (acc, CustomerFieldValue.territoryid(value)) => acc.copy(territoryid = value)
            case (acc, CustomerFieldValue.rowguid(value)) => acc.copy(rowguid = value)
            case (acc, CustomerFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(customerid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: CustomerRow): ConnectionIO[CustomerRow] = {
    delay {
      map.put(unsaved.customerid, unsaved)
      unsaved
    }
  }
}
