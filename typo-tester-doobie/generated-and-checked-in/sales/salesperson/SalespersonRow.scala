/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesperson

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class SalespersonRow(
  /** Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID
      Points to [[humanresources.employee.EmployeeRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Projected yearly sales. */
  salesquota: Option[BigDecimal],
  /** Bonus due if quota is met. */
  bonus: BigDecimal,
  /** Commision percent received per sale. */
  commissionpct: BigDecimal,
  /** Sales total year to date. */
  salesytd: BigDecimal,
  /** Sales total of previous year. */
  saleslastyear: BigDecimal,
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object SalespersonRow {
  implicit val decoder: Decoder[SalespersonRow] = Decoder.forProduct9[SalespersonRow, BusinessentityId, Option[SalesterritoryId], Option[BigDecimal], BigDecimal, BigDecimal, BigDecimal, BigDecimal, UUID, TypoLocalDateTime]("businessentityid", "territoryid", "salesquota", "bonus", "commissionpct", "salesytd", "saleslastyear", "rowguid", "modifieddate")(SalespersonRow.apply)
  implicit val encoder: Encoder[SalespersonRow] = Encoder.forProduct9[SalespersonRow, BusinessentityId, Option[SalesterritoryId], Option[BigDecimal], BigDecimal, BigDecimal, BigDecimal, BigDecimal, UUID, TypoLocalDateTime]("businessentityid", "territoryid", "salesquota", "bonus", "commissionpct", "salesytd", "saleslastyear", "rowguid", "modifieddate")(x => (x.businessentityid, x.territoryid, x.salesquota, x.bonus, x.commissionpct, x.salesytd, x.saleslastyear, x.rowguid, x.modifieddate))
  implicit val read: Read[SalespersonRow] = new Read[SalespersonRow](
    gets = List(
      (Get[BusinessentityId], Nullability.NoNulls),
      (Get[SalesterritoryId], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[UUID], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SalespersonRow(
      businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
      territoryid = Get[SalesterritoryId].unsafeGetNullable(rs, i + 1),
      salesquota = Get[BigDecimal].unsafeGetNullable(rs, i + 2),
      bonus = Get[BigDecimal].unsafeGetNonNullable(rs, i + 3),
      commissionpct = Get[BigDecimal].unsafeGetNonNullable(rs, i + 4),
      salesytd = Get[BigDecimal].unsafeGetNonNullable(rs, i + 5),
      saleslastyear = Get[BigDecimal].unsafeGetNonNullable(rs, i + 6),
      rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 7),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 8)
    )
  )
}
