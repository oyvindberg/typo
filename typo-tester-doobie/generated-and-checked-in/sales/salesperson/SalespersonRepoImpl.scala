/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesperson

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object SalespersonRepoImpl extends SalespersonRepo {
  override def delete(businessentityid: BusinessentityId): ConnectionIO[Boolean] = {
    sql"delete from sales.salesperson where businessentityid = $businessentityid".update.run.map(_ > 0)
  }
  override def insert(unsaved: SalespersonRow): ConnectionIO[SalespersonRow] = {
    sql"""insert into sales.salesperson(businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.territoryid}::int4, ${unsaved.salesquota}::numeric, ${unsaved.bonus}::numeric, ${unsaved.commissionpct}::numeric, ${unsaved.salesytd}::numeric, ${unsaved.saleslastyear}::numeric, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: SalespersonRowUnsaved): ConnectionIO[SalespersonRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"territoryid"), fr"${unsaved.territoryid}::int4")),
      Some((Fragment.const(s"salesquota"), fr"${unsaved.salesquota}::numeric")),
      unsaved.bonus match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"bonus"), fr"${value: BigDecimal}::numeric"))
      },
      unsaved.commissionpct match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"commissionpct"), fr"${value: BigDecimal}::numeric"))
      },
      unsaved.salesytd match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"salesytd"), fr"${value: BigDecimal}::numeric"))
      },
      unsaved.saleslastyear match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"saleslastyear"), fr"${value: BigDecimal}::numeric"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.salesperson default values
            returning businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.salesperson(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, SalespersonRow] = {
    sql"select businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate from sales.salesperson".query[SalespersonRow].stream
  }
  override def selectByFieldValues(fieldValues: List[SalespersonFieldOrIdValue[_]]): Stream[ConnectionIO, SalespersonRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case SalespersonFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case SalespersonFieldValue.territoryid(value) => fr"territoryid = $value"
        case SalespersonFieldValue.salesquota(value) => fr"salesquota = $value"
        case SalespersonFieldValue.bonus(value) => fr"bonus = $value"
        case SalespersonFieldValue.commissionpct(value) => fr"commissionpct = $value"
        case SalespersonFieldValue.salesytd(value) => fr"salesytd = $value"
        case SalespersonFieldValue.saleslastyear(value) => fr"saleslastyear = $value"
        case SalespersonFieldValue.rowguid(value) => fr"rowguid = $value"
        case SalespersonFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from sales.salesperson $where".query[SalespersonRow].stream
  
  }
  override def selectById(businessentityid: BusinessentityId): ConnectionIO[Option[SalespersonRow]] = {
    sql"select businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate from sales.salesperson where businessentityid = $businessentityid".query[SalespersonRow].option
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): Stream[ConnectionIO, SalespersonRow] = {
    sql"select businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate from sales.salesperson where businessentityid = ANY($businessentityids)".query[SalespersonRow].stream
  }
  override def update(row: SalespersonRow): ConnectionIO[Boolean] = {
    val businessentityid = row.businessentityid
    sql"""update sales.salesperson
          set territoryid = ${row.territoryid}::int4,
              salesquota = ${row.salesquota}::numeric,
              bonus = ${row.bonus}::numeric,
              commissionpct = ${row.commissionpct}::numeric,
              salesytd = ${row.salesytd}::numeric,
              saleslastyear = ${row.saleslastyear}::numeric,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = $businessentityid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(businessentityid: BusinessentityId, fieldValues: List[SalespersonFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case SalespersonFieldValue.territoryid(value) => fr"territoryid = $value"
            case SalespersonFieldValue.salesquota(value) => fr"salesquota = $value"
            case SalespersonFieldValue.bonus(value) => fr"bonus = $value"
            case SalespersonFieldValue.commissionpct(value) => fr"commissionpct = $value"
            case SalespersonFieldValue.salesytd(value) => fr"salesytd = $value"
            case SalespersonFieldValue.saleslastyear(value) => fr"saleslastyear = $value"
            case SalespersonFieldValue.rowguid(value) => fr"rowguid = $value"
            case SalespersonFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update sales.salesperson
              $updates
              where businessentityid = $businessentityid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: SalespersonRow): ConnectionIO[SalespersonRow] = {
    sql"""insert into sales.salesperson(businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.territoryid}::int4,
            ${unsaved.salesquota}::numeric,
            ${unsaved.bonus}::numeric,
            ${unsaved.commissionpct}::numeric,
            ${unsaved.salesytd}::numeric,
            ${unsaved.saleslastyear}::numeric,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid)
          do update set
            territoryid = EXCLUDED.territoryid,
            salesquota = EXCLUDED.salesquota,
            bonus = EXCLUDED.bonus,
            commissionpct = EXCLUDED.commissionpct,
            salesytd = EXCLUDED.salesytd,
            saleslastyear = EXCLUDED.saleslastyear,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate
       """.query.unique
  }
  implicit val read: Read[SalespersonRow] =
    new Read[SalespersonRow](
      gets = List(
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[SalesterritoryId], Nullability.Nullable),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SalespersonRow(
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
        territoryid = Get[SalesterritoryId].unsafeGetNullable(rs, i + 1),
        salesquota = Get[BigDecimal].unsafeGetNullable(rs, i + 2),
        bonus = Get[BigDecimal].unsafeGetNonNullable(rs, i + 3),
        commissionpct = Get[BigDecimal].unsafeGetNonNullable(rs, i + 4),
        salesytd = Get[BigDecimal].unsafeGetNonNullable(rs, i + 5),
        saleslastyear = Get[BigDecimal].unsafeGetNonNullable(rs, i + 6),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 7),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 8)
      )
    )
  

}
