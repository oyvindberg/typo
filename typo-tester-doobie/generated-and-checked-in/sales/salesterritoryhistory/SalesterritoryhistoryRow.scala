/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesterritoryhistory

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class SalesterritoryhistoryRow(
  /** Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.
      Points to [[salesperson.SalespersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: SalesterritoryId,
  /** Primary key. Date the sales representive started work in the territory. */
  startdate: TypoLocalDateTime,
  /** Date the sales representative left work in the territory. */
  enddate: Option[TypoLocalDateTime],
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
){
   val compositeId: SalesterritoryhistoryId = SalesterritoryhistoryId(businessentityid, startdate, territoryid)
 }

object SalesterritoryhistoryRow {
  implicit val decoder: Decoder[SalesterritoryhistoryRow] = Decoder.forProduct6[SalesterritoryhistoryRow, BusinessentityId, SalesterritoryId, TypoLocalDateTime, Option[TypoLocalDateTime], UUID, TypoLocalDateTime]("businessentityid", "territoryid", "startdate", "enddate", "rowguid", "modifieddate")(SalesterritoryhistoryRow.apply)
  implicit val encoder: Encoder[SalesterritoryhistoryRow] = Encoder.forProduct6[SalesterritoryhistoryRow, BusinessentityId, SalesterritoryId, TypoLocalDateTime, Option[TypoLocalDateTime], UUID, TypoLocalDateTime]("businessentityid", "territoryid", "startdate", "enddate", "rowguid", "modifieddate")(x => (x.businessentityid, x.territoryid, x.startdate, x.enddate, x.rowguid, x.modifieddate))
  implicit val read: Read[SalesterritoryhistoryRow] = new Read[SalesterritoryhistoryRow](
    gets = List(
      (Get[BusinessentityId], Nullability.NoNulls),
      (Get[SalesterritoryId], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[UUID], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SalesterritoryhistoryRow(
      businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
      territoryid = Get[SalesterritoryId].unsafeGetNonNullable(rs, i + 1),
      startdate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 2),
      enddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 3),
      rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 4),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 5)
    )
  )
}
