/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package personcreditcard

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream

object PersoncreditcardRepoImpl extends PersoncreditcardRepo {
  override def delete(compositeId: PersoncreditcardId): ConnectionIO[Boolean] = {
    sql"delete from sales.personcreditcard where businessentityid = ${compositeId.businessentityid} AND creditcardid = ${compositeId.creditcardid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PersoncreditcardRow): ConnectionIO[PersoncreditcardRow] = {
    sql"""insert into sales.personcreditcard(businessentityid, creditcardid, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.creditcardid}::int4, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, creditcardid, modifieddate::text
       """.query(PersoncreditcardRow.read).unique
  }
  override def insert(unsaved: PersoncreditcardRowUnsaved): ConnectionIO[PersoncreditcardRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"creditcardid"), fr"${unsaved.creditcardid}::int4")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.personcreditcard default values
            returning businessentityid, creditcardid, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.personcreditcard(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, creditcardid, modifieddate::text
         """
    }
    q.query(PersoncreditcardRow.read).unique
  
  }
  override def selectAll: Stream[ConnectionIO, PersoncreditcardRow] = {
    sql"select businessentityid, creditcardid, modifieddate::text from sales.personcreditcard".query(PersoncreditcardRow.read).stream
  }
  override def selectById(compositeId: PersoncreditcardId): ConnectionIO[Option[PersoncreditcardRow]] = {
    sql"select businessentityid, creditcardid, modifieddate::text from sales.personcreditcard where businessentityid = ${compositeId.businessentityid} AND creditcardid = ${compositeId.creditcardid}".query(PersoncreditcardRow.read).option
  }
  override def update(row: PersoncreditcardRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update sales.personcreditcard
          set modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = ${compositeId.businessentityid} AND creditcardid = ${compositeId.creditcardid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PersoncreditcardRow): ConnectionIO[PersoncreditcardRow] = {
    sql"""insert into sales.personcreditcard(businessentityid, creditcardid, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.creditcardid}::int4,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid, creditcardid)
          do update set
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, creditcardid, modifieddate::text
       """.query(PersoncreditcardRow.read).unique
  }
}
