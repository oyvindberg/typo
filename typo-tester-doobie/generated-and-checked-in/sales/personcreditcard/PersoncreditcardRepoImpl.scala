/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package personcreditcard

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.creditcard.CreditcardId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object PersoncreditcardRepoImpl extends PersoncreditcardRepo {
  override def delete(compositeId: PersoncreditcardId): ConnectionIO[Boolean] = {
    sql"delete from sales.personcreditcard where businessentityid = ${compositeId.businessentityid} AND creditcardid = ${compositeId.creditcardid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PersoncreditcardRow): ConnectionIO[PersoncreditcardRow] = {
    sql"""insert into sales.personcreditcard(businessentityid, creditcardid, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.creditcardid}::int4, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, creditcardid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: PersoncreditcardRowUnsaved): ConnectionIO[PersoncreditcardRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"creditcardid"), fr"${unsaved.creditcardid}::int4")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.personcreditcard default values
            returning businessentityid, creditcardid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.personcreditcard(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, creditcardid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, PersoncreditcardRow] = {
    sql"select businessentityid, creditcardid, modifieddate from sales.personcreditcard".query[PersoncreditcardRow].stream
  }
  override def selectByFieldValues(fieldValues: List[PersoncreditcardFieldOrIdValue[_]]): Stream[ConnectionIO, PersoncreditcardRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case PersoncreditcardFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case PersoncreditcardFieldValue.creditcardid(value) => fr"creditcardid = $value"
        case PersoncreditcardFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from sales.personcreditcard $where".query[PersoncreditcardRow].stream
  
  }
  override def selectById(compositeId: PersoncreditcardId): ConnectionIO[Option[PersoncreditcardRow]] = {
    sql"select businessentityid, creditcardid, modifieddate from sales.personcreditcard where businessentityid = ${compositeId.businessentityid} AND creditcardid = ${compositeId.creditcardid}".query[PersoncreditcardRow].option
  }
  override def update(row: PersoncreditcardRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update sales.personcreditcard
          set modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = ${compositeId.businessentityid} AND creditcardid = ${compositeId.creditcardid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(compositeId: PersoncreditcardId, fieldValues: List[PersoncreditcardFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case PersoncreditcardFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update sales.personcreditcard
              $updates
              where businessentityid = ${compositeId.businessentityid} AND creditcardid = ${compositeId.creditcardid}
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: PersoncreditcardRow): ConnectionIO[PersoncreditcardRow] = {
    sql"""insert into sales.personcreditcard(businessentityid, creditcardid, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.creditcardid}::int4,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid, creditcardid)
          do update set
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, creditcardid, modifieddate
       """.query.unique
  }
  implicit val read: Read[PersoncreditcardRow] =
    new Read[PersoncreditcardRow](
      gets = List(
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[CreditcardId], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PersoncreditcardRow(
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
        creditcardid = Get[CreditcardId].unsafeGetNonNullable(rs, i + 1),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 2)
      )
    )
  

}
