/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currency

import doobie.Get
import doobie.Meta
import doobie.Put
import doobie.Read
import doobie.Write

/** Type for the primary key of table `sales.currency` */
case class CurrencyId(value: /* bpchar */ String) extends AnyVal
object CurrencyId {
  implicit val ordering: Ordering[CurrencyId] = Ordering.by(_.value)
  
  implicit val putArray: Put[Array[CurrencyId]] = Meta[Array[/* bpchar */ String]].put.contramap(_.map(_.value))
  implicit val getArray: Get[Array[CurrencyId]] = Meta[Array[/* bpchar */ String]].get.map(_.map(CurrencyId.apply))
  implicit val put: Put[CurrencyId] = Put[/* bpchar */ String].contramap(_.value)
  implicit val get: Get[CurrencyId] = Get[/* bpchar */ String].map(CurrencyId.apply)
  implicit val write: Write[CurrencyId] = Write[/* bpchar */ String].contramap(_.value)
  implicit val read: Read[CurrencyId] = Read[/* bpchar */ String].map(CurrencyId.apply)
}
