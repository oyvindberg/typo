/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currency

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class CurrencyRepoMock(toRow: Function1[CurrencyRowUnsaved, CurrencyRow],
                       map: scala.collection.mutable.Map[CurrencyId, CurrencyRow] = scala.collection.mutable.Map.empty) extends CurrencyRepo {
  override def delete(currencycode: CurrencyId): ConnectionIO[Boolean] = {
    delay(map.remove(currencycode).isDefined)
  }
  override def insert(unsaved: CurrencyRow): ConnectionIO[CurrencyRow] = {
    delay {
      if (map.contains(unsaved.currencycode))
        sys.error(s"id ${unsaved.currencycode} already exists")
      else
        map.put(unsaved.currencycode, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: CurrencyRowUnsaved): ConnectionIO[CurrencyRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, CurrencyRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[CurrencyFieldOrIdValue[_]]): Stream[ConnectionIO, CurrencyRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, CurrencyFieldValue.currencycode(value)) => acc.filter(_.currencycode == value)
        case (acc, CurrencyFieldValue.name(value)) => acc.filter(_.name == value)
        case (acc, CurrencyFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(currencycode: CurrencyId): ConnectionIO[Option[CurrencyRow]] = {
    delay(map.get(currencycode))
  }
  override def selectByIds(currencycodes: Array[CurrencyId]): Stream[ConnectionIO, CurrencyRow] = {
    Stream.emits(currencycodes.flatMap(map.get).toList)
  }
  override def update(row: CurrencyRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.currencycode) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.currencycode, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(currencycode: CurrencyId, fieldValues: List[CurrencyFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(currencycode) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, CurrencyFieldValue.name(value)) => acc.copy(name = value)
            case (acc, CurrencyFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(currencycode, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: CurrencyRow): ConnectionIO[CurrencyRow] = {
    delay {
      map.put(unsaved.currencycode, unsaved)
      unsaved
    }
  }
}
