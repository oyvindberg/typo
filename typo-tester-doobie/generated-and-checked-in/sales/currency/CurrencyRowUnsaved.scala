/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currency

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder

/** This class corresponds to a row in table `sales.currency` which has not been persisted yet */
case class CurrencyRowUnsaved(
  /** The ISO code for the Currency. */
  currencycode: CurrencyId,
  /** Currency name. */
  name: Name,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(modifieddateDefault: => TypoLocalDateTime): CurrencyRow =
    CurrencyRow(
      currencycode = currencycode,
      name = name,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object CurrencyRowUnsaved {
  implicit val decoder: Decoder[CurrencyRowUnsaved] = Decoder.forProduct3[CurrencyRowUnsaved, CurrencyId, Name, Defaulted[TypoLocalDateTime]]("currencycode", "name", "modifieddate")(CurrencyRowUnsaved.apply)(CurrencyId.decoder, Name.decoder, Defaulted.decoder(TypoLocalDateTime.decoder))
  implicit val encoder: Encoder[CurrencyRowUnsaved] = Encoder.forProduct3[CurrencyRowUnsaved, CurrencyId, Name, Defaulted[TypoLocalDateTime]]("currencycode", "name", "modifieddate")(x => (x.currencycode, x.name, x.modifieddate))(CurrencyId.encoder, Name.encoder, Defaulted.encoder(TypoLocalDateTime.encoder))
}
