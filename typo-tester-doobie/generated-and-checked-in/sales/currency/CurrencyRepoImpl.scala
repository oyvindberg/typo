/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currency

import adventureworks.Defaulted
import adventureworks.public.Name
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object CurrencyRepoImpl extends CurrencyRepo {
  override def delete(currencycode: CurrencyId): ConnectionIO[Boolean] = {
    sql"delete from sales.currency where currencycode = $currencycode".update.run.map(_ > 0)
  }
  override def insert(unsaved: CurrencyRow): ConnectionIO[CurrencyRow] = {
    sql"""insert into sales.currency(currencycode, "name", modifieddate)
          values (${unsaved.currencycode}::bpchar, ${unsaved.name}::"public"."Name", ${unsaved.modifieddate}::timestamp)
          returning currencycode, "name", modifieddate
       """.query.unique
  }
  override def insert(unsaved: CurrencyRowUnsaved): ConnectionIO[CurrencyRow] = {
    val fs = List(
      Some((Fragment.const(s"currencycode"), fr"${unsaved.currencycode}::bpchar")),
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.currency default values
            returning currencycode, "name", modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.currency(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning currencycode, "name", modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, CurrencyRow] = {
    sql"""select currencycode, "name", modifieddate from sales.currency""".query[CurrencyRow].stream
  }
  override def selectByFieldValues(fieldValues: List[CurrencyFieldOrIdValue[_]]): Stream[ConnectionIO, CurrencyRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case CurrencyFieldValue.currencycode(value) => fr"currencycode = $value"
        case CurrencyFieldValue.name(value) => fr""""name" = $value"""
        case CurrencyFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from sales.currency $where".query[CurrencyRow].stream
  
  }
  override def selectById(currencycode: CurrencyId): ConnectionIO[Option[CurrencyRow]] = {
    sql"""select currencycode, "name", modifieddate from sales.currency where currencycode = $currencycode""".query[CurrencyRow].option
  }
  override def selectByIds(currencycodes: Array[CurrencyId]): Stream[ConnectionIO, CurrencyRow] = {
    sql"""select currencycode, "name", modifieddate from sales.currency where currencycode = ANY($currencycodes)""".query[CurrencyRow].stream
  }
  override def update(row: CurrencyRow): ConnectionIO[Boolean] = {
    val currencycode = row.currencycode
    sql"""update sales.currency
          set "name" = ${row.name}::"public"."Name",
              modifieddate = ${row.modifieddate}::timestamp
          where currencycode = $currencycode
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(currencycode: CurrencyId, fieldValues: List[CurrencyFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case CurrencyFieldValue.name(value) => fr""""name" = $value"""
            case CurrencyFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update sales.currency
              $updates
              where currencycode = $currencycode
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: CurrencyRow): ConnectionIO[CurrencyRow] = {
    sql"""insert into sales.currency(currencycode, "name", modifieddate)
          values (
            ${unsaved.currencycode}::bpchar,
            ${unsaved.name}::"public"."Name",
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (currencycode)
          do update set
            "name" = EXCLUDED."name",
            modifieddate = EXCLUDED.modifieddate
          returning currencycode, "name", modifieddate
       """.query.unique
  }
  implicit val read: Read[CurrencyRow] =
    new Read[CurrencyRow](
      gets = List(
        (Get[CurrencyId], Nullability.NoNulls),
        (Get[Name], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => CurrencyRow(
        currencycode = Get[CurrencyId].unsafeGetNonNullable(rs, i + 0),
        name = Get[Name].unsafeGetNonNullable(rs, i + 1),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 2)
      )
    )
  

}
