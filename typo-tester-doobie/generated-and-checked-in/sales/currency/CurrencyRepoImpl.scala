/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currency

import adventureworks.Defaulted
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream
import java.time.LocalDateTime

object CurrencyRepoImpl extends CurrencyRepo {
  override def delete(currencycode: CurrencyId): ConnectionIO[Boolean] = {
    sql"delete from sales.currency where currencycode = $currencycode".update.run.map(_ > 0)
  }
  override def insert(unsaved: CurrencyRow): ConnectionIO[CurrencyRow] = {
    sql"""insert into sales.currency(currencycode, "name", modifieddate)
          values (${unsaved.currencycode}::bpchar, ${unsaved.name}::"public"."Name", ${unsaved.modifieddate}::timestamp)
          returning currencycode, "name", modifieddate
       """.query[CurrencyRow].unique
  }
  override def insert(unsaved: CurrencyRowUnsaved): ConnectionIO[CurrencyRow] = {
    val fs = List(
      Some((Fragment.const(s"currencycode"), fr"${unsaved.currencycode}::bpchar")),
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.currency default values
            returning currencycode, "name", modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.currency(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning currencycode, "name", modifieddate
         """
    }
    q.query[CurrencyRow].unique
  
  }
  override def selectAll: Stream[ConnectionIO, CurrencyRow] = {
    sql"""select currencycode, "name", modifieddate from sales.currency""".query[CurrencyRow].stream
  }
  override def selectById(currencycode: CurrencyId): ConnectionIO[Option[CurrencyRow]] = {
    sql"""select currencycode, "name", modifieddate from sales.currency where currencycode = $currencycode""".query[CurrencyRow].option
  }
  override def selectByIds(currencycodes: Array[CurrencyId]): Stream[ConnectionIO, CurrencyRow] = {
    sql"""select currencycode, "name", modifieddate from sales.currency where currencycode = ANY($currencycodes)""".query[CurrencyRow].stream
  }
  override def update(row: CurrencyRow): ConnectionIO[Boolean] = {
    val currencycode = row.currencycode
    sql"""update sales.currency
          set "name" = ${row.name}::"public"."Name",
              modifieddate = ${row.modifieddate}::timestamp
          where currencycode = $currencycode
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: CurrencyRow): ConnectionIO[CurrencyRow] = {
    sql"""insert into sales.currency(currencycode, "name", modifieddate)
          values (
            ${unsaved.currencycode}::bpchar,
            ${unsaved.name}::"public"."Name",
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (currencycode)
          do update set
            "name" = EXCLUDED."name",
            modifieddate = EXCLUDED.modifieddate
          returning currencycode, "name", modifieddate
       """.query[CurrencyRow].unique
  }
}
