/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheadersalesreason

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream

object SalesorderheadersalesreasonRepoImpl extends SalesorderheadersalesreasonRepo {
  override def delete(compositeId: SalesorderheadersalesreasonId): ConnectionIO[Boolean] = {
    sql"delete from sales.salesorderheadersalesreason where salesorderid = ${compositeId.salesorderid} AND salesreasonid = ${compositeId.salesreasonid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: SalesorderheadersalesreasonRow): ConnectionIO[SalesorderheadersalesreasonRow] = {
    sql"""insert into sales.salesorderheadersalesreason(salesorderid, salesreasonid, modifieddate)
          values (${unsaved.salesorderid}::int4, ${unsaved.salesreasonid}::int4, ${unsaved.modifieddate}::timestamp)
          returning salesorderid, salesreasonid, modifieddate::text
       """.query(SalesorderheadersalesreasonRow.read).unique
  }
  override def insert(unsaved: SalesorderheadersalesreasonRowUnsaved): ConnectionIO[SalesorderheadersalesreasonRow] = {
    val fs = List(
      Some((Fragment.const(s"salesorderid"), fr"${unsaved.salesorderid}::int4")),
      Some((Fragment.const(s"salesreasonid"), fr"${unsaved.salesreasonid}::int4")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.salesorderheadersalesreason default values
            returning salesorderid, salesreasonid, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.salesorderheadersalesreason(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning salesorderid, salesreasonid, modifieddate::text
         """
    }
    q.query(SalesorderheadersalesreasonRow.read).unique
  
  }
  override def selectAll: Stream[ConnectionIO, SalesorderheadersalesreasonRow] = {
    sql"select salesorderid, salesreasonid, modifieddate::text from sales.salesorderheadersalesreason".query(SalesorderheadersalesreasonRow.read).stream
  }
  override def selectById(compositeId: SalesorderheadersalesreasonId): ConnectionIO[Option[SalesorderheadersalesreasonRow]] = {
    sql"select salesorderid, salesreasonid, modifieddate::text from sales.salesorderheadersalesreason where salesorderid = ${compositeId.salesorderid} AND salesreasonid = ${compositeId.salesreasonid}".query(SalesorderheadersalesreasonRow.read).option
  }
  override def update(row: SalesorderheadersalesreasonRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update sales.salesorderheadersalesreason
          set modifieddate = ${row.modifieddate}::timestamp
          where salesorderid = ${compositeId.salesorderid} AND salesreasonid = ${compositeId.salesreasonid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: SalesorderheadersalesreasonRow): ConnectionIO[SalesorderheadersalesreasonRow] = {
    sql"""insert into sales.salesorderheadersalesreason(salesorderid, salesreasonid, modifieddate)
          values (
            ${unsaved.salesorderid}::int4,
            ${unsaved.salesreasonid}::int4,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (salesorderid, salesreasonid)
          do update set
            modifieddate = EXCLUDED.modifieddate
          returning salesorderid, salesreasonid, modifieddate::text
       """.query(SalesorderheadersalesreasonRow.read).unique
  }
}
