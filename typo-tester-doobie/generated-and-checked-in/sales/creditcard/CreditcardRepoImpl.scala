/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package creditcard

import adventureworks.Defaulted
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object CreditcardRepoImpl extends CreditcardRepo {
  override def delete(creditcardid: CreditcardId): ConnectionIO[Boolean] = {
    sql"delete from sales.creditcard where creditcardid = $creditcardid".update.run.map(_ > 0)
  }
  override def insert(unsaved: CreditcardRow): ConnectionIO[CreditcardRow] = {
    sql"""insert into sales.creditcard(creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate)
          values (${unsaved.creditcardid}::int4, ${unsaved.cardtype}, ${unsaved.cardnumber}, ${unsaved.expmonth}::int2, ${unsaved.expyear}::int2, ${unsaved.modifieddate}::timestamp)
          returning creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate
       """.query.unique
  }
  override def insert(unsaved: CreditcardRowUnsaved): ConnectionIO[CreditcardRow] = {
    val fs = List(
      Some((Fragment.const(s"cardtype"), fr"${unsaved.cardtype}")),
      Some((Fragment.const(s"cardnumber"), fr"${unsaved.cardnumber}")),
      Some((Fragment.const(s"expmonth"), fr"${unsaved.expmonth}::int2")),
      Some((Fragment.const(s"expyear"), fr"${unsaved.expyear}::int2")),
      unsaved.creditcardid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"creditcardid"), fr"${value: CreditcardId}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.creditcard default values
            returning creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.creditcard(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, CreditcardRow] = {
    sql"select creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate from sales.creditcard".query[CreditcardRow].stream
  }
  override def selectByFieldValues(fieldValues: List[CreditcardFieldOrIdValue[_]]): Stream[ConnectionIO, CreditcardRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case CreditcardFieldValue.creditcardid(value) => fr"creditcardid = $value"
        case CreditcardFieldValue.cardtype(value) => fr"cardtype = $value"
        case CreditcardFieldValue.cardnumber(value) => fr"cardnumber = $value"
        case CreditcardFieldValue.expmonth(value) => fr"expmonth = $value"
        case CreditcardFieldValue.expyear(value) => fr"expyear = $value"
        case CreditcardFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from sales.creditcard $where".query[CreditcardRow].stream
  
  }
  override def selectById(creditcardid: CreditcardId): ConnectionIO[Option[CreditcardRow]] = {
    sql"select creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate from sales.creditcard where creditcardid = $creditcardid".query[CreditcardRow].option
  }
  override def selectByIds(creditcardids: Array[CreditcardId]): Stream[ConnectionIO, CreditcardRow] = {
    sql"select creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate from sales.creditcard where creditcardid = ANY($creditcardids)".query[CreditcardRow].stream
  }
  override def update(row: CreditcardRow): ConnectionIO[Boolean] = {
    val creditcardid = row.creditcardid
    sql"""update sales.creditcard
          set cardtype = ${row.cardtype},
              cardnumber = ${row.cardnumber},
              expmonth = ${row.expmonth}::int2,
              expyear = ${row.expyear}::int2,
              modifieddate = ${row.modifieddate}::timestamp
          where creditcardid = $creditcardid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(creditcardid: CreditcardId, fieldValues: List[CreditcardFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case CreditcardFieldValue.cardtype(value) => fr"cardtype = $value"
            case CreditcardFieldValue.cardnumber(value) => fr"cardnumber = $value"
            case CreditcardFieldValue.expmonth(value) => fr"expmonth = $value"
            case CreditcardFieldValue.expyear(value) => fr"expyear = $value"
            case CreditcardFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update sales.creditcard
              $updates
              where creditcardid = $creditcardid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: CreditcardRow): ConnectionIO[CreditcardRow] = {
    sql"""insert into sales.creditcard(creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate)
          values (
            ${unsaved.creditcardid}::int4,
            ${unsaved.cardtype},
            ${unsaved.cardnumber},
            ${unsaved.expmonth}::int2,
            ${unsaved.expyear}::int2,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (creditcardid)
          do update set
            cardtype = EXCLUDED.cardtype,
            cardnumber = EXCLUDED.cardnumber,
            expmonth = EXCLUDED.expmonth,
            expyear = EXCLUDED.expyear,
            modifieddate = EXCLUDED.modifieddate
          returning creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate
       """.query.unique
  }
  implicit val read: Read[CreditcardRow] =
    new Read[CreditcardRow](
      gets = List(
        (Get[CreditcardId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => CreditcardRow(
        creditcardid = Get[CreditcardId].unsafeGetNonNullable(rs, i + 0),
        cardtype = Get[String].unsafeGetNonNullable(rs, i + 1),
        cardnumber = Get[String].unsafeGetNonNullable(rs, i + 2),
        expmonth = Get[Int].unsafeGetNonNullable(rs, i + 3),
        expyear = Get[Int].unsafeGetNonNullable(rs, i + 4),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 5)
      )
    )
  

}
