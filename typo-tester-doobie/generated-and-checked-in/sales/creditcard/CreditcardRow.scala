/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package creditcard

import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class CreditcardRow(
  /** Primary key for CreditCard records. */
  creditcardid: CreditcardId,
  /** Credit card name. */
  cardtype: String,
  /** Credit card number. */
  cardnumber: String,
  /** Credit card expiration month. */
  expmonth: Int,
  /** Credit card expiration year. */
  expyear: Int,
  modifieddate: LocalDateTime
)

object CreditcardRow {
  implicit val decoder: Decoder[CreditcardRow] =
    (c: HCursor) =>
      for {
        creditcardid <- c.downField("creditcardid").as[CreditcardId]
        cardtype <- c.downField("cardtype").as[String]
        cardnumber <- c.downField("cardnumber").as[String]
        expmonth <- c.downField("expmonth").as[Int]
        expyear <- c.downField("expyear").as[Int]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield CreditcardRow(creditcardid, cardtype, cardnumber, expmonth, expyear, modifieddate)
  implicit val encoder: Encoder[CreditcardRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "creditcardid" := row.creditcardid,
        "cardtype" := row.cardtype,
        "cardnumber" := row.cardnumber,
        "expmonth" := row.expmonth,
        "expyear" := row.expyear,
        "modifieddate" := row.modifieddate
      )}
}
