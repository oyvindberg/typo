/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package creditcard

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class CreditcardRepoMock(toRow: Function1[CreditcardRowUnsaved, CreditcardRow],
                         map: scala.collection.mutable.Map[CreditcardId, CreditcardRow] = scala.collection.mutable.Map.empty) extends CreditcardRepo {
  override def delete(creditcardid: CreditcardId): ConnectionIO[Boolean] = {
    delay(map.remove(creditcardid).isDefined)
  }
  override def insert(unsaved: CreditcardRow): ConnectionIO[CreditcardRow] = {
    delay {
      if (map.contains(unsaved.creditcardid))
        sys.error(s"id ${unsaved.creditcardid} already exists")
      else
        map.put(unsaved.creditcardid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: CreditcardRowUnsaved): ConnectionIO[CreditcardRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, CreditcardRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[CreditcardFieldOrIdValue[_]]): Stream[ConnectionIO, CreditcardRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, CreditcardFieldValue.creditcardid(value)) => acc.filter(_.creditcardid == value)
        case (acc, CreditcardFieldValue.cardtype(value)) => acc.filter(_.cardtype == value)
        case (acc, CreditcardFieldValue.cardnumber(value)) => acc.filter(_.cardnumber == value)
        case (acc, CreditcardFieldValue.expmonth(value)) => acc.filter(_.expmonth == value)
        case (acc, CreditcardFieldValue.expyear(value)) => acc.filter(_.expyear == value)
        case (acc, CreditcardFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(creditcardid: CreditcardId): ConnectionIO[Option[CreditcardRow]] = {
    delay(map.get(creditcardid))
  }
  override def selectByIds(creditcardids: Array[CreditcardId]): Stream[ConnectionIO, CreditcardRow] = {
    Stream.emits(creditcardids.flatMap(map.get).toList)
  }
  override def update(row: CreditcardRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.creditcardid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.creditcardid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(creditcardid: CreditcardId, fieldValues: List[CreditcardFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(creditcardid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, CreditcardFieldValue.cardtype(value)) => acc.copy(cardtype = value)
            case (acc, CreditcardFieldValue.cardnumber(value)) => acc.copy(cardnumber = value)
            case (acc, CreditcardFieldValue.expmonth(value)) => acc.copy(expmonth = value)
            case (acc, CreditcardFieldValue.expyear(value)) => acc.copy(expyear = value)
            case (acc, CreditcardFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(creditcardid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: CreditcardRow): ConnectionIO[CreditcardRow] = {
    delay {
      map.put(unsaved.creditcardid, unsaved)
      unsaved
    }
  }
}
