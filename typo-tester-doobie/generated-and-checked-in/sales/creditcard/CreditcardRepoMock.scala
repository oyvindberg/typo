/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package creditcard

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class CreditcardRepoMock(toRow: Function1[CreditcardRowUnsaved, CreditcardRow],
                         map: scala.collection.mutable.Map[CreditcardId, CreditcardRow] = scala.collection.mutable.Map.empty) extends CreditcardRepo {
  override def delete(creditcardid: CreditcardId): ConnectionIO[Boolean] = {
    delay(map.remove(creditcardid).isDefined)
  }
  override def insert(unsaved: CreditcardRow): ConnectionIO[CreditcardRow] = {
    delay {
      if (map.contains(unsaved.creditcardid))
        sys.error(s"id ${unsaved.creditcardid} already exists")
      else
        map.put(unsaved.creditcardid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: CreditcardRowUnsaved): ConnectionIO[CreditcardRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, CreditcardRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(creditcardid: CreditcardId): ConnectionIO[Option[CreditcardRow]] = {
    delay(map.get(creditcardid))
  }
  override def selectByIds(creditcardids: Array[CreditcardId]): Stream[ConnectionIO, CreditcardRow] = {
    Stream.emits(creditcardids.flatMap(map.get).toList)
  }
  override def update(row: CreditcardRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.creditcardid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.creditcardid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: CreditcardRow): ConnectionIO[CreditcardRow] = {
    delay {
      map.put(unsaved.creditcardid, unsaved)
      unsaved
    }
  }
}
