/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currencyrate

import adventureworks.Defaulted
import adventureworks.sales.currency.CurrencyId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `sales.currencyrate` which has not been persisted yet */
case class CurrencyrateRowUnsaved(
  /** Date and time the exchange rate was obtained. */
  currencyratedate: LocalDateTime,
  /** Exchange rate was converted from this currency code.
      Points to [[currency.CurrencyRow.currencycode]] */
  fromcurrencycode: CurrencyId,
  /** Exchange rate was converted to this currency code.
      Points to [[currency.CurrencyRow.currencycode]] */
  tocurrencycode: CurrencyId,
  /** Average exchange rate for the day. */
  averagerate: BigDecimal,
  /** Final exchange rate for the day. */
  endofdayrate: BigDecimal,
  /** Default: nextval('sales.currencyrate_currencyrateid_seq'::regclass)
      Primary key for CurrencyRate records. */
  currencyrateid: Defaulted[CurrencyrateId] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(currencyrateidDefault: => CurrencyrateId, modifieddateDefault: => LocalDateTime): CurrencyrateRow =
    CurrencyrateRow(
      currencyratedate = currencyratedate,
      fromcurrencycode = fromcurrencycode,
      tocurrencycode = tocurrencycode,
      averagerate = averagerate,
      endofdayrate = endofdayrate,
      currencyrateid = currencyrateid match {
                         case Defaulted.UseDefault => currencyrateidDefault
                         case Defaulted.Provided(value) => value
                       },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object CurrencyrateRowUnsaved {
  implicit val decoder: Decoder[CurrencyrateRowUnsaved] =
    (c: HCursor) =>
      for {
        currencyratedate <- c.downField("currencyratedate").as[LocalDateTime]
        fromcurrencycode <- c.downField("fromcurrencycode").as[CurrencyId]
        tocurrencycode <- c.downField("tocurrencycode").as[CurrencyId]
        averagerate <- c.downField("averagerate").as[BigDecimal]
        endofdayrate <- c.downField("endofdayrate").as[BigDecimal]
        currencyrateid <- c.downField("currencyrateid").as[Defaulted[CurrencyrateId]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield CurrencyrateRowUnsaved(currencyratedate, fromcurrencycode, tocurrencycode, averagerate, endofdayrate, currencyrateid, modifieddate)
  implicit val encoder: Encoder[CurrencyrateRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "currencyratedate" := row.currencyratedate,
        "fromcurrencycode" := row.fromcurrencycode,
        "tocurrencycode" := row.tocurrencycode,
        "averagerate" := row.averagerate,
        "endofdayrate" := row.endofdayrate,
        "currencyrateid" := row.currencyrateid,
        "modifieddate" := row.modifieddate
      )}
}
