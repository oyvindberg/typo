/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package currencyrate

import doobie.Get
import doobie.Meta
import doobie.Put
import doobie.Read
import doobie.Write

/** Type for the primary key of table `sales.currencyrate` */
case class CurrencyrateId(value: Int) extends AnyVal
object CurrencyrateId {
  implicit val ordering: Ordering[CurrencyrateId] = Ordering.by(_.value)
  
  implicit val putArray: Put[Array[CurrencyrateId]] = Meta[Array[Int]].put.contramap(_.map(_.value))
  implicit val getArray: Get[Array[CurrencyrateId]] = Meta[Array[Int]].get.map(_.map(CurrencyrateId.apply))
  implicit val put: Put[CurrencyrateId] = Put[Int].contramap(_.value)
  implicit val get: Get[CurrencyrateId] = Get[Int].map(CurrencyrateId.apply)
  implicit val write: Write[CurrencyrateId] = Write[Int].contramap(_.value)
  implicit val read: Read[CurrencyrateId] = Read[Int].map(CurrencyrateId.apply)
}
