/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesterritory

import adventureworks.Defaulted
import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

/** This class corresponds to a row in table `sales.salesterritory` which has not been persisted yet */
case class SalesterritoryRowUnsaved(
  /** Sales territory description */
  name: Name,
  /** ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
      Points to [[person.countryregion.CountryregionRow.countryregioncode]] */
  countryregioncode: CountryregionId,
  /** Geographic area to which the sales territory belong. */
  group: String,
  /** Default: nextval('sales.salesterritory_territoryid_seq'::regclass)
      Primary key for SalesTerritory records. */
  territoryid: Defaulted[SalesterritoryId] = Defaulted.UseDefault,
  /** Default: 0.00
      Sales in the territory year to date. */
  salesytd: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: 0.00
      Sales in the territory the previous year. */
  saleslastyear: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: 0.00
      Business costs in the territory year to date. */
  costytd: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: 0.00
      Business costs in the territory the previous year. */
  costlastyear: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(territoryidDefault: => SalesterritoryId, salesytdDefault: => BigDecimal, saleslastyearDefault: => BigDecimal, costytdDefault: => BigDecimal, costlastyearDefault: => BigDecimal, rowguidDefault: => UUID, modifieddateDefault: => LocalDateTime): SalesterritoryRow =
    SalesterritoryRow(
      name = name,
      countryregioncode = countryregioncode,
      group = group,
      territoryid = territoryid match {
                      case Defaulted.UseDefault => territoryidDefault
                      case Defaulted.Provided(value) => value
                    },
      salesytd = salesytd match {
                   case Defaulted.UseDefault => salesytdDefault
                   case Defaulted.Provided(value) => value
                 },
      saleslastyear = saleslastyear match {
                        case Defaulted.UseDefault => saleslastyearDefault
                        case Defaulted.Provided(value) => value
                      },
      costytd = costytd match {
                  case Defaulted.UseDefault => costytdDefault
                  case Defaulted.Provided(value) => value
                },
      costlastyear = costlastyear match {
                       case Defaulted.UseDefault => costlastyearDefault
                       case Defaulted.Provided(value) => value
                     },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object SalesterritoryRowUnsaved {
  implicit val decoder: Decoder[SalesterritoryRowUnsaved] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Name]
        countryregioncode <- c.downField("countryregioncode").as[CountryregionId]
        group <- c.downField("group").as[String]
        territoryid <- c.downField("territoryid").as[Defaulted[SalesterritoryId]]
        salesytd <- c.downField("salesytd").as[Defaulted[BigDecimal]]
        saleslastyear <- c.downField("saleslastyear").as[Defaulted[BigDecimal]]
        costytd <- c.downField("costytd").as[Defaulted[BigDecimal]]
        costlastyear <- c.downField("costlastyear").as[Defaulted[BigDecimal]]
        rowguid <- c.downField("rowguid").as[Defaulted[UUID]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield SalesterritoryRowUnsaved(name, countryregioncode, group, territoryid, salesytd, saleslastyear, costytd, costlastyear, rowguid, modifieddate)
  implicit val encoder: Encoder[SalesterritoryRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "countryregioncode" := row.countryregioncode,
        "group" := row.group,
        "territoryid" := row.territoryid,
        "salesytd" := row.salesytd,
        "saleslastyear" := row.saleslastyear,
        "costytd" := row.costytd,
        "costlastyear" := row.costlastyear,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
