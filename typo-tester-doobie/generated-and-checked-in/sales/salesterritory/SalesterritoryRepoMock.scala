/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesterritory

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class SalesterritoryRepoMock(toRow: Function1[SalesterritoryRowUnsaved, SalesterritoryRow],
                             map: scala.collection.mutable.Map[SalesterritoryId, SalesterritoryRow] = scala.collection.mutable.Map.empty) extends SalesterritoryRepo {
  override def delete(territoryid: SalesterritoryId): ConnectionIO[Boolean] = {
    delay(map.remove(territoryid).isDefined)
  }
  override def insert(unsaved: SalesterritoryRow): ConnectionIO[SalesterritoryRow] = {
    delay {
      if (map.contains(unsaved.territoryid))
        sys.error(s"id ${unsaved.territoryid} already exists")
      else
        map.put(unsaved.territoryid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: SalesterritoryRowUnsaved): ConnectionIO[SalesterritoryRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, SalesterritoryRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(territoryid: SalesterritoryId): ConnectionIO[Option[SalesterritoryRow]] = {
    delay(map.get(territoryid))
  }
  override def selectByIds(territoryids: Array[SalesterritoryId]): Stream[ConnectionIO, SalesterritoryRow] = {
    Stream.emits(territoryids.flatMap(map.get).toList)
  }
  override def update(row: SalesterritoryRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.territoryid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.territoryid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: SalesterritoryRow): ConnectionIO[SalesterritoryRow] = {
    delay {
      map.put(unsaved.territoryid, unsaved)
      unsaved
    }
  }
}
