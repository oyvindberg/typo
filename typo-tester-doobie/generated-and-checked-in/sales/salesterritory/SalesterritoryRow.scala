/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesterritory

import adventureworks.TypoLocalDateTime
import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class SalesterritoryRow(
  /** Primary key for SalesTerritory records. */
  territoryid: SalesterritoryId,
  /** Sales territory description */
  name: Name,
  /** ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
      Points to [[person.countryregion.CountryregionRow.countryregioncode]] */
  countryregioncode: CountryregionId,
  /** Geographic area to which the sales territory belong. */
  group: /* max 50 chars */ String,
  /** Sales in the territory year to date. */
  salesytd: BigDecimal,
  /** Sales in the territory the previous year. */
  saleslastyear: BigDecimal,
  /** Business costs in the territory year to date. */
  costytd: BigDecimal,
  /** Business costs in the territory the previous year. */
  costlastyear: BigDecimal,
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object SalesterritoryRow {
  implicit val decoder: Decoder[SalesterritoryRow] = Decoder.forProduct10[SalesterritoryRow, SalesterritoryId, Name, CountryregionId, /* max 50 chars */ String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, UUID, TypoLocalDateTime]("territoryid", "name", "countryregioncode", "group", "salesytd", "saleslastyear", "costytd", "costlastyear", "rowguid", "modifieddate")(SalesterritoryRow.apply)
  implicit val encoder: Encoder[SalesterritoryRow] = Encoder.forProduct10[SalesterritoryRow, SalesterritoryId, Name, CountryregionId, /* max 50 chars */ String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, UUID, TypoLocalDateTime]("territoryid", "name", "countryregioncode", "group", "salesytd", "saleslastyear", "costytd", "costlastyear", "rowguid", "modifieddate")(x => (x.territoryid, x.name, x.countryregioncode, x.group, x.salesytd, x.saleslastyear, x.costytd, x.costlastyear, x.rowguid, x.modifieddate))
  implicit val read: Read[SalesterritoryRow] = new Read[SalesterritoryRow](
    gets = List(
      (Get[SalesterritoryId], Nullability.NoNulls),
      (Get[Name], Nullability.NoNulls),
      (Get[CountryregionId], Nullability.NoNulls),
      (Get[/* max 50 chars */ String], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[UUID], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SalesterritoryRow(
      territoryid = Get[SalesterritoryId].unsafeGetNonNullable(rs, i + 0),
      name = Get[Name].unsafeGetNonNullable(rs, i + 1),
      countryregioncode = Get[CountryregionId].unsafeGetNonNullable(rs, i + 2),
      group = Get[/* max 50 chars */ String].unsafeGetNonNullable(rs, i + 3),
      salesytd = Get[BigDecimal].unsafeGetNonNullable(rs, i + 4),
      saleslastyear = Get[BigDecimal].unsafeGetNonNullable(rs, i + 5),
      costytd = Get[BigDecimal].unsafeGetNonNullable(rs, i + 6),
      costlastyear = Get[BigDecimal].unsafeGetNonNullable(rs, i + 7),
      rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 8),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 9)
    )
  )
}
