/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesreason

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream

object SalesreasonRepoImpl extends SalesreasonRepo {
  override def delete(salesreasonid: SalesreasonId): ConnectionIO[Boolean] = {
    sql"delete from sales.salesreason where salesreasonid = ${salesreasonid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: SalesreasonRow): ConnectionIO[SalesreasonRow] = {
    sql"""insert into sales.salesreason(salesreasonid, "name", reasontype, modifieddate)
          values (${unsaved.salesreasonid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.reasontype}::"public"."Name", ${unsaved.modifieddate}::timestamp)
          returning salesreasonid, "name", reasontype, modifieddate::text
       """.query(SalesreasonRow.read).unique
  }
  override def insert(unsaved: SalesreasonRowUnsaved): ConnectionIO[SalesreasonRow] = {
    val fs = List(
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      Some((Fragment.const(s"reasontype"), fr"""${unsaved.reasontype}::"public"."Name"""")),
      unsaved.salesreasonid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"salesreasonid"), fr"${value: SalesreasonId}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.salesreason default values
            returning salesreasonid, "name", reasontype, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.salesreason(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning salesreasonid, "name", reasontype, modifieddate::text
         """
    }
    q.query(SalesreasonRow.read).unique
  
  }
  override def selectAll: Stream[ConnectionIO, SalesreasonRow] = {
    sql"""select salesreasonid, "name", reasontype, modifieddate::text from sales.salesreason""".query(SalesreasonRow.read).stream
  }
  override def selectById(salesreasonid: SalesreasonId): ConnectionIO[Option[SalesreasonRow]] = {
    sql"""select salesreasonid, "name", reasontype, modifieddate::text from sales.salesreason where salesreasonid = ${salesreasonid}""".query(SalesreasonRow.read).option
  }
  override def selectByIds(salesreasonids: Array[SalesreasonId]): Stream[ConnectionIO, SalesreasonRow] = {
    sql"""select salesreasonid, "name", reasontype, modifieddate::text from sales.salesreason where salesreasonid = ANY(${salesreasonids})""".query(SalesreasonRow.read).stream
  }
  override def update(row: SalesreasonRow): ConnectionIO[Boolean] = {
    val salesreasonid = row.salesreasonid
    sql"""update sales.salesreason
          set "name" = ${row.name}::"public"."Name",
              reasontype = ${row.reasontype}::"public"."Name",
              modifieddate = ${row.modifieddate}::timestamp
          where salesreasonid = ${salesreasonid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: SalesreasonRow): ConnectionIO[SalesreasonRow] = {
    sql"""insert into sales.salesreason(salesreasonid, "name", reasontype, modifieddate)
          values (
            ${unsaved.salesreasonid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.reasontype}::"public"."Name",
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (salesreasonid)
          do update set
            "name" = EXCLUDED."name",
            reasontype = EXCLUDED.reasontype,
            modifieddate = EXCLUDED.modifieddate
          returning salesreasonid, "name", reasontype, modifieddate::text
       """.query(SalesreasonRow.read).unique
  }
}
