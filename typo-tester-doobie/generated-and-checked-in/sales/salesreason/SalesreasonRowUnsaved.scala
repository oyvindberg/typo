/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesreason

import adventureworks.Defaulted
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `sales.salesreason` which has not been persisted yet */
case class SalesreasonRowUnsaved(
  /** Sales reason description. */
  name: Name,
  /** Category the sales reason belongs to. */
  reasontype: Name,
  /** Default: nextval('sales.salesreason_salesreasonid_seq'::regclass)
      Primary key for SalesReason records. */
  salesreasonid: Defaulted[SalesreasonId] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(salesreasonidDefault: => SalesreasonId, modifieddateDefault: => LocalDateTime): SalesreasonRow =
    SalesreasonRow(
      name = name,
      reasontype = reasontype,
      salesreasonid = salesreasonid match {
                        case Defaulted.UseDefault => salesreasonidDefault
                        case Defaulted.Provided(value) => value
                      },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object SalesreasonRowUnsaved {
  implicit val decoder: Decoder[SalesreasonRowUnsaved] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Name]
        reasontype <- c.downField("reasontype").as[Name]
        salesreasonid <- c.downField("salesreasonid").as[Defaulted[SalesreasonId]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield SalesreasonRowUnsaved(name, reasontype, salesreasonid, modifieddate)
  implicit val encoder: Encoder[SalesreasonRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "reasontype" := row.reasontype,
        "salesreasonid" := row.salesreasonid,
        "modifieddate" := row.modifieddate
      )}
}
