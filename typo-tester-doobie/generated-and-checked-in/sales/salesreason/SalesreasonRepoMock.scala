/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesreason

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class SalesreasonRepoMock(toRow: Function1[SalesreasonRowUnsaved, SalesreasonRow],
                          map: scala.collection.mutable.Map[SalesreasonId, SalesreasonRow] = scala.collection.mutable.Map.empty) extends SalesreasonRepo {
  override def delete(salesreasonid: SalesreasonId): ConnectionIO[Boolean] = {
    delay(map.remove(salesreasonid).isDefined)
  }
  override def insert(unsaved: SalesreasonRow): ConnectionIO[SalesreasonRow] = {
    delay {
      if (map.contains(unsaved.salesreasonid))
        sys.error(s"id ${unsaved.salesreasonid} already exists")
      else
        map.put(unsaved.salesreasonid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: SalesreasonRowUnsaved): ConnectionIO[SalesreasonRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, SalesreasonRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[SalesreasonFieldOrIdValue[_]]): Stream[ConnectionIO, SalesreasonRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, SalesreasonFieldValue.salesreasonid(value)) => acc.filter(_.salesreasonid == value)
        case (acc, SalesreasonFieldValue.name(value)) => acc.filter(_.name == value)
        case (acc, SalesreasonFieldValue.reasontype(value)) => acc.filter(_.reasontype == value)
        case (acc, SalesreasonFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(salesreasonid: SalesreasonId): ConnectionIO[Option[SalesreasonRow]] = {
    delay(map.get(salesreasonid))
  }
  override def selectByIds(salesreasonids: Array[SalesreasonId]): Stream[ConnectionIO, SalesreasonRow] = {
    Stream.emits(salesreasonids.flatMap(map.get).toList)
  }
  override def update(row: SalesreasonRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.salesreasonid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.salesreasonid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(salesreasonid: SalesreasonId, fieldValues: List[SalesreasonFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(salesreasonid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, SalesreasonFieldValue.name(value)) => acc.copy(name = value)
            case (acc, SalesreasonFieldValue.reasontype(value)) => acc.copy(reasontype = value)
            case (acc, SalesreasonFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(salesreasonid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: SalesreasonRow): ConnectionIO[SalesreasonRow] = {
    delay {
      map.put(unsaved.salesreasonid, unsaved)
      unsaved
    }
  }
}
