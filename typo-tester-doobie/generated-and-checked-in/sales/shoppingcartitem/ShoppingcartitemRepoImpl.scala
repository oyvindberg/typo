/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package shoppingcartitem

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream

object ShoppingcartitemRepoImpl extends ShoppingcartitemRepo {
  override def delete(shoppingcartitemid: ShoppingcartitemId): ConnectionIO[Boolean] = {
    sql"delete from sales.shoppingcartitem where shoppingcartitemid = ${shoppingcartitemid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: ShoppingcartitemRow): ConnectionIO[ShoppingcartitemRow] = {
    sql"""insert into sales.shoppingcartitem(shoppingcartitemid, shoppingcartid, quantity, productid, datecreated, modifieddate)
          values (${unsaved.shoppingcartitemid}::int4, ${unsaved.shoppingcartid}, ${unsaved.quantity}::int4, ${unsaved.productid}::int4, ${unsaved.datecreated}::timestamp, ${unsaved.modifieddate}::timestamp)
          returning shoppingcartitemid, shoppingcartid, quantity, productid, datecreated::text, modifieddate::text
       """.query[ShoppingcartitemRow].unique
  }
  override def insert(unsaved: ShoppingcartitemRowUnsaved): ConnectionIO[ShoppingcartitemRow] = {
    val fs = List(
      Some((Fragment.const(s"shoppingcartid"), fr"${unsaved.shoppingcartid}")),
      Some((Fragment.const(s"productid"), fr"${unsaved.productid}::int4")),
      unsaved.shoppingcartitemid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"shoppingcartitemid"), fr"${value: ShoppingcartitemId}::int4"))
      },
      unsaved.quantity match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"quantity"), fr"${value: Int}::int4"))
      },
      unsaved.datecreated match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"datecreated"), fr"${value: TypoLocalDateTime}::timestamp"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.shoppingcartitem default values
            returning shoppingcartitemid, shoppingcartid, quantity, productid, datecreated::text, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.shoppingcartitem(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning shoppingcartitemid, shoppingcartid, quantity, productid, datecreated::text, modifieddate::text
         """
    }
    q.query[ShoppingcartitemRow].unique
  
  }
  override def selectAll: Stream[ConnectionIO, ShoppingcartitemRow] = {
    sql"select shoppingcartitemid, shoppingcartid, quantity, productid, datecreated::text, modifieddate::text from sales.shoppingcartitem".query[ShoppingcartitemRow].stream
  }
  override def selectById(shoppingcartitemid: ShoppingcartitemId): ConnectionIO[Option[ShoppingcartitemRow]] = {
    sql"select shoppingcartitemid, shoppingcartid, quantity, productid, datecreated::text, modifieddate::text from sales.shoppingcartitem where shoppingcartitemid = ${shoppingcartitemid}".query[ShoppingcartitemRow].option
  }
  override def selectByIds(shoppingcartitemids: Array[ShoppingcartitemId]): Stream[ConnectionIO, ShoppingcartitemRow] = {
    sql"select shoppingcartitemid, shoppingcartid, quantity, productid, datecreated::text, modifieddate::text from sales.shoppingcartitem where shoppingcartitemid = ANY(${shoppingcartitemids})".query[ShoppingcartitemRow].stream
  }
  override def update(row: ShoppingcartitemRow): ConnectionIO[Boolean] = {
    val shoppingcartitemid = row.shoppingcartitemid
    sql"""update sales.shoppingcartitem
          set shoppingcartid = ${row.shoppingcartid},
              quantity = ${row.quantity}::int4,
              productid = ${row.productid}::int4,
              datecreated = ${row.datecreated}::timestamp,
              modifieddate = ${row.modifieddate}::timestamp
          where shoppingcartitemid = ${shoppingcartitemid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: ShoppingcartitemRow): ConnectionIO[ShoppingcartitemRow] = {
    sql"""insert into sales.shoppingcartitem(shoppingcartitemid, shoppingcartid, quantity, productid, datecreated, modifieddate)
          values (
            ${unsaved.shoppingcartitemid}::int4,
            ${unsaved.shoppingcartid},
            ${unsaved.quantity}::int4,
            ${unsaved.productid}::int4,
            ${unsaved.datecreated}::timestamp,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (shoppingcartitemid)
          do update set
            shoppingcartid = EXCLUDED.shoppingcartid,
            quantity = EXCLUDED.quantity,
            productid = EXCLUDED.productid,
            datecreated = EXCLUDED.datecreated,
            modifieddate = EXCLUDED.modifieddate
          returning shoppingcartitemid, shoppingcartid, quantity, productid, datecreated::text, modifieddate::text
       """.query[ShoppingcartitemRow].unique
  }
}
