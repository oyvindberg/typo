/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package vstorewithaddresses

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class VstorewithaddressesViewRow(
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[person.stateprovince.StateprovinceRow.name]] */
  name: Option[Name],
  addresstype: Option[Name],
  /** Points to [[person.address.AddressRow.addressline1]] */
  addressline1: Option[/* max 60 chars */ String],
  /** Points to [[person.address.AddressRow.addressline2]] */
  addressline2: Option[/* max 60 chars */ String],
  /** Points to [[person.address.AddressRow.city]] */
  city: Option[/* max 30 chars */ String],
  stateprovincename: Option[Name],
  /** Points to [[person.address.AddressRow.postalcode]] */
  postalcode: Option[/* max 15 chars */ String],
  countryregionname: Option[Name]
)

object VstorewithaddressesViewRow {
  implicit val decoder: Decoder[VstorewithaddressesViewRow] = Decoder.forProduct9[VstorewithaddressesViewRow, Option[BusinessentityId], Option[Name], Option[Name], Option[/* max 60 chars */ String], Option[/* max 60 chars */ String], Option[/* max 30 chars */ String], Option[Name], Option[/* max 15 chars */ String], Option[Name]]("businessentityid", "name", "addresstype", "addressline1", "addressline2", "city", "stateprovincename", "postalcode", "countryregionname")(VstorewithaddressesViewRow.apply)
  implicit val encoder: Encoder[VstorewithaddressesViewRow] = Encoder.forProduct9[VstorewithaddressesViewRow, Option[BusinessentityId], Option[Name], Option[Name], Option[/* max 60 chars */ String], Option[/* max 60 chars */ String], Option[/* max 30 chars */ String], Option[Name], Option[/* max 15 chars */ String], Option[Name]]("businessentityid", "name", "addresstype", "addressline1", "addressline2", "city", "stateprovincename", "postalcode", "countryregionname")(x => (x.businessentityid, x.name, x.addresstype, x.addressline1, x.addressline2, x.city, x.stateprovincename, x.postalcode, x.countryregionname))
  implicit val read: Read[VstorewithaddressesViewRow] = new Read[VstorewithaddressesViewRow](
    gets = List(
      (Get[BusinessentityId], Nullability.Nullable),
      (Get[Name], Nullability.Nullable),
      (Get[Name], Nullability.Nullable),
      (Get[/* max 60 chars */ String], Nullability.Nullable),
      (Get[/* max 60 chars */ String], Nullability.Nullable),
      (Get[/* max 30 chars */ String], Nullability.Nullable),
      (Get[Name], Nullability.Nullable),
      (Get[/* max 15 chars */ String], Nullability.Nullable),
      (Get[Name], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => VstorewithaddressesViewRow(
      businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 0),
      name = Get[Name].unsafeGetNullable(rs, i + 1),
      addresstype = Get[Name].unsafeGetNullable(rs, i + 2),
      addressline1 = Get[/* max 60 chars */ String].unsafeGetNullable(rs, i + 3),
      addressline2 = Get[/* max 60 chars */ String].unsafeGetNullable(rs, i + 4),
      city = Get[/* max 30 chars */ String].unsafeGetNullable(rs, i + 5),
      stateprovincename = Get[Name].unsafeGetNullable(rs, i + 6),
      postalcode = Get[/* max 15 chars */ String].unsafeGetNullable(rs, i + 7),
      countryregionname = Get[Name].unsafeGetNullable(rs, i + 8)
    )
  )
}
