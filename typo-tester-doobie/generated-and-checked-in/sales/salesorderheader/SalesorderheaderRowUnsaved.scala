/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheader

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.person.address.AddressId
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.OrderNumber
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.sales.creditcard.CreditcardId
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.salesterritory.SalesterritoryId
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.util.UUID
import scala.util.Try

/** This class corresponds to a row in table `sales.salesorderheader` which has not been persisted yet */
case class SalesorderheaderRowUnsaved(
  /** Date the order is due to the customer. */
  duedate: TypoLocalDateTime,
  /** Date the order was shipped to the customer. */
  shipdate: Option[TypoLocalDateTime],
  /** Customer purchase order number reference. */
  purchaseordernumber: Option[OrderNumber],
  /** Financial accounting number reference. */
  accountnumber: Option[AccountNumber],
  /** Customer identification number. Foreign key to Customer.BusinessEntityID.
      Points to [[customer.CustomerRow.customerid]] */
  customerid: CustomerId,
  /** Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
      Points to [[salesperson.SalespersonRow.businessentityid]] */
  salespersonid: Option[BusinessentityId],
  /** Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Customer billing address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  billtoaddressid: AddressId,
  /** Customer shipping address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  shiptoaddressid: AddressId,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
      Points to [[purchasing.shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: ShipmethodId,
  /** Credit card identification number. Foreign key to CreditCard.CreditCardID.
      Points to [[creditcard.CreditcardRow.creditcardid]] */
  creditcardid: Option[CreditcardId],
  /** Approval code provided by the credit card company. */
  creditcardapprovalcode: Option[/* max 15 chars */ String],
  /** Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
      Points to [[currencyrate.CurrencyrateRow.currencyrateid]] */
  currencyrateid: Option[CurrencyrateId],
  /** Total due from customer. Computed as Subtotal + TaxAmt + Freight. */
  totaldue: Option[BigDecimal],
  /** Sales representative comments. */
  comment: Option[/* max 128 chars */ String],
  /** Default: nextval('sales.salesorderheader_salesorderid_seq'::regclass)
      Primary key. */
  salesorderid: Defaulted[SalesorderheaderId] = Defaulted.UseDefault,
  /** Default: 0
      Incremental number to track changes to the sales order over time. */
  revisionnumber: Defaulted[Int] = Defaulted.UseDefault,
  /** Default: now()
      Dates the sales order was created. */
  orderdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault,
  /** Default: 1
      Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled */
  status: Defaulted[Int] = Defaulted.UseDefault,
  /** Default: true
      0 = Order placed by sales person. 1 = Order placed online by customer. */
  onlineorderflag: Defaulted[Flag] = Defaulted.UseDefault,
  /** Default: 0.00
      Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID. */
  subtotal: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: 0.00
      Tax amount. */
  taxamt: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: 0.00
      Shipping cost. */
  freight: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault
) {
  def toRow(salesorderidDefault: => SalesorderheaderId, revisionnumberDefault: => Int, orderdateDefault: => TypoLocalDateTime, statusDefault: => Int, onlineorderflagDefault: => Flag, subtotalDefault: => BigDecimal, taxamtDefault: => BigDecimal, freightDefault: => BigDecimal, rowguidDefault: => UUID, modifieddateDefault: => TypoLocalDateTime): SalesorderheaderRow =
    SalesorderheaderRow(
      duedate = duedate,
      shipdate = shipdate,
      purchaseordernumber = purchaseordernumber,
      accountnumber = accountnumber,
      customerid = customerid,
      salespersonid = salespersonid,
      territoryid = territoryid,
      billtoaddressid = billtoaddressid,
      shiptoaddressid = shiptoaddressid,
      shipmethodid = shipmethodid,
      creditcardid = creditcardid,
      creditcardapprovalcode = creditcardapprovalcode,
      currencyrateid = currencyrateid,
      totaldue = totaldue,
      comment = comment,
      salesorderid = salesorderid match {
                       case Defaulted.UseDefault => salesorderidDefault
                       case Defaulted.Provided(value) => value
                     },
      revisionnumber = revisionnumber match {
                         case Defaulted.UseDefault => revisionnumberDefault
                         case Defaulted.Provided(value) => value
                       },
      orderdate = orderdate match {
                    case Defaulted.UseDefault => orderdateDefault
                    case Defaulted.Provided(value) => value
                  },
      status = status match {
                 case Defaulted.UseDefault => statusDefault
                 case Defaulted.Provided(value) => value
               },
      onlineorderflag = onlineorderflag match {
                          case Defaulted.UseDefault => onlineorderflagDefault
                          case Defaulted.Provided(value) => value
                        },
      subtotal = subtotal match {
                   case Defaulted.UseDefault => subtotalDefault
                   case Defaulted.Provided(value) => value
                 },
      taxamt = taxamt match {
                 case Defaulted.UseDefault => taxamtDefault
                 case Defaulted.Provided(value) => value
               },
      freight = freight match {
                  case Defaulted.UseDefault => freightDefault
                  case Defaulted.Provided(value) => value
                },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object SalesorderheaderRowUnsaved {
  implicit val decoder: Decoder[SalesorderheaderRowUnsaved] = Decoder.instanceTry[SalesorderheaderRowUnsaved]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      SalesorderheaderRowUnsaved(
        duedate = orThrow(c.get("duedate")(Decoder[TypoLocalDateTime])),
        shipdate = orThrow(c.get("shipdate")(Decoder[Option[TypoLocalDateTime]])),
        purchaseordernumber = orThrow(c.get("purchaseordernumber")(Decoder[Option[OrderNumber]])),
        accountnumber = orThrow(c.get("accountnumber")(Decoder[Option[AccountNumber]])),
        customerid = orThrow(c.get("customerid")(Decoder[CustomerId])),
        salespersonid = orThrow(c.get("salespersonid")(Decoder[Option[BusinessentityId]])),
        territoryid = orThrow(c.get("territoryid")(Decoder[Option[SalesterritoryId]])),
        billtoaddressid = orThrow(c.get("billtoaddressid")(Decoder[AddressId])),
        shiptoaddressid = orThrow(c.get("shiptoaddressid")(Decoder[AddressId])),
        shipmethodid = orThrow(c.get("shipmethodid")(Decoder[ShipmethodId])),
        creditcardid = orThrow(c.get("creditcardid")(Decoder[Option[CreditcardId]])),
        creditcardapprovalcode = orThrow(c.get("creditcardapprovalcode")(Decoder[Option[/* max 15 chars */ String]])),
        currencyrateid = orThrow(c.get("currencyrateid")(Decoder[Option[CurrencyrateId]])),
        totaldue = orThrow(c.get("totaldue")(Decoder[Option[BigDecimal]])),
        comment = orThrow(c.get("comment")(Decoder[Option[/* max 128 chars */ String]])),
        salesorderid = orThrow(c.get("salesorderid")(Decoder[Defaulted[SalesorderheaderId]])),
        revisionnumber = orThrow(c.get("revisionnumber")(Decoder[Defaulted[Int]])),
        orderdate = orThrow(c.get("orderdate")(Decoder[Defaulted[TypoLocalDateTime]])),
        status = orThrow(c.get("status")(Decoder[Defaulted[Int]])),
        onlineorderflag = orThrow(c.get("onlineorderflag")(Decoder[Defaulted[Flag]])),
        subtotal = orThrow(c.get("subtotal")(Decoder[Defaulted[BigDecimal]])),
        taxamt = orThrow(c.get("taxamt")(Decoder[Defaulted[BigDecimal]])),
        freight = orThrow(c.get("freight")(Decoder[Defaulted[BigDecimal]])),
        rowguid = orThrow(c.get("rowguid")(Decoder[Defaulted[UUID]])),
        modifieddate = orThrow(c.get("modifieddate")(Decoder[Defaulted[TypoLocalDateTime]]))
      )
    }
  )
  implicit val encoder: Encoder[SalesorderheaderRowUnsaved] = Encoder[SalesorderheaderRowUnsaved](row =>
    Json.obj(
      "duedate" -> Encoder[TypoLocalDateTime].apply(row.duedate),
      "shipdate" -> Encoder[Option[TypoLocalDateTime]].apply(row.shipdate),
      "purchaseordernumber" -> Encoder[Option[OrderNumber]].apply(row.purchaseordernumber),
      "accountnumber" -> Encoder[Option[AccountNumber]].apply(row.accountnumber),
      "customerid" -> Encoder[CustomerId].apply(row.customerid),
      "salespersonid" -> Encoder[Option[BusinessentityId]].apply(row.salespersonid),
      "territoryid" -> Encoder[Option[SalesterritoryId]].apply(row.territoryid),
      "billtoaddressid" -> Encoder[AddressId].apply(row.billtoaddressid),
      "shiptoaddressid" -> Encoder[AddressId].apply(row.shiptoaddressid),
      "shipmethodid" -> Encoder[ShipmethodId].apply(row.shipmethodid),
      "creditcardid" -> Encoder[Option[CreditcardId]].apply(row.creditcardid),
      "creditcardapprovalcode" -> Encoder[Option[/* max 15 chars */ String]].apply(row.creditcardapprovalcode),
      "currencyrateid" -> Encoder[Option[CurrencyrateId]].apply(row.currencyrateid),
      "totaldue" -> Encoder[Option[BigDecimal]].apply(row.totaldue),
      "comment" -> Encoder[Option[/* max 128 chars */ String]].apply(row.comment),
      "salesorderid" -> Encoder[Defaulted[SalesorderheaderId]].apply(row.salesorderid),
      "revisionnumber" -> Encoder[Defaulted[Int]].apply(row.revisionnumber),
      "orderdate" -> Encoder[Defaulted[TypoLocalDateTime]].apply(row.orderdate),
      "status" -> Encoder[Defaulted[Int]].apply(row.status),
      "onlineorderflag" -> Encoder[Defaulted[Flag]].apply(row.onlineorderflag),
      "subtotal" -> Encoder[Defaulted[BigDecimal]].apply(row.subtotal),
      "taxamt" -> Encoder[Defaulted[BigDecimal]].apply(row.taxamt),
      "freight" -> Encoder[Defaulted[BigDecimal]].apply(row.freight),
      "rowguid" -> Encoder[Defaulted[UUID]].apply(row.rowguid),
      "modifieddate" -> Encoder[Defaulted[TypoLocalDateTime]].apply(row.modifieddate)
    )
  )
}
