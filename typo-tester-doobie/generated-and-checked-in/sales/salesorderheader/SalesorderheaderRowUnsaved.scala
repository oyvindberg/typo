/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheader

import adventureworks.Defaulted
import adventureworks.person.address.AddressId
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.OrderNumber
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.sales.creditcard.CreditcardId
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.salesterritory.SalesterritoryId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

/** This class corresponds to a row in table `sales.salesorderheader` which has not been persisted yet */
case class SalesorderheaderRowUnsaved(
  /** Date the order is due to the customer. */
  duedate: LocalDateTime,
  /** Date the order was shipped to the customer. */
  shipdate: Option[LocalDateTime],
  /** Customer purchase order number reference. */
  purchaseordernumber: Option[OrderNumber],
  /** Financial accounting number reference. */
  accountnumber: Option[AccountNumber],
  /** Customer identification number. Foreign key to Customer.BusinessEntityID.
      Points to [[customer.CustomerRow.customerid]] */
  customerid: CustomerId,
  /** Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
      Points to [[salesperson.SalespersonRow.businessentityid]] */
  salespersonid: Option[BusinessentityId],
  /** Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Customer billing address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  billtoaddressid: AddressId,
  /** Customer shipping address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  shiptoaddressid: AddressId,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
      Points to [[purchasing.shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: ShipmethodId,
  /** Credit card identification number. Foreign key to CreditCard.CreditCardID.
      Points to [[creditcard.CreditcardRow.creditcardid]] */
  creditcardid: Option[CreditcardId],
  /** Approval code provided by the credit card company. */
  creditcardapprovalcode: Option[String],
  /** Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
      Points to [[currencyrate.CurrencyrateRow.currencyrateid]] */
  currencyrateid: Option[CurrencyrateId],
  /** Total due from customer. Computed as Subtotal + TaxAmt + Freight. */
  totaldue: Option[BigDecimal],
  /** Sales representative comments. */
  comment: Option[String],
  /** Default: nextval('sales.salesorderheader_salesorderid_seq'::regclass)
      Primary key. */
  salesorderid: Defaulted[SalesorderheaderId] = Defaulted.UseDefault,
  /** Default: 0
      Incremental number to track changes to the sales order over time. */
  revisionnumber: Defaulted[Int] = Defaulted.UseDefault,
  /** Default: now()
      Dates the sales order was created. */
  orderdate: Defaulted[LocalDateTime] = Defaulted.UseDefault,
  /** Default: 1
      Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled */
  status: Defaulted[Int] = Defaulted.UseDefault,
  /** Default: true
      0 = Order placed by sales person. 1 = Order placed online by customer. */
  onlineorderflag: Defaulted[Flag] = Defaulted.UseDefault,
  /** Default: 0.00
      Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID. */
  subtotal: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: 0.00
      Tax amount. */
  taxamt: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: 0.00
      Shipping cost. */
  freight: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(salesorderidDefault: => SalesorderheaderId, revisionnumberDefault: => Int, orderdateDefault: => LocalDateTime, statusDefault: => Int, onlineorderflagDefault: => Flag, subtotalDefault: => BigDecimal, taxamtDefault: => BigDecimal, freightDefault: => BigDecimal, rowguidDefault: => UUID, modifieddateDefault: => LocalDateTime): SalesorderheaderRow =
    SalesorderheaderRow(
      duedate = duedate,
      shipdate = shipdate,
      purchaseordernumber = purchaseordernumber,
      accountnumber = accountnumber,
      customerid = customerid,
      salespersonid = salespersonid,
      territoryid = territoryid,
      billtoaddressid = billtoaddressid,
      shiptoaddressid = shiptoaddressid,
      shipmethodid = shipmethodid,
      creditcardid = creditcardid,
      creditcardapprovalcode = creditcardapprovalcode,
      currencyrateid = currencyrateid,
      totaldue = totaldue,
      comment = comment,
      salesorderid = salesorderid match {
                       case Defaulted.UseDefault => salesorderidDefault
                       case Defaulted.Provided(value) => value
                     },
      revisionnumber = revisionnumber match {
                         case Defaulted.UseDefault => revisionnumberDefault
                         case Defaulted.Provided(value) => value
                       },
      orderdate = orderdate match {
                    case Defaulted.UseDefault => orderdateDefault
                    case Defaulted.Provided(value) => value
                  },
      status = status match {
                 case Defaulted.UseDefault => statusDefault
                 case Defaulted.Provided(value) => value
               },
      onlineorderflag = onlineorderflag match {
                          case Defaulted.UseDefault => onlineorderflagDefault
                          case Defaulted.Provided(value) => value
                        },
      subtotal = subtotal match {
                   case Defaulted.UseDefault => subtotalDefault
                   case Defaulted.Provided(value) => value
                 },
      taxamt = taxamt match {
                 case Defaulted.UseDefault => taxamtDefault
                 case Defaulted.Provided(value) => value
               },
      freight = freight match {
                  case Defaulted.UseDefault => freightDefault
                  case Defaulted.Provided(value) => value
                },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object SalesorderheaderRowUnsaved {
  implicit val decoder: Decoder[SalesorderheaderRowUnsaved] =
    (c: HCursor) =>
      for {
        duedate <- c.downField("duedate").as[LocalDateTime]
        shipdate <- c.downField("shipdate").as[Option[LocalDateTime]]
        purchaseordernumber <- c.downField("purchaseordernumber").as[Option[OrderNumber]]
        accountnumber <- c.downField("accountnumber").as[Option[AccountNumber]]
        customerid <- c.downField("customerid").as[CustomerId]
        salespersonid <- c.downField("salespersonid").as[Option[BusinessentityId]]
        territoryid <- c.downField("territoryid").as[Option[SalesterritoryId]]
        billtoaddressid <- c.downField("billtoaddressid").as[AddressId]
        shiptoaddressid <- c.downField("shiptoaddressid").as[AddressId]
        shipmethodid <- c.downField("shipmethodid").as[ShipmethodId]
        creditcardid <- c.downField("creditcardid").as[Option[CreditcardId]]
        creditcardapprovalcode <- c.downField("creditcardapprovalcode").as[Option[String]]
        currencyrateid <- c.downField("currencyrateid").as[Option[CurrencyrateId]]
        totaldue <- c.downField("totaldue").as[Option[BigDecimal]]
        comment <- c.downField("comment").as[Option[String]]
        salesorderid <- c.downField("salesorderid").as[Defaulted[SalesorderheaderId]]
        revisionnumber <- c.downField("revisionnumber").as[Defaulted[Int]]
        orderdate <- c.downField("orderdate").as[Defaulted[LocalDateTime]]
        status <- c.downField("status").as[Defaulted[Int]]
        onlineorderflag <- c.downField("onlineorderflag").as[Defaulted[Flag]]
        subtotal <- c.downField("subtotal").as[Defaulted[BigDecimal]]
        taxamt <- c.downField("taxamt").as[Defaulted[BigDecimal]]
        freight <- c.downField("freight").as[Defaulted[BigDecimal]]
        rowguid <- c.downField("rowguid").as[Defaulted[UUID]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield SalesorderheaderRowUnsaved(duedate, shipdate, purchaseordernumber, accountnumber, customerid, salespersonid, territoryid, billtoaddressid, shiptoaddressid, shipmethodid, creditcardid, creditcardapprovalcode, currencyrateid, totaldue, comment, salesorderid, revisionnumber, orderdate, status, onlineorderflag, subtotal, taxamt, freight, rowguid, modifieddate)
  implicit val encoder: Encoder[SalesorderheaderRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "duedate" := row.duedate,
        "shipdate" := row.shipdate,
        "purchaseordernumber" := row.purchaseordernumber,
        "accountnumber" := row.accountnumber,
        "customerid" := row.customerid,
        "salespersonid" := row.salespersonid,
        "territoryid" := row.territoryid,
        "billtoaddressid" := row.billtoaddressid,
        "shiptoaddressid" := row.shiptoaddressid,
        "shipmethodid" := row.shipmethodid,
        "creditcardid" := row.creditcardid,
        "creditcardapprovalcode" := row.creditcardapprovalcode,
        "currencyrateid" := row.currencyrateid,
        "totaldue" := row.totaldue,
        "comment" := row.comment,
        "salesorderid" := row.salesorderid,
        "revisionnumber" := row.revisionnumber,
        "orderdate" := row.orderdate,
        "status" := row.status,
        "onlineorderflag" := row.onlineorderflag,
        "subtotal" := row.subtotal,
        "taxamt" := row.taxamt,
        "freight" := row.freight,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
