/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheader

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class SalesorderheaderRepoMock(toRow: Function1[SalesorderheaderRowUnsaved, SalesorderheaderRow],
                               map: scala.collection.mutable.Map[SalesorderheaderId, SalesorderheaderRow] = scala.collection.mutable.Map.empty) extends SalesorderheaderRepo {
  override def delete(salesorderid: SalesorderheaderId): ConnectionIO[Boolean] = {
    delay(map.remove(salesorderid).isDefined)
  }
  override def insert(unsaved: SalesorderheaderRow): ConnectionIO[SalesorderheaderRow] = {
    delay {
      if (map.contains(unsaved.salesorderid))
        sys.error(s"id ${unsaved.salesorderid} already exists")
      else
        map.put(unsaved.salesorderid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: SalesorderheaderRowUnsaved): ConnectionIO[SalesorderheaderRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, SalesorderheaderRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(salesorderid: SalesorderheaderId): ConnectionIO[Option[SalesorderheaderRow]] = {
    delay(map.get(salesorderid))
  }
  override def selectByIds(salesorderids: Array[SalesorderheaderId]): Stream[ConnectionIO, SalesorderheaderRow] = {
    Stream.emits(salesorderids.flatMap(map.get).toList)
  }
  override def update(row: SalesorderheaderRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.salesorderid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.salesorderid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: SalesorderheaderRow): ConnectionIO[SalesorderheaderRow] = {
    delay {
      map.put(unsaved.salesorderid, unsaved)
      unsaved
    }
  }
}
