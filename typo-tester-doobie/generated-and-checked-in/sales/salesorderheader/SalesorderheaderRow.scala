/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderheader

import adventureworks.TypoLocalDateTime
import adventureworks.person.address.AddressId
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.OrderNumber
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.sales.creditcard.CreditcardId
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.util.UUID
import scala.util.Try

case class SalesorderheaderRow(
  /** Primary key. */
  salesorderid: SalesorderheaderId,
  /** Incremental number to track changes to the sales order over time. */
  revisionnumber: Int,
  /** Dates the sales order was created. */
  orderdate: TypoLocalDateTime,
  /** Date the order is due to the customer. */
  duedate: TypoLocalDateTime,
  /** Date the order was shipped to the customer. */
  shipdate: Option[TypoLocalDateTime],
  /** Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled */
  status: Int,
  /** 0 = Order placed by sales person. 1 = Order placed online by customer. */
  onlineorderflag: Flag,
  /** Customer purchase order number reference. */
  purchaseordernumber: Option[OrderNumber],
  /** Financial accounting number reference. */
  accountnumber: Option[AccountNumber],
  /** Customer identification number. Foreign key to Customer.BusinessEntityID.
      Points to [[customer.CustomerRow.customerid]] */
  customerid: CustomerId,
  /** Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
      Points to [[salesperson.SalespersonRow.businessentityid]] */
  salespersonid: Option[BusinessentityId],
  /** Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Customer billing address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  billtoaddressid: AddressId,
  /** Customer shipping address. Foreign key to Address.AddressID.
      Points to [[person.address.AddressRow.addressid]] */
  shiptoaddressid: AddressId,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
      Points to [[purchasing.shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: ShipmethodId,
  /** Credit card identification number. Foreign key to CreditCard.CreditCardID.
      Points to [[creditcard.CreditcardRow.creditcardid]] */
  creditcardid: Option[CreditcardId],
  /** Approval code provided by the credit card company. */
  creditcardapprovalcode: Option[/* max 15 chars */ String],
  /** Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
      Points to [[currencyrate.CurrencyrateRow.currencyrateid]] */
  currencyrateid: Option[CurrencyrateId],
  /** Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID. */
  subtotal: BigDecimal,
  /** Tax amount. */
  taxamt: BigDecimal,
  /** Shipping cost. */
  freight: BigDecimal,
  /** Total due from customer. Computed as Subtotal + TaxAmt + Freight. */
  totaldue: Option[BigDecimal],
  /** Sales representative comments. */
  comment: Option[/* max 128 chars */ String],
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object SalesorderheaderRow {
  implicit val decoder: Decoder[SalesorderheaderRow] = Decoder.instanceTry[SalesorderheaderRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      SalesorderheaderRow(
        salesorderid = orThrow(c.get("salesorderid")(SalesorderheaderId.decoder)),
        revisionnumber = orThrow(c.get("revisionnumber")(Decoder.decodeInt)),
        orderdate = orThrow(c.get("orderdate")(TypoLocalDateTime.decoder)),
        duedate = orThrow(c.get("duedate")(TypoLocalDateTime.decoder)),
        shipdate = orThrow(c.get("shipdate")(Decoder.decodeOption(TypoLocalDateTime.decoder))),
        status = orThrow(c.get("status")(Decoder.decodeInt)),
        onlineorderflag = orThrow(c.get("onlineorderflag")(Flag.decoder)),
        purchaseordernumber = orThrow(c.get("purchaseordernumber")(Decoder.decodeOption(OrderNumber.decoder))),
        accountnumber = orThrow(c.get("accountnumber")(Decoder.decodeOption(AccountNumber.decoder))),
        customerid = orThrow(c.get("customerid")(CustomerId.decoder)),
        salespersonid = orThrow(c.get("salespersonid")(Decoder.decodeOption(BusinessentityId.decoder))),
        territoryid = orThrow(c.get("territoryid")(Decoder.decodeOption(SalesterritoryId.decoder))),
        billtoaddressid = orThrow(c.get("billtoaddressid")(AddressId.decoder)),
        shiptoaddressid = orThrow(c.get("shiptoaddressid")(AddressId.decoder)),
        shipmethodid = orThrow(c.get("shipmethodid")(ShipmethodId.decoder)),
        creditcardid = orThrow(c.get("creditcardid")(Decoder.decodeOption(CreditcardId.decoder))),
        creditcardapprovalcode = orThrow(c.get("creditcardapprovalcode")(Decoder.decodeOption(Decoder.decodeString))),
        currencyrateid = orThrow(c.get("currencyrateid")(Decoder.decodeOption(CurrencyrateId.decoder))),
        subtotal = orThrow(c.get("subtotal")(Decoder.decodeBigDecimal)),
        taxamt = orThrow(c.get("taxamt")(Decoder.decodeBigDecimal)),
        freight = orThrow(c.get("freight")(Decoder.decodeBigDecimal)),
        totaldue = orThrow(c.get("totaldue")(Decoder.decodeOption(Decoder.decodeBigDecimal))),
        comment = orThrow(c.get("comment")(Decoder.decodeOption(Decoder.decodeString))),
        rowguid = orThrow(c.get("rowguid")(Decoder.decodeUUID)),
        modifieddate = orThrow(c.get("modifieddate")(TypoLocalDateTime.decoder))
      )
    }
  )
  implicit val encoder: Encoder[SalesorderheaderRow] = Encoder[SalesorderheaderRow](row =>
    Json.obj(
      "salesorderid" -> SalesorderheaderId.encoder.apply(row.salesorderid),
      "revisionnumber" -> Encoder.encodeInt.apply(row.revisionnumber),
      "orderdate" -> TypoLocalDateTime.encoder.apply(row.orderdate),
      "duedate" -> TypoLocalDateTime.encoder.apply(row.duedate),
      "shipdate" -> Encoder.encodeOption(TypoLocalDateTime.encoder).apply(row.shipdate),
      "status" -> Encoder.encodeInt.apply(row.status),
      "onlineorderflag" -> Flag.encoder.apply(row.onlineorderflag),
      "purchaseordernumber" -> Encoder.encodeOption(OrderNumber.encoder).apply(row.purchaseordernumber),
      "accountnumber" -> Encoder.encodeOption(AccountNumber.encoder).apply(row.accountnumber),
      "customerid" -> CustomerId.encoder.apply(row.customerid),
      "salespersonid" -> Encoder.encodeOption(BusinessentityId.encoder).apply(row.salespersonid),
      "territoryid" -> Encoder.encodeOption(SalesterritoryId.encoder).apply(row.territoryid),
      "billtoaddressid" -> AddressId.encoder.apply(row.billtoaddressid),
      "shiptoaddressid" -> AddressId.encoder.apply(row.shiptoaddressid),
      "shipmethodid" -> ShipmethodId.encoder.apply(row.shipmethodid),
      "creditcardid" -> Encoder.encodeOption(CreditcardId.encoder).apply(row.creditcardid),
      "creditcardapprovalcode" -> Encoder.encodeOption(Encoder.encodeString).apply(row.creditcardapprovalcode),
      "currencyrateid" -> Encoder.encodeOption(CurrencyrateId.encoder).apply(row.currencyrateid),
      "subtotal" -> Encoder.encodeBigDecimal.apply(row.subtotal),
      "taxamt" -> Encoder.encodeBigDecimal.apply(row.taxamt),
      "freight" -> Encoder.encodeBigDecimal.apply(row.freight),
      "totaldue" -> Encoder.encodeOption(Encoder.encodeBigDecimal).apply(row.totaldue),
      "comment" -> Encoder.encodeOption(Encoder.encodeString).apply(row.comment),
      "rowguid" -> Encoder.encodeUUID.apply(row.rowguid),
      "modifieddate" -> TypoLocalDateTime.encoder.apply(row.modifieddate)
    )
  )
  implicit val read: Read[SalesorderheaderRow] = new Read[SalesorderheaderRow](
    gets = List(
      (SalesorderheaderId.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (TypoLocalDateTime.get, Nullability.NoNulls),
      (TypoLocalDateTime.get, Nullability.NoNulls),
      (TypoLocalDateTime.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (Flag.get, Nullability.NoNulls),
      (OrderNumber.get, Nullability.Nullable),
      (AccountNumber.get, Nullability.Nullable),
      (CustomerId.get, Nullability.NoNulls),
      (BusinessentityId.get, Nullability.Nullable),
      (SalesterritoryId.get, Nullability.Nullable),
      (AddressId.get, Nullability.NoNulls),
      (AddressId.get, Nullability.NoNulls),
      (ShipmethodId.get, Nullability.NoNulls),
      (CreditcardId.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (CurrencyrateId.get, Nullability.Nullable),
      (Meta.ScalaBigDecimalMeta.get, Nullability.NoNulls),
      (Meta.ScalaBigDecimalMeta.get, Nullability.NoNulls),
      (Meta.ScalaBigDecimalMeta.get, Nullability.NoNulls),
      (Meta.ScalaBigDecimalMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (adventureworks.UUIDMeta.get, Nullability.NoNulls),
      (TypoLocalDateTime.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SalesorderheaderRow(
      salesorderid = SalesorderheaderId.get.unsafeGetNonNullable(rs, i + 0),
      revisionnumber = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 1),
      orderdate = TypoLocalDateTime.get.unsafeGetNonNullable(rs, i + 2),
      duedate = TypoLocalDateTime.get.unsafeGetNonNullable(rs, i + 3),
      shipdate = TypoLocalDateTime.get.unsafeGetNullable(rs, i + 4),
      status = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 5),
      onlineorderflag = Flag.get.unsafeGetNonNullable(rs, i + 6),
      purchaseordernumber = OrderNumber.get.unsafeGetNullable(rs, i + 7),
      accountnumber = AccountNumber.get.unsafeGetNullable(rs, i + 8),
      customerid = CustomerId.get.unsafeGetNonNullable(rs, i + 9),
      salespersonid = BusinessentityId.get.unsafeGetNullable(rs, i + 10),
      territoryid = SalesterritoryId.get.unsafeGetNullable(rs, i + 11),
      billtoaddressid = AddressId.get.unsafeGetNonNullable(rs, i + 12),
      shiptoaddressid = AddressId.get.unsafeGetNonNullable(rs, i + 13),
      shipmethodid = ShipmethodId.get.unsafeGetNonNullable(rs, i + 14),
      creditcardid = CreditcardId.get.unsafeGetNullable(rs, i + 15),
      creditcardapprovalcode = Meta.StringMeta.get.unsafeGetNullable(rs, i + 16),
      currencyrateid = CurrencyrateId.get.unsafeGetNullable(rs, i + 17),
      subtotal = Meta.ScalaBigDecimalMeta.get.unsafeGetNonNullable(rs, i + 18),
      taxamt = Meta.ScalaBigDecimalMeta.get.unsafeGetNonNullable(rs, i + 19),
      freight = Meta.ScalaBigDecimalMeta.get.unsafeGetNonNullable(rs, i + 20),
      totaldue = Meta.ScalaBigDecimalMeta.get.unsafeGetNullable(rs, i + 21),
      comment = Meta.StringMeta.get.unsafeGetNullable(rs, i + 22),
      rowguid = adventureworks.UUIDMeta.get.unsafeGetNonNullable(rs, i + 23),
      modifieddate = TypoLocalDateTime.get.unsafeGetNonNullable(rs, i + 24)
    )
  )
}
