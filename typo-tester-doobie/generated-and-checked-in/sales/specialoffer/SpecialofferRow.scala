/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialoffer

import adventureworks.TypoLocalDateTime
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class SpecialofferRow(
  /** Primary key for SpecialOffer records. */
  specialofferid: SpecialofferId,
  /** Discount description. */
  description: /* max 255 chars */ String,
  /** Discount precentage. */
  discountpct: BigDecimal,
  /** Discount type category. */
  `type`: /* max 50 chars */ String,
  /** Group the discount applies to such as Reseller or Customer. */
  category: /* max 50 chars */ String,
  /** Discount start date. */
  startdate: TypoLocalDateTime,
  /** Discount end date. */
  enddate: TypoLocalDateTime,
  /** Minimum discount percent allowed. */
  minqty: Int,
  /** Maximum discount percent allowed. */
  maxqty: Option[Int],
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object SpecialofferRow {
  implicit val decoder: Decoder[SpecialofferRow] = Decoder.forProduct11[SpecialofferRow, SpecialofferId, /* max 255 chars */ String, BigDecimal, /* max 50 chars */ String, /* max 50 chars */ String, TypoLocalDateTime, TypoLocalDateTime, Int, Option[Int], UUID, TypoLocalDateTime]("specialofferid", "description", "discountpct", "type", "category", "startdate", "enddate", "minqty", "maxqty", "rowguid", "modifieddate")(SpecialofferRow.apply)
  implicit val encoder: Encoder[SpecialofferRow] = Encoder.forProduct11[SpecialofferRow, SpecialofferId, /* max 255 chars */ String, BigDecimal, /* max 50 chars */ String, /* max 50 chars */ String, TypoLocalDateTime, TypoLocalDateTime, Int, Option[Int], UUID, TypoLocalDateTime]("specialofferid", "description", "discountpct", "type", "category", "startdate", "enddate", "minqty", "maxqty", "rowguid", "modifieddate")(x => (x.specialofferid, x.description, x.discountpct, x.`type`, x.category, x.startdate, x.enddate, x.minqty, x.maxqty, x.rowguid, x.modifieddate))
  implicit val read: Read[SpecialofferRow] = new Read[SpecialofferRow](
    gets = List(
      (Get[SpecialofferId], Nullability.NoNulls),
      (Get[/* max 255 chars */ String], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[/* max 50 chars */ String], Nullability.NoNulls),
      (Get[/* max 50 chars */ String], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[Int], Nullability.Nullable),
      (Get[UUID], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SpecialofferRow(
      specialofferid = Get[SpecialofferId].unsafeGetNonNullable(rs, i + 0),
      description = Get[/* max 255 chars */ String].unsafeGetNonNullable(rs, i + 1),
      discountpct = Get[BigDecimal].unsafeGetNonNullable(rs, i + 2),
      `type` = Get[/* max 50 chars */ String].unsafeGetNonNullable(rs, i + 3),
      category = Get[/* max 50 chars */ String].unsafeGetNonNullable(rs, i + 4),
      startdate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 5),
      enddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 6),
      minqty = Get[Int].unsafeGetNonNullable(rs, i + 7),
      maxqty = Get[Int].unsafeGetNullable(rs, i + 8),
      rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 9),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 10)
    )
  )
}
