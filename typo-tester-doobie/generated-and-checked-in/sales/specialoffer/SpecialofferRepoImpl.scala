/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialoffer

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream
import java.util.UUID

object SpecialofferRepoImpl extends SpecialofferRepo {
  override def delete(specialofferid: SpecialofferId): ConnectionIO[Boolean] = {
    sql"delete from sales.specialoffer where specialofferid = ${specialofferid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: SpecialofferRow): ConnectionIO[SpecialofferRow] = {
    sql"""insert into sales.specialoffer(specialofferid, description, discountpct, "type", category, startdate, enddate, minqty, maxqty, rowguid, modifieddate)
          values (${unsaved.specialofferid}::int4, ${unsaved.description}, ${unsaved.discountpct}::numeric, ${unsaved.`type`}, ${unsaved.category}, ${unsaved.startdate}::timestamp, ${unsaved.enddate}::timestamp, ${unsaved.minqty}::int4, ${unsaved.maxqty}::int4, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning specialofferid, description, discountpct, "type", category, startdate::text, enddate::text, minqty, maxqty, rowguid, modifieddate::text
       """.query[SpecialofferRow].unique
  }
  override def insert(unsaved: SpecialofferRowUnsaved): ConnectionIO[SpecialofferRow] = {
    val fs = List(
      Some((Fragment.const(s"description"), fr"${unsaved.description}")),
      Some((Fragment.const(s""""type""""), fr"${unsaved.`type`}")),
      Some((Fragment.const(s"category"), fr"${unsaved.category}")),
      Some((Fragment.const(s"startdate"), fr"${unsaved.startdate}::timestamp")),
      Some((Fragment.const(s"enddate"), fr"${unsaved.enddate}::timestamp")),
      Some((Fragment.const(s"maxqty"), fr"${unsaved.maxqty}::int4")),
      unsaved.specialofferid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"specialofferid"), fr"${value: SpecialofferId}::int4"))
      },
      unsaved.discountpct match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"discountpct"), fr"${value: BigDecimal}::numeric"))
      },
      unsaved.minqty match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"minqty"), fr"${value: Int}::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.specialoffer default values
            returning specialofferid, description, discountpct, "type", category, startdate::text, enddate::text, minqty, maxqty, rowguid, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.specialoffer(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning specialofferid, description, discountpct, "type", category, startdate::text, enddate::text, minqty, maxqty, rowguid, modifieddate::text
         """
    }
    q.query[SpecialofferRow].unique
  
  }
  override def selectAll: Stream[ConnectionIO, SpecialofferRow] = {
    sql"""select specialofferid, description, discountpct, "type", category, startdate::text, enddate::text, minqty, maxqty, rowguid, modifieddate::text from sales.specialoffer""".query[SpecialofferRow].stream
  }
  override def selectById(specialofferid: SpecialofferId): ConnectionIO[Option[SpecialofferRow]] = {
    sql"""select specialofferid, description, discountpct, "type", category, startdate::text, enddate::text, minqty, maxqty, rowguid, modifieddate::text from sales.specialoffer where specialofferid = ${specialofferid}""".query[SpecialofferRow].option
  }
  override def selectByIds(specialofferids: Array[SpecialofferId]): Stream[ConnectionIO, SpecialofferRow] = {
    sql"""select specialofferid, description, discountpct, "type", category, startdate::text, enddate::text, minqty, maxqty, rowguid, modifieddate::text from sales.specialoffer where specialofferid = ANY(${specialofferids})""".query[SpecialofferRow].stream
  }
  override def update(row: SpecialofferRow): ConnectionIO[Boolean] = {
    val specialofferid = row.specialofferid
    sql"""update sales.specialoffer
          set description = ${row.description},
              discountpct = ${row.discountpct}::numeric,
              "type" = ${row.`type`},
              category = ${row.category},
              startdate = ${row.startdate}::timestamp,
              enddate = ${row.enddate}::timestamp,
              minqty = ${row.minqty}::int4,
              maxqty = ${row.maxqty}::int4,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where specialofferid = ${specialofferid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: SpecialofferRow): ConnectionIO[SpecialofferRow] = {
    sql"""insert into sales.specialoffer(specialofferid, description, discountpct, "type", category, startdate, enddate, minqty, maxqty, rowguid, modifieddate)
          values (
            ${unsaved.specialofferid}::int4,
            ${unsaved.description},
            ${unsaved.discountpct}::numeric,
            ${unsaved.`type`},
            ${unsaved.category},
            ${unsaved.startdate}::timestamp,
            ${unsaved.enddate}::timestamp,
            ${unsaved.minqty}::int4,
            ${unsaved.maxqty}::int4,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (specialofferid)
          do update set
            description = EXCLUDED.description,
            discountpct = EXCLUDED.discountpct,
            "type" = EXCLUDED."type",
            category = EXCLUDED.category,
            startdate = EXCLUDED.startdate,
            enddate = EXCLUDED.enddate,
            minqty = EXCLUDED.minqty,
            maxqty = EXCLUDED.maxqty,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning specialofferid, description, discountpct, "type", category, startdate::text, enddate::text, minqty, maxqty, rowguid, modifieddate::text
       """.query[SpecialofferRow].unique
  }
}
