/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package store

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream
import java.time.LocalDateTime
import java.util.UUID

object StoreRepoImpl extends StoreRepo {
  override def delete(businessentityid: BusinessentityId): ConnectionIO[Boolean] = {
    sql"delete from sales.store where businessentityid = $businessentityid".update.run.map(_ > 0)
  }
  override def insert(unsaved: StoreRow): ConnectionIO[StoreRow] = {
    sql"""insert into sales.store(businessentityid, "name", salespersonid, demographics, rowguid, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.salespersonid}::int4, ${unsaved.demographics}::xml, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, "name", salespersonid, demographics, rowguid, modifieddate
       """.query[StoreRow].unique
  }
  override def insert(unsaved: StoreRowUnsaved): ConnectionIO[StoreRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      Some((Fragment.const(s"salespersonid"), fr"${unsaved.salespersonid}::int4")),
      Some((Fragment.const(s"demographics"), fr"${unsaved.demographics}::xml")),
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.store default values
            returning businessentityid, "name", salespersonid, demographics, rowguid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.store(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, "name", salespersonid, demographics, rowguid, modifieddate
         """
    }
    q.query[StoreRow].unique
  
  }
  override def selectAll: Stream[ConnectionIO, StoreRow] = {
    sql"""select businessentityid, "name", salespersonid, demographics, rowguid, modifieddate from sales.store""".query[StoreRow].stream
  }
  override def selectById(businessentityid: BusinessentityId): ConnectionIO[Option[StoreRow]] = {
    sql"""select businessentityid, "name", salespersonid, demographics, rowguid, modifieddate from sales.store where businessentityid = $businessentityid""".query[StoreRow].option
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): Stream[ConnectionIO, StoreRow] = {
    sql"""select businessentityid, "name", salespersonid, demographics, rowguid, modifieddate from sales.store where businessentityid = ANY($businessentityids)""".query[StoreRow].stream
  }
  override def update(row: StoreRow): ConnectionIO[Boolean] = {
    val businessentityid = row.businessentityid
    sql"""update sales.store
          set "name" = ${row.name}::"public"."Name",
              salespersonid = ${row.salespersonid}::int4,
              demographics = ${row.demographics}::xml,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = $businessentityid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: StoreRow): ConnectionIO[StoreRow] = {
    sql"""insert into sales.store(businessentityid, "name", salespersonid, demographics, rowguid, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.salespersonid}::int4,
            ${unsaved.demographics}::xml,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid)
          do update set
            "name" = EXCLUDED."name",
            salespersonid = EXCLUDED.salespersonid,
            demographics = EXCLUDED.demographics,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, "name", salespersonid, demographics, rowguid, modifieddate
       """.query[StoreRow].unique
  }
}
