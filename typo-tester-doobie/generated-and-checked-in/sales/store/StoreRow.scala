/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package store

import adventureworks.TypoXml
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

case class StoreRow(
  /** Primary key. Foreign key to Customer.BusinessEntityID.
      Points to [[person.businessentity.BusinessentityRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Name of the store. */
  name: Name,
  /** ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.
      Points to [[salesperson.SalespersonRow.businessentityid]] */
  salespersonid: Option[BusinessentityId],
  /** Demographic informationg about the store such as the number of employees, annual sales and store type. */
  demographics: Option[TypoXml],
  rowguid: UUID,
  modifieddate: LocalDateTime
)

object StoreRow {
  implicit val decoder: Decoder[StoreRow] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[BusinessentityId]
        name <- c.downField("name").as[Name]
        salespersonid <- c.downField("salespersonid").as[Option[BusinessentityId]]
        demographics <- c.downField("demographics").as[Option[TypoXml]]
        rowguid <- c.downField("rowguid").as[UUID]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield StoreRow(businessentityid, name, salespersonid, demographics, rowguid, modifieddate)
  implicit val encoder: Encoder[StoreRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "name" := row.name,
        "salespersonid" := row.salespersonid,
        "demographics" := row.demographics,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
