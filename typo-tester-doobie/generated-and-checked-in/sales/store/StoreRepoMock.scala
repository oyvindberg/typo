/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package store

import adventureworks.person.businessentity.BusinessentityId
import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class StoreRepoMock(toRow: Function1[StoreRowUnsaved, StoreRow],
                    map: scala.collection.mutable.Map[BusinessentityId, StoreRow] = scala.collection.mutable.Map.empty) extends StoreRepo {
  override def delete(businessentityid: BusinessentityId): ConnectionIO[Boolean] = {
    delay(map.remove(businessentityid).isDefined)
  }
  override def insert(unsaved: StoreRow): ConnectionIO[StoreRow] = {
    delay {
      if (map.contains(unsaved.businessentityid))
        sys.error(s"id ${unsaved.businessentityid} already exists")
      else
        map.put(unsaved.businessentityid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: StoreRowUnsaved): ConnectionIO[StoreRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, StoreRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(businessentityid: BusinessentityId): ConnectionIO[Option[StoreRow]] = {
    delay(map.get(businessentityid))
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): Stream[ConnectionIO, StoreRow] = {
    Stream.emits(businessentityids.flatMap(map.get).toList)
  }
  override def update(row: StoreRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.businessentityid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.businessentityid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: StoreRow): ConnectionIO[StoreRow] = {
    delay {
      map.put(unsaved.businessentityid, unsaved)
      unsaved
    }
  }
}
