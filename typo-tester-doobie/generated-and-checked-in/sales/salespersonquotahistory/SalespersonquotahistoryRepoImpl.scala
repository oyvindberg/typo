/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salespersonquotahistory

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object SalespersonquotahistoryRepoImpl extends SalespersonquotahistoryRepo {
  override def delete(compositeId: SalespersonquotahistoryId): ConnectionIO[Boolean] = {
    sql"delete from sales.salespersonquotahistory where businessentityid = ${compositeId.businessentityid} AND quotadate = ${compositeId.quotadate}".update.run.map(_ > 0)
  }
  override def insert(unsaved: SalespersonquotahistoryRow): ConnectionIO[SalespersonquotahistoryRow] = {
    sql"""insert into sales.salespersonquotahistory(businessentityid, quotadate, salesquota, rowguid, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.quotadate}::timestamp, ${unsaved.salesquota}::numeric, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, quotadate, salesquota, rowguid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: SalespersonquotahistoryRowUnsaved): ConnectionIO[SalespersonquotahistoryRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"quotadate"), fr"${unsaved.quotadate}::timestamp")),
      Some((Fragment.const(s"salesquota"), fr"${unsaved.salesquota}::numeric")),
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.salespersonquotahistory default values
            returning businessentityid, quotadate, salesquota, rowguid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into sales.salespersonquotahistory(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, quotadate, salesquota, rowguid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, SalespersonquotahistoryRow] = {
    sql"select businessentityid, quotadate, salesquota, rowguid, modifieddate from sales.salespersonquotahistory".query[SalespersonquotahistoryRow].stream
  }
  override def selectByFieldValues(fieldValues: List[SalespersonquotahistoryFieldOrIdValue[_]]): Stream[ConnectionIO, SalespersonquotahistoryRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case SalespersonquotahistoryFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case SalespersonquotahistoryFieldValue.quotadate(value) => fr"quotadate = $value"
        case SalespersonquotahistoryFieldValue.salesquota(value) => fr"salesquota = $value"
        case SalespersonquotahistoryFieldValue.rowguid(value) => fr"rowguid = $value"
        case SalespersonquotahistoryFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from sales.salespersonquotahistory $where".query[SalespersonquotahistoryRow].stream
  
  }
  override def selectById(compositeId: SalespersonquotahistoryId): ConnectionIO[Option[SalespersonquotahistoryRow]] = {
    sql"select businessentityid, quotadate, salesquota, rowguid, modifieddate from sales.salespersonquotahistory where businessentityid = ${compositeId.businessentityid} AND quotadate = ${compositeId.quotadate}".query[SalespersonquotahistoryRow].option
  }
  override def update(row: SalespersonquotahistoryRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update sales.salespersonquotahistory
          set salesquota = ${row.salesquota}::numeric,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = ${compositeId.businessentityid} AND quotadate = ${compositeId.quotadate}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(compositeId: SalespersonquotahistoryId, fieldValues: List[SalespersonquotahistoryFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case SalespersonquotahistoryFieldValue.salesquota(value) => fr"salesquota = $value"
            case SalespersonquotahistoryFieldValue.rowguid(value) => fr"rowguid = $value"
            case SalespersonquotahistoryFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update sales.salespersonquotahistory
              $updates
              where businessentityid = ${compositeId.businessentityid} AND quotadate = ${compositeId.quotadate}
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: SalespersonquotahistoryRow): ConnectionIO[SalespersonquotahistoryRow] = {
    sql"""insert into sales.salespersonquotahistory(businessentityid, quotadate, salesquota, rowguid, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.quotadate}::timestamp,
            ${unsaved.salesquota}::numeric,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid, quotadate)
          do update set
            salesquota = EXCLUDED.salesquota,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, quotadate, salesquota, rowguid, modifieddate
       """.query.unique
  }
  implicit val read: Read[SalespersonquotahistoryRow] =
    new Read[SalespersonquotahistoryRow](
      gets = List(
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SalespersonquotahistoryRow(
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
        quotadate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 1),
        salesquota = Get[BigDecimal].unsafeGetNonNullable(rs, i + 2),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 3),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 4)
      )
    )
  

}
