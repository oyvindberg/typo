/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package d

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.document.DocumentId
import adventureworks.public.Flag
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class DViewRow(
  /** Points to [[production.document.DocumentRow.title]] */
  title: Option[/* max 50 chars */ String],
  /** Points to [[production.document.DocumentRow.owner]] */
  owner: Option[BusinessentityId],
  /** Points to [[production.document.DocumentRow.folderflag]] */
  folderflag: Flag,
  /** Points to [[production.document.DocumentRow.filename]] */
  filename: Option[/* max 400 chars */ String],
  /** Points to [[production.document.DocumentRow.fileextension]] */
  fileextension: Option[/* max 8 chars */ String],
  /** Points to [[production.document.DocumentRow.revision]] */
  revision: Option[/* bpchar */ String],
  /** Points to [[production.document.DocumentRow.changenumber]] */
  changenumber: Option[Int],
  /** Points to [[production.document.DocumentRow.status]] */
  status: Option[Int],
  /** Points to [[production.document.DocumentRow.documentsummary]] */
  documentsummary: Option[String],
  /** Points to [[production.document.DocumentRow.document]] */
  document: Option[Byte],
  /** Points to [[production.document.DocumentRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[production.document.DocumentRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime],
  /** Points to [[production.document.DocumentRow.documentnode]] */
  documentnode: Option[DocumentId]
)

object DViewRow {
  implicit val decoder: Decoder[DViewRow] = Decoder.forProduct13[DViewRow, Option[/* max 50 chars */ String], Option[BusinessentityId], Flag, Option[/* max 400 chars */ String], Option[/* max 8 chars */ String], Option[/* bpchar */ String], Option[Int], Option[Int], Option[String], Option[Byte], Option[UUID], Option[TypoLocalDateTime], Option[DocumentId]]("title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate", "documentnode")(DViewRow.apply)
  implicit val encoder: Encoder[DViewRow] = Encoder.forProduct13[DViewRow, Option[/* max 50 chars */ String], Option[BusinessentityId], Flag, Option[/* max 400 chars */ String], Option[/* max 8 chars */ String], Option[/* bpchar */ String], Option[Int], Option[Int], Option[String], Option[Byte], Option[UUID], Option[TypoLocalDateTime], Option[DocumentId]]("title", "owner", "folderflag", "filename", "fileextension", "revision", "changenumber", "status", "documentsummary", "document", "rowguid", "modifieddate", "documentnode")(x => (x.title, x.owner, x.folderflag, x.filename, x.fileextension, x.revision, x.changenumber, x.status, x.documentsummary, x.document, x.rowguid, x.modifieddate, x.documentnode))
  implicit val read: Read[DViewRow] = new Read[DViewRow](
    gets = List(
      (Get[/* max 50 chars */ String], Nullability.Nullable),
      (Get[BusinessentityId], Nullability.Nullable),
      (Get[Flag], Nullability.NoNulls),
      (Get[/* max 400 chars */ String], Nullability.Nullable),
      (Get[/* max 8 chars */ String], Nullability.Nullable),
      (Get[/* bpchar */ String], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[String], Nullability.Nullable),
      (Get[Byte], Nullability.Nullable),
      (Get[UUID], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[DocumentId], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => DViewRow(
      title = Get[/* max 50 chars */ String].unsafeGetNullable(rs, i + 0),
      owner = Get[BusinessentityId].unsafeGetNullable(rs, i + 1),
      folderflag = Get[Flag].unsafeGetNonNullable(rs, i + 2),
      filename = Get[/* max 400 chars */ String].unsafeGetNullable(rs, i + 3),
      fileextension = Get[/* max 8 chars */ String].unsafeGetNullable(rs, i + 4),
      revision = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 5),
      changenumber = Get[Int].unsafeGetNullable(rs, i + 6),
      status = Get[Int].unsafeGetNullable(rs, i + 7),
      documentsummary = Get[String].unsafeGetNullable(rs, i + 8),
      document = Get[Byte].unsafeGetNullable(rs, i + 9),
      rowguid = Get[UUID].unsafeGetNullable(rs, i + 10),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 11),
      documentnode = Get[DocumentId].unsafeGetNullable(rs, i + 12)
    )
  )
}
