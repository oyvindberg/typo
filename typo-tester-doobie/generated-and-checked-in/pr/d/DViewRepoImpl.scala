/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package d

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.document.DocumentId
import adventureworks.public.Flag
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object DViewRepoImpl extends DViewRepo {
  override def selectAll: Stream[ConnectionIO, DViewRow] = {
    sql"""select title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode from pr.d""".query[DViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[DViewFieldOrIdValue[_]]): Stream[ConnectionIO, DViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case DViewFieldValue.title(value) => fr"title = $value"
        case DViewFieldValue.owner(value) => fr""""owner" = $value"""
        case DViewFieldValue.folderflag(value) => fr"folderflag = $value"
        case DViewFieldValue.filename(value) => fr"filename = $value"
        case DViewFieldValue.fileextension(value) => fr"fileextension = $value"
        case DViewFieldValue.revision(value) => fr"revision = $value"
        case DViewFieldValue.changenumber(value) => fr"changenumber = $value"
        case DViewFieldValue.status(value) => fr"status = $value"
        case DViewFieldValue.documentsummary(value) => fr"documentsummary = $value"
        case DViewFieldValue.document(value) => fr""""document" = $value"""
        case DViewFieldValue.rowguid(value) => fr"rowguid = $value"
        case DViewFieldValue.modifieddate(value) => fr"modifieddate = $value"
        case DViewFieldValue.documentnode(value) => fr"documentnode = $value"
      } :_*
    )
    sql"select * from pr.d $where".query[DViewRow].stream
  
  }
  implicit val read: Read[DViewRow] =
    new Read[DViewRow](
      gets = List(
        (Get[String], Nullability.Nullable),
        (Get[BusinessentityId], Nullability.Nullable),
        (Get[Flag], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[/* bpchar */ String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Byte], Nullability.Nullable),
        (Get[UUID], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[DocumentId], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => DViewRow(
        title = Get[String].unsafeGetNullable(rs, i + 0),
        owner = Get[BusinessentityId].unsafeGetNullable(rs, i + 1),
        folderflag = Get[Flag].unsafeGetNonNullable(rs, i + 2),
        filename = Get[String].unsafeGetNullable(rs, i + 3),
        fileextension = Get[String].unsafeGetNullable(rs, i + 4),
        revision = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 5),
        changenumber = Get[Int].unsafeGetNullable(rs, i + 6),
        status = Get[Int].unsafeGetNullable(rs, i + 7),
        documentsummary = Get[String].unsafeGetNullable(rs, i + 8),
        document = Get[Byte].unsafeGetNullable(rs, i + 9),
        rowguid = Get[UUID].unsafeGetNullable(rs, i + 10),
        modifieddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 11),
        documentnode = Get[DocumentId].unsafeGetNullable(rs, i + 12)
      )
    )
  

}
