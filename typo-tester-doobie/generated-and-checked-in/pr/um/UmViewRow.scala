/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package um

import adventureworks.TypoLocalDateTime
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class UmViewRow(
  id: Option[/* bpchar */ String],
  /** Points to [[production.unitmeasure.UnitmeasureRow.unitmeasurecode]] */
  unitmeasurecode: Option[UnitmeasureId],
  /** Points to [[production.unitmeasure.UnitmeasureRow.name]] */
  name: Option[Name],
  /** Points to [[production.unitmeasure.UnitmeasureRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object UmViewRow {
  implicit val decoder: Decoder[UmViewRow] = Decoder.forProduct4[UmViewRow, Option[/* bpchar */ String], Option[UnitmeasureId], Option[Name], Option[TypoLocalDateTime]]("id", "unitmeasurecode", "name", "modifieddate")(UmViewRow.apply)
  implicit val encoder: Encoder[UmViewRow] = Encoder.forProduct4[UmViewRow, Option[/* bpchar */ String], Option[UnitmeasureId], Option[Name], Option[TypoLocalDateTime]]("id", "unitmeasurecode", "name", "modifieddate")(x => (x.id, x.unitmeasurecode, x.name, x.modifieddate))
  implicit val read: Read[UmViewRow] = new Read[UmViewRow](
    gets = List(
      (Get[/* bpchar */ String], Nullability.Nullable),
      (Get[UnitmeasureId], Nullability.Nullable),
      (Get[Name], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => UmViewRow(
      id = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 0),
      unitmeasurecode = Get[UnitmeasureId].unsafeGetNullable(rs, i + 1),
      name = Get[Name].unsafeGetNullable(rs, i + 2),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 3)
    )
  )
}
