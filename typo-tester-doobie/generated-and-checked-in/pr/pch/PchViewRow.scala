/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pch

import adventureworks.production.product.ProductId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class PchViewRow(
  id: Option[Int],
  /** Points to [[production.productcosthistory.ProductcosthistoryRow.productid]] */
  productid: Option[ProductId],
  /** Points to [[production.productcosthistory.ProductcosthistoryRow.startdate]] */
  startdate: Option[LocalDateTime],
  /** Points to [[production.productcosthistory.ProductcosthistoryRow.enddate]] */
  enddate: Option[LocalDateTime],
  /** Points to [[production.productcosthistory.ProductcosthistoryRow.standardcost]] */
  standardcost: Option[BigDecimal],
  /** Points to [[production.productcosthistory.ProductcosthistoryRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object PchViewRow {
  implicit val decoder: Decoder[PchViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        productid <- c.downField("productid").as[Option[ProductId]]
        startdate <- c.downField("startdate").as[Option[LocalDateTime]]
        enddate <- c.downField("enddate").as[Option[LocalDateTime]]
        standardcost <- c.downField("standardcost").as[Option[BigDecimal]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield PchViewRow(id, productid, startdate, enddate, standardcost, modifieddate)
  implicit val encoder: Encoder[PchViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "productid" := row.productid,
        "startdate" := row.startdate,
        "enddate" := row.enddate,
        "standardcost" := row.standardcost,
        "modifieddate" := row.modifieddate
      )}
}
