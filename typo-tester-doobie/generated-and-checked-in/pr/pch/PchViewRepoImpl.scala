/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pch

import adventureworks.production.product.ProductId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object PchViewRepoImpl extends PchViewRepo {
  override def selectAll: Stream[ConnectionIO, PchViewRow] = {
    sql"""select "id", productid, startdate, enddate, standardcost, modifieddate from pr.pch""".query[PchViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[PchViewFieldOrIdValue[_]]): Stream[ConnectionIO, PchViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case PchViewFieldValue.id(value) => fr""""id" = $value"""
        case PchViewFieldValue.productid(value) => fr"productid = $value"
        case PchViewFieldValue.startdate(value) => fr"startdate = $value"
        case PchViewFieldValue.enddate(value) => fr"enddate = $value"
        case PchViewFieldValue.standardcost(value) => fr"standardcost = $value"
        case PchViewFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from pr.pch $where".query[PchViewRow].stream
  
  }
  implicit val read: Read[PchViewRow] =
    new Read[PchViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[ProductId], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PchViewRow(
        id = Get[Int].unsafeGetNullable(rs, i + 0),
        productid = Get[ProductId].unsafeGetNullable(rs, i + 1),
        startdate = Get[LocalDateTime].unsafeGetNullable(rs, i + 2),
        enddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 3),
        standardcost = Get[BigDecimal].unsafeGetNullable(rs, i + 4),
        modifieddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 5)
      )
    )
  

}
