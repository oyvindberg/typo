/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package c

import adventureworks.TypoLocalDateTime
import adventureworks.production.culture.CultureId
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class CViewRow(
  id: Option[/* bpchar */ String],
  /** Points to [[production.culture.CultureRow.cultureid]] */
  cultureid: Option[CultureId],
  /** Points to [[production.culture.CultureRow.name]] */
  name: Option[Name],
  /** Points to [[production.culture.CultureRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object CViewRow {
  implicit val decoder: Decoder[CViewRow] = Decoder.forProduct4[CViewRow, Option[/* bpchar */ String], Option[CultureId], Option[Name], Option[TypoLocalDateTime]]("id", "cultureid", "name", "modifieddate")(CViewRow.apply)
  implicit val encoder: Encoder[CViewRow] = Encoder.forProduct4[CViewRow, Option[/* bpchar */ String], Option[CultureId], Option[Name], Option[TypoLocalDateTime]]("id", "cultureid", "name", "modifieddate")(x => (x.id, x.cultureid, x.name, x.modifieddate))
  implicit val read: Read[CViewRow] = new Read[CViewRow](
    gets = List(
      (Get[/* bpchar */ String], Nullability.Nullable),
      (Get[CultureId], Nullability.Nullable),
      (Get[Name], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => CViewRow(
      id = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 0),
      cultureid = Get[CultureId].unsafeGetNullable(rs, i + 1),
      name = Get[Name].unsafeGetNullable(rs, i + 2),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 3)
    )
  )
}
