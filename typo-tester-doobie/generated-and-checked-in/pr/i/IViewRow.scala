/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package i

import adventureworks.production.illustration.IllustrationId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import org.postgresql.jdbc.PgSQLXML

case class IViewRow(
  id: Option[Int],
  /** Points to [[production.illustration.IllustrationRow.illustrationid]] */
  illustrationid: Option[IllustrationId],
  /** Points to [[production.illustration.IllustrationRow.diagram]] */
  diagram: Option[PgSQLXML],
  /** Points to [[production.illustration.IllustrationRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object IViewRow {
  implicit val decoder: Decoder[IViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        illustrationid <- c.downField("illustrationid").as[Option[IllustrationId]]
        diagram <- c.downField("diagram").as[Option[PgSQLXML]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield IViewRow(id, illustrationid, diagram, modifieddate)
  implicit val encoder: Encoder[IViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "illustrationid" := row.illustrationid,
        "diagram" := row.diagram,
        "modifieddate" := row.modifieddate
      )}
}
