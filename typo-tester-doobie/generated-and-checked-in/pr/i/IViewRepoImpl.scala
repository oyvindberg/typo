/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package i

import adventureworks.production.illustration.IllustrationId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import org.postgresql.jdbc.PgSQLXML

object IViewRepoImpl extends IViewRepo {
  override def selectAll: Stream[ConnectionIO, IViewRow] = {
    sql"""select "id", illustrationid, diagram, modifieddate from pr.i""".query[IViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[IViewFieldOrIdValue[_]]): Stream[ConnectionIO, IViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case IViewFieldValue.id(value) => fr""""id" = $value"""
        case IViewFieldValue.illustrationid(value) => fr"illustrationid = $value"
        case IViewFieldValue.diagram(value) => fr"diagram = $value"
        case IViewFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from pr.i $where".query[IViewRow].stream
  
  }
  implicit val read: Read[IViewRow] =
    new Read[IViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[IllustrationId], Nullability.Nullable),
        (Get[PgSQLXML], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => IViewRow(
        id = Get[Int].unsafeGetNullable(rs, i + 0),
        illustrationid = Get[IllustrationId].unsafeGetNullable(rs, i + 1),
        diagram = Get[PgSQLXML].unsafeGetNullable(rs, i + 2),
        modifieddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 3)
      )
    )
  

}
