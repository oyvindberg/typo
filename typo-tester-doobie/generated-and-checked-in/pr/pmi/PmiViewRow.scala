/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pmi

import adventureworks.production.illustration.IllustrationId
import adventureworks.production.productmodel.ProductmodelId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class PmiViewRow(
  /** Points to [[production.productmodelillustration.ProductmodelillustrationRow.productmodelid]] */
  productmodelid: Option[ProductmodelId],
  /** Points to [[production.productmodelillustration.ProductmodelillustrationRow.illustrationid]] */
  illustrationid: Option[IllustrationId],
  /** Points to [[production.productmodelillustration.ProductmodelillustrationRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object PmiViewRow {
  implicit val decoder: Decoder[PmiViewRow] =
    (c: HCursor) =>
      for {
        productmodelid <- c.downField("productmodelid").as[Option[ProductmodelId]]
        illustrationid <- c.downField("illustrationid").as[Option[IllustrationId]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield PmiViewRow(productmodelid, illustrationid, modifieddate)
  implicit val encoder: Encoder[PmiViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productmodelid" := row.productmodelid,
        "illustrationid" := row.illustrationid,
        "modifieddate" := row.modifieddate
      )}
}
