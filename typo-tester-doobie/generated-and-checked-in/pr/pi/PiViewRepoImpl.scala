/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pi

import adventureworks.production.location.LocationId
import adventureworks.production.product.ProductId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object PiViewRepoImpl extends PiViewRepo {
  override def selectAll: Stream[ConnectionIO, PiViewRow] = {
    sql"""select "id", productid, locationid, shelf, bin, quantity, rowguid, modifieddate from pr.pi""".query[PiViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[PiViewFieldOrIdValue[_]]): Stream[ConnectionIO, PiViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case PiViewFieldValue.id(value) => fr""""id" = $value"""
        case PiViewFieldValue.productid(value) => fr"productid = $value"
        case PiViewFieldValue.locationid(value) => fr"locationid = $value"
        case PiViewFieldValue.shelf(value) => fr"shelf = $value"
        case PiViewFieldValue.bin(value) => fr"bin = $value"
        case PiViewFieldValue.quantity(value) => fr"quantity = $value"
        case PiViewFieldValue.rowguid(value) => fr"rowguid = $value"
        case PiViewFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from pr.pi $where".query[PiViewRow].stream
  
  }
  implicit val read: Read[PiViewRow] =
    new Read[PiViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[ProductId], Nullability.Nullable),
        (Get[LocationId], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[UUID], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PiViewRow(
        id = Get[Int].unsafeGetNullable(rs, i + 0),
        productid = Get[ProductId].unsafeGetNullable(rs, i + 1),
        locationid = Get[LocationId].unsafeGetNullable(rs, i + 2),
        shelf = Get[String].unsafeGetNullable(rs, i + 3),
        bin = Get[Int].unsafeGetNullable(rs, i + 4),
        quantity = Get[Int].unsafeGetNullable(rs, i + 5),
        rowguid = Get[UUID].unsafeGetNullable(rs, i + 6),
        modifieddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 7)
      )
    )
  

}
