/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pi

import adventureworks.TypoLocalDateTime
import adventureworks.production.location.LocationId
import adventureworks.production.product.ProductId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class PiViewRow(
  id: Option[Int],
  /** Points to [[production.productinventory.ProductinventoryRow.productid]] */
  productid: Option[ProductId],
  /** Points to [[production.productinventory.ProductinventoryRow.locationid]] */
  locationid: Option[LocationId],
  /** Points to [[production.productinventory.ProductinventoryRow.shelf]] */
  shelf: Option[/* max 10 chars */ String],
  /** Points to [[production.productinventory.ProductinventoryRow.bin]] */
  bin: Option[Int],
  /** Points to [[production.productinventory.ProductinventoryRow.quantity]] */
  quantity: Option[Int],
  /** Points to [[production.productinventory.ProductinventoryRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[production.productinventory.ProductinventoryRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object PiViewRow {
  implicit val decoder: Decoder[PiViewRow] = Decoder.forProduct8[PiViewRow, Option[Int], Option[ProductId], Option[LocationId], Option[/* max 10 chars */ String], Option[Int], Option[Int], Option[UUID], Option[TypoLocalDateTime]]("id", "productid", "locationid", "shelf", "bin", "quantity", "rowguid", "modifieddate")(PiViewRow.apply)
  implicit val encoder: Encoder[PiViewRow] = Encoder.forProduct8[PiViewRow, Option[Int], Option[ProductId], Option[LocationId], Option[/* max 10 chars */ String], Option[Int], Option[Int], Option[UUID], Option[TypoLocalDateTime]]("id", "productid", "locationid", "shelf", "bin", "quantity", "rowguid", "modifieddate")(x => (x.id, x.productid, x.locationid, x.shelf, x.bin, x.quantity, x.rowguid, x.modifieddate))
  implicit val read: Read[PiViewRow] = new Read[PiViewRow](
    gets = List(
      (Get[Int], Nullability.Nullable),
      (Get[ProductId], Nullability.Nullable),
      (Get[LocationId], Nullability.Nullable),
      (Get[/* max 10 chars */ String], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[UUID], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PiViewRow(
      id = Get[Int].unsafeGetNullable(rs, i + 0),
      productid = Get[ProductId].unsafeGetNullable(rs, i + 1),
      locationid = Get[LocationId].unsafeGetNullable(rs, i + 2),
      shelf = Get[/* max 10 chars */ String].unsafeGetNullable(rs, i + 3),
      bin = Get[Int].unsafeGetNullable(rs, i + 4),
      quantity = Get[Int].unsafeGetNullable(rs, i + 5),
      rowguid = Get[UUID].unsafeGetNullable(rs, i + 6),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 7)
    )
  )
}
