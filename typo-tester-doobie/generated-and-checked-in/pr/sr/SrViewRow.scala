/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package sr

import adventureworks.production.scrapreason.ScrapreasonId
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class SrViewRow(
  id: Option[Int],
  /** Points to [[production.scrapreason.ScrapreasonRow.scrapreasonid]] */
  scrapreasonid: Option[ScrapreasonId],
  /** Points to [[production.scrapreason.ScrapreasonRow.name]] */
  name: Option[Name],
  /** Points to [[production.scrapreason.ScrapreasonRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object SrViewRow {
  implicit val decoder: Decoder[SrViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        scrapreasonid <- c.downField("scrapreasonid").as[Option[ScrapreasonId]]
        name <- c.downField("name").as[Option[Name]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield SrViewRow(id, scrapreasonid, name, modifieddate)
  implicit val encoder: Encoder[SrViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "scrapreasonid" := row.scrapreasonid,
        "name" := row.name,
        "modifieddate" := row.modifieddate
      )}
}
