/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package wr

import adventureworks.TypoLocalDateTime
import adventureworks.production.location.LocationId
import adventureworks.production.workorder.WorkorderId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class WrViewRow(
  id: Option[Int],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.workorderid]] */
  workorderid: Option[WorkorderId],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.productid]] */
  productid: Option[Int],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.operationsequence]] */
  operationsequence: Option[Int],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.locationid]] */
  locationid: Option[LocationId],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.scheduledstartdate]] */
  scheduledstartdate: Option[TypoLocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.scheduledenddate]] */
  scheduledenddate: Option[TypoLocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualstartdate]] */
  actualstartdate: Option[TypoLocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualenddate]] */
  actualenddate: Option[TypoLocalDateTime],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualresourcehrs]] */
  actualresourcehrs: Option[BigDecimal],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.plannedcost]] */
  plannedcost: Option[BigDecimal],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.actualcost]] */
  actualcost: Option[BigDecimal],
  /** Points to [[production.workorderrouting.WorkorderroutingRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object WrViewRow {
  implicit val decoder: Decoder[WrViewRow] = Decoder.forProduct13[WrViewRow, Option[Int], Option[WorkorderId], Option[Int], Option[Int], Option[LocationId], Option[TypoLocalDateTime], Option[TypoLocalDateTime], Option[TypoLocalDateTime], Option[TypoLocalDateTime], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[TypoLocalDateTime]]("id", "workorderid", "productid", "operationsequence", "locationid", "scheduledstartdate", "scheduledenddate", "actualstartdate", "actualenddate", "actualresourcehrs", "plannedcost", "actualcost", "modifieddate")(WrViewRow.apply)
  implicit val encoder: Encoder[WrViewRow] = Encoder.forProduct13[WrViewRow, Option[Int], Option[WorkorderId], Option[Int], Option[Int], Option[LocationId], Option[TypoLocalDateTime], Option[TypoLocalDateTime], Option[TypoLocalDateTime], Option[TypoLocalDateTime], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[TypoLocalDateTime]]("id", "workorderid", "productid", "operationsequence", "locationid", "scheduledstartdate", "scheduledenddate", "actualstartdate", "actualenddate", "actualresourcehrs", "plannedcost", "actualcost", "modifieddate")(x => (x.id, x.workorderid, x.productid, x.operationsequence, x.locationid, x.scheduledstartdate, x.scheduledenddate, x.actualstartdate, x.actualenddate, x.actualresourcehrs, x.plannedcost, x.actualcost, x.modifieddate))
  implicit val read: Read[WrViewRow] = new Read[WrViewRow](
    gets = List(
      (Get[Int], Nullability.Nullable),
      (Get[WorkorderId], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[LocationId], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => WrViewRow(
      id = Get[Int].unsafeGetNullable(rs, i + 0),
      workorderid = Get[WorkorderId].unsafeGetNullable(rs, i + 1),
      productid = Get[Int].unsafeGetNullable(rs, i + 2),
      operationsequence = Get[Int].unsafeGetNullable(rs, i + 3),
      locationid = Get[LocationId].unsafeGetNullable(rs, i + 4),
      scheduledstartdate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 5),
      scheduledenddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 6),
      actualstartdate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 7),
      actualenddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 8),
      actualresourcehrs = Get[BigDecimal].unsafeGetNullable(rs, i + 9),
      plannedcost = Get[BigDecimal].unsafeGetNullable(rs, i + 10),
      actualcost = Get[BigDecimal].unsafeGetNullable(rs, i + 11),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 12)
    )
  )
}
