/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pp

import adventureworks.TypoLocalDateTime
import adventureworks.production.productphoto.ProductphotoId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PpViewRow(
  id: Option[Int],
  /** Points to [[production.productphoto.ProductphotoRow.productphotoid]] */
  productphotoid: Option[ProductphotoId],
  /** Points to [[production.productphoto.ProductphotoRow.thumbnailphoto]] */
  thumbnailphoto: Option[Byte],
  /** Points to [[production.productphoto.ProductphotoRow.thumbnailphotofilename]] */
  thumbnailphotofilename: Option[/* max 50 chars */ String],
  /** Points to [[production.productphoto.ProductphotoRow.largephoto]] */
  largephoto: Option[Byte],
  /** Points to [[production.productphoto.ProductphotoRow.largephotofilename]] */
  largephotofilename: Option[/* max 50 chars */ String],
  /** Points to [[production.productphoto.ProductphotoRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object PpViewRow {
  implicit val decoder: Decoder[PpViewRow] = Decoder.forProduct7[PpViewRow, Option[Int], Option[ProductphotoId], Option[Byte], Option[/* max 50 chars */ String], Option[Byte], Option[/* max 50 chars */ String], Option[TypoLocalDateTime]]("id", "productphotoid", "thumbnailphoto", "thumbnailphotofilename", "largephoto", "largephotofilename", "modifieddate")(PpViewRow.apply)
  implicit val encoder: Encoder[PpViewRow] = Encoder.forProduct7[PpViewRow, Option[Int], Option[ProductphotoId], Option[Byte], Option[/* max 50 chars */ String], Option[Byte], Option[/* max 50 chars */ String], Option[TypoLocalDateTime]]("id", "productphotoid", "thumbnailphoto", "thumbnailphotofilename", "largephoto", "largephotofilename", "modifieddate")(x => (x.id, x.productphotoid, x.thumbnailphoto, x.thumbnailphotofilename, x.largephoto, x.largephotofilename, x.modifieddate))
  implicit val read: Read[PpViewRow] = new Read[PpViewRow](
    gets = List(
      (Get[Int], Nullability.Nullable),
      (Get[ProductphotoId], Nullability.Nullable),
      (Get[Byte], Nullability.Nullable),
      (Get[/* max 50 chars */ String], Nullability.Nullable),
      (Get[Byte], Nullability.Nullable),
      (Get[/* max 50 chars */ String], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PpViewRow(
      id = Get[Int].unsafeGetNullable(rs, i + 0),
      productphotoid = Get[ProductphotoId].unsafeGetNullable(rs, i + 1),
      thumbnailphoto = Get[Byte].unsafeGetNullable(rs, i + 2),
      thumbnailphotofilename = Get[/* max 50 chars */ String].unsafeGetNullable(rs, i + 3),
      largephoto = Get[Byte].unsafeGetNullable(rs, i + 4),
      largephotofilename = Get[/* max 50 chars */ String].unsafeGetNullable(rs, i + 5),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 6)
    )
  )
}
