/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package pdoc

import adventureworks.TypoLocalDateTime
import adventureworks.production.document.DocumentId
import adventureworks.production.product.ProductId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PdocViewRow(
  id: Option[Int],
  /** Points to [[production.productdocument.ProductdocumentRow.productid]] */
  productid: Option[ProductId],
  /** Points to [[production.productdocument.ProductdocumentRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime],
  /** Points to [[production.productdocument.ProductdocumentRow.documentnode]] */
  documentnode: Option[DocumentId]
)

object PdocViewRow {
  implicit val decoder: Decoder[PdocViewRow] = Decoder.forProduct4[PdocViewRow, Option[Int], Option[ProductId], Option[TypoLocalDateTime], Option[DocumentId]]("id", "productid", "modifieddate", "documentnode")(PdocViewRow.apply)
  implicit val encoder: Encoder[PdocViewRow] = Encoder.forProduct4[PdocViewRow, Option[Int], Option[ProductId], Option[TypoLocalDateTime], Option[DocumentId]]("id", "productid", "modifieddate", "documentnode")(x => (x.id, x.productid, x.modifieddate, x.documentnode))
  implicit val read: Read[PdocViewRow] = new Read[PdocViewRow](
    gets = List(
      (Get[Int], Nullability.Nullable),
      (Get[ProductId], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[DocumentId], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PdocViewRow(
      id = Get[Int].unsafeGetNullable(rs, i + 0),
      productid = Get[ProductId].unsafeGetNullable(rs, i + 1),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 2),
      documentnode = Get[DocumentId].unsafeGetNullable(rs, i + 3)
    )
  )
}
