/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import cats.data.NonEmptyList
import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder
import org.postgresql.util.PGobject

/** anyarray (via PGObject) */
case class TypoAnyArray(value: String)

object TypoAnyArray {
  implicit val arrayGet: Get[Array[TypoAnyArray]] = Get.Advanced.array[AnyRef](NonEmptyList.one("_anyarray"))
    .map(_.map(v => TypoAnyArray(v.asInstanceOf[String])))
  implicit val arrayPut: Put[Array[TypoAnyArray]] = Put.Advanced.array[AnyRef](NonEmptyList.one("_anyarray"), "anyarray")
    .contramap(_.map(v => {
                            val obj = new PGobject
                            obj.setType("anyarray")
                            obj.setValue(v.value)
                            obj
                          }))
  implicit val decoder: Decoder[TypoAnyArray] = Decoder.forProduct1[TypoAnyArray, String]("value")(TypoAnyArray.apply)(Decoder.decodeString)
  implicit val encoder: Encoder[TypoAnyArray] = Encoder.forProduct1[TypoAnyArray, String]("value")(x => (x.value))(Encoder.encodeString)
  implicit val get: Get[TypoAnyArray] = Get.Advanced.other[PGobject](NonEmptyList.one("anyarray"))
    .map(v => TypoAnyArray(v.getValue))
  implicit val put: Put[TypoAnyArray] = Put.Advanced.other[PGobject](NonEmptyList.one("anyarray")).contramap(v => {
                                                                              val obj = new PGobject
                                                                              obj.setType("anyarray")
                                                                              obj.setValue(v.value)
                                                                              obj
                                                                            })
}
