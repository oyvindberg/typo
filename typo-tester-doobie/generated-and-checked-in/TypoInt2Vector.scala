/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import cats.data.NonEmptyList
import doobie.Get
import doobie.Meta
import doobie.Put
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import org.postgresql.util.PGobject

/** int2vector (via PGObject) */
case class TypoInt2Vector(value: String)
object TypoInt2Vector {
  implicit val decoder: Decoder[TypoInt2Vector] =
    (c: HCursor) =>
      for {
        value <- c.downField("value").as[String]
      } yield TypoInt2Vector(value)
  implicit val encoder: Encoder[TypoInt2Vector] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "value" := row.value
      )}
  implicit val get: Get[TypoInt2Vector] =
    Get.Advanced.other[PGobject](cats.data.NonEmptyList.one("int2vector"))
      .map(v => TypoInt2Vector(v.getValue))
  
  implicit val put: Put[TypoInt2Vector] =
    Put.Advanced.other[PGobject](NonEmptyList.one("int2vector"))
      .contramap(v => {
                        val obj = new PGobject
                        obj.setType("int2vector")
                        obj.setValue(v.value)
                        obj
                      })
  
  implicit val meta: Meta[TypoInt2Vector] = new Meta(get, put)
  val gets: Get[Array[TypoInt2Vector]] =
    Get.Advanced.array[AnyRef](NonEmptyList.one("_int2vector"))
      .map(_.map(v => TypoInt2Vector(v.asInstanceOf[String])))
  
  val puts: Put[Array[TypoInt2Vector]] =
    Put.Advanced.array[AnyRef](NonEmptyList.one("_int2vector"), "int2vector")
      .contramap(_.map(v => {
                              val obj = new PGobject
                              obj.setType("int2vector")
                              obj.setValue(v.value)
                              obj
                            }))
  
  implicit val metas: Meta[Array[TypoInt2Vector]] = new Meta(gets, puts)
}
