/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import adventureworks.humanresources.department.DepartmentId
import adventureworks.humanresources.department.DepartmentRepoImpl
import adventureworks.humanresources.department.DepartmentRow
import adventureworks.humanresources.department.DepartmentRowUnsaved
import adventureworks.humanresources.employee.EmployeeRepoImpl
import adventureworks.humanresources.employee.EmployeeRow
import adventureworks.humanresources.employee.EmployeeRowUnsaved
import adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRepoImpl
import adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRow
import adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryRowUnsaved
import adventureworks.humanresources.employeepayhistory.EmployeepayhistoryRepoImpl
import adventureworks.humanresources.employeepayhistory.EmployeepayhistoryRow
import adventureworks.humanresources.employeepayhistory.EmployeepayhistoryRowUnsaved
import adventureworks.humanresources.jobcandidate.JobcandidateId
import adventureworks.humanresources.jobcandidate.JobcandidateRepoImpl
import adventureworks.humanresources.jobcandidate.JobcandidateRow
import adventureworks.humanresources.jobcandidate.JobcandidateRowUnsaved
import adventureworks.humanresources.shift.ShiftId
import adventureworks.humanresources.shift.ShiftRepoImpl
import adventureworks.humanresources.shift.ShiftRow
import adventureworks.humanresources.shift.ShiftRowUnsaved
import adventureworks.information_schema.CardinalNumber
import adventureworks.information_schema.CharacterData
import adventureworks.information_schema.YesOrNo
import adventureworks.information_schema.sql_features.SqlFeaturesRepoImpl
import adventureworks.information_schema.sql_features.SqlFeaturesRow
import adventureworks.information_schema.sql_implementation_info.SqlImplementationInfoRepoImpl
import adventureworks.information_schema.sql_implementation_info.SqlImplementationInfoRow
import adventureworks.information_schema.sql_parts.SqlPartsRepoImpl
import adventureworks.information_schema.sql_parts.SqlPartsRow
import adventureworks.information_schema.sql_sizing.SqlSizingRepoImpl
import adventureworks.information_schema.sql_sizing.SqlSizingRow
import adventureworks.person.address.AddressId
import adventureworks.person.address.AddressRepoImpl
import adventureworks.person.address.AddressRow
import adventureworks.person.address.AddressRowUnsaved
import adventureworks.person.addresstype.AddresstypeId
import adventureworks.person.addresstype.AddresstypeRepoImpl
import adventureworks.person.addresstype.AddresstypeRow
import adventureworks.person.addresstype.AddresstypeRowUnsaved
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.businessentity.BusinessentityRepoImpl
import adventureworks.person.businessentity.BusinessentityRow
import adventureworks.person.businessentity.BusinessentityRowUnsaved
import adventureworks.person.businessentityaddress.BusinessentityaddressRepoImpl
import adventureworks.person.businessentityaddress.BusinessentityaddressRow
import adventureworks.person.businessentityaddress.BusinessentityaddressRowUnsaved
import adventureworks.person.businessentitycontact.BusinessentitycontactRepoImpl
import adventureworks.person.businessentitycontact.BusinessentitycontactRow
import adventureworks.person.businessentitycontact.BusinessentitycontactRowUnsaved
import adventureworks.person.contacttype.ContacttypeId
import adventureworks.person.contacttype.ContacttypeRepoImpl
import adventureworks.person.contacttype.ContacttypeRow
import adventureworks.person.contacttype.ContacttypeRowUnsaved
import adventureworks.person.countryregion.CountryregionId
import adventureworks.person.countryregion.CountryregionRepoImpl
import adventureworks.person.countryregion.CountryregionRow
import adventureworks.person.countryregion.CountryregionRowUnsaved
import adventureworks.person.emailaddress.EmailaddressRepoImpl
import adventureworks.person.emailaddress.EmailaddressRow
import adventureworks.person.emailaddress.EmailaddressRowUnsaved
import adventureworks.person.password.PasswordRepoImpl
import adventureworks.person.password.PasswordRow
import adventureworks.person.password.PasswordRowUnsaved
import adventureworks.person.person.PersonRepoImpl
import adventureworks.person.person.PersonRow
import adventureworks.person.person.PersonRowUnsaved
import adventureworks.person.personphone.PersonphoneRepoImpl
import adventureworks.person.personphone.PersonphoneRow
import adventureworks.person.personphone.PersonphoneRowUnsaved
import adventureworks.person.phonenumbertype.PhonenumbertypeId
import adventureworks.person.phonenumbertype.PhonenumbertypeRepoImpl
import adventureworks.person.phonenumbertype.PhonenumbertypeRow
import adventureworks.person.phonenumbertype.PhonenumbertypeRowUnsaved
import adventureworks.person.stateprovince.StateprovinceId
import adventureworks.person.stateprovince.StateprovinceRepoImpl
import adventureworks.person.stateprovince.StateprovinceRow
import adventureworks.person.stateprovince.StateprovinceRowUnsaved
import adventureworks.pg_catalog.pg_aggregate.PgAggregateId
import adventureworks.pg_catalog.pg_aggregate.PgAggregateRepoImpl
import adventureworks.pg_catalog.pg_aggregate.PgAggregateRow
import adventureworks.pg_catalog.pg_am.PgAmId
import adventureworks.pg_catalog.pg_am.PgAmRepoImpl
import adventureworks.pg_catalog.pg_am.PgAmRow
import adventureworks.pg_catalog.pg_amop.PgAmopId
import adventureworks.pg_catalog.pg_amop.PgAmopRepoImpl
import adventureworks.pg_catalog.pg_amop.PgAmopRow
import adventureworks.pg_catalog.pg_amproc.PgAmprocId
import adventureworks.pg_catalog.pg_amproc.PgAmprocRepoImpl
import adventureworks.pg_catalog.pg_amproc.PgAmprocRow
import adventureworks.pg_catalog.pg_attrdef.PgAttrdefId
import adventureworks.pg_catalog.pg_attrdef.PgAttrdefRepoImpl
import adventureworks.pg_catalog.pg_attrdef.PgAttrdefRow
import adventureworks.pg_catalog.pg_attribute.PgAttributeRepoImpl
import adventureworks.pg_catalog.pg_attribute.PgAttributeRow
import adventureworks.pg_catalog.pg_auth_members.PgAuthMembersRepoImpl
import adventureworks.pg_catalog.pg_auth_members.PgAuthMembersRow
import adventureworks.pg_catalog.pg_authid.PgAuthidId
import adventureworks.pg_catalog.pg_authid.PgAuthidRepoImpl
import adventureworks.pg_catalog.pg_authid.PgAuthidRow
import adventureworks.pg_catalog.pg_cast.PgCastId
import adventureworks.pg_catalog.pg_cast.PgCastRepoImpl
import adventureworks.pg_catalog.pg_cast.PgCastRow
import adventureworks.pg_catalog.pg_class.PgClassId
import adventureworks.pg_catalog.pg_class.PgClassRepoImpl
import adventureworks.pg_catalog.pg_class.PgClassRow
import adventureworks.pg_catalog.pg_collation.PgCollationId
import adventureworks.pg_catalog.pg_collation.PgCollationRepoImpl
import adventureworks.pg_catalog.pg_collation.PgCollationRow
import adventureworks.pg_catalog.pg_constraint.PgConstraintId
import adventureworks.pg_catalog.pg_constraint.PgConstraintRepoImpl
import adventureworks.pg_catalog.pg_constraint.PgConstraintRow
import adventureworks.pg_catalog.pg_conversion.PgConversionId
import adventureworks.pg_catalog.pg_conversion.PgConversionRepoImpl
import adventureworks.pg_catalog.pg_conversion.PgConversionRow
import adventureworks.pg_catalog.pg_database.PgDatabaseId
import adventureworks.pg_catalog.pg_database.PgDatabaseRepoImpl
import adventureworks.pg_catalog.pg_database.PgDatabaseRow
import adventureworks.pg_catalog.pg_db_role_setting.PgDbRoleSettingRepoImpl
import adventureworks.pg_catalog.pg_db_role_setting.PgDbRoleSettingRow
import adventureworks.pg_catalog.pg_default_acl.PgDefaultAclId
import adventureworks.pg_catalog.pg_default_acl.PgDefaultAclRepoImpl
import adventureworks.pg_catalog.pg_default_acl.PgDefaultAclRow
import adventureworks.pg_catalog.pg_depend.PgDependRepoImpl
import adventureworks.pg_catalog.pg_depend.PgDependRow
import adventureworks.pg_catalog.pg_description.PgDescriptionRepoImpl
import adventureworks.pg_catalog.pg_description.PgDescriptionRow
import adventureworks.pg_catalog.pg_enum.PgEnumId
import adventureworks.pg_catalog.pg_enum.PgEnumRepoImpl
import adventureworks.pg_catalog.pg_enum.PgEnumRow
import adventureworks.pg_catalog.pg_event_trigger.PgEventTriggerId
import adventureworks.pg_catalog.pg_event_trigger.PgEventTriggerRepoImpl
import adventureworks.pg_catalog.pg_event_trigger.PgEventTriggerRow
import adventureworks.pg_catalog.pg_extension.PgExtensionId
import adventureworks.pg_catalog.pg_extension.PgExtensionRepoImpl
import adventureworks.pg_catalog.pg_extension.PgExtensionRow
import adventureworks.pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperId
import adventureworks.pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperRepoImpl
import adventureworks.pg_catalog.pg_foreign_data_wrapper.PgForeignDataWrapperRow
import adventureworks.pg_catalog.pg_foreign_server.PgForeignServerId
import adventureworks.pg_catalog.pg_foreign_server.PgForeignServerRepoImpl
import adventureworks.pg_catalog.pg_foreign_server.PgForeignServerRow
import adventureworks.pg_catalog.pg_foreign_table.PgForeignTableId
import adventureworks.pg_catalog.pg_foreign_table.PgForeignTableRepoImpl
import adventureworks.pg_catalog.pg_foreign_table.PgForeignTableRow
import adventureworks.pg_catalog.pg_index.PgIndexId
import adventureworks.pg_catalog.pg_index.PgIndexRepoImpl
import adventureworks.pg_catalog.pg_index.PgIndexRow
import adventureworks.pg_catalog.pg_inherits.PgInheritsRepoImpl
import adventureworks.pg_catalog.pg_inherits.PgInheritsRow
import adventureworks.pg_catalog.pg_init_privs.PgInitPrivsRepoImpl
import adventureworks.pg_catalog.pg_init_privs.PgInitPrivsRow
import adventureworks.pg_catalog.pg_language.PgLanguageId
import adventureworks.pg_catalog.pg_language.PgLanguageRepoImpl
import adventureworks.pg_catalog.pg_language.PgLanguageRow
import adventureworks.pg_catalog.pg_largeobject.PgLargeobjectRepoImpl
import adventureworks.pg_catalog.pg_largeobject.PgLargeobjectRow
import adventureworks.pg_catalog.pg_largeobject_metadata.PgLargeobjectMetadataId
import adventureworks.pg_catalog.pg_largeobject_metadata.PgLargeobjectMetadataRepoImpl
import adventureworks.pg_catalog.pg_largeobject_metadata.PgLargeobjectMetadataRow
import adventureworks.pg_catalog.pg_namespace.PgNamespaceId
import adventureworks.pg_catalog.pg_namespace.PgNamespaceRepoImpl
import adventureworks.pg_catalog.pg_namespace.PgNamespaceRow
import adventureworks.pg_catalog.pg_opclass.PgOpclassId
import adventureworks.pg_catalog.pg_opclass.PgOpclassRepoImpl
import adventureworks.pg_catalog.pg_opclass.PgOpclassRow
import adventureworks.pg_catalog.pg_operator.PgOperatorId
import adventureworks.pg_catalog.pg_operator.PgOperatorRepoImpl
import adventureworks.pg_catalog.pg_operator.PgOperatorRow
import adventureworks.pg_catalog.pg_opfamily.PgOpfamilyId
import adventureworks.pg_catalog.pg_opfamily.PgOpfamilyRepoImpl
import adventureworks.pg_catalog.pg_opfamily.PgOpfamilyRow
import adventureworks.pg_catalog.pg_partitioned_table.PgPartitionedTableId
import adventureworks.pg_catalog.pg_partitioned_table.PgPartitionedTableRepoImpl
import adventureworks.pg_catalog.pg_partitioned_table.PgPartitionedTableRow
import adventureworks.pg_catalog.pg_policy.PgPolicyId
import adventureworks.pg_catalog.pg_policy.PgPolicyRepoImpl
import adventureworks.pg_catalog.pg_policy.PgPolicyRow
import adventureworks.pg_catalog.pg_proc.PgProcId
import adventureworks.pg_catalog.pg_proc.PgProcRepoImpl
import adventureworks.pg_catalog.pg_proc.PgProcRow
import adventureworks.pg_catalog.pg_publication.PgPublicationId
import adventureworks.pg_catalog.pg_publication.PgPublicationRepoImpl
import adventureworks.pg_catalog.pg_publication.PgPublicationRow
import adventureworks.pg_catalog.pg_publication_rel.PgPublicationRelId
import adventureworks.pg_catalog.pg_publication_rel.PgPublicationRelRepoImpl
import adventureworks.pg_catalog.pg_publication_rel.PgPublicationRelRow
import adventureworks.pg_catalog.pg_range.PgRangeId
import adventureworks.pg_catalog.pg_range.PgRangeRepoImpl
import adventureworks.pg_catalog.pg_range.PgRangeRow
import adventureworks.pg_catalog.pg_replication_origin.PgReplicationOriginId
import adventureworks.pg_catalog.pg_replication_origin.PgReplicationOriginRepoImpl
import adventureworks.pg_catalog.pg_replication_origin.PgReplicationOriginRow
import adventureworks.pg_catalog.pg_rewrite.PgRewriteId
import adventureworks.pg_catalog.pg_rewrite.PgRewriteRepoImpl
import adventureworks.pg_catalog.pg_rewrite.PgRewriteRow
import adventureworks.pg_catalog.pg_seclabel.PgSeclabelRepoImpl
import adventureworks.pg_catalog.pg_seclabel.PgSeclabelRow
import adventureworks.pg_catalog.pg_sequence.PgSequenceId
import adventureworks.pg_catalog.pg_sequence.PgSequenceRepoImpl
import adventureworks.pg_catalog.pg_sequence.PgSequenceRow
import adventureworks.pg_catalog.pg_shdepend.PgShdependRepoImpl
import adventureworks.pg_catalog.pg_shdepend.PgShdependRow
import adventureworks.pg_catalog.pg_shdescription.PgShdescriptionRepoImpl
import adventureworks.pg_catalog.pg_shdescription.PgShdescriptionRow
import adventureworks.pg_catalog.pg_shseclabel.PgShseclabelRepoImpl
import adventureworks.pg_catalog.pg_shseclabel.PgShseclabelRow
import adventureworks.pg_catalog.pg_statistic.PgStatisticRepoImpl
import adventureworks.pg_catalog.pg_statistic.PgStatisticRow
import adventureworks.pg_catalog.pg_statistic_ext.PgStatisticExtId
import adventureworks.pg_catalog.pg_statistic_ext.PgStatisticExtRepoImpl
import adventureworks.pg_catalog.pg_statistic_ext.PgStatisticExtRow
import adventureworks.pg_catalog.pg_statistic_ext_data.PgStatisticExtDataId
import adventureworks.pg_catalog.pg_statistic_ext_data.PgStatisticExtDataRepoImpl
import adventureworks.pg_catalog.pg_statistic_ext_data.PgStatisticExtDataRow
import adventureworks.pg_catalog.pg_subscription.PgSubscriptionId
import adventureworks.pg_catalog.pg_subscription.PgSubscriptionRepoImpl
import adventureworks.pg_catalog.pg_subscription.PgSubscriptionRow
import adventureworks.pg_catalog.pg_subscription_rel.PgSubscriptionRelRepoImpl
import adventureworks.pg_catalog.pg_subscription_rel.PgSubscriptionRelRow
import adventureworks.pg_catalog.pg_tablespace.PgTablespaceId
import adventureworks.pg_catalog.pg_tablespace.PgTablespaceRepoImpl
import adventureworks.pg_catalog.pg_tablespace.PgTablespaceRow
import adventureworks.pg_catalog.pg_transform.PgTransformId
import adventureworks.pg_catalog.pg_transform.PgTransformRepoImpl
import adventureworks.pg_catalog.pg_transform.PgTransformRow
import adventureworks.pg_catalog.pg_trigger.PgTriggerId
import adventureworks.pg_catalog.pg_trigger.PgTriggerRepoImpl
import adventureworks.pg_catalog.pg_trigger.PgTriggerRow
import adventureworks.pg_catalog.pg_ts_config.PgTsConfigId
import adventureworks.pg_catalog.pg_ts_config.PgTsConfigRepoImpl
import adventureworks.pg_catalog.pg_ts_config.PgTsConfigRow
import adventureworks.pg_catalog.pg_ts_config_map.PgTsConfigMapRepoImpl
import adventureworks.pg_catalog.pg_ts_config_map.PgTsConfigMapRow
import adventureworks.pg_catalog.pg_ts_dict.PgTsDictId
import adventureworks.pg_catalog.pg_ts_dict.PgTsDictRepoImpl
import adventureworks.pg_catalog.pg_ts_dict.PgTsDictRow
import adventureworks.pg_catalog.pg_ts_parser.PgTsParserId
import adventureworks.pg_catalog.pg_ts_parser.PgTsParserRepoImpl
import adventureworks.pg_catalog.pg_ts_parser.PgTsParserRow
import adventureworks.pg_catalog.pg_ts_template.PgTsTemplateId
import adventureworks.pg_catalog.pg_ts_template.PgTsTemplateRepoImpl
import adventureworks.pg_catalog.pg_ts_template.PgTsTemplateRow
import adventureworks.pg_catalog.pg_type.PgTypeId
import adventureworks.pg_catalog.pg_type.PgTypeRepoImpl
import adventureworks.pg_catalog.pg_type.PgTypeRow
import adventureworks.pg_catalog.pg_user_mapping.PgUserMappingId
import adventureworks.pg_catalog.pg_user_mapping.PgUserMappingRepoImpl
import adventureworks.pg_catalog.pg_user_mapping.PgUserMappingRow
import adventureworks.production.billofmaterials.BillofmaterialsId
import adventureworks.production.billofmaterials.BillofmaterialsRepoImpl
import adventureworks.production.billofmaterials.BillofmaterialsRow
import adventureworks.production.billofmaterials.BillofmaterialsRowUnsaved
import adventureworks.production.culture.CultureId
import adventureworks.production.culture.CultureRepoImpl
import adventureworks.production.culture.CultureRow
import adventureworks.production.culture.CultureRowUnsaved
import adventureworks.production.document.DocumentId
import adventureworks.production.document.DocumentRepoImpl
import adventureworks.production.document.DocumentRow
import adventureworks.production.document.DocumentRowUnsaved
import adventureworks.production.illustration.IllustrationId
import adventureworks.production.illustration.IllustrationRepoImpl
import adventureworks.production.illustration.IllustrationRow
import adventureworks.production.illustration.IllustrationRowUnsaved
import adventureworks.production.location.LocationId
import adventureworks.production.location.LocationRepoImpl
import adventureworks.production.location.LocationRow
import adventureworks.production.location.LocationRowUnsaved
import adventureworks.production.product.ProductId
import adventureworks.production.product.ProductRepoImpl
import adventureworks.production.product.ProductRow
import adventureworks.production.product.ProductRowUnsaved
import adventureworks.production.productcategory.ProductcategoryId
import adventureworks.production.productcategory.ProductcategoryRepoImpl
import adventureworks.production.productcategory.ProductcategoryRow
import adventureworks.production.productcategory.ProductcategoryRowUnsaved
import adventureworks.production.productcosthistory.ProductcosthistoryRepoImpl
import adventureworks.production.productcosthistory.ProductcosthistoryRow
import adventureworks.production.productcosthistory.ProductcosthistoryRowUnsaved
import adventureworks.production.productdescription.ProductdescriptionId
import adventureworks.production.productdescription.ProductdescriptionRepoImpl
import adventureworks.production.productdescription.ProductdescriptionRow
import adventureworks.production.productdescription.ProductdescriptionRowUnsaved
import adventureworks.production.productdocument.ProductdocumentRepoImpl
import adventureworks.production.productdocument.ProductdocumentRow
import adventureworks.production.productdocument.ProductdocumentRowUnsaved
import adventureworks.production.productinventory.ProductinventoryRepoImpl
import adventureworks.production.productinventory.ProductinventoryRow
import adventureworks.production.productinventory.ProductinventoryRowUnsaved
import adventureworks.production.productlistpricehistory.ProductlistpricehistoryRepoImpl
import adventureworks.production.productlistpricehistory.ProductlistpricehistoryRow
import adventureworks.production.productlistpricehistory.ProductlistpricehistoryRowUnsaved
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productmodel.ProductmodelRepoImpl
import adventureworks.production.productmodel.ProductmodelRow
import adventureworks.production.productmodel.ProductmodelRowUnsaved
import adventureworks.production.productmodelillustration.ProductmodelillustrationRepoImpl
import adventureworks.production.productmodelillustration.ProductmodelillustrationRow
import adventureworks.production.productmodelillustration.ProductmodelillustrationRowUnsaved
import adventureworks.production.productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRepoImpl
import adventureworks.production.productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRow
import adventureworks.production.productmodelproductdescriptionculture.ProductmodelproductdescriptioncultureRowUnsaved
import adventureworks.production.productphoto.ProductphotoId
import adventureworks.production.productphoto.ProductphotoRepoImpl
import adventureworks.production.productphoto.ProductphotoRow
import adventureworks.production.productphoto.ProductphotoRowUnsaved
import adventureworks.production.productproductphoto.ProductproductphotoRepoImpl
import adventureworks.production.productproductphoto.ProductproductphotoRow
import adventureworks.production.productproductphoto.ProductproductphotoRowUnsaved
import adventureworks.production.productreview.ProductreviewId
import adventureworks.production.productreview.ProductreviewRepoImpl
import adventureworks.production.productreview.ProductreviewRow
import adventureworks.production.productreview.ProductreviewRowUnsaved
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.productsubcategory.ProductsubcategoryRepoImpl
import adventureworks.production.productsubcategory.ProductsubcategoryRow
import adventureworks.production.productsubcategory.ProductsubcategoryRowUnsaved
import adventureworks.production.scrapreason.ScrapreasonId
import adventureworks.production.scrapreason.ScrapreasonRepoImpl
import adventureworks.production.scrapreason.ScrapreasonRow
import adventureworks.production.scrapreason.ScrapreasonRowUnsaved
import adventureworks.production.transactionhistory.TransactionhistoryId
import adventureworks.production.transactionhistory.TransactionhistoryRepoImpl
import adventureworks.production.transactionhistory.TransactionhistoryRow
import adventureworks.production.transactionhistory.TransactionhistoryRowUnsaved
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveId
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveRepoImpl
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveRow
import adventureworks.production.transactionhistoryarchive.TransactionhistoryarchiveRowUnsaved
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.production.unitmeasure.UnitmeasureRepoImpl
import adventureworks.production.unitmeasure.UnitmeasureRow
import adventureworks.production.unitmeasure.UnitmeasureRowUnsaved
import adventureworks.production.workorder.WorkorderId
import adventureworks.production.workorder.WorkorderRepoImpl
import adventureworks.production.workorder.WorkorderRow
import adventureworks.production.workorder.WorkorderRowUnsaved
import adventureworks.production.workorderrouting.WorkorderroutingRepoImpl
import adventureworks.production.workorderrouting.WorkorderroutingRow
import adventureworks.production.workorderrouting.WorkorderroutingRowUnsaved
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import adventureworks.public.NameStyle
import adventureworks.public.OrderNumber
import adventureworks.public.Phone
import adventureworks.public.pgtest.PgtestRepoImpl
import adventureworks.public.pgtest.PgtestRow
import adventureworks.public.pgtestnull.PgtestnullRepoImpl
import adventureworks.public.pgtestnull.PgtestnullRow
import adventureworks.purchasing.productvendor.ProductvendorRepoImpl
import adventureworks.purchasing.productvendor.ProductvendorRow
import adventureworks.purchasing.productvendor.ProductvendorRowUnsaved
import adventureworks.purchasing.purchaseorderdetail.PurchaseorderdetailRepoImpl
import adventureworks.purchasing.purchaseorderdetail.PurchaseorderdetailRow
import adventureworks.purchasing.purchaseorderdetail.PurchaseorderdetailRowUnsaved
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderRepoImpl
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderRow
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderRowUnsaved
import adventureworks.purchasing.shipmethod.ShipmethodId
import adventureworks.purchasing.shipmethod.ShipmethodRepoImpl
import adventureworks.purchasing.shipmethod.ShipmethodRow
import adventureworks.purchasing.shipmethod.ShipmethodRowUnsaved
import adventureworks.purchasing.vendor.VendorRepoImpl
import adventureworks.purchasing.vendor.VendorRow
import adventureworks.purchasing.vendor.VendorRowUnsaved
import adventureworks.sales.countryregioncurrency.CountryregioncurrencyRepoImpl
import adventureworks.sales.countryregioncurrency.CountryregioncurrencyRow
import adventureworks.sales.countryregioncurrency.CountryregioncurrencyRowUnsaved
import adventureworks.sales.creditcard.CreditcardId
import adventureworks.sales.creditcard.CreditcardRepoImpl
import adventureworks.sales.creditcard.CreditcardRow
import adventureworks.sales.creditcard.CreditcardRowUnsaved
import adventureworks.sales.currency.CurrencyId
import adventureworks.sales.currency.CurrencyRepoImpl
import adventureworks.sales.currency.CurrencyRow
import adventureworks.sales.currency.CurrencyRowUnsaved
import adventureworks.sales.currencyrate.CurrencyrateId
import adventureworks.sales.currencyrate.CurrencyrateRepoImpl
import adventureworks.sales.currencyrate.CurrencyrateRow
import adventureworks.sales.currencyrate.CurrencyrateRowUnsaved
import adventureworks.sales.customer.CustomerId
import adventureworks.sales.customer.CustomerRepoImpl
import adventureworks.sales.customer.CustomerRow
import adventureworks.sales.customer.CustomerRowUnsaved
import adventureworks.sales.personcreditcard.PersoncreditcardRepoImpl
import adventureworks.sales.personcreditcard.PersoncreditcardRow
import adventureworks.sales.personcreditcard.PersoncreditcardRowUnsaved
import adventureworks.sales.salesorderdetail.SalesorderdetailRepoImpl
import adventureworks.sales.salesorderdetail.SalesorderdetailRow
import adventureworks.sales.salesorderdetail.SalesorderdetailRowUnsaved
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.salesorderheader.SalesorderheaderRepoImpl
import adventureworks.sales.salesorderheader.SalesorderheaderRow
import adventureworks.sales.salesorderheader.SalesorderheaderRowUnsaved
import adventureworks.sales.salesorderheadersalesreason.SalesorderheadersalesreasonRepoImpl
import adventureworks.sales.salesorderheadersalesreason.SalesorderheadersalesreasonRow
import adventureworks.sales.salesorderheadersalesreason.SalesorderheadersalesreasonRowUnsaved
import adventureworks.sales.salesperson.SalespersonRepoImpl
import adventureworks.sales.salesperson.SalespersonRow
import adventureworks.sales.salesperson.SalespersonRowUnsaved
import adventureworks.sales.salespersonquotahistory.SalespersonquotahistoryRepoImpl
import adventureworks.sales.salespersonquotahistory.SalespersonquotahistoryRow
import adventureworks.sales.salespersonquotahistory.SalespersonquotahistoryRowUnsaved
import adventureworks.sales.salesreason.SalesreasonId
import adventureworks.sales.salesreason.SalesreasonRepoImpl
import adventureworks.sales.salesreason.SalesreasonRow
import adventureworks.sales.salesreason.SalesreasonRowUnsaved
import adventureworks.sales.salestaxrate.SalestaxrateId
import adventureworks.sales.salestaxrate.SalestaxrateRepoImpl
import adventureworks.sales.salestaxrate.SalestaxrateRow
import adventureworks.sales.salestaxrate.SalestaxrateRowUnsaved
import adventureworks.sales.salesterritory.SalesterritoryId
import adventureworks.sales.salesterritory.SalesterritoryRepoImpl
import adventureworks.sales.salesterritory.SalesterritoryRow
import adventureworks.sales.salesterritory.SalesterritoryRowUnsaved
import adventureworks.sales.salesterritoryhistory.SalesterritoryhistoryRepoImpl
import adventureworks.sales.salesterritoryhistory.SalesterritoryhistoryRow
import adventureworks.sales.salesterritoryhistory.SalesterritoryhistoryRowUnsaved
import adventureworks.sales.shoppingcartitem.ShoppingcartitemId
import adventureworks.sales.shoppingcartitem.ShoppingcartitemRepoImpl
import adventureworks.sales.shoppingcartitem.ShoppingcartitemRow
import adventureworks.sales.shoppingcartitem.ShoppingcartitemRowUnsaved
import adventureworks.sales.specialoffer.SpecialofferId
import adventureworks.sales.specialoffer.SpecialofferRepoImpl
import adventureworks.sales.specialoffer.SpecialofferRow
import adventureworks.sales.specialoffer.SpecialofferRowUnsaved
import adventureworks.sales.specialofferproduct.SpecialofferproductRepoImpl
import adventureworks.sales.specialofferproduct.SpecialofferproductRow
import adventureworks.sales.specialofferproduct.SpecialofferproductRowUnsaved
import adventureworks.sales.store.StoreRepoImpl
import adventureworks.sales.store.StoreRow
import adventureworks.sales.store.StoreRowUnsaved
import doobie.free.connection.ConnectionIO
import java.util.UUID

object testInsert {
  def humanresourcesDepartment(name: Name, groupname: Name, departmentid: Defaulted[DepartmentId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[DepartmentRow] = DepartmentRepoImpl.insert(new DepartmentRowUnsaved(name = name, groupname = groupname, departmentid = departmentid, modifieddate = modifieddate))
  def humanresourcesEmployee(businessentityid: BusinessentityId, nationalidnumber: /* max 15 chars */ String = "nationalidnumbe", loginid: /* max 256 chars */ String = "loginid", jobtitle: /* max 50 chars */ String = "jobtitle", birthdate: TypoLocalDate = TypoLocalDate.now, maritalstatus: /* bpchar */ String = "maritalstatus", gender: /* bpchar */ String = "gender", hiredate: TypoLocalDate = TypoLocalDate.now, salariedflag: Defaulted[Flag] = Defaulted.UseDefault, vacationhours: Defaulted[Int] = Defaulted.UseDefault, sickleavehours: Defaulted[Int] = Defaulted.UseDefault, currentflag: Defaulted[Flag] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, organizationnode: Defaulted[Option[String]] = Defaulted.UseDefault): ConnectionIO[EmployeeRow] = EmployeeRepoImpl.insert(new EmployeeRowUnsaved(businessentityid = businessentityid, nationalidnumber = nationalidnumber, loginid = loginid, jobtitle = jobtitle, birthdate = birthdate, maritalstatus = maritalstatus, gender = gender, hiredate = hiredate, salariedflag = salariedflag, vacationhours = vacationhours, sickleavehours = sickleavehours, currentflag = currentflag, rowguid = rowguid, modifieddate = modifieddate, organizationnode = organizationnode))
  def humanresourcesEmployeedepartmenthistory(businessentityid: BusinessentityId, departmentid: DepartmentId, shiftid: ShiftId, startdate: TypoLocalDate = TypoLocalDate.now, enddate: Option[TypoLocalDate] = None, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[EmployeedepartmenthistoryRow] = EmployeedepartmenthistoryRepoImpl.insert(new EmployeedepartmenthistoryRowUnsaved(businessentityid = businessentityid, departmentid = departmentid, shiftid = shiftid, startdate = startdate, enddate = enddate, modifieddate = modifieddate))
  def humanresourcesEmployeepayhistory(businessentityid: BusinessentityId, rate: BigDecimal, ratechangedate: TypoLocalDateTime = TypoLocalDateTime.now, payfrequency: Int = 1, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[EmployeepayhistoryRow] = EmployeepayhistoryRepoImpl.insert(new EmployeepayhistoryRowUnsaved(businessentityid = businessentityid, rate = rate, ratechangedate = ratechangedate, payfrequency = payfrequency, modifieddate = modifieddate))
  def humanresourcesJobcandidate(businessentityid: Option[BusinessentityId] = None, resume: Option[TypoXml] = None, jobcandidateid: Defaulted[JobcandidateId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[JobcandidateRow] = JobcandidateRepoImpl.insert(new JobcandidateRowUnsaved(businessentityid = businessentityid, resume = resume, jobcandidateid = jobcandidateid, modifieddate = modifieddate))
  def humanresourcesShift(name: Name, starttime: TypoLocalTime = TypoLocalTime.now, endtime: TypoLocalTime = TypoLocalTime.now, shiftid: Defaulted[ShiftId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ShiftRow] = ShiftRepoImpl.insert(new ShiftRowUnsaved(name = name, starttime = starttime, endtime = endtime, shiftid = shiftid, modifieddate = modifieddate))
  def informationSchemaSqlFeatures(featureId: Option[CharacterData] = None, featureName: Option[CharacterData] = None, subFeatureId: Option[CharacterData] = None, subFeatureName: Option[CharacterData] = None, isSupported: Option[YesOrNo] = None, isVerifiedBy: Option[CharacterData] = None, comments: Option[CharacterData] = None): ConnectionIO[SqlFeaturesRow] = SqlFeaturesRepoImpl.insert(new SqlFeaturesRow(featureId = featureId, featureName = featureName, subFeatureId = subFeatureId, subFeatureName = subFeatureName, isSupported = isSupported, isVerifiedBy = isVerifiedBy, comments = comments))
  def informationSchemaSqlImplementationInfo(implementationInfoId: Option[CharacterData] = None, implementationInfoName: Option[CharacterData] = None, integerValue: Option[CardinalNumber] = None, characterValue: Option[CharacterData] = None, comments: Option[CharacterData] = None): ConnectionIO[SqlImplementationInfoRow] = SqlImplementationInfoRepoImpl.insert(new SqlImplementationInfoRow(implementationInfoId = implementationInfoId, implementationInfoName = implementationInfoName, integerValue = integerValue, characterValue = characterValue, comments = comments))
  def informationSchemaSqlParts(featureId: Option[CharacterData] = None, featureName: Option[CharacterData] = None, isSupported: Option[YesOrNo] = None, isVerifiedBy: Option[CharacterData] = None, comments: Option[CharacterData] = None): ConnectionIO[SqlPartsRow] = SqlPartsRepoImpl.insert(new SqlPartsRow(featureId = featureId, featureName = featureName, isSupported = isSupported, isVerifiedBy = isVerifiedBy, comments = comments))
  def informationSchemaSqlSizing(sizingId: Option[CardinalNumber] = None, sizingName: Option[CharacterData] = None, supportedValue: Option[CardinalNumber] = None, comments: Option[CharacterData] = None): ConnectionIO[SqlSizingRow] = SqlSizingRepoImpl.insert(new SqlSizingRow(sizingId = sizingId, sizingName = sizingName, supportedValue = supportedValue, comments = comments))
  def personAddress(stateprovinceid: StateprovinceId, addressline1: /* max 60 chars */ String = "addressline1", addressline2: Option[/* max 60 chars */ String] = None, city: /* max 30 chars */ String = "city", postalcode: /* max 15 chars */ String = "postalcode", spatiallocation: Option[Array[Byte]] = None, addressid: Defaulted[AddressId] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[AddressRow] = AddressRepoImpl.insert(new AddressRowUnsaved(stateprovinceid = stateprovinceid, addressline1 = addressline1, addressline2 = addressline2, city = city, postalcode = postalcode, spatiallocation = spatiallocation, addressid = addressid, rowguid = rowguid, modifieddate = modifieddate))
  def personAddresstype(name: Name, addresstypeid: Defaulted[AddresstypeId] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[AddresstypeRow] = AddresstypeRepoImpl.insert(new AddresstypeRowUnsaved(name = name, addresstypeid = addresstypeid, rowguid = rowguid, modifieddate = modifieddate))
  def personBusinessentity(businessentityid: Defaulted[BusinessentityId] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[BusinessentityRow] = BusinessentityRepoImpl.insert(new BusinessentityRowUnsaved(businessentityid = businessentityid, rowguid = rowguid, modifieddate = modifieddate))
  def personBusinessentityaddress(businessentityid: BusinessentityId, addressid: AddressId, addresstypeid: AddresstypeId, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[BusinessentityaddressRow] = BusinessentityaddressRepoImpl.insert(new BusinessentityaddressRowUnsaved(businessentityid = businessentityid, addressid = addressid, addresstypeid = addresstypeid, rowguid = rowguid, modifieddate = modifieddate))
  def personBusinessentitycontact(businessentityid: BusinessentityId, personid: BusinessentityId, contacttypeid: ContacttypeId, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[BusinessentitycontactRow] = BusinessentitycontactRepoImpl.insert(new BusinessentitycontactRowUnsaved(businessentityid = businessentityid, personid = personid, contacttypeid = contacttypeid, rowguid = rowguid, modifieddate = modifieddate))
  def personContacttype(name: Name, contacttypeid: Defaulted[ContacttypeId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ContacttypeRow] = ContacttypeRepoImpl.insert(new ContacttypeRowUnsaved(name = name, contacttypeid = contacttypeid, modifieddate = modifieddate))
  def personCountryregion(countryregioncode: CountryregionId, name: Name, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[CountryregionRow] = CountryregionRepoImpl.insert(new CountryregionRowUnsaved(countryregioncode = countryregioncode, name = name, modifieddate = modifieddate))
  def personEmailaddress(businessentityid: BusinessentityId, emailaddress: Option[/* max 50 chars */ String] = None, emailaddressid: Defaulted[Int] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[EmailaddressRow] = EmailaddressRepoImpl.insert(new EmailaddressRowUnsaved(businessentityid = businessentityid, emailaddress = emailaddress, emailaddressid = emailaddressid, rowguid = rowguid, modifieddate = modifieddate))
  def personPassword(businessentityid: BusinessentityId, passwordhash: /* max 128 chars */ String = "passwordhash", passwordsalt: /* max 10 chars */ String = "passwordsa", rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[PasswordRow] = PasswordRepoImpl.insert(new PasswordRowUnsaved(businessentityid = businessentityid, passwordhash = passwordhash, passwordsalt = passwordsalt, rowguid = rowguid, modifieddate = modifieddate))
  def personPerson(businessentityid: BusinessentityId, firstname: Name, lastname: Name, persontype: /* bpchar */ String = "persontype", title: Option[/* max 8 chars */ String] = None, middlename: Option[Name] = None, suffix: Option[/* max 10 chars */ String] = None, additionalcontactinfo: Option[TypoXml] = None, demographics: Option[TypoXml] = None, namestyle: Defaulted[NameStyle] = Defaulted.UseDefault, emailpromotion: Defaulted[Int] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[PersonRow] = PersonRepoImpl.insert(new PersonRowUnsaved(businessentityid = businessentityid, firstname = firstname, lastname = lastname, persontype = persontype, title = title, middlename = middlename, suffix = suffix, additionalcontactinfo = additionalcontactinfo, demographics = demographics, namestyle = namestyle, emailpromotion = emailpromotion, rowguid = rowguid, modifieddate = modifieddate))
  def personPersonphone(businessentityid: BusinessentityId, phonenumber: Phone, phonenumbertypeid: PhonenumbertypeId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[PersonphoneRow] = PersonphoneRepoImpl.insert(new PersonphoneRowUnsaved(businessentityid = businessentityid, phonenumber = phonenumber, phonenumbertypeid = phonenumbertypeid, modifieddate = modifieddate))
  def personPhonenumbertype(name: Name, phonenumbertypeid: Defaulted[PhonenumbertypeId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[PhonenumbertypeRow] = PhonenumbertypeRepoImpl.insert(new PhonenumbertypeRowUnsaved(name = name, phonenumbertypeid = phonenumbertypeid, modifieddate = modifieddate))
  def personStateprovince(countryregioncode: CountryregionId, name: Name, territoryid: SalesterritoryId, stateprovincecode: /* bpchar */ String = "stateprovincecode", stateprovinceid: Defaulted[StateprovinceId] = Defaulted.UseDefault, isonlystateprovinceflag: Defaulted[Flag] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[StateprovinceRow] = StateprovinceRepoImpl.insert(new StateprovinceRowUnsaved(countryregioncode = countryregioncode, name = name, territoryid = territoryid, stateprovincecode = stateprovincecode, stateprovinceid = stateprovinceid, isonlystateprovinceflag = isonlystateprovinceflag, rowguid = rowguid, modifieddate = modifieddate))
  def pgCatalogPgAggregate(aggfnoid: PgAggregateId, aggtransfn: TypoRegproc, aggfinalfn: TypoRegproc, aggcombinefn: TypoRegproc, aggserialfn: TypoRegproc, aggdeserialfn: TypoRegproc, aggmtransfn: TypoRegproc, aggminvtransfn: TypoRegproc, aggmfinalfn: TypoRegproc, aggkind: String = "aggkind", aggnumdirectargs: Int = 1, aggfinalextra: Boolean = false, aggmfinalextra: Boolean = false, aggfinalmodify: String = "aggfinalmodify", aggmfinalmodify: String = "aggmfinalmodify", aggsortop: /* oid */ Long = 1L, aggtranstype: /* oid */ Long = 1L, aggtransspace: Int = 1, aggmtranstype: /* oid */ Long = 1L, aggmtransspace: Int = 1, agginitval: Option[String] = None, aggminitval: Option[String] = None): ConnectionIO[PgAggregateRow] = PgAggregateRepoImpl.insert(new PgAggregateRow(aggfnoid = aggfnoid, aggtransfn = aggtransfn, aggfinalfn = aggfinalfn, aggcombinefn = aggcombinefn, aggserialfn = aggserialfn, aggdeserialfn = aggdeserialfn, aggmtransfn = aggmtransfn, aggminvtransfn = aggminvtransfn, aggmfinalfn = aggmfinalfn, aggkind = aggkind, aggnumdirectargs = aggnumdirectargs, aggfinalextra = aggfinalextra, aggmfinalextra = aggmfinalextra, aggfinalmodify = aggfinalmodify, aggmfinalmodify = aggmfinalmodify, aggsortop = aggsortop, aggtranstype = aggtranstype, aggtransspace = aggtransspace, aggmtranstype = aggmtranstype, aggmtransspace = aggmtransspace, agginitval = agginitval, aggminitval = aggminitval))
  def pgCatalogPgAm(oid: PgAmId, amhandler: TypoRegproc, amname: String = "amname", amtype: String = "amtype"): ConnectionIO[PgAmRow] = PgAmRepoImpl.insert(new PgAmRow(oid = oid, amhandler = amhandler, amname = amname, amtype = amtype))
  def pgCatalogPgAmop(oid: PgAmopId, amopfamily: /* oid */ Long = 1L, amoplefttype: /* oid */ Long = 1L, amoprighttype: /* oid */ Long = 1L, amopstrategy: Int = 1, amoppurpose: String = "amoppurpose", amopopr: /* oid */ Long = 1L, amopmethod: /* oid */ Long = 1L, amopsortfamily: /* oid */ Long = 1L): ConnectionIO[PgAmopRow] = PgAmopRepoImpl.insert(new PgAmopRow(oid = oid, amopfamily = amopfamily, amoplefttype = amoplefttype, amoprighttype = amoprighttype, amopstrategy = amopstrategy, amoppurpose = amoppurpose, amopopr = amopopr, amopmethod = amopmethod, amopsortfamily = amopsortfamily))
  def pgCatalogPgAmproc(oid: PgAmprocId, amproc: TypoRegproc, amprocfamily: /* oid */ Long = 1L, amproclefttype: /* oid */ Long = 1L, amprocrighttype: /* oid */ Long = 1L, amprocnum: Int = 1): ConnectionIO[PgAmprocRow] = PgAmprocRepoImpl.insert(new PgAmprocRow(oid = oid, amproc = amproc, amprocfamily = amprocfamily, amproclefttype = amproclefttype, amprocrighttype = amprocrighttype, amprocnum = amprocnum))
  def pgCatalogPgAttrdef(oid: PgAttrdefId, adbin: TypoPgNodeTree, adrelid: /* oid */ Long = 1L, adnum: Int = 1): ConnectionIO[PgAttrdefRow] = PgAttrdefRepoImpl.insert(new PgAttrdefRow(oid = oid, adbin = adbin, adrelid = adrelid, adnum = adnum))
  def pgCatalogPgAttribute(attrelid: /* oid */ Long = 1L, attname: String = "attname", atttypid: /* oid */ Long = 1L, attstattarget: Int = 1, attlen: Int = 1, attnum: Int = 1, attndims: Int = 1, attcacheoff: Int = 1, atttypmod: Int = 1, attbyval: Boolean = false, attalign: String = "attalign", attstorage: String = "attstorage", attcompression: String = "attcompression", attnotnull: Boolean = false, atthasdef: Boolean = false, atthasmissing: Boolean = false, attidentity: String = "attidentity", attgenerated: String = "attgenerated", attisdropped: Boolean = false, attislocal: Boolean = false, attinhcount: Int = 1, attcollation: /* oid */ Long = 1L, attacl: Option[Array[TypoAclItem]] = None, attoptions: Option[Array[String]] = None, attfdwoptions: Option[Array[String]] = None, attmissingval: Option[TypoAnyArray] = None): ConnectionIO[PgAttributeRow] = PgAttributeRepoImpl.insert(new PgAttributeRow(attrelid = attrelid, attname = attname, atttypid = atttypid, attstattarget = attstattarget, attlen = attlen, attnum = attnum, attndims = attndims, attcacheoff = attcacheoff, atttypmod = atttypmod, attbyval = attbyval, attalign = attalign, attstorage = attstorage, attcompression = attcompression, attnotnull = attnotnull, atthasdef = atthasdef, atthasmissing = atthasmissing, attidentity = attidentity, attgenerated = attgenerated, attisdropped = attisdropped, attislocal = attislocal, attinhcount = attinhcount, attcollation = attcollation, attacl = attacl, attoptions = attoptions, attfdwoptions = attfdwoptions, attmissingval = attmissingval))
  def pgCatalogPgAuthMembers(roleid: /* oid */ Long = 1L, member: /* oid */ Long = 1L, grantor: /* oid */ Long = 1L, adminOption: Boolean = false): ConnectionIO[PgAuthMembersRow] = PgAuthMembersRepoImpl.insert(new PgAuthMembersRow(roleid = roleid, member = member, grantor = grantor, adminOption = adminOption))
  def pgCatalogPgAuthid(oid: PgAuthidId, rolname: String = "rolname", rolsuper: Boolean = false, rolinherit: Boolean = false, rolcreaterole: Boolean = false, rolcreatedb: Boolean = false, rolcanlogin: Boolean = false, rolreplication: Boolean = false, rolbypassrls: Boolean = false, rolconnlimit: Int = 1, rolpassword: Option[String] = None, rolvaliduntil: Option[TypoOffsetDateTime] = None): ConnectionIO[PgAuthidRow] = PgAuthidRepoImpl.insert(new PgAuthidRow(oid = oid, rolname = rolname, rolsuper = rolsuper, rolinherit = rolinherit, rolcreaterole = rolcreaterole, rolcreatedb = rolcreatedb, rolcanlogin = rolcanlogin, rolreplication = rolreplication, rolbypassrls = rolbypassrls, rolconnlimit = rolconnlimit, rolpassword = rolpassword, rolvaliduntil = rolvaliduntil))
  def pgCatalogPgCast(oid: PgCastId, castsource: /* oid */ Long = 1L, casttarget: /* oid */ Long = 1L, castfunc: /* oid */ Long = 1L, castcontext: String = "castcontext", castmethod: String = "castmethod"): ConnectionIO[PgCastRow] = PgCastRepoImpl.insert(new PgCastRow(oid = oid, castsource = castsource, casttarget = casttarget, castfunc = castfunc, castcontext = castcontext, castmethod = castmethod))
  def pgCatalogPgClass(oid: PgClassId, relfrozenxid: TypoXid, relminmxid: TypoXid, relname: String = "relname", relnamespace: /* oid */ Long = 1L, reltype: /* oid */ Long = 1L, reloftype: /* oid */ Long = 1L, relowner: /* oid */ Long = 1L, relam: /* oid */ Long = 1L, relfilenode: /* oid */ Long = 1L, reltablespace: /* oid */ Long = 1L, relpages: Int = 1, reltuples: Float = 1.0f, relallvisible: Int = 1, reltoastrelid: /* oid */ Long = 1L, relhasindex: Boolean = false, relisshared: Boolean = false, relpersistence: String = "relpersistence", relkind: String = "relkind", relnatts: Int = 1, relchecks: Int = 1, relhasrules: Boolean = false, relhastriggers: Boolean = false, relhassubclass: Boolean = false, relrowsecurity: Boolean = false, relforcerowsecurity: Boolean = false, relispopulated: Boolean = false, relreplident: String = "relreplident", relispartition: Boolean = false, relrewrite: /* oid */ Long = 1L, relacl: Option[Array[TypoAclItem]] = None, reloptions: Option[Array[String]] = None, relpartbound: Option[TypoPgNodeTree] = None): ConnectionIO[PgClassRow] = PgClassRepoImpl.insert(new PgClassRow(oid = oid, relfrozenxid = relfrozenxid, relminmxid = relminmxid, relname = relname, relnamespace = relnamespace, reltype = reltype, reloftype = reloftype, relowner = relowner, relam = relam, relfilenode = relfilenode, reltablespace = reltablespace, relpages = relpages, reltuples = reltuples, relallvisible = relallvisible, reltoastrelid = reltoastrelid, relhasindex = relhasindex, relisshared = relisshared, relpersistence = relpersistence, relkind = relkind, relnatts = relnatts, relchecks = relchecks, relhasrules = relhasrules, relhastriggers = relhastriggers, relhassubclass = relhassubclass, relrowsecurity = relrowsecurity, relforcerowsecurity = relforcerowsecurity, relispopulated = relispopulated, relreplident = relreplident, relispartition = relispartition, relrewrite = relrewrite, relacl = relacl, reloptions = reloptions, relpartbound = relpartbound))
  def pgCatalogPgCollation(oid: PgCollationId, collname: String = "collname", collnamespace: /* oid */ Long = 1L, collowner: /* oid */ Long = 1L, collprovider: String = "collprovider", collisdeterministic: Boolean = false, collencoding: Int = 1, collcollate: String = "collcollate", collctype: String = "collctype", collversion: Option[String] = None): ConnectionIO[PgCollationRow] = PgCollationRepoImpl.insert(new PgCollationRow(oid = oid, collname = collname, collnamespace = collnamespace, collowner = collowner, collprovider = collprovider, collisdeterministic = collisdeterministic, collencoding = collencoding, collcollate = collcollate, collctype = collctype, collversion = collversion))
  def pgCatalogPgConstraint(oid: PgConstraintId, conname: String = "conname", connamespace: /* oid */ Long = 1L, contype: String = "contype", condeferrable: Boolean = false, condeferred: Boolean = false, convalidated: Boolean = false, conrelid: /* oid */ Long = 1L, contypid: /* oid */ Long = 1L, conindid: /* oid */ Long = 1L, conparentid: /* oid */ Long = 1L, confrelid: /* oid */ Long = 1L, confupdtype: String = "confupdtype", confdeltype: String = "confdeltype", confmatchtype: String = "confmatchtype", conislocal: Boolean = false, coninhcount: Int = 1, connoinherit: Boolean = false, conkey: Option[Array[Int]] = None, confkey: Option[Array[Int]] = None, conpfeqop: Option[Array[/* oid */ Long]] = None, conppeqop: Option[Array[/* oid */ Long]] = None, conffeqop: Option[Array[/* oid */ Long]] = None, conexclop: Option[Array[/* oid */ Long]] = None, conbin: Option[TypoPgNodeTree] = None): ConnectionIO[PgConstraintRow] = PgConstraintRepoImpl.insert(new PgConstraintRow(oid = oid, conname = conname, connamespace = connamespace, contype = contype, condeferrable = condeferrable, condeferred = condeferred, convalidated = convalidated, conrelid = conrelid, contypid = contypid, conindid = conindid, conparentid = conparentid, confrelid = confrelid, confupdtype = confupdtype, confdeltype = confdeltype, confmatchtype = confmatchtype, conislocal = conislocal, coninhcount = coninhcount, connoinherit = connoinherit, conkey = conkey, confkey = confkey, conpfeqop = conpfeqop, conppeqop = conppeqop, conffeqop = conffeqop, conexclop = conexclop, conbin = conbin))
  def pgCatalogPgConversion(oid: PgConversionId, conproc: TypoRegproc, conname: String = "conname", connamespace: /* oid */ Long = 1L, conowner: /* oid */ Long = 1L, conforencoding: Int = 1, contoencoding: Int = 1, condefault: Boolean = false): ConnectionIO[PgConversionRow] = PgConversionRepoImpl.insert(new PgConversionRow(oid = oid, conproc = conproc, conname = conname, connamespace = connamespace, conowner = conowner, conforencoding = conforencoding, contoencoding = contoencoding, condefault = condefault))
  def pgCatalogPgDatabase(oid: PgDatabaseId, datfrozenxid: TypoXid, datminmxid: TypoXid, datname: String = "datname", datdba: /* oid */ Long = 1L, encoding: Int = 1, datcollate: String = "datcollate", datctype: String = "datctype", datistemplate: Boolean = false, datallowconn: Boolean = false, datconnlimit: Int = 1, datlastsysoid: /* oid */ Long = 1L, dattablespace: /* oid */ Long = 1L, datacl: Option[Array[TypoAclItem]] = None): ConnectionIO[PgDatabaseRow] = PgDatabaseRepoImpl.insert(new PgDatabaseRow(oid = oid, datfrozenxid = datfrozenxid, datminmxid = datminmxid, datname = datname, datdba = datdba, encoding = encoding, datcollate = datcollate, datctype = datctype, datistemplate = datistemplate, datallowconn = datallowconn, datconnlimit = datconnlimit, datlastsysoid = datlastsysoid, dattablespace = dattablespace, datacl = datacl))
  def pgCatalogPgDbRoleSetting(setdatabase: /* oid */ Long = 1L, setrole: /* oid */ Long = 1L, setconfig: Option[Array[String]] = None): ConnectionIO[PgDbRoleSettingRow] = PgDbRoleSettingRepoImpl.insert(new PgDbRoleSettingRow(setdatabase = setdatabase, setrole = setrole, setconfig = setconfig))
  def pgCatalogPgDefaultAcl(oid: PgDefaultAclId, defaclrole: /* oid */ Long = 1L, defaclnamespace: /* oid */ Long = 1L, defaclobjtype: String = "defaclobjtype", defaclacl: Array[TypoAclItem] = Array.empty): ConnectionIO[PgDefaultAclRow] = PgDefaultAclRepoImpl.insert(new PgDefaultAclRow(oid = oid, defaclrole = defaclrole, defaclnamespace = defaclnamespace, defaclobjtype = defaclobjtype, defaclacl = defaclacl))
  def pgCatalogPgDepend(classid: /* oid */ Long = 1L, objid: /* oid */ Long = 1L, objsubid: Int = 1, refclassid: /* oid */ Long = 1L, refobjid: /* oid */ Long = 1L, refobjsubid: Int = 1, deptype: String = "deptype"): ConnectionIO[PgDependRow] = PgDependRepoImpl.insert(new PgDependRow(classid = classid, objid = objid, objsubid = objsubid, refclassid = refclassid, refobjid = refobjid, refobjsubid = refobjsubid, deptype = deptype))
  def pgCatalogPgDescription(objoid: /* oid */ Long = 1L, classoid: /* oid */ Long = 1L, objsubid: Int = 1, description: String = "description"): ConnectionIO[PgDescriptionRow] = PgDescriptionRepoImpl.insert(new PgDescriptionRow(objoid = objoid, classoid = classoid, objsubid = objsubid, description = description))
  def pgCatalogPgEnum(oid: PgEnumId, enumtypid: /* oid */ Long = 1L, enumsortorder: Float = 1.0f, enumlabel: String = "enumlabel"): ConnectionIO[PgEnumRow] = PgEnumRepoImpl.insert(new PgEnumRow(oid = oid, enumtypid = enumtypid, enumsortorder = enumsortorder, enumlabel = enumlabel))
  def pgCatalogPgEventTrigger(oid: PgEventTriggerId, evtname: String = "evtname", evtevent: String = "evtevent", evtowner: /* oid */ Long = 1L, evtfoid: /* oid */ Long = 1L, evtenabled: String = "evtenabled", evttags: Option[Array[String]] = None): ConnectionIO[PgEventTriggerRow] = PgEventTriggerRepoImpl.insert(new PgEventTriggerRow(oid = oid, evtname = evtname, evtevent = evtevent, evtowner = evtowner, evtfoid = evtfoid, evtenabled = evtenabled, evttags = evttags))
  def pgCatalogPgExtension(oid: PgExtensionId, extname: String = "extname", extowner: /* oid */ Long = 1L, extnamespace: /* oid */ Long = 1L, extrelocatable: Boolean = false, extversion: String = "extversion", extconfig: Option[Array[/* oid */ Long]] = None, extcondition: Option[Array[String]] = None): ConnectionIO[PgExtensionRow] = PgExtensionRepoImpl.insert(new PgExtensionRow(oid = oid, extname = extname, extowner = extowner, extnamespace = extnamespace, extrelocatable = extrelocatable, extversion = extversion, extconfig = extconfig, extcondition = extcondition))
  def pgCatalogPgForeignDataWrapper(oid: PgForeignDataWrapperId, fdwname: String = "fdwname", fdwowner: /* oid */ Long = 1L, fdwhandler: /* oid */ Long = 1L, fdwvalidator: /* oid */ Long = 1L, fdwacl: Option[Array[TypoAclItem]] = None, fdwoptions: Option[Array[String]] = None): ConnectionIO[PgForeignDataWrapperRow] = PgForeignDataWrapperRepoImpl.insert(new PgForeignDataWrapperRow(oid = oid, fdwname = fdwname, fdwowner = fdwowner, fdwhandler = fdwhandler, fdwvalidator = fdwvalidator, fdwacl = fdwacl, fdwoptions = fdwoptions))
  def pgCatalogPgForeignServer(oid: PgForeignServerId, srvname: String = "srvname", srvowner: /* oid */ Long = 1L, srvfdw: /* oid */ Long = 1L, srvtype: Option[String] = None, srvversion: Option[String] = None, srvacl: Option[Array[TypoAclItem]] = None, srvoptions: Option[Array[String]] = None): ConnectionIO[PgForeignServerRow] = PgForeignServerRepoImpl.insert(new PgForeignServerRow(oid = oid, srvname = srvname, srvowner = srvowner, srvfdw = srvfdw, srvtype = srvtype, srvversion = srvversion, srvacl = srvacl, srvoptions = srvoptions))
  def pgCatalogPgForeignTable(ftrelid: PgForeignTableId, ftserver: /* oid */ Long = 1L, ftoptions: Option[Array[String]] = None): ConnectionIO[PgForeignTableRow] = PgForeignTableRepoImpl.insert(new PgForeignTableRow(ftrelid = ftrelid, ftserver = ftserver, ftoptions = ftoptions))
  def pgCatalogPgIndex(indexrelid: PgIndexId, indkey: TypoInt2Vector, indcollation: TypoOidVector, indclass: TypoOidVector, indoption: TypoInt2Vector, indrelid: /* oid */ Long = 1L, indnatts: Int = 1, indnkeyatts: Int = 1, indisunique: Boolean = false, indisprimary: Boolean = false, indisexclusion: Boolean = false, indimmediate: Boolean = false, indisclustered: Boolean = false, indisvalid: Boolean = false, indcheckxmin: Boolean = false, indisready: Boolean = false, indislive: Boolean = false, indisreplident: Boolean = false, indexprs: Option[TypoPgNodeTree] = None, indpred: Option[TypoPgNodeTree] = None): ConnectionIO[PgIndexRow] = PgIndexRepoImpl.insert(new PgIndexRow(indexrelid = indexrelid, indkey = indkey, indcollation = indcollation, indclass = indclass, indoption = indoption, indrelid = indrelid, indnatts = indnatts, indnkeyatts = indnkeyatts, indisunique = indisunique, indisprimary = indisprimary, indisexclusion = indisexclusion, indimmediate = indimmediate, indisclustered = indisclustered, indisvalid = indisvalid, indcheckxmin = indcheckxmin, indisready = indisready, indislive = indislive, indisreplident = indisreplident, indexprs = indexprs, indpred = indpred))
  def pgCatalogPgInherits(inhrelid: /* oid */ Long = 1L, inhparent: /* oid */ Long = 1L, inhseqno: Int = 1, inhdetachpending: Boolean = false): ConnectionIO[PgInheritsRow] = PgInheritsRepoImpl.insert(new PgInheritsRow(inhrelid = inhrelid, inhparent = inhparent, inhseqno = inhseqno, inhdetachpending = inhdetachpending))
  def pgCatalogPgInitPrivs(objoid: /* oid */ Long = 1L, classoid: /* oid */ Long = 1L, objsubid: Int = 1, privtype: String = "privtype", initprivs: Array[TypoAclItem] = Array.empty): ConnectionIO[PgInitPrivsRow] = PgInitPrivsRepoImpl.insert(new PgInitPrivsRow(objoid = objoid, classoid = classoid, objsubid = objsubid, privtype = privtype, initprivs = initprivs))
  def pgCatalogPgLanguage(oid: PgLanguageId, lanname: String = "lanname", lanowner: /* oid */ Long = 1L, lanispl: Boolean = false, lanpltrusted: Boolean = false, lanplcallfoid: /* oid */ Long = 1L, laninline: /* oid */ Long = 1L, lanvalidator: /* oid */ Long = 1L, lanacl: Option[Array[TypoAclItem]] = None): ConnectionIO[PgLanguageRow] = PgLanguageRepoImpl.insert(new PgLanguageRow(oid = oid, lanname = lanname, lanowner = lanowner, lanispl = lanispl, lanpltrusted = lanpltrusted, lanplcallfoid = lanplcallfoid, laninline = laninline, lanvalidator = lanvalidator, lanacl = lanacl))
  def pgCatalogPgLargeobject(loid: /* oid */ Long = 1L, pageno: Int = 1, data: Array[Byte] = Array.empty): ConnectionIO[PgLargeobjectRow] = PgLargeobjectRepoImpl.insert(new PgLargeobjectRow(loid = loid, pageno = pageno, data = data))
  def pgCatalogPgLargeobjectMetadata(oid: PgLargeobjectMetadataId, lomowner: /* oid */ Long = 1L, lomacl: Option[Array[TypoAclItem]] = None): ConnectionIO[PgLargeobjectMetadataRow] = PgLargeobjectMetadataRepoImpl.insert(new PgLargeobjectMetadataRow(oid = oid, lomowner = lomowner, lomacl = lomacl))
  def pgCatalogPgNamespace(oid: PgNamespaceId, nspname: String = "nspname", nspowner: /* oid */ Long = 1L, nspacl: Option[Array[TypoAclItem]] = None): ConnectionIO[PgNamespaceRow] = PgNamespaceRepoImpl.insert(new PgNamespaceRow(oid = oid, nspname = nspname, nspowner = nspowner, nspacl = nspacl))
  def pgCatalogPgOpclass(oid: PgOpclassId, opcmethod: /* oid */ Long = 1L, opcname: String = "opcname", opcnamespace: /* oid */ Long = 1L, opcowner: /* oid */ Long = 1L, opcfamily: /* oid */ Long = 1L, opcintype: /* oid */ Long = 1L, opcdefault: Boolean = false, opckeytype: /* oid */ Long = 1L): ConnectionIO[PgOpclassRow] = PgOpclassRepoImpl.insert(new PgOpclassRow(oid = oid, opcmethod = opcmethod, opcname = opcname, opcnamespace = opcnamespace, opcowner = opcowner, opcfamily = opcfamily, opcintype = opcintype, opcdefault = opcdefault, opckeytype = opckeytype))
  def pgCatalogPgOperator(oid: PgOperatorId, oprcode: TypoRegproc, oprrest: TypoRegproc, oprjoin: TypoRegproc, oprname: String = "oprname", oprnamespace: /* oid */ Long = 1L, oprowner: /* oid */ Long = 1L, oprkind: String = "oprkind", oprcanmerge: Boolean = false, oprcanhash: Boolean = false, oprleft: /* oid */ Long = 1L, oprright: /* oid */ Long = 1L, oprresult: /* oid */ Long = 1L, oprcom: /* oid */ Long = 1L, oprnegate: /* oid */ Long = 1L): ConnectionIO[PgOperatorRow] = PgOperatorRepoImpl.insert(new PgOperatorRow(oid = oid, oprcode = oprcode, oprrest = oprrest, oprjoin = oprjoin, oprname = oprname, oprnamespace = oprnamespace, oprowner = oprowner, oprkind = oprkind, oprcanmerge = oprcanmerge, oprcanhash = oprcanhash, oprleft = oprleft, oprright = oprright, oprresult = oprresult, oprcom = oprcom, oprnegate = oprnegate))
  def pgCatalogPgOpfamily(oid: PgOpfamilyId, opfmethod: /* oid */ Long = 1L, opfname: String = "opfname", opfnamespace: /* oid */ Long = 1L, opfowner: /* oid */ Long = 1L): ConnectionIO[PgOpfamilyRow] = PgOpfamilyRepoImpl.insert(new PgOpfamilyRow(oid = oid, opfmethod = opfmethod, opfname = opfname, opfnamespace = opfnamespace, opfowner = opfowner))
  def pgCatalogPgPartitionedTable(partrelid: PgPartitionedTableId, partattrs: TypoInt2Vector, partclass: TypoOidVector, partcollation: TypoOidVector, partstrat: String = "partstrat", partnatts: Int = 1, partdefid: /* oid */ Long = 1L, partexprs: Option[TypoPgNodeTree] = None): ConnectionIO[PgPartitionedTableRow] = PgPartitionedTableRepoImpl.insert(new PgPartitionedTableRow(partrelid = partrelid, partattrs = partattrs, partclass = partclass, partcollation = partcollation, partstrat = partstrat, partnatts = partnatts, partdefid = partdefid, partexprs = partexprs))
  def pgCatalogPgPolicy(oid: PgPolicyId, polname: String = "polname", polrelid: /* oid */ Long = 1L, polcmd: String = "polcmd", polpermissive: Boolean = false, polroles: Array[/* oid */ Long] = Array.empty, polqual: Option[TypoPgNodeTree] = None, polwithcheck: Option[TypoPgNodeTree] = None): ConnectionIO[PgPolicyRow] = PgPolicyRepoImpl.insert(new PgPolicyRow(oid = oid, polname = polname, polrelid = polrelid, polcmd = polcmd, polpermissive = polpermissive, polroles = polroles, polqual = polqual, polwithcheck = polwithcheck))
  def pgCatalogPgProc(oid: PgProcId, prosupport: TypoRegproc, proargtypes: TypoOidVector, proname: String = "proname", pronamespace: /* oid */ Long = 1L, proowner: /* oid */ Long = 1L, prolang: /* oid */ Long = 1L, procost: Float = 1.0f, prorows: Float = 1.0f, provariadic: /* oid */ Long = 1L, prokind: String = "prokind", prosecdef: Boolean = false, proleakproof: Boolean = false, proisstrict: Boolean = false, proretset: Boolean = false, provolatile: String = "provolatile", proparallel: String = "proparallel", pronargs: Int = 1, pronargdefaults: Int = 1, prorettype: /* oid */ Long = 1L, proallargtypes: Option[Array[/* oid */ Long]] = None, proargmodes: Option[Array[String]] = None, proargnames: Option[Array[String]] = None, proargdefaults: Option[TypoPgNodeTree] = None, protrftypes: Option[Array[/* oid */ Long]] = None, prosrc: String = "prosrc", probin: Option[String] = None, prosqlbody: Option[TypoPgNodeTree] = None, proconfig: Option[Array[String]] = None, proacl: Option[Array[TypoAclItem]] = None): ConnectionIO[PgProcRow] = PgProcRepoImpl.insert(new PgProcRow(oid = oid, prosupport = prosupport, proargtypes = proargtypes, proname = proname, pronamespace = pronamespace, proowner = proowner, prolang = prolang, procost = procost, prorows = prorows, provariadic = provariadic, prokind = prokind, prosecdef = prosecdef, proleakproof = proleakproof, proisstrict = proisstrict, proretset = proretset, provolatile = provolatile, proparallel = proparallel, pronargs = pronargs, pronargdefaults = pronargdefaults, prorettype = prorettype, proallargtypes = proallargtypes, proargmodes = proargmodes, proargnames = proargnames, proargdefaults = proargdefaults, protrftypes = protrftypes, prosrc = prosrc, probin = probin, prosqlbody = prosqlbody, proconfig = proconfig, proacl = proacl))
  def pgCatalogPgPublication(oid: PgPublicationId, pubname: String = "pubname", pubowner: /* oid */ Long = 1L, puballtables: Boolean = false, pubinsert: Boolean = false, pubupdate: Boolean = false, pubdelete: Boolean = false, pubtruncate: Boolean = false, pubviaroot: Boolean = false): ConnectionIO[PgPublicationRow] = PgPublicationRepoImpl.insert(new PgPublicationRow(oid = oid, pubname = pubname, pubowner = pubowner, puballtables = puballtables, pubinsert = pubinsert, pubupdate = pubupdate, pubdelete = pubdelete, pubtruncate = pubtruncate, pubviaroot = pubviaroot))
  def pgCatalogPgPublicationRel(oid: PgPublicationRelId, prpubid: /* oid */ Long = 1L, prrelid: /* oid */ Long = 1L): ConnectionIO[PgPublicationRelRow] = PgPublicationRelRepoImpl.insert(new PgPublicationRelRow(oid = oid, prpubid = prpubid, prrelid = prrelid))
  def pgCatalogPgRange(rngtypid: PgRangeId, rngcanonical: TypoRegproc, rngsubdiff: TypoRegproc, rngsubtype: /* oid */ Long = 1L, rngmultitypid: /* oid */ Long = 1L, rngcollation: /* oid */ Long = 1L, rngsubopc: /* oid */ Long = 1L): ConnectionIO[PgRangeRow] = PgRangeRepoImpl.insert(new PgRangeRow(rngtypid = rngtypid, rngcanonical = rngcanonical, rngsubdiff = rngsubdiff, rngsubtype = rngsubtype, rngmultitypid = rngmultitypid, rngcollation = rngcollation, rngsubopc = rngsubopc))
  def pgCatalogPgReplicationOrigin(roident: PgReplicationOriginId, roname: String = "roname"): ConnectionIO[PgReplicationOriginRow] = PgReplicationOriginRepoImpl.insert(new PgReplicationOriginRow(roident = roident, roname = roname))
  def pgCatalogPgRewrite(oid: PgRewriteId, evQual: TypoPgNodeTree, evAction: TypoPgNodeTree, rulename: String = "rulename", evClass: /* oid */ Long = 1L, evType: String = "ev_type", evEnabled: String = "ev_enabled", isInstead: Boolean = false): ConnectionIO[PgRewriteRow] = PgRewriteRepoImpl.insert(new PgRewriteRow(oid = oid, evQual = evQual, evAction = evAction, rulename = rulename, evClass = evClass, evType = evType, evEnabled = evEnabled, isInstead = isInstead))
  def pgCatalogPgSeclabel(objoid: /* oid */ Long = 1L, classoid: /* oid */ Long = 1L, objsubid: Int = 1, provider: String = "provider", label: String = "label"): ConnectionIO[PgSeclabelRow] = PgSeclabelRepoImpl.insert(new PgSeclabelRow(objoid = objoid, classoid = classoid, objsubid = objsubid, provider = provider, label = label))
  def pgCatalogPgSequence(seqrelid: PgSequenceId, seqtypid: /* oid */ Long = 1L, seqstart: Long = 1L, seqincrement: Long = 1L, seqmax: Long = 1L, seqmin: Long = 1L, seqcache: Long = 1L, seqcycle: Boolean = false): ConnectionIO[PgSequenceRow] = PgSequenceRepoImpl.insert(new PgSequenceRow(seqrelid = seqrelid, seqtypid = seqtypid, seqstart = seqstart, seqincrement = seqincrement, seqmax = seqmax, seqmin = seqmin, seqcache = seqcache, seqcycle = seqcycle))
  def pgCatalogPgShdepend(dbid: /* oid */ Long = 1L, classid: /* oid */ Long = 1L, objid: /* oid */ Long = 1L, objsubid: Int = 1, refclassid: /* oid */ Long = 1L, refobjid: /* oid */ Long = 1L, deptype: String = "deptype"): ConnectionIO[PgShdependRow] = PgShdependRepoImpl.insert(new PgShdependRow(dbid = dbid, classid = classid, objid = objid, objsubid = objsubid, refclassid = refclassid, refobjid = refobjid, deptype = deptype))
  def pgCatalogPgShdescription(objoid: /* oid */ Long = 1L, classoid: /* oid */ Long = 1L, description: String = "description"): ConnectionIO[PgShdescriptionRow] = PgShdescriptionRepoImpl.insert(new PgShdescriptionRow(objoid = objoid, classoid = classoid, description = description))
  def pgCatalogPgShseclabel(objoid: /* oid */ Long = 1L, classoid: /* oid */ Long = 1L, provider: String = "provider", label: String = "label"): ConnectionIO[PgShseclabelRow] = PgShseclabelRepoImpl.insert(new PgShseclabelRow(objoid = objoid, classoid = classoid, provider = provider, label = label))
  def pgCatalogPgStatistic(starelid: /* oid */ Long = 1L, staattnum: Int = 1, stainherit: Boolean = false, stanullfrac: Float = 1.0f, stawidth: Int = 1, stadistinct: Float = 1.0f, stakind1: Int = 1, stakind2: Int = 1, stakind3: Int = 1, stakind4: Int = 1, stakind5: Int = 1, staop1: /* oid */ Long = 1L, staop2: /* oid */ Long = 1L, staop3: /* oid */ Long = 1L, staop4: /* oid */ Long = 1L, staop5: /* oid */ Long = 1L, stacoll1: /* oid */ Long = 1L, stacoll2: /* oid */ Long = 1L, stacoll3: /* oid */ Long = 1L, stacoll4: /* oid */ Long = 1L, stacoll5: /* oid */ Long = 1L, stanumbers1: Option[Array[Float]] = None, stanumbers2: Option[Array[Float]] = None, stanumbers3: Option[Array[Float]] = None, stanumbers4: Option[Array[Float]] = None, stanumbers5: Option[Array[Float]] = None, stavalues1: Option[TypoAnyArray] = None, stavalues2: Option[TypoAnyArray] = None, stavalues3: Option[TypoAnyArray] = None, stavalues4: Option[TypoAnyArray] = None, stavalues5: Option[TypoAnyArray] = None): ConnectionIO[PgStatisticRow] = PgStatisticRepoImpl.insert(new PgStatisticRow(starelid = starelid, staattnum = staattnum, stainherit = stainherit, stanullfrac = stanullfrac, stawidth = stawidth, stadistinct = stadistinct, stakind1 = stakind1, stakind2 = stakind2, stakind3 = stakind3, stakind4 = stakind4, stakind5 = stakind5, staop1 = staop1, staop2 = staop2, staop3 = staop3, staop4 = staop4, staop5 = staop5, stacoll1 = stacoll1, stacoll2 = stacoll2, stacoll3 = stacoll3, stacoll4 = stacoll4, stacoll5 = stacoll5, stanumbers1 = stanumbers1, stanumbers2 = stanumbers2, stanumbers3 = stanumbers3, stanumbers4 = stanumbers4, stanumbers5 = stanumbers5, stavalues1 = stavalues1, stavalues2 = stavalues2, stavalues3 = stavalues3, stavalues4 = stavalues4, stavalues5 = stavalues5))
  def pgCatalogPgStatisticExt(oid: PgStatisticExtId, stxkeys: TypoInt2Vector, stxrelid: /* oid */ Long = 1L, stxname: String = "stxname", stxnamespace: /* oid */ Long = 1L, stxowner: /* oid */ Long = 1L, stxstattarget: Int = 1, stxkind: Array[String] = Array.empty, stxexprs: Option[TypoPgNodeTree] = None): ConnectionIO[PgStatisticExtRow] = PgStatisticExtRepoImpl.insert(new PgStatisticExtRow(oid = oid, stxkeys = stxkeys, stxrelid = stxrelid, stxname = stxname, stxnamespace = stxnamespace, stxowner = stxowner, stxstattarget = stxstattarget, stxkind = stxkind, stxexprs = stxexprs))
  def pgCatalogPgStatisticExtData(stxoid: PgStatisticExtDataId, stxdndistinct: Option[String] = None, stxddependencies: Option[String] = None, stxdmcv: Option[String] = None, stxdexpr: Option[String] = None): ConnectionIO[PgStatisticExtDataRow] = PgStatisticExtDataRepoImpl.insert(new PgStatisticExtDataRow(stxoid = stxoid, stxdndistinct = stxdndistinct, stxddependencies = stxddependencies, stxdmcv = stxdmcv, stxdexpr = stxdexpr))
  def pgCatalogPgSubscription(oid: PgSubscriptionId, subdbid: /* oid */ Long = 1L, subname: String = "subname", subowner: /* oid */ Long = 1L, subenabled: Boolean = false, subbinary: Boolean = false, substream: Boolean = false, subconninfo: String = "subconninfo", subslotname: Option[String] = None, subsynccommit: String = "subsynccommit", subpublications: Array[String] = Array.empty): ConnectionIO[PgSubscriptionRow] = PgSubscriptionRepoImpl.insert(new PgSubscriptionRow(oid = oid, subdbid = subdbid, subname = subname, subowner = subowner, subenabled = subenabled, subbinary = subbinary, substream = substream, subconninfo = subconninfo, subslotname = subslotname, subsynccommit = subsynccommit, subpublications = subpublications))
  def pgCatalogPgSubscriptionRel(srsubid: /* oid */ Long = 1L, srrelid: /* oid */ Long = 1L, srsubstate: String = "srsubstate", srsublsn: Option[/* pg_lsn */ Long] = None): ConnectionIO[PgSubscriptionRelRow] = PgSubscriptionRelRepoImpl.insert(new PgSubscriptionRelRow(srsubid = srsubid, srrelid = srrelid, srsubstate = srsubstate, srsublsn = srsublsn))
  def pgCatalogPgTablespace(oid: PgTablespaceId, spcname: String = "spcname", spcowner: /* oid */ Long = 1L, spcacl: Option[Array[TypoAclItem]] = None, spcoptions: Option[Array[String]] = None): ConnectionIO[PgTablespaceRow] = PgTablespaceRepoImpl.insert(new PgTablespaceRow(oid = oid, spcname = spcname, spcowner = spcowner, spcacl = spcacl, spcoptions = spcoptions))
  def pgCatalogPgTransform(oid: PgTransformId, trffromsql: TypoRegproc, trftosql: TypoRegproc, trftype: /* oid */ Long = 1L, trflang: /* oid */ Long = 1L): ConnectionIO[PgTransformRow] = PgTransformRepoImpl.insert(new PgTransformRow(oid = oid, trffromsql = trffromsql, trftosql = trftosql, trftype = trftype, trflang = trflang))
  def pgCatalogPgTrigger(oid: PgTriggerId, tgattr: TypoInt2Vector, tgrelid: /* oid */ Long = 1L, tgparentid: /* oid */ Long = 1L, tgname: String = "tgname", tgfoid: /* oid */ Long = 1L, tgtype: Int = 1, tgenabled: String = "tgenabled", tgisinternal: Boolean = false, tgconstrrelid: /* oid */ Long = 1L, tgconstrindid: /* oid */ Long = 1L, tgconstraint: /* oid */ Long = 1L, tgdeferrable: Boolean = false, tginitdeferred: Boolean = false, tgnargs: Int = 1, tgargs: Array[Byte] = Array.empty, tgqual: Option[TypoPgNodeTree] = None, tgoldtable: Option[String] = None, tgnewtable: Option[String] = None): ConnectionIO[PgTriggerRow] = PgTriggerRepoImpl.insert(new PgTriggerRow(oid = oid, tgattr = tgattr, tgrelid = tgrelid, tgparentid = tgparentid, tgname = tgname, tgfoid = tgfoid, tgtype = tgtype, tgenabled = tgenabled, tgisinternal = tgisinternal, tgconstrrelid = tgconstrrelid, tgconstrindid = tgconstrindid, tgconstraint = tgconstraint, tgdeferrable = tgdeferrable, tginitdeferred = tginitdeferred, tgnargs = tgnargs, tgargs = tgargs, tgqual = tgqual, tgoldtable = tgoldtable, tgnewtable = tgnewtable))
  def pgCatalogPgTsConfig(oid: PgTsConfigId, cfgname: String = "cfgname", cfgnamespace: /* oid */ Long = 1L, cfgowner: /* oid */ Long = 1L, cfgparser: /* oid */ Long = 1L): ConnectionIO[PgTsConfigRow] = PgTsConfigRepoImpl.insert(new PgTsConfigRow(oid = oid, cfgname = cfgname, cfgnamespace = cfgnamespace, cfgowner = cfgowner, cfgparser = cfgparser))
  def pgCatalogPgTsConfigMap(mapcfg: /* oid */ Long = 1L, maptokentype: Int = 1, mapseqno: Int = 1, mapdict: /* oid */ Long = 1L): ConnectionIO[PgTsConfigMapRow] = PgTsConfigMapRepoImpl.insert(new PgTsConfigMapRow(mapcfg = mapcfg, maptokentype = maptokentype, mapseqno = mapseqno, mapdict = mapdict))
  def pgCatalogPgTsDict(oid: PgTsDictId, dictname: String = "dictname", dictnamespace: /* oid */ Long = 1L, dictowner: /* oid */ Long = 1L, dicttemplate: /* oid */ Long = 1L, dictinitoption: Option[String] = None): ConnectionIO[PgTsDictRow] = PgTsDictRepoImpl.insert(new PgTsDictRow(oid = oid, dictname = dictname, dictnamespace = dictnamespace, dictowner = dictowner, dicttemplate = dicttemplate, dictinitoption = dictinitoption))
  def pgCatalogPgTsParser(oid: PgTsParserId, prsstart: TypoRegproc, prstoken: TypoRegproc, prsend: TypoRegproc, prsheadline: TypoRegproc, prslextype: TypoRegproc, prsname: String = "prsname", prsnamespace: /* oid */ Long = 1L): ConnectionIO[PgTsParserRow] = PgTsParserRepoImpl.insert(new PgTsParserRow(oid = oid, prsstart = prsstart, prstoken = prstoken, prsend = prsend, prsheadline = prsheadline, prslextype = prslextype, prsname = prsname, prsnamespace = prsnamespace))
  def pgCatalogPgTsTemplate(oid: PgTsTemplateId, tmplinit: TypoRegproc, tmpllexize: TypoRegproc, tmplname: String = "tmplname", tmplnamespace: /* oid */ Long = 1L): ConnectionIO[PgTsTemplateRow] = PgTsTemplateRepoImpl.insert(new PgTsTemplateRow(oid = oid, tmplinit = tmplinit, tmpllexize = tmpllexize, tmplname = tmplname, tmplnamespace = tmplnamespace))
  def pgCatalogPgType(oid: PgTypeId, typsubscript: TypoRegproc, typinput: TypoRegproc, typoutput: TypoRegproc, typreceive: TypoRegproc, typsend: TypoRegproc, typmodin: TypoRegproc, typmodout: TypoRegproc, typanalyze: TypoRegproc, typname: String = "typname", typnamespace: /* oid */ Long = 1L, typowner: /* oid */ Long = 1L, typlen: Int = 1, typbyval: Boolean = false, typtype: String = "typtype", typcategory: String = "typcategory", typispreferred: Boolean = false, typisdefined: Boolean = false, typdelim: String = "typdelim", typrelid: /* oid */ Long = 1L, typelem: /* oid */ Long = 1L, typarray: /* oid */ Long = 1L, typalign: String = "typalign", typstorage: String = "typstorage", typnotnull: Boolean = false, typbasetype: /* oid */ Long = 1L, typtypmod: Int = 1, typndims: Int = 1, typcollation: /* oid */ Long = 1L, typdefaultbin: Option[TypoPgNodeTree] = None, typdefault: Option[String] = None, typacl: Option[Array[TypoAclItem]] = None): ConnectionIO[PgTypeRow] = PgTypeRepoImpl.insert(new PgTypeRow(oid = oid, typsubscript = typsubscript, typinput = typinput, typoutput = typoutput, typreceive = typreceive, typsend = typsend, typmodin = typmodin, typmodout = typmodout, typanalyze = typanalyze, typname = typname, typnamespace = typnamespace, typowner = typowner, typlen = typlen, typbyval = typbyval, typtype = typtype, typcategory = typcategory, typispreferred = typispreferred, typisdefined = typisdefined, typdelim = typdelim, typrelid = typrelid, typelem = typelem, typarray = typarray, typalign = typalign, typstorage = typstorage, typnotnull = typnotnull, typbasetype = typbasetype, typtypmod = typtypmod, typndims = typndims, typcollation = typcollation, typdefaultbin = typdefaultbin, typdefault = typdefault, typacl = typacl))
  def pgCatalogPgUserMapping(oid: PgUserMappingId, umuser: /* oid */ Long = 1L, umserver: /* oid */ Long = 1L, umoptions: Option[Array[String]] = None): ConnectionIO[PgUserMappingRow] = PgUserMappingRepoImpl.insert(new PgUserMappingRow(oid = oid, umuser = umuser, umserver = umserver, umoptions = umoptions))
  def productionBillofmaterials(componentid: ProductId, unitmeasurecode: UnitmeasureId, productassemblyid: Option[ProductId] = None, enddate: Option[TypoLocalDateTime] = None, bomlevel: Int = 1, billofmaterialsid: Defaulted[BillofmaterialsId] = Defaulted.UseDefault, startdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, perassemblyqty: Defaulted[BigDecimal] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[BillofmaterialsRow] = BillofmaterialsRepoImpl.insert(new BillofmaterialsRowUnsaved(componentid = componentid, unitmeasurecode = unitmeasurecode, productassemblyid = productassemblyid, enddate = enddate, bomlevel = bomlevel, billofmaterialsid = billofmaterialsid, startdate = startdate, perassemblyqty = perassemblyqty, modifieddate = modifieddate))
  def productionCulture(cultureid: CultureId, name: Name, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[CultureRow] = CultureRepoImpl.insert(new CultureRowUnsaved(cultureid = cultureid, name = name, modifieddate = modifieddate))
  def productionDocument(owner: BusinessentityId, title: /* max 50 chars */ String = "title", filename: /* max 400 chars */ String = "filename", fileextension: Option[/* max 8 chars */ String] = None, revision: /* bpchar */ String = "revision", status: Int = 1, documentsummary: Option[String] = None, document: Option[Array[Byte]] = None, folderflag: Defaulted[Flag] = Defaulted.UseDefault, changenumber: Defaulted[Int] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, documentnode: Defaulted[DocumentId] = Defaulted.UseDefault): ConnectionIO[DocumentRow] = DocumentRepoImpl.insert(new DocumentRowUnsaved(owner = owner, title = title, filename = filename, fileextension = fileextension, revision = revision, status = status, documentsummary = documentsummary, document = document, folderflag = folderflag, changenumber = changenumber, rowguid = rowguid, modifieddate = modifieddate, documentnode = documentnode))
  def productionIllustration(diagram: Option[TypoXml] = None, illustrationid: Defaulted[IllustrationId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[IllustrationRow] = IllustrationRepoImpl.insert(new IllustrationRowUnsaved(diagram = diagram, illustrationid = illustrationid, modifieddate = modifieddate))
  def productionLocation(name: Name, locationid: Defaulted[LocationId] = Defaulted.UseDefault, costrate: Defaulted[BigDecimal] = Defaulted.UseDefault, availability: Defaulted[BigDecimal] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[LocationRow] = LocationRepoImpl.insert(new LocationRowUnsaved(name = name, locationid = locationid, costrate = costrate, availability = availability, modifieddate = modifieddate))
  def productionProduct(name: Name, standardcost: BigDecimal, listprice: BigDecimal, productnumber: /* max 25 chars */ String = "productnumber", color: Option[/* max 15 chars */ String] = None, safetystocklevel: Int = 1, reorderpoint: Int = 1, size: Option[/* max 5 chars */ String] = None, sizeunitmeasurecode: Option[UnitmeasureId] = None, weightunitmeasurecode: Option[UnitmeasureId] = None, weight: Option[BigDecimal] = None, daystomanufacture: Int = 1, productline: Option[/* bpchar */ String] = None, `class`: Option[/* bpchar */ String] = None, style: Option[/* bpchar */ String] = None, productsubcategoryid: Option[ProductsubcategoryId] = None, productmodelid: Option[ProductmodelId] = None, sellstartdate: TypoLocalDateTime = TypoLocalDateTime.now, sellenddate: Option[TypoLocalDateTime] = None, discontinueddate: Option[TypoLocalDateTime] = None, productid: Defaulted[ProductId] = Defaulted.UseDefault, makeflag: Defaulted[Flag] = Defaulted.UseDefault, finishedgoodsflag: Defaulted[Flag] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductRow] = ProductRepoImpl.insert(new ProductRowUnsaved(name = name, standardcost = standardcost, listprice = listprice, productnumber = productnumber, color = color, safetystocklevel = safetystocklevel, reorderpoint = reorderpoint, size = size, sizeunitmeasurecode = sizeunitmeasurecode, weightunitmeasurecode = weightunitmeasurecode, weight = weight, daystomanufacture = daystomanufacture, productline = productline, `class` = `class`, style = style, productsubcategoryid = productsubcategoryid, productmodelid = productmodelid, sellstartdate = sellstartdate, sellenddate = sellenddate, discontinueddate = discontinueddate, productid = productid, makeflag = makeflag, finishedgoodsflag = finishedgoodsflag, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductcategory(name: Name, productcategoryid: Defaulted[ProductcategoryId] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductcategoryRow] = ProductcategoryRepoImpl.insert(new ProductcategoryRowUnsaved(name = name, productcategoryid = productcategoryid, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductcosthistory(productid: ProductId, standardcost: BigDecimal, startdate: TypoLocalDateTime = TypoLocalDateTime.now, enddate: Option[TypoLocalDateTime] = None, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductcosthistoryRow] = ProductcosthistoryRepoImpl.insert(new ProductcosthistoryRowUnsaved(productid = productid, standardcost = standardcost, startdate = startdate, enddate = enddate, modifieddate = modifieddate))
  def productionProductdescription(description: /* max 400 chars */ String = "description", productdescriptionid: Defaulted[ProductdescriptionId] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductdescriptionRow] = ProductdescriptionRepoImpl.insert(new ProductdescriptionRowUnsaved(description = description, productdescriptionid = productdescriptionid, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductdocument(productid: ProductId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, documentnode: Defaulted[DocumentId] = Defaulted.UseDefault): ConnectionIO[ProductdocumentRow] = ProductdocumentRepoImpl.insert(new ProductdocumentRowUnsaved(productid = productid, modifieddate = modifieddate, documentnode = documentnode))
  def productionProductinventory(productid: ProductId, locationid: LocationId, shelf: /* max 10 chars */ String = "shelf", bin: Int = 1, quantity: Defaulted[Int] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductinventoryRow] = ProductinventoryRepoImpl.insert(new ProductinventoryRowUnsaved(productid = productid, locationid = locationid, shelf = shelf, bin = bin, quantity = quantity, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductlistpricehistory(productid: ProductId, listprice: BigDecimal, startdate: TypoLocalDateTime = TypoLocalDateTime.now, enddate: Option[TypoLocalDateTime] = None, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductlistpricehistoryRow] = ProductlistpricehistoryRepoImpl.insert(new ProductlistpricehistoryRowUnsaved(productid = productid, listprice = listprice, startdate = startdate, enddate = enddate, modifieddate = modifieddate))
  def productionProductmodel(name: Name, catalogdescription: Option[TypoXml] = None, instructions: Option[TypoXml] = None, productmodelid: Defaulted[ProductmodelId] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductmodelRow] = ProductmodelRepoImpl.insert(new ProductmodelRowUnsaved(name = name, catalogdescription = catalogdescription, instructions = instructions, productmodelid = productmodelid, rowguid = rowguid, modifieddate = modifieddate))
  def productionProductmodelillustration(productmodelid: ProductmodelId, illustrationid: IllustrationId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductmodelillustrationRow] = ProductmodelillustrationRepoImpl.insert(new ProductmodelillustrationRowUnsaved(productmodelid = productmodelid, illustrationid = illustrationid, modifieddate = modifieddate))
  def productionProductmodelproductdescriptionculture(productmodelid: ProductmodelId, productdescriptionid: ProductdescriptionId, cultureid: CultureId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductmodelproductdescriptioncultureRow] = ProductmodelproductdescriptioncultureRepoImpl.insert(new ProductmodelproductdescriptioncultureRowUnsaved(productmodelid = productmodelid, productdescriptionid = productdescriptionid, cultureid = cultureid, modifieddate = modifieddate))
  def productionProductphoto(thumbnailphoto: Option[Array[Byte]] = None, thumbnailphotofilename: Option[/* max 50 chars */ String] = None, largephoto: Option[Array[Byte]] = None, largephotofilename: Option[/* max 50 chars */ String] = None, productphotoid: Defaulted[ProductphotoId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductphotoRow] = ProductphotoRepoImpl.insert(new ProductphotoRowUnsaved(thumbnailphoto = thumbnailphoto, thumbnailphotofilename = thumbnailphotofilename, largephoto = largephoto, largephotofilename = largephotofilename, productphotoid = productphotoid, modifieddate = modifieddate))
  def productionProductproductphoto(productid: ProductId, productphotoid: ProductphotoId, primary: Defaulted[Flag] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductproductphotoRow] = ProductproductphotoRepoImpl.insert(new ProductproductphotoRowUnsaved(productid = productid, productphotoid = productphotoid, primary = primary, modifieddate = modifieddate))
  def productionProductreview(productid: ProductId, reviewername: Name, emailaddress: /* max 50 chars */ String = "emailaddress", rating: Int = 1, comments: Option[/* max 3850 chars */ String] = None, productreviewid: Defaulted[ProductreviewId] = Defaulted.UseDefault, reviewdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductreviewRow] = ProductreviewRepoImpl.insert(new ProductreviewRowUnsaved(productid = productid, reviewername = reviewername, emailaddress = emailaddress, rating = rating, comments = comments, productreviewid = productreviewid, reviewdate = reviewdate, modifieddate = modifieddate))
  def productionProductsubcategory(productcategoryid: ProductcategoryId, name: Name, productsubcategoryid: Defaulted[ProductsubcategoryId] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductsubcategoryRow] = ProductsubcategoryRepoImpl.insert(new ProductsubcategoryRowUnsaved(productcategoryid = productcategoryid, name = name, productsubcategoryid = productsubcategoryid, rowguid = rowguid, modifieddate = modifieddate))
  def productionScrapreason(name: Name, scrapreasonid: Defaulted[ScrapreasonId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ScrapreasonRow] = ScrapreasonRepoImpl.insert(new ScrapreasonRowUnsaved(name = name, scrapreasonid = scrapreasonid, modifieddate = modifieddate))
  def productionTransactionhistory(productid: ProductId, actualcost: BigDecimal, referenceorderid: Int = 1, transactiontype: /* bpchar */ String = "transactiontype", quantity: Int = 1, transactionid: Defaulted[TransactionhistoryId] = Defaulted.UseDefault, referenceorderlineid: Defaulted[Int] = Defaulted.UseDefault, transactiondate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[TransactionhistoryRow] = TransactionhistoryRepoImpl.insert(new TransactionhistoryRowUnsaved(productid = productid, actualcost = actualcost, referenceorderid = referenceorderid, transactiontype = transactiontype, quantity = quantity, transactionid = transactionid, referenceorderlineid = referenceorderlineid, transactiondate = transactiondate, modifieddate = modifieddate))
  def productionTransactionhistoryarchive(transactionid: TransactionhistoryarchiveId, actualcost: BigDecimal, productid: Int = 1, referenceorderid: Int = 1, transactiontype: /* bpchar */ String = "transactiontype", quantity: Int = 1, referenceorderlineid: Defaulted[Int] = Defaulted.UseDefault, transactiondate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[TransactionhistoryarchiveRow] = TransactionhistoryarchiveRepoImpl.insert(new TransactionhistoryarchiveRowUnsaved(transactionid = transactionid, actualcost = actualcost, productid = productid, referenceorderid = referenceorderid, transactiontype = transactiontype, quantity = quantity, referenceorderlineid = referenceorderlineid, transactiondate = transactiondate, modifieddate = modifieddate))
  def productionUnitmeasure(unitmeasurecode: UnitmeasureId, name: Name, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[UnitmeasureRow] = UnitmeasureRepoImpl.insert(new UnitmeasureRowUnsaved(unitmeasurecode = unitmeasurecode, name = name, modifieddate = modifieddate))
  def productionWorkorder(productid: ProductId, orderqty: Int = 1, scrappedqty: Int = 1, startdate: TypoLocalDateTime = TypoLocalDateTime.now, enddate: Option[TypoLocalDateTime] = None, duedate: TypoLocalDateTime = TypoLocalDateTime.now, scrapreasonid: Option[ScrapreasonId] = None, workorderid: Defaulted[WorkorderId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[WorkorderRow] = WorkorderRepoImpl.insert(new WorkorderRowUnsaved(productid = productid, orderqty = orderqty, scrappedqty = scrappedqty, startdate = startdate, enddate = enddate, duedate = duedate, scrapreasonid = scrapreasonid, workorderid = workorderid, modifieddate = modifieddate))
  def productionWorkorderrouting(workorderid: WorkorderId, locationid: LocationId, plannedcost: BigDecimal, productid: Int = 1, operationsequence: Int = 1, scheduledstartdate: TypoLocalDateTime = TypoLocalDateTime.now, scheduledenddate: TypoLocalDateTime = TypoLocalDateTime.now, actualstartdate: Option[TypoLocalDateTime] = None, actualenddate: Option[TypoLocalDateTime] = None, actualresourcehrs: Option[BigDecimal] = None, actualcost: Option[BigDecimal] = None, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[WorkorderroutingRow] = WorkorderroutingRepoImpl.insert(new WorkorderroutingRowUnsaved(workorderid = workorderid, locationid = locationid, plannedcost = plannedcost, productid = productid, operationsequence = operationsequence, scheduledstartdate = scheduledstartdate, scheduledenddate = scheduledenddate, actualstartdate = actualstartdate, actualenddate = actualenddate, actualresourcehrs = actualresourcehrs, actualcost = actualcost, modifieddate = modifieddate))
  def publicPgtest(box: TypoBox, circle: TypoCircle, line: TypoLine, lseg: TypoLineSegment, path: TypoPath, point: TypoPoint, polygon: TypoPolygon, interval: TypoInterval, money: TypoMoney, xml: TypoXml, json: TypoJson, jsonb: TypoJsonb, hstore: TypoHStore, inet: TypoInet, uuid: UUID, timestamp: TypoLocalDateTime = TypoLocalDateTime.now, timestampz: TypoOffsetDateTime = TypoOffsetDateTime.now, time: TypoLocalTime = TypoLocalTime.now, timez: TypoOffsetTime = TypoOffsetTime.now, date: TypoLocalDate = TypoLocalDate.now, boxes: Array[TypoBox] = Array.empty, circlees: Array[TypoCircle] = Array.empty, linees: Array[TypoLine] = Array.empty, lseges: Array[TypoLineSegment] = Array.empty, pathes: Array[TypoPath] = Array.empty, pointes: Array[TypoPoint] = Array.empty, polygones: Array[TypoPolygon] = Array.empty, intervales: Array[TypoInterval] = Array.empty, moneyes: Array[TypoMoney] = Array.empty, xmles: Array[TypoXml] = Array.empty, jsones: Array[TypoJson] = Array.empty, jsonbes: Array[TypoJsonb] = Array.empty, hstores: Array[TypoHStore] = Array.empty, inets: Array[TypoInet] = Array.empty, timestamps: Array[TypoLocalDateTime] = Array.empty, timestampzs: Array[TypoOffsetDateTime] = Array.empty, times: Array[TypoLocalTime] = Array.empty, timezs: Array[TypoOffsetTime] = Array.empty, dates: Array[TypoLocalDate] = Array.empty, uuids: Array[UUID] = Array.empty): ConnectionIO[PgtestRow] = PgtestRepoImpl.insert(new PgtestRow(box = box, circle = circle, line = line, lseg = lseg, path = path, point = point, polygon = polygon, interval = interval, money = money, xml = xml, json = json, jsonb = jsonb, hstore = hstore, inet = inet, uuid = uuid, timestamp = timestamp, timestampz = timestampz, time = time, timez = timez, date = date, boxes = boxes, circlees = circlees, linees = linees, lseges = lseges, pathes = pathes, pointes = pointes, polygones = polygones, intervales = intervales, moneyes = moneyes, xmles = xmles, jsones = jsones, jsonbes = jsonbes, hstores = hstores, inets = inets, timestamps = timestamps, timestampzs = timestampzs, times = times, timezs = timezs, dates = dates, uuids = uuids))
  def publicPgtestnull(box: Option[TypoBox] = None, circle: Option[TypoCircle] = None, line: Option[TypoLine] = None, lseg: Option[TypoLineSegment] = None, path: Option[TypoPath] = None, point: Option[TypoPoint] = None, polygon: Option[TypoPolygon] = None, interval: Option[TypoInterval] = None, money: Option[TypoMoney] = None, xml: Option[TypoXml] = None, json: Option[TypoJson] = None, jsonb: Option[TypoJsonb] = None, hstore: Option[TypoHStore] = None, inet: Option[TypoInet] = None, timestamp: Option[TypoLocalDateTime] = None, timestampz: Option[TypoOffsetDateTime] = None, time: Option[TypoLocalTime] = None, timez: Option[TypoOffsetTime] = None, date: Option[TypoLocalDate] = None, uuid: Option[UUID] = None, boxes: Option[Array[TypoBox]] = None, circlees: Option[Array[TypoCircle]] = None, linees: Option[Array[TypoLine]] = None, lseges: Option[Array[TypoLineSegment]] = None, pathes: Option[Array[TypoPath]] = None, pointes: Option[Array[TypoPoint]] = None, polygones: Option[Array[TypoPolygon]] = None, intervales: Option[Array[TypoInterval]] = None, moneyes: Option[Array[TypoMoney]] = None, xmles: Option[Array[TypoXml]] = None, jsones: Option[Array[TypoJson]] = None, jsonbes: Option[Array[TypoJsonb]] = None, hstores: Option[Array[TypoHStore]] = None, inets: Option[Array[TypoInet]] = None, timestamps: Option[Array[TypoLocalDateTime]] = None, timestampzs: Option[Array[TypoOffsetDateTime]] = None, times: Option[Array[TypoLocalTime]] = None, timezs: Option[Array[TypoOffsetTime]] = None, dates: Option[Array[TypoLocalDate]] = None, uuids: Option[Array[UUID]] = None): ConnectionIO[PgtestnullRow] = PgtestnullRepoImpl.insert(new PgtestnullRow(box = box, circle = circle, line = line, lseg = lseg, path = path, point = point, polygon = polygon, interval = interval, money = money, xml = xml, json = json, jsonb = jsonb, hstore = hstore, inet = inet, timestamp = timestamp, timestampz = timestampz, time = time, timez = timez, date = date, uuid = uuid, boxes = boxes, circlees = circlees, linees = linees, lseges = lseges, pathes = pathes, pointes = pointes, polygones = polygones, intervales = intervales, moneyes = moneyes, xmles = xmles, jsones = jsones, jsonbes = jsonbes, hstores = hstores, inets = inets, timestamps = timestamps, timestampzs = timestampzs, times = times, timezs = timezs, dates = dates, uuids = uuids))
  def purchasingProductvendor(productid: ProductId, businessentityid: BusinessentityId, standardprice: BigDecimal, unitmeasurecode: UnitmeasureId, averageleadtime: Int = 1, lastreceiptcost: Option[BigDecimal] = None, lastreceiptdate: Option[TypoLocalDateTime] = None, minorderqty: Int = 1, maxorderqty: Int = 1, onorderqty: Option[Int] = None, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ProductvendorRow] = ProductvendorRepoImpl.insert(new ProductvendorRowUnsaved(productid = productid, businessentityid = businessentityid, standardprice = standardprice, unitmeasurecode = unitmeasurecode, averageleadtime = averageleadtime, lastreceiptcost = lastreceiptcost, lastreceiptdate = lastreceiptdate, minorderqty = minorderqty, maxorderqty = maxorderqty, onorderqty = onorderqty, modifieddate = modifieddate))
  def purchasingPurchaseorderdetail(purchaseorderid: PurchaseorderheaderId, productid: ProductId, unitprice: BigDecimal, receivedqty: BigDecimal, rejectedqty: BigDecimal, duedate: TypoLocalDateTime = TypoLocalDateTime.now, orderqty: Int = 1, purchaseorderdetailid: Defaulted[Int] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[PurchaseorderdetailRow] = PurchaseorderdetailRepoImpl.insert(new PurchaseorderdetailRowUnsaved(purchaseorderid = purchaseorderid, productid = productid, unitprice = unitprice, receivedqty = receivedqty, rejectedqty = rejectedqty, duedate = duedate, orderqty = orderqty, purchaseorderdetailid = purchaseorderdetailid, modifieddate = modifieddate))
  def purchasingPurchaseorderheader(employeeid: BusinessentityId, vendorid: BusinessentityId, shipmethodid: ShipmethodId, shipdate: Option[TypoLocalDateTime] = None, purchaseorderid: Defaulted[PurchaseorderheaderId] = Defaulted.UseDefault, revisionnumber: Defaulted[Int] = Defaulted.UseDefault, status: Defaulted[Int] = Defaulted.UseDefault, orderdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, subtotal: Defaulted[BigDecimal] = Defaulted.UseDefault, taxamt: Defaulted[BigDecimal] = Defaulted.UseDefault, freight: Defaulted[BigDecimal] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[PurchaseorderheaderRow] = PurchaseorderheaderRepoImpl.insert(new PurchaseorderheaderRowUnsaved(employeeid = employeeid, vendorid = vendorid, shipmethodid = shipmethodid, shipdate = shipdate, purchaseorderid = purchaseorderid, revisionnumber = revisionnumber, status = status, orderdate = orderdate, subtotal = subtotal, taxamt = taxamt, freight = freight, modifieddate = modifieddate))
  def purchasingShipmethod(name: Name, shipmethodid: Defaulted[ShipmethodId] = Defaulted.UseDefault, shipbase: Defaulted[BigDecimal] = Defaulted.UseDefault, shiprate: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ShipmethodRow] = ShipmethodRepoImpl.insert(new ShipmethodRowUnsaved(name = name, shipmethodid = shipmethodid, shipbase = shipbase, shiprate = shiprate, rowguid = rowguid, modifieddate = modifieddate))
  def purchasingVendor(businessentityid: BusinessentityId, accountnumber: AccountNumber, name: Name, creditrating: Int = 1, purchasingwebserviceurl: Option[/* max 1024 chars */ String] = None, preferredvendorstatus: Defaulted[Flag] = Defaulted.UseDefault, activeflag: Defaulted[Flag] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[VendorRow] = VendorRepoImpl.insert(new VendorRowUnsaved(businessentityid = businessentityid, accountnumber = accountnumber, name = name, creditrating = creditrating, purchasingwebserviceurl = purchasingwebserviceurl, preferredvendorstatus = preferredvendorstatus, activeflag = activeflag, modifieddate = modifieddate))
  def salesCountryregioncurrency(countryregioncode: CountryregionId, currencycode: CurrencyId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[CountryregioncurrencyRow] = CountryregioncurrencyRepoImpl.insert(new CountryregioncurrencyRowUnsaved(countryregioncode = countryregioncode, currencycode = currencycode, modifieddate = modifieddate))
  def salesCreditcard(cardtype: /* max 50 chars */ String = "cardtype", cardnumber: /* max 25 chars */ String = "cardnumber", expmonth: Int = 1, expyear: Int = 1, creditcardid: Defaulted[CreditcardId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[CreditcardRow] = CreditcardRepoImpl.insert(new CreditcardRowUnsaved(cardtype = cardtype, cardnumber = cardnumber, expmonth = expmonth, expyear = expyear, creditcardid = creditcardid, modifieddate = modifieddate))
  def salesCurrency(currencycode: CurrencyId, name: Name, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[CurrencyRow] = CurrencyRepoImpl.insert(new CurrencyRowUnsaved(currencycode = currencycode, name = name, modifieddate = modifieddate))
  def salesCurrencyrate(fromcurrencycode: CurrencyId, tocurrencycode: CurrencyId, averagerate: BigDecimal, endofdayrate: BigDecimal, currencyratedate: TypoLocalDateTime = TypoLocalDateTime.now, currencyrateid: Defaulted[CurrencyrateId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[CurrencyrateRow] = CurrencyrateRepoImpl.insert(new CurrencyrateRowUnsaved(fromcurrencycode = fromcurrencycode, tocurrencycode = tocurrencycode, averagerate = averagerate, endofdayrate = endofdayrate, currencyratedate = currencyratedate, currencyrateid = currencyrateid, modifieddate = modifieddate))
  def salesCustomer(personid: Option[BusinessentityId] = None, storeid: Option[BusinessentityId] = None, territoryid: Option[SalesterritoryId] = None, customerid: Defaulted[CustomerId] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[CustomerRow] = CustomerRepoImpl.insert(new CustomerRowUnsaved(personid = personid, storeid = storeid, territoryid = territoryid, customerid = customerid, rowguid = rowguid, modifieddate = modifieddate))
  def salesPersoncreditcard(businessentityid: BusinessentityId, creditcardid: CreditcardId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[PersoncreditcardRow] = PersoncreditcardRepoImpl.insert(new PersoncreditcardRowUnsaved(businessentityid = businessentityid, creditcardid = creditcardid, modifieddate = modifieddate))
  def salesSalesorderdetail(salesorderid: SalesorderheaderId, productid: ProductId, specialofferid: SpecialofferId, unitprice: BigDecimal, carriertrackingnumber: Option[/* max 25 chars */ String] = None, orderqty: Int = 1, salesorderdetailid: Defaulted[Int] = Defaulted.UseDefault, unitpricediscount: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SalesorderdetailRow] = SalesorderdetailRepoImpl.insert(new SalesorderdetailRowUnsaved(salesorderid = salesorderid, productid = productid, specialofferid = specialofferid, unitprice = unitprice, carriertrackingnumber = carriertrackingnumber, orderqty = orderqty, salesorderdetailid = salesorderdetailid, unitpricediscount = unitpricediscount, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesorderheader(customerid: CustomerId, billtoaddressid: AddressId, shiptoaddressid: AddressId, shipmethodid: ShipmethodId, duedate: TypoLocalDateTime = TypoLocalDateTime.now, shipdate: Option[TypoLocalDateTime] = None, purchaseordernumber: Option[OrderNumber] = None, accountnumber: Option[AccountNumber] = None, salespersonid: Option[BusinessentityId] = None, territoryid: Option[SalesterritoryId] = None, creditcardid: Option[CreditcardId] = None, creditcardapprovalcode: Option[/* max 15 chars */ String] = None, currencyrateid: Option[CurrencyrateId] = None, totaldue: Option[BigDecimal] = None, comment: Option[/* max 128 chars */ String] = None, salesorderid: Defaulted[SalesorderheaderId] = Defaulted.UseDefault, revisionnumber: Defaulted[Int] = Defaulted.UseDefault, orderdate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, status: Defaulted[Int] = Defaulted.UseDefault, onlineorderflag: Defaulted[Flag] = Defaulted.UseDefault, subtotal: Defaulted[BigDecimal] = Defaulted.UseDefault, taxamt: Defaulted[BigDecimal] = Defaulted.UseDefault, freight: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SalesorderheaderRow] = SalesorderheaderRepoImpl.insert(new SalesorderheaderRowUnsaved(customerid = customerid, billtoaddressid = billtoaddressid, shiptoaddressid = shiptoaddressid, shipmethodid = shipmethodid, duedate = duedate, shipdate = shipdate, purchaseordernumber = purchaseordernumber, accountnumber = accountnumber, salespersonid = salespersonid, territoryid = territoryid, creditcardid = creditcardid, creditcardapprovalcode = creditcardapprovalcode, currencyrateid = currencyrateid, totaldue = totaldue, comment = comment, salesorderid = salesorderid, revisionnumber = revisionnumber, orderdate = orderdate, status = status, onlineorderflag = onlineorderflag, subtotal = subtotal, taxamt = taxamt, freight = freight, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesorderheadersalesreason(salesorderid: SalesorderheaderId, salesreasonid: SalesreasonId, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SalesorderheadersalesreasonRow] = SalesorderheadersalesreasonRepoImpl.insert(new SalesorderheadersalesreasonRowUnsaved(salesorderid = salesorderid, salesreasonid = salesreasonid, modifieddate = modifieddate))
  def salesSalesperson(businessentityid: BusinessentityId, territoryid: Option[SalesterritoryId] = None, salesquota: Option[BigDecimal] = None, bonus: Defaulted[BigDecimal] = Defaulted.UseDefault, commissionpct: Defaulted[BigDecimal] = Defaulted.UseDefault, salesytd: Defaulted[BigDecimal] = Defaulted.UseDefault, saleslastyear: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SalespersonRow] = SalespersonRepoImpl.insert(new SalespersonRowUnsaved(businessentityid = businessentityid, territoryid = territoryid, salesquota = salesquota, bonus = bonus, commissionpct = commissionpct, salesytd = salesytd, saleslastyear = saleslastyear, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalespersonquotahistory(businessentityid: BusinessentityId, salesquota: BigDecimal, quotadate: TypoLocalDateTime = TypoLocalDateTime.now, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SalespersonquotahistoryRow] = SalespersonquotahistoryRepoImpl.insert(new SalespersonquotahistoryRowUnsaved(businessentityid = businessentityid, salesquota = salesquota, quotadate = quotadate, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesreason(name: Name, reasontype: Name, salesreasonid: Defaulted[SalesreasonId] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SalesreasonRow] = SalesreasonRepoImpl.insert(new SalesreasonRowUnsaved(name = name, reasontype = reasontype, salesreasonid = salesreasonid, modifieddate = modifieddate))
  def salesSalestaxrate(stateprovinceid: StateprovinceId, name: Name, taxtype: Int = 1, salestaxrateid: Defaulted[SalestaxrateId] = Defaulted.UseDefault, taxrate: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SalestaxrateRow] = SalestaxrateRepoImpl.insert(new SalestaxrateRowUnsaved(stateprovinceid = stateprovinceid, name = name, taxtype = taxtype, salestaxrateid = salestaxrateid, taxrate = taxrate, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesterritory(name: Name, countryregioncode: CountryregionId, group: /* max 50 chars */ String = "group", territoryid: Defaulted[SalesterritoryId] = Defaulted.UseDefault, salesytd: Defaulted[BigDecimal] = Defaulted.UseDefault, saleslastyear: Defaulted[BigDecimal] = Defaulted.UseDefault, costytd: Defaulted[BigDecimal] = Defaulted.UseDefault, costlastyear: Defaulted[BigDecimal] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SalesterritoryRow] = SalesterritoryRepoImpl.insert(new SalesterritoryRowUnsaved(name = name, countryregioncode = countryregioncode, group = group, territoryid = territoryid, salesytd = salesytd, saleslastyear = saleslastyear, costytd = costytd, costlastyear = costlastyear, rowguid = rowguid, modifieddate = modifieddate))
  def salesSalesterritoryhistory(businessentityid: BusinessentityId, territoryid: SalesterritoryId, startdate: TypoLocalDateTime = TypoLocalDateTime.now, enddate: Option[TypoLocalDateTime] = None, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SalesterritoryhistoryRow] = SalesterritoryhistoryRepoImpl.insert(new SalesterritoryhistoryRowUnsaved(businessentityid = businessentityid, territoryid = territoryid, startdate = startdate, enddate = enddate, rowguid = rowguid, modifieddate = modifieddate))
  def salesShoppingcartitem(productid: ProductId, shoppingcartid: /* max 50 chars */ String = "shoppingcartid", shoppingcartitemid: Defaulted[ShoppingcartitemId] = Defaulted.UseDefault, quantity: Defaulted[Int] = Defaulted.UseDefault, datecreated: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[ShoppingcartitemRow] = ShoppingcartitemRepoImpl.insert(new ShoppingcartitemRowUnsaved(productid = productid, shoppingcartid = shoppingcartid, shoppingcartitemid = shoppingcartitemid, quantity = quantity, datecreated = datecreated, modifieddate = modifieddate))
  def salesSpecialoffer(description: /* max 255 chars */ String = "description", `type`: /* max 50 chars */ String = "type", category: /* max 50 chars */ String = "category", startdate: TypoLocalDateTime = TypoLocalDateTime.now, enddate: TypoLocalDateTime = TypoLocalDateTime.now, maxqty: Option[Int] = None, specialofferid: Defaulted[SpecialofferId] = Defaulted.UseDefault, discountpct: Defaulted[BigDecimal] = Defaulted.UseDefault, minqty: Defaulted[Int] = Defaulted.UseDefault, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SpecialofferRow] = SpecialofferRepoImpl.insert(new SpecialofferRowUnsaved(description = description, `type` = `type`, category = category, startdate = startdate, enddate = enddate, maxqty = maxqty, specialofferid = specialofferid, discountpct = discountpct, minqty = minqty, rowguid = rowguid, modifieddate = modifieddate))
  def salesSpecialofferproduct(specialofferid: SpecialofferId, productid: ProductId, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[SpecialofferproductRow] = SpecialofferproductRepoImpl.insert(new SpecialofferproductRowUnsaved(specialofferid = specialofferid, productid = productid, rowguid = rowguid, modifieddate = modifieddate))
  def salesStore(businessentityid: BusinessentityId, name: Name, salespersonid: Option[BusinessentityId] = None, demographics: Option[TypoXml] = None, rowguid: Defaulted[UUID] = Defaulted.UseDefault, modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault): ConnectionIO[StoreRow] = StoreRepoImpl.insert(new StoreRowUnsaved(businessentityid = businessentityid, name = name, salespersonid = salespersonid, demographics = demographics, rowguid = rowguid, modifieddate = modifieddate))
}