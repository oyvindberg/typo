/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package shipmethod

import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Type for the primary key of table `purchasing.shipmethod` */
case class ShipmethodId(value: Int) extends AnyVal
object ShipmethodId {
  implicit val ordering: Ordering[ShipmethodId] = Ordering.by(_.value)
  implicit val encoder: Encoder[ShipmethodId] =
    Encoder[Int].contramap(_.value)
  implicit val decoder: Decoder[ShipmethodId] =
    Decoder[Int].map(ShipmethodId(_))
  implicit val meta: Meta[ShipmethodId] = Meta[Int].imap(ShipmethodId.apply)(_.value)
  implicit val metaArray: Meta[Array[ShipmethodId]] = Meta[Array[Int]].imap(_.map(ShipmethodId.apply))(_.map(_.value))
}
