/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package shipmethod

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class ShipmethodRepoMock(toRow: Function1[ShipmethodRowUnsaved, ShipmethodRow],
                         map: scala.collection.mutable.Map[ShipmethodId, ShipmethodRow] = scala.collection.mutable.Map.empty) extends ShipmethodRepo {
  override def delete(shipmethodid: ShipmethodId): ConnectionIO[Boolean] = {
    delay(map.remove(shipmethodid).isDefined)
  }
  override def insert(unsaved: ShipmethodRow): ConnectionIO[ShipmethodRow] = {
    delay {
      if (map.contains(unsaved.shipmethodid))
        sys.error(s"id ${unsaved.shipmethodid} already exists")
      else
        map.put(unsaved.shipmethodid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: ShipmethodRowUnsaved): ConnectionIO[ShipmethodRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, ShipmethodRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[ShipmethodFieldOrIdValue[_]]): Stream[ConnectionIO, ShipmethodRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, ShipmethodFieldValue.shipmethodid(value)) => acc.filter(_.shipmethodid == value)
        case (acc, ShipmethodFieldValue.name(value)) => acc.filter(_.name == value)
        case (acc, ShipmethodFieldValue.shipbase(value)) => acc.filter(_.shipbase == value)
        case (acc, ShipmethodFieldValue.shiprate(value)) => acc.filter(_.shiprate == value)
        case (acc, ShipmethodFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
        case (acc, ShipmethodFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(shipmethodid: ShipmethodId): ConnectionIO[Option[ShipmethodRow]] = {
    delay(map.get(shipmethodid))
  }
  override def selectByIds(shipmethodids: Array[ShipmethodId]): Stream[ConnectionIO, ShipmethodRow] = {
    Stream.emits(shipmethodids.flatMap(map.get).toList)
  }
  override def update(row: ShipmethodRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.shipmethodid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.shipmethodid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(shipmethodid: ShipmethodId, fieldValues: List[ShipmethodFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(shipmethodid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, ShipmethodFieldValue.name(value)) => acc.copy(name = value)
            case (acc, ShipmethodFieldValue.shipbase(value)) => acc.copy(shipbase = value)
            case (acc, ShipmethodFieldValue.shiprate(value)) => acc.copy(shiprate = value)
            case (acc, ShipmethodFieldValue.rowguid(value)) => acc.copy(rowguid = value)
            case (acc, ShipmethodFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(shipmethodid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: ShipmethodRow): ConnectionIO[ShipmethodRow] = {
    delay {
      map.put(unsaved.shipmethodid, unsaved)
      unsaved
    }
  }
}
