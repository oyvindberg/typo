/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package shipmethod

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class ShipmethodRepoMock(toRow: Function1[ShipmethodRowUnsaved, ShipmethodRow],
                         map: scala.collection.mutable.Map[ShipmethodId, ShipmethodRow] = scala.collection.mutable.Map.empty) extends ShipmethodRepo {
  override def delete(shipmethodid: ShipmethodId): ConnectionIO[Boolean] = {
    delay(map.remove(shipmethodid).isDefined)
  }
  override def insert(unsaved: ShipmethodRow): ConnectionIO[ShipmethodRow] = {
    delay {
      if (map.contains(unsaved.shipmethodid))
        sys.error(s"id ${unsaved.shipmethodid} already exists")
      else
        map.put(unsaved.shipmethodid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: ShipmethodRowUnsaved): ConnectionIO[ShipmethodRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, ShipmethodRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(shipmethodid: ShipmethodId): ConnectionIO[Option[ShipmethodRow]] = {
    delay(map.get(shipmethodid))
  }
  override def selectByIds(shipmethodids: Array[ShipmethodId]): Stream[ConnectionIO, ShipmethodRow] = {
    Stream.emits(shipmethodids.flatMap(map.get).toList)
  }
  override def update(row: ShipmethodRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.shipmethodid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.shipmethodid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: ShipmethodRow): ConnectionIO[ShipmethodRow] = {
    delay {
      map.put(unsaved.shipmethodid, unsaved)
      unsaved
    }
  }
}
