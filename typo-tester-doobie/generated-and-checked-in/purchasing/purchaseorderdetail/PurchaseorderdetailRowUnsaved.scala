/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderdetail

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import java.time.LocalDateTime

/** This class corresponds to a row in table `purchasing.purchaseorderdetail` which has not been persisted yet */
case class PurchaseorderdetailRowUnsaved(
  /** Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
      Points to [[purchaseorderheader.PurchaseorderheaderRow.purchaseorderid]] */
  purchaseorderid: PurchaseorderheaderId,
  /** Date the product is expected to be received. */
  duedate: LocalDateTime,
  /** Quantity ordered. */
  orderqty: Int,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  /** Vendor's selling price of a single product. */
  unitprice: BigDecimal,
  /** Quantity actually received from the vendor. */
  receivedqty: BigDecimal,
  /** Quantity rejected during inspection. */
  rejectedqty: BigDecimal,
  /** Default: nextval('purchasing.purchaseorderdetail_purchaseorderdetailid_seq'::regclass)
      Primary key. One line number per purchased product. */
  purchaseorderdetailid: Defaulted[Int] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(purchaseorderdetailidDefault: => Int, modifieddateDefault: => LocalDateTime): PurchaseorderdetailRow =
    PurchaseorderdetailRow(
      purchaseorderid = purchaseorderid,
      duedate = duedate,
      orderqty = orderqty,
      productid = productid,
      unitprice = unitprice,
      receivedqty = receivedqty,
      rejectedqty = rejectedqty,
      purchaseorderdetailid = purchaseorderdetailid match {
                                case Defaulted.UseDefault => purchaseorderdetailidDefault
                                case Defaulted.Provided(value) => value
                              },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}

