/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderdetail

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import adventureworks.purchasing.purchaseorderheader.PurchaseorderheaderId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `purchasing.purchaseorderdetail` which has not been persisted yet */
case class PurchaseorderdetailRowUnsaved(
  /** Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
      Points to [[purchaseorderheader.PurchaseorderheaderRow.purchaseorderid]] */
  purchaseorderid: PurchaseorderheaderId,
  /** Date the product is expected to be received. */
  duedate: LocalDateTime,
  /** Quantity ordered. */
  orderqty: Int,
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[production.product.ProductRow.productid]] */
  productid: ProductId,
  /** Vendor's selling price of a single product. */
  unitprice: BigDecimal,
  /** Quantity actually received from the vendor. */
  receivedqty: BigDecimal,
  /** Quantity rejected during inspection. */
  rejectedqty: BigDecimal,
  /** Default: nextval('purchasing.purchaseorderdetail_purchaseorderdetailid_seq'::regclass)
      Primary key. One line number per purchased product. */
  purchaseorderdetailid: Defaulted[Int] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(purchaseorderdetailidDefault: => Int, modifieddateDefault: => LocalDateTime): PurchaseorderdetailRow =
    PurchaseorderdetailRow(
      purchaseorderid = purchaseorderid,
      duedate = duedate,
      orderqty = orderqty,
      productid = productid,
      unitprice = unitprice,
      receivedqty = receivedqty,
      rejectedqty = rejectedqty,
      purchaseorderdetailid = purchaseorderdetailid match {
                                case Defaulted.UseDefault => purchaseorderdetailidDefault
                                case Defaulted.Provided(value) => value
                              },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object PurchaseorderdetailRowUnsaved {
  implicit val decoder: Decoder[PurchaseorderdetailRowUnsaved] =
    (c: HCursor) =>
      for {
        purchaseorderid <- c.downField("purchaseorderid").as[PurchaseorderheaderId]
        duedate <- c.downField("duedate").as[LocalDateTime]
        orderqty <- c.downField("orderqty").as[Int]
        productid <- c.downField("productid").as[ProductId]
        unitprice <- c.downField("unitprice").as[BigDecimal]
        receivedqty <- c.downField("receivedqty").as[BigDecimal]
        rejectedqty <- c.downField("rejectedqty").as[BigDecimal]
        purchaseorderdetailid <- c.downField("purchaseorderdetailid").as[Defaulted[Int]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield PurchaseorderdetailRowUnsaved(purchaseorderid, duedate, orderqty, productid, unitprice, receivedqty, rejectedqty, purchaseorderdetailid, modifieddate)
  implicit val encoder: Encoder[PurchaseorderdetailRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "purchaseorderid" := row.purchaseorderid,
        "duedate" := row.duedate,
        "orderqty" := row.orderqty,
        "productid" := row.productid,
        "unitprice" := row.unitprice,
        "receivedqty" := row.receivedqty,
        "rejectedqty" := row.rejectedqty,
        "purchaseorderdetailid" := row.purchaseorderdetailid,
        "modifieddate" := row.modifieddate
      )}
}
