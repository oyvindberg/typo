/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package productvendor

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream

object ProductvendorRepoImpl extends ProductvendorRepo {
  override def delete(compositeId: ProductvendorId): ConnectionIO[Boolean] = {
    sql"delete from purchasing.productvendor where productid = ${compositeId.productid} AND businessentityid = ${compositeId.businessentityid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: ProductvendorRow): ConnectionIO[ProductvendorRow] = {
    sql"""insert into purchasing.productvendor(productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate)
          values (${unsaved.productid}::int4, ${unsaved.businessentityid}::int4, ${unsaved.averageleadtime}::int4, ${unsaved.standardprice}::numeric, ${unsaved.lastreceiptcost}::numeric, ${unsaved.lastreceiptdate}::timestamp, ${unsaved.minorderqty}::int4, ${unsaved.maxorderqty}::int4, ${unsaved.onorderqty}::int4, ${unsaved.unitmeasurecode}::bpchar, ${unsaved.modifieddate}::timestamp)
          returning productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate::text, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate::text
       """.query(ProductvendorRow.read).unique
  }
  override def insert(unsaved: ProductvendorRowUnsaved): ConnectionIO[ProductvendorRow] = {
    val fs = List(
      Some((Fragment.const(s"productid"), fr"${unsaved.productid}::int4")),
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"averageleadtime"), fr"${unsaved.averageleadtime}::int4")),
      Some((Fragment.const(s"standardprice"), fr"${unsaved.standardprice}::numeric")),
      Some((Fragment.const(s"lastreceiptcost"), fr"${unsaved.lastreceiptcost}::numeric")),
      Some((Fragment.const(s"lastreceiptdate"), fr"${unsaved.lastreceiptdate}::timestamp")),
      Some((Fragment.const(s"minorderqty"), fr"${unsaved.minorderqty}::int4")),
      Some((Fragment.const(s"maxorderqty"), fr"${unsaved.maxorderqty}::int4")),
      Some((Fragment.const(s"onorderqty"), fr"${unsaved.onorderqty}::int4")),
      Some((Fragment.const(s"unitmeasurecode"), fr"${unsaved.unitmeasurecode}::bpchar")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into purchasing.productvendor default values
            returning productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate::text, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into purchasing.productvendor(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate::text, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate::text
         """
    }
    q.query(ProductvendorRow.read).unique
  
  }
  override def selectAll: Stream[ConnectionIO, ProductvendorRow] = {
    sql"select productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate::text, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate::text from purchasing.productvendor".query(ProductvendorRow.read).stream
  }
  override def selectById(compositeId: ProductvendorId): ConnectionIO[Option[ProductvendorRow]] = {
    sql"select productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate::text, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate::text from purchasing.productvendor where productid = ${compositeId.productid} AND businessentityid = ${compositeId.businessentityid}".query(ProductvendorRow.read).option
  }
  override def update(row: ProductvendorRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update purchasing.productvendor
          set averageleadtime = ${row.averageleadtime}::int4,
              standardprice = ${row.standardprice}::numeric,
              lastreceiptcost = ${row.lastreceiptcost}::numeric,
              lastreceiptdate = ${row.lastreceiptdate}::timestamp,
              minorderqty = ${row.minorderqty}::int4,
              maxorderqty = ${row.maxorderqty}::int4,
              onorderqty = ${row.onorderqty}::int4,
              unitmeasurecode = ${row.unitmeasurecode}::bpchar,
              modifieddate = ${row.modifieddate}::timestamp
          where productid = ${compositeId.productid} AND businessentityid = ${compositeId.businessentityid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: ProductvendorRow): ConnectionIO[ProductvendorRow] = {
    sql"""insert into purchasing.productvendor(productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate)
          values (
            ${unsaved.productid}::int4,
            ${unsaved.businessentityid}::int4,
            ${unsaved.averageleadtime}::int4,
            ${unsaved.standardprice}::numeric,
            ${unsaved.lastreceiptcost}::numeric,
            ${unsaved.lastreceiptdate}::timestamp,
            ${unsaved.minorderqty}::int4,
            ${unsaved.maxorderqty}::int4,
            ${unsaved.onorderqty}::int4,
            ${unsaved.unitmeasurecode}::bpchar,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productid, businessentityid)
          do update set
            averageleadtime = EXCLUDED.averageleadtime,
            standardprice = EXCLUDED.standardprice,
            lastreceiptcost = EXCLUDED.lastreceiptcost,
            lastreceiptdate = EXCLUDED.lastreceiptdate,
            minorderqty = EXCLUDED.minorderqty,
            maxorderqty = EXCLUDED.maxorderqty,
            onorderqty = EXCLUDED.onorderqty,
            unitmeasurecode = EXCLUDED.unitmeasurecode,
            modifieddate = EXCLUDED.modifieddate
          returning productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate::text, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate::text
       """.query(ProductvendorRow.read).unique
  }
}
