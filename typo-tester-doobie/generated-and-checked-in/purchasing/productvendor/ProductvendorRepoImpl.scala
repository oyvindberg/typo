/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package productvendor

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object ProductvendorRepoImpl extends ProductvendorRepo {
  override def delete(compositeId: ProductvendorId): ConnectionIO[Boolean] = {
    sql"delete from purchasing.productvendor where productid = ${compositeId.productid} AND businessentityid = ${compositeId.businessentityid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: ProductvendorRow): ConnectionIO[ProductvendorRow] = {
    sql"""insert into purchasing.productvendor(productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate)
          values (${unsaved.productid}::int4, ${unsaved.businessentityid}::int4, ${unsaved.averageleadtime}::int4, ${unsaved.standardprice}::numeric, ${unsaved.lastreceiptcost}::numeric, ${unsaved.lastreceiptdate}::timestamp, ${unsaved.minorderqty}::int4, ${unsaved.maxorderqty}::int4, ${unsaved.onorderqty}::int4, ${unsaved.unitmeasurecode}::bpchar, ${unsaved.modifieddate}::timestamp)
          returning productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate
       """.query.unique
  }
  override def insert(unsaved: ProductvendorRowUnsaved): ConnectionIO[ProductvendorRow] = {
    val fs = List(
      Some((Fragment.const(s"productid"), fr"${unsaved.productid}::int4")),
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"averageleadtime"), fr"${unsaved.averageleadtime}::int4")),
      Some((Fragment.const(s"standardprice"), fr"${unsaved.standardprice}::numeric")),
      Some((Fragment.const(s"lastreceiptcost"), fr"${unsaved.lastreceiptcost}::numeric")),
      Some((Fragment.const(s"lastreceiptdate"), fr"${unsaved.lastreceiptdate}::timestamp")),
      Some((Fragment.const(s"minorderqty"), fr"${unsaved.minorderqty}::int4")),
      Some((Fragment.const(s"maxorderqty"), fr"${unsaved.maxorderqty}::int4")),
      Some((Fragment.const(s"onorderqty"), fr"${unsaved.onorderqty}::int4")),
      Some((Fragment.const(s"unitmeasurecode"), fr"${unsaved.unitmeasurecode}::bpchar")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into purchasing.productvendor default values
            returning productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into purchasing.productvendor(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, ProductvendorRow] = {
    sql"select productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate from purchasing.productvendor".query[ProductvendorRow].stream
  }
  override def selectByFieldValues(fieldValues: List[ProductvendorFieldOrIdValue[_]]): Stream[ConnectionIO, ProductvendorRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case ProductvendorFieldValue.productid(value) => fr"productid = $value"
        case ProductvendorFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case ProductvendorFieldValue.averageleadtime(value) => fr"averageleadtime = $value"
        case ProductvendorFieldValue.standardprice(value) => fr"standardprice = $value"
        case ProductvendorFieldValue.lastreceiptcost(value) => fr"lastreceiptcost = $value"
        case ProductvendorFieldValue.lastreceiptdate(value) => fr"lastreceiptdate = $value"
        case ProductvendorFieldValue.minorderqty(value) => fr"minorderqty = $value"
        case ProductvendorFieldValue.maxorderqty(value) => fr"maxorderqty = $value"
        case ProductvendorFieldValue.onorderqty(value) => fr"onorderqty = $value"
        case ProductvendorFieldValue.unitmeasurecode(value) => fr"unitmeasurecode = $value"
        case ProductvendorFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from purchasing.productvendor $where".query[ProductvendorRow].stream
  
  }
  override def selectById(compositeId: ProductvendorId): ConnectionIO[Option[ProductvendorRow]] = {
    sql"select productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate from purchasing.productvendor where productid = ${compositeId.productid} AND businessentityid = ${compositeId.businessentityid}".query[ProductvendorRow].option
  }
  override def update(row: ProductvendorRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update purchasing.productvendor
          set averageleadtime = ${row.averageleadtime}::int4,
              standardprice = ${row.standardprice}::numeric,
              lastreceiptcost = ${row.lastreceiptcost}::numeric,
              lastreceiptdate = ${row.lastreceiptdate}::timestamp,
              minorderqty = ${row.minorderqty}::int4,
              maxorderqty = ${row.maxorderqty}::int4,
              onorderqty = ${row.onorderqty}::int4,
              unitmeasurecode = ${row.unitmeasurecode}::bpchar,
              modifieddate = ${row.modifieddate}::timestamp
          where productid = ${compositeId.productid} AND businessentityid = ${compositeId.businessentityid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(compositeId: ProductvendorId, fieldValues: List[ProductvendorFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case ProductvendorFieldValue.averageleadtime(value) => fr"averageleadtime = $value"
            case ProductvendorFieldValue.standardprice(value) => fr"standardprice = $value"
            case ProductvendorFieldValue.lastreceiptcost(value) => fr"lastreceiptcost = $value"
            case ProductvendorFieldValue.lastreceiptdate(value) => fr"lastreceiptdate = $value"
            case ProductvendorFieldValue.minorderqty(value) => fr"minorderqty = $value"
            case ProductvendorFieldValue.maxorderqty(value) => fr"maxorderqty = $value"
            case ProductvendorFieldValue.onorderqty(value) => fr"onorderqty = $value"
            case ProductvendorFieldValue.unitmeasurecode(value) => fr"unitmeasurecode = $value"
            case ProductvendorFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update purchasing.productvendor
              $updates
              where productid = ${compositeId.productid} AND businessentityid = ${compositeId.businessentityid}
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: ProductvendorRow): ConnectionIO[ProductvendorRow] = {
    sql"""insert into purchasing.productvendor(productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate)
          values (
            ${unsaved.productid}::int4,
            ${unsaved.businessentityid}::int4,
            ${unsaved.averageleadtime}::int4,
            ${unsaved.standardprice}::numeric,
            ${unsaved.lastreceiptcost}::numeric,
            ${unsaved.lastreceiptdate}::timestamp,
            ${unsaved.minorderqty}::int4,
            ${unsaved.maxorderqty}::int4,
            ${unsaved.onorderqty}::int4,
            ${unsaved.unitmeasurecode}::bpchar,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productid, businessentityid)
          do update set
            averageleadtime = EXCLUDED.averageleadtime,
            standardprice = EXCLUDED.standardprice,
            lastreceiptcost = EXCLUDED.lastreceiptcost,
            lastreceiptdate = EXCLUDED.lastreceiptdate,
            minorderqty = EXCLUDED.minorderqty,
            maxorderqty = EXCLUDED.maxorderqty,
            onorderqty = EXCLUDED.onorderqty,
            unitmeasurecode = EXCLUDED.unitmeasurecode,
            modifieddate = EXCLUDED.modifieddate
          returning productid, businessentityid, averageleadtime, standardprice, lastreceiptcost, lastreceiptdate, minorderqty, maxorderqty, onorderqty, unitmeasurecode, modifieddate
       """.query.unique
  }
  implicit val read: Read[ProductvendorRow] =
    new Read[ProductvendorRow](
      gets = List(
        (Get[ProductId], Nullability.NoNulls),
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.Nullable),
        (Get[UnitmeasureId], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ProductvendorRow(
        productid = Get[ProductId].unsafeGetNonNullable(rs, i + 0),
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 1),
        averageleadtime = Get[Int].unsafeGetNonNullable(rs, i + 2),
        standardprice = Get[BigDecimal].unsafeGetNonNullable(rs, i + 3),
        lastreceiptcost = Get[BigDecimal].unsafeGetNullable(rs, i + 4),
        lastreceiptdate = Get[LocalDateTime].unsafeGetNullable(rs, i + 5),
        minorderqty = Get[Int].unsafeGetNonNullable(rs, i + 6),
        maxorderqty = Get[Int].unsafeGetNonNullable(rs, i + 7),
        onorderqty = Get[Int].unsafeGetNullable(rs, i + 8),
        unitmeasurecode = Get[UnitmeasureId].unsafeGetNonNullable(rs, i + 9),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 10)
      )
    )
  

}
