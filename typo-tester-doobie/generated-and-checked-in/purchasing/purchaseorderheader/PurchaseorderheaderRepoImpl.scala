/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderheader

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.purchasing.shipmethod.ShipmethodId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object PurchaseorderheaderRepoImpl extends PurchaseorderheaderRepo {
  override def delete(purchaseorderid: PurchaseorderheaderId): ConnectionIO[Boolean] = {
    sql"delete from purchasing.purchaseorderheader where purchaseorderid = $purchaseorderid".update.run.map(_ > 0)
  }
  override def insert(unsaved: PurchaseorderheaderRow): ConnectionIO[PurchaseorderheaderRow] = {
    sql"""insert into purchasing.purchaseorderheader(purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate)
          values (${unsaved.purchaseorderid}::int4, ${unsaved.revisionnumber}::int2, ${unsaved.status}::int2, ${unsaved.employeeid}::int4, ${unsaved.vendorid}::int4, ${unsaved.shipmethodid}::int4, ${unsaved.orderdate}::timestamp, ${unsaved.shipdate}::timestamp, ${unsaved.subtotal}::numeric, ${unsaved.taxamt}::numeric, ${unsaved.freight}::numeric, ${unsaved.modifieddate}::timestamp)
          returning purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate
       """.query.unique
  }
  override def insert(unsaved: PurchaseorderheaderRowUnsaved): ConnectionIO[PurchaseorderheaderRow] = {
    val fs = List(
      Some((Fragment.const(s"employeeid"), fr"${unsaved.employeeid}::int4")),
      Some((Fragment.const(s"vendorid"), fr"${unsaved.vendorid}::int4")),
      Some((Fragment.const(s"shipmethodid"), fr"${unsaved.shipmethodid}::int4")),
      Some((Fragment.const(s"shipdate"), fr"${unsaved.shipdate}::timestamp")),
      unsaved.purchaseorderid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"purchaseorderid"), fr"${value: PurchaseorderheaderId}::int4"))
      },
      unsaved.revisionnumber match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"revisionnumber"), fr"${value: Int}::int2"))
      },
      unsaved.status match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"status"), fr"${value: Int}::int2"))
      },
      unsaved.orderdate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"orderdate"), fr"${value: LocalDateTime}::timestamp"))
      },
      unsaved.subtotal match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"subtotal"), fr"${value: BigDecimal}::numeric"))
      },
      unsaved.taxamt match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"taxamt"), fr"${value: BigDecimal}::numeric"))
      },
      unsaved.freight match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"freight"), fr"${value: BigDecimal}::numeric"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into purchasing.purchaseorderheader default values
            returning purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into purchasing.purchaseorderheader(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, PurchaseorderheaderRow] = {
    sql"select purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate from purchasing.purchaseorderheader".query[PurchaseorderheaderRow].stream
  }
  override def selectByFieldValues(fieldValues: List[PurchaseorderheaderFieldOrIdValue[_]]): Stream[ConnectionIO, PurchaseorderheaderRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case PurchaseorderheaderFieldValue.purchaseorderid(value) => fr"purchaseorderid = $value"
        case PurchaseorderheaderFieldValue.revisionnumber(value) => fr"revisionnumber = $value"
        case PurchaseorderheaderFieldValue.status(value) => fr"status = $value"
        case PurchaseorderheaderFieldValue.employeeid(value) => fr"employeeid = $value"
        case PurchaseorderheaderFieldValue.vendorid(value) => fr"vendorid = $value"
        case PurchaseorderheaderFieldValue.shipmethodid(value) => fr"shipmethodid = $value"
        case PurchaseorderheaderFieldValue.orderdate(value) => fr"orderdate = $value"
        case PurchaseorderheaderFieldValue.shipdate(value) => fr"shipdate = $value"
        case PurchaseorderheaderFieldValue.subtotal(value) => fr"subtotal = $value"
        case PurchaseorderheaderFieldValue.taxamt(value) => fr"taxamt = $value"
        case PurchaseorderheaderFieldValue.freight(value) => fr"freight = $value"
        case PurchaseorderheaderFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from purchasing.purchaseorderheader $where".query[PurchaseorderheaderRow].stream
  
  }
  override def selectById(purchaseorderid: PurchaseorderheaderId): ConnectionIO[Option[PurchaseorderheaderRow]] = {
    sql"select purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate from purchasing.purchaseorderheader where purchaseorderid = $purchaseorderid".query[PurchaseorderheaderRow].option
  }
  override def selectByIds(purchaseorderids: Array[PurchaseorderheaderId]): Stream[ConnectionIO, PurchaseorderheaderRow] = {
    sql"select purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate from purchasing.purchaseorderheader where purchaseorderid = ANY($purchaseorderids)".query[PurchaseorderheaderRow].stream
  }
  override def update(row: PurchaseorderheaderRow): ConnectionIO[Boolean] = {
    val purchaseorderid = row.purchaseorderid
    sql"""update purchasing.purchaseorderheader
          set revisionnumber = ${row.revisionnumber}::int2,
              status = ${row.status}::int2,
              employeeid = ${row.employeeid}::int4,
              vendorid = ${row.vendorid}::int4,
              shipmethodid = ${row.shipmethodid}::int4,
              orderdate = ${row.orderdate}::timestamp,
              shipdate = ${row.shipdate}::timestamp,
              subtotal = ${row.subtotal}::numeric,
              taxamt = ${row.taxamt}::numeric,
              freight = ${row.freight}::numeric,
              modifieddate = ${row.modifieddate}::timestamp
          where purchaseorderid = $purchaseorderid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(purchaseorderid: PurchaseorderheaderId, fieldValues: List[PurchaseorderheaderFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case PurchaseorderheaderFieldValue.revisionnumber(value) => fr"revisionnumber = $value"
            case PurchaseorderheaderFieldValue.status(value) => fr"status = $value"
            case PurchaseorderheaderFieldValue.employeeid(value) => fr"employeeid = $value"
            case PurchaseorderheaderFieldValue.vendorid(value) => fr"vendorid = $value"
            case PurchaseorderheaderFieldValue.shipmethodid(value) => fr"shipmethodid = $value"
            case PurchaseorderheaderFieldValue.orderdate(value) => fr"orderdate = $value"
            case PurchaseorderheaderFieldValue.shipdate(value) => fr"shipdate = $value"
            case PurchaseorderheaderFieldValue.subtotal(value) => fr"subtotal = $value"
            case PurchaseorderheaderFieldValue.taxamt(value) => fr"taxamt = $value"
            case PurchaseorderheaderFieldValue.freight(value) => fr"freight = $value"
            case PurchaseorderheaderFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update purchasing.purchaseorderheader
              $updates
              where purchaseorderid = $purchaseorderid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: PurchaseorderheaderRow): ConnectionIO[PurchaseorderheaderRow] = {
    sql"""insert into purchasing.purchaseorderheader(purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate)
          values (
            ${unsaved.purchaseorderid}::int4,
            ${unsaved.revisionnumber}::int2,
            ${unsaved.status}::int2,
            ${unsaved.employeeid}::int4,
            ${unsaved.vendorid}::int4,
            ${unsaved.shipmethodid}::int4,
            ${unsaved.orderdate}::timestamp,
            ${unsaved.shipdate}::timestamp,
            ${unsaved.subtotal}::numeric,
            ${unsaved.taxamt}::numeric,
            ${unsaved.freight}::numeric,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (purchaseorderid)
          do update set
            revisionnumber = EXCLUDED.revisionnumber,
            status = EXCLUDED.status,
            employeeid = EXCLUDED.employeeid,
            vendorid = EXCLUDED.vendorid,
            shipmethodid = EXCLUDED.shipmethodid,
            orderdate = EXCLUDED.orderdate,
            shipdate = EXCLUDED.shipdate,
            subtotal = EXCLUDED.subtotal,
            taxamt = EXCLUDED.taxamt,
            freight = EXCLUDED.freight,
            modifieddate = EXCLUDED.modifieddate
          returning purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate
       """.query.unique
  }
  implicit val read: Read[PurchaseorderheaderRow] =
    new Read[PurchaseorderheaderRow](
      gets = List(
        (Get[PurchaseorderheaderId], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[ShipmethodId], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PurchaseorderheaderRow(
        purchaseorderid = Get[PurchaseorderheaderId].unsafeGetNonNullable(rs, i + 0),
        revisionnumber = Get[Int].unsafeGetNonNullable(rs, i + 1),
        status = Get[Int].unsafeGetNonNullable(rs, i + 2),
        employeeid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 3),
        vendorid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 4),
        shipmethodid = Get[ShipmethodId].unsafeGetNonNullable(rs, i + 5),
        orderdate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 6),
        shipdate = Get[LocalDateTime].unsafeGetNullable(rs, i + 7),
        subtotal = Get[BigDecimal].unsafeGetNonNullable(rs, i + 8),
        taxamt = Get[BigDecimal].unsafeGetNonNullable(rs, i + 9),
        freight = Get[BigDecimal].unsafeGetNonNullable(rs, i + 10),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 11)
      )
    )
  

}
