/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderheader

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.purchasing.shipmethod.ShipmethodId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class PurchaseorderheaderRow(
  /** Primary key. */
  purchaseorderid: PurchaseorderheaderId,
  /** Incremental number to track changes to the purchase order over time. */
  revisionnumber: Int,
  /** Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete */
  status: Int,
  /** Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
      Points to [[humanresources.employee.EmployeeRow.businessentityid]] */
  employeeid: BusinessentityId,
  /** Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
      Points to [[vendor.VendorRow.businessentityid]] */
  vendorid: BusinessentityId,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
      Points to [[shipmethod.ShipmethodRow.shipmethodid]] */
  shipmethodid: ShipmethodId,
  /** Purchase order creation date. */
  orderdate: LocalDateTime,
  /** Estimated shipment date from the vendor. */
  shipdate: Option[LocalDateTime],
  /** Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID. */
  subtotal: BigDecimal,
  /** Tax amount. */
  taxamt: BigDecimal,
  /** Shipping cost. */
  freight: BigDecimal,
  modifieddate: LocalDateTime
)

object PurchaseorderheaderRow {
  implicit val decoder: Decoder[PurchaseorderheaderRow] =
    (c: HCursor) =>
      for {
        purchaseorderid <- c.downField("purchaseorderid").as[PurchaseorderheaderId]
        revisionnumber <- c.downField("revisionnumber").as[Int]
        status <- c.downField("status").as[Int]
        employeeid <- c.downField("employeeid").as[BusinessentityId]
        vendorid <- c.downField("vendorid").as[BusinessentityId]
        shipmethodid <- c.downField("shipmethodid").as[ShipmethodId]
        orderdate <- c.downField("orderdate").as[LocalDateTime]
        shipdate <- c.downField("shipdate").as[Option[LocalDateTime]]
        subtotal <- c.downField("subtotal").as[BigDecimal]
        taxamt <- c.downField("taxamt").as[BigDecimal]
        freight <- c.downField("freight").as[BigDecimal]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield PurchaseorderheaderRow(purchaseorderid, revisionnumber, status, employeeid, vendorid, shipmethodid, orderdate, shipdate, subtotal, taxamt, freight, modifieddate)
  implicit val encoder: Encoder[PurchaseorderheaderRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "purchaseorderid" := row.purchaseorderid,
        "revisionnumber" := row.revisionnumber,
        "status" := row.status,
        "employeeid" := row.employeeid,
        "vendorid" := row.vendorid,
        "shipmethodid" := row.shipmethodid,
        "orderdate" := row.orderdate,
        "shipdate" := row.shipdate,
        "subtotal" := row.subtotal,
        "taxamt" := row.taxamt,
        "freight" := row.freight,
        "modifieddate" := row.modifieddate
      )}
}
