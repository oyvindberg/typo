/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderheader

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class PurchaseorderheaderRepoMock(toRow: Function1[PurchaseorderheaderRowUnsaved, PurchaseorderheaderRow],
                                  map: scala.collection.mutable.Map[PurchaseorderheaderId, PurchaseorderheaderRow] = scala.collection.mutable.Map.empty) extends PurchaseorderheaderRepo {
  override def delete(purchaseorderid: PurchaseorderheaderId): ConnectionIO[Boolean] = {
    delay(map.remove(purchaseorderid).isDefined)
  }
  override def insert(unsaved: PurchaseorderheaderRow): ConnectionIO[PurchaseorderheaderRow] = {
    delay {
      if (map.contains(unsaved.purchaseorderid))
        sys.error(s"id ${unsaved.purchaseorderid} already exists")
      else
        map.put(unsaved.purchaseorderid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: PurchaseorderheaderRowUnsaved): ConnectionIO[PurchaseorderheaderRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, PurchaseorderheaderRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[PurchaseorderheaderFieldOrIdValue[_]]): Stream[ConnectionIO, PurchaseorderheaderRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, PurchaseorderheaderFieldValue.purchaseorderid(value)) => acc.filter(_.purchaseorderid == value)
        case (acc, PurchaseorderheaderFieldValue.revisionnumber(value)) => acc.filter(_.revisionnumber == value)
        case (acc, PurchaseorderheaderFieldValue.status(value)) => acc.filter(_.status == value)
        case (acc, PurchaseorderheaderFieldValue.employeeid(value)) => acc.filter(_.employeeid == value)
        case (acc, PurchaseorderheaderFieldValue.vendorid(value)) => acc.filter(_.vendorid == value)
        case (acc, PurchaseorderheaderFieldValue.shipmethodid(value)) => acc.filter(_.shipmethodid == value)
        case (acc, PurchaseorderheaderFieldValue.orderdate(value)) => acc.filter(_.orderdate == value)
        case (acc, PurchaseorderheaderFieldValue.shipdate(value)) => acc.filter(_.shipdate == value)
        case (acc, PurchaseorderheaderFieldValue.subtotal(value)) => acc.filter(_.subtotal == value)
        case (acc, PurchaseorderheaderFieldValue.taxamt(value)) => acc.filter(_.taxamt == value)
        case (acc, PurchaseorderheaderFieldValue.freight(value)) => acc.filter(_.freight == value)
        case (acc, PurchaseorderheaderFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(purchaseorderid: PurchaseorderheaderId): ConnectionIO[Option[PurchaseorderheaderRow]] = {
    delay(map.get(purchaseorderid))
  }
  override def selectByIds(purchaseorderids: Array[PurchaseorderheaderId]): Stream[ConnectionIO, PurchaseorderheaderRow] = {
    Stream.emits(purchaseorderids.flatMap(map.get).toList)
  }
  override def update(row: PurchaseorderheaderRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.purchaseorderid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.purchaseorderid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(purchaseorderid: PurchaseorderheaderId, fieldValues: List[PurchaseorderheaderFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(purchaseorderid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, PurchaseorderheaderFieldValue.revisionnumber(value)) => acc.copy(revisionnumber = value)
            case (acc, PurchaseorderheaderFieldValue.status(value)) => acc.copy(status = value)
            case (acc, PurchaseorderheaderFieldValue.employeeid(value)) => acc.copy(employeeid = value)
            case (acc, PurchaseorderheaderFieldValue.vendorid(value)) => acc.copy(vendorid = value)
            case (acc, PurchaseorderheaderFieldValue.shipmethodid(value)) => acc.copy(shipmethodid = value)
            case (acc, PurchaseorderheaderFieldValue.orderdate(value)) => acc.copy(orderdate = value)
            case (acc, PurchaseorderheaderFieldValue.shipdate(value)) => acc.copy(shipdate = value)
            case (acc, PurchaseorderheaderFieldValue.subtotal(value)) => acc.copy(subtotal = value)
            case (acc, PurchaseorderheaderFieldValue.taxamt(value)) => acc.copy(taxamt = value)
            case (acc, PurchaseorderheaderFieldValue.freight(value)) => acc.copy(freight = value)
            case (acc, PurchaseorderheaderFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(purchaseorderid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: PurchaseorderheaderRow): ConnectionIO[PurchaseorderheaderRow] = {
    delay {
      map.put(unsaved.purchaseorderid, unsaved)
      unsaved
    }
  }
}
