/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vendor

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream
import java.time.LocalDateTime

object VendorRepoImpl extends VendorRepo {
  override def delete(businessentityid: BusinessentityId): ConnectionIO[Boolean] = {
    sql"delete from purchasing.vendor where businessentityid = $businessentityid".update.run.map(_ > 0)
  }
  override def insert(unsaved: VendorRow): ConnectionIO[VendorRow] = {
    sql"""insert into purchasing.vendor(businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.accountnumber}::"public".AccountNumber, ${unsaved.name}::"public"."Name", ${unsaved.creditrating}::int2, ${unsaved.preferredvendorstatus}::"public"."Flag", ${unsaved.activeflag}::"public"."Flag", ${unsaved.purchasingwebserviceurl}, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
       """.query[VendorRow].unique
  }
  override def insert(unsaved: VendorRowUnsaved): ConnectionIO[VendorRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"accountnumber"), fr"""${unsaved.accountnumber}::"public".AccountNumber""")),
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      Some((Fragment.const(s"creditrating"), fr"${unsaved.creditrating}::int2")),
      Some((Fragment.const(s"purchasingwebserviceurl"), fr"${unsaved.purchasingwebserviceurl}")),
      unsaved.preferredvendorstatus match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"preferredvendorstatus"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.activeflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"activeflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into purchasing.vendor default values
            returning businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into purchasing.vendor(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
         """
    }
    q.query[VendorRow].unique
  
  }
  override def selectAll: Stream[ConnectionIO, VendorRow] = {
    sql"""select businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate from purchasing.vendor""".query[VendorRow].stream
  }
  override def selectById(businessentityid: BusinessentityId): ConnectionIO[Option[VendorRow]] = {
    sql"""select businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate from purchasing.vendor where businessentityid = $businessentityid""".query[VendorRow].option
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): Stream[ConnectionIO, VendorRow] = {
    sql"""select businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate from purchasing.vendor where businessentityid = ANY($businessentityids)""".query[VendorRow].stream
  }
  override def update(row: VendorRow): ConnectionIO[Boolean] = {
    val businessentityid = row.businessentityid
    sql"""update purchasing.vendor
          set accountnumber = ${row.accountnumber}::"public".AccountNumber,
              "name" = ${row.name}::"public"."Name",
              creditrating = ${row.creditrating}::int2,
              preferredvendorstatus = ${row.preferredvendorstatus}::"public"."Flag",
              activeflag = ${row.activeflag}::"public"."Flag",
              purchasingwebserviceurl = ${row.purchasingwebserviceurl},
              modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = $businessentityid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: VendorRow): ConnectionIO[VendorRow] = {
    sql"""insert into purchasing.vendor(businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.accountnumber}::"public".AccountNumber,
            ${unsaved.name}::"public"."Name",
            ${unsaved.creditrating}::int2,
            ${unsaved.preferredvendorstatus}::"public"."Flag",
            ${unsaved.activeflag}::"public"."Flag",
            ${unsaved.purchasingwebserviceurl},
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid)
          do update set
            accountnumber = EXCLUDED.accountnumber,
            "name" = EXCLUDED."name",
            creditrating = EXCLUDED.creditrating,
            preferredvendorstatus = EXCLUDED.preferredvendorstatus,
            activeflag = EXCLUDED.activeflag,
            purchasingwebserviceurl = EXCLUDED.purchasingwebserviceurl,
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
       """.query[VendorRow].unique
  }
}
