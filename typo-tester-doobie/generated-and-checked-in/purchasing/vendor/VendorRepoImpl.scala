/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vendor

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object VendorRepoImpl extends VendorRepo {
  override def delete(businessentityid: BusinessentityId): ConnectionIO[Boolean] = {
    sql"delete from purchasing.vendor where businessentityid = $businessentityid".update.run.map(_ > 0)
  }
  override def insert(unsaved: VendorRow): ConnectionIO[VendorRow] = {
    sql"""insert into purchasing.vendor(businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate)
          values (${unsaved.businessentityid}::int4, ${unsaved.accountnumber}::"public".AccountNumber, ${unsaved.name}::"public"."Name", ${unsaved.creditrating}::int2, ${unsaved.preferredvendorstatus}::"public"."Flag", ${unsaved.activeflag}::"public"."Flag", ${unsaved.purchasingwebserviceurl}, ${unsaved.modifieddate}::timestamp)
          returning businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
       """.query.unique
  }
  override def insert(unsaved: VendorRowUnsaved): ConnectionIO[VendorRow] = {
    val fs = List(
      Some((Fragment.const(s"businessentityid"), fr"${unsaved.businessentityid}::int4")),
      Some((Fragment.const(s"accountnumber"), fr"""${unsaved.accountnumber}::"public".AccountNumber""")),
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      Some((Fragment.const(s"creditrating"), fr"${unsaved.creditrating}::int2")),
      Some((Fragment.const(s"purchasingwebserviceurl"), fr"${unsaved.purchasingwebserviceurl}")),
      unsaved.preferredvendorstatus match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"preferredvendorstatus"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.activeflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"activeflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into purchasing.vendor default values
            returning businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into purchasing.vendor(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, VendorRow] = {
    sql"""select businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate from purchasing.vendor""".query[VendorRow].stream
  }
  override def selectByFieldValues(fieldValues: List[VendorFieldOrIdValue[_]]): Stream[ConnectionIO, VendorRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case VendorFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case VendorFieldValue.accountnumber(value) => fr"accountnumber = $value"
        case VendorFieldValue.name(value) => fr""""name" = $value"""
        case VendorFieldValue.creditrating(value) => fr"creditrating = $value"
        case VendorFieldValue.preferredvendorstatus(value) => fr"preferredvendorstatus = $value"
        case VendorFieldValue.activeflag(value) => fr"activeflag = $value"
        case VendorFieldValue.purchasingwebserviceurl(value) => fr"purchasingwebserviceurl = $value"
        case VendorFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from purchasing.vendor $where".query[VendorRow].stream
  
  }
  override def selectById(businessentityid: BusinessentityId): ConnectionIO[Option[VendorRow]] = {
    sql"""select businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate from purchasing.vendor where businessentityid = $businessentityid""".query[VendorRow].option
  }
  override def selectByIds(businessentityids: Array[BusinessentityId]): Stream[ConnectionIO, VendorRow] = {
    sql"""select businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate from purchasing.vendor where businessentityid = ANY($businessentityids)""".query[VendorRow].stream
  }
  override def update(row: VendorRow): ConnectionIO[Boolean] = {
    val businessentityid = row.businessentityid
    sql"""update purchasing.vendor
          set accountnumber = ${row.accountnumber}::"public".AccountNumber,
              "name" = ${row.name}::"public"."Name",
              creditrating = ${row.creditrating}::int2,
              preferredvendorstatus = ${row.preferredvendorstatus}::"public"."Flag",
              activeflag = ${row.activeflag}::"public"."Flag",
              purchasingwebserviceurl = ${row.purchasingwebserviceurl},
              modifieddate = ${row.modifieddate}::timestamp
          where businessentityid = $businessentityid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(businessentityid: BusinessentityId, fieldValues: List[VendorFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case VendorFieldValue.accountnumber(value) => fr"accountnumber = $value"
            case VendorFieldValue.name(value) => fr""""name" = $value"""
            case VendorFieldValue.creditrating(value) => fr"creditrating = $value"
            case VendorFieldValue.preferredvendorstatus(value) => fr"preferredvendorstatus = $value"
            case VendorFieldValue.activeflag(value) => fr"activeflag = $value"
            case VendorFieldValue.purchasingwebserviceurl(value) => fr"purchasingwebserviceurl = $value"
            case VendorFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update purchasing.vendor
              $updates
              where businessentityid = $businessentityid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: VendorRow): ConnectionIO[VendorRow] = {
    sql"""insert into purchasing.vendor(businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate)
          values (
            ${unsaved.businessentityid}::int4,
            ${unsaved.accountnumber}::"public".AccountNumber,
            ${unsaved.name}::"public"."Name",
            ${unsaved.creditrating}::int2,
            ${unsaved.preferredvendorstatus}::"public"."Flag",
            ${unsaved.activeflag}::"public"."Flag",
            ${unsaved.purchasingwebserviceurl},
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (businessentityid)
          do update set
            accountnumber = EXCLUDED.accountnumber,
            "name" = EXCLUDED."name",
            creditrating = EXCLUDED.creditrating,
            preferredvendorstatus = EXCLUDED.preferredvendorstatus,
            activeflag = EXCLUDED.activeflag,
            purchasingwebserviceurl = EXCLUDED.purchasingwebserviceurl,
            modifieddate = EXCLUDED.modifieddate
          returning businessentityid, accountnumber, "name", creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate
       """.query.unique
  }
  implicit val read: Read[VendorRow] =
    new Read[VendorRow](
      gets = List(
        (Get[BusinessentityId], Nullability.NoNulls),
        (Get[AccountNumber], Nullability.NoNulls),
        (Get[Name], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Flag], Nullability.NoNulls),
        (Get[Flag], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => VendorRow(
        businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
        accountnumber = Get[AccountNumber].unsafeGetNonNullable(rs, i + 1),
        name = Get[Name].unsafeGetNonNullable(rs, i + 2),
        creditrating = Get[Int].unsafeGetNonNullable(rs, i + 3),
        preferredvendorstatus = Get[Flag].unsafeGetNonNullable(rs, i + 4),
        activeflag = Get[Flag].unsafeGetNonNullable(rs, i + 5),
        purchasingwebserviceurl = Get[String].unsafeGetNullable(rs, i + 6),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 7)
      )
    )
  

}
