/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vendor

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class VendorRow(
  /** Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID
      Points to [[person.businessentity.BusinessentityRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Vendor account (identification) number. */
  accountnumber: AccountNumber,
  /** Company name. */
  name: Name,
  /** 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average */
  creditrating: Int,
  /** 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product. */
  preferredvendorstatus: Flag,
  /** 0 = Vendor no longer used. 1 = Vendor is actively used. */
  activeflag: Flag,
  /** Vendor URL. */
  purchasingwebserviceurl: Option[String],
  modifieddate: LocalDateTime
)

object VendorRow {
  implicit val decoder: Decoder[VendorRow] =
    (c: HCursor) =>
      for {
        businessentityid <- c.downField("businessentityid").as[BusinessentityId]
        accountnumber <- c.downField("accountnumber").as[AccountNumber]
        name <- c.downField("name").as[Name]
        creditrating <- c.downField("creditrating").as[Int]
        preferredvendorstatus <- c.downField("preferredvendorstatus").as[Flag]
        activeflag <- c.downField("activeflag").as[Flag]
        purchasingwebserviceurl <- c.downField("purchasingwebserviceurl").as[Option[String]]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield VendorRow(businessentityid, accountnumber, name, creditrating, preferredvendorstatus, activeflag, purchasingwebserviceurl, modifieddate)
  implicit val encoder: Encoder[VendorRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "businessentityid" := row.businessentityid,
        "accountnumber" := row.accountnumber,
        "name" := row.name,
        "creditrating" := row.creditrating,
        "preferredvendorstatus" := row.preferredvendorstatus,
        "activeflag" := row.activeflag,
        "purchasingwebserviceurl" := row.purchasingwebserviceurl,
        "modifieddate" := row.modifieddate
      )}
}
