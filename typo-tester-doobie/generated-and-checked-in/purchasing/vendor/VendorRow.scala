/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package vendor

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.AccountNumber
import adventureworks.public.Flag
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class VendorRow(
  /** Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID
      Points to [[person.businessentity.BusinessentityRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Vendor account (identification) number. */
  accountnumber: AccountNumber,
  /** Company name. */
  name: Name,
  /** 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average */
  creditrating: Int,
  /** 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product. */
  preferredvendorstatus: Flag,
  /** 0 = Vendor no longer used. 1 = Vendor is actively used. */
  activeflag: Flag,
  /** Vendor URL. */
  purchasingwebserviceurl: Option[/* max 1024 chars */ String],
  modifieddate: TypoLocalDateTime
)

object VendorRow {
  implicit val decoder: Decoder[VendorRow] = Decoder.forProduct8[VendorRow, BusinessentityId, AccountNumber, Name, Int, Flag, Flag, Option[/* max 1024 chars */ String], TypoLocalDateTime]("businessentityid", "accountnumber", "name", "creditrating", "preferredvendorstatus", "activeflag", "purchasingwebserviceurl", "modifieddate")(VendorRow.apply)
  implicit val encoder: Encoder[VendorRow] = Encoder.forProduct8[VendorRow, BusinessentityId, AccountNumber, Name, Int, Flag, Flag, Option[/* max 1024 chars */ String], TypoLocalDateTime]("businessentityid", "accountnumber", "name", "creditrating", "preferredvendorstatus", "activeflag", "purchasingwebserviceurl", "modifieddate")(x => (x.businessentityid, x.accountnumber, x.name, x.creditrating, x.preferredvendorstatus, x.activeflag, x.purchasingwebserviceurl, x.modifieddate))
  implicit val read: Read[VendorRow] = new Read[VendorRow](
    gets = List(
      (Get[BusinessentityId], Nullability.NoNulls),
      (Get[AccountNumber], Nullability.NoNulls),
      (Get[Name], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[Flag], Nullability.NoNulls),
      (Get[Flag], Nullability.NoNulls),
      (Get[/* max 1024 chars */ String], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => VendorRow(
      businessentityid = Get[BusinessentityId].unsafeGetNonNullable(rs, i + 0),
      accountnumber = Get[AccountNumber].unsafeGetNonNullable(rs, i + 1),
      name = Get[Name].unsafeGetNonNullable(rs, i + 2),
      creditrating = Get[Int].unsafeGetNonNullable(rs, i + 3),
      preferredvendorstatus = Get[Flag].unsafeGetNonNullable(rs, i + 4),
      activeflag = Get[Flag].unsafeGetNonNullable(rs, i + 5),
      purchasingwebserviceurl = Get[/* max 1024 chars */ String].unsafeGetNullable(rs, i + 6),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 7)
    )
  )
}
