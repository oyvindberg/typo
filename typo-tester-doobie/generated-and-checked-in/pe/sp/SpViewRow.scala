/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package sp

import adventureworks.TypoLocalDateTime
import adventureworks.person.countryregion.CountryregionId
import adventureworks.person.stateprovince.StateprovinceId
import adventureworks.public.Flag
import adventureworks.public.Name
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class SpViewRow(
  id: Option[Int],
  /** Points to [[person.stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: Option[StateprovinceId],
  /** Points to [[person.stateprovince.StateprovinceRow.stateprovincecode]] */
  stateprovincecode: Option[/* bpchar */ String],
  /** Points to [[person.stateprovince.StateprovinceRow.countryregioncode]] */
  countryregioncode: Option[CountryregionId],
  /** Points to [[person.stateprovince.StateprovinceRow.isonlystateprovinceflag]] */
  isonlystateprovinceflag: Flag,
  /** Points to [[person.stateprovince.StateprovinceRow.name]] */
  name: Option[Name],
  /** Points to [[person.stateprovince.StateprovinceRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Points to [[person.stateprovince.StateprovinceRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[person.stateprovince.StateprovinceRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object SpViewRow {
  implicit val decoder: Decoder[SpViewRow] = Decoder.forProduct9[SpViewRow, Option[Int], Option[StateprovinceId], Option[/* bpchar */ String], Option[CountryregionId], Flag, Option[Name], Option[SalesterritoryId], Option[UUID], Option[TypoLocalDateTime]]("id", "stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate")(SpViewRow.apply)
  implicit val encoder: Encoder[SpViewRow] = Encoder.forProduct9[SpViewRow, Option[Int], Option[StateprovinceId], Option[/* bpchar */ String], Option[CountryregionId], Flag, Option[Name], Option[SalesterritoryId], Option[UUID], Option[TypoLocalDateTime]]("id", "stateprovinceid", "stateprovincecode", "countryregioncode", "isonlystateprovinceflag", "name", "territoryid", "rowguid", "modifieddate")(x => (x.id, x.stateprovinceid, x.stateprovincecode, x.countryregioncode, x.isonlystateprovinceflag, x.name, x.territoryid, x.rowguid, x.modifieddate))
  implicit val read: Read[SpViewRow] = new Read[SpViewRow](
    gets = List(
      (Get[Int], Nullability.Nullable),
      (Get[StateprovinceId], Nullability.Nullable),
      (Get[/* bpchar */ String], Nullability.Nullable),
      (Get[CountryregionId], Nullability.Nullable),
      (Get[Flag], Nullability.NoNulls),
      (Get[Name], Nullability.Nullable),
      (Get[SalesterritoryId], Nullability.Nullable),
      (Get[UUID], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SpViewRow(
      id = Get[Int].unsafeGetNullable(rs, i + 0),
      stateprovinceid = Get[StateprovinceId].unsafeGetNullable(rs, i + 1),
      stateprovincecode = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 2),
      countryregioncode = Get[CountryregionId].unsafeGetNullable(rs, i + 3),
      isonlystateprovinceflag = Get[Flag].unsafeGetNonNullable(rs, i + 4),
      name = Get[Name].unsafeGetNullable(rs, i + 5),
      territoryid = Get[SalesterritoryId].unsafeGetNullable(rs, i + 6),
      rowguid = Get[UUID].unsafeGetNullable(rs, i + 7),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 8)
    )
  )
}
