/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package e

import adventureworks.person.businessentity.BusinessentityId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

case class EViewRow(
  id: Option[Int],
  /** Points to [[person.emailaddress.EmailaddressRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[person.emailaddress.EmailaddressRow.emailaddressid]] */
  emailaddressid: Option[Int],
  /** Points to [[person.emailaddress.EmailaddressRow.emailaddress]] */
  emailaddress: Option[String],
  /** Points to [[person.emailaddress.EmailaddressRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[person.emailaddress.EmailaddressRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object EViewRow {
  implicit val decoder: Decoder[EViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        businessentityid <- c.downField("businessentityid").as[Option[BusinessentityId]]
        emailaddressid <- c.downField("emailaddressid").as[Option[Int]]
        emailaddress <- c.downField("emailaddress").as[Option[String]]
        rowguid <- c.downField("rowguid").as[Option[UUID]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield EViewRow(id, businessentityid, emailaddressid, emailaddress, rowguid, modifieddate)
  implicit val encoder: Encoder[EViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "businessentityid" := row.businessentityid,
        "emailaddressid" := row.emailaddressid,
        "emailaddress" := row.emailaddress,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
