/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package pp

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.phonenumbertype.PhonenumbertypeId
import adventureworks.public.Phone
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class PpViewRow(
  id: Option[Int],
  /** Points to [[person.personphone.PersonphoneRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[person.personphone.PersonphoneRow.phonenumber]] */
  phonenumber: Option[Phone],
  /** Points to [[person.personphone.PersonphoneRow.phonenumbertypeid]] */
  phonenumbertypeid: Option[PhonenumbertypeId],
  /** Points to [[person.personphone.PersonphoneRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object PpViewRow {
  implicit val decoder: Decoder[PpViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        businessentityid <- c.downField("businessentityid").as[Option[BusinessentityId]]
        phonenumber <- c.downField("phonenumber").as[Option[Phone]]
        phonenumbertypeid <- c.downField("phonenumbertypeid").as[Option[PhonenumbertypeId]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield PpViewRow(id, businessentityid, phonenumber, phonenumbertypeid, modifieddate)
  implicit val encoder: Encoder[PpViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "businessentityid" := row.businessentityid,
        "phonenumber" := row.phonenumber,
        "phonenumbertypeid" := row.phonenumbertypeid,
        "modifieddate" := row.modifieddate
      )}
}
