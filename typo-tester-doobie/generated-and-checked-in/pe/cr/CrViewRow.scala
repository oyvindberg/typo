/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package cr

import adventureworks.TypoLocalDateTime
import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class CrViewRow(
  /** Points to [[person.countryregion.CountryregionRow.countryregioncode]] */
  countryregioncode: Option[CountryregionId],
  /** Points to [[person.countryregion.CountryregionRow.name]] */
  name: Option[Name],
  /** Points to [[person.countryregion.CountryregionRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object CrViewRow {
  implicit val decoder: Decoder[CrViewRow] = Decoder.forProduct3[CrViewRow, Option[CountryregionId], Option[Name], Option[TypoLocalDateTime]]("countryregioncode", "name", "modifieddate")(CrViewRow.apply)(Decoder.decodeOption(CountryregionId.decoder), Decoder.decodeOption(Name.decoder), Decoder.decodeOption(TypoLocalDateTime.decoder))
  implicit val encoder: Encoder[CrViewRow] = Encoder.forProduct3[CrViewRow, Option[CountryregionId], Option[Name], Option[TypoLocalDateTime]]("countryregioncode", "name", "modifieddate")(x => (x.countryregioncode, x.name, x.modifieddate))(Encoder.encodeOption(CountryregionId.encoder), Encoder.encodeOption(Name.encoder), Encoder.encodeOption(TypoLocalDateTime.encoder))
  implicit val read: Read[CrViewRow] = new Read[CrViewRow](
    gets = List(
      (CountryregionId.get, Nullability.Nullable),
      (Name.get, Nullability.Nullable),
      (TypoLocalDateTime.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => CrViewRow(
      countryregioncode = CountryregionId.get.unsafeGetNullable(rs, i + 0),
      name = Name.get.unsafeGetNullable(rs, i + 1),
      modifieddate = TypoLocalDateTime.get.unsafeGetNullable(rs, i + 2)
    )
  )
}
