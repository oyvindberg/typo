/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package pa

import adventureworks.person.businessentity.BusinessentityId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

case class PaViewRow(
  id: Option[Int],
  /** Points to [[person.password.PasswordRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[person.password.PasswordRow.passwordhash]] */
  passwordhash: Option[String],
  /** Points to [[person.password.PasswordRow.passwordsalt]] */
  passwordsalt: Option[String],
  /** Points to [[person.password.PasswordRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[person.password.PasswordRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object PaViewRow {
  implicit val decoder: Decoder[PaViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        businessentityid <- c.downField("businessentityid").as[Option[BusinessentityId]]
        passwordhash <- c.downField("passwordhash").as[Option[String]]
        passwordsalt <- c.downField("passwordsalt").as[Option[String]]
        rowguid <- c.downField("rowguid").as[Option[UUID]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield PaViewRow(id, businessentityid, passwordhash, passwordsalt, rowguid, modifieddate)
  implicit val encoder: Encoder[PaViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "businessentityid" := row.businessentityid,
        "passwordhash" := row.passwordhash,
        "passwordsalt" := row.passwordsalt,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
