/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package be

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class BeViewRow(
  id: Option[Int],
  /** Points to [[person.businessentity.BusinessentityRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[person.businessentity.BusinessentityRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[person.businessentity.BusinessentityRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object BeViewRow {
  implicit val decoder: Decoder[BeViewRow] = Decoder.forProduct4[BeViewRow, Option[Int], Option[BusinessentityId], Option[UUID], Option[TypoLocalDateTime]]("id", "businessentityid", "rowguid", "modifieddate")(BeViewRow.apply)
  implicit val encoder: Encoder[BeViewRow] = Encoder.forProduct4[BeViewRow, Option[Int], Option[BusinessentityId], Option[UUID], Option[TypoLocalDateTime]]("id", "businessentityid", "rowguid", "modifieddate")(x => (x.id, x.businessentityid, x.rowguid, x.modifieddate))
  implicit val read: Read[BeViewRow] = new Read[BeViewRow](
    gets = List(
      (Get[Int], Nullability.Nullable),
      (Get[BusinessentityId], Nullability.Nullable),
      (Get[UUID], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => BeViewRow(
      id = Get[Int].unsafeGetNullable(rs, i + 0),
      businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 1),
      rowguid = Get[UUID].unsafeGetNullable(rs, i + 2),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 3)
    )
  )
}
