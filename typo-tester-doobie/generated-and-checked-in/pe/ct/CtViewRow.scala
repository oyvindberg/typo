/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package ct

import adventureworks.person.contacttype.ContacttypeId
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class CtViewRow(
  id: Option[Int],
  /** Points to [[person.contacttype.ContacttypeRow.contacttypeid]] */
  contacttypeid: Option[ContacttypeId],
  /** Points to [[person.contacttype.ContacttypeRow.name]] */
  name: Option[Name],
  /** Points to [[person.contacttype.ContacttypeRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object CtViewRow {
  implicit val decoder: Decoder[CtViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        contacttypeid <- c.downField("contacttypeid").as[Option[ContacttypeId]]
        name <- c.downField("name").as[Option[Name]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield CtViewRow(id, contacttypeid, name, modifieddate)
  implicit val encoder: Encoder[CtViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "contacttypeid" := row.contacttypeid,
        "name" := row.name,
        "modifieddate" := row.modifieddate
      )}
}
