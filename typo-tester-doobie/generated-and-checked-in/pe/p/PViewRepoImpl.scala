/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package p

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import adventureworks.public.NameStyle
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID
import org.postgresql.jdbc.PgSQLXML

object PViewRepoImpl extends PViewRepo {
  override def selectAll: Stream[ConnectionIO, PViewRow] = {
    sql"""select "id", businessentityid, persontype, namestyle, title, firstname, middlename, lastname, suffix, emailpromotion, additionalcontactinfo, demographics, rowguid, modifieddate from pe."p"""".query[PViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[PViewFieldOrIdValue[_]]): Stream[ConnectionIO, PViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case PViewFieldValue.id(value) => fr""""id" = $value"""
        case PViewFieldValue.businessentityid(value) => fr"businessentityid = $value"
        case PViewFieldValue.persontype(value) => fr"persontype = $value"
        case PViewFieldValue.namestyle(value) => fr"namestyle = $value"
        case PViewFieldValue.title(value) => fr"title = $value"
        case PViewFieldValue.firstname(value) => fr"firstname = $value"
        case PViewFieldValue.middlename(value) => fr"middlename = $value"
        case PViewFieldValue.lastname(value) => fr"lastname = $value"
        case PViewFieldValue.suffix(value) => fr"suffix = $value"
        case PViewFieldValue.emailpromotion(value) => fr"emailpromotion = $value"
        case PViewFieldValue.additionalcontactinfo(value) => fr"additionalcontactinfo = $value"
        case PViewFieldValue.demographics(value) => fr"demographics = $value"
        case PViewFieldValue.rowguid(value) => fr"rowguid = $value"
        case PViewFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"""select * from pe."p" $where""".query[PViewRow].stream
  
  }
  implicit val read: Read[PViewRow] =
    new Read[PViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[BusinessentityId], Nullability.Nullable),
        (Get[/* bpchar */ String], Nullability.Nullable),
        (Get[NameStyle], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[Name], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[PgSQLXML], Nullability.Nullable),
        (Get[PgSQLXML], Nullability.Nullable),
        (Get[UUID], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PViewRow(
        id = Get[Int].unsafeGetNullable(rs, i + 0),
        businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 1),
        persontype = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 2),
        namestyle = Get[NameStyle].unsafeGetNonNullable(rs, i + 3),
        title = Get[String].unsafeGetNullable(rs, i + 4),
        firstname = Get[Name].unsafeGetNullable(rs, i + 5),
        middlename = Get[Name].unsafeGetNullable(rs, i + 6),
        lastname = Get[Name].unsafeGetNullable(rs, i + 7),
        suffix = Get[String].unsafeGetNullable(rs, i + 8),
        emailpromotion = Get[Int].unsafeGetNullable(rs, i + 9),
        additionalcontactinfo = Get[PgSQLXML].unsafeGetNullable(rs, i + 10),
        demographics = Get[PgSQLXML].unsafeGetNullable(rs, i + 11),
        rowguid = Get[UUID].unsafeGetNullable(rs, i + 12),
        modifieddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 13)
      )
    )
  

}
