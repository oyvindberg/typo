/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import cats.data.NonEmptyList
import doobie.Get
import doobie.Put
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import org.postgresql.geometric.PGcircle

/** This represents circle datatype in PostgreSQL, consisting of a point and a radius */
case class TypoCircle(center: TypoPoint, radius: Double)
object TypoCircle {
  implicit val decoder: Decoder[TypoCircle] =
    (c: HCursor) =>
      for {
        center <- c.downField("center").as[TypoPoint]
        radius <- c.downField("radius").as[Double]
      } yield TypoCircle(center, radius)
  implicit val encoder: Encoder[TypoCircle] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "center" := row.center,
        "radius" := row.radius
      )}
  implicit val TypoCircleGet: Get[TypoCircle] =
    Get.Advanced.other[PGcircle](cats.data.NonEmptyList.one("circle"))
      .map(v => TypoCircle(TypoPoint(v.center.x, v.center.y), v.radius))
  
  implicit val TypoCirclePut: Put[TypoCircle] =
    Put.Advanced.other[PGcircle](NonEmptyList.one("circle"))
      .contramap(v => new PGcircle(v.center.x, v.center.y, v.radius))
  
  implicit val TypoCircleGetArray: Get[Array[TypoCircle]] =
    Get.Advanced.array[AnyRef](NonEmptyList.one("_circle"))
      .map(_.map(v => TypoCircle(TypoPoint(v.asInstanceOf[PGcircle].center.x, v.asInstanceOf[PGcircle].center.y), v.asInstanceOf[PGcircle].radius)))
  
  implicit val TypoCirclePutArray: Put[Array[TypoCircle]] =
    Put.Advanced.array[AnyRef](NonEmptyList.one("_circle"), "circle")
      .contramap(_.map(v => new PGcircle(v.center.x, v.center.y, v.radius)))

}
