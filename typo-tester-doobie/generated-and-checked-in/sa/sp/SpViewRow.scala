/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sp

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

case class SpViewRow(
  id: Option[Int],
  /** Points to [[sales.salesperson.SalespersonRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[sales.salesperson.SalespersonRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Points to [[sales.salesperson.SalespersonRow.salesquota]] */
  salesquota: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.bonus]] */
  bonus: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.commissionpct]] */
  commissionpct: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.salesytd]] */
  salesytd: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.saleslastyear]] */
  saleslastyear: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[sales.salesperson.SalespersonRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object SpViewRow {
  implicit val decoder: Decoder[SpViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        businessentityid <- c.downField("businessentityid").as[Option[BusinessentityId]]
        territoryid <- c.downField("territoryid").as[Option[SalesterritoryId]]
        salesquota <- c.downField("salesquota").as[Option[BigDecimal]]
        bonus <- c.downField("bonus").as[Option[BigDecimal]]
        commissionpct <- c.downField("commissionpct").as[Option[BigDecimal]]
        salesytd <- c.downField("salesytd").as[Option[BigDecimal]]
        saleslastyear <- c.downField("saleslastyear").as[Option[BigDecimal]]
        rowguid <- c.downField("rowguid").as[Option[UUID]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield SpViewRow(id, businessentityid, territoryid, salesquota, bonus, commissionpct, salesytd, saleslastyear, rowguid, modifieddate)
  implicit val encoder: Encoder[SpViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "businessentityid" := row.businessentityid,
        "territoryid" := row.territoryid,
        "salesquota" := row.salesquota,
        "bonus" := row.bonus,
        "commissionpct" := row.commissionpct,
        "salesytd" := row.salesytd,
        "saleslastyear" := row.saleslastyear,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
