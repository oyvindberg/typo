/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sp

import adventureworks.TypoLocalDateTime
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class SpViewRow(
  id: Option[Int],
  /** Points to [[sales.salesperson.SalespersonRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[sales.salesperson.SalespersonRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Points to [[sales.salesperson.SalespersonRow.salesquota]] */
  salesquota: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.bonus]] */
  bonus: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.commissionpct]] */
  commissionpct: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.salesytd]] */
  salesytd: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.saleslastyear]] */
  saleslastyear: Option[BigDecimal],
  /** Points to [[sales.salesperson.SalespersonRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[sales.salesperson.SalespersonRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object SpViewRow {
  implicit val decoder: Decoder[SpViewRow] = Decoder.forProduct10[SpViewRow, Option[Int], Option[BusinessentityId], Option[SalesterritoryId], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[UUID], Option[TypoLocalDateTime]]("id", "businessentityid", "territoryid", "salesquota", "bonus", "commissionpct", "salesytd", "saleslastyear", "rowguid", "modifieddate")(SpViewRow.apply)
  implicit val encoder: Encoder[SpViewRow] = Encoder.forProduct10[SpViewRow, Option[Int], Option[BusinessentityId], Option[SalesterritoryId], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[UUID], Option[TypoLocalDateTime]]("id", "businessentityid", "territoryid", "salesquota", "bonus", "commissionpct", "salesytd", "saleslastyear", "rowguid", "modifieddate")(x => (x.id, x.businessentityid, x.territoryid, x.salesquota, x.bonus, x.commissionpct, x.salesytd, x.saleslastyear, x.rowguid, x.modifieddate))
  implicit val read: Read[SpViewRow] = new Read[SpViewRow](
    gets = List(
      (Get[Int], Nullability.Nullable),
      (Get[BusinessentityId], Nullability.Nullable),
      (Get[SalesterritoryId], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[UUID], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => SpViewRow(
      id = Get[Int].unsafeGetNullable(rs, i + 0),
      businessentityid = Get[BusinessentityId].unsafeGetNullable(rs, i + 1),
      territoryid = Get[SalesterritoryId].unsafeGetNullable(rs, i + 2),
      salesquota = Get[BigDecimal].unsafeGetNullable(rs, i + 3),
      bonus = Get[BigDecimal].unsafeGetNullable(rs, i + 4),
      commissionpct = Get[BigDecimal].unsafeGetNullable(rs, i + 5),
      salesytd = Get[BigDecimal].unsafeGetNullable(rs, i + 6),
      saleslastyear = Get[BigDecimal].unsafeGetNullable(rs, i + 7),
      rowguid = Get[UUID].unsafeGetNullable(rs, i + 8),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 9)
    )
  )
}
