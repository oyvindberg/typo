/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package cr

import adventureworks.TypoLocalDateTime
import adventureworks.sales.currency.CurrencyId
import adventureworks.sales.currencyrate.CurrencyrateId
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class CrViewRow(
  /** Points to [[sales.currencyrate.CurrencyrateRow.currencyrateid]] */
  currencyrateid: Option[CurrencyrateId],
  /** Points to [[sales.currencyrate.CurrencyrateRow.currencyratedate]] */
  currencyratedate: Option[TypoLocalDateTime],
  /** Points to [[sales.currencyrate.CurrencyrateRow.fromcurrencycode]] */
  fromcurrencycode: Option[CurrencyId],
  /** Points to [[sales.currencyrate.CurrencyrateRow.tocurrencycode]] */
  tocurrencycode: Option[CurrencyId],
  /** Points to [[sales.currencyrate.CurrencyrateRow.averagerate]] */
  averagerate: Option[BigDecimal],
  /** Points to [[sales.currencyrate.CurrencyrateRow.endofdayrate]] */
  endofdayrate: Option[BigDecimal],
  /** Points to [[sales.currencyrate.CurrencyrateRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object CrViewRow {
  implicit val decoder: Decoder[CrViewRow] = Decoder.forProduct7[CrViewRow, Option[CurrencyrateId], Option[TypoLocalDateTime], Option[CurrencyId], Option[CurrencyId], Option[BigDecimal], Option[BigDecimal], Option[TypoLocalDateTime]]("currencyrateid", "currencyratedate", "fromcurrencycode", "tocurrencycode", "averagerate", "endofdayrate", "modifieddate")(CrViewRow.apply)(Decoder.decodeOption(CurrencyrateId.decoder), Decoder.decodeOption(TypoLocalDateTime.decoder), Decoder.decodeOption(CurrencyId.decoder), Decoder.decodeOption(CurrencyId.decoder), Decoder.decodeOption(Decoder.decodeBigDecimal), Decoder.decodeOption(Decoder.decodeBigDecimal), Decoder.decodeOption(TypoLocalDateTime.decoder))
  implicit val encoder: Encoder[CrViewRow] = Encoder.forProduct7[CrViewRow, Option[CurrencyrateId], Option[TypoLocalDateTime], Option[CurrencyId], Option[CurrencyId], Option[BigDecimal], Option[BigDecimal], Option[TypoLocalDateTime]]("currencyrateid", "currencyratedate", "fromcurrencycode", "tocurrencycode", "averagerate", "endofdayrate", "modifieddate")(x => (x.currencyrateid, x.currencyratedate, x.fromcurrencycode, x.tocurrencycode, x.averagerate, x.endofdayrate, x.modifieddate))(Encoder.encodeOption(CurrencyrateId.encoder), Encoder.encodeOption(TypoLocalDateTime.encoder), Encoder.encodeOption(CurrencyId.encoder), Encoder.encodeOption(CurrencyId.encoder), Encoder.encodeOption(Encoder.encodeBigDecimal), Encoder.encodeOption(Encoder.encodeBigDecimal), Encoder.encodeOption(TypoLocalDateTime.encoder))
  implicit val read: Read[CrViewRow] = new Read[CrViewRow](
    gets = List(
      (CurrencyrateId.get, Nullability.Nullable),
      (TypoLocalDateTime.get, Nullability.Nullable),
      (CurrencyId.get, Nullability.Nullable),
      (CurrencyId.get, Nullability.Nullable),
      (Meta.ScalaBigDecimalMeta.get, Nullability.Nullable),
      (Meta.ScalaBigDecimalMeta.get, Nullability.Nullable),
      (TypoLocalDateTime.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => CrViewRow(
      currencyrateid = CurrencyrateId.get.unsafeGetNullable(rs, i + 0),
      currencyratedate = TypoLocalDateTime.get.unsafeGetNullable(rs, i + 1),
      fromcurrencycode = CurrencyId.get.unsafeGetNullable(rs, i + 2),
      tocurrencycode = CurrencyId.get.unsafeGetNullable(rs, i + 3),
      averagerate = Meta.ScalaBigDecimalMeta.get.unsafeGetNullable(rs, i + 4),
      endofdayrate = Meta.ScalaBigDecimalMeta.get.unsafeGetNullable(rs, i + 5),
      modifieddate = TypoLocalDateTime.get.unsafeGetNullable(rs, i + 6)
    )
  )
}
