/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sop

import adventureworks.production.product.ProductId
import adventureworks.sales.specialoffer.SpecialofferId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object SopViewRepoImpl extends SopViewRepo {
  override def selectAll: Stream[ConnectionIO, SopViewRow] = {
    sql"""select "id", specialofferid, productid, rowguid, modifieddate from sa.sop""".query[SopViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[SopViewFieldOrIdValue[_]]): Stream[ConnectionIO, SopViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case SopViewFieldValue.id(value) => fr""""id" = $value"""
        case SopViewFieldValue.specialofferid(value) => fr"specialofferid = $value"
        case SopViewFieldValue.productid(value) => fr"productid = $value"
        case SopViewFieldValue.rowguid(value) => fr"rowguid = $value"
        case SopViewFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from sa.sop $where".query[SopViewRow].stream
  
  }
  implicit val read: Read[SopViewRow] =
    new Read[SopViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[SpecialofferId], Nullability.Nullable),
        (Get[ProductId], Nullability.Nullable),
        (Get[UUID], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SopViewRow(
        id = Get[Int].unsafeGetNullable(rs, i + 0),
        specialofferid = Get[SpecialofferId].unsafeGetNullable(rs, i + 1),
        productid = Get[ProductId].unsafeGetNullable(rs, i + 2),
        rowguid = Get[UUID].unsafeGetNullable(rs, i + 3),
        modifieddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 4)
      )
    )
  

}
