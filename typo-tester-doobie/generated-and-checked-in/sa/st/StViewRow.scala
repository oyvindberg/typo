/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package st

import adventureworks.TypoLocalDateTime
import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Name
import adventureworks.sales.salesterritory.SalesterritoryId
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import java.util.UUID

case class StViewRow(
  id: Option[Int],
  /** Points to [[sales.salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Points to [[sales.salesterritory.SalesterritoryRow.name]] */
  name: Option[Name],
  /** Points to [[sales.salesterritory.SalesterritoryRow.countryregioncode]] */
  countryregioncode: Option[CountryregionId],
  /** Points to [[sales.salesterritory.SalesterritoryRow.group]] */
  group: Option[/* max 50 chars */ String],
  /** Points to [[sales.salesterritory.SalesterritoryRow.salesytd]] */
  salesytd: Option[BigDecimal],
  /** Points to [[sales.salesterritory.SalesterritoryRow.saleslastyear]] */
  saleslastyear: Option[BigDecimal],
  /** Points to [[sales.salesterritory.SalesterritoryRow.costytd]] */
  costytd: Option[BigDecimal],
  /** Points to [[sales.salesterritory.SalesterritoryRow.costlastyear]] */
  costlastyear: Option[BigDecimal],
  /** Points to [[sales.salesterritory.SalesterritoryRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[sales.salesterritory.SalesterritoryRow.modifieddate]] */
  modifieddate: Option[TypoLocalDateTime]
)

object StViewRow {
  implicit val decoder: Decoder[StViewRow] = Decoder.forProduct11[StViewRow, Option[Int], Option[SalesterritoryId], Option[Name], Option[CountryregionId], Option[/* max 50 chars */ String], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[UUID], Option[TypoLocalDateTime]]("id", "territoryid", "name", "countryregioncode", "group", "salesytd", "saleslastyear", "costytd", "costlastyear", "rowguid", "modifieddate")(StViewRow.apply)
  implicit val encoder: Encoder[StViewRow] = Encoder.forProduct11[StViewRow, Option[Int], Option[SalesterritoryId], Option[Name], Option[CountryregionId], Option[/* max 50 chars */ String], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[BigDecimal], Option[UUID], Option[TypoLocalDateTime]]("id", "territoryid", "name", "countryregioncode", "group", "salesytd", "saleslastyear", "costytd", "costlastyear", "rowguid", "modifieddate")(x => (x.id, x.territoryid, x.name, x.countryregioncode, x.group, x.salesytd, x.saleslastyear, x.costytd, x.costlastyear, x.rowguid, x.modifieddate))
  implicit val read: Read[StViewRow] = new Read[StViewRow](
    gets = List(
      (Get[Int], Nullability.Nullable),
      (Get[SalesterritoryId], Nullability.Nullable),
      (Get[Name], Nullability.Nullable),
      (Get[CountryregionId], Nullability.Nullable),
      (Get[/* max 50 chars */ String], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[UUID], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => StViewRow(
      id = Get[Int].unsafeGetNullable(rs, i + 0),
      territoryid = Get[SalesterritoryId].unsafeGetNullable(rs, i + 1),
      name = Get[Name].unsafeGetNullable(rs, i + 2),
      countryregioncode = Get[CountryregionId].unsafeGetNullable(rs, i + 3),
      group = Get[/* max 50 chars */ String].unsafeGetNullable(rs, i + 4),
      salesytd = Get[BigDecimal].unsafeGetNullable(rs, i + 5),
      saleslastyear = Get[BigDecimal].unsafeGetNullable(rs, i + 6),
      costytd = Get[BigDecimal].unsafeGetNullable(rs, i + 7),
      costlastyear = Get[BigDecimal].unsafeGetNullable(rs, i + 8),
      rowguid = Get[UUID].unsafeGetNullable(rs, i + 9),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 10)
    )
  )
}
