/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sod

import adventureworks.production.product.ProductId
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.specialoffer.SpecialofferId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object SodViewRepoImpl extends SodViewRepo {
  override def selectAll: Stream[ConnectionIO, SodViewRow] = {
    sql"""select "id", salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate from sa.sod""".query[SodViewRow].stream
  }
  override def selectByFieldValues(fieldValues: List[SodViewFieldOrIdValue[_]]): Stream[ConnectionIO, SodViewRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case SodViewFieldValue.id(value) => fr""""id" = $value"""
        case SodViewFieldValue.salesorderid(value) => fr"salesorderid = $value"
        case SodViewFieldValue.salesorderdetailid(value) => fr"salesorderdetailid = $value"
        case SodViewFieldValue.carriertrackingnumber(value) => fr"carriertrackingnumber = $value"
        case SodViewFieldValue.orderqty(value) => fr"orderqty = $value"
        case SodViewFieldValue.productid(value) => fr"productid = $value"
        case SodViewFieldValue.specialofferid(value) => fr"specialofferid = $value"
        case SodViewFieldValue.unitprice(value) => fr"unitprice = $value"
        case SodViewFieldValue.unitpricediscount(value) => fr"unitpricediscount = $value"
        case SodViewFieldValue.rowguid(value) => fr"rowguid = $value"
        case SodViewFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from sa.sod $where".query[SodViewRow].stream
  
  }
  implicit val read: Read[SodViewRow] =
    new Read[SodViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[SalesorderheaderId], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[ProductId], Nullability.Nullable),
        (Get[SpecialofferId], Nullability.Nullable),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[UUID], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => SodViewRow(
        id = Get[Int].unsafeGetNullable(rs, i + 0),
        salesorderid = Get[SalesorderheaderId].unsafeGetNullable(rs, i + 1),
        salesorderdetailid = Get[Int].unsafeGetNullable(rs, i + 2),
        carriertrackingnumber = Get[String].unsafeGetNullable(rs, i + 3),
        orderqty = Get[Int].unsafeGetNullable(rs, i + 4),
        productid = Get[ProductId].unsafeGetNullable(rs, i + 5),
        specialofferid = Get[SpecialofferId].unsafeGetNullable(rs, i + 6),
        unitprice = Get[BigDecimal].unsafeGetNullable(rs, i + 7),
        unitpricediscount = Get[BigDecimal].unsafeGetNullable(rs, i + 8),
        rowguid = Get[UUID].unsafeGetNullable(rs, i + 9),
        modifieddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 10)
      )
    )
  

}
