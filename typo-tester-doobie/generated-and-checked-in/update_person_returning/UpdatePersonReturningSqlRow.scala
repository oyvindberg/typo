/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package update_person_returning

import adventureworks.TypoLocalDateTime
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class UpdatePersonReturningSqlRow(
  /** Points to [[person.person.PersonRow.firstname]] */
  firstname: Name,
  /** Points to [[person.person.PersonRow.modifieddate]] */
  modifieddate: TypoLocalDateTime
)

object UpdatePersonReturningSqlRow {
  implicit lazy val decoder: Decoder[UpdatePersonReturningSqlRow] = Decoder.forProduct2[UpdatePersonReturningSqlRow, Name, TypoLocalDateTime]("firstname", "modifieddate")(UpdatePersonReturningSqlRow.apply)(Name.decoder, TypoLocalDateTime.decoder)
  implicit lazy val encoder: Encoder[UpdatePersonReturningSqlRow] = Encoder.forProduct2[UpdatePersonReturningSqlRow, Name, TypoLocalDateTime]("firstname", "modifieddate")(x => (x.firstname, x.modifieddate))(Name.encoder, TypoLocalDateTime.encoder)
  implicit lazy val read: Read[UpdatePersonReturningSqlRow] = new Read[UpdatePersonReturningSqlRow](
    gets = List(
      (Name.get, Nullability.NoNulls),
      (TypoLocalDateTime.get, Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => UpdatePersonReturningSqlRow(
      firstname = Name.get.unsafeGetNonNullable(rs, i + 0),
      modifieddate = TypoLocalDateTime.get.unsafeGetNonNullable(rs, i + 1)
    )
  )
}
