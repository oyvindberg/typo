/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_tablespace

import adventureworks.TypoAclItem
import doobie.free.connection.ConnectionIO
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.meta.Meta
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgTablespaceRepoImpl extends PgTablespaceRepo {
  override def delete(oid: PgTablespaceId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_tablespace where oid = ${fromWrite(oid)(Write.fromPut(PgTablespaceId.put))}".update.run.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgTablespaceFields, PgTablespaceRow] = {
    DeleteBuilder("pg_catalog.pg_tablespace", PgTablespaceFields)
  }
  override def insert(unsaved: PgTablespaceRow): ConnectionIO[PgTablespaceRow] = {
    sql"""insert into pg_catalog.pg_tablespace(oid, spcname, spcowner, spcacl, spcoptions)
          values (${fromWrite(unsaved.oid)(Write.fromPut(PgTablespaceId.put))}::oid, ${fromWrite(unsaved.spcname)(Write.fromPut(Meta.StringMeta.put))}::name, ${fromWrite(unsaved.spcowner)(Write.fromPut(Meta.LongMeta.put))}::oid, ${fromWrite(unsaved.spcacl)(Write.fromPutOption(TypoAclItem.arrayPut))}::_aclitem, ${fromWrite(unsaved.spcoptions)(Write.fromPutOption(adventureworks.StringArrayMeta.put))}::_text)
          returning oid, spcname, spcowner, spcacl, spcoptions
       """.query(PgTablespaceRow.read).unique
  }
  override def select: SelectBuilder[PgTablespaceFields, PgTablespaceRow] = {
    SelectBuilderSql("pg_catalog.pg_tablespace", PgTablespaceFields, PgTablespaceRow.read)
  }
  override def selectAll: Stream[ConnectionIO, PgTablespaceRow] = {
    sql"select oid, spcname, spcowner, spcacl, spcoptions from pg_catalog.pg_tablespace".query(PgTablespaceRow.read).stream
  }
  override def selectById(oid: PgTablespaceId): ConnectionIO[Option[PgTablespaceRow]] = {
    sql"select oid, spcname, spcowner, spcacl, spcoptions from pg_catalog.pg_tablespace where oid = ${fromWrite(oid)(Write.fromPut(PgTablespaceId.put))}".query(PgTablespaceRow.read).option
  }
  override def selectByIds(oids: Array[PgTablespaceId]): Stream[ConnectionIO, PgTablespaceRow] = {
    sql"select oid, spcname, spcowner, spcacl, spcoptions from pg_catalog.pg_tablespace where oid = ANY(${fromWrite(oids)(Write.fromPut(PgTablespaceId.arrayPut))})".query(PgTablespaceRow.read).stream
  }
  override def update(row: PgTablespaceRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_tablespace
          set spcname = ${fromWrite(row.spcname)(Write.fromPut(Meta.StringMeta.put))}::name,
              spcowner = ${fromWrite(row.spcowner)(Write.fromPut(Meta.LongMeta.put))}::oid,
              spcacl = ${fromWrite(row.spcacl)(Write.fromPutOption(TypoAclItem.arrayPut))}::_aclitem,
              spcoptions = ${fromWrite(row.spcoptions)(Write.fromPutOption(adventureworks.StringArrayMeta.put))}::_text
          where oid = ${fromWrite(oid)(Write.fromPut(PgTablespaceId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def update: UpdateBuilder[PgTablespaceFields, PgTablespaceRow] = {
    UpdateBuilder("pg_catalog.pg_tablespace", PgTablespaceFields, PgTablespaceRow.read)
  }
  override def upsert(unsaved: PgTablespaceRow): ConnectionIO[PgTablespaceRow] = {
    sql"""insert into pg_catalog.pg_tablespace(oid, spcname, spcowner, spcacl, spcoptions)
          values (
            ${fromWrite(unsaved.oid)(Write.fromPut(PgTablespaceId.put))}::oid,
            ${fromWrite(unsaved.spcname)(Write.fromPut(Meta.StringMeta.put))}::name,
            ${fromWrite(unsaved.spcowner)(Write.fromPut(Meta.LongMeta.put))}::oid,
            ${fromWrite(unsaved.spcacl)(Write.fromPutOption(TypoAclItem.arrayPut))}::_aclitem,
            ${fromWrite(unsaved.spcoptions)(Write.fromPutOption(adventureworks.StringArrayMeta.put))}::_text
          )
          on conflict (oid)
          do update set
            spcname = EXCLUDED.spcname,
            spcowner = EXCLUDED.spcowner,
            spcacl = EXCLUDED.spcacl,
            spcoptions = EXCLUDED.spcoptions
          returning oid, spcname, spcowner, spcacl, spcoptions
       """.query(PgTablespaceRow.read).unique
  }
}
