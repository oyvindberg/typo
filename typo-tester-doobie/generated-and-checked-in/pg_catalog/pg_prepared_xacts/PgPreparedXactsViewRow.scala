/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_prepared_xacts

import adventureworks.TypoOffsetDateTime
import adventureworks.TypoXid
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgPreparedXactsViewRow(
  transaction: Option[TypoXid],
  gid: Option[String],
  prepared: Option[TypoOffsetDateTime],
  owner: Option[String],
  database: Option[String]
)

object PgPreparedXactsViewRow {
  implicit val decoder: Decoder[PgPreparedXactsViewRow] = Decoder.forProduct5[PgPreparedXactsViewRow, Option[TypoXid], Option[String], Option[TypoOffsetDateTime], Option[String], Option[String]]("transaction", "gid", "prepared", "owner", "database")(PgPreparedXactsViewRow.apply)
  implicit val encoder: Encoder[PgPreparedXactsViewRow] = Encoder.forProduct5[PgPreparedXactsViewRow, Option[TypoXid], Option[String], Option[TypoOffsetDateTime], Option[String], Option[String]]("transaction", "gid", "prepared", "owner", "database")(x => (x.transaction, x.gid, x.prepared, x.owner, x.database))
  implicit val read: Read[PgPreparedXactsViewRow] = new Read[PgPreparedXactsViewRow](
    gets = List(
      (Get[TypoXid], Nullability.Nullable),
      (Get[String], Nullability.Nullable),
      (Get[TypoOffsetDateTime], Nullability.Nullable),
      (Get[String], Nullability.Nullable),
      (Get[String], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgPreparedXactsViewRow(
      transaction = Get[TypoXid].unsafeGetNullable(rs, i + 0),
      gid = Get[String].unsafeGetNullable(rs, i + 1),
      prepared = Get[TypoOffsetDateTime].unsafeGetNullable(rs, i + 2),
      owner = Get[String].unsafeGetNullable(rs, i + 3),
      database = Get[String].unsafeGetNullable(rs, i + 4)
    )
  )
}
