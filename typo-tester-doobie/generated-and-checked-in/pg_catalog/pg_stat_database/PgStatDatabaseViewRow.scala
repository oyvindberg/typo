/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_database

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.OffsetDateTime

case class PgStatDatabaseViewRow(
  datid: Option[/* oid */ Long],
  datname: Option[String],
  numbackends: Option[Int],
  xactCommit: Option[Long],
  xactRollback: Option[Long],
  blksRead: Option[Long],
  blksHit: Option[Long],
  tupReturned: Option[Long],
  tupFetched: Option[Long],
  tupInserted: Option[Long],
  tupUpdated: Option[Long],
  tupDeleted: Option[Long],
  conflicts: Option[Long],
  tempFiles: Option[Long],
  tempBytes: Option[Long],
  deadlocks: Option[Long],
  checksumFailures: Option[Long],
  checksumLastFailure: Option[OffsetDateTime],
  blkReadTime: Option[Double],
  blkWriteTime: Option[Double],
  sessionTime: Option[Double],
  activeTime: Option[Double],
  idleInTransactionTime: Option[Double],
  sessions: Option[Long],
  sessionsAbandoned: Option[Long],
  sessionsFatal: Option[Long],
  sessionsKilled: Option[Long],
  statsReset: Option[OffsetDateTime]
)

object PgStatDatabaseViewRow {
  implicit val decoder: Decoder[PgStatDatabaseViewRow] =
    (c: HCursor) =>
      for {
        datid <- c.downField("datid").as[Option[/* oid */ Long]]
        datname <- c.downField("datname").as[Option[String]]
        numbackends <- c.downField("numbackends").as[Option[Int]]
        xactCommit <- c.downField("xact_commit").as[Option[Long]]
        xactRollback <- c.downField("xact_rollback").as[Option[Long]]
        blksRead <- c.downField("blks_read").as[Option[Long]]
        blksHit <- c.downField("blks_hit").as[Option[Long]]
        tupReturned <- c.downField("tup_returned").as[Option[Long]]
        tupFetched <- c.downField("tup_fetched").as[Option[Long]]
        tupInserted <- c.downField("tup_inserted").as[Option[Long]]
        tupUpdated <- c.downField("tup_updated").as[Option[Long]]
        tupDeleted <- c.downField("tup_deleted").as[Option[Long]]
        conflicts <- c.downField("conflicts").as[Option[Long]]
        tempFiles <- c.downField("temp_files").as[Option[Long]]
        tempBytes <- c.downField("temp_bytes").as[Option[Long]]
        deadlocks <- c.downField("deadlocks").as[Option[Long]]
        checksumFailures <- c.downField("checksum_failures").as[Option[Long]]
        checksumLastFailure <- c.downField("checksum_last_failure").as[Option[OffsetDateTime]]
        blkReadTime <- c.downField("blk_read_time").as[Option[Double]]
        blkWriteTime <- c.downField("blk_write_time").as[Option[Double]]
        sessionTime <- c.downField("session_time").as[Option[Double]]
        activeTime <- c.downField("active_time").as[Option[Double]]
        idleInTransactionTime <- c.downField("idle_in_transaction_time").as[Option[Double]]
        sessions <- c.downField("sessions").as[Option[Long]]
        sessionsAbandoned <- c.downField("sessions_abandoned").as[Option[Long]]
        sessionsFatal <- c.downField("sessions_fatal").as[Option[Long]]
        sessionsKilled <- c.downField("sessions_killed").as[Option[Long]]
        statsReset <- c.downField("stats_reset").as[Option[OffsetDateTime]]
      } yield PgStatDatabaseViewRow(datid, datname, numbackends, xactCommit, xactRollback, blksRead, blksHit, tupReturned, tupFetched, tupInserted, tupUpdated, tupDeleted, conflicts, tempFiles, tempBytes, deadlocks, checksumFailures, checksumLastFailure, blkReadTime, blkWriteTime, sessionTime, activeTime, idleInTransactionTime, sessions, sessionsAbandoned, sessionsFatal, sessionsKilled, statsReset)
  implicit val encoder: Encoder[PgStatDatabaseViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "datid" := row.datid,
        "datname" := row.datname,
        "numbackends" := row.numbackends,
        "xact_commit" := row.xactCommit,
        "xact_rollback" := row.xactRollback,
        "blks_read" := row.blksRead,
        "blks_hit" := row.blksHit,
        "tup_returned" := row.tupReturned,
        "tup_fetched" := row.tupFetched,
        "tup_inserted" := row.tupInserted,
        "tup_updated" := row.tupUpdated,
        "tup_deleted" := row.tupDeleted,
        "conflicts" := row.conflicts,
        "temp_files" := row.tempFiles,
        "temp_bytes" := row.tempBytes,
        "deadlocks" := row.deadlocks,
        "checksum_failures" := row.checksumFailures,
        "checksum_last_failure" := row.checksumLastFailure,
        "blk_read_time" := row.blkReadTime,
        "blk_write_time" := row.blkWriteTime,
        "session_time" := row.sessionTime,
        "active_time" := row.activeTime,
        "idle_in_transaction_time" := row.idleInTransactionTime,
        "sessions" := row.sessions,
        "sessions_abandoned" := row.sessionsAbandoned,
        "sessions_fatal" := row.sessionsFatal,
        "sessions_killed" := row.sessionsKilled,
        "stats_reset" := row.statsReset
      )}
  implicit val read: Read[PgStatDatabaseViewRow] =
    new Read[PgStatDatabaseViewRow](
      gets = List(
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable),
        (Get[Double], Nullability.Nullable),
        (Get[Double], Nullability.Nullable),
        (Get[Double], Nullability.Nullable),
        (Get[Double], Nullability.Nullable),
        (Get[Double], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgStatDatabaseViewRow(
        datid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 0),
        datname = Get[String].unsafeGetNullable(rs, i + 1),
        numbackends = Get[Int].unsafeGetNullable(rs, i + 2),
        xactCommit = Get[Long].unsafeGetNullable(rs, i + 3),
        xactRollback = Get[Long].unsafeGetNullable(rs, i + 4),
        blksRead = Get[Long].unsafeGetNullable(rs, i + 5),
        blksHit = Get[Long].unsafeGetNullable(rs, i + 6),
        tupReturned = Get[Long].unsafeGetNullable(rs, i + 7),
        tupFetched = Get[Long].unsafeGetNullable(rs, i + 8),
        tupInserted = Get[Long].unsafeGetNullable(rs, i + 9),
        tupUpdated = Get[Long].unsafeGetNullable(rs, i + 10),
        tupDeleted = Get[Long].unsafeGetNullable(rs, i + 11),
        conflicts = Get[Long].unsafeGetNullable(rs, i + 12),
        tempFiles = Get[Long].unsafeGetNullable(rs, i + 13),
        tempBytes = Get[Long].unsafeGetNullable(rs, i + 14),
        deadlocks = Get[Long].unsafeGetNullable(rs, i + 15),
        checksumFailures = Get[Long].unsafeGetNullable(rs, i + 16),
        checksumLastFailure = Get[OffsetDateTime].unsafeGetNullable(rs, i + 17),
        blkReadTime = Get[Double].unsafeGetNullable(rs, i + 18),
        blkWriteTime = Get[Double].unsafeGetNullable(rs, i + 19),
        sessionTime = Get[Double].unsafeGetNullable(rs, i + 20),
        activeTime = Get[Double].unsafeGetNullable(rs, i + 21),
        idleInTransactionTime = Get[Double].unsafeGetNullable(rs, i + 22),
        sessions = Get[Long].unsafeGetNullable(rs, i + 23),
        sessionsAbandoned = Get[Long].unsafeGetNullable(rs, i + 24),
        sessionsFatal = Get[Long].unsafeGetNullable(rs, i + 25),
        sessionsKilled = Get[Long].unsafeGetNullable(rs, i + 26),
        statsReset = Get[OffsetDateTime].unsafeGetNullable(rs, i + 27)
      )
    )
  

}
