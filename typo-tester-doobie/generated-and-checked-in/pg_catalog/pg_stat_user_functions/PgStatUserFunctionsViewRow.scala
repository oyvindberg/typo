/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_user_functions

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgStatUserFunctionsViewRow(
  funcid: Option[/* oid */ Long],
  schemaname: Option[String],
  funcname: Option[String],
  calls: Option[Long],
  totalTime: Option[Double],
  selfTime: Option[Double]
)

object PgStatUserFunctionsViewRow {
  implicit val decoder: Decoder[PgStatUserFunctionsViewRow] =
    (c: HCursor) =>
      for {
        funcid <- c.downField("funcid").as[Option[/* oid */ Long]]
        schemaname <- c.downField("schemaname").as[Option[String]]
        funcname <- c.downField("funcname").as[Option[String]]
        calls <- c.downField("calls").as[Option[Long]]
        totalTime <- c.downField("total_time").as[Option[Double]]
        selfTime <- c.downField("self_time").as[Option[Double]]
      } yield PgStatUserFunctionsViewRow(funcid, schemaname, funcname, calls, totalTime, selfTime)
  implicit val encoder: Encoder[PgStatUserFunctionsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "funcid" := row.funcid,
        "schemaname" := row.schemaname,
        "funcname" := row.funcname,
        "calls" := row.calls,
        "total_time" := row.totalTime,
        "self_time" := row.selfTime
      )}
  implicit val read: Read[PgStatUserFunctionsViewRow] =
    new Read[PgStatUserFunctionsViewRow](
      gets = List(
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Double], Nullability.Nullable),
        (Get[Double], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgStatUserFunctionsViewRow(
        funcid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 0),
        schemaname = Get[String].unsafeGetNullable(rs, i + 1),
        funcname = Get[String].unsafeGetNullable(rs, i + 2),
        calls = Get[Long].unsafeGetNullable(rs, i + 3),
        totalTime = Get[Double].unsafeGetNullable(rs, i + 4),
        selfTime = Get[Double].unsafeGetNullable(rs, i + 5)
      )
    )
  

}
