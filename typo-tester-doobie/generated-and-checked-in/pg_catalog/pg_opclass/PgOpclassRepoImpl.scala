/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_opclass

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgOpclassRepoImpl extends PgOpclassRepo {
  override def delete(oid: PgOpclassId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_opclass where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgOpclassRow): ConnectionIO[PgOpclassRow] = {
    sql"""insert into pg_catalog.pg_opclass(oid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype)
          values (${unsaved.oid}::oid, ${unsaved.opcmethod}::oid, ${unsaved.opcname}::name, ${unsaved.opcnamespace}::oid, ${unsaved.opcowner}::oid, ${unsaved.opcfamily}::oid, ${unsaved.opcintype}::oid, ${unsaved.opcdefault}, ${unsaved.opckeytype}::oid)
          returning oid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype
       """.query[PgOpclassRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgOpclassRow] = {
    sql"select oid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype from pg_catalog.pg_opclass".query[PgOpclassRow].stream
  }
  override def selectById(oid: PgOpclassId): ConnectionIO[Option[PgOpclassRow]] = {
    sql"select oid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype from pg_catalog.pg_opclass where oid = ${oid}".query[PgOpclassRow].option
  }
  override def selectByIds(oids: Array[PgOpclassId]): Stream[ConnectionIO, PgOpclassRow] = {
    sql"select oid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype from pg_catalog.pg_opclass where oid = ANY(${oids})".query[PgOpclassRow].stream
  }
  override def update(row: PgOpclassRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_opclass
          set opcmethod = ${row.opcmethod}::oid,
              opcname = ${row.opcname}::name,
              opcnamespace = ${row.opcnamespace}::oid,
              opcowner = ${row.opcowner}::oid,
              opcfamily = ${row.opcfamily}::oid,
              opcintype = ${row.opcintype}::oid,
              opcdefault = ${row.opcdefault},
              opckeytype = ${row.opckeytype}::oid
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgOpclassRow): ConnectionIO[PgOpclassRow] = {
    sql"""insert into pg_catalog.pg_opclass(oid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.opcmethod}::oid,
            ${unsaved.opcname}::name,
            ${unsaved.opcnamespace}::oid,
            ${unsaved.opcowner}::oid,
            ${unsaved.opcfamily}::oid,
            ${unsaved.opcintype}::oid,
            ${unsaved.opcdefault},
            ${unsaved.opckeytype}::oid
          )
          on conflict (oid)
          do update set
            opcmethod = EXCLUDED.opcmethod,
            opcname = EXCLUDED.opcname,
            opcnamespace = EXCLUDED.opcnamespace,
            opcowner = EXCLUDED.opcowner,
            opcfamily = EXCLUDED.opcfamily,
            opcintype = EXCLUDED.opcintype,
            opcdefault = EXCLUDED.opcdefault,
            opckeytype = EXCLUDED.opckeytype
          returning oid, opcmethod, opcname, opcnamespace, opcowner, opcfamily, opcintype, opcdefault, opckeytype
       """.query[PgOpclassRow].unique
  }
}
