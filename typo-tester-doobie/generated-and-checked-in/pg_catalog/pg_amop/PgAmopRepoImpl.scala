/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amop

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgAmopRepoImpl extends PgAmopRepo {
  override def delete(oid: PgAmopId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_amop where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgAmopRow): ConnectionIO[PgAmopRow] = {
    sql"""insert into pg_catalog.pg_amop(oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily)
          values (${unsaved.oid}::oid, ${unsaved.amopfamily}::oid, ${unsaved.amoplefttype}::oid, ${unsaved.amoprighttype}::oid, ${unsaved.amopstrategy}::int2, ${unsaved.amoppurpose}::char, ${unsaved.amopopr}::oid, ${unsaved.amopmethod}::oid, ${unsaved.amopsortfamily}::oid)
          returning oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily
       """.query(PgAmopRow.read).unique
  }
  override def selectAll: Stream[ConnectionIO, PgAmopRow] = {
    sql"select oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily from pg_catalog.pg_amop".query(PgAmopRow.read).stream
  }
  override def selectById(oid: PgAmopId): ConnectionIO[Option[PgAmopRow]] = {
    sql"select oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily from pg_catalog.pg_amop where oid = ${oid}".query(PgAmopRow.read).option
  }
  override def selectByIds(oids: Array[PgAmopId]): Stream[ConnectionIO, PgAmopRow] = {
    sql"select oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily from pg_catalog.pg_amop where oid = ANY(${oids})".query(PgAmopRow.read).stream
  }
  override def update(row: PgAmopRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_amop
          set amopfamily = ${row.amopfamily}::oid,
              amoplefttype = ${row.amoplefttype}::oid,
              amoprighttype = ${row.amoprighttype}::oid,
              amopstrategy = ${row.amopstrategy}::int2,
              amoppurpose = ${row.amoppurpose}::char,
              amopopr = ${row.amopopr}::oid,
              amopmethod = ${row.amopmethod}::oid,
              amopsortfamily = ${row.amopsortfamily}::oid
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgAmopRow): ConnectionIO[PgAmopRow] = {
    sql"""insert into pg_catalog.pg_amop(oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.amopfamily}::oid,
            ${unsaved.amoplefttype}::oid,
            ${unsaved.amoprighttype}::oid,
            ${unsaved.amopstrategy}::int2,
            ${unsaved.amoppurpose}::char,
            ${unsaved.amopopr}::oid,
            ${unsaved.amopmethod}::oid,
            ${unsaved.amopsortfamily}::oid
          )
          on conflict (oid)
          do update set
            amopfamily = EXCLUDED.amopfamily,
            amoplefttype = EXCLUDED.amoplefttype,
            amoprighttype = EXCLUDED.amoprighttype,
            amopstrategy = EXCLUDED.amopstrategy,
            amoppurpose = EXCLUDED.amoppurpose,
            amopopr = EXCLUDED.amopopr,
            amopmethod = EXCLUDED.amopmethod,
            amopsortfamily = EXCLUDED.amopsortfamily
          returning oid, amopfamily, amoplefttype, amoprighttype, amopstrategy, amoppurpose, amopopr, amopmethod, amopsortfamily
       """.query(PgAmopRow.read).unique
  }
}
