/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statio_all_tables

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgStatioAllTablesViewRow(
  relid: Option[/* oid */ Long],
  schemaname: Option[String],
  relname: Option[String],
  heapBlksRead: Option[Long],
  heapBlksHit: Option[Long],
  idxBlksRead: Option[Long],
  idxBlksHit: Option[Long],
  toastBlksRead: Option[Long],
  toastBlksHit: Option[Long],
  tidxBlksRead: Option[Long],
  tidxBlksHit: Option[Long]
)

object PgStatioAllTablesViewRow {
  implicit val decoder: Decoder[PgStatioAllTablesViewRow] =
    (c: HCursor) =>
      for {
        relid <- c.downField("relid").as[Option[/* oid */ Long]]
        schemaname <- c.downField("schemaname").as[Option[String]]
        relname <- c.downField("relname").as[Option[String]]
        heapBlksRead <- c.downField("heap_blks_read").as[Option[Long]]
        heapBlksHit <- c.downField("heap_blks_hit").as[Option[Long]]
        idxBlksRead <- c.downField("idx_blks_read").as[Option[Long]]
        idxBlksHit <- c.downField("idx_blks_hit").as[Option[Long]]
        toastBlksRead <- c.downField("toast_blks_read").as[Option[Long]]
        toastBlksHit <- c.downField("toast_blks_hit").as[Option[Long]]
        tidxBlksRead <- c.downField("tidx_blks_read").as[Option[Long]]
        tidxBlksHit <- c.downField("tidx_blks_hit").as[Option[Long]]
      } yield PgStatioAllTablesViewRow(relid, schemaname, relname, heapBlksRead, heapBlksHit, idxBlksRead, idxBlksHit, toastBlksRead, toastBlksHit, tidxBlksRead, tidxBlksHit)
  implicit val encoder: Encoder[PgStatioAllTablesViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "relid" := row.relid,
        "schemaname" := row.schemaname,
        "relname" := row.relname,
        "heap_blks_read" := row.heapBlksRead,
        "heap_blks_hit" := row.heapBlksHit,
        "idx_blks_read" := row.idxBlksRead,
        "idx_blks_hit" := row.idxBlksHit,
        "toast_blks_read" := row.toastBlksRead,
        "toast_blks_hit" := row.toastBlksHit,
        "tidx_blks_read" := row.tidxBlksRead,
        "tidx_blks_hit" := row.tidxBlksHit
      )}
  implicit val read: Read[PgStatioAllTablesViewRow] =
    new Read[PgStatioAllTablesViewRow](
      gets = List(
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgStatioAllTablesViewRow(
        relid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 0),
        schemaname = Get[String].unsafeGetNullable(rs, i + 1),
        relname = Get[String].unsafeGetNullable(rs, i + 2),
        heapBlksRead = Get[Long].unsafeGetNullable(rs, i + 3),
        heapBlksHit = Get[Long].unsafeGetNullable(rs, i + 4),
        idxBlksRead = Get[Long].unsafeGetNullable(rs, i + 5),
        idxBlksHit = Get[Long].unsafeGetNullable(rs, i + 6),
        toastBlksRead = Get[Long].unsafeGetNullable(rs, i + 7),
        toastBlksHit = Get[Long].unsafeGetNullable(rs, i + 8),
        tidxBlksRead = Get[Long].unsafeGetNullable(rs, i + 9),
        tidxBlksHit = Get[Long].unsafeGetNullable(rs, i + 10)
      )
    )
  

}
