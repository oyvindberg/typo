/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_sequence

import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgSequenceRow(
  seqrelid: PgSequenceId,
  seqtypid: /* oid */ Long,
  seqstart: Long,
  seqincrement: Long,
  seqmax: Long,
  seqmin: Long,
  seqcache: Long,
  seqcycle: Boolean
)

object PgSequenceRow {
  implicit val decoder: Decoder[PgSequenceRow] = Decoder.forProduct8[PgSequenceRow, PgSequenceId, /* oid */ Long, Long, Long, Long, Long, Long, Boolean]("seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle")(PgSequenceRow.apply)
  implicit val encoder: Encoder[PgSequenceRow] = Encoder.forProduct8[PgSequenceRow, PgSequenceId, /* oid */ Long, Long, Long, Long, Long, Long, Boolean]("seqrelid", "seqtypid", "seqstart", "seqincrement", "seqmax", "seqmin", "seqcache", "seqcycle")(x => (x.seqrelid, x.seqtypid, x.seqstart, x.seqincrement, x.seqmax, x.seqmin, x.seqcache, x.seqcycle))
  implicit val read: Read[PgSequenceRow] = new Read[PgSequenceRow](
    gets = List(
      (Get[PgSequenceId], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[Long], Nullability.NoNulls),
      (Get[Long], Nullability.NoNulls),
      (Get[Long], Nullability.NoNulls),
      (Get[Long], Nullability.NoNulls),
      (Get[Long], Nullability.NoNulls),
      (Get[Boolean], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgSequenceRow(
      seqrelid = Get[PgSequenceId].unsafeGetNonNullable(rs, i + 0),
      seqtypid = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 1),
      seqstart = Get[Long].unsafeGetNonNullable(rs, i + 2),
      seqincrement = Get[Long].unsafeGetNonNullable(rs, i + 3),
      seqmax = Get[Long].unsafeGetNonNullable(rs, i + 4),
      seqmin = Get[Long].unsafeGetNonNullable(rs, i + 5),
      seqcache = Get[Long].unsafeGetNonNullable(rs, i + 6),
      seqcycle = Get[Boolean].unsafeGetNonNullable(rs, i + 7)
    )
  )
}
