/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_sequence

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class PgSequenceRepoMock(map: scala.collection.mutable.Map[PgSequenceId, PgSequenceRow] = scala.collection.mutable.Map.empty) extends PgSequenceRepo {
  override def delete(seqrelid: PgSequenceId): ConnectionIO[Boolean] = {
    delay(map.remove(seqrelid).isDefined)
  }
  override def insert(unsaved: PgSequenceRow): ConnectionIO[PgSequenceRow] = {
    delay {
      if (map.contains(unsaved.seqrelid))
        sys.error(s"id ${unsaved.seqrelid} already exists")
      else
        map.put(unsaved.seqrelid, unsaved)
      unsaved
    }
  }
  override def selectAll: Stream[ConnectionIO, PgSequenceRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(seqrelid: PgSequenceId): ConnectionIO[Option[PgSequenceRow]] = {
    delay(map.get(seqrelid))
  }
  override def selectByIds(seqrelids: Array[PgSequenceId]): Stream[ConnectionIO, PgSequenceRow] = {
    Stream.emits(seqrelids.flatMap(map.get).toList)
  }
  override def update(row: PgSequenceRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.seqrelid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.seqrelid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: PgSequenceRow): ConnectionIO[PgSequenceRow] = {
    delay {
      map.put(unsaved.seqrelid, unsaved)
      unsaved
    }
  }
}
