/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_index

import adventureworks.TypoInt2Vector
import adventureworks.TypoOidVector
import adventureworks.TypoPgNodeTree
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgIndexRow(
  indexrelid: PgIndexId,
  indrelid: /* oid */ Long,
  indnatts: Int,
  indnkeyatts: Int,
  indisunique: Boolean,
  indisprimary: Boolean,
  indisexclusion: Boolean,
  indimmediate: Boolean,
  indisclustered: Boolean,
  indisvalid: Boolean,
  indcheckxmin: Boolean,
  indisready: Boolean,
  indislive: Boolean,
  indisreplident: Boolean,
  indkey: TypoInt2Vector,
  indcollation: TypoOidVector,
  indclass: TypoOidVector,
  indoption: TypoInt2Vector,
  indexprs: Option[TypoPgNodeTree],
  indpred: Option[TypoPgNodeTree]
)

object PgIndexRow {
  implicit val decoder: Decoder[PgIndexRow] = Decoder.forProduct20[PgIndexRow, PgIndexId, /* oid */ Long, Int, Int, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, TypoInt2Vector, TypoOidVector, TypoOidVector, TypoInt2Vector, Option[TypoPgNodeTree], Option[TypoPgNodeTree]]("indexrelid", "indrelid", "indnatts", "indnkeyatts", "indisunique", "indisprimary", "indisexclusion", "indimmediate", "indisclustered", "indisvalid", "indcheckxmin", "indisready", "indislive", "indisreplident", "indkey", "indcollation", "indclass", "indoption", "indexprs", "indpred")(PgIndexRow.apply)(PgIndexId.decoder, Decoder.decodeLong, Decoder.decodeInt, Decoder.decodeInt, Decoder.decodeBoolean, Decoder.decodeBoolean, Decoder.decodeBoolean, Decoder.decodeBoolean, Decoder.decodeBoolean, Decoder.decodeBoolean, Decoder.decodeBoolean, Decoder.decodeBoolean, Decoder.decodeBoolean, Decoder.decodeBoolean, TypoInt2Vector.decoder, TypoOidVector.decoder, TypoOidVector.decoder, TypoInt2Vector.decoder, Decoder.decodeOption(TypoPgNodeTree.decoder), Decoder.decodeOption(TypoPgNodeTree.decoder))
  implicit val encoder: Encoder[PgIndexRow] = Encoder.forProduct20[PgIndexRow, PgIndexId, /* oid */ Long, Int, Int, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, TypoInt2Vector, TypoOidVector, TypoOidVector, TypoInt2Vector, Option[TypoPgNodeTree], Option[TypoPgNodeTree]]("indexrelid", "indrelid", "indnatts", "indnkeyatts", "indisunique", "indisprimary", "indisexclusion", "indimmediate", "indisclustered", "indisvalid", "indcheckxmin", "indisready", "indislive", "indisreplident", "indkey", "indcollation", "indclass", "indoption", "indexprs", "indpred")(x => (x.indexrelid, x.indrelid, x.indnatts, x.indnkeyatts, x.indisunique, x.indisprimary, x.indisexclusion, x.indimmediate, x.indisclustered, x.indisvalid, x.indcheckxmin, x.indisready, x.indislive, x.indisreplident, x.indkey, x.indcollation, x.indclass, x.indoption, x.indexprs, x.indpred))(PgIndexId.encoder, Encoder.encodeLong, Encoder.encodeInt, Encoder.encodeInt, Encoder.encodeBoolean, Encoder.encodeBoolean, Encoder.encodeBoolean, Encoder.encodeBoolean, Encoder.encodeBoolean, Encoder.encodeBoolean, Encoder.encodeBoolean, Encoder.encodeBoolean, Encoder.encodeBoolean, Encoder.encodeBoolean, TypoInt2Vector.encoder, TypoOidVector.encoder, TypoOidVector.encoder, TypoInt2Vector.encoder, Encoder.encodeOption(TypoPgNodeTree.encoder), Encoder.encodeOption(TypoPgNodeTree.encoder))
  implicit val read: Read[PgIndexRow] = new Read[PgIndexRow](
    gets = List(
      (PgIndexId.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (TypoInt2Vector.get, Nullability.NoNulls),
      (TypoOidVector.get, Nullability.NoNulls),
      (TypoOidVector.get, Nullability.NoNulls),
      (TypoInt2Vector.get, Nullability.NoNulls),
      (TypoPgNodeTree.get, Nullability.Nullable),
      (TypoPgNodeTree.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgIndexRow(
      indexrelid = PgIndexId.get.unsafeGetNonNullable(rs, i + 0),
      indrelid = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 1),
      indnatts = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 2),
      indnkeyatts = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 3),
      indisunique = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 4),
      indisprimary = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 5),
      indisexclusion = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 6),
      indimmediate = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 7),
      indisclustered = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 8),
      indisvalid = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 9),
      indcheckxmin = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 10),
      indisready = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 11),
      indislive = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 12),
      indisreplident = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 13),
      indkey = TypoInt2Vector.get.unsafeGetNonNullable(rs, i + 14),
      indcollation = TypoOidVector.get.unsafeGetNonNullable(rs, i + 15),
      indclass = TypoOidVector.get.unsafeGetNonNullable(rs, i + 16),
      indoption = TypoInt2Vector.get.unsafeGetNonNullable(rs, i + 17),
      indexprs = TypoPgNodeTree.get.unsafeGetNullable(rs, i + 18),
      indpred = TypoPgNodeTree.get.unsafeGetNullable(rs, i + 19)
    )
  )
}
