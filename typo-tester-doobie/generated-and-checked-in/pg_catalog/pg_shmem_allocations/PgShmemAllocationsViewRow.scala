/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_shmem_allocations

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgShmemAllocationsViewRow(
  name: Option[String],
  off: Option[Long],
  size: Option[Long],
  allocatedSize: Option[Long]
)

object PgShmemAllocationsViewRow {
  implicit val decoder: Decoder[PgShmemAllocationsViewRow] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Option[String]]
        off <- c.downField("off").as[Option[Long]]
        size <- c.downField("size").as[Option[Long]]
        allocatedSize <- c.downField("allocated_size").as[Option[Long]]
      } yield PgShmemAllocationsViewRow(name, off, size, allocatedSize)
  implicit val encoder: Encoder[PgShmemAllocationsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "off" := row.off,
        "size" := row.size,
        "allocated_size" := row.allocatedSize
      )}
  implicit val read: Read[PgShmemAllocationsViewRow] =
    new Read[PgShmemAllocationsViewRow](
      gets = List(
        (Get[String], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgShmemAllocationsViewRow(
        name = Get[String].unsafeGetNullable(rs, i + 0),
        off = Get[Long].unsafeGetNullable(rs, i + 1),
        size = Get[Long].unsafeGetNullable(rs, i + 2),
        allocatedSize = Get[Long].unsafeGetNullable(rs, i + 3)
      )
    )
  

}
