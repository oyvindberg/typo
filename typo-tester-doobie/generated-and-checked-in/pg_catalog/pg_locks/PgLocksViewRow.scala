/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_locks

import adventureworks.TypoOffsetDateTime
import adventureworks.TypoXid
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgLocksViewRow(
  locktype: Option[String],
  database: Option[/* oid */ Long],
  relation: Option[/* oid */ Long],
  page: Option[Int],
  tuple: Option[Int],
  virtualxid: Option[String],
  transactionid: Option[TypoXid],
  classid: Option[/* oid */ Long],
  objid: Option[/* oid */ Long],
  objsubid: Option[Int],
  virtualtransaction: Option[String],
  pid: Option[Int],
  mode: Option[String],
  granted: Option[Boolean],
  fastpath: Option[Boolean],
  waitstart: Option[TypoOffsetDateTime]
)

object PgLocksViewRow {
  implicit val decoder: Decoder[PgLocksViewRow] = Decoder.forProduct16[PgLocksViewRow, Option[String], Option[/* oid */ Long], Option[/* oid */ Long], Option[Int], Option[Int], Option[String], Option[TypoXid], Option[/* oid */ Long], Option[/* oid */ Long], Option[Int], Option[String], Option[Int], Option[String], Option[Boolean], Option[Boolean], Option[TypoOffsetDateTime]]("locktype", "database", "relation", "page", "tuple", "virtualxid", "transactionid", "classid", "objid", "objsubid", "virtualtransaction", "pid", "mode", "granted", "fastpath", "waitstart")(PgLocksViewRow.apply)
  implicit val encoder: Encoder[PgLocksViewRow] = Encoder.forProduct16[PgLocksViewRow, Option[String], Option[/* oid */ Long], Option[/* oid */ Long], Option[Int], Option[Int], Option[String], Option[TypoXid], Option[/* oid */ Long], Option[/* oid */ Long], Option[Int], Option[String], Option[Int], Option[String], Option[Boolean], Option[Boolean], Option[TypoOffsetDateTime]]("locktype", "database", "relation", "page", "tuple", "virtualxid", "transactionid", "classid", "objid", "objsubid", "virtualtransaction", "pid", "mode", "granted", "fastpath", "waitstart")(x => (x.locktype, x.database, x.relation, x.page, x.tuple, x.virtualxid, x.transactionid, x.classid, x.objid, x.objsubid, x.virtualtransaction, x.pid, x.mode, x.granted, x.fastpath, x.waitstart))
  implicit val read: Read[PgLocksViewRow] = new Read[PgLocksViewRow](
    gets = List(
      (Get[String], Nullability.Nullable),
      (Get[/* oid */ Long], Nullability.Nullable),
      (Get[/* oid */ Long], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[String], Nullability.Nullable),
      (Get[TypoXid], Nullability.Nullable),
      (Get[/* oid */ Long], Nullability.Nullable),
      (Get[/* oid */ Long], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[String], Nullability.Nullable),
      (Get[Int], Nullability.Nullable),
      (Get[String], Nullability.Nullable),
      (Get[Boolean], Nullability.Nullable),
      (Get[Boolean], Nullability.Nullable),
      (Get[TypoOffsetDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgLocksViewRow(
      locktype = Get[String].unsafeGetNullable(rs, i + 0),
      database = Get[/* oid */ Long].unsafeGetNullable(rs, i + 1),
      relation = Get[/* oid */ Long].unsafeGetNullable(rs, i + 2),
      page = Get[Int].unsafeGetNullable(rs, i + 3),
      tuple = Get[Int].unsafeGetNullable(rs, i + 4),
      virtualxid = Get[String].unsafeGetNullable(rs, i + 5),
      transactionid = Get[TypoXid].unsafeGetNullable(rs, i + 6),
      classid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 7),
      objid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 8),
      objsubid = Get[Int].unsafeGetNullable(rs, i + 9),
      virtualtransaction = Get[String].unsafeGetNullable(rs, i + 10),
      pid = Get[Int].unsafeGetNullable(rs, i + 11),
      mode = Get[String].unsafeGetNullable(rs, i + 12),
      granted = Get[Boolean].unsafeGetNullable(rs, i + 13),
      fastpath = Get[Boolean].unsafeGetNullable(rs, i + 14),
      waitstart = Get[TypoOffsetDateTime].unsafeGetNullable(rs, i + 15)
    )
  )
}
