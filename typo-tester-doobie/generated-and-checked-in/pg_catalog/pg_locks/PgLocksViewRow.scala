/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_locks

import adventureworks.TypoOffsetDateTime
import adventureworks.TypoXid
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgLocksViewRow(
  locktype: Option[String],
  database: Option[/* oid */ Long],
  relation: Option[/* oid */ Long],
  page: Option[Int],
  tuple: Option[Int],
  virtualxid: Option[String],
  transactionid: Option[TypoXid],
  classid: Option[/* oid */ Long],
  objid: Option[/* oid */ Long],
  objsubid: Option[Int],
  virtualtransaction: Option[String],
  pid: Option[Int],
  mode: Option[String],
  granted: Option[Boolean],
  fastpath: Option[Boolean],
  waitstart: Option[TypoOffsetDateTime]
)

object PgLocksViewRow {
  implicit val decoder: Decoder[PgLocksViewRow] = Decoder.forProduct16[PgLocksViewRow, Option[String], Option[/* oid */ Long], Option[/* oid */ Long], Option[Int], Option[Int], Option[String], Option[TypoXid], Option[/* oid */ Long], Option[/* oid */ Long], Option[Int], Option[String], Option[Int], Option[String], Option[Boolean], Option[Boolean], Option[TypoOffsetDateTime]]("locktype", "database", "relation", "page", "tuple", "virtualxid", "transactionid", "classid", "objid", "objsubid", "virtualtransaction", "pid", "mode", "granted", "fastpath", "waitstart")(PgLocksViewRow.apply)(Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeLong), Decoder.decodeOption(Decoder.decodeLong), Decoder.decodeOption(Decoder.decodeInt), Decoder.decodeOption(Decoder.decodeInt), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(TypoXid.decoder), Decoder.decodeOption(Decoder.decodeLong), Decoder.decodeOption(Decoder.decodeLong), Decoder.decodeOption(Decoder.decodeInt), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeInt), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeBoolean), Decoder.decodeOption(Decoder.decodeBoolean), Decoder.decodeOption(TypoOffsetDateTime.decoder))
  implicit val encoder: Encoder[PgLocksViewRow] = Encoder.forProduct16[PgLocksViewRow, Option[String], Option[/* oid */ Long], Option[/* oid */ Long], Option[Int], Option[Int], Option[String], Option[TypoXid], Option[/* oid */ Long], Option[/* oid */ Long], Option[Int], Option[String], Option[Int], Option[String], Option[Boolean], Option[Boolean], Option[TypoOffsetDateTime]]("locktype", "database", "relation", "page", "tuple", "virtualxid", "transactionid", "classid", "objid", "objsubid", "virtualtransaction", "pid", "mode", "granted", "fastpath", "waitstart")(x => (x.locktype, x.database, x.relation, x.page, x.tuple, x.virtualxid, x.transactionid, x.classid, x.objid, x.objsubid, x.virtualtransaction, x.pid, x.mode, x.granted, x.fastpath, x.waitstart))(Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeLong), Encoder.encodeOption(Encoder.encodeLong), Encoder.encodeOption(Encoder.encodeInt), Encoder.encodeOption(Encoder.encodeInt), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(TypoXid.encoder), Encoder.encodeOption(Encoder.encodeLong), Encoder.encodeOption(Encoder.encodeLong), Encoder.encodeOption(Encoder.encodeInt), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeInt), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeBoolean), Encoder.encodeOption(Encoder.encodeBoolean), Encoder.encodeOption(TypoOffsetDateTime.encoder))
  implicit val read: Read[PgLocksViewRow] = new Read[PgLocksViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.LongMeta.get, Nullability.Nullable),
      (Meta.LongMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (TypoXid.get, Nullability.Nullable),
      (Meta.LongMeta.get, Nullability.Nullable),
      (Meta.LongMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.IntMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.BooleanMeta.get, Nullability.Nullable),
      (Meta.BooleanMeta.get, Nullability.Nullable),
      (TypoOffsetDateTime.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgLocksViewRow(
      locktype = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      database = Meta.LongMeta.get.unsafeGetNullable(rs, i + 1),
      relation = Meta.LongMeta.get.unsafeGetNullable(rs, i + 2),
      page = Meta.IntMeta.get.unsafeGetNullable(rs, i + 3),
      tuple = Meta.IntMeta.get.unsafeGetNullable(rs, i + 4),
      virtualxid = Meta.StringMeta.get.unsafeGetNullable(rs, i + 5),
      transactionid = TypoXid.get.unsafeGetNullable(rs, i + 6),
      classid = Meta.LongMeta.get.unsafeGetNullable(rs, i + 7),
      objid = Meta.LongMeta.get.unsafeGetNullable(rs, i + 8),
      objsubid = Meta.IntMeta.get.unsafeGetNullable(rs, i + 9),
      virtualtransaction = Meta.StringMeta.get.unsafeGetNullable(rs, i + 10),
      pid = Meta.IntMeta.get.unsafeGetNullable(rs, i + 11),
      mode = Meta.StringMeta.get.unsafeGetNullable(rs, i + 12),
      granted = Meta.BooleanMeta.get.unsafeGetNullable(rs, i + 13),
      fastpath = Meta.BooleanMeta.get.unsafeGetNullable(rs, i + 14),
      waitstart = TypoOffsetDateTime.get.unsafeGetNullable(rs, i + 15)
    )
  )
}
