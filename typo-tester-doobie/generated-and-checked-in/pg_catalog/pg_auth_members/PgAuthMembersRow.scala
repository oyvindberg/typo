/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_auth_members

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgAuthMembersRow(
  roleid: /* oid */ Long,
  member: /* oid */ Long,
  grantor: /* oid */ Long,
  adminOption: Boolean
){
   val compositeId: PgAuthMembersId = PgAuthMembersId(roleid, member)
 }

object PgAuthMembersRow {
  implicit val decoder: Decoder[PgAuthMembersRow] =
    (c: HCursor) =>
      for {
        roleid <- c.downField("roleid").as[/* oid */ Long]
        member <- c.downField("member").as[/* oid */ Long]
        grantor <- c.downField("grantor").as[/* oid */ Long]
        adminOption <- c.downField("admin_option").as[Boolean]
      } yield PgAuthMembersRow(roleid, member, grantor, adminOption)
  implicit val encoder: Encoder[PgAuthMembersRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "roleid" := row.roleid,
        "member" := row.member,
        "grantor" := row.grantor,
        "admin_option" := row.adminOption
      )}
  implicit val read: Read[PgAuthMembersRow] =
    new Read[PgAuthMembersRow](
      gets = List(
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgAuthMembersRow(
        roleid = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 0),
        member = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 1),
        grantor = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
        adminOption = Get[Boolean].unsafeGetNonNullable(rs, i + 3)
      )
    )
  

}
