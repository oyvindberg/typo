/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_auth_members

import doobie.free.connection.ConnectionIO
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.meta.Meta
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PgAuthMembersRepoImpl extends PgAuthMembersRepo {
  override def delete(compositeId: PgAuthMembersId): ConnectionIO[Boolean] = {
    sql"""delete from pg_catalog.pg_auth_members where roleid = ${fromWrite(compositeId.roleid)(Write.fromPut(Meta.LongMeta.put))} AND "member" = ${fromWrite(compositeId.member)(Write.fromPut(Meta.LongMeta.put))}""".update.run.map(_ > 0)
  }
  override def delete: DeleteBuilder[PgAuthMembersFields, PgAuthMembersRow] = {
    DeleteBuilder("pg_catalog.pg_auth_members", PgAuthMembersFields)
  }
  override def insert(unsaved: PgAuthMembersRow): ConnectionIO[PgAuthMembersRow] = {
    sql"""insert into pg_catalog.pg_auth_members(roleid, "member", grantor, admin_option)
          values (${fromWrite(unsaved.roleid)(Write.fromPut(Meta.LongMeta.put))}::oid, ${fromWrite(unsaved.member)(Write.fromPut(Meta.LongMeta.put))}::oid, ${fromWrite(unsaved.grantor)(Write.fromPut(Meta.LongMeta.put))}::oid, ${fromWrite(unsaved.adminOption)(Write.fromPut(Meta.BooleanMeta.put))})
          returning roleid, "member", grantor, admin_option
       """.query(PgAuthMembersRow.read).unique
  }
  override def select: SelectBuilder[PgAuthMembersFields, PgAuthMembersRow] = {
    SelectBuilderSql("pg_catalog.pg_auth_members", PgAuthMembersFields, PgAuthMembersRow.read)
  }
  override def selectAll: Stream[ConnectionIO, PgAuthMembersRow] = {
    sql"""select roleid, "member", grantor, admin_option from pg_catalog.pg_auth_members""".query(PgAuthMembersRow.read).stream
  }
  override def selectById(compositeId: PgAuthMembersId): ConnectionIO[Option[PgAuthMembersRow]] = {
    sql"""select roleid, "member", grantor, admin_option from pg_catalog.pg_auth_members where roleid = ${fromWrite(compositeId.roleid)(Write.fromPut(Meta.LongMeta.put))} AND "member" = ${fromWrite(compositeId.member)(Write.fromPut(Meta.LongMeta.put))}""".query(PgAuthMembersRow.read).option
  }
  override def update(row: PgAuthMembersRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_auth_members
          set grantor = ${fromWrite(row.grantor)(Write.fromPut(Meta.LongMeta.put))}::oid,
              admin_option = ${fromWrite(row.adminOption)(Write.fromPut(Meta.BooleanMeta.put))}
          where roleid = ${fromWrite(compositeId.roleid)(Write.fromPut(Meta.LongMeta.put))} AND "member" = ${fromWrite(compositeId.member)(Write.fromPut(Meta.LongMeta.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def update: UpdateBuilder[PgAuthMembersFields, PgAuthMembersRow] = {
    UpdateBuilder("pg_catalog.pg_auth_members", PgAuthMembersFields, PgAuthMembersRow.read)
  }
  override def upsert(unsaved: PgAuthMembersRow): ConnectionIO[PgAuthMembersRow] = {
    sql"""insert into pg_catalog.pg_auth_members(roleid, "member", grantor, admin_option)
          values (
            ${fromWrite(unsaved.roleid)(Write.fromPut(Meta.LongMeta.put))}::oid,
            ${fromWrite(unsaved.member)(Write.fromPut(Meta.LongMeta.put))}::oid,
            ${fromWrite(unsaved.grantor)(Write.fromPut(Meta.LongMeta.put))}::oid,
            ${fromWrite(unsaved.adminOption)(Write.fromPut(Meta.BooleanMeta.put))}
          )
          on conflict (roleid, "member")
          do update set
            grantor = EXCLUDED.grantor,
            admin_option = EXCLUDED.admin_option
          returning roleid, "member", grantor, admin_option
       """.query(PgAuthMembersRow.read).unique
  }
}
