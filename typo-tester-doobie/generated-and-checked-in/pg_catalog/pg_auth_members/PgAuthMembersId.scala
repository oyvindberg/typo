/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_auth_members

import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json

/** Type for the composite primary key of table `pg_catalog.pg_auth_members` */
case class PgAuthMembersId(roleid: /* oid */ Long, member: /* oid */ Long)
object PgAuthMembersId {
  implicit val ordering: Ordering[PgAuthMembersId] = Ordering.by(x => (x.roleid, x.member))
  implicit val decoder: Decoder[PgAuthMembersId] =
    (c: HCursor) =>
      for {
        roleid <- c.downField("roleid").as[/* oid */ Long]
        member <- c.downField("member").as[/* oid */ Long]
      } yield PgAuthMembersId(roleid, member)
  implicit val encoder: Encoder[PgAuthMembersId] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "roleid" := row.roleid,
        "member" := row.member
      )}
}
