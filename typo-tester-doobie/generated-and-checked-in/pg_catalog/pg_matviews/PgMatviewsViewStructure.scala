/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_matviews

import typo.dsl.SqlExpr.FieldLikeNoHkt
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

class PgMatviewsViewStructure[Row](val prefix: Option[String], val extract: Row => PgMatviewsViewRow, val merge: (Row, PgMatviewsViewRow) => Row)
  extends Relation[PgMatviewsViewFields, PgMatviewsViewRow, Row]
    with PgMatviewsViewFields[Row] { outer =>

  override val schemaname = new OptField[String, Row](prefix, "schemaname", None, Some("name"))(x => extract(x).schemaname, (row, value) => merge(row, extract(row).copy(schemaname = value)))
  override val matviewname = new OptField[String, Row](prefix, "matviewname", None, Some("name"))(x => extract(x).matviewname, (row, value) => merge(row, extract(row).copy(matviewname = value)))
  override val matviewowner = new OptField[String, Row](prefix, "matviewowner", None, Some("name"))(x => extract(x).matviewowner, (row, value) => merge(row, extract(row).copy(matviewowner = value)))
  override val tablespace = new OptField[String, Row](prefix, "tablespace", None, Some("name"))(x => extract(x).tablespace, (row, value) => merge(row, extract(row).copy(tablespace = value)))
  override val hasindexes = new OptField[Boolean, Row](prefix, "hasindexes", None, None)(x => extract(x).hasindexes, (row, value) => merge(row, extract(row).copy(hasindexes = value)))
  override val ispopulated = new OptField[Boolean, Row](prefix, "ispopulated", None, None)(x => extract(x).ispopulated, (row, value) => merge(row, extract(row).copy(ispopulated = value)))
  override val definition = new OptField[String, Row](prefix, "definition", None, None)(x => extract(x).definition, (row, value) => merge(row, extract(row).copy(definition = value)))

  override val columns: List[FieldLikeNoHkt[?, Row]] =
    List[FieldLikeNoHkt[?, Row]](schemaname, matviewname, matviewowner, tablespace, hasindexes, ispopulated, definition)

  override def copy[NewRow](prefix: Option[String], extract: NewRow => PgMatviewsViewRow, merge: (NewRow, PgMatviewsViewRow) => NewRow): PgMatviewsViewStructure[NewRow] =
    new PgMatviewsViewStructure(prefix, extract, merge)
}
