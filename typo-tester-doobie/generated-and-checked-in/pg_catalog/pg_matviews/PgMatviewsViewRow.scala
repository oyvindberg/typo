/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_matviews

import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgMatviewsViewRow(
  schemaname: Option[String],
  matviewname: Option[String],
  matviewowner: Option[String],
  tablespace: Option[String],
  hasindexes: Option[Boolean],
  ispopulated: Option[Boolean],
  definition: Option[String]
)

object PgMatviewsViewRow {
  implicit val decoder: Decoder[PgMatviewsViewRow] = Decoder.forProduct7[PgMatviewsViewRow, Option[String], Option[String], Option[String], Option[String], Option[Boolean], Option[Boolean], Option[String]]("schemaname", "matviewname", "matviewowner", "tablespace", "hasindexes", "ispopulated", "definition")(PgMatviewsViewRow.apply)(Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeBoolean), Decoder.decodeOption(Decoder.decodeBoolean), Decoder.decodeOption(Decoder.decodeString))
  implicit val encoder: Encoder[PgMatviewsViewRow] = Encoder.forProduct7[PgMatviewsViewRow, Option[String], Option[String], Option[String], Option[String], Option[Boolean], Option[Boolean], Option[String]]("schemaname", "matviewname", "matviewowner", "tablespace", "hasindexes", "ispopulated", "definition")(x => (x.schemaname, x.matviewname, x.matviewowner, x.tablespace, x.hasindexes, x.ispopulated, x.definition))(Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeBoolean), Encoder.encodeOption(Encoder.encodeBoolean), Encoder.encodeOption(Encoder.encodeString))
  implicit val read: Read[PgMatviewsViewRow] = new Read[PgMatviewsViewRow](
    gets = List(
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable),
      (Meta.BooleanMeta.get, Nullability.Nullable),
      (Meta.BooleanMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgMatviewsViewRow(
      schemaname = Meta.StringMeta.get.unsafeGetNullable(rs, i + 0),
      matviewname = Meta.StringMeta.get.unsafeGetNullable(rs, i + 1),
      matviewowner = Meta.StringMeta.get.unsafeGetNullable(rs, i + 2),
      tablespace = Meta.StringMeta.get.unsafeGetNullable(rs, i + 3),
      hasindexes = Meta.BooleanMeta.get.unsafeGetNullable(rs, i + 4),
      ispopulated = Meta.BooleanMeta.get.unsafeGetNullable(rs, i + 5),
      definition = Meta.StringMeta.get.unsafeGetNullable(rs, i + 6)
    )
  )
}
