/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_settings

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgSettingsViewRow(
  name: Option[String],
  setting: Option[String],
  unit: Option[String],
  category: Option[String],
  shortDesc: Option[String],
  extraDesc: Option[String],
  context: Option[String],
  vartype: Option[String],
  source: Option[String],
  minVal: Option[String],
  maxVal: Option[String],
  enumvals: Option[Array[String]],
  bootVal: Option[String],
  resetVal: Option[String],
  sourcefile: Option[String],
  sourceline: Option[Int],
  pendingRestart: Option[Boolean]
)

object PgSettingsViewRow {
  implicit val decoder: Decoder[PgSettingsViewRow] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Option[String]]
        setting <- c.downField("setting").as[Option[String]]
        unit <- c.downField("unit").as[Option[String]]
        category <- c.downField("category").as[Option[String]]
        shortDesc <- c.downField("short_desc").as[Option[String]]
        extraDesc <- c.downField("extra_desc").as[Option[String]]
        context <- c.downField("context").as[Option[String]]
        vartype <- c.downField("vartype").as[Option[String]]
        source <- c.downField("source").as[Option[String]]
        minVal <- c.downField("min_val").as[Option[String]]
        maxVal <- c.downField("max_val").as[Option[String]]
        enumvals <- c.downField("enumvals").as[Option[Array[String]]]
        bootVal <- c.downField("boot_val").as[Option[String]]
        resetVal <- c.downField("reset_val").as[Option[String]]
        sourcefile <- c.downField("sourcefile").as[Option[String]]
        sourceline <- c.downField("sourceline").as[Option[Int]]
        pendingRestart <- c.downField("pending_restart").as[Option[Boolean]]
      } yield PgSettingsViewRow(name, setting, unit, category, shortDesc, extraDesc, context, vartype, source, minVal, maxVal, enumvals, bootVal, resetVal, sourcefile, sourceline, pendingRestart)
  implicit val encoder: Encoder[PgSettingsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "setting" := row.setting,
        "unit" := row.unit,
        "category" := row.category,
        "short_desc" := row.shortDesc,
        "extra_desc" := row.extraDesc,
        "context" := row.context,
        "vartype" := row.vartype,
        "source" := row.source,
        "min_val" := row.minVal,
        "max_val" := row.maxVal,
        "enumvals" := row.enumvals,
        "boot_val" := row.bootVal,
        "reset_val" := row.resetVal,
        "sourcefile" := row.sourcefile,
        "sourceline" := row.sourceline,
        "pending_restart" := row.pendingRestart
      )}
  implicit val read: Read[PgSettingsViewRow] =
    new Read[PgSettingsViewRow](
      gets = List(
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Array[String]], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgSettingsViewRow(
        name = Get[String].unsafeGetNullable(rs, i + 0),
        setting = Get[String].unsafeGetNullable(rs, i + 1),
        unit = Get[String].unsafeGetNullable(rs, i + 2),
        category = Get[String].unsafeGetNullable(rs, i + 3),
        shortDesc = Get[String].unsafeGetNullable(rs, i + 4),
        extraDesc = Get[String].unsafeGetNullable(rs, i + 5),
        context = Get[String].unsafeGetNullable(rs, i + 6),
        vartype = Get[String].unsafeGetNullable(rs, i + 7),
        source = Get[String].unsafeGetNullable(rs, i + 8),
        minVal = Get[String].unsafeGetNullable(rs, i + 9),
        maxVal = Get[String].unsafeGetNullable(rs, i + 10),
        enumvals = Get[Array[String]].unsafeGetNullable(rs, i + 11),
        bootVal = Get[String].unsafeGetNullable(rs, i + 12),
        resetVal = Get[String].unsafeGetNullable(rs, i + 13),
        sourcefile = Get[String].unsafeGetNullable(rs, i + 14),
        sourceline = Get[Int].unsafeGetNullable(rs, i + 15),
        pendingRestart = Get[Boolean].unsafeGetNullable(rs, i + 16)
      )
    )
  

}
