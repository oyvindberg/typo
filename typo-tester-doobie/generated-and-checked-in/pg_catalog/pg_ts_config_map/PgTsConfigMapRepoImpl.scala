/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config_map

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgTsConfigMapRepoImpl extends PgTsConfigMapRepo {
  override def delete(compositeId: PgTsConfigMapId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_ts_config_map where mapcfg = ${compositeId.mapcfg} AND maptokentype = ${compositeId.maptokentype} AND mapseqno = ${compositeId.mapseqno}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgTsConfigMapRow): ConnectionIO[PgTsConfigMapRow] = {
    sql"""insert into pg_catalog.pg_ts_config_map(mapcfg, maptokentype, mapseqno, mapdict)
          values (${unsaved.mapcfg}::oid, ${unsaved.maptokentype}::int4, ${unsaved.mapseqno}::int4, ${unsaved.mapdict}::oid)
          returning mapcfg, maptokentype, mapseqno, mapdict
       """.query(PgTsConfigMapRow.read).unique
  }
  override def selectAll: Stream[ConnectionIO, PgTsConfigMapRow] = {
    sql"select mapcfg, maptokentype, mapseqno, mapdict from pg_catalog.pg_ts_config_map".query(PgTsConfigMapRow.read).stream
  }
  override def selectById(compositeId: PgTsConfigMapId): ConnectionIO[Option[PgTsConfigMapRow]] = {
    sql"select mapcfg, maptokentype, mapseqno, mapdict from pg_catalog.pg_ts_config_map where mapcfg = ${compositeId.mapcfg} AND maptokentype = ${compositeId.maptokentype} AND mapseqno = ${compositeId.mapseqno}".query(PgTsConfigMapRow.read).option
  }
  override def update(row: PgTsConfigMapRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_ts_config_map
          set mapdict = ${row.mapdict}::oid
          where mapcfg = ${compositeId.mapcfg} AND maptokentype = ${compositeId.maptokentype} AND mapseqno = ${compositeId.mapseqno}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgTsConfigMapRow): ConnectionIO[PgTsConfigMapRow] = {
    sql"""insert into pg_catalog.pg_ts_config_map(mapcfg, maptokentype, mapseqno, mapdict)
          values (
            ${unsaved.mapcfg}::oid,
            ${unsaved.maptokentype}::int4,
            ${unsaved.mapseqno}::int4,
            ${unsaved.mapdict}::oid
          )
          on conflict (mapcfg, maptokentype, mapseqno)
          do update set
            mapdict = EXCLUDED.mapdict
          returning mapcfg, maptokentype, mapseqno, mapdict
       """.query(PgTsConfigMapRow.read).unique
  }
}
