/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_config_map

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgTsConfigMapRow(
  mapcfg: /* oid */ Long,
  maptokentype: Int,
  mapseqno: Int,
  mapdict: /* oid */ Long
){
   val compositeId: PgTsConfigMapId = PgTsConfigMapId(mapcfg, maptokentype, mapseqno)
 }

object PgTsConfigMapRow {
  implicit val decoder: Decoder[PgTsConfigMapRow] =
    (c: HCursor) =>
      for {
        mapcfg <- c.downField("mapcfg").as[/* oid */ Long]
        maptokentype <- c.downField("maptokentype").as[Int]
        mapseqno <- c.downField("mapseqno").as[Int]
        mapdict <- c.downField("mapdict").as[/* oid */ Long]
      } yield PgTsConfigMapRow(mapcfg, maptokentype, mapseqno, mapdict)
  implicit val encoder: Encoder[PgTsConfigMapRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "mapcfg" := row.mapcfg,
        "maptokentype" := row.maptokentype,
        "mapseqno" := row.mapseqno,
        "mapdict" := row.mapdict
      )}
  implicit val read: Read[PgTsConfigMapRow] =
    new Read[PgTsConfigMapRow](
      gets = List(
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgTsConfigMapRow(
        mapcfg = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 0),
        maptokentype = Get[Int].unsafeGetNonNullable(rs, i + 1),
        mapseqno = Get[Int].unsafeGetNonNullable(rs, i + 2),
        mapdict = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 3)
      )
    )
  

}
