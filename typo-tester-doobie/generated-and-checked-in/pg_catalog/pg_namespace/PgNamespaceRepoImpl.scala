/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_namespace

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgNamespaceRepoImpl extends PgNamespaceRepo {
  override def delete(oid: PgNamespaceId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_namespace where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgNamespaceRow): ConnectionIO[PgNamespaceRow] = {
    sql"""insert into pg_catalog.pg_namespace(oid, nspname, nspowner, nspacl)
          values (${unsaved.oid}::oid, ${unsaved.nspname}::name, ${unsaved.nspowner}::oid, ${unsaved.nspacl}::_aclitem)
          returning oid, nspname, nspowner, nspacl
       """.query[PgNamespaceRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgNamespaceRow] = {
    sql"select oid, nspname, nspowner, nspacl from pg_catalog.pg_namespace".query[PgNamespaceRow].stream
  }
  override def selectById(oid: PgNamespaceId): ConnectionIO[Option[PgNamespaceRow]] = {
    sql"select oid, nspname, nspowner, nspacl from pg_catalog.pg_namespace where oid = ${oid}".query[PgNamespaceRow].option
  }
  override def selectByIds(oids: Array[PgNamespaceId]): Stream[ConnectionIO, PgNamespaceRow] = {
    sql"select oid, nspname, nspowner, nspacl from pg_catalog.pg_namespace where oid = ANY(${oids})".query[PgNamespaceRow].stream
  }
  override def update(row: PgNamespaceRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_namespace
          set nspname = ${row.nspname}::name,
              nspowner = ${row.nspowner}::oid,
              nspacl = ${row.nspacl}::_aclitem
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgNamespaceRow): ConnectionIO[PgNamespaceRow] = {
    sql"""insert into pg_catalog.pg_namespace(oid, nspname, nspowner, nspacl)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.nspname}::name,
            ${unsaved.nspowner}::oid,
            ${unsaved.nspacl}::_aclitem
          )
          on conflict (oid)
          do update set
            nspname = EXCLUDED.nspname,
            nspowner = EXCLUDED.nspowner,
            nspacl = EXCLUDED.nspacl
          returning oid, nspname, nspowner, nspacl
       """.query[PgNamespaceRow].unique
  }
}
