/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_namespace

import adventureworks.TypoAclItem
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgNamespaceRow(
  oid: PgNamespaceId,
  nspname: String,
  nspowner: /* oid */ Long,
  nspacl: Option[Array[TypoAclItem]]
)

object PgNamespaceRow {
  implicit val decoder: Decoder[PgNamespaceRow] =
    (c: HCursor) =>
      for {
        oid <- c.downField("oid").as[PgNamespaceId]
        nspname <- c.downField("nspname").as[String]
        nspowner <- c.downField("nspowner").as[/* oid */ Long]
        nspacl <- c.downField("nspacl").as[Option[Array[TypoAclItem]]]
      } yield PgNamespaceRow(oid, nspname, nspowner, nspacl)
  implicit val encoder: Encoder[PgNamespaceRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "oid" := row.oid,
        "nspname" := row.nspname,
        "nspowner" := row.nspowner,
        "nspacl" := row.nspacl
      )}
  implicit val read: Read[PgNamespaceRow] =
    new Read[PgNamespaceRow](
      gets = List(
        (Get[PgNamespaceId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[Array[TypoAclItem]], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgNamespaceRow(
        oid = Get[PgNamespaceId].unsafeGetNonNullable(rs, i + 0),
        nspname = Get[String].unsafeGetNonNullable(rs, i + 1),
        nspowner = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
        nspacl = Get[Array[TypoAclItem]].unsafeGetNullable(rs, i + 3)
      )
    )
  

}
