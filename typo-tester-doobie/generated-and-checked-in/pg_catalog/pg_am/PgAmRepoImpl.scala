/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_am

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgAmRepoImpl extends PgAmRepo {
  override def delete(oid: PgAmId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_am where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgAmRow): ConnectionIO[PgAmRow] = {
    sql"""insert into pg_catalog.pg_am(oid, amname, amhandler, amtype)
          values (${unsaved.oid}::oid, ${unsaved.amname}::name, ${unsaved.amhandler}::regproc, ${unsaved.amtype}::char)
          returning oid, amname, amhandler, amtype
       """.query(PgAmRow.read).unique
  }
  override def selectAll: Stream[ConnectionIO, PgAmRow] = {
    sql"select oid, amname, amhandler, amtype from pg_catalog.pg_am".query(PgAmRow.read).stream
  }
  override def selectById(oid: PgAmId): ConnectionIO[Option[PgAmRow]] = {
    sql"select oid, amname, amhandler, amtype from pg_catalog.pg_am where oid = ${oid}".query(PgAmRow.read).option
  }
  override def selectByIds(oids: Array[PgAmId]): Stream[ConnectionIO, PgAmRow] = {
    sql"select oid, amname, amhandler, amtype from pg_catalog.pg_am where oid = ANY(${oids})".query(PgAmRow.read).stream
  }
  override def update(row: PgAmRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_am
          set amname = ${row.amname}::name,
              amhandler = ${row.amhandler}::regproc,
              amtype = ${row.amtype}::char
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgAmRow): ConnectionIO[PgAmRow] = {
    sql"""insert into pg_catalog.pg_am(oid, amname, amhandler, amtype)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.amname}::name,
            ${unsaved.amhandler}::regproc,
            ${unsaved.amtype}::char
          )
          on conflict (oid)
          do update set
            amname = EXCLUDED.amname,
            amhandler = EXCLUDED.amhandler,
            amtype = EXCLUDED.amtype
          returning oid, amname, amhandler, amtype
       """.query(PgAmRow.read).unique
  }
}
