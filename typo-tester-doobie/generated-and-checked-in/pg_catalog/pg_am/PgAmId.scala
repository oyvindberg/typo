/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_am

import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Type for the primary key of table `pg_catalog.pg_am` */
case class PgAmId(value: /* oid */ Long) extends AnyVal
object PgAmId {
  implicit val ordering: Ordering[PgAmId] = Ordering.by(_.value)
  implicit val encoder: Encoder[PgAmId] =
    Encoder[/* oid */ Long].contramap(_.value)
  implicit val decoder: Decoder[PgAmId] =
    Decoder[/* oid */ Long].map(PgAmId(_))
  implicit val meta: Meta[PgAmId] = Meta[/* oid */ Long].imap(PgAmId.apply)(_.value)
  implicit val metaArray: Meta[Array[PgAmId]] = Meta[Array[/* oid */ Long]].imap(_.map(PgAmId.apply))(_.map(_.value))
}
