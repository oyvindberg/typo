/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_am

import adventureworks.TypoRegproc
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgAmRow(
  oid: PgAmId,
  amname: String,
  amhandler: TypoRegproc,
  amtype: String
)

object PgAmRow {
  implicit val decoder: Decoder[PgAmRow] = Decoder.forProduct4[PgAmRow, PgAmId, String, TypoRegproc, String]("oid", "amname", "amhandler", "amtype")(PgAmRow.apply)
  implicit val encoder: Encoder[PgAmRow] = Encoder.forProduct4[PgAmRow, PgAmId, String, TypoRegproc, String]("oid", "amname", "amhandler", "amtype")(x => (x.oid, x.amname, x.amhandler, x.amtype))
  implicit val read: Read[PgAmRow] = new Read[PgAmRow](
    gets = List(
      (Get[PgAmId], Nullability.NoNulls),
      (Get[String], Nullability.NoNulls),
      (Get[TypoRegproc], Nullability.NoNulls),
      (Get[String], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgAmRow(
      oid = Get[PgAmId].unsafeGetNonNullable(rs, i + 0),
      amname = Get[String].unsafeGetNonNullable(rs, i + 1),
      amhandler = Get[TypoRegproc].unsafeGetNonNullable(rs, i + 2),
      amtype = Get[String].unsafeGetNonNullable(rs, i + 3)
    )
  )
}
