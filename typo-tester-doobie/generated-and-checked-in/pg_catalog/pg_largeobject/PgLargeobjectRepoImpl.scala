/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_largeobject

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgLargeobjectRepoImpl extends PgLargeobjectRepo {
  override def delete(compositeId: PgLargeobjectId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_largeobject where loid = ${compositeId.loid} AND pageno = ${compositeId.pageno}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgLargeobjectRow): ConnectionIO[PgLargeobjectRow] = {
    sql"""insert into pg_catalog.pg_largeobject(loid, pageno, "data")
          values (${unsaved.loid}::oid, ${unsaved.pageno}::int4, ${unsaved.data}::bytea)
          returning loid, pageno, "data"
       """.query[PgLargeobjectRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgLargeobjectRow] = {
    sql"""select loid, pageno, "data" from pg_catalog.pg_largeobject""".query[PgLargeobjectRow].stream
  }
  override def selectById(compositeId: PgLargeobjectId): ConnectionIO[Option[PgLargeobjectRow]] = {
    sql"""select loid, pageno, "data" from pg_catalog.pg_largeobject where loid = ${compositeId.loid} AND pageno = ${compositeId.pageno}""".query[PgLargeobjectRow].option
  }
  override def update(row: PgLargeobjectRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_largeobject
          set "data" = ${row.data}::bytea
          where loid = ${compositeId.loid} AND pageno = ${compositeId.pageno}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgLargeobjectRow): ConnectionIO[PgLargeobjectRow] = {
    sql"""insert into pg_catalog.pg_largeobject(loid, pageno, "data")
          values (
            ${unsaved.loid}::oid,
            ${unsaved.pageno}::int4,
            ${unsaved.data}::bytea
          )
          on conflict (loid, pageno)
          do update set
            "data" = EXCLUDED."data"
          returning loid, pageno, "data"
       """.query[PgLargeobjectRow].unique
  }
}
