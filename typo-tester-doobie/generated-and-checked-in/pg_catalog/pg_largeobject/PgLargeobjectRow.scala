/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_largeobject

import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgLargeobjectRow(
  loid: /* oid */ Long,
  pageno: Int,
  data: Array[Byte]
){
   val compositeId: PgLargeobjectId = PgLargeobjectId(loid, pageno)
 }

object PgLargeobjectRow {
  implicit val decoder: Decoder[PgLargeobjectRow] = Decoder.forProduct3[PgLargeobjectRow, /* oid */ Long, Int, Array[Byte]]("loid", "pageno", "data")(PgLargeobjectRow.apply)
  implicit val encoder: Encoder[PgLargeobjectRow] = Encoder.forProduct3[PgLargeobjectRow, /* oid */ Long, Int, Array[Byte]]("loid", "pageno", "data")(x => (x.loid, x.pageno, x.data))
  implicit val read: Read[PgLargeobjectRow] = new Read[PgLargeobjectRow](
    gets = List(
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[Array[Byte]], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgLargeobjectRow(
      loid = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 0),
      pageno = Get[Int].unsafeGetNonNullable(rs, i + 1),
      data = Get[Array[Byte]].unsafeGetNonNullable(rs, i + 2)
    )
  )
}
