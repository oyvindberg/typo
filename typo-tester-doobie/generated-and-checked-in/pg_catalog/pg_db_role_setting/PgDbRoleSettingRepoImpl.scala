/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_db_role_setting

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgDbRoleSettingRepoImpl extends PgDbRoleSettingRepo {
  override def delete(compositeId: PgDbRoleSettingId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_db_role_setting where setdatabase = ${compositeId.setdatabase} AND setrole = ${compositeId.setrole}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgDbRoleSettingRow): ConnectionIO[PgDbRoleSettingRow] = {
    sql"""insert into pg_catalog.pg_db_role_setting(setdatabase, setrole, setconfig)
          values (${unsaved.setdatabase}::oid, ${unsaved.setrole}::oid, ${unsaved.setconfig}::_text)
          returning setdatabase, setrole, setconfig
       """.query(PgDbRoleSettingRow.read).unique
  }
  override def selectAll: Stream[ConnectionIO, PgDbRoleSettingRow] = {
    sql"select setdatabase, setrole, setconfig from pg_catalog.pg_db_role_setting".query(PgDbRoleSettingRow.read).stream
  }
  override def selectById(compositeId: PgDbRoleSettingId): ConnectionIO[Option[PgDbRoleSettingRow]] = {
    sql"select setdatabase, setrole, setconfig from pg_catalog.pg_db_role_setting where setdatabase = ${compositeId.setdatabase} AND setrole = ${compositeId.setrole}".query(PgDbRoleSettingRow.read).option
  }
  override def update(row: PgDbRoleSettingRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update pg_catalog.pg_db_role_setting
          set setconfig = ${row.setconfig}::_text
          where setdatabase = ${compositeId.setdatabase} AND setrole = ${compositeId.setrole}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgDbRoleSettingRow): ConnectionIO[PgDbRoleSettingRow] = {
    sql"""insert into pg_catalog.pg_db_role_setting(setdatabase, setrole, setconfig)
          values (
            ${unsaved.setdatabase}::oid,
            ${unsaved.setrole}::oid,
            ${unsaved.setconfig}::_text
          )
          on conflict (setdatabase, setrole)
          do update set
            setconfig = EXCLUDED.setconfig
          returning setdatabase, setrole, setconfig
       """.query(PgDbRoleSettingRow.read).unique
  }
}
