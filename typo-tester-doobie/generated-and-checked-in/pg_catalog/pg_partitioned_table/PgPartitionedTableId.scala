/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_partitioned_table

import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Type for the primary key of table `pg_catalog.pg_partitioned_table` */
case class PgPartitionedTableId(value: /* oid */ Long) extends AnyVal
object PgPartitionedTableId {
  implicit val ordering: Ordering[PgPartitionedTableId] = Ordering.by(_.value)
  implicit val encoder: Encoder[PgPartitionedTableId] =
    Encoder[/* oid */ Long].contramap(_.value)
  implicit val decoder: Decoder[PgPartitionedTableId] =
    Decoder[/* oid */ Long].map(PgPartitionedTableId(_))
  implicit val meta: Meta[PgPartitionedTableId] = Meta[/* oid */ Long].imap(PgPartitionedTableId.apply)(_.value)
  implicit val metaArray: Meta[Array[PgPartitionedTableId]] = Meta[Array[/* oid */ Long]].imap(_.map(PgPartitionedTableId.apply))(_.map(_.value))
}
