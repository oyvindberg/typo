/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_copy

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgStatProgressCopyViewRow(
  pid: Option[Int],
  datid: Option[/* oid */ Long],
  datname: Option[String],
  relid: Option[/* oid */ Long],
  command: Option[String],
  `type`: Option[String],
  bytesProcessed: Option[Long],
  bytesTotal: Option[Long],
  tuplesProcessed: Option[Long],
  tuplesExcluded: Option[Long]
)

object PgStatProgressCopyViewRow {
  implicit val decoder: Decoder[PgStatProgressCopyViewRow] =
    (c: HCursor) =>
      for {
        pid <- c.downField("pid").as[Option[Int]]
        datid <- c.downField("datid").as[Option[/* oid */ Long]]
        datname <- c.downField("datname").as[Option[String]]
        relid <- c.downField("relid").as[Option[/* oid */ Long]]
        command <- c.downField("command").as[Option[String]]
        `type` <- c.downField("type").as[Option[String]]
        bytesProcessed <- c.downField("bytes_processed").as[Option[Long]]
        bytesTotal <- c.downField("bytes_total").as[Option[Long]]
        tuplesProcessed <- c.downField("tuples_processed").as[Option[Long]]
        tuplesExcluded <- c.downField("tuples_excluded").as[Option[Long]]
      } yield PgStatProgressCopyViewRow(pid, datid, datname, relid, command, `type`, bytesProcessed, bytesTotal, tuplesProcessed, tuplesExcluded)
  implicit val encoder: Encoder[PgStatProgressCopyViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "pid" := row.pid,
        "datid" := row.datid,
        "datname" := row.datname,
        "relid" := row.relid,
        "command" := row.command,
        "type" := row.`type`,
        "bytes_processed" := row.bytesProcessed,
        "bytes_total" := row.bytesTotal,
        "tuples_processed" := row.tuplesProcessed,
        "tuples_excluded" := row.tuplesExcluded
      )}
  implicit val read: Read[PgStatProgressCopyViewRow] =
    new Read[PgStatProgressCopyViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgStatProgressCopyViewRow(
        pid = Get[Int].unsafeGetNullable(rs, i + 0),
        datid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 1),
        datname = Get[String].unsafeGetNullable(rs, i + 2),
        relid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 3),
        command = Get[String].unsafeGetNullable(rs, i + 4),
        `type` = Get[String].unsafeGetNullable(rs, i + 5),
        bytesProcessed = Get[Long].unsafeGetNullable(rs, i + 6),
        bytesTotal = Get[Long].unsafeGetNullable(rs, i + 7),
        tuplesProcessed = Get[Long].unsafeGetNullable(rs, i + 8),
        tuplesExcluded = Get[Long].unsafeGetNullable(rs, i + 9)
      )
    )
  

}
