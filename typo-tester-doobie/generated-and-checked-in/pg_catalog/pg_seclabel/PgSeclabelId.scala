/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_seclabel

import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json

/** Type for the composite primary key of table `pg_catalog.pg_seclabel` */
case class PgSeclabelId(objoid: /* oid */ Long, classoid: /* oid */ Long, objsubid: Int, provider: String)
object PgSeclabelId {
  implicit val ordering: Ordering[PgSeclabelId] = Ordering.by(x => (x.objoid, x.classoid, x.objsubid, x.provider))
  implicit val decoder: Decoder[PgSeclabelId] =
    (c: HCursor) =>
      for {
        objoid <- c.downField("objoid").as[/* oid */ Long]
        classoid <- c.downField("classoid").as[/* oid */ Long]
        objsubid <- c.downField("objsubid").as[Int]
        provider <- c.downField("provider").as[String]
      } yield PgSeclabelId(objoid, classoid, objsubid, provider)
  implicit val encoder: Encoder[PgSeclabelId] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "objoid" := row.objoid,
        "classoid" := row.classoid,
        "objsubid" := row.objsubid,
        "provider" := row.provider
      )}
}
