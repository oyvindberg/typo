/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_extension

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgExtensionRow(
  oid: PgExtensionId,
  extname: String,
  extowner: /* oid */ Long,
  extnamespace: /* oid */ Long,
  extrelocatable: Boolean,
  extversion: String,
  extconfig: Option[Array[/* oid */ Long]],
  extcondition: Option[Array[String]]
)

object PgExtensionRow {
  implicit val decoder: Decoder[PgExtensionRow] =
    (c: HCursor) =>
      for {
        oid <- c.downField("oid").as[PgExtensionId]
        extname <- c.downField("extname").as[String]
        extowner <- c.downField("extowner").as[/* oid */ Long]
        extnamespace <- c.downField("extnamespace").as[/* oid */ Long]
        extrelocatable <- c.downField("extrelocatable").as[Boolean]
        extversion <- c.downField("extversion").as[String]
        extconfig <- c.downField("extconfig").as[Option[Array[/* oid */ Long]]]
        extcondition <- c.downField("extcondition").as[Option[Array[String]]]
      } yield PgExtensionRow(oid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition)
  implicit val encoder: Encoder[PgExtensionRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "oid" := row.oid,
        "extname" := row.extname,
        "extowner" := row.extowner,
        "extnamespace" := row.extnamespace,
        "extrelocatable" := row.extrelocatable,
        "extversion" := row.extversion,
        "extconfig" := row.extconfig,
        "extcondition" := row.extcondition
      )}
  implicit val read: Read[PgExtensionRow] =
    new Read[PgExtensionRow](
      gets = List(
        (Get[PgExtensionId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[Array[/* oid */ Long]], Nullability.Nullable),
        (Get[Array[String]], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgExtensionRow(
        oid = Get[PgExtensionId].unsafeGetNonNullable(rs, i + 0),
        extname = Get[String].unsafeGetNonNullable(rs, i + 1),
        extowner = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
        extnamespace = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 3),
        extrelocatable = Get[Boolean].unsafeGetNonNullable(rs, i + 4),
        extversion = Get[String].unsafeGetNonNullable(rs, i + 5),
        extconfig = Get[Array[/* oid */ Long]].unsafeGetNullable(rs, i + 6),
        extcondition = Get[Array[String]].unsafeGetNullable(rs, i + 7)
      )
    )
  

}
