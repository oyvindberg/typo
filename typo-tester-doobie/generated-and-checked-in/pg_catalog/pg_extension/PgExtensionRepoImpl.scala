/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_extension

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgExtensionRepoImpl extends PgExtensionRepo {
  override def delete(oid: PgExtensionId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_extension where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgExtensionRow): ConnectionIO[PgExtensionRow] = {
    sql"""insert into pg_catalog.pg_extension(oid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition)
          values (${unsaved.oid}::oid, ${unsaved.extname}::name, ${unsaved.extowner}::oid, ${unsaved.extnamespace}::oid, ${unsaved.extrelocatable}, ${unsaved.extversion}, ${unsaved.extconfig}::_oid, ${unsaved.extcondition}::_text)
          returning oid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition
       """.query(PgExtensionRow.read).unique
  }
  override def selectAll: Stream[ConnectionIO, PgExtensionRow] = {
    sql"select oid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition from pg_catalog.pg_extension".query(PgExtensionRow.read).stream
  }
  override def selectById(oid: PgExtensionId): ConnectionIO[Option[PgExtensionRow]] = {
    sql"select oid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition from pg_catalog.pg_extension where oid = ${oid}".query(PgExtensionRow.read).option
  }
  override def selectByIds(oids: Array[PgExtensionId]): Stream[ConnectionIO, PgExtensionRow] = {
    sql"select oid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition from pg_catalog.pg_extension where oid = ANY(${oids})".query(PgExtensionRow.read).stream
  }
  override def update(row: PgExtensionRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_extension
          set extname = ${row.extname}::name,
              extowner = ${row.extowner}::oid,
              extnamespace = ${row.extnamespace}::oid,
              extrelocatable = ${row.extrelocatable},
              extversion = ${row.extversion},
              extconfig = ${row.extconfig}::_oid,
              extcondition = ${row.extcondition}::_text
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgExtensionRow): ConnectionIO[PgExtensionRow] = {
    sql"""insert into pg_catalog.pg_extension(oid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.extname}::name,
            ${unsaved.extowner}::oid,
            ${unsaved.extnamespace}::oid,
            ${unsaved.extrelocatable},
            ${unsaved.extversion},
            ${unsaved.extconfig}::_oid,
            ${unsaved.extcondition}::_text
          )
          on conflict (oid)
          do update set
            extname = EXCLUDED.extname,
            extowner = EXCLUDED.extowner,
            extnamespace = EXCLUDED.extnamespace,
            extrelocatable = EXCLUDED.extrelocatable,
            extversion = EXCLUDED.extversion,
            extconfig = EXCLUDED.extconfig,
            extcondition = EXCLUDED.extcondition
          returning oid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition
       """.query(PgExtensionRow.read).unique
  }
}
