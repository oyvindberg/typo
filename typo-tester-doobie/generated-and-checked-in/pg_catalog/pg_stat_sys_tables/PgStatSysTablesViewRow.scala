/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_sys_tables

import adventureworks.TypoOffsetDateTime
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import scala.util.Try

case class PgStatSysTablesViewRow(
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.relid]] */
  relid: Option[/* oid */ Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.schemaname]] */
  schemaname: Option[String],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.relname]] */
  relname: Option[String],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.seqScan]] */
  seqScan: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.seqTupRead]] */
  seqTupRead: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.idxScan]] */
  idxScan: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.idxTupFetch]] */
  idxTupFetch: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.nTupIns]] */
  nTupIns: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.nTupUpd]] */
  nTupUpd: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.nTupDel]] */
  nTupDel: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.nTupHotUpd]] */
  nTupHotUpd: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.nLiveTup]] */
  nLiveTup: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.nDeadTup]] */
  nDeadTup: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.nModSinceAnalyze]] */
  nModSinceAnalyze: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.nInsSinceVacuum]] */
  nInsSinceVacuum: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.lastVacuum]] */
  lastVacuum: Option[TypoOffsetDateTime],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.lastAutovacuum]] */
  lastAutovacuum: Option[TypoOffsetDateTime],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.lastAnalyze]] */
  lastAnalyze: Option[TypoOffsetDateTime],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.lastAutoanalyze]] */
  lastAutoanalyze: Option[TypoOffsetDateTime],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.vacuumCount]] */
  vacuumCount: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.autovacuumCount]] */
  autovacuumCount: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.analyzeCount]] */
  analyzeCount: Option[Long],
  /** Points to [[pg_stat_all_tables.PgStatAllTablesViewRow.autoanalyzeCount]] */
  autoanalyzeCount: Option[Long]
)

object PgStatSysTablesViewRow {
  implicit val decoder: Decoder[PgStatSysTablesViewRow] = Decoder.instanceTry[PgStatSysTablesViewRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      PgStatSysTablesViewRow(
        relid = orThrow(c.get("relid")(Decoder[Option[/* oid */ Long]])),
        schemaname = orThrow(c.get("schemaname")(Decoder[Option[String]])),
        relname = orThrow(c.get("relname")(Decoder[Option[String]])),
        seqScan = orThrow(c.get("seq_scan")(Decoder[Option[Long]])),
        seqTupRead = orThrow(c.get("seq_tup_read")(Decoder[Option[Long]])),
        idxScan = orThrow(c.get("idx_scan")(Decoder[Option[Long]])),
        idxTupFetch = orThrow(c.get("idx_tup_fetch")(Decoder[Option[Long]])),
        nTupIns = orThrow(c.get("n_tup_ins")(Decoder[Option[Long]])),
        nTupUpd = orThrow(c.get("n_tup_upd")(Decoder[Option[Long]])),
        nTupDel = orThrow(c.get("n_tup_del")(Decoder[Option[Long]])),
        nTupHotUpd = orThrow(c.get("n_tup_hot_upd")(Decoder[Option[Long]])),
        nLiveTup = orThrow(c.get("n_live_tup")(Decoder[Option[Long]])),
        nDeadTup = orThrow(c.get("n_dead_tup")(Decoder[Option[Long]])),
        nModSinceAnalyze = orThrow(c.get("n_mod_since_analyze")(Decoder[Option[Long]])),
        nInsSinceVacuum = orThrow(c.get("n_ins_since_vacuum")(Decoder[Option[Long]])),
        lastVacuum = orThrow(c.get("last_vacuum")(Decoder[Option[TypoOffsetDateTime]])),
        lastAutovacuum = orThrow(c.get("last_autovacuum")(Decoder[Option[TypoOffsetDateTime]])),
        lastAnalyze = orThrow(c.get("last_analyze")(Decoder[Option[TypoOffsetDateTime]])),
        lastAutoanalyze = orThrow(c.get("last_autoanalyze")(Decoder[Option[TypoOffsetDateTime]])),
        vacuumCount = orThrow(c.get("vacuum_count")(Decoder[Option[Long]])),
        autovacuumCount = orThrow(c.get("autovacuum_count")(Decoder[Option[Long]])),
        analyzeCount = orThrow(c.get("analyze_count")(Decoder[Option[Long]])),
        autoanalyzeCount = orThrow(c.get("autoanalyze_count")(Decoder[Option[Long]]))
      )
    }
  )
  implicit val encoder: Encoder[PgStatSysTablesViewRow] = Encoder[PgStatSysTablesViewRow](row =>
    Json.obj(
      "relid" -> Encoder[Option[/* oid */ Long]].apply(row.relid),
      "schemaname" -> Encoder[Option[String]].apply(row.schemaname),
      "relname" -> Encoder[Option[String]].apply(row.relname),
      "seq_scan" -> Encoder[Option[Long]].apply(row.seqScan),
      "seq_tup_read" -> Encoder[Option[Long]].apply(row.seqTupRead),
      "idx_scan" -> Encoder[Option[Long]].apply(row.idxScan),
      "idx_tup_fetch" -> Encoder[Option[Long]].apply(row.idxTupFetch),
      "n_tup_ins" -> Encoder[Option[Long]].apply(row.nTupIns),
      "n_tup_upd" -> Encoder[Option[Long]].apply(row.nTupUpd),
      "n_tup_del" -> Encoder[Option[Long]].apply(row.nTupDel),
      "n_tup_hot_upd" -> Encoder[Option[Long]].apply(row.nTupHotUpd),
      "n_live_tup" -> Encoder[Option[Long]].apply(row.nLiveTup),
      "n_dead_tup" -> Encoder[Option[Long]].apply(row.nDeadTup),
      "n_mod_since_analyze" -> Encoder[Option[Long]].apply(row.nModSinceAnalyze),
      "n_ins_since_vacuum" -> Encoder[Option[Long]].apply(row.nInsSinceVacuum),
      "last_vacuum" -> Encoder[Option[TypoOffsetDateTime]].apply(row.lastVacuum),
      "last_autovacuum" -> Encoder[Option[TypoOffsetDateTime]].apply(row.lastAutovacuum),
      "last_analyze" -> Encoder[Option[TypoOffsetDateTime]].apply(row.lastAnalyze),
      "last_autoanalyze" -> Encoder[Option[TypoOffsetDateTime]].apply(row.lastAutoanalyze),
      "vacuum_count" -> Encoder[Option[Long]].apply(row.vacuumCount),
      "autovacuum_count" -> Encoder[Option[Long]].apply(row.autovacuumCount),
      "analyze_count" -> Encoder[Option[Long]].apply(row.analyzeCount),
      "autoanalyze_count" -> Encoder[Option[Long]].apply(row.autoanalyzeCount)
    )
  )
  implicit val read: Read[PgStatSysTablesViewRow] = new Read[PgStatSysTablesViewRow](
    gets = List(
      (Get[/* oid */ Long], Nullability.Nullable),
      (Get[String], Nullability.Nullable),
      (Get[String], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[TypoOffsetDateTime], Nullability.Nullable),
      (Get[TypoOffsetDateTime], Nullability.Nullable),
      (Get[TypoOffsetDateTime], Nullability.Nullable),
      (Get[TypoOffsetDateTime], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgStatSysTablesViewRow(
      relid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 0),
      schemaname = Get[String].unsafeGetNullable(rs, i + 1),
      relname = Get[String].unsafeGetNullable(rs, i + 2),
      seqScan = Get[Long].unsafeGetNullable(rs, i + 3),
      seqTupRead = Get[Long].unsafeGetNullable(rs, i + 4),
      idxScan = Get[Long].unsafeGetNullable(rs, i + 5),
      idxTupFetch = Get[Long].unsafeGetNullable(rs, i + 6),
      nTupIns = Get[Long].unsafeGetNullable(rs, i + 7),
      nTupUpd = Get[Long].unsafeGetNullable(rs, i + 8),
      nTupDel = Get[Long].unsafeGetNullable(rs, i + 9),
      nTupHotUpd = Get[Long].unsafeGetNullable(rs, i + 10),
      nLiveTup = Get[Long].unsafeGetNullable(rs, i + 11),
      nDeadTup = Get[Long].unsafeGetNullable(rs, i + 12),
      nModSinceAnalyze = Get[Long].unsafeGetNullable(rs, i + 13),
      nInsSinceVacuum = Get[Long].unsafeGetNullable(rs, i + 14),
      lastVacuum = Get[TypoOffsetDateTime].unsafeGetNullable(rs, i + 15),
      lastAutovacuum = Get[TypoOffsetDateTime].unsafeGetNullable(rs, i + 16),
      lastAnalyze = Get[TypoOffsetDateTime].unsafeGetNullable(rs, i + 17),
      lastAutoanalyze = Get[TypoOffsetDateTime].unsafeGetNullable(rs, i + 18),
      vacuumCount = Get[Long].unsafeGetNullable(rs, i + 19),
      autovacuumCount = Get[Long].unsafeGetNullable(rs, i + 20),
      analyzeCount = Get[Long].unsafeGetNullable(rs, i + 21),
      autoanalyzeCount = Get[Long].unsafeGetNullable(rs, i + 22)
    )
  )
}
