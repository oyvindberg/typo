/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_init_privs

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class PgInitPrivsRepoMock(map: scala.collection.mutable.Map[PgInitPrivsId, PgInitPrivsRow] = scala.collection.mutable.Map.empty) extends PgInitPrivsRepo {
  override def delete(compositeId: PgInitPrivsId): ConnectionIO[Boolean] = {
    delay(map.remove(compositeId).isDefined)
  }
  override def insert(unsaved: PgInitPrivsRow): ConnectionIO[PgInitPrivsRow] = {
    delay {
      if (map.contains(unsaved.compositeId))
        sys.error(s"id ${unsaved.compositeId} already exists")
      else
        map.put(unsaved.compositeId, unsaved)
      unsaved
    }
  }
  override def selectAll: Stream[ConnectionIO, PgInitPrivsRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(compositeId: PgInitPrivsId): ConnectionIO[Option[PgInitPrivsRow]] = {
    delay(map.get(compositeId))
  }
  override def update(row: PgInitPrivsRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.compositeId) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.compositeId, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: PgInitPrivsRow): ConnectionIO[PgInitPrivsRow] = {
    delay {
      map.put(unsaved.compositeId, unsaved)
      unsaved
    }
  }
}
