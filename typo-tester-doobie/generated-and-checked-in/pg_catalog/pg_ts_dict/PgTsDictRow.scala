/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_dict

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgTsDictRow(
  oid: PgTsDictId,
  dictname: String,
  dictnamespace: /* oid */ Long,
  dictowner: /* oid */ Long,
  dicttemplate: /* oid */ Long,
  dictinitoption: Option[String]
)

object PgTsDictRow {
  implicit val decoder: Decoder[PgTsDictRow] =
    (c: HCursor) =>
      for {
        oid <- c.downField("oid").as[PgTsDictId]
        dictname <- c.downField("dictname").as[String]
        dictnamespace <- c.downField("dictnamespace").as[/* oid */ Long]
        dictowner <- c.downField("dictowner").as[/* oid */ Long]
        dicttemplate <- c.downField("dicttemplate").as[/* oid */ Long]
        dictinitoption <- c.downField("dictinitoption").as[Option[String]]
      } yield PgTsDictRow(oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption)
  implicit val encoder: Encoder[PgTsDictRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "oid" := row.oid,
        "dictname" := row.dictname,
        "dictnamespace" := row.dictnamespace,
        "dictowner" := row.dictowner,
        "dicttemplate" := row.dicttemplate,
        "dictinitoption" := row.dictinitoption
      )}
  implicit val read: Read[PgTsDictRow] =
    new Read[PgTsDictRow](
      gets = List(
        (Get[PgTsDictId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[String], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgTsDictRow(
        oid = Get[PgTsDictId].unsafeGetNonNullable(rs, i + 0),
        dictname = Get[String].unsafeGetNonNullable(rs, i + 1),
        dictnamespace = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
        dictowner = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 3),
        dicttemplate = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 4),
        dictinitoption = Get[String].unsafeGetNullable(rs, i + 5)
      )
    )
  

}
