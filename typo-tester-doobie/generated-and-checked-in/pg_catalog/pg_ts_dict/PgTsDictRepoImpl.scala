/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_dict

import doobie.free.connection.ConnectionIO
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.meta.Meta
import fs2.Stream

object PgTsDictRepoImpl extends PgTsDictRepo {
  override def delete(oid: PgTsDictId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_ts_dict where oid = ${fromWrite(oid)(Write.fromPut(PgTsDictId.put))}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgTsDictRow): ConnectionIO[PgTsDictRow] = {
    sql"""insert into pg_catalog.pg_ts_dict(oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption)
          values (${fromWrite(unsaved.oid)(Write.fromPut(PgTsDictId.put))}::oid, ${fromWrite(unsaved.dictname)(Write.fromPut(Meta.StringMeta.put))}::name, ${fromWrite(unsaved.dictnamespace)(Write.fromPut(Meta.LongMeta.put))}::oid, ${fromWrite(unsaved.dictowner)(Write.fromPut(Meta.LongMeta.put))}::oid, ${fromWrite(unsaved.dicttemplate)(Write.fromPut(Meta.LongMeta.put))}::oid, ${fromWrite(unsaved.dictinitoption)(Write.fromPutOption(Meta.StringMeta.put))})
          returning oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption
       """.query(PgTsDictRow.read).unique
  }
  override def selectAll: Stream[ConnectionIO, PgTsDictRow] = {
    sql"select oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption from pg_catalog.pg_ts_dict".query(PgTsDictRow.read).stream
  }
  override def selectById(oid: PgTsDictId): ConnectionIO[Option[PgTsDictRow]] = {
    sql"select oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption from pg_catalog.pg_ts_dict where oid = ${fromWrite(oid)(Write.fromPut(PgTsDictId.put))}".query(PgTsDictRow.read).option
  }
  override def selectByIds(oids: Array[PgTsDictId]): Stream[ConnectionIO, PgTsDictRow] = {
    sql"select oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption from pg_catalog.pg_ts_dict where oid = ANY(${fromWrite(oids)(Write.fromPut(PgTsDictId.arrayPut))})".query(PgTsDictRow.read).stream
  }
  override def update(row: PgTsDictRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_ts_dict
          set dictname = ${fromWrite(row.dictname)(Write.fromPut(Meta.StringMeta.put))}::name,
              dictnamespace = ${fromWrite(row.dictnamespace)(Write.fromPut(Meta.LongMeta.put))}::oid,
              dictowner = ${fromWrite(row.dictowner)(Write.fromPut(Meta.LongMeta.put))}::oid,
              dicttemplate = ${fromWrite(row.dicttemplate)(Write.fromPut(Meta.LongMeta.put))}::oid,
              dictinitoption = ${fromWrite(row.dictinitoption)(Write.fromPutOption(Meta.StringMeta.put))}
          where oid = ${fromWrite(oid)(Write.fromPut(PgTsDictId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgTsDictRow): ConnectionIO[PgTsDictRow] = {
    sql"""insert into pg_catalog.pg_ts_dict(oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption)
          values (
            ${fromWrite(unsaved.oid)(Write.fromPut(PgTsDictId.put))}::oid,
            ${fromWrite(unsaved.dictname)(Write.fromPut(Meta.StringMeta.put))}::name,
            ${fromWrite(unsaved.dictnamespace)(Write.fromPut(Meta.LongMeta.put))}::oid,
            ${fromWrite(unsaved.dictowner)(Write.fromPut(Meta.LongMeta.put))}::oid,
            ${fromWrite(unsaved.dicttemplate)(Write.fromPut(Meta.LongMeta.put))}::oid,
            ${fromWrite(unsaved.dictinitoption)(Write.fromPutOption(Meta.StringMeta.put))}
          )
          on conflict (oid)
          do update set
            dictname = EXCLUDED.dictname,
            dictnamespace = EXCLUDED.dictnamespace,
            dictowner = EXCLUDED.dictowner,
            dicttemplate = EXCLUDED.dicttemplate,
            dictinitoption = EXCLUDED.dictinitoption
          returning oid, dictname, dictnamespace, dictowner, dicttemplate, dictinitoption
       """.query(PgTsDictRow.read).unique
  }
}
