/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_default_acl

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgDefaultAclRepoImpl extends PgDefaultAclRepo {
  override def delete(oid: PgDefaultAclId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_default_acl where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgDefaultAclRow): ConnectionIO[PgDefaultAclRow] = {
    sql"""insert into pg_catalog.pg_default_acl(oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl)
          values (${unsaved.oid}::oid, ${unsaved.defaclrole}::oid, ${unsaved.defaclnamespace}::oid, ${unsaved.defaclobjtype}::char, ${unsaved.defaclacl}::_aclitem)
          returning oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl
       """.query[PgDefaultAclRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgDefaultAclRow] = {
    sql"select oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl from pg_catalog.pg_default_acl".query[PgDefaultAclRow].stream
  }
  override def selectById(oid: PgDefaultAclId): ConnectionIO[Option[PgDefaultAclRow]] = {
    sql"select oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl from pg_catalog.pg_default_acl where oid = ${oid}".query[PgDefaultAclRow].option
  }
  override def selectByIds(oids: Array[PgDefaultAclId]): Stream[ConnectionIO, PgDefaultAclRow] = {
    sql"select oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl from pg_catalog.pg_default_acl where oid = ANY(${oids})".query[PgDefaultAclRow].stream
  }
  override def update(row: PgDefaultAclRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_default_acl
          set defaclrole = ${row.defaclrole}::oid,
              defaclnamespace = ${row.defaclnamespace}::oid,
              defaclobjtype = ${row.defaclobjtype}::char,
              defaclacl = ${row.defaclacl}::_aclitem
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgDefaultAclRow): ConnectionIO[PgDefaultAclRow] = {
    sql"""insert into pg_catalog.pg_default_acl(oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.defaclrole}::oid,
            ${unsaved.defaclnamespace}::oid,
            ${unsaved.defaclobjtype}::char,
            ${unsaved.defaclacl}::_aclitem
          )
          on conflict (oid)
          do update set
            defaclrole = EXCLUDED.defaclrole,
            defaclnamespace = EXCLUDED.defaclnamespace,
            defaclobjtype = EXCLUDED.defaclobjtype,
            defaclacl = EXCLUDED.defaclacl
          returning oid, defaclrole, defaclnamespace, defaclobjtype, defaclacl
       """.query[PgDefaultAclRow].unique
  }
}
