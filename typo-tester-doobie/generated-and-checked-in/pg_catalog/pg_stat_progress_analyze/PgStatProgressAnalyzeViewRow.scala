/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_progress_analyze

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgStatProgressAnalyzeViewRow(
  pid: Option[Int],
  datid: Option[/* oid */ Long],
  datname: Option[String],
  relid: Option[/* oid */ Long],
  phase: Option[String],
  sampleBlksTotal: Option[Long],
  sampleBlksScanned: Option[Long],
  extStatsTotal: Option[Long],
  extStatsComputed: Option[Long],
  childTablesTotal: Option[Long],
  childTablesDone: Option[Long],
  currentChildTableRelid: Option[/* oid */ Long]
)

object PgStatProgressAnalyzeViewRow {
  implicit val decoder: Decoder[PgStatProgressAnalyzeViewRow] =
    (c: HCursor) =>
      for {
        pid <- c.downField("pid").as[Option[Int]]
        datid <- c.downField("datid").as[Option[/* oid */ Long]]
        datname <- c.downField("datname").as[Option[String]]
        relid <- c.downField("relid").as[Option[/* oid */ Long]]
        phase <- c.downField("phase").as[Option[String]]
        sampleBlksTotal <- c.downField("sample_blks_total").as[Option[Long]]
        sampleBlksScanned <- c.downField("sample_blks_scanned").as[Option[Long]]
        extStatsTotal <- c.downField("ext_stats_total").as[Option[Long]]
        extStatsComputed <- c.downField("ext_stats_computed").as[Option[Long]]
        childTablesTotal <- c.downField("child_tables_total").as[Option[Long]]
        childTablesDone <- c.downField("child_tables_done").as[Option[Long]]
        currentChildTableRelid <- c.downField("current_child_table_relid").as[Option[/* oid */ Long]]
      } yield PgStatProgressAnalyzeViewRow(pid, datid, datname, relid, phase, sampleBlksTotal, sampleBlksScanned, extStatsTotal, extStatsComputed, childTablesTotal, childTablesDone, currentChildTableRelid)
  implicit val encoder: Encoder[PgStatProgressAnalyzeViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "pid" := row.pid,
        "datid" := row.datid,
        "datname" := row.datname,
        "relid" := row.relid,
        "phase" := row.phase,
        "sample_blks_total" := row.sampleBlksTotal,
        "sample_blks_scanned" := row.sampleBlksScanned,
        "ext_stats_total" := row.extStatsTotal,
        "ext_stats_computed" := row.extStatsComputed,
        "child_tables_total" := row.childTablesTotal,
        "child_tables_done" := row.childTablesDone,
        "current_child_table_relid" := row.currentChildTableRelid
      )}
  implicit val read: Read[PgStatProgressAnalyzeViewRow] =
    new Read[PgStatProgressAnalyzeViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[/* oid */ Long], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgStatProgressAnalyzeViewRow(
        pid = Get[Int].unsafeGetNullable(rs, i + 0),
        datid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 1),
        datname = Get[String].unsafeGetNullable(rs, i + 2),
        relid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 3),
        phase = Get[String].unsafeGetNullable(rs, i + 4),
        sampleBlksTotal = Get[Long].unsafeGetNullable(rs, i + 5),
        sampleBlksScanned = Get[Long].unsafeGetNullable(rs, i + 6),
        extStatsTotal = Get[Long].unsafeGetNullable(rs, i + 7),
        extStatsComputed = Get[Long].unsafeGetNullable(rs, i + 8),
        childTablesTotal = Get[Long].unsafeGetNullable(rs, i + 9),
        childTablesDone = Get[Long].unsafeGetNullable(rs, i + 10),
        currentChildTableRelid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 11)
      )
    )
  

}
