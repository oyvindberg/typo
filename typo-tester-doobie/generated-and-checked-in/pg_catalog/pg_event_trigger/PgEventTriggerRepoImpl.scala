/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_event_trigger

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgEventTriggerRepoImpl extends PgEventTriggerRepo {
  override def delete(oid: PgEventTriggerId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_event_trigger where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgEventTriggerRow): ConnectionIO[PgEventTriggerRow] = {
    sql"""insert into pg_catalog.pg_event_trigger(oid, evtname, evtevent, evtowner, evtfoid, evtenabled, evttags)
          values (${unsaved.oid}::oid, ${unsaved.evtname}::name, ${unsaved.evtevent}::name, ${unsaved.evtowner}::oid, ${unsaved.evtfoid}::oid, ${unsaved.evtenabled}::char, ${unsaved.evttags}::_text)
          returning oid, evtname, evtevent, evtowner, evtfoid, evtenabled, evttags
       """.query(PgEventTriggerRow.read).unique
  }
  override def selectAll: Stream[ConnectionIO, PgEventTriggerRow] = {
    sql"select oid, evtname, evtevent, evtowner, evtfoid, evtenabled, evttags from pg_catalog.pg_event_trigger".query(PgEventTriggerRow.read).stream
  }
  override def selectById(oid: PgEventTriggerId): ConnectionIO[Option[PgEventTriggerRow]] = {
    sql"select oid, evtname, evtevent, evtowner, evtfoid, evtenabled, evttags from pg_catalog.pg_event_trigger where oid = ${oid}".query(PgEventTriggerRow.read).option
  }
  override def selectByIds(oids: Array[PgEventTriggerId]): Stream[ConnectionIO, PgEventTriggerRow] = {
    sql"select oid, evtname, evtevent, evtowner, evtfoid, evtenabled, evttags from pg_catalog.pg_event_trigger where oid = ANY(${oids})".query(PgEventTriggerRow.read).stream
  }
  override def update(row: PgEventTriggerRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_event_trigger
          set evtname = ${row.evtname}::name,
              evtevent = ${row.evtevent}::name,
              evtowner = ${row.evtowner}::oid,
              evtfoid = ${row.evtfoid}::oid,
              evtenabled = ${row.evtenabled}::char,
              evttags = ${row.evttags}::_text
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgEventTriggerRow): ConnectionIO[PgEventTriggerRow] = {
    sql"""insert into pg_catalog.pg_event_trigger(oid, evtname, evtevent, evtowner, evtfoid, evtenabled, evttags)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.evtname}::name,
            ${unsaved.evtevent}::name,
            ${unsaved.evtowner}::oid,
            ${unsaved.evtfoid}::oid,
            ${unsaved.evtenabled}::char,
            ${unsaved.evttags}::_text
          )
          on conflict (oid)
          do update set
            evtname = EXCLUDED.evtname,
            evtevent = EXCLUDED.evtevent,
            evtowner = EXCLUDED.evtowner,
            evtfoid = EXCLUDED.evtfoid,
            evtenabled = EXCLUDED.evtenabled,
            evttags = EXCLUDED.evttags
          returning oid, evtname, evtevent, evtowner, evtfoid, evtenabled, evttags
       """.query(PgEventTriggerRow.read).unique
  }
}
