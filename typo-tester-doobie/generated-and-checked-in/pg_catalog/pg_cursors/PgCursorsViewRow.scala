/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_cursors

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.OffsetDateTime

case class PgCursorsViewRow(
  name: Option[String],
  statement: Option[String],
  isHoldable: Option[Boolean],
  isBinary: Option[Boolean],
  isScrollable: Option[Boolean],
  creationTime: Option[OffsetDateTime]
)

object PgCursorsViewRow {
  implicit val decoder: Decoder[PgCursorsViewRow] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Option[String]]
        statement <- c.downField("statement").as[Option[String]]
        isHoldable <- c.downField("is_holdable").as[Option[Boolean]]
        isBinary <- c.downField("is_binary").as[Option[Boolean]]
        isScrollable <- c.downField("is_scrollable").as[Option[Boolean]]
        creationTime <- c.downField("creation_time").as[Option[OffsetDateTime]]
      } yield PgCursorsViewRow(name, statement, isHoldable, isBinary, isScrollable, creationTime)
  implicit val encoder: Encoder[PgCursorsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "statement" := row.statement,
        "is_holdable" := row.isHoldable,
        "is_binary" := row.isBinary,
        "is_scrollable" := row.isScrollable,
        "creation_time" := row.creationTime
      )}
  implicit val read: Read[PgCursorsViewRow] =
    new Read[PgCursorsViewRow](
      gets = List(
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgCursorsViewRow(
        name = Get[String].unsafeGetNullable(rs, i + 0),
        statement = Get[String].unsafeGetNullable(rs, i + 1),
        isHoldable = Get[Boolean].unsafeGetNullable(rs, i + 2),
        isBinary = Get[Boolean].unsafeGetNullable(rs, i + 3),
        isScrollable = Get[Boolean].unsafeGetNullable(rs, i + 4),
        creationTime = Get[OffsetDateTime].unsafeGetNullable(rs, i + 5)
      )
    )
  

}
