/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_tables

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgTablesViewRow(
  schemaname: Option[String],
  tablename: Option[String],
  tableowner: Option[String],
  tablespace: Option[String],
  hasindexes: Option[Boolean],
  hasrules: Option[Boolean],
  hastriggers: Option[Boolean],
  rowsecurity: Option[Boolean]
)

object PgTablesViewRow {
  implicit val decoder: Decoder[PgTablesViewRow] =
    (c: HCursor) =>
      for {
        schemaname <- c.downField("schemaname").as[Option[String]]
        tablename <- c.downField("tablename").as[Option[String]]
        tableowner <- c.downField("tableowner").as[Option[String]]
        tablespace <- c.downField("tablespace").as[Option[String]]
        hasindexes <- c.downField("hasindexes").as[Option[Boolean]]
        hasrules <- c.downField("hasrules").as[Option[Boolean]]
        hastriggers <- c.downField("hastriggers").as[Option[Boolean]]
        rowsecurity <- c.downField("rowsecurity").as[Option[Boolean]]
      } yield PgTablesViewRow(schemaname, tablename, tableowner, tablespace, hasindexes, hasrules, hastriggers, rowsecurity)
  implicit val encoder: Encoder[PgTablesViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "schemaname" := row.schemaname,
        "tablename" := row.tablename,
        "tableowner" := row.tableowner,
        "tablespace" := row.tablespace,
        "hasindexes" := row.hasindexes,
        "hasrules" := row.hasrules,
        "hastriggers" := row.hastriggers,
        "rowsecurity" := row.rowsecurity
      )}
  implicit val read: Read[PgTablesViewRow] =
    new Read[PgTablesViewRow](
      gets = List(
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgTablesViewRow(
        schemaname = Get[String].unsafeGetNullable(rs, i + 0),
        tablename = Get[String].unsafeGetNullable(rs, i + 1),
        tableowner = Get[String].unsafeGetNullable(rs, i + 2),
        tablespace = Get[String].unsafeGetNullable(rs, i + 3),
        hasindexes = Get[Boolean].unsafeGetNullable(rs, i + 4),
        hasrules = Get[Boolean].unsafeGetNullable(rs, i + 5),
        hastriggers = Get[Boolean].unsafeGetNullable(rs, i + 6),
        rowsecurity = Get[Boolean].unsafeGetNullable(rs, i + 7)
      )
    )
  

}
