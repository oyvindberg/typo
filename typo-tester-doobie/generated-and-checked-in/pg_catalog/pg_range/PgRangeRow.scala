/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_range

import adventureworks.TypoRegproc
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgRangeRow(
  rngtypid: PgRangeId,
  rngsubtype: /* oid */ Long,
  rngmultitypid: /* oid */ Long,
  rngcollation: /* oid */ Long,
  rngsubopc: /* oid */ Long,
  rngcanonical: TypoRegproc,
  rngsubdiff: TypoRegproc
)

object PgRangeRow {
  implicit val decoder: Decoder[PgRangeRow] = Decoder.forProduct7[PgRangeRow, PgRangeId, /* oid */ Long, /* oid */ Long, /* oid */ Long, /* oid */ Long, TypoRegproc, TypoRegproc]("rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff")(PgRangeRow.apply)
  implicit val encoder: Encoder[PgRangeRow] = Encoder.forProduct7[PgRangeRow, PgRangeId, /* oid */ Long, /* oid */ Long, /* oid */ Long, /* oid */ Long, TypoRegproc, TypoRegproc]("rngtypid", "rngsubtype", "rngmultitypid", "rngcollation", "rngsubopc", "rngcanonical", "rngsubdiff")(x => (x.rngtypid, x.rngsubtype, x.rngmultitypid, x.rngcollation, x.rngsubopc, x.rngcanonical, x.rngsubdiff))
  implicit val read: Read[PgRangeRow] = new Read[PgRangeRow](
    gets = List(
      (Get[PgRangeId], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[TypoRegproc], Nullability.NoNulls),
      (Get[TypoRegproc], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgRangeRow(
      rngtypid = Get[PgRangeId].unsafeGetNonNullable(rs, i + 0),
      rngsubtype = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 1),
      rngmultitypid = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
      rngcollation = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 3),
      rngsubopc = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 4),
      rngcanonical = Get[TypoRegproc].unsafeGetNonNullable(rs, i + 5),
      rngsubdiff = Get[TypoRegproc].unsafeGetNonNullable(rs, i + 6)
    )
  )
}
