/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_user_mapping

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgUserMappingRepoImpl extends PgUserMappingRepo {
  override def delete(oid: PgUserMappingId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_user_mapping where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgUserMappingRow): ConnectionIO[PgUserMappingRow] = {
    sql"""insert into pg_catalog.pg_user_mapping(oid, umuser, umserver, umoptions)
          values (${unsaved.oid}::oid, ${unsaved.umuser}::oid, ${unsaved.umserver}::oid, ${unsaved.umoptions}::_text)
          returning oid, umuser, umserver, umoptions
       """.query[PgUserMappingRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgUserMappingRow] = {
    sql"select oid, umuser, umserver, umoptions from pg_catalog.pg_user_mapping".query[PgUserMappingRow].stream
  }
  override def selectById(oid: PgUserMappingId): ConnectionIO[Option[PgUserMappingRow]] = {
    sql"select oid, umuser, umserver, umoptions from pg_catalog.pg_user_mapping where oid = ${oid}".query[PgUserMappingRow].option
  }
  override def selectByIds(oids: Array[PgUserMappingId]): Stream[ConnectionIO, PgUserMappingRow] = {
    sql"select oid, umuser, umserver, umoptions from pg_catalog.pg_user_mapping where oid = ANY(${oids})".query[PgUserMappingRow].stream
  }
  override def update(row: PgUserMappingRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_user_mapping
          set umuser = ${row.umuser}::oid,
              umserver = ${row.umserver}::oid,
              umoptions = ${row.umoptions}::_text
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgUserMappingRow): ConnectionIO[PgUserMappingRow] = {
    sql"""insert into pg_catalog.pg_user_mapping(oid, umuser, umserver, umoptions)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.umuser}::oid,
            ${unsaved.umserver}::oid,
            ${unsaved.umoptions}::_text
          )
          on conflict (oid)
          do update set
            umuser = EXCLUDED.umuser,
            umserver = EXCLUDED.umserver,
            umoptions = EXCLUDED.umoptions
          returning oid, umuser, umserver, umoptions
       """.query[PgUserMappingRow].unique
  }
}
