/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_user_mapping

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgUserMappingRow(
  oid: PgUserMappingId,
  umuser: /* oid */ Long,
  umserver: /* oid */ Long,
  umoptions: Option[Array[String]]
)

object PgUserMappingRow {
  implicit val decoder: Decoder[PgUserMappingRow] =
    (c: HCursor) =>
      for {
        oid <- c.downField("oid").as[PgUserMappingId]
        umuser <- c.downField("umuser").as[/* oid */ Long]
        umserver <- c.downField("umserver").as[/* oid */ Long]
        umoptions <- c.downField("umoptions").as[Option[Array[String]]]
      } yield PgUserMappingRow(oid, umuser, umserver, umoptions)
  implicit val encoder: Encoder[PgUserMappingRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "oid" := row.oid,
        "umuser" := row.umuser,
        "umserver" := row.umserver,
        "umoptions" := row.umoptions
      )}
  implicit val read: Read[PgUserMappingRow] =
    new Read[PgUserMappingRow](
      gets = List(
        (Get[PgUserMappingId], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[Array[String]], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgUserMappingRow(
        oid = Get[PgUserMappingId].unsafeGetNonNullable(rs, i + 0),
        umuser = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 1),
        umserver = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
        umoptions = Get[Array[String]].unsafeGetNullable(rs, i + 3)
      )
    )
  

}
