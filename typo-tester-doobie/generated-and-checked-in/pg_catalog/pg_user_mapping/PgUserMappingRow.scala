/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_user_mapping

import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgUserMappingRow(
  oid: PgUserMappingId,
  umuser: /* oid */ Long,
  umserver: /* oid */ Long,
  umoptions: Option[Array[String]]
)

object PgUserMappingRow {
  implicit val decoder: Decoder[PgUserMappingRow] = Decoder.forProduct4[PgUserMappingRow, PgUserMappingId, /* oid */ Long, /* oid */ Long, Option[Array[String]]]("oid", "umuser", "umserver", "umoptions")(PgUserMappingRow.apply)
  implicit val encoder: Encoder[PgUserMappingRow] = Encoder.forProduct4[PgUserMappingRow, PgUserMappingId, /* oid */ Long, /* oid */ Long, Option[Array[String]]]("oid", "umuser", "umserver", "umoptions")(x => (x.oid, x.umuser, x.umserver, x.umoptions))
  implicit val read: Read[PgUserMappingRow] = new Read[PgUserMappingRow](
    gets = List(
      (Get[PgUserMappingId], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[Array[String]], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgUserMappingRow(
      oid = Get[PgUserMappingId].unsafeGetNonNullable(rs, i + 0),
      umuser = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 1),
      umserver = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
      umoptions = Get[Array[String]].unsafeGetNullable(rs, i + 3)
    )
  )
}
