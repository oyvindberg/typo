/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_statistic_ext

import adventureworks.TypoInt2Vector
import adventureworks.TypoPgNodeTree
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgStatisticExtRow(
  oid: PgStatisticExtId,
  stxrelid: /* oid */ Long,
  stxname: String,
  stxnamespace: /* oid */ Long,
  stxowner: /* oid */ Long,
  stxstattarget: Int,
  stxkeys: TypoInt2Vector,
  stxkind: Array[String],
  stxexprs: Option[TypoPgNodeTree]
)

object PgStatisticExtRow {
  implicit val decoder: Decoder[PgStatisticExtRow] = Decoder.forProduct9[PgStatisticExtRow, PgStatisticExtId, /* oid */ Long, String, /* oid */ Long, /* oid */ Long, Int, TypoInt2Vector, Array[String], Option[TypoPgNodeTree]]("oid", "stxrelid", "stxname", "stxnamespace", "stxowner", "stxstattarget", "stxkeys", "stxkind", "stxexprs")(PgStatisticExtRow.apply)(PgStatisticExtId.decoder, Decoder.decodeLong, Decoder.decodeString, Decoder.decodeLong, Decoder.decodeLong, Decoder.decodeInt, TypoInt2Vector.decoder, Decoder.decodeArray[String](Decoder.decodeString, implicitly), Decoder.decodeOption(TypoPgNodeTree.decoder))
  implicit val encoder: Encoder[PgStatisticExtRow] = Encoder.forProduct9[PgStatisticExtRow, PgStatisticExtId, /* oid */ Long, String, /* oid */ Long, /* oid */ Long, Int, TypoInt2Vector, Array[String], Option[TypoPgNodeTree]]("oid", "stxrelid", "stxname", "stxnamespace", "stxowner", "stxstattarget", "stxkeys", "stxkind", "stxexprs")(x => (x.oid, x.stxrelid, x.stxname, x.stxnamespace, x.stxowner, x.stxstattarget, x.stxkeys, x.stxkind, x.stxexprs))(PgStatisticExtId.encoder, Encoder.encodeLong, Encoder.encodeString, Encoder.encodeLong, Encoder.encodeLong, Encoder.encodeInt, TypoInt2Vector.encoder, Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly), Encoder.encodeOption(TypoPgNodeTree.encoder))
  implicit val read: Read[PgStatisticExtRow] = new Read[PgStatisticExtRow](
    gets = List(
      (PgStatisticExtId.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (TypoInt2Vector.get, Nullability.NoNulls),
      (adventureworks.StringArrayMeta.get, Nullability.NoNulls),
      (TypoPgNodeTree.get, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgStatisticExtRow(
      oid = PgStatisticExtId.get.unsafeGetNonNullable(rs, i + 0),
      stxrelid = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 1),
      stxname = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 2),
      stxnamespace = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 3),
      stxowner = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 4),
      stxstattarget = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 5),
      stxkeys = TypoInt2Vector.get.unsafeGetNonNullable(rs, i + 6),
      stxkind = adventureworks.StringArrayMeta.get.unsafeGetNonNullable(rs, i + 7),
      stxexprs = TypoPgNodeTree.get.unsafeGetNullable(rs, i + 8)
    )
  )
}
