/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_origin

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgReplicationOriginRow(
  roident: PgReplicationOriginId,
  roname: String
)

object PgReplicationOriginRow {
  implicit val decoder: Decoder[PgReplicationOriginRow] =
    (c: HCursor) =>
      for {
        roident <- c.downField("roident").as[PgReplicationOriginId]
        roname <- c.downField("roname").as[String]
      } yield PgReplicationOriginRow(roident, roname)
  implicit val encoder: Encoder[PgReplicationOriginRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "roident" := row.roident,
        "roname" := row.roname
      )}
  implicit val read: Read[PgReplicationOriginRow] =
    new Read[PgReplicationOriginRow](
      gets = List(
        (Get[PgReplicationOriginId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgReplicationOriginRow(
        roident = Get[PgReplicationOriginId].unsafeGetNonNullable(rs, i + 0),
        roname = Get[String].unsafeGetNonNullable(rs, i + 1)
      )
    )
  

}
