/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_replication_origin

import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgReplicationOriginRow(
  roident: PgReplicationOriginId,
  roname: String
)

object PgReplicationOriginRow {
  implicit val decoder: Decoder[PgReplicationOriginRow] = Decoder.forProduct2[PgReplicationOriginRow, PgReplicationOriginId, String]("roident", "roname")(PgReplicationOriginRow.apply)
  implicit val encoder: Encoder[PgReplicationOriginRow] = Encoder.forProduct2[PgReplicationOriginRow, PgReplicationOriginId, String]("roident", "roname")(x => (x.roident, x.roname))
  implicit val read: Read[PgReplicationOriginRow] = new Read[PgReplicationOriginRow](
    gets = List(
      (Get[PgReplicationOriginId], Nullability.NoNulls),
      (Get[String], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgReplicationOriginRow(
      roident = Get[PgReplicationOriginId].unsafeGetNonNullable(rs, i + 0),
      roname = Get[String].unsafeGetNonNullable(rs, i + 1)
    )
  )
}
