/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_transform

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgTransformRepoImpl extends PgTransformRepo {
  override def delete(oid: PgTransformId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_transform where oid = $oid".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgTransformRow): ConnectionIO[PgTransformRow] = {
    sql"""insert into pg_catalog.pg_transform(oid, trftype, trflang, trffromsql, trftosql)
          values (${unsaved.oid}::oid, ${unsaved.trftype}::oid, ${unsaved.trflang}::oid, ${unsaved.trffromsql}::regproc, ${unsaved.trftosql}::regproc)
          returning oid, trftype, trflang, trffromsql, trftosql
       """.query[PgTransformRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgTransformRow] = {
    sql"select oid, trftype, trflang, trffromsql, trftosql from pg_catalog.pg_transform".query[PgTransformRow].stream
  }
  override def selectById(oid: PgTransformId): ConnectionIO[Option[PgTransformRow]] = {
    sql"select oid, trftype, trflang, trffromsql, trftosql from pg_catalog.pg_transform where oid = $oid".query[PgTransformRow].option
  }
  override def selectByIds(oids: Array[PgTransformId]): Stream[ConnectionIO, PgTransformRow] = {
    sql"select oid, trftype, trflang, trffromsql, trftosql from pg_catalog.pg_transform where oid = ANY($oids)".query[PgTransformRow].stream
  }
  override def update(row: PgTransformRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_transform
          set trftype = ${row.trftype}::oid,
              trflang = ${row.trflang}::oid,
              trffromsql = ${row.trffromsql}::regproc,
              trftosql = ${row.trftosql}::regproc
          where oid = $oid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgTransformRow): ConnectionIO[PgTransformRow] = {
    sql"""insert into pg_catalog.pg_transform(oid, trftype, trflang, trffromsql, trftosql)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.trftype}::oid,
            ${unsaved.trflang}::oid,
            ${unsaved.trffromsql}::regproc,
            ${unsaved.trftosql}::regproc
          )
          on conflict (oid)
          do update set
            trftype = EXCLUDED.trftype,
            trflang = EXCLUDED.trflang,
            trffromsql = EXCLUDED.trffromsql,
            trftosql = EXCLUDED.trftosql
          returning oid, trftype, trflang, trffromsql, trftosql
       """.query[PgTransformRow].unique
  }
}
