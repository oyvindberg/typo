/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_transform

import adventureworks.TypoRegproc
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgTransformRow(
  oid: PgTransformId,
  trftype: /* oid */ Long,
  trflang: /* oid */ Long,
  trffromsql: TypoRegproc,
  trftosql: TypoRegproc
)

object PgTransformRow {
  implicit val decoder: Decoder[PgTransformRow] = Decoder.forProduct5[PgTransformRow, PgTransformId, /* oid */ Long, /* oid */ Long, TypoRegproc, TypoRegproc]("oid", "trftype", "trflang", "trffromsql", "trftosql")(PgTransformRow.apply)
  implicit val encoder: Encoder[PgTransformRow] = Encoder.forProduct5[PgTransformRow, PgTransformId, /* oid */ Long, /* oid */ Long, TypoRegproc, TypoRegproc]("oid", "trftype", "trflang", "trffromsql", "trftosql")(x => (x.oid, x.trftype, x.trflang, x.trffromsql, x.trftosql))
  implicit val read: Read[PgTransformRow] = new Read[PgTransformRow](
    gets = List(
      (Get[PgTransformId], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[TypoRegproc], Nullability.NoNulls),
      (Get[TypoRegproc], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgTransformRow(
      oid = Get[PgTransformId].unsafeGetNonNullable(rs, i + 0),
      trftype = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 1),
      trflang = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
      trffromsql = Get[TypoRegproc].unsafeGetNonNullable(rs, i + 3),
      trftosql = Get[TypoRegproc].unsafeGetNonNullable(rs, i + 4)
    )
  )
}
