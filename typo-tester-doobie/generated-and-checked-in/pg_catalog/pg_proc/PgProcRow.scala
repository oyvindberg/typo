/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_proc

import adventureworks.TypoAclItem
import adventureworks.TypoOidVector
import adventureworks.TypoPgNodeTree
import adventureworks.TypoRegproc
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import scala.util.Try

case class PgProcRow(
  oid: PgProcId,
  proname: String,
  pronamespace: /* oid */ Long,
  proowner: /* oid */ Long,
  prolang: /* oid */ Long,
  procost: Float,
  prorows: Float,
  provariadic: /* oid */ Long,
  prosupport: TypoRegproc,
  prokind: String,
  prosecdef: Boolean,
  proleakproof: Boolean,
  proisstrict: Boolean,
  proretset: Boolean,
  provolatile: String,
  proparallel: String,
  pronargs: Int,
  pronargdefaults: Int,
  prorettype: /* oid */ Long,
  proargtypes: TypoOidVector,
  proallargtypes: Option[Array[/* oid */ Long]],
  proargmodes: Option[Array[String]],
  proargnames: Option[Array[String]],
  proargdefaults: Option[TypoPgNodeTree],
  protrftypes: Option[Array[/* oid */ Long]],
  prosrc: String,
  probin: Option[String],
  prosqlbody: Option[TypoPgNodeTree],
  proconfig: Option[Array[String]],
  proacl: Option[Array[TypoAclItem]]
)

object PgProcRow {
  implicit val decoder: Decoder[PgProcRow] = Decoder.instanceTry[PgProcRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      PgProcRow(
        oid = orThrow(c.get("oid")(Decoder[PgProcId])),
        proname = orThrow(c.get("proname")(Decoder[String])),
        pronamespace = orThrow(c.get("pronamespace")(Decoder[/* oid */ Long])),
        proowner = orThrow(c.get("proowner")(Decoder[/* oid */ Long])),
        prolang = orThrow(c.get("prolang")(Decoder[/* oid */ Long])),
        procost = orThrow(c.get("procost")(Decoder[Float])),
        prorows = orThrow(c.get("prorows")(Decoder[Float])),
        provariadic = orThrow(c.get("provariadic")(Decoder[/* oid */ Long])),
        prosupport = orThrow(c.get("prosupport")(Decoder[TypoRegproc])),
        prokind = orThrow(c.get("prokind")(Decoder[String])),
        prosecdef = orThrow(c.get("prosecdef")(Decoder[Boolean])),
        proleakproof = orThrow(c.get("proleakproof")(Decoder[Boolean])),
        proisstrict = orThrow(c.get("proisstrict")(Decoder[Boolean])),
        proretset = orThrow(c.get("proretset")(Decoder[Boolean])),
        provolatile = orThrow(c.get("provolatile")(Decoder[String])),
        proparallel = orThrow(c.get("proparallel")(Decoder[String])),
        pronargs = orThrow(c.get("pronargs")(Decoder[Int])),
        pronargdefaults = orThrow(c.get("pronargdefaults")(Decoder[Int])),
        prorettype = orThrow(c.get("prorettype")(Decoder[/* oid */ Long])),
        proargtypes = orThrow(c.get("proargtypes")(Decoder[TypoOidVector])),
        proallargtypes = orThrow(c.get("proallargtypes")(Decoder[Option[Array[/* oid */ Long]]])),
        proargmodes = orThrow(c.get("proargmodes")(Decoder[Option[Array[String]]])),
        proargnames = orThrow(c.get("proargnames")(Decoder[Option[Array[String]]])),
        proargdefaults = orThrow(c.get("proargdefaults")(Decoder[Option[TypoPgNodeTree]])),
        protrftypes = orThrow(c.get("protrftypes")(Decoder[Option[Array[/* oid */ Long]]])),
        prosrc = orThrow(c.get("prosrc")(Decoder[String])),
        probin = orThrow(c.get("probin")(Decoder[Option[String]])),
        prosqlbody = orThrow(c.get("prosqlbody")(Decoder[Option[TypoPgNodeTree]])),
        proconfig = orThrow(c.get("proconfig")(Decoder[Option[Array[String]]])),
        proacl = orThrow(c.get("proacl")(Decoder[Option[Array[TypoAclItem]]]))
      )
    }
  )
  implicit val encoder: Encoder[PgProcRow] = Encoder[PgProcRow](row =>
    Json.obj(
      "oid" -> Encoder[PgProcId].apply(row.oid),
      "proname" -> Encoder[String].apply(row.proname),
      "pronamespace" -> Encoder[/* oid */ Long].apply(row.pronamespace),
      "proowner" -> Encoder[/* oid */ Long].apply(row.proowner),
      "prolang" -> Encoder[/* oid */ Long].apply(row.prolang),
      "procost" -> Encoder[Float].apply(row.procost),
      "prorows" -> Encoder[Float].apply(row.prorows),
      "provariadic" -> Encoder[/* oid */ Long].apply(row.provariadic),
      "prosupport" -> Encoder[TypoRegproc].apply(row.prosupport),
      "prokind" -> Encoder[String].apply(row.prokind),
      "prosecdef" -> Encoder[Boolean].apply(row.prosecdef),
      "proleakproof" -> Encoder[Boolean].apply(row.proleakproof),
      "proisstrict" -> Encoder[Boolean].apply(row.proisstrict),
      "proretset" -> Encoder[Boolean].apply(row.proretset),
      "provolatile" -> Encoder[String].apply(row.provolatile),
      "proparallel" -> Encoder[String].apply(row.proparallel),
      "pronargs" -> Encoder[Int].apply(row.pronargs),
      "pronargdefaults" -> Encoder[Int].apply(row.pronargdefaults),
      "prorettype" -> Encoder[/* oid */ Long].apply(row.prorettype),
      "proargtypes" -> Encoder[TypoOidVector].apply(row.proargtypes),
      "proallargtypes" -> Encoder[Option[Array[/* oid */ Long]]].apply(row.proallargtypes),
      "proargmodes" -> Encoder[Option[Array[String]]].apply(row.proargmodes),
      "proargnames" -> Encoder[Option[Array[String]]].apply(row.proargnames),
      "proargdefaults" -> Encoder[Option[TypoPgNodeTree]].apply(row.proargdefaults),
      "protrftypes" -> Encoder[Option[Array[/* oid */ Long]]].apply(row.protrftypes),
      "prosrc" -> Encoder[String].apply(row.prosrc),
      "probin" -> Encoder[Option[String]].apply(row.probin),
      "prosqlbody" -> Encoder[Option[TypoPgNodeTree]].apply(row.prosqlbody),
      "proconfig" -> Encoder[Option[Array[String]]].apply(row.proconfig),
      "proacl" -> Encoder[Option[Array[TypoAclItem]]].apply(row.proacl)
    )
  )
  implicit val read: Read[PgProcRow] = new Read[PgProcRow](
    gets = List(
      (Get[PgProcId], Nullability.NoNulls),
      (Get[String], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[Float], Nullability.NoNulls),
      (Get[Float], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[TypoRegproc], Nullability.NoNulls),
      (Get[String], Nullability.NoNulls),
      (Get[Boolean], Nullability.NoNulls),
      (Get[Boolean], Nullability.NoNulls),
      (Get[Boolean], Nullability.NoNulls),
      (Get[Boolean], Nullability.NoNulls),
      (Get[String], Nullability.NoNulls),
      (Get[String], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[/* oid */ Long], Nullability.NoNulls),
      (Get[TypoOidVector], Nullability.NoNulls),
      (Get[Array[/* oid */ Long]], Nullability.Nullable),
      (Get[Array[String]], Nullability.Nullable),
      (Get[Array[String]], Nullability.Nullable),
      (Get[TypoPgNodeTree], Nullability.Nullable),
      (Get[Array[/* oid */ Long]], Nullability.Nullable),
      (Get[String], Nullability.NoNulls),
      (Get[String], Nullability.Nullable),
      (Get[TypoPgNodeTree], Nullability.Nullable),
      (Get[Array[String]], Nullability.Nullable),
      (Get[Array[TypoAclItem]], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgProcRow(
      oid = Get[PgProcId].unsafeGetNonNullable(rs, i + 0),
      proname = Get[String].unsafeGetNonNullable(rs, i + 1),
      pronamespace = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
      proowner = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 3),
      prolang = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 4),
      procost = Get[Float].unsafeGetNonNullable(rs, i + 5),
      prorows = Get[Float].unsafeGetNonNullable(rs, i + 6),
      provariadic = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 7),
      prosupport = Get[TypoRegproc].unsafeGetNonNullable(rs, i + 8),
      prokind = Get[String].unsafeGetNonNullable(rs, i + 9),
      prosecdef = Get[Boolean].unsafeGetNonNullable(rs, i + 10),
      proleakproof = Get[Boolean].unsafeGetNonNullable(rs, i + 11),
      proisstrict = Get[Boolean].unsafeGetNonNullable(rs, i + 12),
      proretset = Get[Boolean].unsafeGetNonNullable(rs, i + 13),
      provolatile = Get[String].unsafeGetNonNullable(rs, i + 14),
      proparallel = Get[String].unsafeGetNonNullable(rs, i + 15),
      pronargs = Get[Int].unsafeGetNonNullable(rs, i + 16),
      pronargdefaults = Get[Int].unsafeGetNonNullable(rs, i + 17),
      prorettype = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 18),
      proargtypes = Get[TypoOidVector].unsafeGetNonNullable(rs, i + 19),
      proallargtypes = Get[Array[/* oid */ Long]].unsafeGetNullable(rs, i + 20),
      proargmodes = Get[Array[String]].unsafeGetNullable(rs, i + 21),
      proargnames = Get[Array[String]].unsafeGetNullable(rs, i + 22),
      proargdefaults = Get[TypoPgNodeTree].unsafeGetNullable(rs, i + 23),
      protrftypes = Get[Array[/* oid */ Long]].unsafeGetNullable(rs, i + 24),
      prosrc = Get[String].unsafeGetNonNullable(rs, i + 25),
      probin = Get[String].unsafeGetNullable(rs, i + 26),
      prosqlbody = Get[TypoPgNodeTree].unsafeGetNullable(rs, i + 27),
      proconfig = Get[Array[String]].unsafeGetNullable(rs, i + 28),
      proacl = Get[Array[TypoAclItem]].unsafeGetNullable(rs, i + 29)
    )
  )
}
