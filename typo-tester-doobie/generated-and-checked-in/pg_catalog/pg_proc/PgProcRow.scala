/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_proc

import adventureworks.TypoAclItem
import adventureworks.TypoOidVector
import adventureworks.TypoPgNodeTree
import adventureworks.TypoRegproc
import doobie.enumerated.Nullability
import doobie.util.Read
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import scala.util.Try

case class PgProcRow(
  oid: PgProcId,
  proname: String,
  pronamespace: /* oid */ Long,
  proowner: /* oid */ Long,
  prolang: /* oid */ Long,
  procost: Float,
  prorows: Float,
  provariadic: /* oid */ Long,
  prosupport: TypoRegproc,
  prokind: String,
  prosecdef: Boolean,
  proleakproof: Boolean,
  proisstrict: Boolean,
  proretset: Boolean,
  provolatile: String,
  proparallel: String,
  pronargs: Int,
  pronargdefaults: Int,
  prorettype: /* oid */ Long,
  proargtypes: TypoOidVector,
  proallargtypes: Option[Array[/* oid */ Long]],
  proargmodes: Option[Array[String]],
  proargnames: Option[Array[String]],
  proargdefaults: Option[TypoPgNodeTree],
  protrftypes: Option[Array[/* oid */ Long]],
  prosrc: String,
  probin: Option[String],
  prosqlbody: Option[TypoPgNodeTree],
  proconfig: Option[Array[String]],
  proacl: Option[Array[TypoAclItem]]
)

object PgProcRow {
  implicit val decoder: Decoder[PgProcRow] = Decoder.instanceTry[PgProcRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      PgProcRow(
        oid = orThrow(c.get("oid")(PgProcId.decoder)),
        proname = orThrow(c.get("proname")(Decoder.decodeString)),
        pronamespace = orThrow(c.get("pronamespace")(Decoder.decodeLong)),
        proowner = orThrow(c.get("proowner")(Decoder.decodeLong)),
        prolang = orThrow(c.get("prolang")(Decoder.decodeLong)),
        procost = orThrow(c.get("procost")(Decoder.decodeFloat)),
        prorows = orThrow(c.get("prorows")(Decoder.decodeFloat)),
        provariadic = orThrow(c.get("provariadic")(Decoder.decodeLong)),
        prosupport = orThrow(c.get("prosupport")(TypoRegproc.decoder)),
        prokind = orThrow(c.get("prokind")(Decoder.decodeString)),
        prosecdef = orThrow(c.get("prosecdef")(Decoder.decodeBoolean)),
        proleakproof = orThrow(c.get("proleakproof")(Decoder.decodeBoolean)),
        proisstrict = orThrow(c.get("proisstrict")(Decoder.decodeBoolean)),
        proretset = orThrow(c.get("proretset")(Decoder.decodeBoolean)),
        provolatile = orThrow(c.get("provolatile")(Decoder.decodeString)),
        proparallel = orThrow(c.get("proparallel")(Decoder.decodeString)),
        pronargs = orThrow(c.get("pronargs")(Decoder.decodeInt)),
        pronargdefaults = orThrow(c.get("pronargdefaults")(Decoder.decodeInt)),
        prorettype = orThrow(c.get("prorettype")(Decoder.decodeLong)),
        proargtypes = orThrow(c.get("proargtypes")(TypoOidVector.decoder)),
        proallargtypes = orThrow(c.get("proallargtypes")(Decoder.decodeOption(Decoder.decodeArray[Long](Decoder.decodeLong, implicitly)))),
        proargmodes = orThrow(c.get("proargmodes")(Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)))),
        proargnames = orThrow(c.get("proargnames")(Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)))),
        proargdefaults = orThrow(c.get("proargdefaults")(Decoder.decodeOption(TypoPgNodeTree.decoder))),
        protrftypes = orThrow(c.get("protrftypes")(Decoder.decodeOption(Decoder.decodeArray[Long](Decoder.decodeLong, implicitly)))),
        prosrc = orThrow(c.get("prosrc")(Decoder.decodeString)),
        probin = orThrow(c.get("probin")(Decoder.decodeOption(Decoder.decodeString))),
        prosqlbody = orThrow(c.get("prosqlbody")(Decoder.decodeOption(TypoPgNodeTree.decoder))),
        proconfig = orThrow(c.get("proconfig")(Decoder.decodeOption(Decoder.decodeArray[String](Decoder.decodeString, implicitly)))),
        proacl = orThrow(c.get("proacl")(Decoder.decodeOption(Decoder.decodeArray[TypoAclItem](TypoAclItem.decoder, implicitly))))
      )
    }
  )
  implicit val encoder: Encoder[PgProcRow] = Encoder[PgProcRow](row =>
    Json.obj(
      "oid" -> PgProcId.encoder.apply(row.oid),
      "proname" -> Encoder.encodeString.apply(row.proname),
      "pronamespace" -> Encoder.encodeLong.apply(row.pronamespace),
      "proowner" -> Encoder.encodeLong.apply(row.proowner),
      "prolang" -> Encoder.encodeLong.apply(row.prolang),
      "procost" -> Encoder.encodeFloat.apply(row.procost),
      "prorows" -> Encoder.encodeFloat.apply(row.prorows),
      "provariadic" -> Encoder.encodeLong.apply(row.provariadic),
      "prosupport" -> TypoRegproc.encoder.apply(row.prosupport),
      "prokind" -> Encoder.encodeString.apply(row.prokind),
      "prosecdef" -> Encoder.encodeBoolean.apply(row.prosecdef),
      "proleakproof" -> Encoder.encodeBoolean.apply(row.proleakproof),
      "proisstrict" -> Encoder.encodeBoolean.apply(row.proisstrict),
      "proretset" -> Encoder.encodeBoolean.apply(row.proretset),
      "provolatile" -> Encoder.encodeString.apply(row.provolatile),
      "proparallel" -> Encoder.encodeString.apply(row.proparallel),
      "pronargs" -> Encoder.encodeInt.apply(row.pronargs),
      "pronargdefaults" -> Encoder.encodeInt.apply(row.pronargdefaults),
      "prorettype" -> Encoder.encodeLong.apply(row.prorettype),
      "proargtypes" -> TypoOidVector.encoder.apply(row.proargtypes),
      "proallargtypes" -> Encoder.encodeOption(Encoder.encodeIterable[Long, Array](Encoder.encodeLong, implicitly)).apply(row.proallargtypes),
      "proargmodes" -> Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)).apply(row.proargmodes),
      "proargnames" -> Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)).apply(row.proargnames),
      "proargdefaults" -> Encoder.encodeOption(TypoPgNodeTree.encoder).apply(row.proargdefaults),
      "protrftypes" -> Encoder.encodeOption(Encoder.encodeIterable[Long, Array](Encoder.encodeLong, implicitly)).apply(row.protrftypes),
      "prosrc" -> Encoder.encodeString.apply(row.prosrc),
      "probin" -> Encoder.encodeOption(Encoder.encodeString).apply(row.probin),
      "prosqlbody" -> Encoder.encodeOption(TypoPgNodeTree.encoder).apply(row.prosqlbody),
      "proconfig" -> Encoder.encodeOption(Encoder.encodeIterable[String, Array](Encoder.encodeString, implicitly)).apply(row.proconfig),
      "proacl" -> Encoder.encodeOption(Encoder.encodeIterable[TypoAclItem, Array](TypoAclItem.encoder, implicitly)).apply(row.proacl)
    )
  )
  implicit val read: Read[PgProcRow] = new Read[PgProcRow](
    gets = List(
      (PgProcId.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (Meta.FloatMeta.get, Nullability.NoNulls),
      (Meta.FloatMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (TypoRegproc.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.BooleanMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (Meta.IntMeta.get, Nullability.NoNulls),
      (Meta.LongMeta.get, Nullability.NoNulls),
      (TypoOidVector.get, Nullability.NoNulls),
      (adventureworks.LongArrayMeta.get, Nullability.Nullable),
      (adventureworks.StringArrayMeta.get, Nullability.Nullable),
      (adventureworks.StringArrayMeta.get, Nullability.Nullable),
      (TypoPgNodeTree.get, Nullability.Nullable),
      (adventureworks.LongArrayMeta.get, Nullability.Nullable),
      (Meta.StringMeta.get, Nullability.NoNulls),
      (Meta.StringMeta.get, Nullability.Nullable),
      (TypoPgNodeTree.get, Nullability.Nullable),
      (adventureworks.StringArrayMeta.get, Nullability.Nullable),
      (TypoAclItem.arrayGet, Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgProcRow(
      oid = PgProcId.get.unsafeGetNonNullable(rs, i + 0),
      proname = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 1),
      pronamespace = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 2),
      proowner = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 3),
      prolang = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 4),
      procost = Meta.FloatMeta.get.unsafeGetNonNullable(rs, i + 5),
      prorows = Meta.FloatMeta.get.unsafeGetNonNullable(rs, i + 6),
      provariadic = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 7),
      prosupport = TypoRegproc.get.unsafeGetNonNullable(rs, i + 8),
      prokind = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 9),
      prosecdef = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 10),
      proleakproof = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 11),
      proisstrict = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 12),
      proretset = Meta.BooleanMeta.get.unsafeGetNonNullable(rs, i + 13),
      provolatile = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 14),
      proparallel = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 15),
      pronargs = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 16),
      pronargdefaults = Meta.IntMeta.get.unsafeGetNonNullable(rs, i + 17),
      prorettype = Meta.LongMeta.get.unsafeGetNonNullable(rs, i + 18),
      proargtypes = TypoOidVector.get.unsafeGetNonNullable(rs, i + 19),
      proallargtypes = adventureworks.LongArrayMeta.get.unsafeGetNullable(rs, i + 20),
      proargmodes = adventureworks.StringArrayMeta.get.unsafeGetNullable(rs, i + 21),
      proargnames = adventureworks.StringArrayMeta.get.unsafeGetNullable(rs, i + 22),
      proargdefaults = TypoPgNodeTree.get.unsafeGetNullable(rs, i + 23),
      protrftypes = adventureworks.LongArrayMeta.get.unsafeGetNullable(rs, i + 24),
      prosrc = Meta.StringMeta.get.unsafeGetNonNullable(rs, i + 25),
      probin = Meta.StringMeta.get.unsafeGetNullable(rs, i + 26),
      prosqlbody = TypoPgNodeTree.get.unsafeGetNullable(rs, i + 27),
      proconfig = adventureworks.StringArrayMeta.get.unsafeGetNullable(rs, i + 28),
      proacl = TypoAclItem.arrayGet.unsafeGetNullable(rs, i + 29)
    )
  )
}
