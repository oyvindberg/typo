/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_proc

import adventureworks.TypoAclItem
import adventureworks.TypoOidVector
import adventureworks.TypoPgNodeTree
import adventureworks.TypoRegproc
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgProcRow(
  oid: PgProcId,
  proname: String,
  pronamespace: /* oid */ Long,
  proowner: /* oid */ Long,
  prolang: /* oid */ Long,
  procost: Float,
  prorows: Float,
  provariadic: /* oid */ Long,
  prosupport: TypoRegproc,
  prokind: String,
  prosecdef: Boolean,
  proleakproof: Boolean,
  proisstrict: Boolean,
  proretset: Boolean,
  provolatile: String,
  proparallel: String,
  pronargs: Int,
  pronargdefaults: Int,
  prorettype: /* oid */ Long,
  proargtypes: TypoOidVector,
  proallargtypes: Option[Array[/* oid */ Long]],
  proargmodes: Option[Array[String]],
  proargnames: Option[Array[String]],
  proargdefaults: Option[TypoPgNodeTree],
  protrftypes: Option[Array[/* oid */ Long]],
  prosrc: String,
  probin: Option[String],
  prosqlbody: Option[TypoPgNodeTree],
  proconfig: Option[Array[String]],
  proacl: Option[Array[TypoAclItem]]
)

object PgProcRow {
  implicit val decoder: Decoder[PgProcRow] =
    (c: HCursor) =>
      for {
        oid <- c.downField("oid").as[PgProcId]
        proname <- c.downField("proname").as[String]
        pronamespace <- c.downField("pronamespace").as[/* oid */ Long]
        proowner <- c.downField("proowner").as[/* oid */ Long]
        prolang <- c.downField("prolang").as[/* oid */ Long]
        procost <- c.downField("procost").as[Float]
        prorows <- c.downField("prorows").as[Float]
        provariadic <- c.downField("provariadic").as[/* oid */ Long]
        prosupport <- c.downField("prosupport").as[TypoRegproc]
        prokind <- c.downField("prokind").as[String]
        prosecdef <- c.downField("prosecdef").as[Boolean]
        proleakproof <- c.downField("proleakproof").as[Boolean]
        proisstrict <- c.downField("proisstrict").as[Boolean]
        proretset <- c.downField("proretset").as[Boolean]
        provolatile <- c.downField("provolatile").as[String]
        proparallel <- c.downField("proparallel").as[String]
        pronargs <- c.downField("pronargs").as[Int]
        pronargdefaults <- c.downField("pronargdefaults").as[Int]
        prorettype <- c.downField("prorettype").as[/* oid */ Long]
        proargtypes <- c.downField("proargtypes").as[TypoOidVector]
        proallargtypes <- c.downField("proallargtypes").as[Option[Array[/* oid */ Long]]]
        proargmodes <- c.downField("proargmodes").as[Option[Array[String]]]
        proargnames <- c.downField("proargnames").as[Option[Array[String]]]
        proargdefaults <- c.downField("proargdefaults").as[Option[TypoPgNodeTree]]
        protrftypes <- c.downField("protrftypes").as[Option[Array[/* oid */ Long]]]
        prosrc <- c.downField("prosrc").as[String]
        probin <- c.downField("probin").as[Option[String]]
        prosqlbody <- c.downField("prosqlbody").as[Option[TypoPgNodeTree]]
        proconfig <- c.downField("proconfig").as[Option[Array[String]]]
        proacl <- c.downField("proacl").as[Option[Array[TypoAclItem]]]
      } yield PgProcRow(oid, proname, pronamespace, proowner, prolang, procost, prorows, provariadic, prosupport, prokind, prosecdef, proleakproof, proisstrict, proretset, provolatile, proparallel, pronargs, pronargdefaults, prorettype, proargtypes, proallargtypes, proargmodes, proargnames, proargdefaults, protrftypes, prosrc, probin, prosqlbody, proconfig, proacl)
  implicit val encoder: Encoder[PgProcRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "oid" := row.oid,
        "proname" := row.proname,
        "pronamespace" := row.pronamespace,
        "proowner" := row.proowner,
        "prolang" := row.prolang,
        "procost" := row.procost,
        "prorows" := row.prorows,
        "provariadic" := row.provariadic,
        "prosupport" := row.prosupport,
        "prokind" := row.prokind,
        "prosecdef" := row.prosecdef,
        "proleakproof" := row.proleakproof,
        "proisstrict" := row.proisstrict,
        "proretset" := row.proretset,
        "provolatile" := row.provolatile,
        "proparallel" := row.proparallel,
        "pronargs" := row.pronargs,
        "pronargdefaults" := row.pronargdefaults,
        "prorettype" := row.prorettype,
        "proargtypes" := row.proargtypes,
        "proallargtypes" := row.proallargtypes,
        "proargmodes" := row.proargmodes,
        "proargnames" := row.proargnames,
        "proargdefaults" := row.proargdefaults,
        "protrftypes" := row.protrftypes,
        "prosrc" := row.prosrc,
        "probin" := row.probin,
        "prosqlbody" := row.prosqlbody,
        "proconfig" := row.proconfig,
        "proacl" := row.proacl
      )}
  implicit val read: Read[PgProcRow] =
    new Read[PgProcRow](
      gets = List(
        (Get[PgProcId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[Float], Nullability.NoNulls),
        (Get[Float], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[TypoRegproc], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[TypoOidVector], Nullability.NoNulls),
        (Get[Array[/* oid */ Long]], Nullability.Nullable),
        (Get[Array[String]], Nullability.Nullable),
        (Get[Array[String]], Nullability.Nullable),
        (Get[TypoPgNodeTree], Nullability.Nullable),
        (Get[Array[/* oid */ Long]], Nullability.Nullable),
        (Get[String], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[TypoPgNodeTree], Nullability.Nullable),
        (Get[Array[String]], Nullability.Nullable),
        (Get[Array[TypoAclItem]], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgProcRow(
        oid = Get[PgProcId].unsafeGetNonNullable(rs, i + 0),
        proname = Get[String].unsafeGetNonNullable(rs, i + 1),
        pronamespace = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
        proowner = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 3),
        prolang = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 4),
        procost = Get[Float].unsafeGetNonNullable(rs, i + 5),
        prorows = Get[Float].unsafeGetNonNullable(rs, i + 6),
        provariadic = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 7),
        prosupport = Get[TypoRegproc].unsafeGetNonNullable(rs, i + 8),
        prokind = Get[String].unsafeGetNonNullable(rs, i + 9),
        prosecdef = Get[Boolean].unsafeGetNonNullable(rs, i + 10),
        proleakproof = Get[Boolean].unsafeGetNonNullable(rs, i + 11),
        proisstrict = Get[Boolean].unsafeGetNonNullable(rs, i + 12),
        proretset = Get[Boolean].unsafeGetNonNullable(rs, i + 13),
        provolatile = Get[String].unsafeGetNonNullable(rs, i + 14),
        proparallel = Get[String].unsafeGetNonNullable(rs, i + 15),
        pronargs = Get[Int].unsafeGetNonNullable(rs, i + 16),
        pronargdefaults = Get[Int].unsafeGetNonNullable(rs, i + 17),
        prorettype = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 18),
        proargtypes = Get[TypoOidVector].unsafeGetNonNullable(rs, i + 19),
        proallargtypes = Get[Array[/* oid */ Long]].unsafeGetNullable(rs, i + 20),
        proargmodes = Get[Array[String]].unsafeGetNullable(rs, i + 21),
        proargnames = Get[Array[String]].unsafeGetNullable(rs, i + 22),
        proargdefaults = Get[TypoPgNodeTree].unsafeGetNullable(rs, i + 23),
        protrftypes = Get[Array[/* oid */ Long]].unsafeGetNullable(rs, i + 24),
        prosrc = Get[String].unsafeGetNonNullable(rs, i + 25),
        probin = Get[String].unsafeGetNullable(rs, i + 26),
        prosqlbody = Get[TypoPgNodeTree].unsafeGetNullable(rs, i + 27),
        proconfig = Get[Array[String]].unsafeGetNullable(rs, i + 28),
        proacl = Get[Array[TypoAclItem]].unsafeGetNullable(rs, i + 29)
      )
    )
  

}
