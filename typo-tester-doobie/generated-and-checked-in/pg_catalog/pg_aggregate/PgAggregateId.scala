/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_aggregate

import adventureworks.TypoRegproc
import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Type for the primary key of table `pg_catalog.pg_aggregate` */
case class PgAggregateId(value: TypoRegproc) extends AnyVal
object PgAggregateId {
  implicit def ordering(implicit O0: Ordering[TypoRegproc]): Ordering[PgAggregateId] = Ordering.by(_.value)
  implicit val encoder: Encoder[PgAggregateId] =
    Encoder[TypoRegproc].contramap(_.value)
  implicit val decoder: Decoder[PgAggregateId] =
    Decoder[TypoRegproc].map(PgAggregateId(_))
  implicit val meta: Meta[PgAggregateId] = Meta[TypoRegproc].imap(PgAggregateId.apply)(_.value)
  implicit val metaArray: Meta[Array[PgAggregateId]] = Meta[Array[TypoRegproc]].imap(_.map(PgAggregateId.apply))(_.map(_.value))
}
