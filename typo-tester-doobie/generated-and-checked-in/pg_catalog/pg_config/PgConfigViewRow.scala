/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_config

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgConfigViewRow(
  name: Option[String],
  setting: Option[String]
)

object PgConfigViewRow {
  implicit val decoder: Decoder[PgConfigViewRow] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Option[String]]
        setting <- c.downField("setting").as[Option[String]]
      } yield PgConfigViewRow(name, setting)
  implicit val encoder: Encoder[PgConfigViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "setting" := row.setting
      )}
  implicit val read: Read[PgConfigViewRow] =
    new Read[PgConfigViewRow](
      gets = List(
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgConfigViewRow(
        name = Get[String].unsafeGetNullable(rs, i + 0),
        setting = Get[String].unsafeGetNullable(rs, i + 1)
      )
    )
  

}
