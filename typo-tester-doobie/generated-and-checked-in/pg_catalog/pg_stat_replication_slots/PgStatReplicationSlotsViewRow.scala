/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_replication_slots

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.OffsetDateTime

case class PgStatReplicationSlotsViewRow(
  /** Points to [[pg_replication_slots.PgReplicationSlotsViewRow.slotName]] */
  slotName: Option[String],
  spillTxns: Option[Long],
  spillCount: Option[Long],
  spillBytes: Option[Long],
  streamTxns: Option[Long],
  streamCount: Option[Long],
  streamBytes: Option[Long],
  totalTxns: Option[Long],
  totalBytes: Option[Long],
  statsReset: Option[OffsetDateTime]
)

object PgStatReplicationSlotsViewRow {
  implicit val decoder: Decoder[PgStatReplicationSlotsViewRow] =
    (c: HCursor) =>
      for {
        slotName <- c.downField("slot_name").as[Option[String]]
        spillTxns <- c.downField("spill_txns").as[Option[Long]]
        spillCount <- c.downField("spill_count").as[Option[Long]]
        spillBytes <- c.downField("spill_bytes").as[Option[Long]]
        streamTxns <- c.downField("stream_txns").as[Option[Long]]
        streamCount <- c.downField("stream_count").as[Option[Long]]
        streamBytes <- c.downField("stream_bytes").as[Option[Long]]
        totalTxns <- c.downField("total_txns").as[Option[Long]]
        totalBytes <- c.downField("total_bytes").as[Option[Long]]
        statsReset <- c.downField("stats_reset").as[Option[OffsetDateTime]]
      } yield PgStatReplicationSlotsViewRow(slotName, spillTxns, spillCount, spillBytes, streamTxns, streamCount, streamBytes, totalTxns, totalBytes, statsReset)
  implicit val encoder: Encoder[PgStatReplicationSlotsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "slot_name" := row.slotName,
        "spill_txns" := row.spillTxns,
        "spill_count" := row.spillCount,
        "spill_bytes" := row.spillBytes,
        "stream_txns" := row.streamTxns,
        "stream_count" := row.streamCount,
        "stream_bytes" := row.streamBytes,
        "total_txns" := row.totalTxns,
        "total_bytes" := row.totalBytes,
        "stats_reset" := row.statsReset
      )}
  implicit val read: Read[PgStatReplicationSlotsViewRow] =
    new Read[PgStatReplicationSlotsViewRow](
      gets = List(
        (Get[String], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[Long], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgStatReplicationSlotsViewRow(
        slotName = Get[String].unsafeGetNullable(rs, i + 0),
        spillTxns = Get[Long].unsafeGetNullable(rs, i + 1),
        spillCount = Get[Long].unsafeGetNullable(rs, i + 2),
        spillBytes = Get[Long].unsafeGetNullable(rs, i + 3),
        streamTxns = Get[Long].unsafeGetNullable(rs, i + 4),
        streamCount = Get[Long].unsafeGetNullable(rs, i + 5),
        streamBytes = Get[Long].unsafeGetNullable(rs, i + 6),
        totalTxns = Get[Long].unsafeGetNullable(rs, i + 7),
        totalBytes = Get[Long].unsafeGetNullable(rs, i + 8),
        statsReset = Get[OffsetDateTime].unsafeGetNullable(rs, i + 9)
      )
    )
  

}
