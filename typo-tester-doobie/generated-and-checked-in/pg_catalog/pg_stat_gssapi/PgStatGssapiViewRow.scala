/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_gssapi

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgStatGssapiViewRow(
  pid: Option[Int],
  gssAuthenticated: Option[Boolean],
  principal: Option[String],
  encrypted: Option[Boolean]
)

object PgStatGssapiViewRow {
  implicit val decoder: Decoder[PgStatGssapiViewRow] =
    (c: HCursor) =>
      for {
        pid <- c.downField("pid").as[Option[Int]]
        gssAuthenticated <- c.downField("gss_authenticated").as[Option[Boolean]]
        principal <- c.downField("principal").as[Option[String]]
        encrypted <- c.downField("encrypted").as[Option[Boolean]]
      } yield PgStatGssapiViewRow(pid, gssAuthenticated, principal, encrypted)
  implicit val encoder: Encoder[PgStatGssapiViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "pid" := row.pid,
        "gss_authenticated" := row.gssAuthenticated,
        "principal" := row.principal,
        "encrypted" := row.encrypted
      )}
  implicit val read: Read[PgStatGssapiViewRow] =
    new Read[PgStatGssapiViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Boolean], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgStatGssapiViewRow(
        pid = Get[Int].unsafeGetNullable(rs, i + 0),
        gssAuthenticated = Get[Boolean].unsafeGetNullable(rs, i + 1),
        principal = Get[String].unsafeGetNullable(rs, i + 2),
        encrypted = Get[Boolean].unsafeGetNullable(rs, i + 3)
      )
    )
  

}
