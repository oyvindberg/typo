/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_group

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgGroupViewRow(
  groname: Option[String],
  grosysid: Option[/* oid */ Long],
  grolist: Option[Array[/* oid */ Long]]
)

object PgGroupViewRow {
  implicit val decoder: Decoder[PgGroupViewRow] =
    (c: HCursor) =>
      for {
        groname <- c.downField("groname").as[Option[String]]
        grosysid <- c.downField("grosysid").as[Option[/* oid */ Long]]
        grolist <- c.downField("grolist").as[Option[Array[/* oid */ Long]]]
      } yield PgGroupViewRow(groname, grosysid, grolist)
  implicit val encoder: Encoder[PgGroupViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "groname" := row.groname,
        "grosysid" := row.grosysid,
        "grolist" := row.grolist
      )}
  implicit val read: Read[PgGroupViewRow] =
    new Read[PgGroupViewRow](
      gets = List(
        (Get[String], Nullability.Nullable),
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[Array[/* oid */ Long]], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgGroupViewRow(
        groname = Get[String].unsafeGetNullable(rs, i + 0),
        grosysid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 1),
        grolist = Get[Array[/* oid */ Long]].unsafeGetNullable(rs, i + 2)
      )
    )
  

}
