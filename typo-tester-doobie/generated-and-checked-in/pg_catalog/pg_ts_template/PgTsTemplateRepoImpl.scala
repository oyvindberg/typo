/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_template

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgTsTemplateRepoImpl extends PgTsTemplateRepo {
  override def delete(oid: PgTsTemplateId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_ts_template where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgTsTemplateRow): ConnectionIO[PgTsTemplateRow] = {
    sql"""insert into pg_catalog.pg_ts_template(oid, tmplname, tmplnamespace, tmplinit, tmpllexize)
          values (${unsaved.oid}::oid, ${unsaved.tmplname}::name, ${unsaved.tmplnamespace}::oid, ${unsaved.tmplinit}::regproc, ${unsaved.tmpllexize}::regproc)
          returning oid, tmplname, tmplnamespace, tmplinit, tmpllexize
       """.query[PgTsTemplateRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgTsTemplateRow] = {
    sql"select oid, tmplname, tmplnamespace, tmplinit, tmpllexize from pg_catalog.pg_ts_template".query[PgTsTemplateRow].stream
  }
  override def selectById(oid: PgTsTemplateId): ConnectionIO[Option[PgTsTemplateRow]] = {
    sql"select oid, tmplname, tmplnamespace, tmplinit, tmpllexize from pg_catalog.pg_ts_template where oid = ${oid}".query[PgTsTemplateRow].option
  }
  override def selectByIds(oids: Array[PgTsTemplateId]): Stream[ConnectionIO, PgTsTemplateRow] = {
    sql"select oid, tmplname, tmplnamespace, tmplinit, tmpllexize from pg_catalog.pg_ts_template where oid = ANY(${oids})".query[PgTsTemplateRow].stream
  }
  override def update(row: PgTsTemplateRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_ts_template
          set tmplname = ${row.tmplname}::name,
              tmplnamespace = ${row.tmplnamespace}::oid,
              tmplinit = ${row.tmplinit}::regproc,
              tmpllexize = ${row.tmpllexize}::regproc
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgTsTemplateRow): ConnectionIO[PgTsTemplateRow] = {
    sql"""insert into pg_catalog.pg_ts_template(oid, tmplname, tmplnamespace, tmplinit, tmpllexize)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.tmplname}::name,
            ${unsaved.tmplnamespace}::oid,
            ${unsaved.tmplinit}::regproc,
            ${unsaved.tmpllexize}::regproc
          )
          on conflict (oid)
          do update set
            tmplname = EXCLUDED.tmplname,
            tmplnamespace = EXCLUDED.tmplnamespace,
            tmplinit = EXCLUDED.tmplinit,
            tmpllexize = EXCLUDED.tmpllexize
          returning oid, tmplname, tmplnamespace, tmplinit, tmpllexize
       """.query[PgTsTemplateRow].unique
  }
}
