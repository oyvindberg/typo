/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_ts_template

import adventureworks.TypoRegproc
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgTsTemplateRow(
  oid: PgTsTemplateId,
  tmplname: String,
  tmplnamespace: /* oid */ Long,
  tmplinit: TypoRegproc,
  tmpllexize: TypoRegproc
)

object PgTsTemplateRow {
  implicit val decoder: Decoder[PgTsTemplateRow] =
    (c: HCursor) =>
      for {
        oid <- c.downField("oid").as[PgTsTemplateId]
        tmplname <- c.downField("tmplname").as[String]
        tmplnamespace <- c.downField("tmplnamespace").as[/* oid */ Long]
        tmplinit <- c.downField("tmplinit").as[TypoRegproc]
        tmpllexize <- c.downField("tmpllexize").as[TypoRegproc]
      } yield PgTsTemplateRow(oid, tmplname, tmplnamespace, tmplinit, tmpllexize)
  implicit val encoder: Encoder[PgTsTemplateRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "oid" := row.oid,
        "tmplname" := row.tmplname,
        "tmplnamespace" := row.tmplnamespace,
        "tmplinit" := row.tmplinit,
        "tmpllexize" := row.tmpllexize
      )}
  implicit val read: Read[PgTsTemplateRow] =
    new Read[PgTsTemplateRow](
      gets = List(
        (Get[PgTsTemplateId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[TypoRegproc], Nullability.NoNulls),
        (Get[TypoRegproc], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgTsTemplateRow(
        oid = Get[PgTsTemplateId].unsafeGetNonNullable(rs, i + 0),
        tmplname = Get[String].unsafeGetNonNullable(rs, i + 1),
        tmplnamespace = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 2),
        tmplinit = Get[TypoRegproc].unsafeGetNonNullable(rs, i + 3),
        tmpllexize = Get[TypoRegproc].unsafeGetNonNullable(rs, i + 4)
      )
    )
  

}
