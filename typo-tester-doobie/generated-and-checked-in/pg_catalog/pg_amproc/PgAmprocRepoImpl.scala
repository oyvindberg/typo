/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_amproc

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgAmprocRepoImpl extends PgAmprocRepo {
  override def delete(oid: PgAmprocId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_amproc where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgAmprocRow): ConnectionIO[PgAmprocRow] = {
    sql"""insert into pg_catalog.pg_amproc(oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc)
          values (${unsaved.oid}::oid, ${unsaved.amprocfamily}::oid, ${unsaved.amproclefttype}::oid, ${unsaved.amprocrighttype}::oid, ${unsaved.amprocnum}::int2, ${unsaved.amproc}::regproc)
          returning oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc
       """.query[PgAmprocRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgAmprocRow] = {
    sql"select oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc from pg_catalog.pg_amproc".query[PgAmprocRow].stream
  }
  override def selectById(oid: PgAmprocId): ConnectionIO[Option[PgAmprocRow]] = {
    sql"select oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc from pg_catalog.pg_amproc where oid = ${oid}".query[PgAmprocRow].option
  }
  override def selectByIds(oids: Array[PgAmprocId]): Stream[ConnectionIO, PgAmprocRow] = {
    sql"select oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc from pg_catalog.pg_amproc where oid = ANY(${oids})".query[PgAmprocRow].stream
  }
  override def update(row: PgAmprocRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_amproc
          set amprocfamily = ${row.amprocfamily}::oid,
              amproclefttype = ${row.amproclefttype}::oid,
              amprocrighttype = ${row.amprocrighttype}::oid,
              amprocnum = ${row.amprocnum}::int2,
              amproc = ${row.amproc}::regproc
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgAmprocRow): ConnectionIO[PgAmprocRow] = {
    sql"""insert into pg_catalog.pg_amproc(oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.amprocfamily}::oid,
            ${unsaved.amproclefttype}::oid,
            ${unsaved.amprocrighttype}::oid,
            ${unsaved.amprocnum}::int2,
            ${unsaved.amproc}::regproc
          )
          on conflict (oid)
          do update set
            amprocfamily = EXCLUDED.amprocfamily,
            amproclefttype = EXCLUDED.amproclefttype,
            amprocrighttype = EXCLUDED.amprocrighttype,
            amprocnum = EXCLUDED.amprocnum,
            amproc = EXCLUDED.amproc
          returning oid, amprocfamily, amproclefttype, amprocrighttype, amprocnum, amproc
       """.query[PgAmprocRow].unique
  }
}
