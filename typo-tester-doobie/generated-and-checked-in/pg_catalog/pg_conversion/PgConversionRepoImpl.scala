/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_conversion

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgConversionRepoImpl extends PgConversionRepo {
  override def delete(oid: PgConversionId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_conversion where oid = ${oid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgConversionRow): ConnectionIO[PgConversionRow] = {
    sql"""insert into pg_catalog.pg_conversion(oid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault)
          values (${unsaved.oid}::oid, ${unsaved.conname}::name, ${unsaved.connamespace}::oid, ${unsaved.conowner}::oid, ${unsaved.conforencoding}::int4, ${unsaved.contoencoding}::int4, ${unsaved.conproc}::regproc, ${unsaved.condefault})
          returning oid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault
       """.query(PgConversionRow.read).unique
  }
  override def selectAll: Stream[ConnectionIO, PgConversionRow] = {
    sql"select oid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault from pg_catalog.pg_conversion".query(PgConversionRow.read).stream
  }
  override def selectById(oid: PgConversionId): ConnectionIO[Option[PgConversionRow]] = {
    sql"select oid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault from pg_catalog.pg_conversion where oid = ${oid}".query(PgConversionRow.read).option
  }
  override def selectByIds(oids: Array[PgConversionId]): Stream[ConnectionIO, PgConversionRow] = {
    sql"select oid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault from pg_catalog.pg_conversion where oid = ANY(${oids})".query(PgConversionRow.read).stream
  }
  override def update(row: PgConversionRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_conversion
          set conname = ${row.conname}::name,
              connamespace = ${row.connamespace}::oid,
              conowner = ${row.conowner}::oid,
              conforencoding = ${row.conforencoding}::int4,
              contoencoding = ${row.contoencoding}::int4,
              conproc = ${row.conproc}::regproc,
              condefault = ${row.condefault}
          where oid = ${oid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgConversionRow): ConnectionIO[PgConversionRow] = {
    sql"""insert into pg_catalog.pg_conversion(oid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.conname}::name,
            ${unsaved.connamespace}::oid,
            ${unsaved.conowner}::oid,
            ${unsaved.conforencoding}::int4,
            ${unsaved.contoencoding}::int4,
            ${unsaved.conproc}::regproc,
            ${unsaved.condefault}
          )
          on conflict (oid)
          do update set
            conname = EXCLUDED.conname,
            connamespace = EXCLUDED.connamespace,
            conowner = EXCLUDED.conowner,
            conforencoding = EXCLUDED.conforencoding,
            contoencoding = EXCLUDED.contoencoding,
            conproc = EXCLUDED.conproc,
            condefault = EXCLUDED.condefault
          returning oid, conname, connamespace, conowner, conforencoding, contoencoding, conproc, condefault
       """.query(PgConversionRow.read).unique
  }
}
