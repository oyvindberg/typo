/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_replication

import adventureworks.TypoInet
import adventureworks.TypoInterval
import adventureworks.TypoXid
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.OffsetDateTime

case class PgStatReplicationViewRow(
  pid: Option[Int],
  usesysid: Option[/* oid */ Long],
  usename: Option[String],
  applicationName: Option[String],
  clientAddr: Option[TypoInet],
  clientHostname: Option[String],
  clientPort: Option[Int],
  backendStart: Option[OffsetDateTime],
  backendXmin: Option[TypoXid],
  state: Option[String],
  sentLsn: Option[/* pg_lsn */ Long],
  writeLsn: Option[/* pg_lsn */ Long],
  flushLsn: Option[/* pg_lsn */ Long],
  replayLsn: Option[/* pg_lsn */ Long],
  writeLag: Option[TypoInterval],
  flushLag: Option[TypoInterval],
  replayLag: Option[TypoInterval],
  syncPriority: Option[Int],
  syncState: Option[String],
  replyTime: Option[OffsetDateTime]
)

object PgStatReplicationViewRow {
  implicit val decoder: Decoder[PgStatReplicationViewRow] =
    (c: HCursor) =>
      for {
        pid <- c.downField("pid").as[Option[Int]]
        usesysid <- c.downField("usesysid").as[Option[/* oid */ Long]]
        usename <- c.downField("usename").as[Option[String]]
        applicationName <- c.downField("application_name").as[Option[String]]
        clientAddr <- c.downField("client_addr").as[Option[TypoInet]]
        clientHostname <- c.downField("client_hostname").as[Option[String]]
        clientPort <- c.downField("client_port").as[Option[Int]]
        backendStart <- c.downField("backend_start").as[Option[OffsetDateTime]]
        backendXmin <- c.downField("backend_xmin").as[Option[TypoXid]]
        state <- c.downField("state").as[Option[String]]
        sentLsn <- c.downField("sent_lsn").as[Option[/* pg_lsn */ Long]]
        writeLsn <- c.downField("write_lsn").as[Option[/* pg_lsn */ Long]]
        flushLsn <- c.downField("flush_lsn").as[Option[/* pg_lsn */ Long]]
        replayLsn <- c.downField("replay_lsn").as[Option[/* pg_lsn */ Long]]
        writeLag <- c.downField("write_lag").as[Option[TypoInterval]]
        flushLag <- c.downField("flush_lag").as[Option[TypoInterval]]
        replayLag <- c.downField("replay_lag").as[Option[TypoInterval]]
        syncPriority <- c.downField("sync_priority").as[Option[Int]]
        syncState <- c.downField("sync_state").as[Option[String]]
        replyTime <- c.downField("reply_time").as[Option[OffsetDateTime]]
      } yield PgStatReplicationViewRow(pid, usesysid, usename, applicationName, clientAddr, clientHostname, clientPort, backendStart, backendXmin, state, sentLsn, writeLsn, flushLsn, replayLsn, writeLag, flushLag, replayLag, syncPriority, syncState, replyTime)
  implicit val encoder: Encoder[PgStatReplicationViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "pid" := row.pid,
        "usesysid" := row.usesysid,
        "usename" := row.usename,
        "application_name" := row.applicationName,
        "client_addr" := row.clientAddr,
        "client_hostname" := row.clientHostname,
        "client_port" := row.clientPort,
        "backend_start" := row.backendStart,
        "backend_xmin" := row.backendXmin,
        "state" := row.state,
        "sent_lsn" := row.sentLsn,
        "write_lsn" := row.writeLsn,
        "flush_lsn" := row.flushLsn,
        "replay_lsn" := row.replayLsn,
        "write_lag" := row.writeLag,
        "flush_lag" := row.flushLag,
        "replay_lag" := row.replayLag,
        "sync_priority" := row.syncPriority,
        "sync_state" := row.syncState,
        "reply_time" := row.replyTime
      )}
  implicit val read: Read[PgStatReplicationViewRow] =
    new Read[PgStatReplicationViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[/* oid */ Long], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[TypoInet], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable),
        (Get[TypoXid], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[/* pg_lsn */ Long], Nullability.Nullable),
        (Get[/* pg_lsn */ Long], Nullability.Nullable),
        (Get[/* pg_lsn */ Long], Nullability.Nullable),
        (Get[/* pg_lsn */ Long], Nullability.Nullable),
        (Get[TypoInterval], Nullability.Nullable),
        (Get[TypoInterval], Nullability.Nullable),
        (Get[TypoInterval], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgStatReplicationViewRow(
        pid = Get[Int].unsafeGetNullable(rs, i + 0),
        usesysid = Get[/* oid */ Long].unsafeGetNullable(rs, i + 1),
        usename = Get[String].unsafeGetNullable(rs, i + 2),
        applicationName = Get[String].unsafeGetNullable(rs, i + 3),
        clientAddr = Get[TypoInet].unsafeGetNullable(rs, i + 4),
        clientHostname = Get[String].unsafeGetNullable(rs, i + 5),
        clientPort = Get[Int].unsafeGetNullable(rs, i + 6),
        backendStart = Get[OffsetDateTime].unsafeGetNullable(rs, i + 7),
        backendXmin = Get[TypoXid].unsafeGetNullable(rs, i + 8),
        state = Get[String].unsafeGetNullable(rs, i + 9),
        sentLsn = Get[/* pg_lsn */ Long].unsafeGetNullable(rs, i + 10),
        writeLsn = Get[/* pg_lsn */ Long].unsafeGetNullable(rs, i + 11),
        flushLsn = Get[/* pg_lsn */ Long].unsafeGetNullable(rs, i + 12),
        replayLsn = Get[/* pg_lsn */ Long].unsafeGetNullable(rs, i + 13),
        writeLag = Get[TypoInterval].unsafeGetNullable(rs, i + 14),
        flushLag = Get[TypoInterval].unsafeGetNullable(rs, i + 15),
        replayLag = Get[TypoInterval].unsafeGetNullable(rs, i + 16),
        syncPriority = Get[Int].unsafeGetNullable(rs, i + 17),
        syncState = Get[String].unsafeGetNullable(rs, i + 18),
        replyTime = Get[OffsetDateTime].unsafeGetNullable(rs, i + 19)
      )
    )
  

}
