/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_wal_receiver

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.OffsetDateTime

case class PgStatWalReceiverViewRow(
  pid: Option[Int],
  status: Option[String],
  receiveStartLsn: Option[/* pg_lsn */ Long],
  receiveStartTli: Option[Int],
  writtenLsn: Option[/* pg_lsn */ Long],
  flushedLsn: Option[/* pg_lsn */ Long],
  receivedTli: Option[Int],
  lastMsgSendTime: Option[OffsetDateTime],
  lastMsgReceiptTime: Option[OffsetDateTime],
  latestEndLsn: Option[/* pg_lsn */ Long],
  latestEndTime: Option[OffsetDateTime],
  slotName: Option[String],
  senderHost: Option[String],
  senderPort: Option[Int],
  conninfo: Option[String]
)

object PgStatWalReceiverViewRow {
  implicit val decoder: Decoder[PgStatWalReceiverViewRow] =
    (c: HCursor) =>
      for {
        pid <- c.downField("pid").as[Option[Int]]
        status <- c.downField("status").as[Option[String]]
        receiveStartLsn <- c.downField("receive_start_lsn").as[Option[/* pg_lsn */ Long]]
        receiveStartTli <- c.downField("receive_start_tli").as[Option[Int]]
        writtenLsn <- c.downField("written_lsn").as[Option[/* pg_lsn */ Long]]
        flushedLsn <- c.downField("flushed_lsn").as[Option[/* pg_lsn */ Long]]
        receivedTli <- c.downField("received_tli").as[Option[Int]]
        lastMsgSendTime <- c.downField("last_msg_send_time").as[Option[OffsetDateTime]]
        lastMsgReceiptTime <- c.downField("last_msg_receipt_time").as[Option[OffsetDateTime]]
        latestEndLsn <- c.downField("latest_end_lsn").as[Option[/* pg_lsn */ Long]]
        latestEndTime <- c.downField("latest_end_time").as[Option[OffsetDateTime]]
        slotName <- c.downField("slot_name").as[Option[String]]
        senderHost <- c.downField("sender_host").as[Option[String]]
        senderPort <- c.downField("sender_port").as[Option[Int]]
        conninfo <- c.downField("conninfo").as[Option[String]]
      } yield PgStatWalReceiverViewRow(pid, status, receiveStartLsn, receiveStartTli, writtenLsn, flushedLsn, receivedTli, lastMsgSendTime, lastMsgReceiptTime, latestEndLsn, latestEndTime, slotName, senderHost, senderPort, conninfo)
  implicit val encoder: Encoder[PgStatWalReceiverViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "pid" := row.pid,
        "status" := row.status,
        "receive_start_lsn" := row.receiveStartLsn,
        "receive_start_tli" := row.receiveStartTli,
        "written_lsn" := row.writtenLsn,
        "flushed_lsn" := row.flushedLsn,
        "received_tli" := row.receivedTli,
        "last_msg_send_time" := row.lastMsgSendTime,
        "last_msg_receipt_time" := row.lastMsgReceiptTime,
        "latest_end_lsn" := row.latestEndLsn,
        "latest_end_time" := row.latestEndTime,
        "slot_name" := row.slotName,
        "sender_host" := row.senderHost,
        "sender_port" := row.senderPort,
        "conninfo" := row.conninfo
      )}
  implicit val read: Read[PgStatWalReceiverViewRow] =
    new Read[PgStatWalReceiverViewRow](
      gets = List(
        (Get[Int], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[/* pg_lsn */ Long], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[/* pg_lsn */ Long], Nullability.Nullable),
        (Get[/* pg_lsn */ Long], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable),
        (Get[/* pg_lsn */ Long], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[Int], Nullability.Nullable),
        (Get[String], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgStatWalReceiverViewRow(
        pid = Get[Int].unsafeGetNullable(rs, i + 0),
        status = Get[String].unsafeGetNullable(rs, i + 1),
        receiveStartLsn = Get[/* pg_lsn */ Long].unsafeGetNullable(rs, i + 2),
        receiveStartTli = Get[Int].unsafeGetNullable(rs, i + 3),
        writtenLsn = Get[/* pg_lsn */ Long].unsafeGetNullable(rs, i + 4),
        flushedLsn = Get[/* pg_lsn */ Long].unsafeGetNullable(rs, i + 5),
        receivedTli = Get[Int].unsafeGetNullable(rs, i + 6),
        lastMsgSendTime = Get[OffsetDateTime].unsafeGetNullable(rs, i + 7),
        lastMsgReceiptTime = Get[OffsetDateTime].unsafeGetNullable(rs, i + 8),
        latestEndLsn = Get[/* pg_lsn */ Long].unsafeGetNullable(rs, i + 9),
        latestEndTime = Get[OffsetDateTime].unsafeGetNullable(rs, i + 10),
        slotName = Get[String].unsafeGetNullable(rs, i + 11),
        senderHost = Get[String].unsafeGetNullable(rs, i + 12),
        senderPort = Get[Int].unsafeGetNullable(rs, i + 13),
        conninfo = Get[String].unsafeGetNullable(rs, i + 14)
      )
    )
  

}
