/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_authid

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.time.OffsetDateTime

case class PgAuthidRow(
  oid: PgAuthidId,
  rolname: String,
  rolsuper: Boolean,
  rolinherit: Boolean,
  rolcreaterole: Boolean,
  rolcreatedb: Boolean,
  rolcanlogin: Boolean,
  rolreplication: Boolean,
  rolbypassrls: Boolean,
  rolconnlimit: Int,
  rolpassword: Option[String],
  rolvaliduntil: Option[OffsetDateTime]
)

object PgAuthidRow {
  implicit val decoder: Decoder[PgAuthidRow] =
    (c: HCursor) =>
      for {
        oid <- c.downField("oid").as[PgAuthidId]
        rolname <- c.downField("rolname").as[String]
        rolsuper <- c.downField("rolsuper").as[Boolean]
        rolinherit <- c.downField("rolinherit").as[Boolean]
        rolcreaterole <- c.downField("rolcreaterole").as[Boolean]
        rolcreatedb <- c.downField("rolcreatedb").as[Boolean]
        rolcanlogin <- c.downField("rolcanlogin").as[Boolean]
        rolreplication <- c.downField("rolreplication").as[Boolean]
        rolbypassrls <- c.downField("rolbypassrls").as[Boolean]
        rolconnlimit <- c.downField("rolconnlimit").as[Int]
        rolpassword <- c.downField("rolpassword").as[Option[String]]
        rolvaliduntil <- c.downField("rolvaliduntil").as[Option[OffsetDateTime]]
      } yield PgAuthidRow(oid, rolname, rolsuper, rolinherit, rolcreaterole, rolcreatedb, rolcanlogin, rolreplication, rolbypassrls, rolconnlimit, rolpassword, rolvaliduntil)
  implicit val encoder: Encoder[PgAuthidRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "oid" := row.oid,
        "rolname" := row.rolname,
        "rolsuper" := row.rolsuper,
        "rolinherit" := row.rolinherit,
        "rolcreaterole" := row.rolcreaterole,
        "rolcreatedb" := row.rolcreatedb,
        "rolcanlogin" := row.rolcanlogin,
        "rolreplication" := row.rolreplication,
        "rolbypassrls" := row.rolbypassrls,
        "rolconnlimit" := row.rolconnlimit,
        "rolpassword" := row.rolpassword,
        "rolvaliduntil" := row.rolvaliduntil
      )}
  implicit val read: Read[PgAuthidRow] =
    new Read[PgAuthidRow](
      gets = List(
        (Get[PgAuthidId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[OffsetDateTime], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgAuthidRow(
        oid = Get[PgAuthidId].unsafeGetNonNullable(rs, i + 0),
        rolname = Get[String].unsafeGetNonNullable(rs, i + 1),
        rolsuper = Get[Boolean].unsafeGetNonNullable(rs, i + 2),
        rolinherit = Get[Boolean].unsafeGetNonNullable(rs, i + 3),
        rolcreaterole = Get[Boolean].unsafeGetNonNullable(rs, i + 4),
        rolcreatedb = Get[Boolean].unsafeGetNonNullable(rs, i + 5),
        rolcanlogin = Get[Boolean].unsafeGetNonNullable(rs, i + 6),
        rolreplication = Get[Boolean].unsafeGetNonNullable(rs, i + 7),
        rolbypassrls = Get[Boolean].unsafeGetNonNullable(rs, i + 8),
        rolconnlimit = Get[Int].unsafeGetNonNullable(rs, i + 9),
        rolpassword = Get[String].unsafeGetNullable(rs, i + 10),
        rolvaliduntil = Get[OffsetDateTime].unsafeGetNullable(rs, i + 11)
      )
    )
  

}
