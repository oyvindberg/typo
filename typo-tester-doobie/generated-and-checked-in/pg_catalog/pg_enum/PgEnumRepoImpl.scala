/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_enum

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object PgEnumRepoImpl extends PgEnumRepo {
  override def delete(oid: PgEnumId): ConnectionIO[Boolean] = {
    sql"delete from pg_catalog.pg_enum where oid = $oid".update.run.map(_ > 0)
  }
  override def insert(unsaved: PgEnumRow): ConnectionIO[PgEnumRow] = {
    sql"""insert into pg_catalog.pg_enum(oid, enumtypid, enumsortorder, enumlabel)
          values (${unsaved.oid}::oid, ${unsaved.enumtypid}::oid, ${unsaved.enumsortorder}::float4, ${unsaved.enumlabel}::name)
          returning oid, enumtypid, enumsortorder, enumlabel
       """.query[PgEnumRow].unique
  }
  override def selectAll: Stream[ConnectionIO, PgEnumRow] = {
    sql"select oid, enumtypid, enumsortorder, enumlabel from pg_catalog.pg_enum".query[PgEnumRow].stream
  }
  override def selectById(oid: PgEnumId): ConnectionIO[Option[PgEnumRow]] = {
    sql"select oid, enumtypid, enumsortorder, enumlabel from pg_catalog.pg_enum where oid = $oid".query[PgEnumRow].option
  }
  override def selectByIds(oids: Array[PgEnumId]): Stream[ConnectionIO, PgEnumRow] = {
    sql"select oid, enumtypid, enumsortorder, enumlabel from pg_catalog.pg_enum where oid = ANY($oids)".query[PgEnumRow].stream
  }
  override def update(row: PgEnumRow): ConnectionIO[Boolean] = {
    val oid = row.oid
    sql"""update pg_catalog.pg_enum
          set enumtypid = ${row.enumtypid}::oid,
              enumsortorder = ${row.enumsortorder}::float4,
              enumlabel = ${row.enumlabel}::name
          where oid = $oid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: PgEnumRow): ConnectionIO[PgEnumRow] = {
    sql"""insert into pg_catalog.pg_enum(oid, enumtypid, enumsortorder, enumlabel)
          values (
            ${unsaved.oid}::oid,
            ${unsaved.enumtypid}::oid,
            ${unsaved.enumsortorder}::float4,
            ${unsaved.enumlabel}::name
          )
          on conflict (oid)
          do update set
            enumtypid = EXCLUDED.enumtypid,
            enumsortorder = EXCLUDED.enumsortorder,
            enumlabel = EXCLUDED.enumlabel
          returning oid, enumtypid, enumsortorder, enumlabel
       """.query[PgEnumRow].unique
  }
}
