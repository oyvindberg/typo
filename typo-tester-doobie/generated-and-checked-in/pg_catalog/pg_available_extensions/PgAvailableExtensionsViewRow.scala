/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_available_extensions

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgAvailableExtensionsViewRow(
  name: Option[String],
  defaultVersion: Option[String],
  installedVersion: Option[String],
  comment: Option[String]
)

object PgAvailableExtensionsViewRow {
  implicit val decoder: Decoder[PgAvailableExtensionsViewRow] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Option[String]]
        defaultVersion <- c.downField("default_version").as[Option[String]]
        installedVersion <- c.downField("installed_version").as[Option[String]]
        comment <- c.downField("comment").as[Option[String]]
      } yield PgAvailableExtensionsViewRow(name, defaultVersion, installedVersion, comment)
  implicit val encoder: Encoder[PgAvailableExtensionsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "default_version" := row.defaultVersion,
        "installed_version" := row.installedVersion,
        "comment" := row.comment
      )}
  implicit val read: Read[PgAvailableExtensionsViewRow] =
    new Read[PgAvailableExtensionsViewRow](
      gets = List(
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgAvailableExtensionsViewRow(
        name = Get[String].unsafeGetNullable(rs, i + 0),
        defaultVersion = Get[String].unsafeGetNullable(rs, i + 1),
        installedVersion = Get[String].unsafeGetNullable(rs, i + 2),
        comment = Get[String].unsafeGetNullable(rs, i + 3)
      )
    )
  

}
