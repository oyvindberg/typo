/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_subscription

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PgSubscriptionRow(
  oid: PgSubscriptionId,
  subdbid: /* oid */ Long,
  subname: String,
  subowner: /* oid */ Long,
  subenabled: Boolean,
  subbinary: Boolean,
  substream: Boolean,
  subconninfo: String,
  subslotname: Option[String],
  subsynccommit: String,
  subpublications: Array[String]
)

object PgSubscriptionRow {
  implicit val decoder: Decoder[PgSubscriptionRow] =
    (c: HCursor) =>
      for {
        oid <- c.downField("oid").as[PgSubscriptionId]
        subdbid <- c.downField("subdbid").as[/* oid */ Long]
        subname <- c.downField("subname").as[String]
        subowner <- c.downField("subowner").as[/* oid */ Long]
        subenabled <- c.downField("subenabled").as[Boolean]
        subbinary <- c.downField("subbinary").as[Boolean]
        substream <- c.downField("substream").as[Boolean]
        subconninfo <- c.downField("subconninfo").as[String]
        subslotname <- c.downField("subslotname").as[Option[String]]
        subsynccommit <- c.downField("subsynccommit").as[String]
        subpublications <- c.downField("subpublications").as[Array[String]]
      } yield PgSubscriptionRow(oid, subdbid, subname, subowner, subenabled, subbinary, substream, subconninfo, subslotname, subsynccommit, subpublications)
  implicit val encoder: Encoder[PgSubscriptionRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "oid" := row.oid,
        "subdbid" := row.subdbid,
        "subname" := row.subname,
        "subowner" := row.subowner,
        "subenabled" := row.subenabled,
        "subbinary" := row.subbinary,
        "substream" := row.substream,
        "subconninfo" := row.subconninfo,
        "subslotname" := row.subslotname,
        "subsynccommit" := row.subsynccommit,
        "subpublications" := row.subpublications
      )}
  implicit val read: Read[PgSubscriptionRow] =
    new Read[PgSubscriptionRow](
      gets = List(
        (Get[PgSubscriptionId], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[/* oid */ Long], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[Boolean], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.NoNulls),
        (Get[Array[String]], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PgSubscriptionRow(
        oid = Get[PgSubscriptionId].unsafeGetNonNullable(rs, i + 0),
        subdbid = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 1),
        subname = Get[String].unsafeGetNonNullable(rs, i + 2),
        subowner = Get[/* oid */ Long].unsafeGetNonNullable(rs, i + 3),
        subenabled = Get[Boolean].unsafeGetNonNullable(rs, i + 4),
        subbinary = Get[Boolean].unsafeGetNonNullable(rs, i + 5),
        substream = Get[Boolean].unsafeGetNonNullable(rs, i + 6),
        subconninfo = Get[String].unsafeGetNonNullable(rs, i + 7),
        subslotname = Get[String].unsafeGetNullable(rs, i + 8),
        subsynccommit = Get[String].unsafeGetNonNullable(rs, i + 9),
        subpublications = Get[Array[String]].unsafeGetNonNullable(rs, i + 10)
      )
    )
  

}
