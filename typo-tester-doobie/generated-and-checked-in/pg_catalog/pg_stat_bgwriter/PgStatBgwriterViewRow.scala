/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pg_catalog
package pg_stat_bgwriter

import adventureworks.TypoOffsetDateTime
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class PgStatBgwriterViewRow(
  checkpointsTimed: Option[Long],
  checkpointsReq: Option[Long],
  checkpointWriteTime: Option[Double],
  checkpointSyncTime: Option[Double],
  buffersCheckpoint: Option[Long],
  buffersClean: Option[Long],
  maxwrittenClean: Option[Long],
  buffersBackend: Option[Long],
  buffersBackendFsync: Option[Long],
  buffersAlloc: Option[Long],
  statsReset: Option[TypoOffsetDateTime]
)

object PgStatBgwriterViewRow {
  implicit val decoder: Decoder[PgStatBgwriterViewRow] = Decoder.forProduct11[PgStatBgwriterViewRow, Option[Long], Option[Long], Option[Double], Option[Double], Option[Long], Option[Long], Option[Long], Option[Long], Option[Long], Option[Long], Option[TypoOffsetDateTime]]("checkpoints_timed", "checkpoints_req", "checkpoint_write_time", "checkpoint_sync_time", "buffers_checkpoint", "buffers_clean", "maxwritten_clean", "buffers_backend", "buffers_backend_fsync", "buffers_alloc", "stats_reset")(PgStatBgwriterViewRow.apply)
  implicit val encoder: Encoder[PgStatBgwriterViewRow] = Encoder.forProduct11[PgStatBgwriterViewRow, Option[Long], Option[Long], Option[Double], Option[Double], Option[Long], Option[Long], Option[Long], Option[Long], Option[Long], Option[Long], Option[TypoOffsetDateTime]]("checkpoints_timed", "checkpoints_req", "checkpoint_write_time", "checkpoint_sync_time", "buffers_checkpoint", "buffers_clean", "maxwritten_clean", "buffers_backend", "buffers_backend_fsync", "buffers_alloc", "stats_reset")(x => (x.checkpointsTimed, x.checkpointsReq, x.checkpointWriteTime, x.checkpointSyncTime, x.buffersCheckpoint, x.buffersClean, x.maxwrittenClean, x.buffersBackend, x.buffersBackendFsync, x.buffersAlloc, x.statsReset))
  implicit val read: Read[PgStatBgwriterViewRow] = new Read[PgStatBgwriterViewRow](
    gets = List(
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Double], Nullability.Nullable),
      (Get[Double], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[Long], Nullability.Nullable),
      (Get[TypoOffsetDateTime], Nullability.Nullable)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PgStatBgwriterViewRow(
      checkpointsTimed = Get[Long].unsafeGetNullable(rs, i + 0),
      checkpointsReq = Get[Long].unsafeGetNullable(rs, i + 1),
      checkpointWriteTime = Get[Double].unsafeGetNullable(rs, i + 2),
      checkpointSyncTime = Get[Double].unsafeGetNullable(rs, i + 3),
      buffersCheckpoint = Get[Long].unsafeGetNullable(rs, i + 4),
      buffersClean = Get[Long].unsafeGetNullable(rs, i + 5),
      maxwrittenClean = Get[Long].unsafeGetNullable(rs, i + 6),
      buffersBackend = Get[Long].unsafeGetNullable(rs, i + 7),
      buffersBackendFsync = Get[Long].unsafeGetNullable(rs, i + 8),
      buffersAlloc = Get[Long].unsafeGetNullable(rs, i + 9),
      statsReset = Get[TypoOffsetDateTime].unsafeGetNullable(rs, i + 10)
    )
  )
}
