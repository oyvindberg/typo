/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks

import io.circe.Decoder
import io.circe.Encoder
import io.circe.Json


/**
 * This signals a value where if you don't provide it, postgres will generate it for you
 */
sealed trait Defaulted[+T]

object Defaulted {
  case class Provided[T](value: T) extends Defaulted[T]
  case object UseDefault extends Defaulted[Nothing]
  implicit def decoder[T: Decoder]: Decoder[Defaulted[T]] = c =>
    c.as[String].flatMap {
      case "defaulted" => Right(UseDefault)
      case _           => c.downField("provided").as[T].map(Provided.apply)
    }
  implicit def encoder[T: Encoder]: Encoder[Defaulted[T]] =
    Encoder.instance {
      case Provided(value) => Json.obj("provided" -> Encoder[T].apply(value))
      case UseDefault      => Json.fromString("defaulted")
    }
}
