/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package vproductmodelinstructions

import adventureworks.TypoXml
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

case class VproductmodelinstructionsViewRow(
  /** Points to [[productmodel.ProductmodelRow.productmodelid]] */
  productmodelid: Option[ProductmodelId],
  /** Points to [[productmodel.ProductmodelRow.name]] */
  name: Option[Name],
  /** Points to [[productmodel.ProductmodelRow.instructions]] */
  instructions: Option[TypoXml],
  LocationID: Option[Int],
  SetupHours: Option[BigDecimal],
  MachineHours: Option[BigDecimal],
  LaborHours: Option[BigDecimal],
  LotSize: Option[Int],
  Step: Option[String],
  /** Points to [[productmodel.ProductmodelRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[productmodel.ProductmodelRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object VproductmodelinstructionsViewRow {
  implicit val decoder: Decoder[VproductmodelinstructionsViewRow] =
    (c: HCursor) =>
      for {
        productmodelid <- c.downField("productmodelid").as[Option[ProductmodelId]]
        name <- c.downField("name").as[Option[Name]]
        instructions <- c.downField("instructions").as[Option[TypoXml]]
        LocationID <- c.downField("LocationID").as[Option[Int]]
        SetupHours <- c.downField("SetupHours").as[Option[BigDecimal]]
        MachineHours <- c.downField("MachineHours").as[Option[BigDecimal]]
        LaborHours <- c.downField("LaborHours").as[Option[BigDecimal]]
        LotSize <- c.downField("LotSize").as[Option[Int]]
        Step <- c.downField("Step").as[Option[String]]
        rowguid <- c.downField("rowguid").as[Option[UUID]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield VproductmodelinstructionsViewRow(productmodelid, name, instructions, LocationID, SetupHours, MachineHours, LaborHours, LotSize, Step, rowguid, modifieddate)
  implicit val encoder: Encoder[VproductmodelinstructionsViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productmodelid" := row.productmodelid,
        "name" := row.name,
        "instructions" := row.instructions,
        "LocationID" := row.LocationID,
        "SetupHours" := row.SetupHours,
        "MachineHours" := row.MachineHours,
        "LaborHours" := row.LaborHours,
        "LotSize" := row.LotSize,
        "Step" := row.Step,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
