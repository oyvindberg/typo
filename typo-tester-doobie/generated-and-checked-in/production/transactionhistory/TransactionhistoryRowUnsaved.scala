/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package transactionhistory

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `production.transactionhistory` which has not been persisted yet */
case class TransactionhistoryRowUnsaved(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Purchase order, sales order, or work order identification number. */
  referenceorderid: Int,
  /** W = WorkOrder, S = SalesOrder, P = PurchaseOrder */
  transactiontype: /* bpchar */ String,
  /** Product quantity. */
  quantity: Int,
  /** Product cost. */
  actualcost: BigDecimal,
  /** Default: nextval('production.transactionhistory_transactionid_seq'::regclass)
      Primary key for TransactionHistory records. */
  transactionid: Defaulted[TransactionhistoryId] = Defaulted.UseDefault,
  /** Default: 0
      Line number associated with the purchase order, sales order, or work order. */
  referenceorderlineid: Defaulted[Int] = Defaulted.UseDefault,
  /** Default: now()
      Date and time of the transaction. */
  transactiondate: Defaulted[LocalDateTime] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(transactionidDefault: => TransactionhistoryId, referenceorderlineidDefault: => Int, transactiondateDefault: => LocalDateTime, modifieddateDefault: => LocalDateTime): TransactionhistoryRow =
    TransactionhistoryRow(
      productid = productid,
      referenceorderid = referenceorderid,
      transactiontype = transactiontype,
      quantity = quantity,
      actualcost = actualcost,
      transactionid = transactionid match {
                        case Defaulted.UseDefault => transactionidDefault
                        case Defaulted.Provided(value) => value
                      },
      referenceorderlineid = referenceorderlineid match {
                               case Defaulted.UseDefault => referenceorderlineidDefault
                               case Defaulted.Provided(value) => value
                             },
      transactiondate = transactiondate match {
                          case Defaulted.UseDefault => transactiondateDefault
                          case Defaulted.Provided(value) => value
                        },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object TransactionhistoryRowUnsaved {
  implicit val decoder: Decoder[TransactionhistoryRowUnsaved] =
    (c: HCursor) =>
      for {
        productid <- c.downField("productid").as[ProductId]
        referenceorderid <- c.downField("referenceorderid").as[Int]
        transactiontype <- c.downField("transactiontype").as[/* bpchar */ String]
        quantity <- c.downField("quantity").as[Int]
        actualcost <- c.downField("actualcost").as[BigDecimal]
        transactionid <- c.downField("transactionid").as[Defaulted[TransactionhistoryId]]
        referenceorderlineid <- c.downField("referenceorderlineid").as[Defaulted[Int]]
        transactiondate <- c.downField("transactiondate").as[Defaulted[LocalDateTime]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield TransactionhistoryRowUnsaved(productid, referenceorderid, transactiontype, quantity, actualcost, transactionid, referenceorderlineid, transactiondate, modifieddate)
  implicit val encoder: Encoder[TransactionhistoryRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productid" := row.productid,
        "referenceorderid" := row.referenceorderid,
        "transactiontype" := row.transactiontype,
        "quantity" := row.quantity,
        "actualcost" := row.actualcost,
        "transactionid" := row.transactionid,
        "referenceorderlineid" := row.referenceorderlineid,
        "transactiondate" := row.transactiondate,
        "modifieddate" := row.modifieddate
      )}
}
