/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package transactionhistory

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class TransactionhistoryRepoMock(toRow: Function1[TransactionhistoryRowUnsaved, TransactionhistoryRow],
                                 map: scala.collection.mutable.Map[TransactionhistoryId, TransactionhistoryRow] = scala.collection.mutable.Map.empty) extends TransactionhistoryRepo {
  override def delete(transactionid: TransactionhistoryId): ConnectionIO[Boolean] = {
    delay(map.remove(transactionid).isDefined)
  }
  override def insert(unsaved: TransactionhistoryRow): ConnectionIO[TransactionhistoryRow] = {
    delay {
      if (map.contains(unsaved.transactionid))
        sys.error(s"id ${unsaved.transactionid} already exists")
      else
        map.put(unsaved.transactionid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: TransactionhistoryRowUnsaved): ConnectionIO[TransactionhistoryRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, TransactionhistoryRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[TransactionhistoryFieldOrIdValue[_]]): Stream[ConnectionIO, TransactionhistoryRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, TransactionhistoryFieldValue.transactionid(value)) => acc.filter(_.transactionid == value)
        case (acc, TransactionhistoryFieldValue.productid(value)) => acc.filter(_.productid == value)
        case (acc, TransactionhistoryFieldValue.referenceorderid(value)) => acc.filter(_.referenceorderid == value)
        case (acc, TransactionhistoryFieldValue.referenceorderlineid(value)) => acc.filter(_.referenceorderlineid == value)
        case (acc, TransactionhistoryFieldValue.transactiondate(value)) => acc.filter(_.transactiondate == value)
        case (acc, TransactionhistoryFieldValue.transactiontype(value)) => acc.filter(_.transactiontype == value)
        case (acc, TransactionhistoryFieldValue.quantity(value)) => acc.filter(_.quantity == value)
        case (acc, TransactionhistoryFieldValue.actualcost(value)) => acc.filter(_.actualcost == value)
        case (acc, TransactionhistoryFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(transactionid: TransactionhistoryId): ConnectionIO[Option[TransactionhistoryRow]] = {
    delay(map.get(transactionid))
  }
  override def selectByIds(transactionids: Array[TransactionhistoryId]): Stream[ConnectionIO, TransactionhistoryRow] = {
    Stream.emits(transactionids.flatMap(map.get).toList)
  }
  override def update(row: TransactionhistoryRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.transactionid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.transactionid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(transactionid: TransactionhistoryId, fieldValues: List[TransactionhistoryFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(transactionid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, TransactionhistoryFieldValue.productid(value)) => acc.copy(productid = value)
            case (acc, TransactionhistoryFieldValue.referenceorderid(value)) => acc.copy(referenceorderid = value)
            case (acc, TransactionhistoryFieldValue.referenceorderlineid(value)) => acc.copy(referenceorderlineid = value)
            case (acc, TransactionhistoryFieldValue.transactiondate(value)) => acc.copy(transactiondate = value)
            case (acc, TransactionhistoryFieldValue.transactiontype(value)) => acc.copy(transactiontype = value)
            case (acc, TransactionhistoryFieldValue.quantity(value)) => acc.copy(quantity = value)
            case (acc, TransactionhistoryFieldValue.actualcost(value)) => acc.copy(actualcost = value)
            case (acc, TransactionhistoryFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(transactionid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: TransactionhistoryRow): ConnectionIO[TransactionhistoryRow] = {
    delay {
      map.put(unsaved.transactionid, unsaved)
      unsaved
    }
  }
}
