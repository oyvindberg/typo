/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import doobie.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Type for the primary key of table `production.culture` */
case class CultureId(value: /* bpchar */ String) extends AnyVal
object CultureId {
  implicit val ordering: Ordering[CultureId] = Ordering.by(_.value)
  implicit val encoder: Encoder[CultureId] =
    Encoder[/* bpchar */ String].contramap(_.value)
  implicit val decoder: Decoder[CultureId] =
    Decoder[/* bpchar */ String].map(CultureId(_))
  implicit val metaArray: Meta[Array[CultureId]] = Meta[Array[/* bpchar */ String]].imap(_.map(CultureId.apply))(_.map(_.value))
  implicit val meta: Meta[CultureId] = Meta[/* bpchar */ String].imap(CultureId.apply)(_.value)
}
