/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import adventureworks.TypoLocalDateTime
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class CultureRow(
  /** Primary key for Culture records. */
  cultureid: CultureId,
  /** Culture description. */
  name: Name,
  modifieddate: TypoLocalDateTime
)

object CultureRow {
  implicit val decoder: Decoder[CultureRow] = Decoder.forProduct3[CultureRow, CultureId, Name, TypoLocalDateTime]("cultureid", "name", "modifieddate")(CultureRow.apply)
  implicit val encoder: Encoder[CultureRow] = Encoder.forProduct3[CultureRow, CultureId, Name, TypoLocalDateTime]("cultureid", "name", "modifieddate")(x => (x.cultureid, x.name, x.modifieddate))
  implicit val read: Read[CultureRow] = new Read[CultureRow](
    gets = List(
      (Get[CultureId], Nullability.NoNulls),
      (Get[Name], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => CultureRow(
      cultureid = Get[CultureId].unsafeGetNonNullable(rs, i + 0),
      name = Get[Name].unsafeGetNonNullable(rs, i + 1),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 2)
    )
  )
}
