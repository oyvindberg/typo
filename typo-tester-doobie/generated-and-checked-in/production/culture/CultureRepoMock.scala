/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class CultureRepoMock(toRow: Function1[CultureRowUnsaved, CultureRow],
                      map: scala.collection.mutable.Map[CultureId, CultureRow] = scala.collection.mutable.Map.empty) extends CultureRepo {
  override def delete(cultureid: CultureId): ConnectionIO[Boolean] = {
    delay(map.remove(cultureid).isDefined)
  }
  override def insert(unsaved: CultureRow): ConnectionIO[CultureRow] = {
    delay {
      if (map.contains(unsaved.cultureid))
        sys.error(s"id ${unsaved.cultureid} already exists")
      else
        map.put(unsaved.cultureid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: CultureRowUnsaved): ConnectionIO[CultureRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, CultureRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[CultureFieldOrIdValue[_]]): Stream[ConnectionIO, CultureRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, CultureFieldValue.cultureid(value)) => acc.filter(_.cultureid == value)
        case (acc, CultureFieldValue.name(value)) => acc.filter(_.name == value)
        case (acc, CultureFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(cultureid: CultureId): ConnectionIO[Option[CultureRow]] = {
    delay(map.get(cultureid))
  }
  override def selectByIds(cultureids: Array[CultureId]): Stream[ConnectionIO, CultureRow] = {
    Stream.emits(cultureids.flatMap(map.get).toList)
  }
  override def update(row: CultureRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.cultureid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.cultureid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(cultureid: CultureId, fieldValues: List[CultureFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(cultureid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, CultureFieldValue.name(value)) => acc.copy(name = value)
            case (acc, CultureFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(cultureid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: CultureRow): ConnectionIO[CultureRow] = {
    delay {
      map.put(unsaved.cultureid, unsaved)
      unsaved
    }
  }
}
