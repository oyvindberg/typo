/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import adventureworks.Defaulted
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `production.culture` which has not been persisted yet */
case class CultureRowUnsaved(
  /** Primary key for Culture records. */
  cultureid: CultureId,
  /** Culture description. */
  name: Name,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(modifieddateDefault: => LocalDateTime): CultureRow =
    CultureRow(
      cultureid = cultureid,
      name = name,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object CultureRowUnsaved {
  implicit val decoder: Decoder[CultureRowUnsaved] =
    (c: HCursor) =>
      for {
        cultureid <- c.downField("cultureid").as[CultureId]
        name <- c.downField("name").as[Name]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield CultureRowUnsaved(cultureid, name, modifieddate)
  implicit val encoder: Encoder[CultureRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "cultureid" := row.cultureid,
        "name" := row.name,
        "modifieddate" := row.modifieddate
      )}
}
