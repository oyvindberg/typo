/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productproductphoto

import adventureworks.TypoLocalDateTime
import adventureworks.production.product.ProductId
import adventureworks.production.productphoto.ProductphotoId
import adventureworks.public.Flag
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class ProductproductphotoRow(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.
      Points to [[productphoto.ProductphotoRow.productphotoid]] */
  productphotoid: ProductphotoId,
  /** 0 = Photo is not the principal image. 1 = Photo is the principal image. */
  primary: Flag,
  modifieddate: TypoLocalDateTime
){
   val compositeId: ProductproductphotoId = ProductproductphotoId(productid, productphotoid)
 }

object ProductproductphotoRow {
  implicit val decoder: Decoder[ProductproductphotoRow] = Decoder.forProduct4[ProductproductphotoRow, ProductId, ProductphotoId, Flag, TypoLocalDateTime]("productid", "productphotoid", "primary", "modifieddate")(ProductproductphotoRow.apply)
  implicit val encoder: Encoder[ProductproductphotoRow] = Encoder.forProduct4[ProductproductphotoRow, ProductId, ProductphotoId, Flag, TypoLocalDateTime]("productid", "productphotoid", "primary", "modifieddate")(x => (x.productid, x.productphotoid, x.primary, x.modifieddate))
  implicit val read: Read[ProductproductphotoRow] = new Read[ProductproductphotoRow](
    gets = List(
      (Get[ProductId], Nullability.NoNulls),
      (Get[ProductphotoId], Nullability.NoNulls),
      (Get[Flag], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => ProductproductphotoRow(
      productid = Get[ProductId].unsafeGetNonNullable(rs, i + 0),
      productphotoid = Get[ProductphotoId].unsafeGetNonNullable(rs, i + 1),
      primary = Get[Flag].unsafeGetNonNullable(rs, i + 2),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 3)
    )
  )
}
