/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodelillustration

import adventureworks.production.illustration.IllustrationId
import adventureworks.production.productmodel.ProductmodelId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json

/** Type for the composite primary key of table `production.productmodelillustration` */
case class ProductmodelillustrationId(productmodelid: ProductmodelId, illustrationid: IllustrationId)
object ProductmodelillustrationId {
  implicit val ordering: Ordering[ProductmodelillustrationId] = Ordering.by(x => (x.productmodelid, x.illustrationid))
  implicit val decoder: Decoder[ProductmodelillustrationId] =
    (c: HCursor) =>
      for {
        productmodelid <- c.downField("productmodelid").as[ProductmodelId]
        illustrationid <- c.downField("illustrationid").as[IllustrationId]
      } yield ProductmodelillustrationId(productmodelid, illustrationid)
  implicit val encoder: Encoder[ProductmodelillustrationId] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productmodelid" := row.productmodelid,
        "illustrationid" := row.illustrationid
      )}
}
