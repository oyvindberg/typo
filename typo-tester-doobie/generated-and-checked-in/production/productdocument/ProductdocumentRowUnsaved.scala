/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productdocument

import adventureworks.Defaulted
import adventureworks.production.document.DocumentId
import adventureworks.production.product.ProductId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `production.productdocument` which has not been persisted yet */
case class ProductdocumentRowUnsaved(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault,
  /** Default: '/'::character varying
      Document identification number. Foreign key to Document.DocumentNode.
      Points to [[document.DocumentRow.documentnode]] */
  documentnode: Defaulted[DocumentId] = Defaulted.UseDefault
) {
  def toRow(modifieddateDefault: => LocalDateTime, documentnodeDefault: => DocumentId): ProductdocumentRow =
    ProductdocumentRow(
      productid = productid,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     },
      documentnode = documentnode match {
                       case Defaulted.UseDefault => documentnodeDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductdocumentRowUnsaved {
  implicit val decoder: Decoder[ProductdocumentRowUnsaved] =
    (c: HCursor) =>
      for {
        productid <- c.downField("productid").as[ProductId]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
        documentnode <- c.downField("documentnode").as[Defaulted[DocumentId]]
      } yield ProductdocumentRowUnsaved(productid, modifieddate, documentnode)
  implicit val encoder: Encoder[ProductdocumentRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productid" := row.productid,
        "modifieddate" := row.modifieddate,
        "documentnode" := row.documentnode
      )}
}
