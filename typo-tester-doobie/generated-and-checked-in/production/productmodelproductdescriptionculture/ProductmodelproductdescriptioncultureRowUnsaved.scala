/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodelproductdescriptionculture

import adventureworks.Defaulted
import adventureworks.production.culture.CultureId
import adventureworks.production.productdescription.ProductdescriptionId
import adventureworks.production.productmodel.ProductmodelId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `production.productmodelproductdescriptionculture` which has not been persisted yet */
case class ProductmodelproductdescriptioncultureRowUnsaved(
  /** Primary key. Foreign key to ProductModel.ProductModelID.
      Points to [[productmodel.ProductmodelRow.productmodelid]] */
  productmodelid: ProductmodelId,
  /** Primary key. Foreign key to ProductDescription.ProductDescriptionID.
      Points to [[productdescription.ProductdescriptionRow.productdescriptionid]] */
  productdescriptionid: ProductdescriptionId,
  /** Culture identification number. Foreign key to Culture.CultureID.
      Points to [[culture.CultureRow.cultureid]] */
  cultureid: CultureId,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(modifieddateDefault: => LocalDateTime): ProductmodelproductdescriptioncultureRow =
    ProductmodelproductdescriptioncultureRow(
      productmodelid = productmodelid,
      productdescriptionid = productdescriptionid,
      cultureid = cultureid,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductmodelproductdescriptioncultureRowUnsaved {
  implicit val decoder: Decoder[ProductmodelproductdescriptioncultureRowUnsaved] =
    (c: HCursor) =>
      for {
        productmodelid <- c.downField("productmodelid").as[ProductmodelId]
        productdescriptionid <- c.downField("productdescriptionid").as[ProductdescriptionId]
        cultureid <- c.downField("cultureid").as[CultureId]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield ProductmodelproductdescriptioncultureRowUnsaved(productmodelid, productdescriptionid, cultureid, modifieddate)
  implicit val encoder: Encoder[ProductmodelproductdescriptioncultureRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productmodelid" := row.productmodelid,
        "productdescriptionid" := row.productdescriptionid,
        "cultureid" := row.cultureid,
        "modifieddate" := row.modifieddate
      )}
}
