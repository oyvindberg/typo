/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package product

import adventureworks.Defaulted
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Flag
import adventureworks.public.Name
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object ProductRepoImpl extends ProductRepo {
  override def delete(productid: ProductId): ConnectionIO[Boolean] = {
    sql"delete from production.product where productid = $productid".update.run.map(_ > 0)
  }
  override def insert(unsaved: ProductRow): ConnectionIO[ProductRow] = {
    sql"""insert into production.product(productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate)
          values (${unsaved.productid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.productnumber}, ${unsaved.makeflag}::"public"."Flag", ${unsaved.finishedgoodsflag}::"public"."Flag", ${unsaved.color}, ${unsaved.safetystocklevel}::int2, ${unsaved.reorderpoint}::int2, ${unsaved.standardcost}::numeric, ${unsaved.listprice}::numeric, ${unsaved.size}, ${unsaved.sizeunitmeasurecode}::bpchar, ${unsaved.weightunitmeasurecode}::bpchar, ${unsaved.weight}::numeric, ${unsaved.daystomanufacture}::int4, ${unsaved.productline}::bpchar, ${unsaved.`class`}::bpchar, ${unsaved.style}::bpchar, ${unsaved.productsubcategoryid}::int4, ${unsaved.productmodelid}::int4, ${unsaved.sellstartdate}::timestamp, ${unsaved.sellenddate}::timestamp, ${unsaved.discontinueddate}::timestamp, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: ProductRowUnsaved): ConnectionIO[ProductRow] = {
    val fs = List(
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      Some((Fragment.const(s"productnumber"), fr"${unsaved.productnumber}")),
      Some((Fragment.const(s"color"), fr"${unsaved.color}")),
      Some((Fragment.const(s"safetystocklevel"), fr"${unsaved.safetystocklevel}::int2")),
      Some((Fragment.const(s"reorderpoint"), fr"${unsaved.reorderpoint}::int2")),
      Some((Fragment.const(s"standardcost"), fr"${unsaved.standardcost}::numeric")),
      Some((Fragment.const(s"listprice"), fr"${unsaved.listprice}::numeric")),
      Some((Fragment.const(s""""size""""), fr"${unsaved.size}")),
      Some((Fragment.const(s"sizeunitmeasurecode"), fr"${unsaved.sizeunitmeasurecode}::bpchar")),
      Some((Fragment.const(s"weightunitmeasurecode"), fr"${unsaved.weightunitmeasurecode}::bpchar")),
      Some((Fragment.const(s"weight"), fr"${unsaved.weight}::numeric")),
      Some((Fragment.const(s"daystomanufacture"), fr"${unsaved.daystomanufacture}::int4")),
      Some((Fragment.const(s"productline"), fr"${unsaved.productline}::bpchar")),
      Some((Fragment.const(s""""class""""), fr"${unsaved.`class`}::bpchar")),
      Some((Fragment.const(s""""style""""), fr"${unsaved.style}::bpchar")),
      Some((Fragment.const(s"productsubcategoryid"), fr"${unsaved.productsubcategoryid}::int4")),
      Some((Fragment.const(s"productmodelid"), fr"${unsaved.productmodelid}::int4")),
      Some((Fragment.const(s"sellstartdate"), fr"${unsaved.sellstartdate}::timestamp")),
      Some((Fragment.const(s"sellenddate"), fr"${unsaved.sellenddate}::timestamp")),
      Some((Fragment.const(s"discontinueddate"), fr"${unsaved.discontinueddate}::timestamp")),
      unsaved.productid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"productid"), fr"${value: ProductId}::int4"))
      },
      unsaved.makeflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"makeflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.finishedgoodsflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"finishedgoodsflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.product default values
            returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.product(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, ProductRow] = {
    sql"""select productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate from production.product""".query[ProductRow].stream
  }
  override def selectByFieldValues(fieldValues: List[ProductFieldOrIdValue[_]]): Stream[ConnectionIO, ProductRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case ProductFieldValue.productid(value) => fr"productid = $value"
        case ProductFieldValue.name(value) => fr""""name" = $value"""
        case ProductFieldValue.productnumber(value) => fr"productnumber = $value"
        case ProductFieldValue.makeflag(value) => fr"makeflag = $value"
        case ProductFieldValue.finishedgoodsflag(value) => fr"finishedgoodsflag = $value"
        case ProductFieldValue.color(value) => fr"color = $value"
        case ProductFieldValue.safetystocklevel(value) => fr"safetystocklevel = $value"
        case ProductFieldValue.reorderpoint(value) => fr"reorderpoint = $value"
        case ProductFieldValue.standardcost(value) => fr"standardcost = $value"
        case ProductFieldValue.listprice(value) => fr"listprice = $value"
        case ProductFieldValue.size(value) => fr""""size" = $value"""
        case ProductFieldValue.sizeunitmeasurecode(value) => fr"sizeunitmeasurecode = $value"
        case ProductFieldValue.weightunitmeasurecode(value) => fr"weightunitmeasurecode = $value"
        case ProductFieldValue.weight(value) => fr"weight = $value"
        case ProductFieldValue.daystomanufacture(value) => fr"daystomanufacture = $value"
        case ProductFieldValue.productline(value) => fr"productline = $value"
        case ProductFieldValue.`class`(value) => fr""""class" = $value"""
        case ProductFieldValue.style(value) => fr""""style" = $value"""
        case ProductFieldValue.productsubcategoryid(value) => fr"productsubcategoryid = $value"
        case ProductFieldValue.productmodelid(value) => fr"productmodelid = $value"
        case ProductFieldValue.sellstartdate(value) => fr"sellstartdate = $value"
        case ProductFieldValue.sellenddate(value) => fr"sellenddate = $value"
        case ProductFieldValue.discontinueddate(value) => fr"discontinueddate = $value"
        case ProductFieldValue.rowguid(value) => fr"rowguid = $value"
        case ProductFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from production.product $where".query[ProductRow].stream
  
  }
  override def selectById(productid: ProductId): ConnectionIO[Option[ProductRow]] = {
    sql"""select productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate from production.product where productid = $productid""".query[ProductRow].option
  }
  override def selectByIds(productids: Array[ProductId]): Stream[ConnectionIO, ProductRow] = {
    sql"""select productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate from production.product where productid = ANY($productids)""".query[ProductRow].stream
  }
  override def update(row: ProductRow): ConnectionIO[Boolean] = {
    val productid = row.productid
    sql"""update production.product
          set "name" = ${row.name}::"public"."Name",
              productnumber = ${row.productnumber},
              makeflag = ${row.makeflag}::"public"."Flag",
              finishedgoodsflag = ${row.finishedgoodsflag}::"public"."Flag",
              color = ${row.color},
              safetystocklevel = ${row.safetystocklevel}::int2,
              reorderpoint = ${row.reorderpoint}::int2,
              standardcost = ${row.standardcost}::numeric,
              listprice = ${row.listprice}::numeric,
              "size" = ${row.size},
              sizeunitmeasurecode = ${row.sizeunitmeasurecode}::bpchar,
              weightunitmeasurecode = ${row.weightunitmeasurecode}::bpchar,
              weight = ${row.weight}::numeric,
              daystomanufacture = ${row.daystomanufacture}::int4,
              productline = ${row.productline}::bpchar,
              "class" = ${row.`class`}::bpchar,
              "style" = ${row.style}::bpchar,
              productsubcategoryid = ${row.productsubcategoryid}::int4,
              productmodelid = ${row.productmodelid}::int4,
              sellstartdate = ${row.sellstartdate}::timestamp,
              sellenddate = ${row.sellenddate}::timestamp,
              discontinueddate = ${row.discontinueddate}::timestamp,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where productid = $productid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(productid: ProductId, fieldValues: List[ProductFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case ProductFieldValue.name(value) => fr""""name" = $value"""
            case ProductFieldValue.productnumber(value) => fr"productnumber = $value"
            case ProductFieldValue.makeflag(value) => fr"makeflag = $value"
            case ProductFieldValue.finishedgoodsflag(value) => fr"finishedgoodsflag = $value"
            case ProductFieldValue.color(value) => fr"color = $value"
            case ProductFieldValue.safetystocklevel(value) => fr"safetystocklevel = $value"
            case ProductFieldValue.reorderpoint(value) => fr"reorderpoint = $value"
            case ProductFieldValue.standardcost(value) => fr"standardcost = $value"
            case ProductFieldValue.listprice(value) => fr"listprice = $value"
            case ProductFieldValue.size(value) => fr""""size" = $value"""
            case ProductFieldValue.sizeunitmeasurecode(value) => fr"sizeunitmeasurecode = $value"
            case ProductFieldValue.weightunitmeasurecode(value) => fr"weightunitmeasurecode = $value"
            case ProductFieldValue.weight(value) => fr"weight = $value"
            case ProductFieldValue.daystomanufacture(value) => fr"daystomanufacture = $value"
            case ProductFieldValue.productline(value) => fr"productline = $value"
            case ProductFieldValue.`class`(value) => fr""""class" = $value"""
            case ProductFieldValue.style(value) => fr""""style" = $value"""
            case ProductFieldValue.productsubcategoryid(value) => fr"productsubcategoryid = $value"
            case ProductFieldValue.productmodelid(value) => fr"productmodelid = $value"
            case ProductFieldValue.sellstartdate(value) => fr"sellstartdate = $value"
            case ProductFieldValue.sellenddate(value) => fr"sellenddate = $value"
            case ProductFieldValue.discontinueddate(value) => fr"discontinueddate = $value"
            case ProductFieldValue.rowguid(value) => fr"rowguid = $value"
            case ProductFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update production.product
              $updates
              where productid = $productid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: ProductRow): ConnectionIO[ProductRow] = {
    sql"""insert into production.product(productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate)
          values (
            ${unsaved.productid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.productnumber},
            ${unsaved.makeflag}::"public"."Flag",
            ${unsaved.finishedgoodsflag}::"public"."Flag",
            ${unsaved.color},
            ${unsaved.safetystocklevel}::int2,
            ${unsaved.reorderpoint}::int2,
            ${unsaved.standardcost}::numeric,
            ${unsaved.listprice}::numeric,
            ${unsaved.size},
            ${unsaved.sizeunitmeasurecode}::bpchar,
            ${unsaved.weightunitmeasurecode}::bpchar,
            ${unsaved.weight}::numeric,
            ${unsaved.daystomanufacture}::int4,
            ${unsaved.productline}::bpchar,
            ${unsaved.`class`}::bpchar,
            ${unsaved.style}::bpchar,
            ${unsaved.productsubcategoryid}::int4,
            ${unsaved.productmodelid}::int4,
            ${unsaved.sellstartdate}::timestamp,
            ${unsaved.sellenddate}::timestamp,
            ${unsaved.discontinueddate}::timestamp,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productid)
          do update set
            "name" = EXCLUDED."name",
            productnumber = EXCLUDED.productnumber,
            makeflag = EXCLUDED.makeflag,
            finishedgoodsflag = EXCLUDED.finishedgoodsflag,
            color = EXCLUDED.color,
            safetystocklevel = EXCLUDED.safetystocklevel,
            reorderpoint = EXCLUDED.reorderpoint,
            standardcost = EXCLUDED.standardcost,
            listprice = EXCLUDED.listprice,
            "size" = EXCLUDED."size",
            sizeunitmeasurecode = EXCLUDED.sizeunitmeasurecode,
            weightunitmeasurecode = EXCLUDED.weightunitmeasurecode,
            weight = EXCLUDED.weight,
            daystomanufacture = EXCLUDED.daystomanufacture,
            productline = EXCLUDED.productline,
            "class" = EXCLUDED."class",
            "style" = EXCLUDED."style",
            productsubcategoryid = EXCLUDED.productsubcategoryid,
            productmodelid = EXCLUDED.productmodelid,
            sellstartdate = EXCLUDED.sellstartdate,
            sellenddate = EXCLUDED.sellenddate,
            discontinueddate = EXCLUDED.discontinueddate,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate
       """.query.unique
  }
  implicit val read: Read[ProductRow] =
    new Read[ProductRow](
      gets = List(
        (Get[ProductId], Nullability.NoNulls),
        (Get[Name], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[Flag], Nullability.NoNulls),
        (Get[Flag], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[UnitmeasureId], Nullability.Nullable),
        (Get[UnitmeasureId], Nullability.Nullable),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[Int], Nullability.NoNulls),
        (Get[/* bpchar */ String], Nullability.Nullable),
        (Get[/* bpchar */ String], Nullability.Nullable),
        (Get[/* bpchar */ String], Nullability.Nullable),
        (Get[ProductsubcategoryId], Nullability.Nullable),
        (Get[ProductmodelId], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ProductRow(
        productid = Get[ProductId].unsafeGetNonNullable(rs, i + 0),
        name = Get[Name].unsafeGetNonNullable(rs, i + 1),
        productnumber = Get[String].unsafeGetNonNullable(rs, i + 2),
        makeflag = Get[Flag].unsafeGetNonNullable(rs, i + 3),
        finishedgoodsflag = Get[Flag].unsafeGetNonNullable(rs, i + 4),
        color = Get[String].unsafeGetNullable(rs, i + 5),
        safetystocklevel = Get[Int].unsafeGetNonNullable(rs, i + 6),
        reorderpoint = Get[Int].unsafeGetNonNullable(rs, i + 7),
        standardcost = Get[BigDecimal].unsafeGetNonNullable(rs, i + 8),
        listprice = Get[BigDecimal].unsafeGetNonNullable(rs, i + 9),
        size = Get[String].unsafeGetNullable(rs, i + 10),
        sizeunitmeasurecode = Get[UnitmeasureId].unsafeGetNullable(rs, i + 11),
        weightunitmeasurecode = Get[UnitmeasureId].unsafeGetNullable(rs, i + 12),
        weight = Get[BigDecimal].unsafeGetNullable(rs, i + 13),
        daystomanufacture = Get[Int].unsafeGetNonNullable(rs, i + 14),
        productline = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 15),
        `class` = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 16),
        style = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 17),
        productsubcategoryid = Get[ProductsubcategoryId].unsafeGetNullable(rs, i + 18),
        productmodelid = Get[ProductmodelId].unsafeGetNullable(rs, i + 19),
        sellstartdate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 20),
        sellenddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 21),
        discontinueddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 22),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 23),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 24)
      )
    )
  

}
