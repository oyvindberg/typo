/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package product

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.public.Flag
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream
import java.util.UUID

object ProductRepoImpl extends ProductRepo {
  override def delete(productid: ProductId): ConnectionIO[Boolean] = {
    sql"delete from production.product where productid = ${productid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: ProductRow): ConnectionIO[ProductRow] = {
    sql"""insert into production.product(productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate)
          values (${unsaved.productid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.productnumber}, ${unsaved.makeflag}::"public"."Flag", ${unsaved.finishedgoodsflag}::"public"."Flag", ${unsaved.color}, ${unsaved.safetystocklevel}::int2, ${unsaved.reorderpoint}::int2, ${unsaved.standardcost}::numeric, ${unsaved.listprice}::numeric, ${unsaved.size}, ${unsaved.sizeunitmeasurecode}::bpchar, ${unsaved.weightunitmeasurecode}::bpchar, ${unsaved.weight}::numeric, ${unsaved.daystomanufacture}::int4, ${unsaved.productline}::bpchar, ${unsaved.`class`}::bpchar, ${unsaved.style}::bpchar, ${unsaved.productsubcategoryid}::int4, ${unsaved.productmodelid}::int4, ${unsaved.sellstartdate}::timestamp, ${unsaved.sellenddate}::timestamp, ${unsaved.discontinueddate}::timestamp, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
       """.query(ProductRow.read).unique
  }
  override def insert(unsaved: ProductRowUnsaved): ConnectionIO[ProductRow] = {
    val fs = List(
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      Some((Fragment.const(s"productnumber"), fr"${unsaved.productnumber}")),
      Some((Fragment.const(s"color"), fr"${unsaved.color}")),
      Some((Fragment.const(s"safetystocklevel"), fr"${unsaved.safetystocklevel}::int2")),
      Some((Fragment.const(s"reorderpoint"), fr"${unsaved.reorderpoint}::int2")),
      Some((Fragment.const(s"standardcost"), fr"${unsaved.standardcost}::numeric")),
      Some((Fragment.const(s"listprice"), fr"${unsaved.listprice}::numeric")),
      Some((Fragment.const(s""""size""""), fr"${unsaved.size}")),
      Some((Fragment.const(s"sizeunitmeasurecode"), fr"${unsaved.sizeunitmeasurecode}::bpchar")),
      Some((Fragment.const(s"weightunitmeasurecode"), fr"${unsaved.weightunitmeasurecode}::bpchar")),
      Some((Fragment.const(s"weight"), fr"${unsaved.weight}::numeric")),
      Some((Fragment.const(s"daystomanufacture"), fr"${unsaved.daystomanufacture}::int4")),
      Some((Fragment.const(s"productline"), fr"${unsaved.productline}::bpchar")),
      Some((Fragment.const(s""""class""""), fr"${unsaved.`class`}::bpchar")),
      Some((Fragment.const(s""""style""""), fr"${unsaved.style}::bpchar")),
      Some((Fragment.const(s"productsubcategoryid"), fr"${unsaved.productsubcategoryid}::int4")),
      Some((Fragment.const(s"productmodelid"), fr"${unsaved.productmodelid}::int4")),
      Some((Fragment.const(s"sellstartdate"), fr"${unsaved.sellstartdate}::timestamp")),
      Some((Fragment.const(s"sellenddate"), fr"${unsaved.sellenddate}::timestamp")),
      Some((Fragment.const(s"discontinueddate"), fr"${unsaved.discontinueddate}::timestamp")),
      unsaved.productid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"productid"), fr"${value: ProductId}::int4"))
      },
      unsaved.makeflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"makeflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.finishedgoodsflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"finishedgoodsflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.product default values
            returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.product(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
         """
    }
    q.query(ProductRow.read).unique
  
  }
  override def selectAll: Stream[ConnectionIO, ProductRow] = {
    sql"""select productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text from production.product""".query(ProductRow.read).stream
  }
  override def selectById(productid: ProductId): ConnectionIO[Option[ProductRow]] = {
    sql"""select productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text from production.product where productid = ${productid}""".query(ProductRow.read).option
  }
  override def selectByIds(productids: Array[ProductId]): Stream[ConnectionIO, ProductRow] = {
    sql"""select productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text from production.product where productid = ANY(${productids})""".query(ProductRow.read).stream
  }
  override def update(row: ProductRow): ConnectionIO[Boolean] = {
    val productid = row.productid
    sql"""update production.product
          set "name" = ${row.name}::"public"."Name",
              productnumber = ${row.productnumber},
              makeflag = ${row.makeflag}::"public"."Flag",
              finishedgoodsflag = ${row.finishedgoodsflag}::"public"."Flag",
              color = ${row.color},
              safetystocklevel = ${row.safetystocklevel}::int2,
              reorderpoint = ${row.reorderpoint}::int2,
              standardcost = ${row.standardcost}::numeric,
              listprice = ${row.listprice}::numeric,
              "size" = ${row.size},
              sizeunitmeasurecode = ${row.sizeunitmeasurecode}::bpchar,
              weightunitmeasurecode = ${row.weightunitmeasurecode}::bpchar,
              weight = ${row.weight}::numeric,
              daystomanufacture = ${row.daystomanufacture}::int4,
              productline = ${row.productline}::bpchar,
              "class" = ${row.`class`}::bpchar,
              "style" = ${row.style}::bpchar,
              productsubcategoryid = ${row.productsubcategoryid}::int4,
              productmodelid = ${row.productmodelid}::int4,
              sellstartdate = ${row.sellstartdate}::timestamp,
              sellenddate = ${row.sellenddate}::timestamp,
              discontinueddate = ${row.discontinueddate}::timestamp,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where productid = ${productid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: ProductRow): ConnectionIO[ProductRow] = {
    sql"""insert into production.product(productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate)
          values (
            ${unsaved.productid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.productnumber},
            ${unsaved.makeflag}::"public"."Flag",
            ${unsaved.finishedgoodsflag}::"public"."Flag",
            ${unsaved.color},
            ${unsaved.safetystocklevel}::int2,
            ${unsaved.reorderpoint}::int2,
            ${unsaved.standardcost}::numeric,
            ${unsaved.listprice}::numeric,
            ${unsaved.size},
            ${unsaved.sizeunitmeasurecode}::bpchar,
            ${unsaved.weightunitmeasurecode}::bpchar,
            ${unsaved.weight}::numeric,
            ${unsaved.daystomanufacture}::int4,
            ${unsaved.productline}::bpchar,
            ${unsaved.`class`}::bpchar,
            ${unsaved.style}::bpchar,
            ${unsaved.productsubcategoryid}::int4,
            ${unsaved.productmodelid}::int4,
            ${unsaved.sellstartdate}::timestamp,
            ${unsaved.sellenddate}::timestamp,
            ${unsaved.discontinueddate}::timestamp,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productid)
          do update set
            "name" = EXCLUDED."name",
            productnumber = EXCLUDED.productnumber,
            makeflag = EXCLUDED.makeflag,
            finishedgoodsflag = EXCLUDED.finishedgoodsflag,
            color = EXCLUDED.color,
            safetystocklevel = EXCLUDED.safetystocklevel,
            reorderpoint = EXCLUDED.reorderpoint,
            standardcost = EXCLUDED.standardcost,
            listprice = EXCLUDED.listprice,
            "size" = EXCLUDED."size",
            sizeunitmeasurecode = EXCLUDED.sizeunitmeasurecode,
            weightunitmeasurecode = EXCLUDED.weightunitmeasurecode,
            weight = EXCLUDED.weight,
            daystomanufacture = EXCLUDED.daystomanufacture,
            productline = EXCLUDED.productline,
            "class" = EXCLUDED."class",
            "style" = EXCLUDED."style",
            productsubcategoryid = EXCLUDED.productsubcategoryid,
            productmodelid = EXCLUDED.productmodelid,
            sellstartdate = EXCLUDED.sellstartdate,
            sellenddate = EXCLUDED.sellenddate,
            discontinueddate = EXCLUDED.discontinueddate,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate::text, sellenddate::text, discontinueddate::text, rowguid, modifieddate::text
       """.query(ProductRow.read).unique
  }
}
