/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package product

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class ProductRepoMock(toRow: Function1[ProductRowUnsaved, ProductRow],
                      map: scala.collection.mutable.Map[ProductId, ProductRow] = scala.collection.mutable.Map.empty) extends ProductRepo {
  override def delete(productid: ProductId): ConnectionIO[Boolean] = {
    delay(map.remove(productid).isDefined)
  }
  override def insert(unsaved: ProductRow): ConnectionIO[ProductRow] = {
    delay {
      if (map.contains(unsaved.productid))
        sys.error(s"id ${unsaved.productid} already exists")
      else
        map.put(unsaved.productid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: ProductRowUnsaved): ConnectionIO[ProductRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, ProductRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(productid: ProductId): ConnectionIO[Option[ProductRow]] = {
    delay(map.get(productid))
  }
  override def selectByIds(productids: Array[ProductId]): Stream[ConnectionIO, ProductRow] = {
    Stream.emits(productids.flatMap(map.get).toList)
  }
  override def update(row: ProductRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.productid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.productid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: ProductRow): ConnectionIO[ProductRow] = {
    delay {
      map.put(unsaved.productid, unsaved)
      unsaved
    }
  }
}
