/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package product

import adventureworks.TypoLocalDateTime
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Flag
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.DecodingFailure
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet
import java.util.UUID
import scala.util.Try

case class ProductRow(
  /** Primary key for Product records. */
  productid: ProductId,
  /** Name of the product. */
  name: Name,
  /** Unique product identification number. */
  productnumber: /* max 25 chars */ String,
  /** 0 = Product is purchased, 1 = Product is manufactured in-house. */
  makeflag: Flag,
  /** 0 = Product is not a salable item. 1 = Product is salable. */
  finishedgoodsflag: Flag,
  /** Product color. */
  color: Option[/* max 15 chars */ String],
  /** Minimum inventory quantity. */
  safetystocklevel: Int,
  /** Inventory level that triggers a purchase order or work order. */
  reorderpoint: Int,
  /** Standard cost of the product. */
  standardcost: BigDecimal,
  /** Selling price. */
  listprice: BigDecimal,
  /** Product size. */
  size: Option[/* max 5 chars */ String],
  /** Unit of measure for Size column.
      Points to [[unitmeasure.UnitmeasureRow.unitmeasurecode]] */
  sizeunitmeasurecode: Option[UnitmeasureId],
  /** Unit of measure for Weight column.
      Points to [[unitmeasure.UnitmeasureRow.unitmeasurecode]] */
  weightunitmeasurecode: Option[UnitmeasureId],
  /** Product weight. */
  weight: Option[BigDecimal],
  /** Number of days required to manufacture the product. */
  daystomanufacture: Int,
  /** R = Road, M = Mountain, T = Touring, S = Standard */
  productline: Option[/* bpchar */ String],
  /** H = High, M = Medium, L = Low */
  `class`: Option[/* bpchar */ String],
  /** W = Womens, M = Mens, U = Universal */
  style: Option[/* bpchar */ String],
  /** Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.
      Points to [[productsubcategory.ProductsubcategoryRow.productsubcategoryid]] */
  productsubcategoryid: Option[ProductsubcategoryId],
  /** Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
      Points to [[productmodel.ProductmodelRow.productmodelid]] */
  productmodelid: Option[ProductmodelId],
  /** Date the product was available for sale. */
  sellstartdate: TypoLocalDateTime,
  /** Date the product was no longer available for sale. */
  sellenddate: Option[TypoLocalDateTime],
  /** Date the product was discontinued. */
  discontinueddate: Option[TypoLocalDateTime],
  rowguid: UUID,
  modifieddate: TypoLocalDateTime
)

object ProductRow {
  implicit val decoder: Decoder[ProductRow] = Decoder.instanceTry[ProductRow]((c: HCursor) =>
    Try {
      def orThrow[R](either: Either[DecodingFailure, R]): R = either match {
        case Left(err) => throw err
        case Right(r)  => r
      }
      ProductRow(
        productid = orThrow(c.get("productid")(Decoder[ProductId])),
        name = orThrow(c.get("name")(Decoder[Name])),
        productnumber = orThrow(c.get("productnumber")(Decoder[/* max 25 chars */ String])),
        makeflag = orThrow(c.get("makeflag")(Decoder[Flag])),
        finishedgoodsflag = orThrow(c.get("finishedgoodsflag")(Decoder[Flag])),
        color = orThrow(c.get("color")(Decoder[Option[/* max 15 chars */ String]])),
        safetystocklevel = orThrow(c.get("safetystocklevel")(Decoder[Int])),
        reorderpoint = orThrow(c.get("reorderpoint")(Decoder[Int])),
        standardcost = orThrow(c.get("standardcost")(Decoder[BigDecimal])),
        listprice = orThrow(c.get("listprice")(Decoder[BigDecimal])),
        size = orThrow(c.get("size")(Decoder[Option[/* max 5 chars */ String]])),
        sizeunitmeasurecode = orThrow(c.get("sizeunitmeasurecode")(Decoder[Option[UnitmeasureId]])),
        weightunitmeasurecode = orThrow(c.get("weightunitmeasurecode")(Decoder[Option[UnitmeasureId]])),
        weight = orThrow(c.get("weight")(Decoder[Option[BigDecimal]])),
        daystomanufacture = orThrow(c.get("daystomanufacture")(Decoder[Int])),
        productline = orThrow(c.get("productline")(Decoder[Option[/* bpchar */ String]])),
        `class` = orThrow(c.get("class")(Decoder[Option[/* bpchar */ String]])),
        style = orThrow(c.get("style")(Decoder[Option[/* bpchar */ String]])),
        productsubcategoryid = orThrow(c.get("productsubcategoryid")(Decoder[Option[ProductsubcategoryId]])),
        productmodelid = orThrow(c.get("productmodelid")(Decoder[Option[ProductmodelId]])),
        sellstartdate = orThrow(c.get("sellstartdate")(Decoder[TypoLocalDateTime])),
        sellenddate = orThrow(c.get("sellenddate")(Decoder[Option[TypoLocalDateTime]])),
        discontinueddate = orThrow(c.get("discontinueddate")(Decoder[Option[TypoLocalDateTime]])),
        rowguid = orThrow(c.get("rowguid")(Decoder[UUID])),
        modifieddate = orThrow(c.get("modifieddate")(Decoder[TypoLocalDateTime]))
      )
    }
  )
  implicit val encoder: Encoder[ProductRow] = Encoder[ProductRow](row =>
    Json.obj(
      "productid" -> Encoder[ProductId].apply(row.productid),
      "name" -> Encoder[Name].apply(row.name),
      "productnumber" -> Encoder[/* max 25 chars */ String].apply(row.productnumber),
      "makeflag" -> Encoder[Flag].apply(row.makeflag),
      "finishedgoodsflag" -> Encoder[Flag].apply(row.finishedgoodsflag),
      "color" -> Encoder[Option[/* max 15 chars */ String]].apply(row.color),
      "safetystocklevel" -> Encoder[Int].apply(row.safetystocklevel),
      "reorderpoint" -> Encoder[Int].apply(row.reorderpoint),
      "standardcost" -> Encoder[BigDecimal].apply(row.standardcost),
      "listprice" -> Encoder[BigDecimal].apply(row.listprice),
      "size" -> Encoder[Option[/* max 5 chars */ String]].apply(row.size),
      "sizeunitmeasurecode" -> Encoder[Option[UnitmeasureId]].apply(row.sizeunitmeasurecode),
      "weightunitmeasurecode" -> Encoder[Option[UnitmeasureId]].apply(row.weightunitmeasurecode),
      "weight" -> Encoder[Option[BigDecimal]].apply(row.weight),
      "daystomanufacture" -> Encoder[Int].apply(row.daystomanufacture),
      "productline" -> Encoder[Option[/* bpchar */ String]].apply(row.productline),
      "class" -> Encoder[Option[/* bpchar */ String]].apply(row.`class`),
      "style" -> Encoder[Option[/* bpchar */ String]].apply(row.style),
      "productsubcategoryid" -> Encoder[Option[ProductsubcategoryId]].apply(row.productsubcategoryid),
      "productmodelid" -> Encoder[Option[ProductmodelId]].apply(row.productmodelid),
      "sellstartdate" -> Encoder[TypoLocalDateTime].apply(row.sellstartdate),
      "sellenddate" -> Encoder[Option[TypoLocalDateTime]].apply(row.sellenddate),
      "discontinueddate" -> Encoder[Option[TypoLocalDateTime]].apply(row.discontinueddate),
      "rowguid" -> Encoder[UUID].apply(row.rowguid),
      "modifieddate" -> Encoder[TypoLocalDateTime].apply(row.modifieddate)
    )
  )
  implicit val read: Read[ProductRow] = new Read[ProductRow](
    gets = List(
      (Get[ProductId], Nullability.NoNulls),
      (Get[Name], Nullability.NoNulls),
      (Get[/* max 25 chars */ String], Nullability.NoNulls),
      (Get[Flag], Nullability.NoNulls),
      (Get[Flag], Nullability.NoNulls),
      (Get[/* max 15 chars */ String], Nullability.Nullable),
      (Get[Int], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[/* max 5 chars */ String], Nullability.Nullable),
      (Get[UnitmeasureId], Nullability.Nullable),
      (Get[UnitmeasureId], Nullability.Nullable),
      (Get[BigDecimal], Nullability.Nullable),
      (Get[Int], Nullability.NoNulls),
      (Get[/* bpchar */ String], Nullability.Nullable),
      (Get[/* bpchar */ String], Nullability.Nullable),
      (Get[/* bpchar */ String], Nullability.Nullable),
      (Get[ProductsubcategoryId], Nullability.Nullable),
      (Get[ProductmodelId], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[TypoLocalDateTime], Nullability.Nullable),
      (Get[UUID], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => ProductRow(
      productid = Get[ProductId].unsafeGetNonNullable(rs, i + 0),
      name = Get[Name].unsafeGetNonNullable(rs, i + 1),
      productnumber = Get[/* max 25 chars */ String].unsafeGetNonNullable(rs, i + 2),
      makeflag = Get[Flag].unsafeGetNonNullable(rs, i + 3),
      finishedgoodsflag = Get[Flag].unsafeGetNonNullable(rs, i + 4),
      color = Get[/* max 15 chars */ String].unsafeGetNullable(rs, i + 5),
      safetystocklevel = Get[Int].unsafeGetNonNullable(rs, i + 6),
      reorderpoint = Get[Int].unsafeGetNonNullable(rs, i + 7),
      standardcost = Get[BigDecimal].unsafeGetNonNullable(rs, i + 8),
      listprice = Get[BigDecimal].unsafeGetNonNullable(rs, i + 9),
      size = Get[/* max 5 chars */ String].unsafeGetNullable(rs, i + 10),
      sizeunitmeasurecode = Get[UnitmeasureId].unsafeGetNullable(rs, i + 11),
      weightunitmeasurecode = Get[UnitmeasureId].unsafeGetNullable(rs, i + 12),
      weight = Get[BigDecimal].unsafeGetNullable(rs, i + 13),
      daystomanufacture = Get[Int].unsafeGetNonNullable(rs, i + 14),
      productline = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 15),
      `class` = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 16),
      style = Get[/* bpchar */ String].unsafeGetNullable(rs, i + 17),
      productsubcategoryid = Get[ProductsubcategoryId].unsafeGetNullable(rs, i + 18),
      productmodelid = Get[ProductmodelId].unsafeGetNullable(rs, i + 19),
      sellstartdate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 20),
      sellenddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 21),
      discontinueddate = Get[TypoLocalDateTime].unsafeGetNullable(rs, i + 22),
      rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 23),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 24)
    )
  )
}
