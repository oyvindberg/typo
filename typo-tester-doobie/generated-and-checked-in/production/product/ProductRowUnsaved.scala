/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package product

import adventureworks.Defaulted
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Flag
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

/** This class corresponds to a row in table `production.product` which has not been persisted yet */
case class ProductRowUnsaved(
  /** Name of the product. */
  name: Name,
  /** Unique product identification number. */
  productnumber: String,
  /** Product color. */
  color: Option[String],
  /** Minimum inventory quantity. */
  safetystocklevel: Int,
  /** Inventory level that triggers a purchase order or work order. */
  reorderpoint: Int,
  /** Standard cost of the product. */
  standardcost: BigDecimal,
  /** Selling price. */
  listprice: BigDecimal,
  /** Product size. */
  size: Option[String],
  /** Unit of measure for Size column.
      Points to [[unitmeasure.UnitmeasureRow.unitmeasurecode]] */
  sizeunitmeasurecode: Option[UnitmeasureId],
  /** Unit of measure for Weight column.
      Points to [[unitmeasure.UnitmeasureRow.unitmeasurecode]] */
  weightunitmeasurecode: Option[UnitmeasureId],
  /** Product weight. */
  weight: Option[BigDecimal],
  /** Number of days required to manufacture the product. */
  daystomanufacture: Int,
  /** R = Road, M = Mountain, T = Touring, S = Standard */
  productline: Option[/* bpchar */ String],
  /** H = High, M = Medium, L = Low */
  `class`: Option[/* bpchar */ String],
  /** W = Womens, M = Mens, U = Universal */
  style: Option[/* bpchar */ String],
  /** Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.
      Points to [[productsubcategory.ProductsubcategoryRow.productsubcategoryid]] */
  productsubcategoryid: Option[ProductsubcategoryId],
  /** Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
      Points to [[productmodel.ProductmodelRow.productmodelid]] */
  productmodelid: Option[ProductmodelId],
  /** Date the product was available for sale. */
  sellstartdate: LocalDateTime,
  /** Date the product was no longer available for sale. */
  sellenddate: Option[LocalDateTime],
  /** Date the product was discontinued. */
  discontinueddate: Option[LocalDateTime],
  /** Default: nextval('production.product_productid_seq'::regclass)
      Primary key for Product records. */
  productid: Defaulted[ProductId] = Defaulted.UseDefault,
  /** Default: true
      0 = Product is purchased, 1 = Product is manufactured in-house. */
  makeflag: Defaulted[Flag] = Defaulted.UseDefault,
  /** Default: true
      0 = Product is not a salable item. 1 = Product is salable. */
  finishedgoodsflag: Defaulted[Flag] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(productidDefault: => ProductId, makeflagDefault: => Flag, finishedgoodsflagDefault: => Flag, rowguidDefault: => UUID, modifieddateDefault: => LocalDateTime): ProductRow =
    ProductRow(
      name = name,
      productnumber = productnumber,
      color = color,
      safetystocklevel = safetystocklevel,
      reorderpoint = reorderpoint,
      standardcost = standardcost,
      listprice = listprice,
      size = size,
      sizeunitmeasurecode = sizeunitmeasurecode,
      weightunitmeasurecode = weightunitmeasurecode,
      weight = weight,
      daystomanufacture = daystomanufacture,
      productline = productline,
      `class` = `class`,
      style = style,
      productsubcategoryid = productsubcategoryid,
      productmodelid = productmodelid,
      sellstartdate = sellstartdate,
      sellenddate = sellenddate,
      discontinueddate = discontinueddate,
      productid = productid match {
                    case Defaulted.UseDefault => productidDefault
                    case Defaulted.Provided(value) => value
                  },
      makeflag = makeflag match {
                   case Defaulted.UseDefault => makeflagDefault
                   case Defaulted.Provided(value) => value
                 },
      finishedgoodsflag = finishedgoodsflag match {
                            case Defaulted.UseDefault => finishedgoodsflagDefault
                            case Defaulted.Provided(value) => value
                          },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductRowUnsaved {
  implicit val decoder: Decoder[ProductRowUnsaved] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Name]
        productnumber <- c.downField("productnumber").as[String]
        color <- c.downField("color").as[Option[String]]
        safetystocklevel <- c.downField("safetystocklevel").as[Int]
        reorderpoint <- c.downField("reorderpoint").as[Int]
        standardcost <- c.downField("standardcost").as[BigDecimal]
        listprice <- c.downField("listprice").as[BigDecimal]
        size <- c.downField("size").as[Option[String]]
        sizeunitmeasurecode <- c.downField("sizeunitmeasurecode").as[Option[UnitmeasureId]]
        weightunitmeasurecode <- c.downField("weightunitmeasurecode").as[Option[UnitmeasureId]]
        weight <- c.downField("weight").as[Option[BigDecimal]]
        daystomanufacture <- c.downField("daystomanufacture").as[Int]
        productline <- c.downField("productline").as[Option[/* bpchar */ String]]
        `class` <- c.downField("class").as[Option[/* bpchar */ String]]
        style <- c.downField("style").as[Option[/* bpchar */ String]]
        productsubcategoryid <- c.downField("productsubcategoryid").as[Option[ProductsubcategoryId]]
        productmodelid <- c.downField("productmodelid").as[Option[ProductmodelId]]
        sellstartdate <- c.downField("sellstartdate").as[LocalDateTime]
        sellenddate <- c.downField("sellenddate").as[Option[LocalDateTime]]
        discontinueddate <- c.downField("discontinueddate").as[Option[LocalDateTime]]
        productid <- c.downField("productid").as[Defaulted[ProductId]]
        makeflag <- c.downField("makeflag").as[Defaulted[Flag]]
        finishedgoodsflag <- c.downField("finishedgoodsflag").as[Defaulted[Flag]]
        rowguid <- c.downField("rowguid").as[Defaulted[UUID]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield ProductRowUnsaved(name, productnumber, color, safetystocklevel, reorderpoint, standardcost, listprice, size, sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, `class`, style, productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, productid, makeflag, finishedgoodsflag, rowguid, modifieddate)
  implicit val encoder: Encoder[ProductRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "productnumber" := row.productnumber,
        "color" := row.color,
        "safetystocklevel" := row.safetystocklevel,
        "reorderpoint" := row.reorderpoint,
        "standardcost" := row.standardcost,
        "listprice" := row.listprice,
        "size" := row.size,
        "sizeunitmeasurecode" := row.sizeunitmeasurecode,
        "weightunitmeasurecode" := row.weightunitmeasurecode,
        "weight" := row.weight,
        "daystomanufacture" := row.daystomanufacture,
        "productline" := row.productline,
        "class" := row.`class`,
        "style" := row.style,
        "productsubcategoryid" := row.productsubcategoryid,
        "productmodelid" := row.productmodelid,
        "sellstartdate" := row.sellstartdate,
        "sellenddate" := row.sellenddate,
        "discontinueddate" := row.discontinueddate,
        "productid" := row.productid,
        "makeflag" := row.makeflag,
        "finishedgoodsflag" := row.finishedgoodsflag,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
