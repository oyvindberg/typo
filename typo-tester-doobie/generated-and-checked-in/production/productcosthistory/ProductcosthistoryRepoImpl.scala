/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productcosthistory

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object ProductcosthistoryRepoImpl extends ProductcosthistoryRepo {
  override def delete(compositeId: ProductcosthistoryId): ConnectionIO[Boolean] = {
    sql"delete from production.productcosthistory where productid = ${compositeId.productid} AND startdate = ${compositeId.startdate}".update.run.map(_ > 0)
  }
  override def insert(unsaved: ProductcosthistoryRow): ConnectionIO[ProductcosthistoryRow] = {
    sql"""insert into production.productcosthistory(productid, startdate, enddate, standardcost, modifieddate)
          values (${unsaved.productid}::int4, ${unsaved.startdate}::timestamp, ${unsaved.enddate}::timestamp, ${unsaved.standardcost}::numeric, ${unsaved.modifieddate}::timestamp)
          returning productid, startdate, enddate, standardcost, modifieddate
       """.query.unique
  }
  override def insert(unsaved: ProductcosthistoryRowUnsaved): ConnectionIO[ProductcosthistoryRow] = {
    val fs = List(
      Some((Fragment.const(s"productid"), fr"${unsaved.productid}::int4")),
      Some((Fragment.const(s"startdate"), fr"${unsaved.startdate}::timestamp")),
      Some((Fragment.const(s"enddate"), fr"${unsaved.enddate}::timestamp")),
      Some((Fragment.const(s"standardcost"), fr"${unsaved.standardcost}::numeric")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.productcosthistory default values
            returning productid, startdate, enddate, standardcost, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.productcosthistory(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning productid, startdate, enddate, standardcost, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, ProductcosthistoryRow] = {
    sql"select productid, startdate, enddate, standardcost, modifieddate from production.productcosthistory".query[ProductcosthistoryRow].stream
  }
  override def selectByFieldValues(fieldValues: List[ProductcosthistoryFieldOrIdValue[_]]): Stream[ConnectionIO, ProductcosthistoryRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case ProductcosthistoryFieldValue.productid(value) => fr"productid = $value"
        case ProductcosthistoryFieldValue.startdate(value) => fr"startdate = $value"
        case ProductcosthistoryFieldValue.enddate(value) => fr"enddate = $value"
        case ProductcosthistoryFieldValue.standardcost(value) => fr"standardcost = $value"
        case ProductcosthistoryFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from production.productcosthistory $where".query[ProductcosthistoryRow].stream
  
  }
  override def selectById(compositeId: ProductcosthistoryId): ConnectionIO[Option[ProductcosthistoryRow]] = {
    sql"select productid, startdate, enddate, standardcost, modifieddate from production.productcosthistory where productid = ${compositeId.productid} AND startdate = ${compositeId.startdate}".query[ProductcosthistoryRow].option
  }
  override def update(row: ProductcosthistoryRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update production.productcosthistory
          set enddate = ${row.enddate}::timestamp,
              standardcost = ${row.standardcost}::numeric,
              modifieddate = ${row.modifieddate}::timestamp
          where productid = ${compositeId.productid} AND startdate = ${compositeId.startdate}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(compositeId: ProductcosthistoryId, fieldValues: List[ProductcosthistoryFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case ProductcosthistoryFieldValue.enddate(value) => fr"enddate = $value"
            case ProductcosthistoryFieldValue.standardcost(value) => fr"standardcost = $value"
            case ProductcosthistoryFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update production.productcosthistory
              $updates
              where productid = ${compositeId.productid} AND startdate = ${compositeId.startdate}
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: ProductcosthistoryRow): ConnectionIO[ProductcosthistoryRow] = {
    sql"""insert into production.productcosthistory(productid, startdate, enddate, standardcost, modifieddate)
          values (
            ${unsaved.productid}::int4,
            ${unsaved.startdate}::timestamp,
            ${unsaved.enddate}::timestamp,
            ${unsaved.standardcost}::numeric,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productid, startdate)
          do update set
            enddate = EXCLUDED.enddate,
            standardcost = EXCLUDED.standardcost,
            modifieddate = EXCLUDED.modifieddate
          returning productid, startdate, enddate, standardcost, modifieddate
       """.query.unique
  }
  implicit val read: Read[ProductcosthistoryRow] =
    new Read[ProductcosthistoryRow](
      gets = List(
        (Get[ProductId], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ProductcosthistoryRow(
        productid = Get[ProductId].unsafeGetNonNullable(rs, i + 0),
        startdate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 1),
        enddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 2),
        standardcost = Get[BigDecimal].unsafeGetNonNullable(rs, i + 3),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 4)
      )
    )
  

}
