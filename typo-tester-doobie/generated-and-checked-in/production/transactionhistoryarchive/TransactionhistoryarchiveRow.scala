/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package transactionhistoryarchive

import adventureworks.TypoLocalDateTime
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class TransactionhistoryarchiveRow(
  /** Primary key for TransactionHistoryArchive records. */
  transactionid: TransactionhistoryarchiveId,
  /** Product identification number. Foreign key to Product.ProductID. */
  productid: Int,
  /** Purchase order, sales order, or work order identification number. */
  referenceorderid: Int,
  /** Line number associated with the purchase order, sales order, or work order. */
  referenceorderlineid: Int,
  /** Date and time of the transaction. */
  transactiondate: TypoLocalDateTime,
  /** W = Work Order, S = Sales Order, P = Purchase Order */
  transactiontype: /* bpchar */ String,
  /** Product quantity. */
  quantity: Int,
  /** Product cost. */
  actualcost: BigDecimal,
  modifieddate: TypoLocalDateTime
)

object TransactionhistoryarchiveRow {
  implicit val decoder: Decoder[TransactionhistoryarchiveRow] = Decoder.forProduct9[TransactionhistoryarchiveRow, TransactionhistoryarchiveId, Int, Int, Int, TypoLocalDateTime, /* bpchar */ String, Int, BigDecimal, TypoLocalDateTime]("transactionid", "productid", "referenceorderid", "referenceorderlineid", "transactiondate", "transactiontype", "quantity", "actualcost", "modifieddate")(TransactionhistoryarchiveRow.apply)
  implicit val encoder: Encoder[TransactionhistoryarchiveRow] = Encoder.forProduct9[TransactionhistoryarchiveRow, TransactionhistoryarchiveId, Int, Int, Int, TypoLocalDateTime, /* bpchar */ String, Int, BigDecimal, TypoLocalDateTime]("transactionid", "productid", "referenceorderid", "referenceorderlineid", "transactiondate", "transactiontype", "quantity", "actualcost", "modifieddate")(x => (x.transactionid, x.productid, x.referenceorderid, x.referenceorderlineid, x.transactiondate, x.transactiontype, x.quantity, x.actualcost, x.modifieddate))
  implicit val read: Read[TransactionhistoryarchiveRow] = new Read[TransactionhistoryarchiveRow](
    gets = List(
      (Get[TransactionhistoryarchiveId], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls),
      (Get[/* bpchar */ String], Nullability.NoNulls),
      (Get[Int], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => TransactionhistoryarchiveRow(
      transactionid = Get[TransactionhistoryarchiveId].unsafeGetNonNullable(rs, i + 0),
      productid = Get[Int].unsafeGetNonNullable(rs, i + 1),
      referenceorderid = Get[Int].unsafeGetNonNullable(rs, i + 2),
      referenceorderlineid = Get[Int].unsafeGetNonNullable(rs, i + 3),
      transactiondate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 4),
      transactiontype = Get[/* bpchar */ String].unsafeGetNonNullable(rs, i + 5),
      quantity = Get[Int].unsafeGetNonNullable(rs, i + 6),
      actualcost = Get[BigDecimal].unsafeGetNonNullable(rs, i + 7),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 8)
    )
  )
}
