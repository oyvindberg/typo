/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package transactionhistoryarchive

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class TransactionhistoryarchiveRepoMock(toRow: Function1[TransactionhistoryarchiveRowUnsaved, TransactionhistoryarchiveRow],
                                        map: scala.collection.mutable.Map[TransactionhistoryarchiveId, TransactionhistoryarchiveRow] = scala.collection.mutable.Map.empty) extends TransactionhistoryarchiveRepo {
  override def delete(transactionid: TransactionhistoryarchiveId): ConnectionIO[Boolean] = {
    delay(map.remove(transactionid).isDefined)
  }
  override def insert(unsaved: TransactionhistoryarchiveRow): ConnectionIO[TransactionhistoryarchiveRow] = {
    delay {
      if (map.contains(unsaved.transactionid))
        sys.error(s"id ${unsaved.transactionid} already exists")
      else
        map.put(unsaved.transactionid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: TransactionhistoryarchiveRowUnsaved): ConnectionIO[TransactionhistoryarchiveRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, TransactionhistoryarchiveRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(transactionid: TransactionhistoryarchiveId): ConnectionIO[Option[TransactionhistoryarchiveRow]] = {
    delay(map.get(transactionid))
  }
  override def selectByIds(transactionids: Array[TransactionhistoryarchiveId]): Stream[ConnectionIO, TransactionhistoryarchiveRow] = {
    Stream.emits(transactionids.flatMap(map.get).toList)
  }
  override def update(row: TransactionhistoryarchiveRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.transactionid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.transactionid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: TransactionhistoryarchiveRow): ConnectionIO[TransactionhistoryarchiveRow] = {
    delay {
      map.put(unsaved.transactionid, unsaved)
      unsaved
    }
  }
}
