/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorderrouting

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream

object WorkorderroutingRepoImpl extends WorkorderroutingRepo {
  override def delete(compositeId: WorkorderroutingId): ConnectionIO[Boolean] = {
    sql"delete from production.workorderrouting where workorderid = ${compositeId.workorderid} AND productid = ${compositeId.productid} AND operationsequence = ${compositeId.operationsequence}".update.run.map(_ > 0)
  }
  override def insert(unsaved: WorkorderroutingRow): ConnectionIO[WorkorderroutingRow] = {
    sql"""insert into production.workorderrouting(workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate)
          values (${unsaved.workorderid}::int4, ${unsaved.productid}::int4, ${unsaved.operationsequence}::int2, ${unsaved.locationid}::int2, ${unsaved.scheduledstartdate}::timestamp, ${unsaved.scheduledenddate}::timestamp, ${unsaved.actualstartdate}::timestamp, ${unsaved.actualenddate}::timestamp, ${unsaved.actualresourcehrs}::numeric, ${unsaved.plannedcost}::numeric, ${unsaved.actualcost}::numeric, ${unsaved.modifieddate}::timestamp)
          returning workorderid, productid, operationsequence, locationid, scheduledstartdate::text, scheduledenddate::text, actualstartdate::text, actualenddate::text, actualresourcehrs, plannedcost, actualcost, modifieddate::text
       """.query[WorkorderroutingRow].unique
  }
  override def insert(unsaved: WorkorderroutingRowUnsaved): ConnectionIO[WorkorderroutingRow] = {
    val fs = List(
      Some((Fragment.const(s"workorderid"), fr"${unsaved.workorderid}::int4")),
      Some((Fragment.const(s"productid"), fr"${unsaved.productid}::int4")),
      Some((Fragment.const(s"operationsequence"), fr"${unsaved.operationsequence}::int2")),
      Some((Fragment.const(s"locationid"), fr"${unsaved.locationid}::int2")),
      Some((Fragment.const(s"scheduledstartdate"), fr"${unsaved.scheduledstartdate}::timestamp")),
      Some((Fragment.const(s"scheduledenddate"), fr"${unsaved.scheduledenddate}::timestamp")),
      Some((Fragment.const(s"actualstartdate"), fr"${unsaved.actualstartdate}::timestamp")),
      Some((Fragment.const(s"actualenddate"), fr"${unsaved.actualenddate}::timestamp")),
      Some((Fragment.const(s"actualresourcehrs"), fr"${unsaved.actualresourcehrs}::numeric")),
      Some((Fragment.const(s"plannedcost"), fr"${unsaved.plannedcost}::numeric")),
      Some((Fragment.const(s"actualcost"), fr"${unsaved.actualcost}::numeric")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.workorderrouting default values
            returning workorderid, productid, operationsequence, locationid, scheduledstartdate::text, scheduledenddate::text, actualstartdate::text, actualenddate::text, actualresourcehrs, plannedcost, actualcost, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.workorderrouting(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning workorderid, productid, operationsequence, locationid, scheduledstartdate::text, scheduledenddate::text, actualstartdate::text, actualenddate::text, actualresourcehrs, plannedcost, actualcost, modifieddate::text
         """
    }
    q.query[WorkorderroutingRow].unique
  
  }
  override def selectAll: Stream[ConnectionIO, WorkorderroutingRow] = {
    sql"select workorderid, productid, operationsequence, locationid, scheduledstartdate::text, scheduledenddate::text, actualstartdate::text, actualenddate::text, actualresourcehrs, plannedcost, actualcost, modifieddate::text from production.workorderrouting".query[WorkorderroutingRow].stream
  }
  override def selectById(compositeId: WorkorderroutingId): ConnectionIO[Option[WorkorderroutingRow]] = {
    sql"select workorderid, productid, operationsequence, locationid, scheduledstartdate::text, scheduledenddate::text, actualstartdate::text, actualenddate::text, actualresourcehrs, plannedcost, actualcost, modifieddate::text from production.workorderrouting where workorderid = ${compositeId.workorderid} AND productid = ${compositeId.productid} AND operationsequence = ${compositeId.operationsequence}".query[WorkorderroutingRow].option
  }
  override def update(row: WorkorderroutingRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update production.workorderrouting
          set locationid = ${row.locationid}::int2,
              scheduledstartdate = ${row.scheduledstartdate}::timestamp,
              scheduledenddate = ${row.scheduledenddate}::timestamp,
              actualstartdate = ${row.actualstartdate}::timestamp,
              actualenddate = ${row.actualenddate}::timestamp,
              actualresourcehrs = ${row.actualresourcehrs}::numeric,
              plannedcost = ${row.plannedcost}::numeric,
              actualcost = ${row.actualcost}::numeric,
              modifieddate = ${row.modifieddate}::timestamp
          where workorderid = ${compositeId.workorderid} AND productid = ${compositeId.productid} AND operationsequence = ${compositeId.operationsequence}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: WorkorderroutingRow): ConnectionIO[WorkorderroutingRow] = {
    sql"""insert into production.workorderrouting(workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate)
          values (
            ${unsaved.workorderid}::int4,
            ${unsaved.productid}::int4,
            ${unsaved.operationsequence}::int2,
            ${unsaved.locationid}::int2,
            ${unsaved.scheduledstartdate}::timestamp,
            ${unsaved.scheduledenddate}::timestamp,
            ${unsaved.actualstartdate}::timestamp,
            ${unsaved.actualenddate}::timestamp,
            ${unsaved.actualresourcehrs}::numeric,
            ${unsaved.plannedcost}::numeric,
            ${unsaved.actualcost}::numeric,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (workorderid, productid, operationsequence)
          do update set
            locationid = EXCLUDED.locationid,
            scheduledstartdate = EXCLUDED.scheduledstartdate,
            scheduledenddate = EXCLUDED.scheduledenddate,
            actualstartdate = EXCLUDED.actualstartdate,
            actualenddate = EXCLUDED.actualenddate,
            actualresourcehrs = EXCLUDED.actualresourcehrs,
            plannedcost = EXCLUDED.plannedcost,
            actualcost = EXCLUDED.actualcost,
            modifieddate = EXCLUDED.modifieddate
          returning workorderid, productid, operationsequence, locationid, scheduledstartdate::text, scheduledenddate::text, actualstartdate::text, actualenddate::text, actualresourcehrs, plannedcost, actualcost, modifieddate::text
       """.query[WorkorderroutingRow].unique
  }
}
