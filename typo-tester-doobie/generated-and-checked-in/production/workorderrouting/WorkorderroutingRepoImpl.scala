/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorderrouting

import adventureworks.Defaulted
import adventureworks.production.location.LocationId
import adventureworks.production.workorder.WorkorderId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object WorkorderroutingRepoImpl extends WorkorderroutingRepo {
  override def delete(compositeId: WorkorderroutingId): ConnectionIO[Boolean] = {
    sql"delete from production.workorderrouting where workorderid = ${compositeId.workorderid} AND productid = ${compositeId.productid} AND operationsequence = ${compositeId.operationsequence}".update.run.map(_ > 0)
  }
  override def insert(unsaved: WorkorderroutingRow): ConnectionIO[WorkorderroutingRow] = {
    sql"""insert into production.workorderrouting(workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate)
          values (${unsaved.workorderid}::int4, ${unsaved.productid}::int4, ${unsaved.operationsequence}::int2, ${unsaved.locationid}::int2, ${unsaved.scheduledstartdate}::timestamp, ${unsaved.scheduledenddate}::timestamp, ${unsaved.actualstartdate}::timestamp, ${unsaved.actualenddate}::timestamp, ${unsaved.actualresourcehrs}::numeric, ${unsaved.plannedcost}::numeric, ${unsaved.actualcost}::numeric, ${unsaved.modifieddate}::timestamp)
          returning workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate
       """.query.unique
  }
  override def insert(unsaved: WorkorderroutingRowUnsaved): ConnectionIO[WorkorderroutingRow] = {
    val fs = List(
      Some((Fragment.const(s"workorderid"), fr"${unsaved.workorderid}::int4")),
      Some((Fragment.const(s"productid"), fr"${unsaved.productid}::int4")),
      Some((Fragment.const(s"operationsequence"), fr"${unsaved.operationsequence}::int2")),
      Some((Fragment.const(s"locationid"), fr"${unsaved.locationid}::int2")),
      Some((Fragment.const(s"scheduledstartdate"), fr"${unsaved.scheduledstartdate}::timestamp")),
      Some((Fragment.const(s"scheduledenddate"), fr"${unsaved.scheduledenddate}::timestamp")),
      Some((Fragment.const(s"actualstartdate"), fr"${unsaved.actualstartdate}::timestamp")),
      Some((Fragment.const(s"actualenddate"), fr"${unsaved.actualenddate}::timestamp")),
      Some((Fragment.const(s"actualresourcehrs"), fr"${unsaved.actualresourcehrs}::numeric")),
      Some((Fragment.const(s"plannedcost"), fr"${unsaved.plannedcost}::numeric")),
      Some((Fragment.const(s"actualcost"), fr"${unsaved.actualcost}::numeric")),
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.workorderrouting default values
            returning workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.workorderrouting(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, WorkorderroutingRow] = {
    sql"select workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate from production.workorderrouting".query[WorkorderroutingRow].stream
  }
  override def selectByFieldValues(fieldValues: List[WorkorderroutingFieldOrIdValue[_]]): Stream[ConnectionIO, WorkorderroutingRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case WorkorderroutingFieldValue.workorderid(value) => fr"workorderid = $value"
        case WorkorderroutingFieldValue.productid(value) => fr"productid = $value"
        case WorkorderroutingFieldValue.operationsequence(value) => fr"operationsequence = $value"
        case WorkorderroutingFieldValue.locationid(value) => fr"locationid = $value"
        case WorkorderroutingFieldValue.scheduledstartdate(value) => fr"scheduledstartdate = $value"
        case WorkorderroutingFieldValue.scheduledenddate(value) => fr"scheduledenddate = $value"
        case WorkorderroutingFieldValue.actualstartdate(value) => fr"actualstartdate = $value"
        case WorkorderroutingFieldValue.actualenddate(value) => fr"actualenddate = $value"
        case WorkorderroutingFieldValue.actualresourcehrs(value) => fr"actualresourcehrs = $value"
        case WorkorderroutingFieldValue.plannedcost(value) => fr"plannedcost = $value"
        case WorkorderroutingFieldValue.actualcost(value) => fr"actualcost = $value"
        case WorkorderroutingFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from production.workorderrouting $where".query[WorkorderroutingRow].stream
  
  }
  override def selectById(compositeId: WorkorderroutingId): ConnectionIO[Option[WorkorderroutingRow]] = {
    sql"select workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate from production.workorderrouting where workorderid = ${compositeId.workorderid} AND productid = ${compositeId.productid} AND operationsequence = ${compositeId.operationsequence}".query[WorkorderroutingRow].option
  }
  override def update(row: WorkorderroutingRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update production.workorderrouting
          set locationid = ${row.locationid}::int2,
              scheduledstartdate = ${row.scheduledstartdate}::timestamp,
              scheduledenddate = ${row.scheduledenddate}::timestamp,
              actualstartdate = ${row.actualstartdate}::timestamp,
              actualenddate = ${row.actualenddate}::timestamp,
              actualresourcehrs = ${row.actualresourcehrs}::numeric,
              plannedcost = ${row.plannedcost}::numeric,
              actualcost = ${row.actualcost}::numeric,
              modifieddate = ${row.modifieddate}::timestamp
          where workorderid = ${compositeId.workorderid} AND productid = ${compositeId.productid} AND operationsequence = ${compositeId.operationsequence}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(compositeId: WorkorderroutingId, fieldValues: List[WorkorderroutingFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case WorkorderroutingFieldValue.locationid(value) => fr"locationid = $value"
            case WorkorderroutingFieldValue.scheduledstartdate(value) => fr"scheduledstartdate = $value"
            case WorkorderroutingFieldValue.scheduledenddate(value) => fr"scheduledenddate = $value"
            case WorkorderroutingFieldValue.actualstartdate(value) => fr"actualstartdate = $value"
            case WorkorderroutingFieldValue.actualenddate(value) => fr"actualenddate = $value"
            case WorkorderroutingFieldValue.actualresourcehrs(value) => fr"actualresourcehrs = $value"
            case WorkorderroutingFieldValue.plannedcost(value) => fr"plannedcost = $value"
            case WorkorderroutingFieldValue.actualcost(value) => fr"actualcost = $value"
            case WorkorderroutingFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update production.workorderrouting
              $updates
              where workorderid = ${compositeId.workorderid} AND productid = ${compositeId.productid} AND operationsequence = ${compositeId.operationsequence}
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: WorkorderroutingRow): ConnectionIO[WorkorderroutingRow] = {
    sql"""insert into production.workorderrouting(workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate)
          values (
            ${unsaved.workorderid}::int4,
            ${unsaved.productid}::int4,
            ${unsaved.operationsequence}::int2,
            ${unsaved.locationid}::int2,
            ${unsaved.scheduledstartdate}::timestamp,
            ${unsaved.scheduledenddate}::timestamp,
            ${unsaved.actualstartdate}::timestamp,
            ${unsaved.actualenddate}::timestamp,
            ${unsaved.actualresourcehrs}::numeric,
            ${unsaved.plannedcost}::numeric,
            ${unsaved.actualcost}::numeric,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (workorderid, productid, operationsequence)
          do update set
            locationid = EXCLUDED.locationid,
            scheduledstartdate = EXCLUDED.scheduledstartdate,
            scheduledenddate = EXCLUDED.scheduledenddate,
            actualstartdate = EXCLUDED.actualstartdate,
            actualenddate = EXCLUDED.actualenddate,
            actualresourcehrs = EXCLUDED.actualresourcehrs,
            plannedcost = EXCLUDED.plannedcost,
            actualcost = EXCLUDED.actualcost,
            modifieddate = EXCLUDED.modifieddate
          returning workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate
       """.query.unique
  }
  implicit val read: Read[WorkorderroutingRow] =
    new Read[WorkorderroutingRow](
      gets = List(
        (Get[WorkorderId], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[LocationId], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => WorkorderroutingRow(
        workorderid = Get[WorkorderId].unsafeGetNonNullable(rs, i + 0),
        productid = Get[Int].unsafeGetNonNullable(rs, i + 1),
        operationsequence = Get[Int].unsafeGetNonNullable(rs, i + 2),
        locationid = Get[LocationId].unsafeGetNonNullable(rs, i + 3),
        scheduledstartdate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 4),
        scheduledenddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 5),
        actualstartdate = Get[LocalDateTime].unsafeGetNullable(rs, i + 6),
        actualenddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 7),
        actualresourcehrs = Get[BigDecimal].unsafeGetNullable(rs, i + 8),
        plannedcost = Get[BigDecimal].unsafeGetNonNullable(rs, i + 9),
        actualcost = Get[BigDecimal].unsafeGetNullable(rs, i + 10),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 11)
      )
    )
  

}
