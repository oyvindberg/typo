/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productreview

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `production.productreview` which has not been persisted yet */
case class ProductreviewRowUnsaved(
  /** Product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productid: ProductId,
  /** Name of the reviewer. */
  reviewername: Name,
  /** Reviewer's e-mail address. */
  emailaddress: String,
  /** Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating. */
  rating: Int,
  /** Reviewer's comments */
  comments: Option[String],
  /** Default: nextval('production.productreview_productreviewid_seq'::regclass)
      Primary key for ProductReview records. */
  productreviewid: Defaulted[ProductreviewId] = Defaulted.UseDefault,
  /** Default: now()
      Date review was submitted. */
  reviewdate: Defaulted[LocalDateTime] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(productreviewidDefault: => ProductreviewId, reviewdateDefault: => LocalDateTime, modifieddateDefault: => LocalDateTime): ProductreviewRow =
    ProductreviewRow(
      productid = productid,
      reviewername = reviewername,
      emailaddress = emailaddress,
      rating = rating,
      comments = comments,
      productreviewid = productreviewid match {
                          case Defaulted.UseDefault => productreviewidDefault
                          case Defaulted.Provided(value) => value
                        },
      reviewdate = reviewdate match {
                     case Defaulted.UseDefault => reviewdateDefault
                     case Defaulted.Provided(value) => value
                   },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductreviewRowUnsaved {
  implicit val decoder: Decoder[ProductreviewRowUnsaved] =
    (c: HCursor) =>
      for {
        productid <- c.downField("productid").as[ProductId]
        reviewername <- c.downField("reviewername").as[Name]
        emailaddress <- c.downField("emailaddress").as[String]
        rating <- c.downField("rating").as[Int]
        comments <- c.downField("comments").as[Option[String]]
        productreviewid <- c.downField("productreviewid").as[Defaulted[ProductreviewId]]
        reviewdate <- c.downField("reviewdate").as[Defaulted[LocalDateTime]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield ProductreviewRowUnsaved(productid, reviewername, emailaddress, rating, comments, productreviewid, reviewdate, modifieddate)
  implicit val encoder: Encoder[ProductreviewRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productid" := row.productid,
        "reviewername" := row.reviewername,
        "emailaddress" := row.emailaddress,
        "rating" := row.rating,
        "comments" := row.comments,
        "productreviewid" := row.productreviewid,
        "reviewdate" := row.reviewdate,
        "modifieddate" := row.modifieddate
      )}
}
