/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productreview

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class ProductreviewRepoMock(toRow: Function1[ProductreviewRowUnsaved, ProductreviewRow],
                            map: scala.collection.mutable.Map[ProductreviewId, ProductreviewRow] = scala.collection.mutable.Map.empty) extends ProductreviewRepo {
  override def delete(productreviewid: ProductreviewId): ConnectionIO[Boolean] = {
    delay(map.remove(productreviewid).isDefined)
  }
  override def insert(unsaved: ProductreviewRow): ConnectionIO[ProductreviewRow] = {
    delay {
      if (map.contains(unsaved.productreviewid))
        sys.error(s"id ${unsaved.productreviewid} already exists")
      else
        map.put(unsaved.productreviewid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: ProductreviewRowUnsaved): ConnectionIO[ProductreviewRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, ProductreviewRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(productreviewid: ProductreviewId): ConnectionIO[Option[ProductreviewRow]] = {
    delay(map.get(productreviewid))
  }
  override def selectByIds(productreviewids: Array[ProductreviewId]): Stream[ConnectionIO, ProductreviewRow] = {
    Stream.emits(productreviewids.flatMap(map.get).toList)
  }
  override def update(row: ProductreviewRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.productreviewid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.productreviewid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: ProductreviewRow): ConnectionIO[ProductreviewRow] = {
    delay {
      map.put(unsaved.productreviewid, unsaved)
      unsaved
    }
  }
}
