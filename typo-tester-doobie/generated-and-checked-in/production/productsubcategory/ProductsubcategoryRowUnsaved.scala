/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productsubcategory

import adventureworks.Defaulted
import adventureworks.production.productcategory.ProductcategoryId
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

/** This class corresponds to a row in table `production.productsubcategory` which has not been persisted yet */
case class ProductsubcategoryRowUnsaved(
  /** Product category identification number. Foreign key to ProductCategory.ProductCategoryID.
      Points to [[productcategory.ProductcategoryRow.productcategoryid]] */
  productcategoryid: ProductcategoryId,
  /** Subcategory description. */
  name: Name,
  /** Default: nextval('production.productsubcategory_productsubcategoryid_seq'::regclass)
      Primary key for ProductSubcategory records. */
  productsubcategoryid: Defaulted[ProductsubcategoryId] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(productsubcategoryidDefault: => ProductsubcategoryId, rowguidDefault: => UUID, modifieddateDefault: => LocalDateTime): ProductsubcategoryRow =
    ProductsubcategoryRow(
      productcategoryid = productcategoryid,
      name = name,
      productsubcategoryid = productsubcategoryid match {
                               case Defaulted.UseDefault => productsubcategoryidDefault
                               case Defaulted.Provided(value) => value
                             },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductsubcategoryRowUnsaved {
  implicit val decoder: Decoder[ProductsubcategoryRowUnsaved] =
    (c: HCursor) =>
      for {
        productcategoryid <- c.downField("productcategoryid").as[ProductcategoryId]
        name <- c.downField("name").as[Name]
        productsubcategoryid <- c.downField("productsubcategoryid").as[Defaulted[ProductsubcategoryId]]
        rowguid <- c.downField("rowguid").as[Defaulted[UUID]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield ProductsubcategoryRowUnsaved(productcategoryid, name, productsubcategoryid, rowguid, modifieddate)
  implicit val encoder: Encoder[ProductsubcategoryRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productcategoryid" := row.productcategoryid,
        "name" := row.name,
        "productsubcategoryid" := row.productsubcategoryid,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
