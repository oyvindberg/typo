/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productsubcategory

import adventureworks.Defaulted
import adventureworks.production.productcategory.ProductcategoryId
import adventureworks.public.Name
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object ProductsubcategoryRepoImpl extends ProductsubcategoryRepo {
  override def delete(productsubcategoryid: ProductsubcategoryId): ConnectionIO[Boolean] = {
    sql"delete from production.productsubcategory where productsubcategoryid = $productsubcategoryid".update.run.map(_ > 0)
  }
  override def insert(unsaved: ProductsubcategoryRow): ConnectionIO[ProductsubcategoryRow] = {
    sql"""insert into production.productsubcategory(productsubcategoryid, productcategoryid, "name", rowguid, modifieddate)
          values (${unsaved.productsubcategoryid}::int4, ${unsaved.productcategoryid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning productsubcategoryid, productcategoryid, "name", rowguid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: ProductsubcategoryRowUnsaved): ConnectionIO[ProductsubcategoryRow] = {
    val fs = List(
      Some((Fragment.const(s"productcategoryid"), fr"${unsaved.productcategoryid}::int4")),
      Some((Fragment.const(s""""name""""), fr"""${unsaved.name}::"public"."Name"""")),
      unsaved.productsubcategoryid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"productsubcategoryid"), fr"${value: ProductsubcategoryId}::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.productsubcategory default values
            returning productsubcategoryid, productcategoryid, "name", rowguid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.productsubcategory(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning productsubcategoryid, productcategoryid, "name", rowguid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, ProductsubcategoryRow] = {
    sql"""select productsubcategoryid, productcategoryid, "name", rowguid, modifieddate from production.productsubcategory""".query[ProductsubcategoryRow].stream
  }
  override def selectByFieldValues(fieldValues: List[ProductsubcategoryFieldOrIdValue[_]]): Stream[ConnectionIO, ProductsubcategoryRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case ProductsubcategoryFieldValue.productsubcategoryid(value) => fr"productsubcategoryid = $value"
        case ProductsubcategoryFieldValue.productcategoryid(value) => fr"productcategoryid = $value"
        case ProductsubcategoryFieldValue.name(value) => fr""""name" = $value"""
        case ProductsubcategoryFieldValue.rowguid(value) => fr"rowguid = $value"
        case ProductsubcategoryFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from production.productsubcategory $where".query[ProductsubcategoryRow].stream
  
  }
  override def selectById(productsubcategoryid: ProductsubcategoryId): ConnectionIO[Option[ProductsubcategoryRow]] = {
    sql"""select productsubcategoryid, productcategoryid, "name", rowguid, modifieddate from production.productsubcategory where productsubcategoryid = $productsubcategoryid""".query[ProductsubcategoryRow].option
  }
  override def selectByIds(productsubcategoryids: Array[ProductsubcategoryId]): Stream[ConnectionIO, ProductsubcategoryRow] = {
    sql"""select productsubcategoryid, productcategoryid, "name", rowguid, modifieddate from production.productsubcategory where productsubcategoryid = ANY($productsubcategoryids)""".query[ProductsubcategoryRow].stream
  }
  override def update(row: ProductsubcategoryRow): ConnectionIO[Boolean] = {
    val productsubcategoryid = row.productsubcategoryid
    sql"""update production.productsubcategory
          set productcategoryid = ${row.productcategoryid}::int4,
              "name" = ${row.name}::"public"."Name",
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where productsubcategoryid = $productsubcategoryid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(productsubcategoryid: ProductsubcategoryId, fieldValues: List[ProductsubcategoryFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case ProductsubcategoryFieldValue.productcategoryid(value) => fr"productcategoryid = $value"
            case ProductsubcategoryFieldValue.name(value) => fr""""name" = $value"""
            case ProductsubcategoryFieldValue.rowguid(value) => fr"rowguid = $value"
            case ProductsubcategoryFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update production.productsubcategory
              $updates
              where productsubcategoryid = $productsubcategoryid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: ProductsubcategoryRow): ConnectionIO[ProductsubcategoryRow] = {
    sql"""insert into production.productsubcategory(productsubcategoryid, productcategoryid, "name", rowguid, modifieddate)
          values (
            ${unsaved.productsubcategoryid}::int4,
            ${unsaved.productcategoryid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productsubcategoryid)
          do update set
            productcategoryid = EXCLUDED.productcategoryid,
            "name" = EXCLUDED."name",
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning productsubcategoryid, productcategoryid, "name", rowguid, modifieddate
       """.query.unique
  }
  implicit val read: Read[ProductsubcategoryRow] =
    new Read[ProductsubcategoryRow](
      gets = List(
        (Get[ProductsubcategoryId], Nullability.NoNulls),
        (Get[ProductcategoryId], Nullability.NoNulls),
        (Get[Name], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ProductsubcategoryRow(
        productsubcategoryid = Get[ProductsubcategoryId].unsafeGetNonNullable(rs, i + 0),
        productcategoryid = Get[ProductcategoryId].unsafeGetNonNullable(rs, i + 1),
        name = Get[Name].unsafeGetNonNullable(rs, i + 2),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 3),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 4)
      )
    )
  

}
