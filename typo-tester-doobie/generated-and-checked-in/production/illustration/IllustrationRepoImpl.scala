/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package illustration

import adventureworks.Defaulted
import adventureworks.TypoXml
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object IllustrationRepoImpl extends IllustrationRepo {
  override def delete(illustrationid: IllustrationId): ConnectionIO[Boolean] = {
    sql"delete from production.illustration where illustrationid = $illustrationid".update.run.map(_ > 0)
  }
  override def insert(unsaved: IllustrationRow): ConnectionIO[IllustrationRow] = {
    sql"""insert into production.illustration(illustrationid, diagram, modifieddate)
          values (${unsaved.illustrationid}::int4, ${unsaved.diagram}::xml, ${unsaved.modifieddate}::timestamp)
          returning illustrationid, diagram, modifieddate
       """.query.unique
  }
  override def insert(unsaved: IllustrationRowUnsaved): ConnectionIO[IllustrationRow] = {
    val fs = List(
      Some((Fragment.const(s"diagram"), fr"${unsaved.diagram}::xml")),
      unsaved.illustrationid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"illustrationid"), fr"${value: IllustrationId}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.illustration default values
            returning illustrationid, diagram, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.illustration(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning illustrationid, diagram, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, IllustrationRow] = {
    sql"select illustrationid, diagram, modifieddate from production.illustration".query[IllustrationRow].stream
  }
  override def selectByFieldValues(fieldValues: List[IllustrationFieldOrIdValue[_]]): Stream[ConnectionIO, IllustrationRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case IllustrationFieldValue.illustrationid(value) => fr"illustrationid = $value"
        case IllustrationFieldValue.diagram(value) => fr"diagram = $value"
        case IllustrationFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from production.illustration $where".query[IllustrationRow].stream
  
  }
  override def selectById(illustrationid: IllustrationId): ConnectionIO[Option[IllustrationRow]] = {
    sql"select illustrationid, diagram, modifieddate from production.illustration where illustrationid = $illustrationid".query[IllustrationRow].option
  }
  override def selectByIds(illustrationids: Array[IllustrationId]): Stream[ConnectionIO, IllustrationRow] = {
    sql"select illustrationid, diagram, modifieddate from production.illustration where illustrationid = ANY($illustrationids)".query[IllustrationRow].stream
  }
  override def update(row: IllustrationRow): ConnectionIO[Boolean] = {
    val illustrationid = row.illustrationid
    sql"""update production.illustration
          set diagram = ${row.diagram}::xml,
              modifieddate = ${row.modifieddate}::timestamp
          where illustrationid = $illustrationid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(illustrationid: IllustrationId, fieldValues: List[IllustrationFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case IllustrationFieldValue.diagram(value) => fr"diagram = $value"
            case IllustrationFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update production.illustration
              $updates
              where illustrationid = $illustrationid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: IllustrationRow): ConnectionIO[IllustrationRow] = {
    sql"""insert into production.illustration(illustrationid, diagram, modifieddate)
          values (
            ${unsaved.illustrationid}::int4,
            ${unsaved.diagram}::xml,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (illustrationid)
          do update set
            diagram = EXCLUDED.diagram,
            modifieddate = EXCLUDED.modifieddate
          returning illustrationid, diagram, modifieddate
       """.query.unique
  }
  implicit val read: Read[IllustrationRow] =
    new Read[IllustrationRow](
      gets = List(
        (Get[IllustrationId], Nullability.NoNulls),
        (Get[TypoXml], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => IllustrationRow(
        illustrationid = Get[IllustrationId].unsafeGetNonNullable(rs, i + 0),
        diagram = Get[TypoXml].unsafeGetNullable(rs, i + 1),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 2)
      )
    )
  

}
