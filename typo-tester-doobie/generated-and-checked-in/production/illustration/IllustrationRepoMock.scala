/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package illustration

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class IllustrationRepoMock(toRow: Function1[IllustrationRowUnsaved, IllustrationRow],
                           map: scala.collection.mutable.Map[IllustrationId, IllustrationRow] = scala.collection.mutable.Map.empty) extends IllustrationRepo {
  override def delete(illustrationid: IllustrationId): ConnectionIO[Boolean] = {
    delay(map.remove(illustrationid).isDefined)
  }
  override def insert(unsaved: IllustrationRow): ConnectionIO[IllustrationRow] = {
    delay {
      if (map.contains(unsaved.illustrationid))
        sys.error(s"id ${unsaved.illustrationid} already exists")
      else
        map.put(unsaved.illustrationid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: IllustrationRowUnsaved): ConnectionIO[IllustrationRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, IllustrationRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[IllustrationFieldOrIdValue[_]]): Stream[ConnectionIO, IllustrationRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, IllustrationFieldValue.illustrationid(value)) => acc.filter(_.illustrationid == value)
        case (acc, IllustrationFieldValue.diagram(value)) => acc.filter(_.diagram == value)
        case (acc, IllustrationFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(illustrationid: IllustrationId): ConnectionIO[Option[IllustrationRow]] = {
    delay(map.get(illustrationid))
  }
  override def selectByIds(illustrationids: Array[IllustrationId]): Stream[ConnectionIO, IllustrationRow] = {
    Stream.emits(illustrationids.flatMap(map.get).toList)
  }
  override def update(row: IllustrationRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.illustrationid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.illustrationid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(illustrationid: IllustrationId, fieldValues: List[IllustrationFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(illustrationid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, IllustrationFieldValue.diagram(value)) => acc.copy(diagram = value)
            case (acc, IllustrationFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(illustrationid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: IllustrationRow): ConnectionIO[IllustrationRow] = {
    delay {
      map.put(unsaved.illustrationid, unsaved)
      unsaved
    }
  }
}
