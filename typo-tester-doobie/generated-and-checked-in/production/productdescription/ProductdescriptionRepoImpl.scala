/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productdescription

import adventureworks.Defaulted
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime
import java.util.UUID

object ProductdescriptionRepoImpl extends ProductdescriptionRepo {
  override def delete(productdescriptionid: ProductdescriptionId): ConnectionIO[Boolean] = {
    sql"delete from production.productdescription where productdescriptionid = $productdescriptionid".update.run.map(_ > 0)
  }
  override def insert(unsaved: ProductdescriptionRow): ConnectionIO[ProductdescriptionRow] = {
    sql"""insert into production.productdescription(productdescriptionid, description, rowguid, modifieddate)
          values (${unsaved.productdescriptionid}::int4, ${unsaved.description}, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning productdescriptionid, description, rowguid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: ProductdescriptionRowUnsaved): ConnectionIO[ProductdescriptionRow] = {
    val fs = List(
      Some((Fragment.const(s"description"), fr"${unsaved.description}")),
      unsaved.productdescriptionid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"productdescriptionid"), fr"${value: ProductdescriptionId}::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.productdescription default values
            returning productdescriptionid, description, rowguid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.productdescription(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning productdescriptionid, description, rowguid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, ProductdescriptionRow] = {
    sql"select productdescriptionid, description, rowguid, modifieddate from production.productdescription".query[ProductdescriptionRow].stream
  }
  override def selectByFieldValues(fieldValues: List[ProductdescriptionFieldOrIdValue[_]]): Stream[ConnectionIO, ProductdescriptionRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case ProductdescriptionFieldValue.productdescriptionid(value) => fr"productdescriptionid = $value"
        case ProductdescriptionFieldValue.description(value) => fr"description = $value"
        case ProductdescriptionFieldValue.rowguid(value) => fr"rowguid = $value"
        case ProductdescriptionFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from production.productdescription $where".query[ProductdescriptionRow].stream
  
  }
  override def selectById(productdescriptionid: ProductdescriptionId): ConnectionIO[Option[ProductdescriptionRow]] = {
    sql"select productdescriptionid, description, rowguid, modifieddate from production.productdescription where productdescriptionid = $productdescriptionid".query[ProductdescriptionRow].option
  }
  override def selectByIds(productdescriptionids: Array[ProductdescriptionId]): Stream[ConnectionIO, ProductdescriptionRow] = {
    sql"select productdescriptionid, description, rowguid, modifieddate from production.productdescription where productdescriptionid = ANY($productdescriptionids)".query[ProductdescriptionRow].stream
  }
  override def update(row: ProductdescriptionRow): ConnectionIO[Boolean] = {
    val productdescriptionid = row.productdescriptionid
    sql"""update production.productdescription
          set description = ${row.description},
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where productdescriptionid = $productdescriptionid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(productdescriptionid: ProductdescriptionId, fieldValues: List[ProductdescriptionFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case ProductdescriptionFieldValue.description(value) => fr"description = $value"
            case ProductdescriptionFieldValue.rowguid(value) => fr"rowguid = $value"
            case ProductdescriptionFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update production.productdescription
              $updates
              where productdescriptionid = $productdescriptionid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: ProductdescriptionRow): ConnectionIO[ProductdescriptionRow] = {
    sql"""insert into production.productdescription(productdescriptionid, description, rowguid, modifieddate)
          values (
            ${unsaved.productdescriptionid}::int4,
            ${unsaved.description},
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productdescriptionid)
          do update set
            description = EXCLUDED.description,
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning productdescriptionid, description, rowguid, modifieddate
       """.query.unique
  }
  implicit val read: Read[ProductdescriptionRow] =
    new Read[ProductdescriptionRow](
      gets = List(
        (Get[ProductdescriptionId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls),
        (Get[UUID], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => ProductdescriptionRow(
        productdescriptionid = Get[ProductdescriptionId].unsafeGetNonNullable(rs, i + 0),
        description = Get[String].unsafeGetNonNullable(rs, i + 1),
        rowguid = Get[UUID].unsafeGetNonNullable(rs, i + 2),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 3)
      )
    )
  

}
