/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productphoto

import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder

/** Type for the primary key of table `production.productphoto` */
case class ProductphotoId(value: Int) extends AnyVal
object ProductphotoId {
  implicit val arrayGet: Get[Array[ProductphotoId]] = Get[Array[Int]].map(_.map(ProductphotoId.apply))
  implicit val arrayPut: Put[Array[ProductphotoId]] = Put[Array[Int]].contramap(_.map(_.value))
  implicit val decoder: Decoder[ProductphotoId] = Decoder[Int].map(ProductphotoId.apply)
  implicit val encoder: Encoder[ProductphotoId] = Encoder[Int].contramap(_.value)
  implicit val get: Get[ProductphotoId] = Get[Int].map(ProductphotoId.apply)
  implicit val ordering: Ordering[ProductphotoId] = Ordering.by(_.value)
  implicit val put: Put[ProductphotoId] = Put[Int].contramap(_.value)
}
