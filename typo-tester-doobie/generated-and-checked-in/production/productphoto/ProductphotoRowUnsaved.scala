/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productphoto

import adventureworks.Defaulted
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `production.productphoto` which has not been persisted yet */
case class ProductphotoRowUnsaved(
  /** Small image of the product. */
  thumbnailphoto: Option[Array[Byte]],
  /** Small image file name. */
  thumbnailphotofilename: Option[String],
  /** Large image of the product. */
  largephoto: Option[Array[Byte]],
  /** Large image file name. */
  largephotofilename: Option[String],
  /** Default: nextval('production.productphoto_productphotoid_seq'::regclass)
      Primary key for ProductPhoto records. */
  productphotoid: Defaulted[ProductphotoId] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(productphotoidDefault: => ProductphotoId, modifieddateDefault: => LocalDateTime): ProductphotoRow =
    ProductphotoRow(
      thumbnailphoto = thumbnailphoto,
      thumbnailphotofilename = thumbnailphotofilename,
      largephoto = largephoto,
      largephotofilename = largephotofilename,
      productphotoid = productphotoid match {
                         case Defaulted.UseDefault => productphotoidDefault
                         case Defaulted.Provided(value) => value
                       },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductphotoRowUnsaved {
  implicit val decoder: Decoder[ProductphotoRowUnsaved] =
    (c: HCursor) =>
      for {
        thumbnailphoto <- c.downField("thumbnailphoto").as[Option[Array[Byte]]]
        thumbnailphotofilename <- c.downField("thumbnailphotofilename").as[Option[String]]
        largephoto <- c.downField("largephoto").as[Option[Array[Byte]]]
        largephotofilename <- c.downField("largephotofilename").as[Option[String]]
        productphotoid <- c.downField("productphotoid").as[Defaulted[ProductphotoId]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield ProductphotoRowUnsaved(thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, productphotoid, modifieddate)
  implicit val encoder: Encoder[ProductphotoRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "thumbnailphoto" := row.thumbnailphoto,
        "thumbnailphotofilename" := row.thumbnailphotofilename,
        "largephoto" := row.largephoto,
        "largephotofilename" := row.largephotofilename,
        "productphotoid" := row.productphotoid,
        "modifieddate" := row.modifieddate
      )}
}
