/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productphoto

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream

object ProductphotoRepoImpl extends ProductphotoRepo {
  override def delete(productphotoid: ProductphotoId): ConnectionIO[Boolean] = {
    sql"delete from production.productphoto where productphotoid = ${productphotoid}".update.run.map(_ > 0)
  }
  override def insert(unsaved: ProductphotoRow): ConnectionIO[ProductphotoRow] = {
    sql"""insert into production.productphoto(productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate)
          values (${unsaved.productphotoid}::int4, ${unsaved.thumbnailphoto}::bytea, ${unsaved.thumbnailphotofilename}, ${unsaved.largephoto}::bytea, ${unsaved.largephotofilename}, ${unsaved.modifieddate}::timestamp)
          returning productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate::text
       """.query(ProductphotoRow.read).unique
  }
  override def insert(unsaved: ProductphotoRowUnsaved): ConnectionIO[ProductphotoRow] = {
    val fs = List(
      Some((Fragment.const(s"thumbnailphoto"), fr"${unsaved.thumbnailphoto}::bytea")),
      Some((Fragment.const(s"thumbnailphotofilename"), fr"${unsaved.thumbnailphotofilename}")),
      Some((Fragment.const(s"largephoto"), fr"${unsaved.largephoto}::bytea")),
      Some((Fragment.const(s"largephotofilename"), fr"${unsaved.largephotofilename}")),
      unsaved.productphotoid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"productphotoid"), fr"${value: ProductphotoId}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.productphoto default values
            returning productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate::text
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.productphoto(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate::text
         """
    }
    q.query(ProductphotoRow.read).unique
  
  }
  override def selectAll: Stream[ConnectionIO, ProductphotoRow] = {
    sql"select productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate::text from production.productphoto".query(ProductphotoRow.read).stream
  }
  override def selectById(productphotoid: ProductphotoId): ConnectionIO[Option[ProductphotoRow]] = {
    sql"select productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate::text from production.productphoto where productphotoid = ${productphotoid}".query(ProductphotoRow.read).option
  }
  override def selectByIds(productphotoids: Array[ProductphotoId]): Stream[ConnectionIO, ProductphotoRow] = {
    sql"select productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate::text from production.productphoto where productphotoid = ANY(${productphotoids})".query(ProductphotoRow.read).stream
  }
  override def update(row: ProductphotoRow): ConnectionIO[Boolean] = {
    val productphotoid = row.productphotoid
    sql"""update production.productphoto
          set thumbnailphoto = ${row.thumbnailphoto}::bytea,
              thumbnailphotofilename = ${row.thumbnailphotofilename},
              largephoto = ${row.largephoto}::bytea,
              largephotofilename = ${row.largephotofilename},
              modifieddate = ${row.modifieddate}::timestamp
          where productphotoid = ${productphotoid}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: ProductphotoRow): ConnectionIO[ProductphotoRow] = {
    sql"""insert into production.productphoto(productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate)
          values (
            ${unsaved.productphotoid}::int4,
            ${unsaved.thumbnailphoto}::bytea,
            ${unsaved.thumbnailphotofilename},
            ${unsaved.largephoto}::bytea,
            ${unsaved.largephotofilename},
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productphotoid)
          do update set
            thumbnailphoto = EXCLUDED.thumbnailphoto,
            thumbnailphotofilename = EXCLUDED.thumbnailphotofilename,
            largephoto = EXCLUDED.largephoto,
            largephotofilename = EXCLUDED.largephotofilename,
            modifieddate = EXCLUDED.modifieddate
          returning productphotoid, thumbnailphoto, thumbnailphotofilename, largephoto, largephotofilename, modifieddate::text
       """.query(ProductphotoRow.read).unique
  }
}
