/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package document

import adventureworks.Defaulted
import adventureworks.TypoLocalDateTime
import adventureworks.public.Flag
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream
import java.util.UUID

object DocumentRepoImpl extends DocumentRepo {
  override def delete(documentnode: DocumentId): ConnectionIO[Boolean] = {
    sql"""delete from production."document" where documentnode = ${documentnode}""".update.run.map(_ > 0)
  }
  override def insert(unsaved: DocumentRow): ConnectionIO[DocumentRow] = {
    sql"""insert into production."document"(title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode)
          values (${unsaved.title}, ${unsaved.owner}::int4, ${unsaved.folderflag}::"public"."Flag", ${unsaved.filename}, ${unsaved.fileextension}, ${unsaved.revision}::bpchar, ${unsaved.changenumber}::int4, ${unsaved.status}::int2, ${unsaved.documentsummary}, ${unsaved.document}::bytea, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp, ${unsaved.documentnode})
          returning title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate::text, documentnode
       """.query(DocumentRow.read).unique
  }
  override def insert(unsaved: DocumentRowUnsaved): ConnectionIO[DocumentRow] = {
    val fs = List(
      Some((Fragment.const(s"title"), fr"${unsaved.title}")),
      Some((Fragment.const(s""""owner""""), fr"${unsaved.owner}::int4")),
      Some((Fragment.const(s"filename"), fr"${unsaved.filename}")),
      Some((Fragment.const(s"fileextension"), fr"${unsaved.fileextension}")),
      Some((Fragment.const(s"revision"), fr"${unsaved.revision}::bpchar")),
      Some((Fragment.const(s"status"), fr"${unsaved.status}::int2")),
      Some((Fragment.const(s"documentsummary"), fr"${unsaved.documentsummary}")),
      Some((Fragment.const(s""""document""""), fr"${unsaved.document}::bytea")),
      unsaved.folderflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"folderflag"), fr"""${value: Flag}::"public"."Flag""""))
      },
      unsaved.changenumber match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"changenumber"), fr"${value: Int}::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"rowguid"), fr"${value: UUID}::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: TypoLocalDateTime}::timestamp"))
      },
      unsaved.documentnode match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"documentnode"), fr"${value: DocumentId}"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production."document" default values
            returning title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate::text, documentnode
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production."document"(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate::text, documentnode
         """
    }
    q.query(DocumentRow.read).unique
  
  }
  override def selectAll: Stream[ConnectionIO, DocumentRow] = {
    sql"""select title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate::text, documentnode from production."document"""".query(DocumentRow.read).stream
  }
  override def selectById(documentnode: DocumentId): ConnectionIO[Option[DocumentRow]] = {
    sql"""select title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate::text, documentnode from production."document" where documentnode = ${documentnode}""".query(DocumentRow.read).option
  }
  override def selectByIds(documentnodes: Array[DocumentId]): Stream[ConnectionIO, DocumentRow] = {
    sql"""select title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate::text, documentnode from production."document" where documentnode = ANY(${documentnodes})""".query(DocumentRow.read).stream
  }
  override def update(row: DocumentRow): ConnectionIO[Boolean] = {
    val documentnode = row.documentnode
    sql"""update production."document"
          set title = ${row.title},
              "owner" = ${row.owner}::int4,
              folderflag = ${row.folderflag}::"public"."Flag",
              filename = ${row.filename},
              fileextension = ${row.fileextension},
              revision = ${row.revision}::bpchar,
              changenumber = ${row.changenumber}::int4,
              status = ${row.status}::int2,
              documentsummary = ${row.documentsummary},
              "document" = ${row.document}::bytea,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where documentnode = ${documentnode}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: DocumentRow): ConnectionIO[DocumentRow] = {
    sql"""insert into production."document"(title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode)
          values (
            ${unsaved.title},
            ${unsaved.owner}::int4,
            ${unsaved.folderflag}::"public"."Flag",
            ${unsaved.filename},
            ${unsaved.fileextension},
            ${unsaved.revision}::bpchar,
            ${unsaved.changenumber}::int4,
            ${unsaved.status}::int2,
            ${unsaved.documentsummary},
            ${unsaved.document}::bytea,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp,
            ${unsaved.documentnode}
          )
          on conflict (documentnode)
          do update set
            title = EXCLUDED.title,
            "owner" = EXCLUDED."owner",
            folderflag = EXCLUDED.folderflag,
            filename = EXCLUDED.filename,
            fileextension = EXCLUDED.fileextension,
            revision = EXCLUDED.revision,
            changenumber = EXCLUDED.changenumber,
            status = EXCLUDED.status,
            documentsummary = EXCLUDED.documentsummary,
            "document" = EXCLUDED."document",
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate::text, documentnode
       """.query(DocumentRow.read).unique
  }
}
