/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package document

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class DocumentRepoMock(toRow: Function1[DocumentRowUnsaved, DocumentRow],
                       map: scala.collection.mutable.Map[DocumentId, DocumentRow] = scala.collection.mutable.Map.empty) extends DocumentRepo {
  override def delete(documentnode: DocumentId): ConnectionIO[Boolean] = {
    delay(map.remove(documentnode).isDefined)
  }
  override def insert(unsaved: DocumentRow): ConnectionIO[DocumentRow] = {
    delay {
      if (map.contains(unsaved.documentnode))
        sys.error(s"id ${unsaved.documentnode} already exists")
      else
        map.put(unsaved.documentnode, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: DocumentRowUnsaved): ConnectionIO[DocumentRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, DocumentRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(documentnode: DocumentId): ConnectionIO[Option[DocumentRow]] = {
    delay(map.get(documentnode))
  }
  override def selectByIds(documentnodes: Array[DocumentId]): Stream[ConnectionIO, DocumentRow] = {
    Stream.emits(documentnodes.flatMap(map.get).toList)
  }
  override def update(row: DocumentRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.documentnode) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.documentnode, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: DocumentRow): ConnectionIO[DocumentRow] = {
    delay {
      map.put(unsaved.documentnode, unsaved)
      unsaved
    }
  }
}
