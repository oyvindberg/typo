/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodel

import doobie.util.Get
import doobie.util.Put
import io.circe.Decoder
import io.circe.Encoder

/** Type for the primary key of table `production.productmodel` */
case class ProductmodelId(value: Int) extends AnyVal
object ProductmodelId {
  implicit val arrayGet: Get[Array[ProductmodelId]] = Get[Array[Int]].map(_.map(ProductmodelId.apply))
  implicit val arrayPut: Put[Array[ProductmodelId]] = Put[Array[Int]].contramap(_.map(_.value))
  implicit val decoder: Decoder[ProductmodelId] = Decoder[Int].map(ProductmodelId.apply)
  implicit val encoder: Encoder[ProductmodelId] = Encoder[Int].contramap(_.value)
  implicit val get: Get[ProductmodelId] = Get[Int].map(ProductmodelId.apply)
  implicit val ordering: Ordering[ProductmodelId] = Ordering.by(_.value)
  implicit val put: Put[ProductmodelId] = Put[Int].contramap(_.value)
}
