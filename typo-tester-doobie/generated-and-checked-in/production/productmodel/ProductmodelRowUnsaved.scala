/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodel

import adventureworks.Defaulted
import adventureworks.TypoXml
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID

/** This class corresponds to a row in table `production.productmodel` which has not been persisted yet */
case class ProductmodelRowUnsaved(
  /** Product model description. */
  name: Name,
  /** Detailed product catalog information in xml format. */
  catalogdescription: Option[TypoXml],
  /** Manufacturing instructions in xml format. */
  instructions: Option[TypoXml],
  /** Default: nextval('production.productmodel_productmodelid_seq'::regclass)
      Primary key for ProductModel records. */
  productmodelid: Defaulted[ProductmodelId] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(productmodelidDefault: => ProductmodelId, rowguidDefault: => UUID, modifieddateDefault: => LocalDateTime): ProductmodelRow =
    ProductmodelRow(
      name = name,
      catalogdescription = catalogdescription,
      instructions = instructions,
      productmodelid = productmodelid match {
                         case Defaulted.UseDefault => productmodelidDefault
                         case Defaulted.Provided(value) => value
                       },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object ProductmodelRowUnsaved {
  implicit val decoder: Decoder[ProductmodelRowUnsaved] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Name]
        catalogdescription <- c.downField("catalogdescription").as[Option[TypoXml]]
        instructions <- c.downField("instructions").as[Option[TypoXml]]
        productmodelid <- c.downField("productmodelid").as[Defaulted[ProductmodelId]]
        rowguid <- c.downField("rowguid").as[Defaulted[UUID]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield ProductmodelRowUnsaved(name, catalogdescription, instructions, productmodelid, rowguid, modifieddate)
  implicit val encoder: Encoder[ProductmodelRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "catalogdescription" := row.catalogdescription,
        "instructions" := row.instructions,
        "productmodelid" := row.productmodelid,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
