/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodel

import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime
import java.util.UUID
import org.postgresql.jdbc.PgSQLXML

case class ProductmodelRow(
  /** Primary key for ProductModel records. */
  productmodelid: ProductmodelId,
  /** Product model description. */
  name: Name,
  /** Detailed product catalog information in xml format. */
  catalogdescription: Option[PgSQLXML],
  /** Manufacturing instructions in xml format. */
  instructions: Option[PgSQLXML],
  rowguid: UUID,
  modifieddate: LocalDateTime
)

object ProductmodelRow {
  implicit val decoder: Decoder[ProductmodelRow] =
    (c: HCursor) =>
      for {
        productmodelid <- c.downField("productmodelid").as[ProductmodelId]
        name <- c.downField("name").as[Name]
        catalogdescription <- c.downField("catalogdescription").as[Option[PgSQLXML]]
        instructions <- c.downField("instructions").as[Option[PgSQLXML]]
        rowguid <- c.downField("rowguid").as[UUID]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield ProductmodelRow(productmodelid, name, catalogdescription, instructions, rowguid, modifieddate)
  implicit val encoder: Encoder[ProductmodelRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "productmodelid" := row.productmodelid,
        "name" := row.name,
        "catalogdescription" := row.catalogdescription,
        "instructions" := row.instructions,
        "rowguid" := row.rowguid,
        "modifieddate" := row.modifieddate
      )}
}
