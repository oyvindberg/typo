/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productinventory

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class ProductinventoryRepoMock(toRow: Function1[ProductinventoryRowUnsaved, ProductinventoryRow],
                               map: scala.collection.mutable.Map[ProductinventoryId, ProductinventoryRow] = scala.collection.mutable.Map.empty) extends ProductinventoryRepo {
  override def delete(compositeId: ProductinventoryId): ConnectionIO[Boolean] = {
    delay(map.remove(compositeId).isDefined)
  }
  override def insert(unsaved: ProductinventoryRow): ConnectionIO[ProductinventoryRow] = {
    delay {
      if (map.contains(unsaved.compositeId))
        sys.error(s"id ${unsaved.compositeId} already exists")
      else
        map.put(unsaved.compositeId, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: ProductinventoryRowUnsaved): ConnectionIO[ProductinventoryRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, ProductinventoryRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[ProductinventoryFieldOrIdValue[_]]): Stream[ConnectionIO, ProductinventoryRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, ProductinventoryFieldValue.productid(value)) => acc.filter(_.productid == value)
        case (acc, ProductinventoryFieldValue.locationid(value)) => acc.filter(_.locationid == value)
        case (acc, ProductinventoryFieldValue.shelf(value)) => acc.filter(_.shelf == value)
        case (acc, ProductinventoryFieldValue.bin(value)) => acc.filter(_.bin == value)
        case (acc, ProductinventoryFieldValue.quantity(value)) => acc.filter(_.quantity == value)
        case (acc, ProductinventoryFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
        case (acc, ProductinventoryFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(compositeId: ProductinventoryId): ConnectionIO[Option[ProductinventoryRow]] = {
    delay(map.get(compositeId))
  }
  override def update(row: ProductinventoryRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.compositeId) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.compositeId, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(compositeId: ProductinventoryId, fieldValues: List[ProductinventoryFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(compositeId) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, ProductinventoryFieldValue.shelf(value)) => acc.copy(shelf = value)
            case (acc, ProductinventoryFieldValue.bin(value)) => acc.copy(bin = value)
            case (acc, ProductinventoryFieldValue.quantity(value)) => acc.copy(quantity = value)
            case (acc, ProductinventoryFieldValue.rowguid(value)) => acc.copy(rowguid = value)
            case (acc, ProductinventoryFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(compositeId, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: ProductinventoryRow): ConnectionIO[ProductinventoryRow] = {
    delay {
      map.put(unsaved.compositeId, unsaved)
      unsaved
    }
  }
}
