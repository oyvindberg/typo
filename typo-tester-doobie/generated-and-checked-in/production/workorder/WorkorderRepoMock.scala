/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class WorkorderRepoMock(toRow: Function1[WorkorderRowUnsaved, WorkorderRow],
                        map: scala.collection.mutable.Map[WorkorderId, WorkorderRow] = scala.collection.mutable.Map.empty) extends WorkorderRepo {
  override def delete(workorderid: WorkorderId): ConnectionIO[Boolean] = {
    delay(map.remove(workorderid).isDefined)
  }
  override def insert(unsaved: WorkorderRow): ConnectionIO[WorkorderRow] = {
    delay {
      if (map.contains(unsaved.workorderid))
        sys.error(s"id ${unsaved.workorderid} already exists")
      else
        map.put(unsaved.workorderid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: WorkorderRowUnsaved): ConnectionIO[WorkorderRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, WorkorderRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[WorkorderFieldOrIdValue[_]]): Stream[ConnectionIO, WorkorderRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, WorkorderFieldValue.workorderid(value)) => acc.filter(_.workorderid == value)
        case (acc, WorkorderFieldValue.productid(value)) => acc.filter(_.productid == value)
        case (acc, WorkorderFieldValue.orderqty(value)) => acc.filter(_.orderqty == value)
        case (acc, WorkorderFieldValue.scrappedqty(value)) => acc.filter(_.scrappedqty == value)
        case (acc, WorkorderFieldValue.startdate(value)) => acc.filter(_.startdate == value)
        case (acc, WorkorderFieldValue.enddate(value)) => acc.filter(_.enddate == value)
        case (acc, WorkorderFieldValue.duedate(value)) => acc.filter(_.duedate == value)
        case (acc, WorkorderFieldValue.scrapreasonid(value)) => acc.filter(_.scrapreasonid == value)
        case (acc, WorkorderFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
      }.toList
    }
  }
  override def selectById(workorderid: WorkorderId): ConnectionIO[Option[WorkorderRow]] = {
    delay(map.get(workorderid))
  }
  override def selectByIds(workorderids: Array[WorkorderId]): Stream[ConnectionIO, WorkorderRow] = {
    Stream.emits(workorderids.flatMap(map.get).toList)
  }
  override def update(row: WorkorderRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.workorderid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.workorderid, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(workorderid: WorkorderId, fieldValues: List[WorkorderFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(workorderid) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, WorkorderFieldValue.productid(value)) => acc.copy(productid = value)
            case (acc, WorkorderFieldValue.orderqty(value)) => acc.copy(orderqty = value)
            case (acc, WorkorderFieldValue.scrappedqty(value)) => acc.copy(scrappedqty = value)
            case (acc, WorkorderFieldValue.startdate(value)) => acc.copy(startdate = value)
            case (acc, WorkorderFieldValue.enddate(value)) => acc.copy(enddate = value)
            case (acc, WorkorderFieldValue.duedate(value)) => acc.copy(duedate = value)
            case (acc, WorkorderFieldValue.scrapreasonid(value)) => acc.copy(scrapreasonid = value)
            case (acc, WorkorderFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
          }
          if (updatedRow != oldRow) {
            map.put(workorderid, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: WorkorderRow): ConnectionIO[WorkorderRow] = {
    delay {
      map.put(unsaved.workorderid, unsaved)
      unsaved
    }
  }
}
