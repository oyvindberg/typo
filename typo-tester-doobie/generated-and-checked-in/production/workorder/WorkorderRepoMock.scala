/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class WorkorderRepoMock(toRow: Function1[WorkorderRowUnsaved, WorkorderRow],
                        map: scala.collection.mutable.Map[WorkorderId, WorkorderRow] = scala.collection.mutable.Map.empty) extends WorkorderRepo {
  override def delete(workorderid: WorkorderId): ConnectionIO[Boolean] = {
    delay(map.remove(workorderid).isDefined)
  }
  override def insert(unsaved: WorkorderRow): ConnectionIO[WorkorderRow] = {
    delay {
      if (map.contains(unsaved.workorderid))
        sys.error(s"id ${unsaved.workorderid} already exists")
      else
        map.put(unsaved.workorderid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: WorkorderRowUnsaved): ConnectionIO[WorkorderRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, WorkorderRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(workorderid: WorkorderId): ConnectionIO[Option[WorkorderRow]] = {
    delay(map.get(workorderid))
  }
  override def selectByIds(workorderids: Array[WorkorderId]): Stream[ConnectionIO, WorkorderRow] = {
    Stream.emits(workorderids.flatMap(map.get).toList)
  }
  override def update(row: WorkorderRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.workorderid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.workorderid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: WorkorderRow): ConnectionIO[WorkorderRow] = {
    delay {
      map.put(unsaved.workorderid, unsaved)
      unsaved
    }
  }
}
