/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import adventureworks.Defaulted
import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import fs2.Stream
import java.time.LocalDateTime

object WorkorderRepoImpl extends WorkorderRepo {
  override def delete(workorderid: WorkorderId): ConnectionIO[Boolean] = {
    sql"delete from production.workorder where workorderid = $workorderid".update.run.map(_ > 0)
  }
  override def insert(unsaved: WorkorderRow): ConnectionIO[WorkorderRow] = {
    sql"""insert into production.workorder(workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate)
          values (${unsaved.workorderid}::int4, ${unsaved.productid}::int4, ${unsaved.orderqty}::int4, ${unsaved.scrappedqty}::int2, ${unsaved.startdate}::timestamp, ${unsaved.enddate}::timestamp, ${unsaved.duedate}::timestamp, ${unsaved.scrapreasonid}::int2, ${unsaved.modifieddate}::timestamp)
          returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
       """.query[WorkorderRow].unique
  }
  override def insert(unsaved: WorkorderRowUnsaved): ConnectionIO[WorkorderRow] = {
    val fs = List(
      Some((Fragment.const(s"productid"), fr"${unsaved.productid}::int4")),
      Some((Fragment.const(s"orderqty"), fr"${unsaved.orderqty}::int4")),
      Some((Fragment.const(s"scrappedqty"), fr"${unsaved.scrappedqty}::int2")),
      Some((Fragment.const(s"startdate"), fr"${unsaved.startdate}::timestamp")),
      Some((Fragment.const(s"enddate"), fr"${unsaved.enddate}::timestamp")),
      Some((Fragment.const(s"duedate"), fr"${unsaved.duedate}::timestamp")),
      Some((Fragment.const(s"scrapreasonid"), fr"${unsaved.scrapreasonid}::int2")),
      unsaved.workorderid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"workorderid"), fr"${value: WorkorderId}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.workorder default values
            returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.workorder(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
         """
    }
    q.query[WorkorderRow].unique
  
  }
  override def selectAll: Stream[ConnectionIO, WorkorderRow] = {
    sql"select workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate from production.workorder".query[WorkorderRow].stream
  }
  override def selectById(workorderid: WorkorderId): ConnectionIO[Option[WorkorderRow]] = {
    sql"select workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate from production.workorder where workorderid = $workorderid".query[WorkorderRow].option
  }
  override def selectByIds(workorderids: Array[WorkorderId]): Stream[ConnectionIO, WorkorderRow] = {
    sql"select workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate from production.workorder where workorderid = ANY($workorderids)".query[WorkorderRow].stream
  }
  override def update(row: WorkorderRow): ConnectionIO[Boolean] = {
    val workorderid = row.workorderid
    sql"""update production.workorder
          set productid = ${row.productid}::int4,
              orderqty = ${row.orderqty}::int4,
              scrappedqty = ${row.scrappedqty}::int2,
              startdate = ${row.startdate}::timestamp,
              enddate = ${row.enddate}::timestamp,
              duedate = ${row.duedate}::timestamp,
              scrapreasonid = ${row.scrapreasonid}::int2,
              modifieddate = ${row.modifieddate}::timestamp
          where workorderid = $workorderid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: WorkorderRow): ConnectionIO[WorkorderRow] = {
    sql"""insert into production.workorder(workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate)
          values (
            ${unsaved.workorderid}::int4,
            ${unsaved.productid}::int4,
            ${unsaved.orderqty}::int4,
            ${unsaved.scrappedqty}::int2,
            ${unsaved.startdate}::timestamp,
            ${unsaved.enddate}::timestamp,
            ${unsaved.duedate}::timestamp,
            ${unsaved.scrapreasonid}::int2,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (workorderid)
          do update set
            productid = EXCLUDED.productid,
            orderqty = EXCLUDED.orderqty,
            scrappedqty = EXCLUDED.scrappedqty,
            startdate = EXCLUDED.startdate,
            enddate = EXCLUDED.enddate,
            duedate = EXCLUDED.duedate,
            scrapreasonid = EXCLUDED.scrapreasonid,
            modifieddate = EXCLUDED.modifieddate
          returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
       """.query[WorkorderRow].unique
  }
}
