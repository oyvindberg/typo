/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import adventureworks.production.scrapreason.ScrapreasonId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object WorkorderRepoImpl extends WorkorderRepo {
  override def delete(workorderid: WorkorderId): ConnectionIO[Boolean] = {
    sql"delete from production.workorder where workorderid = $workorderid".update.run.map(_ > 0)
  }
  override def insert(unsaved: WorkorderRow): ConnectionIO[WorkorderRow] = {
    sql"""insert into production.workorder(workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate)
          values (${unsaved.workorderid}::int4, ${unsaved.productid}::int4, ${unsaved.orderqty}::int4, ${unsaved.scrappedqty}::int2, ${unsaved.startdate}::timestamp, ${unsaved.enddate}::timestamp, ${unsaved.duedate}::timestamp, ${unsaved.scrapreasonid}::int2, ${unsaved.modifieddate}::timestamp)
          returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
       """.query.unique
  }
  override def insert(unsaved: WorkorderRowUnsaved): ConnectionIO[WorkorderRow] = {
    val fs = List(
      Some((Fragment.const(s"productid"), fr"${unsaved.productid}::int4")),
      Some((Fragment.const(s"orderqty"), fr"${unsaved.orderqty}::int4")),
      Some((Fragment.const(s"scrappedqty"), fr"${unsaved.scrappedqty}::int2")),
      Some((Fragment.const(s"startdate"), fr"${unsaved.startdate}::timestamp")),
      Some((Fragment.const(s"enddate"), fr"${unsaved.enddate}::timestamp")),
      Some((Fragment.const(s"duedate"), fr"${unsaved.duedate}::timestamp")),
      Some((Fragment.const(s"scrapreasonid"), fr"${unsaved.scrapreasonid}::int2")),
      unsaved.workorderid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"workorderid"), fr"${value: WorkorderId}::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.workorder default values
            returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.workorder(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, WorkorderRow] = {
    sql"select workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate from production.workorder".query[WorkorderRow].stream
  }
  override def selectByFieldValues(fieldValues: List[WorkorderFieldOrIdValue[_]]): Stream[ConnectionIO, WorkorderRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case WorkorderFieldValue.workorderid(value) => fr"workorderid = $value"
        case WorkorderFieldValue.productid(value) => fr"productid = $value"
        case WorkorderFieldValue.orderqty(value) => fr"orderqty = $value"
        case WorkorderFieldValue.scrappedqty(value) => fr"scrappedqty = $value"
        case WorkorderFieldValue.startdate(value) => fr"startdate = $value"
        case WorkorderFieldValue.enddate(value) => fr"enddate = $value"
        case WorkorderFieldValue.duedate(value) => fr"duedate = $value"
        case WorkorderFieldValue.scrapreasonid(value) => fr"scrapreasonid = $value"
        case WorkorderFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from production.workorder $where".query[WorkorderRow].stream
  
  }
  override def selectById(workorderid: WorkorderId): ConnectionIO[Option[WorkorderRow]] = {
    sql"select workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate from production.workorder where workorderid = $workorderid".query[WorkorderRow].option
  }
  override def selectByIds(workorderids: Array[WorkorderId]): Stream[ConnectionIO, WorkorderRow] = {
    sql"select workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate from production.workorder where workorderid = ANY($workorderids)".query[WorkorderRow].stream
  }
  override def update(row: WorkorderRow): ConnectionIO[Boolean] = {
    val workorderid = row.workorderid
    sql"""update production.workorder
          set productid = ${row.productid}::int4,
              orderqty = ${row.orderqty}::int4,
              scrappedqty = ${row.scrappedqty}::int2,
              startdate = ${row.startdate}::timestamp,
              enddate = ${row.enddate}::timestamp,
              duedate = ${row.duedate}::timestamp,
              scrapreasonid = ${row.scrapreasonid}::int2,
              modifieddate = ${row.modifieddate}::timestamp
          where workorderid = $workorderid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(workorderid: WorkorderId, fieldValues: List[WorkorderFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case WorkorderFieldValue.productid(value) => fr"productid = $value"
            case WorkorderFieldValue.orderqty(value) => fr"orderqty = $value"
            case WorkorderFieldValue.scrappedqty(value) => fr"scrappedqty = $value"
            case WorkorderFieldValue.startdate(value) => fr"startdate = $value"
            case WorkorderFieldValue.enddate(value) => fr"enddate = $value"
            case WorkorderFieldValue.duedate(value) => fr"duedate = $value"
            case WorkorderFieldValue.scrapreasonid(value) => fr"scrapreasonid = $value"
            case WorkorderFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update production.workorder
              $updates
              where workorderid = $workorderid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: WorkorderRow): ConnectionIO[WorkorderRow] = {
    sql"""insert into production.workorder(workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate)
          values (
            ${unsaved.workorderid}::int4,
            ${unsaved.productid}::int4,
            ${unsaved.orderqty}::int4,
            ${unsaved.scrappedqty}::int2,
            ${unsaved.startdate}::timestamp,
            ${unsaved.enddate}::timestamp,
            ${unsaved.duedate}::timestamp,
            ${unsaved.scrapreasonid}::int2,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (workorderid)
          do update set
            productid = EXCLUDED.productid,
            orderqty = EXCLUDED.orderqty,
            scrappedqty = EXCLUDED.scrappedqty,
            startdate = EXCLUDED.startdate,
            enddate = EXCLUDED.enddate,
            duedate = EXCLUDED.duedate,
            scrapreasonid = EXCLUDED.scrapreasonid,
            modifieddate = EXCLUDED.modifieddate
          returning workorderid, productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate
       """.query.unique
  }
  implicit val read: Read[WorkorderRow] =
    new Read[WorkorderRow](
      gets = List(
        (Get[WorkorderId], Nullability.NoNulls),
        (Get[ProductId], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[ScrapreasonId], Nullability.Nullable),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => WorkorderRow(
        workorderid = Get[WorkorderId].unsafeGetNonNullable(rs, i + 0),
        productid = Get[ProductId].unsafeGetNonNullable(rs, i + 1),
        orderqty = Get[Int].unsafeGetNonNullable(rs, i + 2),
        scrappedqty = Get[Int].unsafeGetNonNullable(rs, i + 3),
        startdate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 4),
        enddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 5),
        duedate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 6),
        scrapreasonid = Get[ScrapreasonId].unsafeGetNullable(rs, i + 7),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 8)
      )
    )
  

}
