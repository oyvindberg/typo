/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package billofmaterials

import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class BillofmaterialsRow(
  /** Primary key for BillOfMaterials records. */
  billofmaterialsid: BillofmaterialsId,
  /** Parent product identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  productassemblyid: Option[ProductId],
  /** Component identification number. Foreign key to Product.ProductID.
      Points to [[product.ProductRow.productid]] */
  componentid: ProductId,
  /** Date the component started being used in the assembly item. */
  startdate: LocalDateTime,
  /** Date the component stopped being used in the assembly item. */
  enddate: Option[LocalDateTime],
  /** Standard code identifying the unit of measure for the quantity.
      Points to [[unitmeasure.UnitmeasureRow.unitmeasurecode]] */
  unitmeasurecode: UnitmeasureId,
  /** Indicates the depth the component is from its parent (AssemblyID). */
  bomlevel: Int,
  /** Quantity of the component needed to create the assembly. */
  perassemblyqty: BigDecimal,
  modifieddate: LocalDateTime
)

object BillofmaterialsRow {
  implicit val decoder: Decoder[BillofmaterialsRow] =
    (c: HCursor) =>
      for {
        billofmaterialsid <- c.downField("billofmaterialsid").as[BillofmaterialsId]
        productassemblyid <- c.downField("productassemblyid").as[Option[ProductId]]
        componentid <- c.downField("componentid").as[ProductId]
        startdate <- c.downField("startdate").as[LocalDateTime]
        enddate <- c.downField("enddate").as[Option[LocalDateTime]]
        unitmeasurecode <- c.downField("unitmeasurecode").as[UnitmeasureId]
        bomlevel <- c.downField("bomlevel").as[Int]
        perassemblyqty <- c.downField("perassemblyqty").as[BigDecimal]
        modifieddate <- c.downField("modifieddate").as[LocalDateTime]
      } yield BillofmaterialsRow(billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate)
  implicit val encoder: Encoder[BillofmaterialsRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "billofmaterialsid" := row.billofmaterialsid,
        "productassemblyid" := row.productassemblyid,
        "componentid" := row.componentid,
        "startdate" := row.startdate,
        "enddate" := row.enddate,
        "unitmeasurecode" := row.unitmeasurecode,
        "bomlevel" := row.bomlevel,
        "perassemblyqty" := row.perassemblyqty,
        "modifieddate" := row.modifieddate
      )}
}
