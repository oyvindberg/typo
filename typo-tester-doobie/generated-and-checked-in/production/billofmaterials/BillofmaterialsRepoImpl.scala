/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package billofmaterials

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragment.Fragment
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet
import java.time.LocalDateTime

object BillofmaterialsRepoImpl extends BillofmaterialsRepo {
  override def delete(billofmaterialsid: BillofmaterialsId): ConnectionIO[Boolean] = {
    sql"delete from production.billofmaterials where billofmaterialsid = $billofmaterialsid".update.run.map(_ > 0)
  }
  override def insert(unsaved: BillofmaterialsRow): ConnectionIO[BillofmaterialsRow] = {
    sql"""insert into production.billofmaterials(billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate)
          values (${unsaved.billofmaterialsid}::int4, ${unsaved.productassemblyid}::int4, ${unsaved.componentid}::int4, ${unsaved.startdate}::timestamp, ${unsaved.enddate}::timestamp, ${unsaved.unitmeasurecode}::bpchar, ${unsaved.bomlevel}::int2, ${unsaved.perassemblyqty}::numeric, ${unsaved.modifieddate}::timestamp)
          returning billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate
       """.query.unique
  }
  override def insert(unsaved: BillofmaterialsRowUnsaved): ConnectionIO[BillofmaterialsRow] = {
    val fs = List(
      Some((Fragment.const(s"productassemblyid"), fr"${unsaved.productassemblyid}::int4")),
      Some((Fragment.const(s"componentid"), fr"${unsaved.componentid}::int4")),
      Some((Fragment.const(s"enddate"), fr"${unsaved.enddate}::timestamp")),
      Some((Fragment.const(s"unitmeasurecode"), fr"${unsaved.unitmeasurecode}::bpchar")),
      Some((Fragment.const(s"bomlevel"), fr"${unsaved.bomlevel}::int2")),
      unsaved.billofmaterialsid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"billofmaterialsid"), fr"${value: BillofmaterialsId}::int4"))
      },
      unsaved.startdate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"startdate"), fr"${value: LocalDateTime}::timestamp"))
      },
      unsaved.perassemblyqty match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"perassemblyqty"), fr"${value: BigDecimal}::numeric"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s"modifieddate"), fr"${value: LocalDateTime}::timestamp"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into production.billofmaterials default values
            returning billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into production.billofmaterials(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate
         """
    }
    q.query.unique
  
  }
  override def selectAll: Stream[ConnectionIO, BillofmaterialsRow] = {
    sql"select billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate from production.billofmaterials".query[BillofmaterialsRow].stream
  }
  override def selectByFieldValues(fieldValues: List[BillofmaterialsFieldOrIdValue[_]]): Stream[ConnectionIO, BillofmaterialsRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case BillofmaterialsFieldValue.billofmaterialsid(value) => fr"billofmaterialsid = $value"
        case BillofmaterialsFieldValue.productassemblyid(value) => fr"productassemblyid = $value"
        case BillofmaterialsFieldValue.componentid(value) => fr"componentid = $value"
        case BillofmaterialsFieldValue.startdate(value) => fr"startdate = $value"
        case BillofmaterialsFieldValue.enddate(value) => fr"enddate = $value"
        case BillofmaterialsFieldValue.unitmeasurecode(value) => fr"unitmeasurecode = $value"
        case BillofmaterialsFieldValue.bomlevel(value) => fr"bomlevel = $value"
        case BillofmaterialsFieldValue.perassemblyqty(value) => fr"perassemblyqty = $value"
        case BillofmaterialsFieldValue.modifieddate(value) => fr"modifieddate = $value"
      } :_*
    )
    sql"select * from production.billofmaterials $where".query[BillofmaterialsRow].stream
  
  }
  override def selectById(billofmaterialsid: BillofmaterialsId): ConnectionIO[Option[BillofmaterialsRow]] = {
    sql"select billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate from production.billofmaterials where billofmaterialsid = $billofmaterialsid".query[BillofmaterialsRow].option
  }
  override def selectByIds(billofmaterialsids: Array[BillofmaterialsId]): Stream[ConnectionIO, BillofmaterialsRow] = {
    sql"select billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate from production.billofmaterials where billofmaterialsid = ANY($billofmaterialsids)".query[BillofmaterialsRow].stream
  }
  override def update(row: BillofmaterialsRow): ConnectionIO[Boolean] = {
    val billofmaterialsid = row.billofmaterialsid
    sql"""update production.billofmaterials
          set productassemblyid = ${row.productassemblyid}::int4,
              componentid = ${row.componentid}::int4,
              startdate = ${row.startdate}::timestamp,
              enddate = ${row.enddate}::timestamp,
              unitmeasurecode = ${row.unitmeasurecode}::bpchar,
              bomlevel = ${row.bomlevel}::int2,
              perassemblyqty = ${row.perassemblyqty}::numeric,
              modifieddate = ${row.modifieddate}::timestamp
          where billofmaterialsid = $billofmaterialsid
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(billofmaterialsid: BillofmaterialsId, fieldValues: List[BillofmaterialsFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case BillofmaterialsFieldValue.productassemblyid(value) => fr"productassemblyid = $value"
            case BillofmaterialsFieldValue.componentid(value) => fr"componentid = $value"
            case BillofmaterialsFieldValue.startdate(value) => fr"startdate = $value"
            case BillofmaterialsFieldValue.enddate(value) => fr"enddate = $value"
            case BillofmaterialsFieldValue.unitmeasurecode(value) => fr"unitmeasurecode = $value"
            case BillofmaterialsFieldValue.bomlevel(value) => fr"bomlevel = $value"
            case BillofmaterialsFieldValue.perassemblyqty(value) => fr"perassemblyqty = $value"
            case BillofmaterialsFieldValue.modifieddate(value) => fr"modifieddate = $value"
          } :_*
        )
        sql"""update production.billofmaterials
              $updates
              where billofmaterialsid = $billofmaterialsid
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: BillofmaterialsRow): ConnectionIO[BillofmaterialsRow] = {
    sql"""insert into production.billofmaterials(billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate)
          values (
            ${unsaved.billofmaterialsid}::int4,
            ${unsaved.productassemblyid}::int4,
            ${unsaved.componentid}::int4,
            ${unsaved.startdate}::timestamp,
            ${unsaved.enddate}::timestamp,
            ${unsaved.unitmeasurecode}::bpchar,
            ${unsaved.bomlevel}::int2,
            ${unsaved.perassemblyqty}::numeric,
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (billofmaterialsid)
          do update set
            productassemblyid = EXCLUDED.productassemblyid,
            componentid = EXCLUDED.componentid,
            startdate = EXCLUDED.startdate,
            enddate = EXCLUDED.enddate,
            unitmeasurecode = EXCLUDED.unitmeasurecode,
            bomlevel = EXCLUDED.bomlevel,
            perassemblyqty = EXCLUDED.perassemblyqty,
            modifieddate = EXCLUDED.modifieddate
          returning billofmaterialsid, productassemblyid, componentid, startdate, enddate, unitmeasurecode, bomlevel, perassemblyqty, modifieddate
       """.query.unique
  }
  implicit val read: Read[BillofmaterialsRow] =
    new Read[BillofmaterialsRow](
      gets = List(
        (Get[BillofmaterialsId], Nullability.NoNulls),
        (Get[ProductId], Nullability.Nullable),
        (Get[ProductId], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.Nullable),
        (Get[UnitmeasureId], Nullability.NoNulls),
        (Get[Int], Nullability.NoNulls),
        (Get[BigDecimal], Nullability.NoNulls),
        (Get[LocalDateTime], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => BillofmaterialsRow(
        billofmaterialsid = Get[BillofmaterialsId].unsafeGetNonNullable(rs, i + 0),
        productassemblyid = Get[ProductId].unsafeGetNullable(rs, i + 1),
        componentid = Get[ProductId].unsafeGetNonNullable(rs, i + 2),
        startdate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 3),
        enddate = Get[LocalDateTime].unsafeGetNullable(rs, i + 4),
        unitmeasurecode = Get[UnitmeasureId].unsafeGetNonNullable(rs, i + 5),
        bomlevel = Get[Int].unsafeGetNonNullable(rs, i + 6),
        perassemblyqty = Get[BigDecimal].unsafeGetNonNullable(rs, i + 7),
        modifieddate = Get[LocalDateTime].unsafeGetNonNullable(rs, i + 8)
      )
    )
  

}
