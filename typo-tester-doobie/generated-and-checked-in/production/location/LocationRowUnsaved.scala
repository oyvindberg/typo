/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package location

import adventureworks.Defaulted
import adventureworks.public.Name
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

/** This class corresponds to a row in table `production.location` which has not been persisted yet */
case class LocationRowUnsaved(
  /** Location description. */
  name: Name,
  /** Default: nextval('production.location_locationid_seq'::regclass)
      Primary key for Location records. */
  locationid: Defaulted[LocationId] = Defaulted.UseDefault,
  /** Default: 0.00
      Standard hourly cost of the manufacturing location. */
  costrate: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: 0.00
      Work capacity (in hours) of the manufacturing location. */
  availability: Defaulted[BigDecimal] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(locationidDefault: => LocationId, costrateDefault: => BigDecimal, availabilityDefault: => BigDecimal, modifieddateDefault: => LocalDateTime): LocationRow =
    LocationRow(
      name = name,
      locationid = locationid match {
                     case Defaulted.UseDefault => locationidDefault
                     case Defaulted.Provided(value) => value
                   },
      costrate = costrate match {
                   case Defaulted.UseDefault => costrateDefault
                   case Defaulted.Provided(value) => value
                 },
      availability = availability match {
                       case Defaulted.UseDefault => availabilityDefault
                       case Defaulted.Provided(value) => value
                     },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object LocationRowUnsaved {
  implicit val decoder: Decoder[LocationRowUnsaved] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Name]
        locationid <- c.downField("locationid").as[Defaulted[LocationId]]
        costrate <- c.downField("costrate").as[Defaulted[BigDecimal]]
        availability <- c.downField("availability").as[Defaulted[BigDecimal]]
        modifieddate <- c.downField("modifieddate").as[Defaulted[LocalDateTime]]
      } yield LocationRowUnsaved(name, locationid, costrate, availability, modifieddate)
  implicit val encoder: Encoder[LocationRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "locationid" := row.locationid,
        "costrate" := row.costrate,
        "availability" := row.availability,
        "modifieddate" := row.modifieddate
      )}
}
