/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package location

import adventureworks.TypoLocalDateTime
import adventureworks.public.Name
import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet

case class LocationRow(
  /** Primary key for Location records. */
  locationid: LocationId,
  /** Location description. */
  name: Name,
  /** Standard hourly cost of the manufacturing location. */
  costrate: BigDecimal,
  /** Work capacity (in hours) of the manufacturing location. */
  availability: BigDecimal,
  modifieddate: TypoLocalDateTime
)

object LocationRow {
  implicit val decoder: Decoder[LocationRow] = Decoder.forProduct5[LocationRow, LocationId, Name, BigDecimal, BigDecimal, TypoLocalDateTime]("locationid", "name", "costrate", "availability", "modifieddate")(LocationRow.apply)
  implicit val encoder: Encoder[LocationRow] = Encoder.forProduct5[LocationRow, LocationId, Name, BigDecimal, BigDecimal, TypoLocalDateTime]("locationid", "name", "costrate", "availability", "modifieddate")(x => (x.locationid, x.name, x.costrate, x.availability, x.modifieddate))
  implicit val read: Read[LocationRow] = new Read[LocationRow](
    gets = List(
      (Get[LocationId], Nullability.NoNulls),
      (Get[Name], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[BigDecimal], Nullability.NoNulls),
      (Get[TypoLocalDateTime], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => LocationRow(
      locationid = Get[LocationId].unsafeGetNonNullable(rs, i + 0),
      name = Get[Name].unsafeGetNonNullable(rs, i + 1),
      costrate = Get[BigDecimal].unsafeGetNonNullable(rs, i + 2),
      availability = Get[BigDecimal].unsafeGetNonNullable(rs, i + 3),
      modifieddate = Get[TypoLocalDateTime].unsafeGetNonNullable(rs, i + 4)
    )
  )
}
