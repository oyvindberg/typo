/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productcategory

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class ProductcategoryRepoMock(toRow: Function1[ProductcategoryRowUnsaved, ProductcategoryRow],
                              map: scala.collection.mutable.Map[ProductcategoryId, ProductcategoryRow] = scala.collection.mutable.Map.empty) extends ProductcategoryRepo {
  override def delete(productcategoryid: ProductcategoryId): ConnectionIO[Boolean] = {
    delay(map.remove(productcategoryid).isDefined)
  }
  override def insert(unsaved: ProductcategoryRow): ConnectionIO[ProductcategoryRow] = {
    delay {
      if (map.contains(unsaved.productcategoryid))
        sys.error(s"id ${unsaved.productcategoryid} already exists")
      else
        map.put(unsaved.productcategoryid, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: ProductcategoryRowUnsaved): ConnectionIO[ProductcategoryRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, ProductcategoryRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectById(productcategoryid: ProductcategoryId): ConnectionIO[Option[ProductcategoryRow]] = {
    delay(map.get(productcategoryid))
  }
  override def selectByIds(productcategoryids: Array[ProductcategoryId]): Stream[ConnectionIO, ProductcategoryRow] = {
    Stream.emits(productcategoryids.flatMap(map.get).toList)
  }
  override def update(row: ProductcategoryRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.productcategoryid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.productcategoryid, row)
          true
        case None => false
      }
    }
  }
  override def upsert(unsaved: ProductcategoryRow): ConnectionIO[ProductcategoryRow] = {
    delay {
      map.put(unsaved.productcategoryid, unsaved)
      unsaved
    }
  }
}
