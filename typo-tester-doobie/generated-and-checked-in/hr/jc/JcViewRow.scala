/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package hr
package jc

import adventureworks.TypoXml
import adventureworks.humanresources.jobcandidate.JobcandidateId
import adventureworks.person.businessentity.BusinessentityId
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.time.LocalDateTime

case class JcViewRow(
  id: Option[Int],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: Option[JobcandidateId],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.resume]] */
  resume: Option[TypoXml],
  /** Points to [[humanresources.jobcandidate.JobcandidateRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object JcViewRow {
  implicit val decoder: Decoder[JcViewRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[Option[Int]]
        jobcandidateid <- c.downField("jobcandidateid").as[Option[JobcandidateId]]
        businessentityid <- c.downField("businessentityid").as[Option[BusinessentityId]]
        resume <- c.downField("resume").as[Option[TypoXml]]
        modifieddate <- c.downField("modifieddate").as[Option[LocalDateTime]]
      } yield JcViewRow(id, jobcandidateid, businessentityid, resume, modifieddate)
  implicit val encoder: Encoder[JcViewRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id,
        "jobcandidateid" := row.jobcandidateid,
        "businessentityid" := row.businessentityid,
        "resume" := row.resume,
        "modifieddate" := row.modifieddate
      )}
}
