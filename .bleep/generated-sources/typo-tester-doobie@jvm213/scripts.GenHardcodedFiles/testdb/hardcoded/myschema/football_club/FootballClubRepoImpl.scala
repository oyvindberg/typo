/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package football_club

import doobie.free.connection.ConnectionIO
import doobie.syntax.string.toSqlInterpolator
import fs2.Stream

object FootballClubRepoImpl extends FootballClubRepo {
  override def delete(id: FootballClubId): ConnectionIO[Boolean] = {
    sql"""delete from myschema.football_club where "id" = ${id}""".update.run.map(_ > 0)
  }
  override def insert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    sql"""insert into myschema.football_club("id", "name")
          values (${unsaved.id}::int8, ${unsaved.name})
          returning "id", "name"
       """.query[FootballClubRow].unique
  }
  override def selectAll: Stream[ConnectionIO, FootballClubRow] = {
    sql"""select "id", "name" from myschema.football_club""".query[FootballClubRow].stream
  }
  override def selectById(id: FootballClubId): ConnectionIO[Option[FootballClubRow]] = {
    sql"""select "id", "name" from myschema.football_club where "id" = ${id}""".query[FootballClubRow].option
  }
  override def selectByIds(ids: Array[FootballClubId]): Stream[ConnectionIO, FootballClubRow] = {
    sql"""select "id", "name" from myschema.football_club where "id" = ANY(${ids})""".query[FootballClubRow].stream
  }
  override def update(row: FootballClubRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update myschema.football_club
          set "name" = ${row.name}
          where "id" = ${id}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    sql"""insert into myschema.football_club("id", "name")
          values (
            ${unsaved.id}::int8,
            ${unsaved.name}
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name"
          returning "id", "name"
       """.query[FootballClubRow].unique
  }
}
