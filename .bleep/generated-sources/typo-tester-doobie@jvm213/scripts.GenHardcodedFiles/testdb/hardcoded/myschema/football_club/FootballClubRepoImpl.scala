/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package football_club

import doobie.free.connection.ConnectionIO
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.meta.Meta
import fs2.Stream

object FootballClubRepoImpl extends FootballClubRepo {
  override def delete(id: FootballClubId): ConnectionIO[Boolean] = {
    sql"""delete from myschema.football_club where "id" = ${fromWrite(id)(Write.fromPut(FootballClubId.put))}""".update.run.map(_ > 0)
  }
  override def insert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    sql"""insert into myschema.football_club("id", "name")
          values (${fromWrite(unsaved.id)(Write.fromPut(FootballClubId.put))}::int8, ${fromWrite(unsaved.name)(Write.fromPut(Meta.StringMeta.put))})
          returning "id", "name"
       """.query(FootballClubRow.read).unique
  }
  override def selectAll: Stream[ConnectionIO, FootballClubRow] = {
    sql"""select "id", "name" from myschema.football_club""".query(FootballClubRow.read).stream
  }
  override def selectById(id: FootballClubId): ConnectionIO[Option[FootballClubRow]] = {
    sql"""select "id", "name" from myschema.football_club where "id" = ${fromWrite(id)(Write.fromPut(FootballClubId.put))}""".query(FootballClubRow.read).option
  }
  override def selectByIds(ids: Array[FootballClubId]): Stream[ConnectionIO, FootballClubRow] = {
    sql"""select "id", "name" from myschema.football_club where "id" = ANY(${fromWrite(ids)(Write.fromPut(FootballClubId.arrayPut))})""".query(FootballClubRow.read).stream
  }
  override def update(row: FootballClubRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update myschema.football_club
          set "name" = ${fromWrite(row.name)(Write.fromPut(Meta.StringMeta.put))}
          where "id" = ${fromWrite(id)(Write.fromPut(FootballClubId.put))}
       """
      .update
      .run
      .map(_ > 0)
  }
  override def upsert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    sql"""insert into myschema.football_club("id", "name")
          values (
            ${fromWrite(unsaved.id)(Write.fromPut(FootballClubId.put))}::int8,
            ${fromWrite(unsaved.name)(Write.fromPut(Meta.StringMeta.put))}
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name"
          returning "id", "name"
       """.query(FootballClubRow.read).unique
  }
}
