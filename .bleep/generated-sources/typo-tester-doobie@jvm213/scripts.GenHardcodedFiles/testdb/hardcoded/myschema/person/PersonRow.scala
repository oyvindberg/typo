/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package person

import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import testdb.hardcoded.customtypes.Defaulted
import testdb.hardcoded.myschema.football_club.FootballClubId
import testdb.hardcoded.myschema.marital_status.MaritalStatusId

/** Table: myschema.person
    person table
    Primary key: id */
case class PersonRow(
  /** Default: auto-increment */
  id: PersonId,
  /** Points to [[football_club.FootballClubRow.id]] */
  favouriteFootballClubId: FootballClubId,
  name: /* max 100 chars */ String,
  nickName: Option[/* max 30 chars */ String],
  blogUrl: Option[/* max 100 chars */ String],
  email: /* max 254 chars */ String,
  phone: /* max 8 chars */ String,
  likesPizza: Boolean,
  /** Default: some-value
      Points to [[marital_status.MaritalStatusRow.id]] */
  maritalStatusId: MaritalStatusId,
  workEmail: Option[/* max 254 chars */ String],
  /** Default: PUBLIC
      Identity ALWAYS */
  sector: Sector,
  /** Default: one */
  favoriteNumber: Number
){
   def toUnsavedRow(id: Defaulted[PersonId], maritalStatusId: Defaulted[MaritalStatusId] = Defaulted.Provided(this.maritalStatusId), favoriteNumber: Defaulted[Number] = Defaulted.Provided(this.favoriteNumber)): PersonRowUnsaved =
     PersonRowUnsaved(favouriteFootballClubId, name, nickName, blogUrl, email, phone, likesPizza, workEmail, id, maritalStatusId, favoriteNumber)
 }

object PersonRow {
  implicit lazy val decoder: Decoder[PersonRow] = Decoder.forProduct12[PersonRow, PersonId, FootballClubId, /* max 100 chars */ String, Option[/* max 30 chars */ String], Option[/* max 100 chars */ String], /* max 254 chars */ String, /* max 8 chars */ String, Boolean, MaritalStatusId, Option[/* max 254 chars */ String], Sector, Number]("id", "favourite_football_club_id", "name", "nick_name", "blog_url", "email", "phone", "likes_pizza", "marital_status_id", "work_email", "sector", "favorite_number")(PersonRow.apply)(PersonId.decoder, FootballClubId.decoder, Decoder.decodeString, Decoder.decodeOption(Decoder.decodeString), Decoder.decodeOption(Decoder.decodeString), Decoder.decodeString, Decoder.decodeString, Decoder.decodeBoolean, MaritalStatusId.decoder, Decoder.decodeOption(Decoder.decodeString), Sector.decoder, Number.decoder)
  implicit lazy val encoder: Encoder[PersonRow] = Encoder.forProduct12[PersonRow, PersonId, FootballClubId, /* max 100 chars */ String, Option[/* max 30 chars */ String], Option[/* max 100 chars */ String], /* max 254 chars */ String, /* max 8 chars */ String, Boolean, MaritalStatusId, Option[/* max 254 chars */ String], Sector, Number]("id", "favourite_football_club_id", "name", "nick_name", "blog_url", "email", "phone", "likes_pizza", "marital_status_id", "work_email", "sector", "favorite_number")(x => (x.id, x.favouriteFootballClubId, x.name, x.nickName, x.blogUrl, x.email, x.phone, x.likesPizza, x.maritalStatusId, x.workEmail, x.sector, x.favoriteNumber))(PersonId.encoder, FootballClubId.encoder, Encoder.encodeString, Encoder.encodeOption(Encoder.encodeString), Encoder.encodeOption(Encoder.encodeString), Encoder.encodeString, Encoder.encodeString, Encoder.encodeBoolean, MaritalStatusId.encoder, Encoder.encodeOption(Encoder.encodeString), Sector.encoder, Number.encoder)
  implicit lazy val read: Read[PersonRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(PersonId.get).asInstanceOf[Read[Any]],
      new Read.Single(FootballClubId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.BooleanMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(MaritalStatusId.get).asInstanceOf[Read[Any]],
      new Read.SingleOpt(Meta.StringMeta.get).asInstanceOf[Read[Any]],
      new Read.Single(Sector.get).asInstanceOf[Read[Any]],
      new Read.Single(Number.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    PersonRow(
      id = arr(0).asInstanceOf[PersonId],
          favouriteFootballClubId = arr(1).asInstanceOf[FootballClubId],
          name = arr(2).asInstanceOf[/* max 100 chars */ String],
          nickName = arr(3).asInstanceOf[Option[/* max 30 chars */ String]],
          blogUrl = arr(4).asInstanceOf[Option[/* max 100 chars */ String]],
          email = arr(5).asInstanceOf[/* max 254 chars */ String],
          phone = arr(6).asInstanceOf[/* max 8 chars */ String],
          likesPizza = arr(7).asInstanceOf[Boolean],
          maritalStatusId = arr(8).asInstanceOf[MaritalStatusId],
          workEmail = arr(9).asInstanceOf[Option[/* max 254 chars */ String]],
          sector = arr(10).asInstanceOf[Sector],
          favoriteNumber = arr(11).asInstanceOf[Number]
    )
  }
  implicit lazy val text: Text[PersonRow] = Text.instance[PersonRow]{ (row, sb) =>
    PersonId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    FootballClubId.text.unsafeEncode(row.favouriteFootballClubId, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.nickName, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.blogUrl, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.email, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.phone, sb)
    sb.append(Text.DELIMETER)
    Text.booleanInstance.unsafeEncode(row.likesPizza, sb)
    sb.append(Text.DELIMETER)
    MaritalStatusId.text.unsafeEncode(row.maritalStatusId, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.stringInstance).unsafeEncode(row.workEmail, sb)
    sb.append(Text.DELIMETER)
    Number.text.unsafeEncode(row.favoriteNumber, sb)
  }
  implicit lazy val write: Write[PersonRow] = new Write.Composite[PersonRow](
    List(new Write.Single(PersonId.put),
         new Write.Single(FootballClubId.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.StringMeta.put),
         new Write.Single(Meta.BooleanMeta.put),
         new Write.Single(MaritalStatusId.put),
         new Write.Single(Meta.StringMeta.put).toOpt,
         new Write.Single(Number.put)),
    a => List(a.id, a.favouriteFootballClubId, a.name, a.nickName, a.blogUrl, a.email, a.phone, a.likesPizza, a.maritalStatusId, a.workEmail, a.favoriteNumber)
  )
}
