/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package marital_status

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class MaritalStatusRow(
  id: MaritalStatusId
)

object MaritalStatusRow {
  implicit val decoder: Decoder[MaritalStatusRow] =
    (c: HCursor) =>
      for {
        id <- c.downField("id").as[MaritalStatusId]
      } yield MaritalStatusRow(id)
  implicit val encoder: Encoder[MaritalStatusRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "id" := row.id
      )}
  implicit val read: Read[MaritalStatusRow] =
    new Read[MaritalStatusRow](
      gets = List(
        (Get[MaritalStatusId], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => MaritalStatusRow(
        id = Get[MaritalStatusId].unsafeGetNonNullable(rs, i + 0)
      )
    )
  

}
