/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package marital_status

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class MaritalStatusRepoMock(map: scala.collection.mutable.Map[MaritalStatusId, MaritalStatusRow] = scala.collection.mutable.Map.empty) extends MaritalStatusRepo {
  override def delete(id: MaritalStatusId): ConnectionIO[Boolean] = {
    delay(map.remove(id).isDefined)
  }
  override def insert(unsaved: MaritalStatusRow): ConnectionIO[MaritalStatusRow] = {
    delay {
      if (map.contains(unsaved.id))
        sys.error(s"id ${unsaved.id} already exists")
      else
        map.put(unsaved.id, unsaved)
      unsaved
    }
  }
  override def selectAll: Stream[ConnectionIO, MaritalStatusRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[MaritalStatusFieldOrIdValue[_]]): Stream[ConnectionIO, MaritalStatusRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, MaritalStatusFieldValue.id(value)) => acc.filter(_.id == value)
      }.toList
    }
  }
  override def selectById(id: MaritalStatusId): ConnectionIO[Option[MaritalStatusRow]] = {
    delay(map.get(id))
  }
  override def selectByIds(ids: Array[MaritalStatusId]): Stream[ConnectionIO, MaritalStatusRow] = {
    Stream.emits(ids.flatMap(map.get).toList)
  }
  override def upsert(unsaved: MaritalStatusRow): ConnectionIO[MaritalStatusRow] = {
    delay {
      map.put(unsaved.id, unsaved)
      unsaved
    }
  }
}
