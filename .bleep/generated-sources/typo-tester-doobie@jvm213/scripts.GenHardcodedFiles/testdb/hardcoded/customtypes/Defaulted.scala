/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package customtypes

import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder
import io.circe.Json


/**
 * This signals a value where if you don't provide it, postgres will generate it for you
 */
sealed trait Defaulted[+T]

object Defaulted {
  case class Provided[T](value: T) extends Defaulted[T]
  case object UseDefault extends Defaulted[Nothing]
  implicit def decoder[T](implicit T: Decoder[T]): Decoder[Defaulted[T]] = c => c.as[String].flatMap {
      case "defaulted" => Right(UseDefault)
      case _           => c.downField("provided").as[T].map(Provided.apply)
    }
  implicit def encoder[T](implicit T: Encoder[T]): Encoder[Defaulted[T]] = Encoder.instance {
    case Provided(value) => Json.obj("provided" -> Encoder[T].apply(value))
    case UseDefault      => Json.fromString("defaulted")
  }
  implicit def text[T](implicit t: Text[T]): Text[Defaulted[T]] = Text.instance {
    case (Defaulted.Provided(value), sb) => t.unsafeEncode(value, sb)
    case (Defaulted.UseDefault, sb) =>
      sb.append("__DEFAULT_VALUE__")
      ()
  }
}
