/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package person

import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try
import testdb.hardcoded.Defaulted
import testdb.hardcoded.myschema.Sector
import testdb.hardcoded.myschema.football_club.FootballClubId
import testdb.hardcoded.myschema.marital_status.MaritalStatusId

/** This class corresponds to a row in table `myschema.person` which has not been persisted yet */
case class PersonRowUnsaved(
  /** Points to [[football_club.FootballClubRow.id]] */
  favouriteFootballClubId: FootballClubId,
  name: String,
  nickName: Option[String],
  blogUrl: Option[String],
  email: String,
  phone: String,
  likesPizza: Boolean,
  workEmail: Option[String],
  /** Default: auto-increment */
  id: Defaulted[PersonId] = Defaulted.UseDefault,
  /** Default: some-value
      Points to [[marital_status.MaritalStatusRow.id]] */
  maritalStatusId: Defaulted[MaritalStatusId] = Defaulted.UseDefault,
  /** Default: PUBLIC */
  sector: Defaulted[Sector] = Defaulted.UseDefault
) {
  def toRow(idDefault: => PersonId, maritalStatusIdDefault: => MaritalStatusId, sectorDefault: => Sector): PersonRow =
    PersonRow(
      favouriteFootballClubId = favouriteFootballClubId,
      name = name,
      nickName = nickName,
      blogUrl = blogUrl,
      email = email,
      phone = phone,
      likesPizza = likesPizza,
      workEmail = workEmail,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      maritalStatusId = maritalStatusId match {
                          case Defaulted.UseDefault => maritalStatusIdDefault
                          case Defaulted.Provided(value) => value
                        },
      sector = sector match {
                 case Defaulted.UseDefault => sectorDefault
                 case Defaulted.Provided(value) => value
               }
    )
}
object PersonRowUnsaved {
  implicit val oFormat: OFormat[PersonRowUnsaved] = new OFormat[PersonRowUnsaved]{
    override def writes(o: PersonRowUnsaved): JsObject =
      Json.obj(
        "favourite_football_club_id" -> o.favouriteFootballClubId,
        "name" -> o.name,
        "nick_name" -> o.nickName,
        "blog_url" -> o.blogUrl,
        "email" -> o.email,
        "phone" -> o.phone,
        "likes_pizza" -> o.likesPizza,
        "work_email" -> o.workEmail,
        "id" -> o.id,
        "marital_status_id" -> o.maritalStatusId,
        "sector" -> o.sector
      )
  
    override def reads(json: JsValue): JsResult[PersonRowUnsaved] = {
      JsResult.fromTry(
        Try(
          PersonRowUnsaved(
            favouriteFootballClubId = json.\("favourite_football_club_id").as[FootballClubId],
            name = json.\("name").as[String],
            nickName = json.\("nick_name").toOption.map(_.as[String]),
            blogUrl = json.\("blog_url").toOption.map(_.as[String]),
            email = json.\("email").as[String],
            phone = json.\("phone").as[String],
            likesPizza = json.\("likes_pizza").as[Boolean],
            workEmail = json.\("work_email").toOption.map(_.as[String]),
            id = json.\("id").as[Defaulted[PersonId]],
            maritalStatusId = json.\("marital_status_id").as[Defaulted[MaritalStatusId]],
            sector = json.\("sector").as[Defaulted[Sector]]
          )
        )
      )
    }
  }
}
