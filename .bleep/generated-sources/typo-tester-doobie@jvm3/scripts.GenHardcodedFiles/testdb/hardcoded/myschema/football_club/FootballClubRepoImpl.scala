/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package football_club

import cats.data.NonEmptyList
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.postgres.syntax.FragmentOps
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragments
import doobie.util.meta.Meta
import fs2.Stream
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

class FootballClubRepoImpl extends FootballClubRepo {
  override def delete: DeleteBuilder[FootballClubFields, FootballClubRow] = {
    DeleteBuilder("myschema.football_club", FootballClubFields.structure)
  }
  override def deleteById(id: FootballClubId): ConnectionIO[Boolean] = {
    sql"""delete from myschema.football_club where "id" = ${fromWrite(id)(Write.fromPut(FootballClubId.put))}""".update.run.map(_ > 0)
  }
  override def deleteByIds(ids: Array[FootballClubId]): ConnectionIO[Int] = {
    sql"""delete from myschema.football_club where "id" = ANY(${ids})""".update.run
  }
  override def insert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    sql"""insert into myschema.football_club("id", "name")
          values (${fromWrite(unsaved.id)(Write.fromPut(FootballClubId.put))}::int8, ${fromWrite(unsaved.name)(Write.fromPut(Meta.StringMeta.put))})
          returning "id", "name"
       """.query(using FootballClubRow.read).unique
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, FootballClubRow], batchSize: Int): ConnectionIO[Long] = {
    new FragmentOps(sql"""COPY myschema.football_club("id", "name") FROM STDIN""").copyIn(unsaved, batchSize)(using FootballClubRow.text)
  }
  override def select: SelectBuilder[FootballClubFields, FootballClubRow] = {
    SelectBuilderSql("myschema.football_club", FootballClubFields.structure, FootballClubRow.read)
  }
  override def selectAll: Stream[ConnectionIO, FootballClubRow] = {
    sql"""select "id", "name" from myschema.football_club""".query(using FootballClubRow.read).stream
  }
  override def selectByFieldValues(fieldValues: List[FootballClubFieldOrIdValue[?]]): Stream[ConnectionIO, FootballClubRow] = {
    val where = fragments.whereAndOpt(
      fieldValues.map {
        case FootballClubFieldValue.id(value) => fr""""id" = ${fromWrite(value)(Write.fromPut(FootballClubId.put))}"""
        case FootballClubFieldValue.name(value) => fr""""name" = ${fromWrite(value)(Write.fromPut(Meta.StringMeta.put))}"""
      }
    )
    sql"""select "id", "name" from myschema.football_club $where""".query(using FootballClubRow.read).stream
  }
  override def selectById(id: FootballClubId): ConnectionIO[Option[FootballClubRow]] = {
    sql"""select "id", "name" from myschema.football_club where "id" = ${fromWrite(id)(Write.fromPut(FootballClubId.put))}""".query(using FootballClubRow.read).option
  }
  override def selectByIds(ids: Array[FootballClubId]): Stream[ConnectionIO, FootballClubRow] = {
    sql"""select "id", "name" from myschema.football_club where "id" = ANY(${ids})""".query(using FootballClubRow.read).stream
  }
  override def selectByIdsTracked(ids: Array[FootballClubId]): ConnectionIO[Map[FootballClubId, Option[FootballClubRow]]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.map(id => (id, byId.get(id))).toMap
    }
  }
  override def update: UpdateBuilder[FootballClubFields, FootballClubRow] = {
    UpdateBuilder("myschema.football_club", FootballClubFields.structure, FootballClubRow.read)
  }
  override def update(row: FootballClubRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update myschema.football_club
          set "name" = ${fromWrite(row.name)(Write.fromPut(Meta.StringMeta.put))}
          where "id" = ${fromWrite(id)(Write.fromPut(FootballClubId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(id: FootballClubId, fieldValues: List[FootballClubFieldValue[?]]): ConnectionIO[Boolean] = {
    NonEmptyList.fromList(fieldValues) match {
      case None => pure(false)
      case Some(nonEmpty) =>
        val updates = fragments.set(
          nonEmpty.map {
            case FootballClubFieldValue.name(value) => fr""""name" = ${fromWrite(value)(Write.fromPut(Meta.StringMeta.put))}"""
          }
        )
        sql"""update myschema.football_club
              $updates
              where "id" = ${fromWrite(id)(Write.fromPut(FootballClubId.put))}""".update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    sql"""insert into myschema.football_club("id", "name")
          values (
            ${fromWrite(unsaved.id)(Write.fromPut(FootballClubId.put))}::int8,
            ${fromWrite(unsaved.name)(Write.fromPut(Meta.StringMeta.put))}
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name"
          returning "id", "name"
       """.query(using FootballClubRow.read).unique
  }
}
