/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package football_club

import doobie.postgres.Text
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Table: myschema.football_club
    football club
    Primary key: id */
case class FootballClubRow(
  id: FootballClubId,
  name: /* max 100 chars */ String
)

object FootballClubRow {
  implicit lazy val decoder: Decoder[FootballClubRow] = Decoder.forProduct2[FootballClubRow, FootballClubId, /* max 100 chars */ String]("id", "name")(FootballClubRow.apply)(FootballClubId.decoder, Decoder.decodeString)
  implicit lazy val encoder: Encoder[FootballClubRow] = Encoder.forProduct2[FootballClubRow, FootballClubId, /* max 100 chars */ String]("id", "name")(x => (x.id, x.name))(FootballClubId.encoder, Encoder.encodeString)
  implicit lazy val read: Read[FootballClubRow] = new Read.CompositeOfInstances(Array(
    new Read.Single(FootballClubId.get).asInstanceOf[Read[Any]],
      new Read.Single(Meta.StringMeta.get).asInstanceOf[Read[Any]]
  ))(using scala.reflect.ClassTag.Any).map { arr =>
    FootballClubRow(
      id = arr(0).asInstanceOf[FootballClubId],
          name = arr(1).asInstanceOf[/* max 100 chars */ String]
    )
  }
  implicit lazy val text: Text[FootballClubRow] = Text.instance[FootballClubRow]{ (row, sb) =>
    FootballClubId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
  }
  implicit lazy val write: Write[FootballClubRow] = new Write.Composite[FootballClubRow](
    List(new Write.Single(FootballClubId.put),
         new Write.Single(Meta.StringMeta.put)),
    a => List(a.id, a.name)
  )
}
