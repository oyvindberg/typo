/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package person

import doobie.free.connection.ConnectionIO
import doobie.free.connection.delay
import fs2.Stream

class PersonRepoMock(toRow: Function1[PersonRowUnsaved, PersonRow],
                     map: scala.collection.mutable.Map[PersonId, PersonRow] = scala.collection.mutable.Map.empty) extends PersonRepo {
  override def delete(id: PersonId): ConnectionIO[Boolean] = {
    delay(map.remove(id).isDefined)
  }
  override def insert(unsaved: PersonRow): ConnectionIO[PersonRow] = {
    delay {
      if (map.contains(unsaved.id))
        sys.error(s"id ${unsaved.id} already exists")
      else
        map.put(unsaved.id, unsaved)
      unsaved
    }
  }
  override def insert(unsaved: PersonRowUnsaved): ConnectionIO[PersonRow] = {
    insert(toRow(unsaved))
  }
  override def selectAll: Stream[ConnectionIO, PersonRow] = {
    Stream.emits(map.values.toList)
  }
  override def selectByFieldValues(fieldValues: List[PersonFieldOrIdValue[_]]): Stream[ConnectionIO, PersonRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, PersonFieldValue.id(value)) => acc.filter(_.id == value)
        case (acc, PersonFieldValue.favouriteFootballClubId(value)) => acc.filter(_.favouriteFootballClubId == value)
        case (acc, PersonFieldValue.name(value)) => acc.filter(_.name == value)
        case (acc, PersonFieldValue.nickName(value)) => acc.filter(_.nickName == value)
        case (acc, PersonFieldValue.blogUrl(value)) => acc.filter(_.blogUrl == value)
        case (acc, PersonFieldValue.email(value)) => acc.filter(_.email == value)
        case (acc, PersonFieldValue.phone(value)) => acc.filter(_.phone == value)
        case (acc, PersonFieldValue.likesPizza(value)) => acc.filter(_.likesPizza == value)
        case (acc, PersonFieldValue.maritalStatusId(value)) => acc.filter(_.maritalStatusId == value)
        case (acc, PersonFieldValue.workEmail(value)) => acc.filter(_.workEmail == value)
        case (acc, PersonFieldValue.sector(value)) => acc.filter(_.sector == value)
      }.toList
    }
  }
  override def selectById(id: PersonId): ConnectionIO[Option[PersonRow]] = {
    delay(map.get(id))
  }
  override def selectByIds(ids: Array[PersonId]): Stream[ConnectionIO, PersonRow] = {
    Stream.emits(ids.flatMap(map.get).toList)
  }
  override def update(row: PersonRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.id) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.id, row)
          true
        case None => false
      }
    }
  }
  override def updateFieldValues(id: PersonId, fieldValues: List[PersonFieldValue[_]]): ConnectionIO[Boolean] = {
    delay {
      map.get(id) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, PersonFieldValue.favouriteFootballClubId(value)) => acc.copy(favouriteFootballClubId = value)
            case (acc, PersonFieldValue.name(value)) => acc.copy(name = value)
            case (acc, PersonFieldValue.nickName(value)) => acc.copy(nickName = value)
            case (acc, PersonFieldValue.blogUrl(value)) => acc.copy(blogUrl = value)
            case (acc, PersonFieldValue.email(value)) => acc.copy(email = value)
            case (acc, PersonFieldValue.phone(value)) => acc.copy(phone = value)
            case (acc, PersonFieldValue.likesPizza(value)) => acc.copy(likesPizza = value)
            case (acc, PersonFieldValue.maritalStatusId(value)) => acc.copy(maritalStatusId = value)
            case (acc, PersonFieldValue.workEmail(value)) => acc.copy(workEmail = value)
            case (acc, PersonFieldValue.sector(value)) => acc.copy(sector = value)
          }
          if (updatedRow != oldRow) {
            map.put(id, updatedRow)
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  override def upsert(unsaved: PersonRow): ConnectionIO[PersonRow] = {
    delay {
      map.put(unsaved.id, unsaved)
      unsaved
    }
  }
}
