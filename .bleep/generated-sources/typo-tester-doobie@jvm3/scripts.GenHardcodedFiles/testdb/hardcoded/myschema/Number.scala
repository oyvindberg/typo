/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema

import cats.data.NonEmptyList
import doobie.enumerated.JdbcType
import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.Read
import doobie.util.Write
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder

/** Enum `myschema.number`
  *  - one
  *  - two
  *  - three
  */
sealed abstract class Number(val value: String)

object Number {
  def apply(str: String): Either[String, Number] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): Number =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object `_one` extends Number("one")
  case object `_two` extends Number("two")
  case object `_three` extends Number("three")
  val All: List[Number] = List(`_one`, `_two`, `_three`)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, Number] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayGet: Get[Array[Number]] = testdb.hardcoded.StringArrayMeta.get.map(_.map(force))
  implicit lazy val arrayPut: Put[Array[Number]] = Put.Advanced.array[AnyRef](NonEmptyList.one("myschema.number[]"), "myschema.number").contramap(_.map(_.value))
  implicit lazy val decoder: Decoder[Number] = Decoder.decodeString.emap(Number.apply)
  implicit lazy val encoder: Encoder[Number] = Encoder.encodeString.contramap(_.value)
  implicit lazy val get: Get[Number] = Meta.StringMeta.get.temap(Number.apply)
  implicit lazy val ordering: Ordering[Number] = Ordering.by(_.value)
  implicit lazy val put: Put[Number] = Put.Advanced.one[Number](JdbcType.Other, NonEmptyList.one("myschema.number"), (ps, i, a) => ps.setString(i, a.value), (rs, i, a) => rs.updateString(i, a.value))
  implicit lazy val read: Read[Number] = Read.fromGet(get)
  implicit lazy val text: Text[Number] = new Text[Number] {
    override def unsafeEncode(v: Number, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: Number, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val write: Write[Number] = Write.fromPut(put)
}
