/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package compositepk
package person

import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import scala.collection.immutable.ListMap
import scala.util.Try
import testdb.hardcoded.Defaulted

/** This class corresponds to a row in table `compositepk.person` which has not been persisted yet */
case class PersonRowUnsaved(
  name: Option[String],
  /** Default: auto-increment */
  one: Defaulted[Long] = Defaulted.UseDefault,
  /** Default: auto-increment */
  two: Defaulted[Option[String]] = Defaulted.UseDefault
) {
  def toRow(oneDefault: => Long, twoDefault: => Option[String]): PersonRow =
    PersonRow(
      name = name,
      one = one match {
              case Defaulted.UseDefault => oneDefault
              case Defaulted.Provided(value) => value
            },
      two = two match {
              case Defaulted.UseDefault => twoDefault
              case Defaulted.Provided(value) => value
            }
    )
}
object PersonRowUnsaved {
  implicit val reads: Reads[PersonRowUnsaved] = Reads[PersonRowUnsaved](json => JsResult.fromTry(
      Try(
        PersonRowUnsaved(
          name = json.\("name").toOption.map(_.as[String]),
          one = json.\("one").as[Defaulted[Long]],
          two = json.\("two").as[Defaulted[Option[String]]]
        )
      )
    ),
  )
  implicit val writes: OWrites[PersonRowUnsaved] = OWrites[PersonRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "name" -> Json.toJson(o.name),
      "one" -> Json.toJson(o.one),
      "two" -> Json.toJson(o.two)
    ))
  )
}
