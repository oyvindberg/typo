/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package compositepk
package person

import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try
import testdb.hardcoded.Text
import testdb.hardcoded.customtypes.Defaulted

/** This class corresponds to a row in table `compositepk.person` which has not been persisted yet */
case class PersonRowUnsaved(
  name: Option[String],
  /** Default: auto-increment */
  one: Defaulted[Long] = Defaulted.UseDefault,
  /** Default: auto-increment */
  two: Defaulted[Option[String]] = Defaulted.UseDefault
) {
  def toRow(oneDefault: => Long, twoDefault: => Option[String]): PersonRow =
    PersonRow(
      name = name,
      one = one match {
              case Defaulted.UseDefault => oneDefault
              case Defaulted.Provided(value) => value
            },
      two = two match {
              case Defaulted.UseDefault => twoDefault
              case Defaulted.Provided(value) => value
            }
    )
}
object PersonRowUnsaved {
  implicit lazy val reads: Reads[PersonRowUnsaved] = Reads[PersonRowUnsaved](json => JsResult.fromTry(
      Try(
        PersonRowUnsaved(
          name = json.\("name").toOption.map(_.as(Reads.StringReads)),
          one = json.\("one").as(Defaulted.reads(Reads.LongReads)),
          two = json.\("two").as(Defaulted.readsOpt(Reads.StringReads))
        )
      )
    ),
  )
  implicit lazy val text: Text[PersonRowUnsaved] = Text.instance[PersonRowUnsaved]{ (row, sb) =>
    Text.option(Text.stringInstance).unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.longInstance).unsafeEncode(row.one, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.stringInstance)).unsafeEncode(row.two, sb)
  }
  implicit lazy val writes: OWrites[PersonRowUnsaved] = OWrites[PersonRowUnsaved](o =>
    new JsObject(ListMap[String, JsValue](
      "name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.name),
      "one" -> Defaulted.writes(Writes.LongWrites).writes(o.one),
      "two" -> Defaulted.writes(Writes.OptionWrites(Writes.StringWrites)).writes(o.two)
    ))
  )
}
