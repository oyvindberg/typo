/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package football_club

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try
import testdb.hardcoded.Text

case class FootballClubRow(
  id: FootballClubId,
  name: /* max 100 chars */ String
)

object FootballClubRow {
  implicit lazy val reads: Reads[FootballClubRow] = Reads[FootballClubRow](json => JsResult.fromTry(
      Try(
        FootballClubRow(
          id = json.\("id").as(FootballClubId.reads),
          name = json.\("name").as(Reads.StringReads)
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[FootballClubRow] = RowParser[FootballClubRow] { row =>
    Success(
      FootballClubRow(
        id = row(idx + 0)(FootballClubId.column),
        name = row(idx + 1)(Column.columnToString)
      )
    )
  }
  implicit lazy val text: Text[FootballClubRow] = Text.instance[FootballClubRow]{ (row, sb) =>
    FootballClubId.text.unsafeEncode(row.id, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.name, sb)
  }
  implicit lazy val writes: OWrites[FootballClubRow] = OWrites[FootballClubRow](o =>
    new JsObject(ListMap[String, JsValue](
      "id" -> FootballClubId.writes.writes(o.id),
      "name" -> Writes.StringWrites.writes(o.name)
    ))
  )
}
