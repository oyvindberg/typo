/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package person

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import testdb.hardcoded.Text
import typo.dsl.Bijection

/** Type for the primary key of table `myschema.person` */
case class PersonId(value: Long) extends AnyVal
object PersonId {
  implicit lazy val arrayColumn: Column[Array[PersonId]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[PersonId]] = testdb.hardcoded.LongArrayToStatement.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[PersonId, Long] = Bijection[PersonId, Long](_.value)(PersonId.apply)
  implicit lazy val column: Column[PersonId] = Column.columnToLong.map(PersonId.apply)
  implicit lazy val ordering: Ordering[PersonId] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[PersonId] = new ParameterMetaData[PersonId] {
    override def sqlType: String = ParameterMetaData.LongParameterMetaData.sqlType
    override def jdbcType: Int = ParameterMetaData.LongParameterMetaData.jdbcType
  }
  implicit lazy val reads: Reads[PersonId] = Reads.LongReads.map(PersonId.apply)
  implicit lazy val text: Text[PersonId] = new Text[PersonId] {
    override def unsafeEncode(v: PersonId, sb: StringBuilder) = Text.longInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: PersonId, sb: StringBuilder) = Text.longInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[PersonId] = ToStatement.longToStatement.contramap(_.value)
  implicit lazy val writes: Writes[PersonId] = Writes.LongWrites.contramap(_.value)
}
