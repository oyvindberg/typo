/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema

import java.sql.ResultSet
import java.sql.Types
import typo.dsl.PGType
import zio.jdbc.JdbcDecoder
import zio.jdbc.JdbcDecoderError
import zio.jdbc.JdbcEncoder
import zio.jdbc.SqlFragment.Setter
import zio.json.JsonDecoder
import zio.json.JsonEncoder

/** Enum `myschema.number`
  *  - one
  *  - two
  *  - three
  */
sealed abstract class Number(val value: String)

object Number {
  def apply(str: String): Either[String, Number] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: String): Number =
    apply(str) match {
      case Left(msg) => sys.error(msg)
      case Right(value) => value
    }
  case object `_one` extends Number("one")
  case object `_two` extends Number("two")
  case object `_three` extends Number("three")
  val All: List[Number] = List(`_one`, `_two`, `_three`)
  val Names: String = All.map(_.value).mkString(", ")
  val ByName: Map[String, Number] = All.map(x => (x.value, x)).toMap
              
  implicit lazy val arrayJdbcDecoder: JdbcDecoder[Array[Number]] = testdb.hardcoded.StringArrayDecoder.map(a => if (a == null) null else a.map(force))
  implicit lazy val arrayJdbcEncoder: JdbcEncoder[Array[Number]] = JdbcEncoder.singleParamEncoder(using arraySetter)
  implicit lazy val arraySetter: Setter[Array[Number]] = Setter.forSqlType[Array[Number]](
      (ps, i, v) => ps.setArray(i, ps.getConnection.createArrayOf("myschema.number", v.map(x => x.value))),
      java.sql.Types.ARRAY
    )
  implicit lazy val jdbcDecoder: JdbcDecoder[Number] = JdbcDecoder.stringDecoder.flatMap { s =>
    new JdbcDecoder[Number] {
      override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, Number) = {
        def error(msg: String): JdbcDecoderError =
          JdbcDecoderError(
            message = s"Error decoding Number from ResultSet",
            cause = new RuntimeException(msg),
            metadata = rs.getMetaData,
            row = rs.getRow
          )
  
        Number.apply(s).fold(e => throw error(e), (columIndex, _))
      }
    }
  }
  implicit lazy val jdbcEncoder: JdbcEncoder[Number] = JdbcEncoder.stringEncoder.contramap(_.value)
  implicit lazy val jsonDecoder: JsonDecoder[Number] = JsonDecoder.string.mapOrFail(Number.apply)
  implicit lazy val jsonEncoder: JsonEncoder[Number] = JsonEncoder.string.contramap(_.value)
  implicit lazy val ordering: Ordering[Number] = Ordering.by(_.value)
  implicit lazy val pgType: PGType[Number] = PGType.instance[Number]("myschema.number", Types.OTHER)
  implicit lazy val setter: Setter[Number] = Setter.stringSetter.contramap(_.value)
  implicit lazy val text: Text[Number] = new Text[Number] {
    override def unsafeEncode(v: Number, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: Number, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
  }
}
