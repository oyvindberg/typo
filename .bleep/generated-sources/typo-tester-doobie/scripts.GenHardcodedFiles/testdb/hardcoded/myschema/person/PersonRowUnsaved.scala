/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package person

import testdb.hardcoded.Defaulted
import testdb.hardcoded.myschema.Sector
import testdb.hardcoded.myschema.football_club.FootballClubId
import testdb.hardcoded.myschema.marital_status.MaritalStatusId

/** This class corresponds to a row in table `myschema.person` which has not been persisted yet */
case class PersonRowUnsaved(
  /** Points to [[football_club.FootballClubRow.id]] */
  favouriteFootballClubId: FootballClubId,
  name: String,
  nickName: Option[String],
  blogUrl: Option[String],
  email: String,
  phone: String,
  likesPizza: Boolean,
  workEmail: Option[String],
  /** Default: auto-increment */
  id: Defaulted[PersonId] = Defaulted.UseDefault,
  /** Default: some-value
      Points to [[marital_status.MaritalStatusRow.id]] */
  maritalStatusId: Defaulted[MaritalStatusId] = Defaulted.UseDefault,
  /** Default: PUBLIC */
  sector: Defaulted[Sector] = Defaulted.UseDefault
) {
  def toRow(idDefault: => PersonId, maritalStatusIdDefault: => MaritalStatusId, sectorDefault: => Sector): PersonRow =
    PersonRow(
      favouriteFootballClubId = favouriteFootballClubId,
      name = name,
      nickName = nickName,
      blogUrl = blogUrl,
      email = email,
      phone = phone,
      likesPizza = likesPizza,
      workEmail = workEmail,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      maritalStatusId = maritalStatusId match {
                          case Defaulted.UseDefault => maritalStatusIdDefault
                          case Defaulted.Provided(value) => value
                        },
      sector = sector match {
                 case Defaulted.UseDefault => sectorDefault
                 case Defaulted.Provided(value) => value
               }
    )
}

