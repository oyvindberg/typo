/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package person

import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import testdb.hardcoded.Defaulted
import testdb.hardcoded.myschema.Sector
import testdb.hardcoded.myschema.football_club.FootballClubId
import testdb.hardcoded.myschema.marital_status.MaritalStatusId

/** This class corresponds to a row in table `myschema.person` which has not been persisted yet */
case class PersonRowUnsaved(
  /** Points to [[football_club.FootballClubRow.id]] */
  favouriteFootballClubId: FootballClubId,
  name: String,
  nickName: Option[String],
  blogUrl: Option[String],
  email: String,
  phone: String,
  likesPizza: Boolean,
  workEmail: Option[String],
  /** Default: auto-increment */
  id: Defaulted[PersonId] = Defaulted.UseDefault,
  /** Default: some-value
      Points to [[marital_status.MaritalStatusRow.id]] */
  maritalStatusId: Defaulted[MaritalStatusId] = Defaulted.UseDefault,
  /** Default: PUBLIC */
  sector: Defaulted[Sector] = Defaulted.UseDefault
) {
  def toRow(idDefault: => PersonId, maritalStatusIdDefault: => MaritalStatusId, sectorDefault: => Sector): PersonRow =
    PersonRow(
      favouriteFootballClubId = favouriteFootballClubId,
      name = name,
      nickName = nickName,
      blogUrl = blogUrl,
      email = email,
      phone = phone,
      likesPizza = likesPizza,
      workEmail = workEmail,
      id = id match {
             case Defaulted.UseDefault => idDefault
             case Defaulted.Provided(value) => value
           },
      maritalStatusId = maritalStatusId match {
                          case Defaulted.UseDefault => maritalStatusIdDefault
                          case Defaulted.Provided(value) => value
                        },
      sector = sector match {
                 case Defaulted.UseDefault => sectorDefault
                 case Defaulted.Provided(value) => value
               }
    )
}
object PersonRowUnsaved {
  implicit val decoder: Decoder[PersonRowUnsaved] =
    (c: HCursor) =>
      for {
        favouriteFootballClubId <- c.downField("favourite_football_club_id").as[FootballClubId]
        name <- c.downField("name").as[String]
        nickName <- c.downField("nick_name").as[Option[String]]
        blogUrl <- c.downField("blog_url").as[Option[String]]
        email <- c.downField("email").as[String]
        phone <- c.downField("phone").as[String]
        likesPizza <- c.downField("likes_pizza").as[Boolean]
        workEmail <- c.downField("work_email").as[Option[String]]
        id <- c.downField("id").as[Defaulted[PersonId]]
        maritalStatusId <- c.downField("marital_status_id").as[Defaulted[MaritalStatusId]]
        sector <- c.downField("sector").as[Defaulted[Sector]]
      } yield PersonRowUnsaved(favouriteFootballClubId, name, nickName, blogUrl, email, phone, likesPizza, workEmail, id, maritalStatusId, sector)
  implicit val encoder: Encoder[PersonRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "favourite_football_club_id" := row.favouriteFootballClubId,
        "name" := row.name,
        "nick_name" := row.nickName,
        "blog_url" := row.blogUrl,
        "email" := row.email,
        "phone" := row.phone,
        "likes_pizza" := row.likesPizza,
        "work_email" := row.workEmail,
        "id" := row.id,
        "marital_status_id" := row.maritalStatusId,
        "sector" := row.sector
      )}
}
