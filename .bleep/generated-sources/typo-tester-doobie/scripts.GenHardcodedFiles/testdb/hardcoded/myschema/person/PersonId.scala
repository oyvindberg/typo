/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package person

import doobie.Get
import doobie.Meta
import doobie.Put
import doobie.Read
import doobie.Write

/** Type for the primary key of table `myschema.person` */
case class PersonId(value: Long) extends AnyVal
object PersonId {
  implicit val ordering: Ordering[PersonId] = Ordering.by(_.value)
  
  implicit val putArray: Put[Array[PersonId]] = Meta[Array[Long]].put.contramap(_.map(_.value))
  implicit val getArray: Get[Array[PersonId]] = Meta[Array[Long]].get.map(_.map(PersonId.apply))
  implicit val put: Put[PersonId] = Put[Long].contramap(_.value)
  implicit val get: Get[PersonId] = Get[Long].map(PersonId.apply)
  implicit val write: Write[PersonId] = Write[Long].contramap(_.value)
  implicit val read: Read[PersonId] = Read[Long].map(PersonId.apply)
}
