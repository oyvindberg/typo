/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package football_club

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.string.toSqlInterpolator
import doobie.util.fragments
import fs2.Stream
import java.sql.ResultSet

object FootballClubRepoImpl extends FootballClubRepo {
  override def delete(id: FootballClubId): ConnectionIO[Boolean] = {
    sql"""delete from myschema.football_club where "id" = $id""".update.run.map(_ > 0)
  }
  override def insert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    sql"""insert into myschema.football_club("id", "name")
          values (${unsaved.id}::int8, ${unsaved.name})
          returning "id", "name"
       """.query.unique
  }
  override def selectAll: Stream[ConnectionIO, FootballClubRow] = {
    sql"""select "id", "name" from myschema.football_club""".query[FootballClubRow].stream
  }
  override def selectByFieldValues(fieldValues: List[FootballClubFieldOrIdValue[_]]): Stream[ConnectionIO, FootballClubRow] = {
    val where = fragments.whereAnd(
      fieldValues.map {
        case FootballClubFieldValue.id(value) => fr""""id" = $value"""
        case FootballClubFieldValue.name(value) => fr""""name" = $value"""
      } :_*
    )
    sql"select * from myschema.football_club $where".query[FootballClubRow].stream
  
  }
  override def selectById(id: FootballClubId): ConnectionIO[Option[FootballClubRow]] = {
    sql"""select "id", "name" from myschema.football_club where "id" = $id""".query[FootballClubRow].option
  }
  override def selectByIds(ids: Array[FootballClubId]): Stream[ConnectionIO, FootballClubRow] = {
    sql"""select "id", "name" from myschema.football_club where "id" = ANY($ids)""".query[FootballClubRow].stream
  }
  override def update(row: FootballClubRow): ConnectionIO[Boolean] = {
    val id = row.id
    sql"""update myschema.football_club
          set "name" = ${row.name}
          where "id" = $id
       """
      .update
      .run
      .map(_ > 0)
  }
  override def updateFieldValues(id: FootballClubId, fieldValues: List[FootballClubFieldValue[_]]): ConnectionIO[Boolean] = {
    fieldValues match {
      case Nil => pure(false)
      case nonEmpty =>
        val updates = fragments.set(
          nonEmpty.map {
            case FootballClubFieldValue.name(value) => fr""""name" = $value"""
          } :_*
        )
        sql"""update myschema.football_club
              $updates
              where "id" = $id
           """.update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    sql"""insert into myschema.football_club("id", "name")
          values (
            ${unsaved.id}::int8,
            ${unsaved.name}
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name"
          returning "id", "name"
       """.query.unique
  }
  implicit val read: Read[FootballClubRow] =
    new Read[FootballClubRow](
      gets = List(
        (Get[FootballClubId], Nullability.NoNulls),
        (Get[String], Nullability.NoNulls)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => FootballClubRow(
        id = Get[FootballClubId].unsafeGetNonNullable(rs, i + 0),
        name = Get[String].unsafeGetNonNullable(rs, i + 1)
      )
    )
  

}
