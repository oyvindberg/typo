/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package compositepk
package person

import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import testdb.hardcoded.Defaulted

/** This class corresponds to a row in table `compositepk.person` which has not been persisted yet */
case class PersonRowUnsaved(
  name: Option[String],
  /** Default: auto-increment */
  one: Defaulted[Long] = Defaulted.UseDefault,
  /** Default: auto-increment */
  two: Defaulted[Option[String]] = Defaulted.UseDefault
) {
  def toRow(oneDefault: => Long, twoDefault: => Option[String]): PersonRow =
    PersonRow(
      name = name,
      one = one match {
              case Defaulted.UseDefault => oneDefault
              case Defaulted.Provided(value) => value
            },
      two = two match {
              case Defaulted.UseDefault => twoDefault
              case Defaulted.Provided(value) => value
            }
    )
}
object PersonRowUnsaved {
  implicit val decoder: Decoder[PersonRowUnsaved] =
    (c: HCursor) =>
      for {
        name <- c.downField("name").as[Option[String]]
        one <- c.downField("one").as[Defaulted[Long]]
        two <- c.downField("two").as[Defaulted[Option[String]]]
      } yield PersonRowUnsaved(name, one, two)
  implicit val encoder: Encoder[PersonRowUnsaved] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "name" := row.name,
        "one" := row.one,
        "two" := row.two
      )}
}
