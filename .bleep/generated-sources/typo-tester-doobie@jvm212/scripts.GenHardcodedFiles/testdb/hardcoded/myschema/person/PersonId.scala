/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package person

import doobie.postgres.Text
import doobie.util.Get
import doobie.util.Put
import doobie.util.meta.Meta
import io.circe.Decoder
import io.circe.Encoder
import typo.dsl.Bijection

/** Type for the primary key of table `myschema.person` */
case class PersonId(value: Long) extends AnyVal
object PersonId {
  implicit lazy val arrayGet: Get[Array[PersonId]] = testdb.hardcoded.LongArrayMeta.get.map(_.map(PersonId.apply))
  implicit lazy val arrayPut: Put[Array[PersonId]] = testdb.hardcoded.LongArrayMeta.put.contramap(_.map(_.value))
  implicit lazy val bijection: Bijection[PersonId, Long] = Bijection[PersonId, Long](_.value)(PersonId.apply)
  implicit lazy val decoder: Decoder[PersonId] = Decoder.decodeLong.map(PersonId.apply)
  implicit lazy val encoder: Encoder[PersonId] = Encoder.encodeLong.contramap(_.value)
  implicit lazy val get: Get[PersonId] = Meta.LongMeta.get.map(PersonId.apply)
  implicit lazy val ordering: Ordering[PersonId] = Ordering.by(_.value)
  implicit lazy val put: Put[PersonId] = Meta.LongMeta.put.contramap(_.value)
  implicit lazy val text: Text[PersonId] = new Text[PersonId] {
    override def unsafeEncode(v: PersonId, sb: StringBuilder) = Text.longInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: PersonId, sb: StringBuilder) = Text.longInstance.unsafeArrayEncode(v.value, sb)
  }
}
