/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package person

import doobie.enumerated.Nullability
import doobie.util.Get
import doobie.util.Read
import io.circe.Decoder
import io.circe.Encoder
import java.sql.ResultSet
import testdb.hardcoded.myschema.Sector
import testdb.hardcoded.myschema.football_club.FootballClubId
import testdb.hardcoded.myschema.marital_status.MaritalStatusId

case class PersonRow(
  id: PersonId,
  /** Points to [[football_club.FootballClubRow.id]] */
  favouriteFootballClubId: FootballClubId,
  name: /* max 100 chars */ String,
  nickName: Option[/* max 30 chars */ String],
  blogUrl: Option[/* max 100 chars */ String],
  email: /* max 254 chars */ String,
  phone: /* max 8 chars */ String,
  likesPizza: Boolean,
  /** Points to [[marital_status.MaritalStatusRow.id]] */
  maritalStatusId: MaritalStatusId,
  workEmail: Option[/* max 254 chars */ String],
  sector: Sector
)

object PersonRow {
  implicit val decoder: Decoder[PersonRow] = Decoder.forProduct11[PersonRow, PersonId, FootballClubId, /* max 100 chars */ String, Option[/* max 30 chars */ String], Option[/* max 100 chars */ String], /* max 254 chars */ String, /* max 8 chars */ String, Boolean, MaritalStatusId, Option[/* max 254 chars */ String], Sector]("id", "favourite_football_club_id", "name", "nick_name", "blog_url", "email", "phone", "likes_pizza", "marital_status_id", "work_email", "sector")(PersonRow.apply)
  implicit val encoder: Encoder[PersonRow] = Encoder.forProduct11[PersonRow, PersonId, FootballClubId, /* max 100 chars */ String, Option[/* max 30 chars */ String], Option[/* max 100 chars */ String], /* max 254 chars */ String, /* max 8 chars */ String, Boolean, MaritalStatusId, Option[/* max 254 chars */ String], Sector]("id", "favourite_football_club_id", "name", "nick_name", "blog_url", "email", "phone", "likes_pizza", "marital_status_id", "work_email", "sector")(x => (x.id, x.favouriteFootballClubId, x.name, x.nickName, x.blogUrl, x.email, x.phone, x.likesPizza, x.maritalStatusId, x.workEmail, x.sector))
  implicit val read: Read[PersonRow] = new Read[PersonRow](
    gets = List(
      (Get[PersonId], Nullability.NoNulls),
      (Get[FootballClubId], Nullability.NoNulls),
      (Get[/* max 100 chars */ String], Nullability.NoNulls),
      (Get[/* max 30 chars */ String], Nullability.Nullable),
      (Get[/* max 100 chars */ String], Nullability.Nullable),
      (Get[/* max 254 chars */ String], Nullability.NoNulls),
      (Get[/* max 8 chars */ String], Nullability.NoNulls),
      (Get[Boolean], Nullability.NoNulls),
      (Get[MaritalStatusId], Nullability.NoNulls),
      (Get[/* max 254 chars */ String], Nullability.Nullable),
      (Get[Sector], Nullability.NoNulls)
    ),
    unsafeGet = (rs: ResultSet, i: Int) => PersonRow(
      id = Get[PersonId].unsafeGetNonNullable(rs, i + 0),
      favouriteFootballClubId = Get[FootballClubId].unsafeGetNonNullable(rs, i + 1),
      name = Get[/* max 100 chars */ String].unsafeGetNonNullable(rs, i + 2),
      nickName = Get[/* max 30 chars */ String].unsafeGetNullable(rs, i + 3),
      blogUrl = Get[/* max 100 chars */ String].unsafeGetNullable(rs, i + 4),
      email = Get[/* max 254 chars */ String].unsafeGetNonNullable(rs, i + 5),
      phone = Get[/* max 8 chars */ String].unsafeGetNonNullable(rs, i + 6),
      likesPizza = Get[Boolean].unsafeGetNonNullable(rs, i + 7),
      maritalStatusId = Get[MaritalStatusId].unsafeGetNonNullable(rs, i + 8),
      workEmail = Get[/* max 254 chars */ String].unsafeGetNullable(rs, i + 9),
      sector = Get[Sector].unsafeGetNonNullable(rs, i + 10)
    )
  )
}
