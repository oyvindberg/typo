/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package compositepk
package person

import doobie.postgres.Text
import io.circe.Decoder
import io.circe.Encoder
import testdb.hardcoded.customtypes.Defaulted

/** This class corresponds to a row in table `compositepk.person` which has not been persisted yet */
case class PersonRowUnsaved(
  name: Option[String],
  /** Default: auto-increment */
  one: Defaulted[Long] = Defaulted.UseDefault,
  /** Default: auto-increment */
  two: Defaulted[Option[String]] = Defaulted.UseDefault
) {
  def toRow(oneDefault: => Long, twoDefault: => Option[String]): PersonRow =
    PersonRow(
      name = name,
      one = one match {
              case Defaulted.UseDefault => oneDefault
              case Defaulted.Provided(value) => value
            },
      two = two match {
              case Defaulted.UseDefault => twoDefault
              case Defaulted.Provided(value) => value
            }
    )
}
object PersonRowUnsaved {
  implicit lazy val decoder: Decoder[PersonRowUnsaved] = Decoder.forProduct3[PersonRowUnsaved, Option[String], Defaulted[Long], Defaulted[Option[String]]]("name", "one", "two")(PersonRowUnsaved.apply)(Decoder.decodeOption(Decoder.decodeString), Defaulted.decoder(Decoder.decodeLong), Defaulted.decoder(Decoder.decodeOption(Decoder.decodeString)))
  implicit lazy val encoder: Encoder[PersonRowUnsaved] = Encoder.forProduct3[PersonRowUnsaved, Option[String], Defaulted[Long], Defaulted[Option[String]]]("name", "one", "two")(x => (x.name, x.one, x.two))(Encoder.encodeOption(Encoder.encodeString), Defaulted.encoder(Encoder.encodeLong), Defaulted.encoder(Encoder.encodeOption(Encoder.encodeString)))
  implicit lazy val text: Text[PersonRowUnsaved] = Text.instance[PersonRowUnsaved]{ (row, sb) =>
    Text.option(Text.stringInstance).unsafeEncode(row.name, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.longInstance).unsafeEncode(row.one, sb)
    sb.append(Text.DELIMETER)
    Defaulted.text(Text.option(Text.stringInstance)).unsafeEncode(row.two, sb)
  }
}
