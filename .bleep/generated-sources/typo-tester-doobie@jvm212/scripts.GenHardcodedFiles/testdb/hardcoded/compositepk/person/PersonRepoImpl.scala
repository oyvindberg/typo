/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package compositepk
package person

import cats.data.NonEmptyList
import doobie.free.connection.ConnectionIO
import doobie.free.connection.pure
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite
import doobie.syntax.string.toSqlInterpolator
import doobie.util.Write
import doobie.util.fragment.Fragment
import doobie.util.fragments
import doobie.util.meta.Meta
import fs2.Stream
import testdb.hardcoded.customtypes.Defaulted
import typo.dsl.DeleteBuilder
import typo.dsl.SelectBuilder
import typo.dsl.SelectBuilderSql
import typo.dsl.UpdateBuilder

object PersonRepoImpl extends PersonRepo {
  override def delete(compositeId: PersonId): ConnectionIO[Boolean] = {
    sql"""delete from compositepk.person where "one" = ${fromWrite(compositeId.one)(Write.fromPut(Meta.LongMeta.put))} AND "two" = ${fromWrite(compositeId.two)(Write.fromPutOption(Meta.StringMeta.put))}""".update.run.map(_ > 0)
  }
  override def delete: DeleteBuilder[PersonFields, PersonRow] = {
    DeleteBuilder("compositepk.person", PersonFields)
  }
  override def insert(unsaved: PersonRow): ConnectionIO[PersonRow] = {
    sql"""insert into compositepk.person("one", "two", "name")
          values (${fromWrite(unsaved.one)(Write.fromPut(Meta.LongMeta.put))}::int8, ${fromWrite(unsaved.two)(Write.fromPutOption(Meta.StringMeta.put))}, ${fromWrite(unsaved.name)(Write.fromPutOption(Meta.StringMeta.put))})
          returning "one", "two", "name"
       """.query(PersonRow.read).unique
  }
  override def insertStreaming(unsaved: Stream[ConnectionIO, PersonRow], batchSize: Int): ConnectionIO[Long] = {
    doobie.postgres.syntax.fragment.toFragmentOps(sql"""COPY compositepk.person("one", "two", "name") FROM STDIN""").copyIn(unsaved, batchSize)(PersonRow.text)
  }
  override def insert(unsaved: PersonRowUnsaved): ConnectionIO[PersonRow] = {
    val fs = List(
      Some((Fragment.const(s""""name""""), fr"${fromWrite(unsaved.name)(Write.fromPutOption(Meta.StringMeta.put))}")),
      unsaved.one match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s""""one""""), fr"${fromWrite(value: Long)(Write.fromPut(Meta.LongMeta.put))}::int8"))
      },
      unsaved.two match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((Fragment.const(s""""two""""), fr"${fromWrite(value: Option[String])(Write.fromPutOption(Meta.StringMeta.put))}"))
      }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into compositepk.person default values
            returning "one", "two", "name"
         """
    } else {
      import cats.syntax.foldable.toFoldableOps
      sql"""insert into compositepk.person(${fs.map { case (n, _) => n }.intercalate(fr", ")})
            values (${fs.map { case (_, f) => f }.intercalate(fr", ")})
            returning "one", "two", "name"
         """
    }
    q.query(PersonRow.read).unique
    
  }
  /* NOTE: this functionality requires PostgreSQL 16 or later! */
  override def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, PersonRowUnsaved], batchSize: Int): ConnectionIO[Long] = {
    doobie.postgres.syntax.fragment.toFragmentOps(sql"""COPY compositepk.person("name", "one", "two") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(PersonRowUnsaved.text)
  }
  override def select: SelectBuilder[PersonFields, PersonRow] = {
    SelectBuilderSql("compositepk.person", PersonFields, PersonRow.read)
  }
  override def selectAll: Stream[ConnectionIO, PersonRow] = {
    sql"""select "one", "two", "name" from compositepk.person""".query(PersonRow.read).stream
  }
  override def selectById(compositeId: PersonId): ConnectionIO[Option[PersonRow]] = {
    sql"""select "one", "two", "name" from compositepk.person where "one" = ${fromWrite(compositeId.one)(Write.fromPut(Meta.LongMeta.put))} AND "two" = ${fromWrite(compositeId.two)(Write.fromPutOption(Meta.StringMeta.put))}""".query(PersonRow.read).option
  }
  override def selectByFieldValues(fieldValues: List[PersonFieldOrIdValue[?]]): Stream[ConnectionIO, PersonRow] = {
    val where = fragments.whereAndOpt(
      fieldValues.map {
        case PersonFieldValue.one(value) => fr""""one" = ${fromWrite(value)(Write.fromPut(Meta.LongMeta.put))}"""
        case PersonFieldValue.two(value) => fr""""two" = ${fromWrite(value)(Write.fromPutOption(Meta.StringMeta.put))}"""
        case PersonFieldValue.name(value) => fr""""name" = ${fromWrite(value)(Write.fromPutOption(Meta.StringMeta.put))}"""
      }
    )
    sql"""select "one", "two", "name" from compositepk.person $where""".query(PersonRow.read).stream
  }
  override def update(row: PersonRow): ConnectionIO[Boolean] = {
    val compositeId = row.compositeId
    sql"""update compositepk.person
          set "name" = ${fromWrite(row.name)(Write.fromPutOption(Meta.StringMeta.put))}
          where "one" = ${fromWrite(compositeId.one)(Write.fromPut(Meta.LongMeta.put))} AND "two" = ${fromWrite(compositeId.two)(Write.fromPutOption(Meta.StringMeta.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  override def update: UpdateBuilder[PersonFields, PersonRow] = {
    UpdateBuilder("compositepk.person", PersonFields, PersonRow.read)
  }
  override def updateFieldValues(compositeId: PersonId, fieldValues: List[PersonFieldValue[?]]): ConnectionIO[Boolean] = {
    NonEmptyList.fromList(fieldValues) match {
      case None => pure(false)
      case Some(nonEmpty) =>
        val updates = fragments.set(
          nonEmpty.map {
            case PersonFieldValue.name(value) => fr""""name" = ${fromWrite(value)(Write.fromPutOption(Meta.StringMeta.put))}"""
          }
        )
        sql"""update compositepk.person
              $updates
              where "one" = ${fromWrite(compositeId.one)(Write.fromPut(Meta.LongMeta.put))} AND "two" = ${fromWrite(compositeId.two)(Write.fromPutOption(Meta.StringMeta.put))}""".update.run.map(_ > 0)
    }
  }
  override def upsert(unsaved: PersonRow): ConnectionIO[PersonRow] = {
    sql"""insert into compositepk.person("one", "two", "name")
          values (
            ${fromWrite(unsaved.one)(Write.fromPut(Meta.LongMeta.put))}::int8,
            ${fromWrite(unsaved.two)(Write.fromPutOption(Meta.StringMeta.put))},
            ${fromWrite(unsaved.name)(Write.fromPutOption(Meta.StringMeta.put))}
          )
          on conflict ("one", "two")
          do update set
            "name" = EXCLUDED."name"
          returning "one", "two", "name"
       """.query(PersonRow.read).unique
  }
}
