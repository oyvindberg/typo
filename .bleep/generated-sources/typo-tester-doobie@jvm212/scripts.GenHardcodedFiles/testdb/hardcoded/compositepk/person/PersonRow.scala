/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package compositepk
package person

import doobie.Get
import doobie.Read
import doobie.enumerated.Nullability
import io.circe.Decoder
import io.circe.Encoder
import io.circe.HCursor
import io.circe.Json
import java.sql.ResultSet

case class PersonRow(
  one: Long,
  two: Option[String],
  name: Option[String]
){
   val compositeId: PersonId = PersonId(one, two)
 }

object PersonRow {
  implicit val decoder: Decoder[PersonRow] =
    (c: HCursor) =>
      for {
        one <- c.downField("one").as[Long]
        two <- c.downField("two").as[Option[String]]
        name <- c.downField("name").as[Option[String]]
      } yield PersonRow(one, two, name)
  implicit val encoder: Encoder[PersonRow] = {
    import io.circe.syntax._
    row =>
      Json.obj(
        "one" := row.one,
        "two" := row.two,
        "name" := row.name
      )}
  implicit val read: Read[PersonRow] =
    new Read[PersonRow](
      gets = List(
        (Get[Long], Nullability.NoNulls),
        (Get[String], Nullability.Nullable),
        (Get[String], Nullability.Nullable)
      ),
      unsafeGet = (rs: ResultSet, i: Int) => PersonRow(
        one = Get[Long].unsafeGetNonNullable(rs, i + 0),
        two = Get[String].unsafeGetNullable(rs, i + 1),
        name = Get[String].unsafeGetNullable(rs, i + 2)
      )
    )
  

}
