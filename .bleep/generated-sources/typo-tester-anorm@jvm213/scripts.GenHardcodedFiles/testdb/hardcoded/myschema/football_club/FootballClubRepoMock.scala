/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb
package hardcoded
package myschema
package football_club

import java.sql.Connection

class FootballClubRepoMock(map: scala.collection.mutable.Map[FootballClubId, FootballClubRow] = scala.collection.mutable.Map.empty) extends FootballClubRepo {
  override def delete(id: FootballClubId)(implicit c: Connection): Boolean = {
    map.remove(id).isDefined
  }
  override def insert(unsaved: FootballClubRow)(implicit c: Connection): FootballClubRow = {
    if (map.contains(unsaved.id))
      sys.error(s"id ${unsaved.id} already exists")
    else
      map.put(unsaved.id, unsaved)
    unsaved
  }
  override def selectAll(implicit c: Connection): List[FootballClubRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[FootballClubFieldOrIdValue[_]])(implicit c: Connection): List[FootballClubRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, FootballClubFieldValue.id(value)) => acc.filter(_.id == value)
      case (acc, FootballClubFieldValue.name(value)) => acc.filter(_.name == value)
    }.toList
  }
  override def selectById(id: FootballClubId)(implicit c: Connection): Option[FootballClubRow] = {
    map.get(id)
  }
  override def selectByIds(ids: Array[FootballClubId])(implicit c: Connection): List[FootballClubRow] = {
    ids.flatMap(map.get).toList
  }
  override def update(row: FootballClubRow)(implicit c: Connection): Boolean = {
    map.get(row.id) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.id, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(id: FootballClubId, fieldValues: List[FootballClubFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(id) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, FootballClubFieldValue.name(value)) => acc.copy(name = value)
        }
        if (updatedRow != oldRow) {
          map.put(id, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: FootballClubRow)(implicit c: Connection): FootballClubRow = {
    map.put(unsaved.id, unsaved)
    unsaved
  }
}
