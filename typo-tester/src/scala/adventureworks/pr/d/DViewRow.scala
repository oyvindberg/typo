/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package d

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.production.document.DocumentId
import adventureworks.public.Flag
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class DViewRow(
  /** Points to [[production.document.DocumentRow.title]] */
  title: Option[String],
  /** Points to [[production.document.DocumentRow.owner]] */
  owner: Option[BusinessentityId],
  /** Points to [[production.document.DocumentRow.folderflag]] */
  folderflag: Flag,
  /** Points to [[production.document.DocumentRow.filename]] */
  filename: Option[String],
  /** Points to [[production.document.DocumentRow.fileextension]] */
  fileextension: Option[String],
  /** Points to [[production.document.DocumentRow.revision]] */
  revision: Option[/* bpchar */ String],
  /** Points to [[production.document.DocumentRow.changenumber]] */
  changenumber: Option[Int],
  /** Points to [[production.document.DocumentRow.status]] */
  status: Option[Int],
  /** Points to [[production.document.DocumentRow.documentsummary]] */
  documentsummary: Option[String],
  /** Points to [[production.document.DocumentRow.document]] */
  document: Option[Byte],
  /** Points to [[production.document.DocumentRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[production.document.DocumentRow.modifieddate]] */
  modifieddate: Option[LocalDateTime],
  /** Points to [[production.document.DocumentRow.documentnode]] */
  documentnode: Option[DocumentId]
)

object DViewRow {
  implicit val oFormat: OFormat[DViewRow] = new OFormat[DViewRow]{
    override def writes(o: DViewRow): JsObject =
      Json.obj(
        "title" -> o.title,
        "owner" -> o.owner,
        "folderflag" -> o.folderflag,
        "filename" -> o.filename,
        "fileextension" -> o.fileextension,
        "revision" -> o.revision,
        "changenumber" -> o.changenumber,
        "status" -> o.status,
        "documentsummary" -> o.documentsummary,
        "document" -> o.document,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate,
        "documentnode" -> o.documentnode
      )
  
    override def reads(json: JsValue): JsResult[DViewRow] = {
      JsResult.fromTry(
        Try(
          DViewRow(
            title = json.\("title").toOption.map(_.as[String]),
            owner = json.\("owner").toOption.map(_.as[BusinessentityId]),
            folderflag = json.\("folderflag").as[Flag],
            filename = json.\("filename").toOption.map(_.as[String]),
            fileextension = json.\("fileextension").toOption.map(_.as[String]),
            revision = json.\("revision").toOption.map(_.as[/* bpchar */ String]),
            changenumber = json.\("changenumber").toOption.map(_.as[Int]),
            status = json.\("status").toOption.map(_.as[Int]),
            documentsummary = json.\("documentsummary").toOption.map(_.as[String]),
            document = json.\("document").toOption.map(_.as[Byte]),
            rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime]),
            documentnode = json.\("documentnode").toOption.map(_.as[DocumentId])
          )
        )
      )
    }
  }
}
