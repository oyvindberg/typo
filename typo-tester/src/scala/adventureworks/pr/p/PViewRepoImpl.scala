/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package p

import adventureworks.production.product.ProductId
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Flag
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object PViewRepoImpl extends PViewRepo {
  override def selectAll(implicit c: Connection): List[PViewRow] = {
    SQL"""select "id", productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate
          from pr."p"
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[PViewFieldOrIdValue[_]])(implicit c: Connection): List[PViewRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case PViewFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case PViewFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case PViewFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case PViewFieldValue.productnumber(value) => NamedParameter("productnumber", ParameterValue.from(value))
          case PViewFieldValue.makeflag(value) => NamedParameter("makeflag", ParameterValue.from(value))
          case PViewFieldValue.finishedgoodsflag(value) => NamedParameter("finishedgoodsflag", ParameterValue.from(value))
          case PViewFieldValue.color(value) => NamedParameter("color", ParameterValue.from(value))
          case PViewFieldValue.safetystocklevel(value) => NamedParameter("safetystocklevel", ParameterValue.from(value))
          case PViewFieldValue.reorderpoint(value) => NamedParameter("reorderpoint", ParameterValue.from(value))
          case PViewFieldValue.standardcost(value) => NamedParameter("standardcost", ParameterValue.from(value))
          case PViewFieldValue.listprice(value) => NamedParameter("listprice", ParameterValue.from(value))
          case PViewFieldValue.size(value) => NamedParameter("size", ParameterValue.from(value))
          case PViewFieldValue.sizeunitmeasurecode(value) => NamedParameter("sizeunitmeasurecode", ParameterValue.from(value))
          case PViewFieldValue.weightunitmeasurecode(value) => NamedParameter("weightunitmeasurecode", ParameterValue.from(value))
          case PViewFieldValue.weight(value) => NamedParameter("weight", ParameterValue.from(value))
          case PViewFieldValue.daystomanufacture(value) => NamedParameter("daystomanufacture", ParameterValue.from(value))
          case PViewFieldValue.productline(value) => NamedParameter("productline", ParameterValue.from(value))
          case PViewFieldValue.`class`(value) => NamedParameter("class", ParameterValue.from(value))
          case PViewFieldValue.style(value) => NamedParameter("style", ParameterValue.from(value))
          case PViewFieldValue.productsubcategoryid(value) => NamedParameter("productsubcategoryid", ParameterValue.from(value))
          case PViewFieldValue.productmodelid(value) => NamedParameter("productmodelid", ParameterValue.from(value))
          case PViewFieldValue.sellstartdate(value) => NamedParameter("sellstartdate", ParameterValue.from(value))
          case PViewFieldValue.sellenddate(value) => NamedParameter("sellenddate", ParameterValue.from(value))
          case PViewFieldValue.discontinueddate(value) => NamedParameter("discontinueddate", ParameterValue.from(value))
          case PViewFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case PViewFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select "id", productid, "name", productnumber, makeflag, finishedgoodsflag, color, safetystocklevel, reorderpoint, standardcost, listprice, "size", sizeunitmeasurecode, weightunitmeasurecode, weight, daystomanufacture, productline, "class", "style", productsubcategoryid, productmodelid, sellstartdate, sellenddate, discontinueddate, rowguid, modifieddate
                    from pr."p"
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[PViewRow] =
    RowParser[PViewRow] { row =>
      Success(
        PViewRow(
          id = row[Option[Int]]("id"),
          productid = row[Option[ProductId]]("productid"),
          name = row[Option[Name]]("name"),
          productnumber = row[Option[String]]("productnumber"),
          makeflag = row[Flag]("makeflag"),
          finishedgoodsflag = row[Flag]("finishedgoodsflag"),
          color = row[Option[String]]("color"),
          safetystocklevel = row[Option[Int]]("safetystocklevel"),
          reorderpoint = row[Option[Int]]("reorderpoint"),
          standardcost = row[Option[BigDecimal]]("standardcost"),
          listprice = row[Option[BigDecimal]]("listprice"),
          size = row[Option[String]]("size"),
          sizeunitmeasurecode = row[Option[UnitmeasureId]]("sizeunitmeasurecode"),
          weightunitmeasurecode = row[Option[UnitmeasureId]]("weightunitmeasurecode"),
          weight = row[Option[BigDecimal]]("weight"),
          daystomanufacture = row[Option[Int]]("daystomanufacture"),
          productline = row[Option[/* bpchar */ String]]("productline"),
          `class` = row[Option[/* bpchar */ String]]("class"),
          style = row[Option[/* bpchar */ String]]("style"),
          productsubcategoryid = row[Option[ProductsubcategoryId]]("productsubcategoryid"),
          productmodelid = row[Option[ProductmodelId]]("productmodelid"),
          sellstartdate = row[Option[LocalDateTime]]("sellstartdate"),
          sellenddate = row[Option[LocalDateTime]]("sellenddate"),
          discontinueddate = row[Option[LocalDateTime]]("discontinueddate"),
          rowguid = row[Option[UUID]]("rowguid"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
