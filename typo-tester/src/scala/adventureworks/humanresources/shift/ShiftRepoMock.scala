/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package shift

import java.sql.Connection
import scala.Function1

class ShiftRepoMock(toRow: Function1[ShiftRowUnsaved, ShiftRow],
                    map: scala.collection.mutable.Map[ShiftId, ShiftRow] = scala.collection.mutable.Map.empty) extends ShiftRepo {
  override def delete(shiftid: ShiftId)(implicit c: Connection): Boolean = {
    map.remove(shiftid).isDefined
  }
  override def insert(unsaved: ShiftRow)(implicit c: Connection): ShiftRow = {
    if (map.contains(unsaved.shiftid))
      sys.error(s"id ${unsaved.shiftid} already exists")
    else
      map.put(unsaved.shiftid, unsaved)
    unsaved
  }
  override def insert(unsaved: ShiftRowUnsaved)(implicit c: Connection): ShiftRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[ShiftRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[ShiftFieldOrIdValue[_]])(implicit c: Connection): List[ShiftRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, ShiftFieldValue.shiftid(value)) => acc.filter(_.shiftid == value)
      case (acc, ShiftFieldValue.name(value)) => acc.filter(_.name == value)
      case (acc, ShiftFieldValue.starttime(value)) => acc.filter(_.starttime == value)
      case (acc, ShiftFieldValue.endtime(value)) => acc.filter(_.endtime == value)
      case (acc, ShiftFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(shiftid: ShiftId)(implicit c: Connection): Option[ShiftRow] = {
    map.get(shiftid)
  }
  override def selectByIds(shiftids: Array[ShiftId])(implicit c: Connection): List[ShiftRow] = {
    shiftids.flatMap(map.get).toList
  }
  override def update(row: ShiftRow)(implicit c: Connection): Boolean = {
    map.get(row.shiftid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.shiftid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(shiftid: ShiftId, fieldValues: List[ShiftFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(shiftid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, ShiftFieldValue.name(value)) => acc.copy(name = value)
          case (acc, ShiftFieldValue.starttime(value)) => acc.copy(starttime = value)
          case (acc, ShiftFieldValue.endtime(value)) => acc.copy(endtime = value)
          case (acc, ShiftFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(shiftid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: ShiftRow)(implicit c: Connection): ShiftRow = {
    map.put(unsaved.shiftid, unsaved)
    unsaved
  }
}
