/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package emailaddress

import java.sql.Connection
import scala.Function1

class EmailaddressRepoMock(toRow: Function1[EmailaddressRowUnsaved, EmailaddressRow],
                           map: scala.collection.mutable.Map[EmailaddressId, EmailaddressRow] = scala.collection.mutable.Map.empty) extends EmailaddressRepo {
  override def delete(compositeId: EmailaddressId)(implicit c: Connection): Boolean = {
    map.remove(compositeId).isDefined
  }
  override def insert(unsaved: EmailaddressRow)(implicit c: Connection): EmailaddressRow = {
    if (map.contains(unsaved.compositeId))
      sys.error(s"id ${unsaved.compositeId} already exists")
    else
      map.put(unsaved.compositeId, unsaved)
    unsaved
  }
  override def insert(unsaved: EmailaddressRowUnsaved)(implicit c: Connection): EmailaddressRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[EmailaddressRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[EmailaddressFieldOrIdValue[_]])(implicit c: Connection): List[EmailaddressRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, EmailaddressFieldValue.businessentityid(value)) => acc.filter(_.businessentityid == value)
      case (acc, EmailaddressFieldValue.emailaddressid(value)) => acc.filter(_.emailaddressid == value)
      case (acc, EmailaddressFieldValue.emailaddress(value)) => acc.filter(_.emailaddress == value)
      case (acc, EmailaddressFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
      case (acc, EmailaddressFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(compositeId: EmailaddressId)(implicit c: Connection): Option[EmailaddressRow] = {
    map.get(compositeId)
  }
  override def update(row: EmailaddressRow)(implicit c: Connection): Boolean = {
    map.get(row.compositeId) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.compositeId, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(compositeId: EmailaddressId, fieldValues: List[EmailaddressFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(compositeId) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, EmailaddressFieldValue.emailaddress(value)) => acc.copy(emailaddress = value)
          case (acc, EmailaddressFieldValue.rowguid(value)) => acc.copy(rowguid = value)
          case (acc, EmailaddressFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(compositeId, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
}
