/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package sod

import adventureworks.production.product.ProductId
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.specialoffer.SpecialofferId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object SodViewRepoImpl extends SodViewRepo {
  override def selectAll(implicit c: Connection): List[SodViewRow] = {
    SQL"""select "id", salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate
          from sa.sod
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SodViewFieldOrIdValue[_]])(implicit c: Connection): List[SodViewRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SodViewFieldValue.id(value) => NamedParameter("id", ParameterValue.from(value))
          case SodViewFieldValue.salesorderid(value) => NamedParameter("salesorderid", ParameterValue.from(value))
          case SodViewFieldValue.salesorderdetailid(value) => NamedParameter("salesorderdetailid", ParameterValue.from(value))
          case SodViewFieldValue.carriertrackingnumber(value) => NamedParameter("carriertrackingnumber", ParameterValue.from(value))
          case SodViewFieldValue.orderqty(value) => NamedParameter("orderqty", ParameterValue.from(value))
          case SodViewFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case SodViewFieldValue.specialofferid(value) => NamedParameter("specialofferid", ParameterValue.from(value))
          case SodViewFieldValue.unitprice(value) => NamedParameter("unitprice", ParameterValue.from(value))
          case SodViewFieldValue.unitpricediscount(value) => NamedParameter("unitpricediscount", ParameterValue.from(value))
          case SodViewFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SodViewFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select "id", salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate
                    from sa.sod
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[SodViewRow] =
    RowParser[SodViewRow] { row =>
      Success(
        SodViewRow(
          id = row[Option[Int]]("id"),
          salesorderid = row[Option[SalesorderheaderId]]("salesorderid"),
          salesorderdetailid = row[Option[Int]]("salesorderdetailid"),
          carriertrackingnumber = row[Option[String]]("carriertrackingnumber"),
          orderqty = row[Option[Int]]("orderqty"),
          productid = row[Option[ProductId]]("productid"),
          specialofferid = row[Option[SpecialofferId]]("specialofferid"),
          unitprice = row[Option[BigDecimal]]("unitprice"),
          unitpricediscount = row[Option[BigDecimal]]("unitpricediscount"),
          rowguid = row[Option[UUID]]("rowguid"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
