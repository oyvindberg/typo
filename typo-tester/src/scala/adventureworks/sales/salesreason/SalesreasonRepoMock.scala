/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesreason

import java.sql.Connection
import scala.Function1

class SalesreasonRepoMock(toRow: Function1[SalesreasonRowUnsaved, SalesreasonRow],
                          map: scala.collection.mutable.Map[SalesreasonId, SalesreasonRow] = scala.collection.mutable.Map.empty) extends SalesreasonRepo {
  override def delete(salesreasonid: SalesreasonId)(implicit c: Connection): Boolean = {
    map.remove(salesreasonid).isDefined
  }
  override def insert(unsaved: SalesreasonRow)(implicit c: Connection): SalesreasonRow = {
    if (map.contains(unsaved.salesreasonid))
      sys.error(s"id ${unsaved.salesreasonid} already exists")
    else
      map.put(unsaved.salesreasonid, unsaved)
    unsaved
  }
  override def insert(unsaved: SalesreasonRowUnsaved)(implicit c: Connection): SalesreasonRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[SalesreasonRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[SalesreasonFieldOrIdValue[_]])(implicit c: Connection): List[SalesreasonRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, SalesreasonFieldValue.salesreasonid(value)) => acc.filter(_.salesreasonid == value)
      case (acc, SalesreasonFieldValue.name(value)) => acc.filter(_.name == value)
      case (acc, SalesreasonFieldValue.reasontype(value)) => acc.filter(_.reasontype == value)
      case (acc, SalesreasonFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(salesreasonid: SalesreasonId)(implicit c: Connection): Option[SalesreasonRow] = {
    map.get(salesreasonid)
  }
  override def selectByIds(salesreasonids: Array[SalesreasonId])(implicit c: Connection): List[SalesreasonRow] = {
    salesreasonids.flatMap(map.get).toList
  }
  override def update(row: SalesreasonRow)(implicit c: Connection): Boolean = {
    map.get(row.salesreasonid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.salesreasonid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(salesreasonid: SalesreasonId, fieldValues: List[SalesreasonFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(salesreasonid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, SalesreasonFieldValue.name(value)) => acc.copy(name = value)
          case (acc, SalesreasonFieldValue.reasontype(value)) => acc.copy(reasontype = value)
          case (acc, SalesreasonFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(salesreasonid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: SalesreasonRow)(implicit c: Connection): SalesreasonRow = {
    map.put(unsaved.salesreasonid, unsaved)
    unsaved
  }
}
