/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialofferproduct

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import adventureworks.sales.specialoffer.SpecialofferId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object SpecialofferproductRepoImpl extends SpecialofferproductRepo {
  override def delete(compositeId: SpecialofferproductId)(implicit c: Connection): Boolean = {
    SQL"delete from sales.specialofferproduct where specialofferid = ${compositeId.specialofferid} AND productid = ${compositeId.productid}".executeUpdate() > 0
  }
  override def insert(unsaved: SpecialofferproductRow)(implicit c: Connection): SpecialofferproductRow = {
    SQL"""insert into sales.specialofferproduct(specialofferid, productid, rowguid, modifieddate)
          values (${unsaved.specialofferid}::int4, ${unsaved.productid}::int4, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning specialofferid, productid, rowguid, modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  override def insert(unsaved: SpecialofferproductRowUnsaved)(implicit c: Connection): SpecialofferproductRow = {
    val namedParameters = List(
      Some((NamedParameter("specialofferid", ParameterValue.from(unsaved.specialofferid)), "::int4")),
      Some((NamedParameter("productid", ParameterValue.from(unsaved.productid)), "::int4")),
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("rowguid", ParameterValue.from[UUID](value)), "::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into sales.specialofferproduct default values
            returning specialofferid, productid, rowguid, modifieddate
         """
        .executeInsert(rowParser.single)
    } else {
      val q = s"""insert into sales.specialofferproduct(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning specialofferid, productid, rowguid, modifieddate
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(rowParser.single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[SpecialofferproductRow] = {
    SQL"""select specialofferid, productid, rowguid, modifieddate
          from sales.specialofferproduct
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SpecialofferproductFieldOrIdValue[_]])(implicit c: Connection): List[SpecialofferproductRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SpecialofferproductFieldValue.specialofferid(value) => NamedParameter("specialofferid", ParameterValue.from(value))
          case SpecialofferproductFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case SpecialofferproductFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SpecialofferproductFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select specialofferid, productid, rowguid, modifieddate
                    from sales.specialofferproduct
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: SpecialofferproductId)(implicit c: Connection): Option[SpecialofferproductRow] = {
    SQL"""select specialofferid, productid, rowguid, modifieddate
          from sales.specialofferproduct
          where specialofferid = ${compositeId.specialofferid} AND productid = ${compositeId.productid}
       """.as(rowParser.singleOpt)
  }
  override def update(row: SpecialofferproductRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update sales.specialofferproduct
          set rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where specialofferid = ${compositeId.specialofferid} AND productid = ${compositeId.productid}
       """.executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: SpecialofferproductId, fieldValues: List[SpecialofferproductFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SpecialofferproductFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SpecialofferproductFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""update sales.specialofferproduct
                    set ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(", ")}
                    where specialofferid = {specialofferid} AND productid = {productid}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .on(NamedParameter("specialofferid", ParameterValue.from(compositeId.specialofferid)), NamedParameter("productid", ParameterValue.from(compositeId.productid)))
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[SpecialofferproductRow] =
    RowParser[SpecialofferproductRow] { row =>
      Success(
        SpecialofferproductRow(
          specialofferid = row[SpecialofferId]("specialofferid"),
          productid = row[ProductId]("productid"),
          rowguid = row[UUID]("rowguid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
}
