/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesorderdetail

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import adventureworks.sales.salesorderheader.SalesorderheaderId
import adventureworks.sales.specialoffer.SpecialofferId
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime
import java.util.UUID

object SalesorderdetailRepoImpl extends SalesorderdetailRepo {
  override def delete(compositeId: SalesorderdetailId)(implicit c: Connection): Boolean = {
    SQL"delete from sales.salesorderdetail where salesorderid = ${compositeId.salesorderid} AND salesorderdetailid = ${compositeId.salesorderdetailid}".executeUpdate() > 0
  }
  override def insert(unsaved: SalesorderdetailRow)(implicit c: Connection): SalesorderdetailRow = {
    SQL"""insert into sales.salesorderdetail(salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate)
          values (${unsaved.salesorderid}::int4, ${unsaved.salesorderdetailid}::int4, ${unsaved.carriertrackingnumber}, ${unsaved.orderqty}::int2, ${unsaved.productid}::int4, ${unsaved.specialofferid}::int4, ${unsaved.unitprice}::numeric, ${unsaved.unitpricediscount}::numeric, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp)
          returning salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  override def insert(unsaved: SalesorderdetailRowUnsaved)(implicit c: Connection): SalesorderdetailRow = {
    val namedParameters = List(
      Some((NamedParameter("salesorderid", ParameterValue.from(unsaved.salesorderid)), "::int4")),
      Some((NamedParameter("carriertrackingnumber", ParameterValue.from(unsaved.carriertrackingnumber)), "")),
      Some((NamedParameter("orderqty", ParameterValue.from(unsaved.orderqty)), "::int2")),
      Some((NamedParameter("productid", ParameterValue.from(unsaved.productid)), "::int4")),
      Some((NamedParameter("specialofferid", ParameterValue.from(unsaved.specialofferid)), "::int4")),
      Some((NamedParameter("unitprice", ParameterValue.from(unsaved.unitprice)), "::numeric")),
      unsaved.salesorderdetailid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("salesorderdetailid", ParameterValue.from[Int](value)), "::int4"))
      },
      unsaved.unitpricediscount match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("unitpricediscount", ParameterValue.from[BigDecimal](value)), "::numeric"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("rowguid", ParameterValue.from[UUID](value)), "::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into sales.salesorderdetail default values
            returning salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate
         """
        .executeInsert(rowParser.single)
    } else {
      val q = s"""insert into sales.salesorderdetail(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(rowParser.single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[SalesorderdetailRow] = {
    SQL"""select salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate
          from sales.salesorderdetail
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SalesorderdetailFieldOrIdValue[_]])(implicit c: Connection): List[SalesorderdetailRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalesorderdetailFieldValue.salesorderid(value) => NamedParameter("salesorderid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.salesorderdetailid(value) => NamedParameter("salesorderdetailid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.carriertrackingnumber(value) => NamedParameter("carriertrackingnumber", ParameterValue.from(value))
          case SalesorderdetailFieldValue.orderqty(value) => NamedParameter("orderqty", ParameterValue.from(value))
          case SalesorderdetailFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.specialofferid(value) => NamedParameter("specialofferid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.unitprice(value) => NamedParameter("unitprice", ParameterValue.from(value))
          case SalesorderdetailFieldValue.unitpricediscount(value) => NamedParameter("unitpricediscount", ParameterValue.from(value))
          case SalesorderdetailFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate
                    from sales.salesorderdetail
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(compositeId: SalesorderdetailId)(implicit c: Connection): Option[SalesorderdetailRow] = {
    SQL"""select salesorderid, salesorderdetailid, carriertrackingnumber, orderqty, productid, specialofferid, unitprice, unitpricediscount, rowguid, modifieddate
          from sales.salesorderdetail
          where salesorderid = ${compositeId.salesorderid} AND salesorderdetailid = ${compositeId.salesorderdetailid}
       """.as(rowParser.singleOpt)
  }
  override def update(row: SalesorderdetailRow)(implicit c: Connection): Boolean = {
    val compositeId = row.compositeId
    SQL"""update sales.salesorderdetail
          set carriertrackingnumber = ${row.carriertrackingnumber},
              orderqty = ${row.orderqty}::int2,
              productid = ${row.productid}::int4,
              specialofferid = ${row.specialofferid}::int4,
              unitprice = ${row.unitprice}::numeric,
              unitpricediscount = ${row.unitpricediscount}::numeric,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where salesorderid = ${compositeId.salesorderid} AND salesorderdetailid = ${compositeId.salesorderdetailid}
       """.executeUpdate() > 0
  }
  override def updateFieldValues(compositeId: SalesorderdetailId, fieldValues: List[SalesorderdetailFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalesorderdetailFieldValue.carriertrackingnumber(value) => NamedParameter("carriertrackingnumber", ParameterValue.from(value))
          case SalesorderdetailFieldValue.orderqty(value) => NamedParameter("orderqty", ParameterValue.from(value))
          case SalesorderdetailFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.specialofferid(value) => NamedParameter("specialofferid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.unitprice(value) => NamedParameter("unitprice", ParameterValue.from(value))
          case SalesorderdetailFieldValue.unitpricediscount(value) => NamedParameter("unitpricediscount", ParameterValue.from(value))
          case SalesorderdetailFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case SalesorderdetailFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""update sales.salesorderdetail
                    set ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(", ")}
                    where salesorderid = {salesorderid} AND salesorderdetailid = {salesorderdetailid}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .on(NamedParameter("salesorderid", ParameterValue.from(compositeId.salesorderid)), NamedParameter("salesorderdetailid", ParameterValue.from(compositeId.salesorderdetailid)))
          .executeUpdate() > 0
    }
  
  }
  val rowParser: RowParser[SalesorderdetailRow] =
    RowParser[SalesorderdetailRow] { row =>
      Success(
        SalesorderdetailRow(
          salesorderid = row[SalesorderheaderId]("salesorderid"),
          salesorderdetailid = row[Int]("salesorderdetailid"),
          carriertrackingnumber = row[Option[String]]("carriertrackingnumber"),
          orderqty = row[Int]("orderqty"),
          productid = row[ProductId]("productid"),
          specialofferid = row[SpecialofferId]("specialofferid"),
          unitprice = row[BigDecimal]("unitprice"),
          unitpricediscount = row[BigDecimal]("unitpricediscount"),
          rowguid = row[UUID]("rowguid"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
}
