/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package cr

import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDateTime

object CrViewRepoImpl extends CrViewRepo {
  override def selectAll(implicit c: Connection): List[CrViewRow] = {
    SQL"""select countryregioncode, "name", modifieddate
          from pe.cr
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[CrViewFieldOrIdValue[_]])(implicit c: Connection): List[CrViewRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case CrViewFieldValue.countryregioncode(value) => NamedParameter("countryregioncode", ParameterValue.from(value))
          case CrViewFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case CrViewFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select countryregioncode, "name", modifieddate
                    from pe.cr
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[CrViewRow] =
    RowParser[CrViewRow] { row =>
      Success(
        CrViewRow(
          countryregioncode = row[Option[CountryregionId]]("countryregioncode"),
          name = row[Option[Name]]("name"),
          modifieddate = row[Option[LocalDateTime]]("modifieddate")
        )
      )
    }
}
