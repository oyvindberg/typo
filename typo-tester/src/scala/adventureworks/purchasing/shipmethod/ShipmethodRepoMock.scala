/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package shipmethod

import java.sql.Connection
import scala.Function1

class ShipmethodRepoMock(toRow: Function1[ShipmethodRowUnsaved, ShipmethodRow],
                         map: scala.collection.mutable.Map[ShipmethodId, ShipmethodRow] = scala.collection.mutable.Map.empty) extends ShipmethodRepo {
  override def delete(shipmethodid: ShipmethodId)(implicit c: Connection): Boolean = {
    map.remove(shipmethodid).isDefined
  }
  override def insert(unsaved: ShipmethodRow)(implicit c: Connection): ShipmethodRow = {
    if (map.contains(unsaved.shipmethodid))
      sys.error(s"id ${unsaved.shipmethodid} already exists")
    else
      map.put(unsaved.shipmethodid, unsaved)
    unsaved
  }
  override def insert(unsaved: ShipmethodRowUnsaved)(implicit c: Connection): ShipmethodRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[ShipmethodRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[ShipmethodFieldOrIdValue[_]])(implicit c: Connection): List[ShipmethodRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, ShipmethodFieldValue.shipmethodid(value)) => acc.filter(_.shipmethodid == value)
      case (acc, ShipmethodFieldValue.name(value)) => acc.filter(_.name == value)
      case (acc, ShipmethodFieldValue.shipbase(value)) => acc.filter(_.shipbase == value)
      case (acc, ShipmethodFieldValue.shiprate(value)) => acc.filter(_.shiprate == value)
      case (acc, ShipmethodFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
      case (acc, ShipmethodFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(shipmethodid: ShipmethodId)(implicit c: Connection): Option[ShipmethodRow] = {
    map.get(shipmethodid)
  }
  override def selectByIds(shipmethodids: Array[ShipmethodId])(implicit c: Connection): List[ShipmethodRow] = {
    shipmethodids.flatMap(map.get).toList
  }
  override def update(row: ShipmethodRow)(implicit c: Connection): Boolean = {
    map.get(row.shipmethodid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.shipmethodid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(shipmethodid: ShipmethodId, fieldValues: List[ShipmethodFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(shipmethodid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, ShipmethodFieldValue.name(value)) => acc.copy(name = value)
          case (acc, ShipmethodFieldValue.shipbase(value)) => acc.copy(shipbase = value)
          case (acc, ShipmethodFieldValue.shiprate(value)) => acc.copy(shiprate = value)
          case (acc, ShipmethodFieldValue.rowguid(value)) => acc.copy(rowguid = value)
          case (acc, ShipmethodFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(shipmethodid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: ShipmethodRow)(implicit c: Connection): ShipmethodRow = {
    map.put(unsaved.shipmethodid, unsaved)
    unsaved
  }
}
