/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package purchaseorderheader

import java.sql.Connection
import scala.Function1

class PurchaseorderheaderRepoMock(toRow: Function1[PurchaseorderheaderRowUnsaved, PurchaseorderheaderRow],
                                  map: scala.collection.mutable.Map[PurchaseorderheaderId, PurchaseorderheaderRow] = scala.collection.mutable.Map.empty) extends PurchaseorderheaderRepo {
  override def delete(purchaseorderid: PurchaseorderheaderId)(implicit c: Connection): Boolean = {
    map.remove(purchaseorderid).isDefined
  }
  override def insert(unsaved: PurchaseorderheaderRow)(implicit c: Connection): PurchaseorderheaderRow = {
    if (map.contains(unsaved.purchaseorderid))
      sys.error(s"id ${unsaved.purchaseorderid} already exists")
    else
      map.put(unsaved.purchaseorderid, unsaved)
    unsaved
  }
  override def insert(unsaved: PurchaseorderheaderRowUnsaved)(implicit c: Connection): PurchaseorderheaderRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[PurchaseorderheaderRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[PurchaseorderheaderFieldOrIdValue[_]])(implicit c: Connection): List[PurchaseorderheaderRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, PurchaseorderheaderFieldValue.purchaseorderid(value)) => acc.filter(_.purchaseorderid == value)
      case (acc, PurchaseorderheaderFieldValue.revisionnumber(value)) => acc.filter(_.revisionnumber == value)
      case (acc, PurchaseorderheaderFieldValue.status(value)) => acc.filter(_.status == value)
      case (acc, PurchaseorderheaderFieldValue.employeeid(value)) => acc.filter(_.employeeid == value)
      case (acc, PurchaseorderheaderFieldValue.vendorid(value)) => acc.filter(_.vendorid == value)
      case (acc, PurchaseorderheaderFieldValue.shipmethodid(value)) => acc.filter(_.shipmethodid == value)
      case (acc, PurchaseorderheaderFieldValue.orderdate(value)) => acc.filter(_.orderdate == value)
      case (acc, PurchaseorderheaderFieldValue.shipdate(value)) => acc.filter(_.shipdate == value)
      case (acc, PurchaseorderheaderFieldValue.subtotal(value)) => acc.filter(_.subtotal == value)
      case (acc, PurchaseorderheaderFieldValue.taxamt(value)) => acc.filter(_.taxamt == value)
      case (acc, PurchaseorderheaderFieldValue.freight(value)) => acc.filter(_.freight == value)
      case (acc, PurchaseorderheaderFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(purchaseorderid: PurchaseorderheaderId)(implicit c: Connection): Option[PurchaseorderheaderRow] = {
    map.get(purchaseorderid)
  }
  override def selectByIds(purchaseorderids: Array[PurchaseorderheaderId])(implicit c: Connection): List[PurchaseorderheaderRow] = {
    purchaseorderids.flatMap(map.get).toList
  }
  override def update(row: PurchaseorderheaderRow)(implicit c: Connection): Boolean = {
    map.get(row.purchaseorderid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.purchaseorderid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(purchaseorderid: PurchaseorderheaderId, fieldValues: List[PurchaseorderheaderFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(purchaseorderid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, PurchaseorderheaderFieldValue.revisionnumber(value)) => acc.copy(revisionnumber = value)
          case (acc, PurchaseorderheaderFieldValue.status(value)) => acc.copy(status = value)
          case (acc, PurchaseorderheaderFieldValue.employeeid(value)) => acc.copy(employeeid = value)
          case (acc, PurchaseorderheaderFieldValue.vendorid(value)) => acc.copy(vendorid = value)
          case (acc, PurchaseorderheaderFieldValue.shipmethodid(value)) => acc.copy(shipmethodid = value)
          case (acc, PurchaseorderheaderFieldValue.orderdate(value)) => acc.copy(orderdate = value)
          case (acc, PurchaseorderheaderFieldValue.shipdate(value)) => acc.copy(shipdate = value)
          case (acc, PurchaseorderheaderFieldValue.subtotal(value)) => acc.copy(subtotal = value)
          case (acc, PurchaseorderheaderFieldValue.taxamt(value)) => acc.copy(taxamt = value)
          case (acc, PurchaseorderheaderFieldValue.freight(value)) => acc.copy(freight = value)
          case (acc, PurchaseorderheaderFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(purchaseorderid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
}
