/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package productvendor

import java.sql.Connection
import scala.Function1

class ProductvendorRepoMock(toRow: Function1[ProductvendorRowUnsaved, ProductvendorRow],
                            map: scala.collection.mutable.Map[ProductvendorId, ProductvendorRow] = scala.collection.mutable.Map.empty) extends ProductvendorRepo {
  override def delete(compositeId: ProductvendorId)(implicit c: Connection): Boolean = {
    map.remove(compositeId).isDefined
  }
  override def insert(unsaved: ProductvendorRow)(implicit c: Connection): ProductvendorRow = {
    if (map.contains(unsaved.compositeId))
      sys.error(s"id ${unsaved.compositeId} already exists")
    else
      map.put(unsaved.compositeId, unsaved)
    unsaved
  }
  override def insert(unsaved: ProductvendorRowUnsaved)(implicit c: Connection): ProductvendorRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[ProductvendorRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[ProductvendorFieldOrIdValue[_]])(implicit c: Connection): List[ProductvendorRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, ProductvendorFieldValue.productid(value)) => acc.filter(_.productid == value)
      case (acc, ProductvendorFieldValue.businessentityid(value)) => acc.filter(_.businessentityid == value)
      case (acc, ProductvendorFieldValue.averageleadtime(value)) => acc.filter(_.averageleadtime == value)
      case (acc, ProductvendorFieldValue.standardprice(value)) => acc.filter(_.standardprice == value)
      case (acc, ProductvendorFieldValue.lastreceiptcost(value)) => acc.filter(_.lastreceiptcost == value)
      case (acc, ProductvendorFieldValue.lastreceiptdate(value)) => acc.filter(_.lastreceiptdate == value)
      case (acc, ProductvendorFieldValue.minorderqty(value)) => acc.filter(_.minorderqty == value)
      case (acc, ProductvendorFieldValue.maxorderqty(value)) => acc.filter(_.maxorderqty == value)
      case (acc, ProductvendorFieldValue.onorderqty(value)) => acc.filter(_.onorderqty == value)
      case (acc, ProductvendorFieldValue.unitmeasurecode(value)) => acc.filter(_.unitmeasurecode == value)
      case (acc, ProductvendorFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(compositeId: ProductvendorId)(implicit c: Connection): Option[ProductvendorRow] = {
    map.get(compositeId)
  }
  override def update(row: ProductvendorRow)(implicit c: Connection): Boolean = {
    map.get(row.compositeId) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.compositeId, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(compositeId: ProductvendorId, fieldValues: List[ProductvendorFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(compositeId) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, ProductvendorFieldValue.averageleadtime(value)) => acc.copy(averageleadtime = value)
          case (acc, ProductvendorFieldValue.standardprice(value)) => acc.copy(standardprice = value)
          case (acc, ProductvendorFieldValue.lastreceiptcost(value)) => acc.copy(lastreceiptcost = value)
          case (acc, ProductvendorFieldValue.lastreceiptdate(value)) => acc.copy(lastreceiptdate = value)
          case (acc, ProductvendorFieldValue.minorderqty(value)) => acc.copy(minorderqty = value)
          case (acc, ProductvendorFieldValue.maxorderqty(value)) => acc.copy(maxorderqty = value)
          case (acc, ProductvendorFieldValue.onorderqty(value)) => acc.copy(onorderqty = value)
          case (acc, ProductvendorFieldValue.unitmeasurecode(value)) => acc.copy(unitmeasurecode = value)
          case (acc, ProductvendorFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(compositeId, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: ProductvendorRow)(implicit c: Connection): ProductvendorRow = {
    map.put(unsaved.compositeId, unsaved)
    unsaved
  }
}
