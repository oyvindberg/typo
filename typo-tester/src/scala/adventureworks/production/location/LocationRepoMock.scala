/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package location

import java.sql.Connection
import scala.Function1

class LocationRepoMock(toRow: Function1[LocationRowUnsaved, LocationRow],
                       map: scala.collection.mutable.Map[LocationId, LocationRow] = scala.collection.mutable.Map.empty) extends LocationRepo {
  override def delete(locationid: LocationId)(implicit c: Connection): Boolean = {
    map.remove(locationid).isDefined
  }
  override def insert(unsaved: LocationRow)(implicit c: Connection): LocationRow = {
    if (map.contains(unsaved.locationid))
      sys.error(s"id ${unsaved.locationid} already exists")
    else
      map.put(unsaved.locationid, unsaved)
    unsaved
  }
  override def insert(unsaved: LocationRowUnsaved)(implicit c: Connection): LocationRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[LocationRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[LocationFieldOrIdValue[_]])(implicit c: Connection): List[LocationRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, LocationFieldValue.locationid(value)) => acc.filter(_.locationid == value)
      case (acc, LocationFieldValue.name(value)) => acc.filter(_.name == value)
      case (acc, LocationFieldValue.costrate(value)) => acc.filter(_.costrate == value)
      case (acc, LocationFieldValue.availability(value)) => acc.filter(_.availability == value)
      case (acc, LocationFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(locationid: LocationId)(implicit c: Connection): Option[LocationRow] = {
    map.get(locationid)
  }
  override def selectByIds(locationids: Array[LocationId])(implicit c: Connection): List[LocationRow] = {
    locationids.flatMap(map.get).toList
  }
  override def update(row: LocationRow)(implicit c: Connection): Boolean = {
    map.get(row.locationid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.locationid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(locationid: LocationId, fieldValues: List[LocationFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(locationid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, LocationFieldValue.name(value)) => acc.copy(name = value)
          case (acc, LocationFieldValue.costrate(value)) => acc.copy(costrate = value)
          case (acc, LocationFieldValue.availability(value)) => acc.copy(availability = value)
          case (acc, LocationFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(locationid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: LocationRow)(implicit c: Connection): LocationRow = {
    map.put(unsaved.locationid, unsaved)
    unsaved
  }
}
