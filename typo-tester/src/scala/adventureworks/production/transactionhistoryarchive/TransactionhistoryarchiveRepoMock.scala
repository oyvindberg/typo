/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package transactionhistoryarchive

import java.sql.Connection
import scala.Function1

class TransactionhistoryarchiveRepoMock(toRow: Function1[TransactionhistoryarchiveRowUnsaved, TransactionhistoryarchiveRow],
                                        map: scala.collection.mutable.Map[TransactionhistoryarchiveId, TransactionhistoryarchiveRow] = scala.collection.mutable.Map.empty) extends TransactionhistoryarchiveRepo {
  override def delete(transactionid: TransactionhistoryarchiveId)(implicit c: Connection): Boolean = {
    map.remove(transactionid).isDefined
  }
  override def insert(unsaved: TransactionhistoryarchiveRow)(implicit c: Connection): TransactionhistoryarchiveRow = {
    if (map.contains(unsaved.transactionid))
      sys.error(s"id ${unsaved.transactionid} already exists")
    else
      map.put(unsaved.transactionid, unsaved)
    unsaved
  }
  override def insert(unsaved: TransactionhistoryarchiveRowUnsaved)(implicit c: Connection): TransactionhistoryarchiveRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[TransactionhistoryarchiveRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[TransactionhistoryarchiveFieldOrIdValue[_]])(implicit c: Connection): List[TransactionhistoryarchiveRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, TransactionhistoryarchiveFieldValue.transactionid(value)) => acc.filter(_.transactionid == value)
      case (acc, TransactionhistoryarchiveFieldValue.productid(value)) => acc.filter(_.productid == value)
      case (acc, TransactionhistoryarchiveFieldValue.referenceorderid(value)) => acc.filter(_.referenceorderid == value)
      case (acc, TransactionhistoryarchiveFieldValue.referenceorderlineid(value)) => acc.filter(_.referenceorderlineid == value)
      case (acc, TransactionhistoryarchiveFieldValue.transactiondate(value)) => acc.filter(_.transactiondate == value)
      case (acc, TransactionhistoryarchiveFieldValue.transactiontype(value)) => acc.filter(_.transactiontype == value)
      case (acc, TransactionhistoryarchiveFieldValue.quantity(value)) => acc.filter(_.quantity == value)
      case (acc, TransactionhistoryarchiveFieldValue.actualcost(value)) => acc.filter(_.actualcost == value)
      case (acc, TransactionhistoryarchiveFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(transactionid: TransactionhistoryarchiveId)(implicit c: Connection): Option[TransactionhistoryarchiveRow] = {
    map.get(transactionid)
  }
  override def selectByIds(transactionids: Array[TransactionhistoryarchiveId])(implicit c: Connection): List[TransactionhistoryarchiveRow] = {
    transactionids.flatMap(map.get).toList
  }
  override def update(row: TransactionhistoryarchiveRow)(implicit c: Connection): Boolean = {
    map.get(row.transactionid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.transactionid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(transactionid: TransactionhistoryarchiveId, fieldValues: List[TransactionhistoryarchiveFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(transactionid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, TransactionhistoryarchiveFieldValue.productid(value)) => acc.copy(productid = value)
          case (acc, TransactionhistoryarchiveFieldValue.referenceorderid(value)) => acc.copy(referenceorderid = value)
          case (acc, TransactionhistoryarchiveFieldValue.referenceorderlineid(value)) => acc.copy(referenceorderlineid = value)
          case (acc, TransactionhistoryarchiveFieldValue.transactiondate(value)) => acc.copy(transactiondate = value)
          case (acc, TransactionhistoryarchiveFieldValue.transactiontype(value)) => acc.copy(transactiontype = value)
          case (acc, TransactionhistoryarchiveFieldValue.quantity(value)) => acc.copy(quantity = value)
          case (acc, TransactionhistoryarchiveFieldValue.actualcost(value)) => acc.copy(actualcost = value)
          case (acc, TransactionhistoryarchiveFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(transactionid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
}
