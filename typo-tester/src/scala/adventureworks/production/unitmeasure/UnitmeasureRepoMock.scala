/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package unitmeasure

import java.sql.Connection
import scala.Function1

class UnitmeasureRepoMock(toRow: Function1[UnitmeasureRowUnsaved, UnitmeasureRow],
                          map: scala.collection.mutable.Map[UnitmeasureId, UnitmeasureRow] = scala.collection.mutable.Map.empty) extends UnitmeasureRepo {
  override def delete(unitmeasurecode: UnitmeasureId)(implicit c: Connection): Boolean = {
    map.remove(unitmeasurecode).isDefined
  }
  override def insert(unsaved: UnitmeasureRow)(implicit c: Connection): UnitmeasureRow = {
    if (map.contains(unsaved.unitmeasurecode))
      sys.error(s"id ${unsaved.unitmeasurecode} already exists")
    else
      map.put(unsaved.unitmeasurecode, unsaved)
    unsaved
  }
  override def insert(unsaved: UnitmeasureRowUnsaved)(implicit c: Connection): UnitmeasureRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[UnitmeasureRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[UnitmeasureFieldOrIdValue[_]])(implicit c: Connection): List[UnitmeasureRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, UnitmeasureFieldValue.unitmeasurecode(value)) => acc.filter(_.unitmeasurecode == value)
      case (acc, UnitmeasureFieldValue.name(value)) => acc.filter(_.name == value)
      case (acc, UnitmeasureFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(unitmeasurecode: UnitmeasureId)(implicit c: Connection): Option[UnitmeasureRow] = {
    map.get(unitmeasurecode)
  }
  override def selectByIds(unitmeasurecodes: Array[UnitmeasureId])(implicit c: Connection): List[UnitmeasureRow] = {
    unitmeasurecodes.flatMap(map.get).toList
  }
  override def update(row: UnitmeasureRow)(implicit c: Connection): Boolean = {
    map.get(row.unitmeasurecode) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.unitmeasurecode, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(unitmeasurecode: UnitmeasureId, fieldValues: List[UnitmeasureFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(unitmeasurecode) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, UnitmeasureFieldValue.name(value)) => acc.copy(name = value)
          case (acc, UnitmeasureFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(unitmeasurecode, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
}
