/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package salesreason

import adventureworks.Defaulted
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import anorm.ToStatement
import java.lang.Integer
import java.sql.Connection
import java.sql.PreparedStatement
import java.time.LocalDateTime

object SalesreasonRepoImpl extends SalesreasonRepo {
  override def delete(salesreasonid: SalesreasonId)(implicit c: Connection): Boolean = {
    SQL"delete from sales.salesreason where salesreasonid = $salesreasonid".executeUpdate() > 0
  }
  override def insert(unsaved: SalesreasonRow)(implicit c: Connection): SalesreasonRow = {
    SQL"""insert into sales.salesreason(salesreasonid, "name", reasontype, modifieddate)
          values (${unsaved.salesreasonid}::int4, ${unsaved.name}::"public"."Name", ${unsaved.reasontype}::"public"."Name", ${unsaved.modifieddate}::timestamp)
          returning salesreasonid, "name", reasontype, modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  override def insert(unsaved: SalesreasonRowUnsaved)(implicit c: Connection): SalesreasonRow = {
    val namedParameters = List(
      Some((NamedParameter("name", ParameterValue.from(unsaved.name)), """::"public"."Name"""")),
      Some((NamedParameter("reasontype", ParameterValue.from(unsaved.reasontype)), """::"public"."Name"""")),
      unsaved.salesreasonid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("salesreasonid", ParameterValue.from[SalesreasonId](value)), "::int4"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into sales.salesreason default values
            returning salesreasonid, "name", reasontype, modifieddate
         """
        .executeInsert(rowParser.single)
    } else {
      val q = s"""insert into sales.salesreason(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning salesreasonid, "name", reasontype, modifieddate
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(rowParser.single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[SalesreasonRow] = {
    SQL"""select salesreasonid, "name", reasontype, modifieddate
          from sales.salesreason
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[SalesreasonFieldOrIdValue[_]])(implicit c: Connection): List[SalesreasonRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalesreasonFieldValue.salesreasonid(value) => NamedParameter("salesreasonid", ParameterValue.from(value))
          case SalesreasonFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case SalesreasonFieldValue.reasontype(value) => NamedParameter("reasontype", ParameterValue.from(value))
          case SalesreasonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select salesreasonid, "name", reasontype, modifieddate
                    from sales.salesreason
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(salesreasonid: SalesreasonId)(implicit c: Connection): Option[SalesreasonRow] = {
    SQL"""select salesreasonid, "name", reasontype, modifieddate
          from sales.salesreason
          where salesreasonid = $salesreasonid
       """.as(rowParser.singleOpt)
  }
  override def selectByIds(salesreasonids: Array[SalesreasonId])(implicit c: Connection): List[SalesreasonRow] = {
    implicit val toStatement: ToStatement[Array[SalesreasonId]] =
      (s: PreparedStatement, index: Int, v: Array[SalesreasonId]) =>
        s.setArray(index, s.getConnection.createArrayOf("int4", v.map(x => x.value: Integer)))
    
    SQL"""select salesreasonid, "name", reasontype, modifieddate
          from sales.salesreason
          where salesreasonid = ANY($salesreasonids)
       """.as(rowParser.*)
  
  }
  override def update(row: SalesreasonRow)(implicit c: Connection): Boolean = {
    val salesreasonid = row.salesreasonid
    SQL"""update sales.salesreason
          set "name" = ${row.name}::"public"."Name",
              reasontype = ${row.reasontype}::"public"."Name",
              modifieddate = ${row.modifieddate}::timestamp
          where salesreasonid = $salesreasonid
       """.executeUpdate() > 0
  }
  override def updateFieldValues(salesreasonid: SalesreasonId, fieldValues: List[SalesreasonFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case SalesreasonFieldValue.name(value) => NamedParameter("name", ParameterValue.from(value))
          case SalesreasonFieldValue.reasontype(value) => NamedParameter("reasontype", ParameterValue.from(value))
          case SalesreasonFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""update sales.salesreason
                    set ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(", ")}
                    where salesreasonid = {salesreasonid}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .on(NamedParameter("salesreasonid", ParameterValue.from(salesreasonid)))
          .executeUpdate() > 0
    }
  
  }
  override def upsert(unsaved: SalesreasonRow)(implicit c: Connection): SalesreasonRow = {
    SQL"""insert into sales.salesreason(salesreasonid, "name", reasontype, modifieddate)
          values (
            ${unsaved.salesreasonid}::int4,
            ${unsaved.name}::"public"."Name",
            ${unsaved.reasontype}::"public"."Name",
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (salesreasonid)
          do update set
            "name" = EXCLUDED."name",
            reasontype = EXCLUDED.reasontype,
            modifieddate = EXCLUDED.modifieddate
          returning salesreasonid, "name", reasontype, modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  val rowParser: RowParser[SalesreasonRow] =
    RowParser[SalesreasonRow] { row =>
      Success(
        SalesreasonRow(
          salesreasonid = row[SalesreasonId]("salesreasonid"),
          name = row[Name]("name"),
          reasontype = row[Name]("reasontype"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
}
