/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package specialofferproduct

import adventureworks.production.product.ProductId
import adventureworks.sales.specialoffer.SpecialofferId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** Type for the composite primary key of table `sales.specialofferproduct` */
case class SpecialofferproductId(specialofferid: SpecialofferId, productid: ProductId)
object SpecialofferproductId {
  implicit def ordering: Ordering[SpecialofferproductId] = Ordering.by(x => (x.specialofferid, x.productid))
  implicit val oFormat: OFormat[SpecialofferproductId] = new OFormat[SpecialofferproductId]{
    override def writes(o: SpecialofferproductId): JsObject =
      Json.obj(
        "specialofferid" -> o.specialofferid,
        "productid" -> o.productid
      )
  
    override def reads(json: JsValue): JsResult[SpecialofferproductId] = {
      JsResult.fromTry(
        Try(
          SpecialofferproductId(
            specialofferid = json.\("specialofferid").as[SpecialofferId],
            productid = json.\("productid").as[ProductId]
          )
        )
      )
    }
  }
}
