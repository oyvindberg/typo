/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package customer

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.sales.salesterritory.SalesterritoryId
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `sales.customer` which has not been persisted yet */
case class CustomerRowUnsaved(
  /** Foreign key to Person.BusinessEntityID
      Points to [[person.person.PersonRow.businessentityid]] */
  personid: Option[BusinessentityId],
  /** Foreign key to Store.BusinessEntityID
      Points to [[store.StoreRow.businessentityid]] */
  storeid: Option[BusinessentityId],
  /** ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
      Points to [[salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Default: nextval('sales.customer_customerid_seq'::regclass)
      Primary key. */
  customerid: Defaulted[CustomerId] = Defaulted.UseDefault,
  /** Default: uuid_generate_v1() */
  rowguid: Defaulted[UUID] = Defaulted.UseDefault,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(customeridDefault: => CustomerId, rowguidDefault: => UUID, modifieddateDefault: => LocalDateTime): CustomerRow =
    CustomerRow(
      personid = personid,
      storeid = storeid,
      territoryid = territoryid,
      customerid = customerid match {
                     case Defaulted.UseDefault => customeridDefault
                     case Defaulted.Provided(value) => value
                   },
      rowguid = rowguid match {
                  case Defaulted.UseDefault => rowguidDefault
                  case Defaulted.Provided(value) => value
                },
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object CustomerRowUnsaved {
  implicit val oFormat: OFormat[CustomerRowUnsaved] = new OFormat[CustomerRowUnsaved]{
    override def writes(o: CustomerRowUnsaved): JsObject =
      Json.obj(
        "personid" -> o.personid,
        "storeid" -> o.storeid,
        "territoryid" -> o.territoryid,
        "customerid" -> o.customerid,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[CustomerRowUnsaved] = {
      JsResult.fromTry(
        Try(
          CustomerRowUnsaved(
            personid = json.\("personid").toOption.map(_.as[BusinessentityId]),
            storeid = json.\("storeid").toOption.map(_.as[BusinessentityId]),
            territoryid = json.\("territoryid").toOption.map(_.as[SalesterritoryId]),
            customerid = json.\("customerid").as[Defaulted[CustomerId]],
            rowguid = json.\("rowguid").as[Defaulted[UUID]],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
