/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodelillustration

import adventureworks.production.illustration.IllustrationId
import adventureworks.production.productmodel.ProductmodelId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** Type for the composite primary key of table `production.productmodelillustration` */
case class ProductmodelillustrationId(productmodelid: ProductmodelId, illustrationid: IllustrationId)
object ProductmodelillustrationId {
  implicit def ordering: Ordering[ProductmodelillustrationId] = Ordering.by(x => (x.productmodelid, x.illustrationid))
  implicit val oFormat: OFormat[ProductmodelillustrationId] = new OFormat[ProductmodelillustrationId]{
    override def writes(o: ProductmodelillustrationId): JsObject =
      Json.obj(
        "productmodelid" -> o.productmodelid,
        "illustrationid" -> o.illustrationid
      )
  
    override def reads(json: JsValue): JsResult[ProductmodelillustrationId] = {
      JsResult.fromTry(
        Try(
          ProductmodelillustrationId(
            productmodelid = json.\("productmodelid").as[ProductmodelId],
            illustrationid = json.\("illustrationid").as[IllustrationId]
          )
        )
      )
    }
  }
}
