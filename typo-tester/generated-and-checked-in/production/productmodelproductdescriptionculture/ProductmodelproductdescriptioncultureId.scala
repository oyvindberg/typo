/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productmodelproductdescriptionculture

import adventureworks.production.culture.CultureId
import adventureworks.production.productdescription.ProductdescriptionId
import adventureworks.production.productmodel.ProductmodelId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** Type for the composite primary key of table `production.productmodelproductdescriptionculture` */
case class ProductmodelproductdescriptioncultureId(productmodelid: ProductmodelId, productdescriptionid: ProductdescriptionId, cultureid: CultureId)
object ProductmodelproductdescriptioncultureId {
  implicit def ordering: Ordering[ProductmodelproductdescriptioncultureId] = Ordering.by(x => (x.productmodelid, x.productdescriptionid, x.cultureid))
  implicit val oFormat: OFormat[ProductmodelproductdescriptioncultureId] = new OFormat[ProductmodelproductdescriptioncultureId]{
    override def writes(o: ProductmodelproductdescriptioncultureId): JsObject =
      Json.obj(
        "productmodelid" -> o.productmodelid,
        "productdescriptionid" -> o.productdescriptionid,
        "cultureid" -> o.cultureid
      )
  
    override def reads(json: JsValue): JsResult[ProductmodelproductdescriptioncultureId] = {
      JsResult.fromTry(
        Try(
          ProductmodelproductdescriptioncultureId(
            productmodelid = json.\("productmodelid").as[ProductmodelId],
            productdescriptionid = json.\("productdescriptionid").as[ProductdescriptionId],
            cultureid = json.\("cultureid").as[CultureId]
          )
        )
      )
    }
  }
}
