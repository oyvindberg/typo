/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productreview

import adventureworks.Defaulted
import adventureworks.production.product.ProductId
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import anorm.ToStatement
import java.lang.Integer
import java.sql.Connection
import java.sql.PreparedStatement
import java.time.LocalDateTime

object ProductreviewRepoImpl extends ProductreviewRepo {
  override def delete(productreviewid: ProductreviewId)(implicit c: Connection): Boolean = {
    SQL"delete from production.productreview where productreviewid = $productreviewid".executeUpdate() > 0
  }
  override def insert(unsaved: ProductreviewRow)(implicit c: Connection): ProductreviewRow = {
    SQL"""insert into production.productreview(productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate)
          values (${unsaved.productreviewid}::int4, ${unsaved.productid}::int4, ${unsaved.reviewername}::"public"."Name", ${unsaved.reviewdate}::timestamp, ${unsaved.emailaddress}, ${unsaved.rating}::int4, ${unsaved.comments}, ${unsaved.modifieddate}::timestamp)
          returning productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  override def insert(unsaved: ProductreviewRowUnsaved)(implicit c: Connection): ProductreviewRow = {
    val namedParameters = List(
      Some((NamedParameter("productid", ParameterValue.from(unsaved.productid)), "::int4")),
      Some((NamedParameter("reviewername", ParameterValue.from(unsaved.reviewername)), """::"public"."Name"""")),
      Some((NamedParameter("emailaddress", ParameterValue.from(unsaved.emailaddress)), "")),
      Some((NamedParameter("rating", ParameterValue.from(unsaved.rating)), "::int4")),
      Some((NamedParameter("comments", ParameterValue.from(unsaved.comments)), "")),
      unsaved.productreviewid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("productreviewid", ParameterValue.from[ProductreviewId](value)), "::int4"))
      },
      unsaved.reviewdate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("reviewdate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production.productreview default values
            returning productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate
         """
        .executeInsert(rowParser.single)
    } else {
      val q = s"""insert into production.productreview(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(rowParser.single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[ProductreviewRow] = {
    SQL"""select productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate
          from production.productreview
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[ProductreviewFieldOrIdValue[_]])(implicit c: Connection): List[ProductreviewRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductreviewFieldValue.productreviewid(value) => NamedParameter("productreviewid", ParameterValue.from(value))
          case ProductreviewFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case ProductreviewFieldValue.reviewername(value) => NamedParameter("reviewername", ParameterValue.from(value))
          case ProductreviewFieldValue.reviewdate(value) => NamedParameter("reviewdate", ParameterValue.from(value))
          case ProductreviewFieldValue.emailaddress(value) => NamedParameter("emailaddress", ParameterValue.from(value))
          case ProductreviewFieldValue.rating(value) => NamedParameter("rating", ParameterValue.from(value))
          case ProductreviewFieldValue.comments(value) => NamedParameter("comments", ParameterValue.from(value))
          case ProductreviewFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate
                    from production.productreview
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(productreviewid: ProductreviewId)(implicit c: Connection): Option[ProductreviewRow] = {
    SQL"""select productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate
          from production.productreview
          where productreviewid = $productreviewid
       """.as(rowParser.singleOpt)
  }
  override def selectByIds(productreviewids: Array[ProductreviewId])(implicit c: Connection): List[ProductreviewRow] = {
    implicit val toStatement: ToStatement[Array[ProductreviewId]] =
      (s: PreparedStatement, index: Int, v: Array[ProductreviewId]) =>
        s.setArray(index, s.getConnection.createArrayOf("int4", v.map(x => x.value: Integer)))
    
    SQL"""select productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate
          from production.productreview
          where productreviewid = ANY($productreviewids)
       """.as(rowParser.*)
  
  }
  override def update(row: ProductreviewRow)(implicit c: Connection): Boolean = {
    val productreviewid = row.productreviewid
    SQL"""update production.productreview
          set productid = ${row.productid}::int4,
              reviewername = ${row.reviewername}::"public"."Name",
              reviewdate = ${row.reviewdate}::timestamp,
              emailaddress = ${row.emailaddress},
              rating = ${row.rating}::int4,
              "comments" = ${row.comments},
              modifieddate = ${row.modifieddate}::timestamp
          where productreviewid = $productreviewid
       """.executeUpdate() > 0
  }
  override def updateFieldValues(productreviewid: ProductreviewId, fieldValues: List[ProductreviewFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case ProductreviewFieldValue.productid(value) => NamedParameter("productid", ParameterValue.from(value))
          case ProductreviewFieldValue.reviewername(value) => NamedParameter("reviewername", ParameterValue.from(value))
          case ProductreviewFieldValue.reviewdate(value) => NamedParameter("reviewdate", ParameterValue.from(value))
          case ProductreviewFieldValue.emailaddress(value) => NamedParameter("emailaddress", ParameterValue.from(value))
          case ProductreviewFieldValue.rating(value) => NamedParameter("rating", ParameterValue.from(value))
          case ProductreviewFieldValue.comments(value) => NamedParameter("comments", ParameterValue.from(value))
          case ProductreviewFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""update production.productreview
                    set ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(", ")}
                    where productreviewid = {productreviewid}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .on(NamedParameter("productreviewid", ParameterValue.from(productreviewid)))
          .executeUpdate() > 0
    }
  
  }
  override def upsert(unsaved: ProductreviewRow)(implicit c: Connection): ProductreviewRow = {
    SQL"""insert into production.productreview(productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate)
          values (
            ${unsaved.productreviewid}::int4,
            ${unsaved.productid}::int4,
            ${unsaved.reviewername}::"public"."Name",
            ${unsaved.reviewdate}::timestamp,
            ${unsaved.emailaddress},
            ${unsaved.rating}::int4,
            ${unsaved.comments},
            ${unsaved.modifieddate}::timestamp
          )
          on conflict (productreviewid)
          do update set
            productid = EXCLUDED.productid,
            reviewername = EXCLUDED.reviewername,
            reviewdate = EXCLUDED.reviewdate,
            emailaddress = EXCLUDED.emailaddress,
            rating = EXCLUDED.rating,
            "comments" = EXCLUDED."comments",
            modifieddate = EXCLUDED.modifieddate
          returning productreviewid, productid, reviewername, reviewdate, emailaddress, rating, "comments", modifieddate
       """
      .executeInsert(rowParser.single)
  
  }
  val rowParser: RowParser[ProductreviewRow] =
    RowParser[ProductreviewRow] { row =>
      Success(
        ProductreviewRow(
          productreviewid = row[ProductreviewId]("productreviewid"),
          productid = row[ProductId]("productid"),
          reviewername = row[Name]("reviewername"),
          reviewdate = row[LocalDateTime]("reviewdate"),
          emailaddress = row[String]("emailaddress"),
          rating = row[Int]("rating"),
          comments = row[Option[String]]("comments"),
          modifieddate = row[LocalDateTime]("modifieddate")
        )
      )
    }
}
