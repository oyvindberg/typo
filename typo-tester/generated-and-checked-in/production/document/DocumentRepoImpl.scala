/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package document

import adventureworks.Defaulted
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Flag
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import anorm.ToStatement
import java.sql.Connection
import java.sql.PreparedStatement
import java.time.LocalDateTime
import java.util.UUID

object DocumentRepoImpl extends DocumentRepo {
  override def delete(documentnode: DocumentId)(implicit c: Connection): Boolean = {
    SQL"""delete from production."document" where documentnode = $documentnode""".executeUpdate() > 0
  }
  override def insert(unsaved: DocumentRow)(implicit c: Connection): DocumentRow = {
    SQL"""insert into production."document"(title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode)
          values (${unsaved.title}, ${unsaved.owner}::int4, ${unsaved.folderflag}::"public"."Flag", ${unsaved.filename}, ${unsaved.fileextension}, ${unsaved.revision}::bpchar, ${unsaved.changenumber}::int4, ${unsaved.status}::int2, ${unsaved.documentsummary}, ${unsaved.document}::bytea, ${unsaved.rowguid}::uuid, ${unsaved.modifieddate}::timestamp, ${unsaved.documentnode})
          returning title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode
       """
      .executeInsert(rowParser.single)
  
  }
  override def insert(unsaved: DocumentRowUnsaved)(implicit c: Connection): DocumentRow = {
    val namedParameters = List(
      Some((NamedParameter("title", ParameterValue.from(unsaved.title)), "")),
      Some((NamedParameter("owner", ParameterValue.from(unsaved.owner)), "::int4")),
      Some((NamedParameter("filename", ParameterValue.from(unsaved.filename)), "")),
      Some((NamedParameter("fileextension", ParameterValue.from(unsaved.fileextension)), "")),
      Some((NamedParameter("revision", ParameterValue.from(unsaved.revision)), "::bpchar")),
      Some((NamedParameter("status", ParameterValue.from(unsaved.status)), "::int2")),
      Some((NamedParameter("documentsummary", ParameterValue.from(unsaved.documentsummary)), "")),
      Some((NamedParameter("document", ParameterValue.from(unsaved.document)), "::bytea")),
      unsaved.folderflag match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("folderflag", ParameterValue.from[Flag](value)), """::"public"."Flag""""))
      },
      unsaved.changenumber match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("changenumber", ParameterValue.from[Int](value)), "::int4"))
      },
      unsaved.rowguid match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("rowguid", ParameterValue.from[UUID](value)), "::uuid"))
      },
      unsaved.modifieddate match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("modifieddate", ParameterValue.from[LocalDateTime](value)), "::timestamp"))
      },
      unsaved.documentnode match {
        case Defaulted.UseDefault => None
        case Defaulted.Provided(value) => Some((NamedParameter("documentnode", ParameterValue.from[DocumentId](value)), ""))
      }
    ).flatten
    val quote = '"'.toString
    if (namedParameters.isEmpty) {
      SQL"""insert into production."document" default values
            returning title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode
         """
        .executeInsert(rowParser.single)
    } else {
      val q = s"""insert into production."document"(${namedParameters.map{case (x, _) => quote + x.name + quote}.mkString(", ")})
                  values (${namedParameters.map{ case (np, cast) => s"{${np.name}}$cast"}.mkString(", ")})
                  returning title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode
               """
      // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
      import anorm._
      SQL(q)
        .on(namedParameters.map(_._1) :_*)
        .executeInsert(rowParser.single)
    }
  
  }
  override def selectAll(implicit c: Connection): List[DocumentRow] = {
    SQL"""select title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode
          from production."document"
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[DocumentFieldOrIdValue[_]])(implicit c: Connection): List[DocumentRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case DocumentFieldValue.title(value) => NamedParameter("title", ParameterValue.from(value))
          case DocumentFieldValue.owner(value) => NamedParameter("owner", ParameterValue.from(value))
          case DocumentFieldValue.folderflag(value) => NamedParameter("folderflag", ParameterValue.from(value))
          case DocumentFieldValue.filename(value) => NamedParameter("filename", ParameterValue.from(value))
          case DocumentFieldValue.fileextension(value) => NamedParameter("fileextension", ParameterValue.from(value))
          case DocumentFieldValue.revision(value) => NamedParameter("revision", ParameterValue.from(value))
          case DocumentFieldValue.changenumber(value) => NamedParameter("changenumber", ParameterValue.from(value))
          case DocumentFieldValue.status(value) => NamedParameter("status", ParameterValue.from(value))
          case DocumentFieldValue.documentsummary(value) => NamedParameter("documentsummary", ParameterValue.from(value))
          case DocumentFieldValue.document(value) => NamedParameter("document", ParameterValue.from(value))
          case DocumentFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case DocumentFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
          case DocumentFieldValue.documentnode(value) => NamedParameter("documentnode", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode
                    from production."document"
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  override def selectById(documentnode: DocumentId)(implicit c: Connection): Option[DocumentRow] = {
    SQL"""select title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode
          from production."document"
          where documentnode = $documentnode
       """.as(rowParser.singleOpt)
  }
  override def selectByIds(documentnodes: Array[DocumentId])(implicit c: Connection): List[DocumentRow] = {
    implicit val toStatement: ToStatement[Array[DocumentId]] =
      (s: PreparedStatement, index: Int, v: Array[DocumentId]) =>
        s.setArray(index, s.getConnection.createArrayOf("varchar", v.map(x => x.value)))
    
    SQL"""select title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode
          from production."document"
          where documentnode = ANY($documentnodes)
       """.as(rowParser.*)
  
  }
  override def selectByUnique(rowguid: UUID)(implicit c: Connection): Option[DocumentRow] = {
    selectByFieldValues(List(DocumentFieldValue.rowguid(rowguid))).headOption
  }
  override def update(row: DocumentRow)(implicit c: Connection): Boolean = {
    val documentnode = row.documentnode
    SQL"""update production."document"
          set title = ${row.title},
              "owner" = ${row.owner}::int4,
              folderflag = ${row.folderflag}::"public"."Flag",
              filename = ${row.filename},
              fileextension = ${row.fileextension},
              revision = ${row.revision}::bpchar,
              changenumber = ${row.changenumber}::int4,
              status = ${row.status}::int2,
              documentsummary = ${row.documentsummary},
              "document" = ${row.document}::bytea,
              rowguid = ${row.rowguid}::uuid,
              modifieddate = ${row.modifieddate}::timestamp
          where documentnode = $documentnode
       """.executeUpdate() > 0
  }
  override def updateFieldValues(documentnode: DocumentId, fieldValues: List[DocumentFieldValue[_]])(implicit c: Connection): Boolean = {
    fieldValues match {
      case Nil => false
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case DocumentFieldValue.title(value) => NamedParameter("title", ParameterValue.from(value))
          case DocumentFieldValue.owner(value) => NamedParameter("owner", ParameterValue.from(value))
          case DocumentFieldValue.folderflag(value) => NamedParameter("folderflag", ParameterValue.from(value))
          case DocumentFieldValue.filename(value) => NamedParameter("filename", ParameterValue.from(value))
          case DocumentFieldValue.fileextension(value) => NamedParameter("fileextension", ParameterValue.from(value))
          case DocumentFieldValue.revision(value) => NamedParameter("revision", ParameterValue.from(value))
          case DocumentFieldValue.changenumber(value) => NamedParameter("changenumber", ParameterValue.from(value))
          case DocumentFieldValue.status(value) => NamedParameter("status", ParameterValue.from(value))
          case DocumentFieldValue.documentsummary(value) => NamedParameter("documentsummary", ParameterValue.from(value))
          case DocumentFieldValue.document(value) => NamedParameter("document", ParameterValue.from(value))
          case DocumentFieldValue.rowguid(value) => NamedParameter("rowguid", ParameterValue.from(value))
          case DocumentFieldValue.modifieddate(value) => NamedParameter("modifieddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""update production."document"
                    set ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(", ")}
                    where documentnode = {documentnode}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .on(NamedParameter("documentnode", ParameterValue.from(documentnode)))
          .executeUpdate() > 0
    }
  
  }
  override def upsert(unsaved: DocumentRow)(implicit c: Connection): DocumentRow = {
    SQL"""insert into production."document"(title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode)
          values (
            ${unsaved.title},
            ${unsaved.owner}::int4,
            ${unsaved.folderflag}::"public"."Flag",
            ${unsaved.filename},
            ${unsaved.fileextension},
            ${unsaved.revision}::bpchar,
            ${unsaved.changenumber}::int4,
            ${unsaved.status}::int2,
            ${unsaved.documentsummary},
            ${unsaved.document}::bytea,
            ${unsaved.rowguid}::uuid,
            ${unsaved.modifieddate}::timestamp,
            ${unsaved.documentnode}
          )
          on conflict (documentnode)
          do update set
            title = EXCLUDED.title,
            "owner" = EXCLUDED."owner",
            folderflag = EXCLUDED.folderflag,
            filename = EXCLUDED.filename,
            fileextension = EXCLUDED.fileextension,
            revision = EXCLUDED.revision,
            changenumber = EXCLUDED.changenumber,
            status = EXCLUDED.status,
            documentsummary = EXCLUDED.documentsummary,
            "document" = EXCLUDED."document",
            rowguid = EXCLUDED.rowguid,
            modifieddate = EXCLUDED.modifieddate
          returning title, "owner", folderflag, filename, fileextension, revision, changenumber, status, documentsummary, "document", rowguid, modifieddate, documentnode
       """
      .executeInsert(rowParser.single)
  
  }
  val rowParser: RowParser[DocumentRow] =
    RowParser[DocumentRow] { row =>
      Success(
        DocumentRow(
          title = row[String]("title"),
          owner = row[BusinessentityId]("owner"),
          folderflag = row[Flag]("folderflag"),
          filename = row[String]("filename"),
          fileextension = row[Option[String]]("fileextension"),
          revision = row[/* bpchar */ String]("revision"),
          changenumber = row[Int]("changenumber"),
          status = row[Int]("status"),
          documentsummary = row[Option[String]]("documentsummary"),
          document = row[Option[Array[Byte]]]("document"),
          rowguid = row[UUID]("rowguid"),
          modifieddate = row[LocalDateTime]("modifieddate"),
          documentnode = row[DocumentId]("documentnode")
        )
      )
    }
}
