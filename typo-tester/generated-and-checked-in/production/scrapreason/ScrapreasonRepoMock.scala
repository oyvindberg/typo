/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package scrapreason

import java.sql.Connection
import scala.Function1

class ScrapreasonRepoMock(toRow: Function1[ScrapreasonRowUnsaved, ScrapreasonRow],
                          map: scala.collection.mutable.Map[ScrapreasonId, ScrapreasonRow] = scala.collection.mutable.Map.empty) extends ScrapreasonRepo {
  override def delete(scrapreasonid: ScrapreasonId)(implicit c: Connection): Boolean = {
    map.remove(scrapreasonid).isDefined
  }
  override def insert(unsaved: ScrapreasonRow)(implicit c: Connection): ScrapreasonRow = {
    if (map.contains(unsaved.scrapreasonid))
      sys.error(s"id ${unsaved.scrapreasonid} already exists")
    else
      map.put(unsaved.scrapreasonid, unsaved)
    unsaved
  }
  override def insert(unsaved: ScrapreasonRowUnsaved)(implicit c: Connection): ScrapreasonRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[ScrapreasonRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[ScrapreasonFieldOrIdValue[_]])(implicit c: Connection): List[ScrapreasonRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, ScrapreasonFieldValue.scrapreasonid(value)) => acc.filter(_.scrapreasonid == value)
      case (acc, ScrapreasonFieldValue.name(value)) => acc.filter(_.name == value)
      case (acc, ScrapreasonFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(scrapreasonid: ScrapreasonId)(implicit c: Connection): Option[ScrapreasonRow] = {
    map.get(scrapreasonid)
  }
  override def selectByIds(scrapreasonids: Array[ScrapreasonId])(implicit c: Connection): List[ScrapreasonRow] = {
    scrapreasonids.flatMap(map.get).toList
  }
  override def update(row: ScrapreasonRow)(implicit c: Connection): Boolean = {
    map.get(row.scrapreasonid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.scrapreasonid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(scrapreasonid: ScrapreasonId, fieldValues: List[ScrapreasonFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(scrapreasonid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, ScrapreasonFieldValue.name(value)) => acc.copy(name = value)
          case (acc, ScrapreasonFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(scrapreasonid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: ScrapreasonRow)(implicit c: Connection): ScrapreasonRow = {
    map.put(unsaved.scrapreasonid, unsaved)
    unsaved
  }
}
