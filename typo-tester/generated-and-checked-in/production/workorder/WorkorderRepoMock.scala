/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorder

import java.sql.Connection
import scala.Function1

class WorkorderRepoMock(toRow: Function1[WorkorderRowUnsaved, WorkorderRow],
                        map: scala.collection.mutable.Map[WorkorderId, WorkorderRow] = scala.collection.mutable.Map.empty) extends WorkorderRepo {
  override def delete(workorderid: WorkorderId)(implicit c: Connection): Boolean = {
    map.remove(workorderid).isDefined
  }
  override def insert(unsaved: WorkorderRow)(implicit c: Connection): WorkorderRow = {
    if (map.contains(unsaved.workorderid))
      sys.error(s"id ${unsaved.workorderid} already exists")
    else
      map.put(unsaved.workorderid, unsaved)
    unsaved
  }
  override def insert(unsaved: WorkorderRowUnsaved)(implicit c: Connection): WorkorderRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[WorkorderRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[WorkorderFieldOrIdValue[_]])(implicit c: Connection): List[WorkorderRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, WorkorderFieldValue.workorderid(value)) => acc.filter(_.workorderid == value)
      case (acc, WorkorderFieldValue.productid(value)) => acc.filter(_.productid == value)
      case (acc, WorkorderFieldValue.orderqty(value)) => acc.filter(_.orderqty == value)
      case (acc, WorkorderFieldValue.scrappedqty(value)) => acc.filter(_.scrappedqty == value)
      case (acc, WorkorderFieldValue.startdate(value)) => acc.filter(_.startdate == value)
      case (acc, WorkorderFieldValue.enddate(value)) => acc.filter(_.enddate == value)
      case (acc, WorkorderFieldValue.duedate(value)) => acc.filter(_.duedate == value)
      case (acc, WorkorderFieldValue.scrapreasonid(value)) => acc.filter(_.scrapreasonid == value)
      case (acc, WorkorderFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(workorderid: WorkorderId)(implicit c: Connection): Option[WorkorderRow] = {
    map.get(workorderid)
  }
  override def selectByIds(workorderids: Array[WorkorderId])(implicit c: Connection): List[WorkorderRow] = {
    workorderids.flatMap(map.get).toList
  }
  override def update(row: WorkorderRow)(implicit c: Connection): Boolean = {
    map.get(row.workorderid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.workorderid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(workorderid: WorkorderId, fieldValues: List[WorkorderFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(workorderid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, WorkorderFieldValue.productid(value)) => acc.copy(productid = value)
          case (acc, WorkorderFieldValue.orderqty(value)) => acc.copy(orderqty = value)
          case (acc, WorkorderFieldValue.scrappedqty(value)) => acc.copy(scrappedqty = value)
          case (acc, WorkorderFieldValue.startdate(value)) => acc.copy(startdate = value)
          case (acc, WorkorderFieldValue.enddate(value)) => acc.copy(enddate = value)
          case (acc, WorkorderFieldValue.duedate(value)) => acc.copy(duedate = value)
          case (acc, WorkorderFieldValue.scrapreasonid(value)) => acc.copy(scrapreasonid = value)
          case (acc, WorkorderFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(workorderid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: WorkorderRow)(implicit c: Connection): WorkorderRow = {
    map.put(unsaved.workorderid, unsaved)
    unsaved
  }
}
