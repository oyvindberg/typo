/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package workorderrouting

import adventureworks.production.workorder.WorkorderId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** Type for the composite primary key of table `production.workorderrouting` */
case class WorkorderroutingId(workorderid: WorkorderId, productid: Int, operationsequence: Int)
object WorkorderroutingId {
  implicit def ordering: Ordering[WorkorderroutingId] = Ordering.by(x => (x.workorderid, x.productid, x.operationsequence))
  implicit val oFormat: OFormat[WorkorderroutingId] = new OFormat[WorkorderroutingId]{
    override def writes(o: WorkorderroutingId): JsObject =
      Json.obj(
        "workorderid" -> o.workorderid,
        "productid" -> o.productid,
        "operationsequence" -> o.operationsequence
      )
  
    override def reads(json: JsValue): JsResult[WorkorderroutingId] = {
      JsResult.fromTry(
        Try(
          WorkorderroutingId(
            workorderid = json.\("workorderid").as[WorkorderId],
            productid = json.\("productid").as[Int],
            operationsequence = json.\("operationsequence").as[Int]
          )
        )
      )
    }
  }
}
