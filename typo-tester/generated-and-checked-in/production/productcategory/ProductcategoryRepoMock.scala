/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package productcategory

import java.sql.Connection
import scala.Function1

class ProductcategoryRepoMock(toRow: Function1[ProductcategoryRowUnsaved, ProductcategoryRow],
                              map: scala.collection.mutable.Map[ProductcategoryId, ProductcategoryRow] = scala.collection.mutable.Map.empty) extends ProductcategoryRepo {
  override def delete(productcategoryid: ProductcategoryId)(implicit c: Connection): Boolean = {
    map.remove(productcategoryid).isDefined
  }
  override def insert(unsaved: ProductcategoryRow)(implicit c: Connection): ProductcategoryRow = {
    if (map.contains(unsaved.productcategoryid))
      sys.error(s"id ${unsaved.productcategoryid} already exists")
    else
      map.put(unsaved.productcategoryid, unsaved)
    unsaved
  }
  override def insert(unsaved: ProductcategoryRowUnsaved)(implicit c: Connection): ProductcategoryRow = {
    insert(toRow(unsaved))
  }
  override def selectAll(implicit c: Connection): List[ProductcategoryRow] = {
    map.values.toList
  }
  override def selectByFieldValues(fieldValues: List[ProductcategoryFieldOrIdValue[_]])(implicit c: Connection): List[ProductcategoryRow] = {
    fieldValues.foldLeft(map.values) {
      case (acc, ProductcategoryFieldValue.productcategoryid(value)) => acc.filter(_.productcategoryid == value)
      case (acc, ProductcategoryFieldValue.name(value)) => acc.filter(_.name == value)
      case (acc, ProductcategoryFieldValue.rowguid(value)) => acc.filter(_.rowguid == value)
      case (acc, ProductcategoryFieldValue.modifieddate(value)) => acc.filter(_.modifieddate == value)
    }.toList
  }
  override def selectById(productcategoryid: ProductcategoryId)(implicit c: Connection): Option[ProductcategoryRow] = {
    map.get(productcategoryid)
  }
  override def selectByIds(productcategoryids: Array[ProductcategoryId])(implicit c: Connection): List[ProductcategoryRow] = {
    productcategoryids.flatMap(map.get).toList
  }
  override def update(row: ProductcategoryRow)(implicit c: Connection): Boolean = {
    map.get(row.productcategoryid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.productcategoryid, row)
        true
      case None => false
    }
  }
  override def updateFieldValues(productcategoryid: ProductcategoryId, fieldValues: List[ProductcategoryFieldValue[_]])(implicit c: Connection): Boolean = {
    map.get(productcategoryid) match {
      case Some(oldRow) =>
        val updatedRow = fieldValues.foldLeft(oldRow) {
          case (acc, ProductcategoryFieldValue.name(value)) => acc.copy(name = value)
          case (acc, ProductcategoryFieldValue.rowguid(value)) => acc.copy(rowguid = value)
          case (acc, ProductcategoryFieldValue.modifieddate(value)) => acc.copy(modifieddate = value)
        }
        if (updatedRow != oldRow) {
          map.put(productcategoryid, updatedRow)
          true
        } else {
          false
        }
      case None => false
    }
  }
  override def upsert(unsaved: ProductcategoryRow)(implicit c: Connection): ProductcategoryRow = {
    map.put(unsaved.productcategoryid, unsaved)
    unsaved
  }
}
