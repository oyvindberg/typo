/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package emailaddress

import adventureworks.person.businessentity.BusinessentityId
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** Type for the composite primary key of table `person.emailaddress` */
case class EmailaddressId(businessentityid: BusinessentityId, emailaddressid: Int)
object EmailaddressId {
  implicit def ordering: Ordering[EmailaddressId] = Ordering.by(x => (x.businessentityid, x.emailaddressid))
  implicit val oFormat: OFormat[EmailaddressId] = new OFormat[EmailaddressId]{
    override def writes(o: EmailaddressId): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "emailaddressid" -> o.emailaddressid
      )
  
    override def reads(json: JsValue): JsResult[EmailaddressId] = {
      JsResult.fromTry(
        Try(
          EmailaddressId(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            emailaddressid = json.\("emailaddressid").as[Int]
          )
        )
      )
    }
  }
}
