/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package personphone

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.person.phonenumbertype.PhonenumbertypeId
import adventureworks.public.Phone
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PersonphoneRow(
  /** Business entity identification number. Foreign key to Person.BusinessEntityID.
      Points to [[person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Telephone number identification number. */
  phonenumber: Phone,
  /** Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.
      Points to [[phonenumbertype.PhonenumbertypeRow.phonenumbertypeid]] */
  phonenumbertypeid: PhonenumbertypeId,
  modifieddate: LocalDateTime
){
   val compositeId: PersonphoneId = PersonphoneId(businessentityid, phonenumber, phonenumbertypeid)
 }

object PersonphoneRow {
  implicit val oFormat: OFormat[PersonphoneRow] = new OFormat[PersonphoneRow]{
    override def writes(o: PersonphoneRow): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "phonenumber" -> o.phonenumber,
        "phonenumbertypeid" -> o.phonenumbertypeid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PersonphoneRow] = {
      JsResult.fromTry(
        Try(
          PersonphoneRow(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            phonenumber = json.\("phonenumber").as[Phone],
            phonenumbertypeid = json.\("phonenumbertypeid").as[PhonenumbertypeId],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
