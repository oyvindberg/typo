/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package countryregion

import adventureworks.Defaulted
import adventureworks.public.Name
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

/** This class corresponds to a row in table `person.countryregion` which has not been persisted yet */
case class CountryregionRowUnsaved(
  /** ISO standard code for countries and regions. */
  countryregioncode: CountryregionId,
  /** Country or region name. */
  name: Name,
  /** Default: now() */
  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault
) {
  def toRow(modifieddateDefault: => LocalDateTime): CountryregionRow =
    CountryregionRow(
      countryregioncode = countryregioncode,
      name = name,
      modifieddate = modifieddate match {
                       case Defaulted.UseDefault => modifieddateDefault
                       case Defaulted.Provided(value) => value
                     }
    )
}
object CountryregionRowUnsaved {
  implicit val oFormat: OFormat[CountryregionRowUnsaved] = new OFormat[CountryregionRowUnsaved]{
    override def writes(o: CountryregionRowUnsaved): JsObject =
      Json.obj(
        "countryregioncode" -> o.countryregioncode,
        "name" -> o.name,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[CountryregionRowUnsaved] = {
      JsResult.fromTry(
        Try(
          CountryregionRowUnsaved(
            countryregioncode = json.\("countryregioncode").as[CountryregionId],
            name = json.\("name").as[Name],
            modifieddate = json.\("modifieddate").as[Defaulted[LocalDateTime]]
          )
        )
      )
    }
  }
}
