/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package ppp

import adventureworks.production.product.ProductId
import adventureworks.production.productphoto.ProductphotoId
import adventureworks.public.Flag
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PppViewRow(
  /** Points to [[production.productproductphoto.ProductproductphotoRow.productid]] */
  productid: Option[ProductId],
  /** Points to [[production.productproductphoto.ProductproductphotoRow.productphotoid]] */
  productphotoid: Option[ProductphotoId],
  /** Points to [[production.productproductphoto.ProductproductphotoRow.primary]] */
  primary: Flag,
  /** Points to [[production.productproductphoto.ProductproductphotoRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object PppViewRow {
  implicit val oFormat: OFormat[PppViewRow] = new OFormat[PppViewRow]{
    override def writes(o: PppViewRow): JsObject =
      Json.obj(
        "productid" -> o.productid,
        "productphotoid" -> o.productphotoid,
        "primary" -> o.primary,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PppViewRow] = {
      JsResult.fromTry(
        Try(
          PppViewRow(
            productid = json.\("productid").toOption.map(_.as[ProductId]),
            productphotoid = json.\("productphotoid").toOption.map(_.as[ProductphotoId]),
            primary = json.\("primary").as[Flag],
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
