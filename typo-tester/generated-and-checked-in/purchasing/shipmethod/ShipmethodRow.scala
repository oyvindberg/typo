/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package purchasing
package shipmethod

import adventureworks.public.Name
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ShipmethodRow(
  /** Primary key for ShipMethod records. */
  shipmethodid: ShipmethodId,
  /** Shipping company name. */
  name: Name,
  /** Minimum shipping charge. */
  shipbase: BigDecimal,
  /** Shipping charge per pound. */
  shiprate: BigDecimal,
  rowguid: UUID,
  modifieddate: LocalDateTime
)

object ShipmethodRow {
  implicit val oFormat: OFormat[ShipmethodRow] = new OFormat[ShipmethodRow]{
    override def writes(o: ShipmethodRow): JsObject =
      Json.obj(
        "shipmethodid" -> o.shipmethodid,
        "name" -> o.name,
        "shipbase" -> o.shipbase,
        "shiprate" -> o.shiprate,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[ShipmethodRow] = {
      JsResult.fromTry(
        Try(
          ShipmethodRow(
            shipmethodid = json.\("shipmethodid").as[ShipmethodId],
            name = json.\("name").as[Name],
            shipbase = json.\("shipbase").as[BigDecimal],
            shiprate = json.\("shiprate").as[BigDecimal],
            rowguid = json.\("rowguid").as[UUID],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
