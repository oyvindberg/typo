/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vemployeedepartmenthistory

import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import java.time.LocalDate

object VemployeedepartmenthistoryViewRepoImpl extends VemployeedepartmenthistoryViewRepo {
  override def selectAll(implicit c: Connection): List[VemployeedepartmenthistoryViewRow] = {
    SQL"""select businessentityid, title, firstname, middlename, lastname, suffix, shift, department, groupname, startdate, enddate
          from humanresources.vemployeedepartmenthistory
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[VemployeedepartmenthistoryViewFieldOrIdValue[_]])(implicit c: Connection): List[VemployeedepartmenthistoryViewRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case VemployeedepartmenthistoryViewFieldValue.businessentityid(value) => NamedParameter("businessentityid", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.title(value) => NamedParameter("title", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.firstname(value) => NamedParameter("firstname", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.middlename(value) => NamedParameter("middlename", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.lastname(value) => NamedParameter("lastname", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.suffix(value) => NamedParameter("suffix", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.shift(value) => NamedParameter("shift", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.department(value) => NamedParameter("department", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.groupname(value) => NamedParameter("groupname", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.startdate(value) => NamedParameter("startdate", ParameterValue.from(value))
          case VemployeedepartmenthistoryViewFieldValue.enddate(value) => NamedParameter("enddate", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select businessentityid, title, firstname, middlename, lastname, suffix, shift, department, groupname, startdate, enddate
                    from humanresources.vemployeedepartmenthistory
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[VemployeedepartmenthistoryViewRow] =
    RowParser[VemployeedepartmenthistoryViewRow] { row =>
      Success(
        VemployeedepartmenthistoryViewRow(
          businessentityid = row[Option[BusinessentityId]]("businessentityid"),
          title = row[Option[String]]("title"),
          firstname = row[Option[Name]]("firstname"),
          middlename = row[Option[Name]]("middlename"),
          lastname = row[Option[Name]]("lastname"),
          suffix = row[Option[String]]("suffix"),
          shift = row[Option[Name]]("shift"),
          department = row[Option[Name]]("department"),
          groupname = row[Option[Name]]("groupname"),
          startdate = row[Option[LocalDate]]("startdate"),
          enddate = row[Option[LocalDate]]("enddate")
        )
      )
    }
}
