/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package employeepayhistory

import adventureworks.person.businessentity.BusinessentityId
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class EmployeepayhistoryRow(
  /** Employee identification number. Foreign key to Employee.BusinessEntityID.
      Points to [[employee.EmployeeRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Date the change in pay is effective */
  ratechangedate: LocalDateTime,
  /** Salary hourly rate. */
  rate: BigDecimal,
  /** 1 = Salary received monthly, 2 = Salary received biweekly */
  payfrequency: Int,
  modifieddate: LocalDateTime
){
   val compositeId: EmployeepayhistoryId = EmployeepayhistoryId(businessentityid, ratechangedate)
 }

object EmployeepayhistoryRow {
  implicit val oFormat: OFormat[EmployeepayhistoryRow] = new OFormat[EmployeepayhistoryRow]{
    override def writes(o: EmployeepayhistoryRow): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "ratechangedate" -> o.ratechangedate,
        "rate" -> o.rate,
        "payfrequency" -> o.payfrequency,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[EmployeepayhistoryRow] = {
      JsResult.fromTry(
        Try(
          EmployeepayhistoryRow(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            ratechangedate = json.\("ratechangedate").as[LocalDateTime],
            rate = json.\("rate").as[BigDecimal],
            payfrequency = json.\("payfrequency").as[Int],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
