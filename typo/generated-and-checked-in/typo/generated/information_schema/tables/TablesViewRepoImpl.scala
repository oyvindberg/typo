/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package tables

import anorm.NamedParameter
import anorm.ParameterValue
import anorm.RowParser
import anorm.SqlStringInterpolation
import anorm.Success
import java.sql.Connection
import typo.generated.information_schema.CharacterData
import typo.generated.information_schema.SqlIdentifier
import typo.generated.information_schema.YesOrNo

object TablesViewRepoImpl extends TablesViewRepo {
  override def selectAll(implicit c: Connection): List[TablesViewRow] = {
    SQL"""select table_catalog, table_schema, "table_name", table_type, self_referencing_column_name, reference_generation, "user_defined_type_catalog", "user_defined_type_schema", "user_defined_type_name", is_insertable_into, is_typed, commit_action
          from information_schema."tables"
       """.as(rowParser.*)
  }
  override def selectByFieldValues(fieldValues: List[TablesViewFieldOrIdValue[_]])(implicit c: Connection): List[TablesViewRow] = {
    fieldValues match {
      case Nil => selectAll
      case nonEmpty =>
        val namedParams = nonEmpty.map{
          case TablesViewFieldValue.tableCatalog(value) => NamedParameter("table_catalog", ParameterValue.from(value))
          case TablesViewFieldValue.tableSchema(value) => NamedParameter("table_schema", ParameterValue.from(value))
          case TablesViewFieldValue.tableName(value) => NamedParameter("table_name", ParameterValue.from(value))
          case TablesViewFieldValue.tableType(value) => NamedParameter("table_type", ParameterValue.from(value))
          case TablesViewFieldValue.selfReferencingColumnName(value) => NamedParameter("self_referencing_column_name", ParameterValue.from(value))
          case TablesViewFieldValue.referenceGeneration(value) => NamedParameter("reference_generation", ParameterValue.from(value))
          case TablesViewFieldValue.userDefinedTypeCatalog(value) => NamedParameter("user_defined_type_catalog", ParameterValue.from(value))
          case TablesViewFieldValue.userDefinedTypeSchema(value) => NamedParameter("user_defined_type_schema", ParameterValue.from(value))
          case TablesViewFieldValue.userDefinedTypeName(value) => NamedParameter("user_defined_type_name", ParameterValue.from(value))
          case TablesViewFieldValue.isInsertableInto(value) => NamedParameter("is_insertable_into", ParameterValue.from(value))
          case TablesViewFieldValue.isTyped(value) => NamedParameter("is_typed", ParameterValue.from(value))
          case TablesViewFieldValue.commitAction(value) => NamedParameter("commit_action", ParameterValue.from(value))
        }
        val quote = '"'.toString
        val q = s"""select table_catalog, table_schema, "table_name", table_type, self_referencing_column_name, reference_generation, "user_defined_type_catalog", "user_defined_type_schema", "user_defined_type_name", is_insertable_into, is_typed, commit_action
                    from information_schema."tables"
                    where ${namedParams.map(x => s"$quote${x.name}$quote = {${x.name}}").mkString(" AND ")}
                 """
        // this line is here to include an extension method which is only needed for scala 3. no import is emitted for `SQL` to avoid warning for scala 2
        import anorm._
        SQL(q)
          .on(namedParams: _*)
          .as(rowParser.*)
    }
  
  }
  val rowParser: RowParser[TablesViewRow] =
    RowParser[TablesViewRow] { row =>
      Success(
        TablesViewRow(
          tableCatalog = row[Option[SqlIdentifier]]("table_catalog"),
          tableSchema = row[Option[SqlIdentifier]]("table_schema"),
          tableName = row[Option[SqlIdentifier]]("table_name"),
          tableType = row[Option[CharacterData]]("table_type"),
          selfReferencingColumnName = row[Option[SqlIdentifier]]("self_referencing_column_name"),
          referenceGeneration = row[Option[CharacterData]]("reference_generation"),
          userDefinedTypeCatalog = row[Option[SqlIdentifier]]("user_defined_type_catalog"),
          userDefinedTypeSchema = row[Option[SqlIdentifier]]("user_defined_type_schema"),
          userDefinedTypeName = row[Option[SqlIdentifier]]("user_defined_type_name"),
          isInsertableInto = row[Option[YesOrNo]]("is_insertable_into"),
          isTyped = row[Option[YesOrNo]]("is_typed"),
          commitAction = row[Option[CharacterData]]("commit_action")
        )
      )
    }
}
