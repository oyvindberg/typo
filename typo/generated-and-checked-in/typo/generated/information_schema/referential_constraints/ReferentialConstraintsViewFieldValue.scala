/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package information_schema
package referential_constraints

import typo.generated.information_schema.CharacterData
import typo.generated.information_schema.SqlIdentifier

sealed abstract class ReferentialConstraintsViewFieldOrIdValue[T](val name: String, val value: T)
sealed abstract class ReferentialConstraintsViewFieldValue[T](name: String, value: T) extends ReferentialConstraintsViewFieldOrIdValue(name, value)

object ReferentialConstraintsViewFieldValue {
  case class constraintCatalog(override val value: Option[SqlIdentifier]) extends ReferentialConstraintsViewFieldValue("constraint_catalog", value)
  case class constraintSchema(override val value: Option[SqlIdentifier]) extends ReferentialConstraintsViewFieldValue("constraint_schema", value)
  case class constraintName(override val value: Option[SqlIdentifier]) extends ReferentialConstraintsViewFieldValue("constraint_name", value)
  case class uniqueConstraintCatalog(override val value: Option[SqlIdentifier]) extends ReferentialConstraintsViewFieldValue("unique_constraint_catalog", value)
  case class uniqueConstraintSchema(override val value: Option[SqlIdentifier]) extends ReferentialConstraintsViewFieldValue("unique_constraint_schema", value)
  case class uniqueConstraintName(override val value: Option[SqlIdentifier]) extends ReferentialConstraintsViewFieldValue("unique_constraint_name", value)
  case class matchOption(override val value: Option[CharacterData]) extends ReferentialConstraintsViewFieldValue("match_option", value)
  case class updateRule(override val value: Option[CharacterData]) extends ReferentialConstraintsViewFieldValue("update_rule", value)
  case class deleteRule(override val value: Option[CharacterData]) extends ReferentialConstraintsViewFieldValue("delete_rule", value)
}
