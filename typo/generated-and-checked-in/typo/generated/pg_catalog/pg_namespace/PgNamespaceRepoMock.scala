/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_namespace

import java.sql.Connection
import scala.annotation.nowarn

class PgNamespaceRepoMock(map: scala.collection.mutable.Map[PgNamespaceId, PgNamespaceRow] = scala.collection.mutable.Map.empty) extends PgNamespaceRepo {
  override def deleteById(oid: PgNamespaceId)(implicit c: Connection): Boolean = {
    map.remove(oid).isDefined
  }
  override def deleteByIds(oids: Array[PgNamespaceId])(implicit c: Connection): Int = {
    oids.map(id => map.remove(id)).count(_.isDefined)
  }
  override def insert(unsaved: PgNamespaceRow)(implicit c: Connection): PgNamespaceRow = {
    val _ = if (map.contains(unsaved.oid))
      sys.error(s"id ${unsaved.oid} already exists")
    else
      map.put(unsaved.oid, unsaved)
    
    unsaved
  }
  override def insertStreaming(unsaved: Iterator[PgNamespaceRow], batchSize: Int = 10000)(implicit c: Connection): Long = {
    unsaved.foreach { row =>
      map += (row.oid -> row)
    }
    unsaved.size.toLong
  }
  override def selectAll(implicit c: Connection): List[PgNamespaceRow] = {
    map.values.toList
  }
  override def selectById(oid: PgNamespaceId)(implicit c: Connection): Option[PgNamespaceRow] = {
    map.get(oid)
  }
  override def selectByIds(oids: Array[PgNamespaceId])(implicit c: Connection): List[PgNamespaceRow] = {
    oids.flatMap(map.get).toList
  }
  override def selectByIdsTracked(oids: Array[PgNamespaceId])(implicit c: Connection): Map[PgNamespaceId, PgNamespaceRow] = {
    val byId = selectByIds(oids).view.map(x => (x.oid, x)).toMap
    oids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
  }
  override def selectByUniqueNspname(nspname: String)(implicit c: Connection): Option[PgNamespaceRow] = {
    map.values.find(v => nspname == v.nspname)
  }
  override def update(row: PgNamespaceRow)(implicit c: Connection): Boolean = {
    map.get(row.oid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.oid, row): @nowarn
        true
      case None => false
    }
  }
  override def upsert(unsaved: PgNamespaceRow)(implicit c: Connection): PgNamespaceRow = {
    map.put(unsaved.oid, unsaved): @nowarn
    unsaved
  }
  override def upsertBatch(unsaved: Iterable[PgNamespaceRow])(implicit c: Connection): List[PgNamespaceRow] = {
    unsaved.map { row =>
      map += (row.oid -> row)
      row
    }.toList
  }
  /* NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  override def upsertStreaming(unsaved: Iterator[PgNamespaceRow], batchSize: Int = 10000)(implicit c: Connection): Int = {
    unsaved.foreach { row =>
      map += (row.oid -> row)
    }
    unsaved.size
  }
}
