/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_namespace

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try
import typo.generated.customtypes.TypoAclItem

/** Table: pg_catalog.pg_namespace */
case class PgNamespaceRow(
  /** debug: {"table_catalog":"Adventureworks","table_schema":"pg_catalog","table_name":"pg_namespace","column_name":"oid","ordinal_position":1,"is_nullable":"NO","data_type":"oid","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  oid: /* oid */ Long,
  /** debug: {"table_catalog":"Adventureworks","table_schema":"pg_catalog","table_name":"pg_namespace","column_name":"nspname","ordinal_position":2,"is_nullable":"NO","data_type":"name","collation_catalog":"Adventureworks","collation_schema":"pg_catalog","collation_name":"C","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"name","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  nspname: String,
  /** debug: {"table_catalog":"Adventureworks","table_schema":"pg_catalog","table_name":"pg_namespace","column_name":"nspowner","ordinal_position":3,"is_nullable":"NO","data_type":"oid","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"oid","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  nspowner: /* oid */ Long,
  /** debug: {"table_catalog":"Adventureworks","table_schema":"pg_catalog","table_name":"pg_namespace","column_name":"nspacl","ordinal_position":4,"is_nullable":"YES","data_type":"ARRAY","udt_catalog":"Adventureworks","udt_schema":"pg_catalog","udt_name":"_aclitem","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"YES"} */
  nspacl: Option[Array[TypoAclItem]]
)

object PgNamespaceRow {
  implicit lazy val reads: Reads[PgNamespaceRow] = Reads[PgNamespaceRow](json => JsResult.fromTry(
      Try(
        PgNamespaceRow(
          oid = json.\("oid").as(Reads.LongReads),
          nspname = json.\("nspname").as(Reads.StringReads),
          nspowner = json.\("nspowner").as(Reads.LongReads),
          nspacl = json.\("nspacl").toOption.map(_.as(Reads.ArrayReads[TypoAclItem](using TypoAclItem.reads, implicitly)))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgNamespaceRow] = RowParser[PgNamespaceRow] { row =>
    Success(
      PgNamespaceRow(
        oid = row(idx + 0)(Column.columnToLong),
        nspname = row(idx + 1)(Column.columnToString),
        nspowner = row(idx + 2)(Column.columnToLong),
        nspacl = row(idx + 3)(Column.columnToOption(TypoAclItem.arrayColumn))
      )
    )
  }
  implicit lazy val text: Text[PgNamespaceRow] = Text.instance[PgNamespaceRow]{ (row, sb) =>
    Text.longInstance.unsafeEncode(row.oid, sb)
    sb.append(Text.DELIMETER)
    Text.stringInstance.unsafeEncode(row.nspname, sb)
    sb.append(Text.DELIMETER)
    Text.longInstance.unsafeEncode(row.nspowner, sb)
    sb.append(Text.DELIMETER)
    Text.option(Text.iterableInstance[Array, TypoAclItem](TypoAclItem.text, implicitly)).unsafeEncode(row.nspacl, sb)
  }
  implicit lazy val writes: OWrites[PgNamespaceRow] = OWrites[PgNamespaceRow](o =>
    new JsObject(ListMap[String, JsValue](
      "oid" -> Writes.LongWrites.writes(o.oid),
      "nspname" -> Writes.StringWrites.writes(o.nspname),
      "nspowner" -> Writes.LongWrites.writes(o.nspowner),
      "nspacl" -> Writes.OptionWrites(Writes.arrayWrites[TypoAclItem](using implicitly, TypoAclItem.writes)).writes(o.nspacl)
    ))
  )
}
