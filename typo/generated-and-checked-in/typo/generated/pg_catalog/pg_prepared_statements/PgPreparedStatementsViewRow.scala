/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package pg_catalog
package pg_prepared_statements

import anorm.Column
import anorm.RowParser
import anorm.Success
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try
import typo.generated.TypoOffsetDateTime
import typo.generated.TypoRegtype

case class PgPreparedStatementsViewRow(
  /** debug: {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_prepared_statements","column_name":"name","ordinal_position":1,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"1","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  name: Option[String],
  /** debug: {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_prepared_statements","column_name":"statement","ordinal_position":2,"is_nullable":"YES","data_type":"text","character_octet_length":1073741824,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"text","dtd_identifier":"2","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  statement: Option[String],
  /** debug: {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_prepared_statements","column_name":"prepare_time","ordinal_position":3,"is_nullable":"YES","data_type":"timestamp with time zone","datetime_precision":6,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"timestamptz","dtd_identifier":"3","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  prepareTime: Option[TypoOffsetDateTime],
  /** debug: {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_prepared_statements","column_name":"parameter_types","ordinal_position":4,"is_nullable":"YES","data_type":"ARRAY","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"_regtype","dtd_identifier":"4","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  parameterTypes: Option[Array[TypoRegtype]],
  /** debug: {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_prepared_statements","column_name":"from_sql","ordinal_position":5,"is_nullable":"YES","data_type":"boolean","udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"bool","dtd_identifier":"5","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  fromSql: Option[Boolean],
  /** debug: {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_prepared_statements","column_name":"generic_plans","ordinal_position":6,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"6","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  genericPlans: Option[Long],
  /** debug: {"table_catalog":"postgres","table_schema":"pg_catalog","table_name":"pg_prepared_statements","column_name":"custom_plans","ordinal_position":7,"is_nullable":"YES","data_type":"bigint","numeric_precision":64,"numeric_precision_radix":2,"numeric_scale":0,"udt_catalog":"postgres","udt_schema":"pg_catalog","udt_name":"int8","dtd_identifier":"7","is_self_referencing":"NO","is_identity":"NO","identity_cycle":"NO","is_generated":"NEVER","is_updatable":"NO"} */
  customPlans: Option[Long]
)

object PgPreparedStatementsViewRow {
  implicit lazy val reads: Reads[PgPreparedStatementsViewRow] = Reads[PgPreparedStatementsViewRow](json => JsResult.fromTry(
      Try(
        PgPreparedStatementsViewRow(
          name = json.\("name").toOption.map(_.as(Reads.StringReads)),
          statement = json.\("statement").toOption.map(_.as(Reads.StringReads)),
          prepareTime = json.\("prepare_time").toOption.map(_.as(TypoOffsetDateTime.reads)),
          parameterTypes = json.\("parameter_types").toOption.map(_.as(Reads.ArrayReads[TypoRegtype](TypoRegtype.reads, implicitly))),
          fromSql = json.\("from_sql").toOption.map(_.as(Reads.BooleanReads)),
          genericPlans = json.\("generic_plans").toOption.map(_.as(Reads.LongReads)),
          customPlans = json.\("custom_plans").toOption.map(_.as(Reads.LongReads))
        )
      )
    ),
  )
  def rowParser(idx: Int): RowParser[PgPreparedStatementsViewRow] = RowParser[PgPreparedStatementsViewRow] { row =>
    Success(
      PgPreparedStatementsViewRow(
        name = row(idx + 0)(Column.columnToOption(Column.columnToString)),
        statement = row(idx + 1)(Column.columnToOption(Column.columnToString)),
        prepareTime = row(idx + 2)(Column.columnToOption(TypoOffsetDateTime.column)),
        parameterTypes = row(idx + 3)(Column.columnToOption(TypoRegtype.arrayColumn)),
        fromSql = row(idx + 4)(Column.columnToOption(Column.columnToBoolean)),
        genericPlans = row(idx + 5)(Column.columnToOption(Column.columnToLong)),
        customPlans = row(idx + 6)(Column.columnToOption(Column.columnToLong))
      )
    )
  }
  implicit lazy val writes: OWrites[PgPreparedStatementsViewRow] = OWrites[PgPreparedStatementsViewRow](o =>
    new JsObject(ListMap[String, JsValue](
      "name" -> Writes.OptionWrites(Writes.StringWrites).writes(o.name),
      "statement" -> Writes.OptionWrites(Writes.StringWrites).writes(o.statement),
      "prepare_time" -> Writes.OptionWrites(TypoOffsetDateTime.writes).writes(o.prepareTime),
      "parameter_types" -> Writes.OptionWrites(Writes.arrayWrites[TypoRegtype](implicitly, TypoRegtype.writes)).writes(o.parameterTypes),
      "from_sql" -> Writes.OptionWrites(Writes.BooleanWrites).writes(o.fromSql),
      "generic_plans" -> Writes.OptionWrites(Writes.LongWrites).writes(o.genericPlans),
      "custom_plans" -> Writes.OptionWrites(Writes.LongWrites).writes(o.customPlans)
    ))
  )
}
