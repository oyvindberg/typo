/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package custom
package domains

import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class DomainsSqlRow(
  /** Points to [[pg_catalog.pg_namespace.PgNamespaceRow.nspname]]
      debug: {"baseColumnName":"nspname","baseRelationName":"pg_catalog.pg_namespace","columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"schema","columnName":"schema","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0,"tableName":"pg_namespace"} */
  schema: String,
  /** Points to [[pg_catalog.pg_type.PgTypeRow.typname]]
      debug: {"baseColumnName":"typname","baseRelationName":"pg_catalog.pg_type","columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"name","columnName":"name","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0,"tableName":"pg_type"} */
  name: String,
  /** Points to [[pg_catalog.pg_type.PgTypeRow.typname]]
      debug: {"baseColumnName":"typname","baseRelationName":"pg_catalog.pg_type","columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"type","columnName":"type","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0,"tableName":"pg_type"} */
  `type`: String,
  /** Points to [[pg_catalog.pg_collation.PgCollationRow.collname]]
      debug: {"baseColumnName":"collname","baseRelationName":"pg_catalog.pg_collation","columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"collation","columnName":"collation","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0,"tableName":"pg_collation"} */
  collation: Option[String],
  /** Points to [[pg_catalog.pg_type.PgTypeRow.typnotnull]]
      debug: {"baseColumnName":"typnotnull","baseRelationName":"pg_catalog.pg_type","columnClassName":"java.lang.Boolean","columnDisplaySize":1,"columnLabel":"isNotNull","columnName":"isNotNull","columnType":"Bit","columnTypeName":"bool","format":0,"isAutoIncrement":false,"isCaseSensitive":false,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":1,"scale":0,"tableName":"pg_type"} */
  isNotNull: Boolean,
  /** Points to [[pg_catalog.pg_type.PgTypeRow.typdefault]]
      debug: {"baseColumnName":"typdefault","baseRelationName":"pg_catalog.pg_type","columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"default","columnName":"default","columnType":"VarChar","columnTypeName":"text","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"Nullable","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0,"tableName":"pg_type"} */
  default: Option[String],
  /** Points to [[pg_catalog.pg_constraint.PgConstraintRow.conname]]
      debug: {"baseColumnName":"conname","baseRelationName":"pg_catalog.pg_constraint","columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"constraintName","columnName":"constraintName","columnType":"VarChar","columnTypeName":"name","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NoNulls","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0,"tableName":"pg_constraint"} */
  constraintName: Option[String],
  /** debug: {"columnClassName":"java.lang.String","columnDisplaySize":2147483647,"columnLabel":"constraintDefinition","columnName":"constraintDefinition","columnType":"VarChar","columnTypeName":"text","format":0,"isAutoIncrement":false,"isCaseSensitive":true,"isCurrency":false,"isDefinitelyWritable":false,"isNullable":"NullableUnknown","isReadOnly":false,"isSearchable":true,"isSigned":false,"isWritable":true,"precision":2147483647,"scale":0} */
  constraintDefinition: /* nullability unknown */ Option[String]
)

object DomainsSqlRow {
  implicit val oFormat: OFormat[DomainsSqlRow] = new OFormat[DomainsSqlRow]{
    override def writes(o: DomainsSqlRow): JsObject =
      Json.obj(
        "schema" -> o.schema,
        "name" -> o.name,
        "type" -> o.`type`,
        "collation" -> o.collation,
        "isNotNull" -> o.isNotNull,
        "default" -> o.default,
        "constraintName" -> o.constraintName,
        "constraintDefinition" -> o.constraintDefinition
      )
  
    override def reads(json: JsValue): JsResult[DomainsSqlRow] = {
      JsResult.fromTry(
        Try(
          DomainsSqlRow(
            schema = json.\("schema").as[String],
            name = json.\("name").as[String],
            `type` = json.\("type").as[String],
            collation = json.\("collation").toOption.map(_.as[String]),
            isNotNull = json.\("isNotNull").as[Boolean],
            default = json.\("default").toOption.map(_.as[String]),
            constraintName = json.\("constraintName").toOption.map(_.as[String]),
            constraintDefinition = json.\("constraintDefinition").toOption.map(_.as[String])
          )
        )
      )
    }
  }
}
